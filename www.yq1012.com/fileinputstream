<!DOCTYPE HTML>
<html>
<head>
<meta charset="UTF-8">
<link rel="dns-prefetch" href="//apps.bdimg.com">
<meta http-equiv="X-UA-Compatible" content="IE=11,IE=10,IE=9,IE=8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0">
<meta name="apple-mobile-web-app-title" content="程序员一代码搬运工">
<meta http-equiv="Cache-Control" content="no-siteapp">
<title>8.5 面向字节流的应用-程序员一代码搬运工</title>
<link rel='dns-prefetch' href='//www.yq1012.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel='stylesheet' id='wp-block-library-css'  href='http://www.yq1012.com/wp-includes/css/dist/block-library/style.min.css?ver=5.2.9' type='text/css' media='all' />
<link rel='stylesheet' id='_bootstrap-css'  href='http://www.yq1012.com/wp-content/themes/duxnew/css/bootstrap.min.css?ver=6.1' type='text/css' media='all' />
<link rel='stylesheet' id='_fontawesome-css'  href='http://www.yq1012.com/wp-content/themes/duxnew/css/font-awesome.min.css?ver=6.1' type='text/css' media='all' />
<link rel='stylesheet' id='_main-css'  href='http://www.yq1012.com/wp-content/themes/duxnew/css/main.css?ver=6.1' type='text/css' media='all' />
<link rel='stylesheet' id='enlighterjs-css'  href='http://www.yq1012.com/wp-content/plugins/enlighter/cache/enlighterjs.min.css?ver=0A0B0C' type='text/css' media='all' />
<script type='text/javascript' src='http://www.yq1012.com/wp-content/themes/duxnew/js/libs/jquery.min.js?ver=6.1'></script>
<link rel='https://api.w.org/' href='http://www.yq1012.com/wp-json/' />
<link rel="canonical" href="http://www.yq1012.com/fileinputstream" />
<link rel='shortlink' href='http://www.yq1012.com/?p=3612' />
<link rel="alternate" type="application/json+oembed" href="http://www.yq1012.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fwww.yq1012.com%2Ffileinputstream" />
<link rel="alternate" type="text/xml+oembed" href="http://www.yq1012.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fwww.yq1012.com%2Ffileinputstream&#038;format=xml" />
<meta name="description" content="文件输入输出流 文件输入输出流 FileInputStream 和 FileOutputStream 负责完成对本地磁盘文件的顺序输入输出操作。  【例 10-5】通过程序创建一个文件，从键盘输入字符，当遇到字符“#”时结束，在屏幕上显示该文件的所有内容 【例 10-5】通过程序创建一个文件，从键盘输入字符，当遇到字符“#”时结束，在屏幕上显示该文件的所有内容。 //********** ep10">
<link rel="shortcut icon" href="http://www.yq1012.com/favicon.ico">
<!--[if lt IE 9]><script src="http://www.yq1012.com/wp-content/themes/duxnew/js/libs/html5.min.js"></script><![endif]-->
</head>
<body class="page-template page-template-pages page-template-java page-template-pagesjava-php page page-id-3612 m-excerpt-cat comment-open site-layout-2 text-justify-on m-sidebar">
<header class="header">
	<div class="container">
		<div class="logo"><a href="http://www.yq1012.com" title="程序员一代码搬运工
                   【Java学习心得和Java学习技术个人总结】"><img src="http://www.yq1012.com/wp-content/uploads/2015/09/logo.png" alt="程序员一代码搬运工
                   【Java学习心得和Java学习技术个人总结】">程序员一代码搬运工</a></div>		<div class="brand">程序员一代码搬运工<br>                   【Java学习心得和Java学习技术个人总结】</div>		<ul class="site-nav site-navbar">
			<li id="menu-item-7" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-7"><a title="java学习" href="http://www.yq1012.com/">java首页</a></li>
<li id="menu-item-3736" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-3736"><a href="http://www.yq1012.com/javalanguage">java手册</a></li>
<li id="menu-item-16" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-16"><a title="javappt" href="http://www.yq1012.com/java/jichu">java基础</a>
<ul class="sub-menu">
	<li id="menu-item-701" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-701"><a href="http://www.yq1012.com/java/myssh">java三层</a></li>
	<li id="menu-item-19" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-19"><a title="wenti" href="http://www.yq1012.com/java/question">java问题</a></li>
	<li id="menu-item-108" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-108"><a href="http://www.yq1012.com/java/shuju">java数据</a></li>
</ul>
</li>
<li id="menu-item-4744" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-4744"><a href="http://www.yq1012.com/java/mianshizhuanti">面试专题</a></li>
<li id="menu-item-3735" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-3735"><a href="http://tool.yq1012.com">java工具</a></li>
<li id="menu-item-129" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-129"><a title="shizhan" href="http://www.yq1012.com/java/shizhan">java实战</a></li>
							<li class="navto-search"><a href="javascript:;" class="search-show active"><i class="fa fa-search"></i></a></li>
					</ul>
				<div class="topbar">
			<ul class="site-nav topmenu">
											</ul>
					</div>
						<i class="fa fa-bars m-icon-nav"></i>
			</div>
</header>
<div class="site-search">
	<div class="container">
		<form method="get" class="site-search-form" action="http://www.yq1012.com/" ><input class="search-input" name="s" type="text" placeholder="输入关键字" value=""><button class="search-btn" type="submit"><i class="fa fa-search"></i></button></form>	</div>
</div><section class="container container-page">
	<div class="pageside">
	<div class="pagemenus">
		<ul class="pagemenu">
			
<li class="page_item page-item-3459"><a href="http://www.yq1012.com/javalanguage">1.1 Java语言概述</a></li>
<li class="page_item page-item-3462"><a href="http://www.yq1012.com/jvm">1.2 Java虚拟机以及跨平台原理</a></li>
<li class="page_item page-item-3466"><a href="http://www.yq1012.com/fangxiang">1.3 Java的主要就业方向</a></li>
<li class="page_item page-item-3469"><a href="http://www.yq1012.com/version">1.4Java的不同版本：J2SE、J2EE、J2ME的区别</a></li>
<li class="page_item page-item-3471"><a href="http://www.yq1012.com/huanjing">1.5 Java开发环境搭建</a></li>
<li class="page_item page-item-3473"><a href="http://www.yq1012.com/helloworld">1.6 第一个Java程序示例</a></li>
<li class="page_item page-item-3475"><a href="http://www.yq1012.com/objectgainian">1.7 Java类和对象的概念</a></li>
<li class="page_item page-item-3478"><a href="http://www.yq1012.com/jdk">1.8 Java类库及其组织结构</a></li>
<li class="page_item page-item-3481"><a href="http://www.yq1012.com/import">1.9 Java import</a></li>
<li class="page_item page-item-3484"><a href="http://www.yq1012.com/numtype">2.1 Java数据类型以及变量的定义</a></li>
<li class="page_item page-item-3486"><a href="http://www.yq1012.com/zhuanhuan">2.2 Java数据类型转换</a></li>
<li class="page_item page-item-3489"><a href="http://www.yq1012.com/yunsuanfu">2.3 Java运算符</a></li>
<li class="page_item page-item-3491"><a href="http://www.yq1012.com/liucheng">2.4 Java流程控制</a></li>
<li class="page_item page-item-3493"><a href="http://www.yq1012.com/array">2.5 Java数组的定义和使用</a></li>
<li class="page_item page-item-3495"><a href="http://www.yq1012.com/string">2.6 Java字符串(String)</a></li>
<li class="page_item page-item-3497"><a href="http://www.yq1012.com/stringbuffer">2.7 Java StringBuffer与StringBuider</a></li>
<li class="page_item page-item-3499"><a href="http://www.yq1012.com/faction">2.8 强调一下编程风格</a></li>
<li class="page_item page-item-3501"><a href="http://www.yq1012.com/class">3.1 Java类的定义及其实例化</a></li>
<li class="page_item page-item-3503"><a href="http://www.yq1012.com/public">3.2 Java访问修饰符</a></li>
<li class="page_item page-item-3505"><a href="http://www.yq1012.com/var">3.3 Java变量的作用域</a></li>
<li class="page_item page-item-3507"><a href="http://www.yq1012.com/keyword">3.4 Java this关键字详解</a></li>
<li class="page_item page-item-3509"><a href="http://www.yq1012.com/load">3.5 Java方法重载</a></li>
<li class="page_item page-item-3511"><a href="http://www.yq1012.com/order">3.6 Java类的基本运行顺序</a></li>
<li class="page_item page-item-3513"><a href="http://www.yq1012.com/packing">3.7 Java包装类、拆箱和装箱详解</a></li>
<li class="page_item page-item-3516"><a href="http://www.yq1012.com/package">3.8 再谈Java包</a></li>
<li class="page_item page-item-3518"><a href="http://www.yq1012.com/rule">3.9 源文件的声明规则</a></li>
<li class="page_item page-item-3520"><a href="http://www.yq1012.com/extends">4.1 继承的概念与实现</a></li>
<li class="page_item page-item-3522"><a href="http://www.yq1012.com/super">4.2 Java super关键字</a></li>
<li class="page_item page-item-3524"><a href="http://www.yq1012.com/overload">4.3 继承中的方法的覆盖和重载</a></li>
<li class="page_item page-item-3527"><a href="http://www.yq1012.com/duotai">4.4 多态和动态绑定</a></li>
<li class="page_item page-item-3529"><a href="http://www.yq1012.com/instanceof">4.5 instanceof 运算符</a></li>
<li class="page_item page-item-3531"><a href="http://www.yq1012.com/duotaizhuanhuan">4.6 多态对象的类型转换</a></li>
<li class="page_item page-item-3533"><a href="http://www.yq1012.com/static">4.7 Java static关键字</a></li>
<li class="page_item page-item-3535"><a href="http://www.yq1012.com/final">4.8 Java final关键字</a></li>
<li class="page_item page-item-3537"><a href="http://www.yq1012.com/object">4.9 Java Object类</a></li>
<li class="page_item page-item-3539"><a href="http://www.yq1012.com/internalclass">5.1 Java内部类及其实例化</a></li>
<li class="page_item page-item-3541"><a href="http://www.yq1012.com/internaltype">5.2 内部类的分类</a></li>
<li class="page_item page-item-3543"><a href="http://www.yq1012.com/abstractclass">5.3 抽象类的概念和使用</a></li>
<li class="page_item page-item-3545"><a href="http://www.yq1012.com/interface">5.4 接口的概念和使用</a></li>
<li class="page_item page-item-3547"><a href="http://www.yq1012.com/interfaceabstract">5.5 接口和抽象类的区别</a></li>
<li class="page_item page-item-3549"><a href="http://www.yq1012.com/generic">5.6 Java 泛型</a></li>
<li class="page_item page-item-3551"><a href="http://www.yq1012.com/genericparam">5.7 泛型通配符和类型参数的范围</a></li>
<li class="page_item page-item-3554"><a href="http://www.yq1012.com/exception">6.1 异常处理基础</a></li>
<li class="page_item page-item-3576"><a href="http://www.yq1012.com/inexception">6.10 Java的内置异常</a></li>
<li class="page_item page-item-3578"><a href="http://www.yq1012.com/newexception">6.11 创建自己的异常子类</a></li>
<li class="page_item page-item-3580"><a href="http://www.yq1012.com/assert">6.12 断言</a></li>
<li class="page_item page-item-3556"><a href="http://www.yq1012.com/exceptiontype">6.2 异常类型</a></li>
<li class="page_item page-item-3558"><a href="http://www.yq1012.com/try">6.3 未被捕获的异常</a></li>
<li class="page_item page-item-3560"><a href="http://www.yq1012.com/catch">6.4 try和catch的使用</a></li>
<li class="page_item page-item-3562"><a href="http://www.yq1012.com/catchmany">6.5 多重catch语句的使用</a></li>
<li class="page_item page-item-3564"><a href="http://www.yq1012.com/trymany">6.6 try语句的嵌套</a></li>
<li class="page_item page-item-3570"><a href="http://www.yq1012.com/throw">6.7 throw：异常的抛出</a></li>
<li class="page_item page-item-3572"><a href="http://www.yq1012.com/throws">6.8 throws子句</a></li>
<li class="page_item page-item-3574"><a href="http://www.yq1012.com/finally">6.9 finally块</a></li>
<li class="page_item page-item-3582"><a href="http://www.yq1012.com/thread">7.1 线程的概念</a></li>
<li class="page_item page-item-3600"><a href="http://www.yq1012.com/threaddeadlock">7.10 线程死锁</a></li>
<li class="page_item page-item-3602"><a href="http://www.yq1012.com/threadrestart">7.11 线程的挂起、恢复和终止</a></li>
<li class="page_item page-item-3584"><a href="http://www.yq1012.com/threadmodel">7.2 Java线程模型</a></li>
<li class="page_item page-item-3586"><a href="http://www.yq1012.com/threadmain">7.3 主线程</a></li>
<li class="page_item page-item-3588"><a href="http://www.yq1012.com/threadnew">7.4 创建线程</a></li>
<li class="page_item page-item-3590"><a href="http://www.yq1012.com/threadnewmany">7.5 创建多线程</a></li>
<li class="page_item page-item-3592"><a href="http://www.yq1012.com/threadutil">7.6 isAlive()和join()的使用</a></li>
<li class="page_item page-item-3594"><a href="http://www.yq1012.com/threadpri">7.7 线程优先级</a></li>
<li class="page_item page-item-3596"><a href="http://www.yq1012.com/threadsyc">7.8 线程同步</a></li>
<li class="page_item page-item-3598"><a href="http://www.yq1012.com/threadtx">7.9 线程间通信</a></li>
<li class="page_item page-item-3604"><a href="http://www.yq1012.com/file">8.1 输入输出基本概念</a></li>
<li class="page_item page-item-3606"><a href="http://www.yq1012.com/inputstram">8.2 面向字符的输入流</a></li>
<li class="page_item page-item-3608"><a href="http://www.yq1012.com/outputstream">8.3 面向字符的输出流</a></li>
<li class="page_item page-item-3610"><a href="http://www.yq1012.com/inoutstream">8.4 面向字节的输入输出流</a></li>
<li class="page_item page-item-3612 current_page_item"><a href="http://www.yq1012.com/fileinputstream" aria-current="page">8.5 面向字节流的应用</a></li>
<li class="page_item page-item-3614"><a href="http://www.yq1012.com/fileandcategory">8.6 文件与目录管理</a></li>
<li class="page_item page-item-3616"><a href="http://www.yq1012.com/readandwrite">8.7 文件的随机读写</a></li>
<li class="page_item page-item-3618"><a href="http://www.yq1012.com/gzip">8.8 文件的压缩处理</a></li>
<li class="page_item page-item-3620"><a href="http://www.yq1012.com/javautil">9.1 Java基础类库</a></li>
<li class="page_item page-item-3622"><a href="http://www.yq1012.com/javalang">9.2 Java语言包(java.lang)简介</a></li>
<li class="page_item page-item-3625"><a href="http://www.yq1012.com/dateutil">9.3 日期和时间类</a></li>
<li class="page_item page-item-3627"><a href="http://www.yq1012.com/hashtable">9.4 哈希表及其应用</a></li>
<li class="page_item page-item-3001"><a href="http://www.yq1012.com/javashuji">Java书籍推荐</a></li>
<li class="page_item page-item-3905"><a href="http://www.yq1012.com/singleton">java单例模式</a></li>
<li class="page_item page-item-3911"><a href="http://www.yq1012.com/mianshi_chengfabiao">java打印乘法表</a></li>
<li class="page_item page-item-3917"><a href="http://www.yq1012.com/mianshi_shuixianhua">java打印水仙花</a></li>
<li class="page_item page-item-3907"><a href="http://www.yq1012.com/mianshi_lingxing">java打印菱形</a></li>
<li class="page_item page-item-3920"><a href="http://www.yq1012.com/mainshi_paixu">java排序打印</a></li>
<li class="page_item page-item-3946"><a href="http://www.yq1012.com/mianshi_keguanti">java面试规划客观题</a></li>
<li class="page_item page-item-3943"><a href="http://www.yq1012.com/mianshi_jsp">jsp常见面试点</a></li>
<li class="page_item page-item-3348"><a href="http://www.yq1012.com/linuxshuji">Linux书籍推荐</a></li>
<li class="page_item page-item-3901"><a href="http://www.yq1012.com/mianshi_listmap">list和map</a></li>
<li class="page_item page-item-3892"><a href="http://www.yq1012.com/mianshi_overload">Overload 和 和 Override 的区 的区别</a></li>
<li class="page_item page-item-4071"><a href="http://www.yq1012.com/buy_qq">QQ插件在线演示视频页面</a></li>
<li class="page_item page-item-3940"><a href="http://www.yq1012.com/mianshi_request">Request 对象的主要方法</a></li>
<li class="page_item page-item-3938"><a href="http://www.yq1012.com/mianshi_servlet">servlet面试要点</a></li>
<li class="page_item page-item-3359"><a href="http://www.yq1012.com/jiazhiguan">价值观</a></li>
<li class="page_item page-item-3888"><a href="http://www.yq1012.com/mianshi_4">作用域 public ，private ，protected</a></li>
<li class="page_item page-item-3350"><a href="http://www.yq1012.com/about">关于我们</a></li>
<li class="page_item page-item-2059"><a href="http://www.yq1012.com/hezuo">商务合作</a></li>
<li class="page_item page-item-3896"><a href="http://www.yq1012.com/mianshi_datatype">基本的数据类型</a></li>
<li class="page_item page-item-3355"><a href="http://www.yq1012.com/shenming">版权申明</a></li>
<li class="page_item page-item-3352"><a href="http://www.yq1012.com/liuyanban">留言版</a></li>
<li class="page_item page-item-3361"><a href="http://www.yq1012.com/licheng">网站历程</a></li>
<li class="page_item page-item-3357"><a href="http://www.yq1012.com/lianxi">联系我们</a></li>
<li class="page_item page-item-3875"><a href="http://www.yq1012.com/mianshi_1">说说&#038;和&#038;&#038;的区别</a></li>
<li class="page_item page-item-3883"><a href="http://www.yq1012.com/mianshi_3">静态变量和实例变量的区别</a></li>

		</ul>
	</div>
</div>	<div class="content">
				<header class="article-header">
			<h1 class="article-title"><a href="http://www.yq1012.com/fileinputstream">8.5 面向字节流的应用</a></h1>
		</header>
		<article class="article-content">
			<div id="art-body">
<h2>文件输入输出流</h2>
<p>文件输入输出流 FileInputStream 和 FileOutputStream 负责完成对本地磁盘文件的顺序输入输出操作。</p>
<p>【例 10-5】通过程序创建一个文件，从键盘输入字符，当遇到字符“#”时结束，在屏幕上显示该文件的所有内容</p>
<pre class="lang:java decode:true ">【例 10-5】通过程序创建一个文件，从键盘输入字符，当遇到字符“#”时结束，在屏幕上显示该文件的所有内容。
//********** ep10_5.java **********
import java.io.*;
class ep10_5{
    public static void main(String args[]){
        char ch;
        int data;
        try{
            FileInputStream a=new FileInputStream(FileDescriptor.in);  //创建文件输入流对象
            FileOutputStream b=new FileOutputStream("ep10_5");  //创建文件输出流对象
            System.out.println("请输入字符，以#号结束：");
            while((ch=(char)a.read())!='#'){
                b.write(ch);
            }
            a.close();
            b.close();
            System.out.println();
            FileInputStream c=new FileInputStream("ep10_5");
            FileOutputStream d=new FileOutputStream(FileDescriptor.out);
            while(c.available()&gt;0){
               data=c.read();
               d.write(data);
           }
           c.close();d.close();
       }
       catch(FileNotFoundException e){
          System.out.println("找不到该文件！");
       }
       catch(IOException e){}
    }
}</pre>
<p>&nbsp;</p>
<p>运行后在程序目录建立一个名称为 ep10_5 的文件，运行结果如图 10-8 所示：</p>
<div><a href="http://www.yq1012.com/wp-content/uploads/2016/10/12.jpg"><img class="aligncenter size-full wp-image-3737" src="http://www.yq1012.com/wp-content/uploads/2016/10/12.jpg" alt="1" width="279" height="159" srcset="http://www.yq1012.com/wp-content/uploads/2016/10/12.jpg 279w, http://www.yq1012.com/wp-content/uploads/2016/10/12-220x125.jpg 220w" sizes="(max-width: 279px) 100vw, 279px" /></a>图 10-8  例 10_5 运行结果</p>
</div>
<p>FileDescriptor 是 java.io 中的一个类，该类不能实例化，其中包含三个静态成员：in、out 和err，分别对应于标准输入流、标准输出流和标准错误流，利用它们可以在标准输入输出流上建立文件输入输出流，实现键盘输入或屏幕输出操作。</p>
<p>【例 10-6】实现对二进制图形文件（.gif）的备份</p>
<pre class="lang:java decode:true ">【例 10-6】实现对二进制图形文件（.gif）的备份。
//********** ep10_6.java **********
import java.io.*;
class ep10_6{
    public static void main(String args[]) throws IOException{
        FileInputStream a=new FileInputStream("ep10_6.gif");
        FileOutputStream b=new FileOutputStream("ep10_6_a.gif");
        System.out.println("文件的大小为："+a.available());
        byte c[]=new byte[a.available()];
        a.read(c);  //将图形文件读入数组
        b.write(c);  //将数组中的数据写入到新文件中
        System.out.println("文件已经被更名复制！");
        a.close();
        b.close();
    }
}</pre>
<p>&nbsp;</p>
<p>运行后在程序目录备份了一个名称为 ep10_6_a.gif 的文件，运行结果如图 10-9 所示：</p>
<div><a href="http://www.yq1012.com/wp-content/uploads/2016/10/17.png"><img class="aligncenter size-full wp-image-3739" src="http://www.yq1012.com/wp-content/uploads/2016/10/17.png" alt="1" width="198" height="150" /></a>图 10-9  例 10_6 运行结果</p>
</div>
<h2>过滤流</h2>
<p>FilterInputStream 和 FileOutputStream 是 InputStream 和 OutputStream 的直接子类，分别实现了在数据的读、写操作的同时能对所传输的数据做指定类型或格式的转换，即可实现对二进制字节数据的理解和编码转换。</p>
<p>常用的两个过滤流是数据输入流 DataInputStream 和数据输出流 DataOutputStream。其构造方法为：<br />
DataInputStream(InputStream in);  //创建新输入流，从指定的输入流 in 读数据<br />
DataOutputStream(OutputStream out);  //创建新输出流，向指定的输出流 out 写数据</p>
<p>由于 DataInputStream 和 DataOutputStream 分别实现了 DataInput 和 DataOutput 两个接口（这两个接口规定了基本类型数据的输入输出方法）中定义的独立于具体机器的带格式的读写操作，从而实现了对不同类型数据的读写。由构造方法可以看出，输入输出流分别作为数据输入输出流的构造方法参数，即作为过滤流必须与相应的数据流相连。</p>
<p>DataInputStream 和 DataOutputStream 类提供了很多个针对不同类型数据的读写方法，具体内容读者可参看 Java 的帮助文档。</p>
<p>【例 10-7】将三个 int 型数字 100，0，-100 写入数据文件 ep10_6.dat 中</p>
<pre class="lang:java decode:true ">【例 10-7】将三个 int 型数字 100，0，-100 写入数据文件 ep10_6.dat 中。
//********** ep10_7.java **********
import java.io.*;
class ep10_7{
    public static void main(String args[]){
        String fileName="ep10_7.dat";
        int value1=100,value2=0,value3=-100;
        try{
            //将 DataOutputStream 与 FileOutputStream 连接输出不同类型的数据
            DataOutputStream a=new DataOutputStream(new FileOutputStream(fileName));
            a.writeInt(value1);
            a.writeInt(value2);
            a.writeInt(value3);
            a.close();
        }
        catch(IOException i){
            System.out.println("出现错误!"+fileName);
        }
    }
}</pre>
<p>&nbsp;</p>
<p>运行后在程序目录中生成数据文件 ep10_7.dat，用文本编辑器打开后发现内容为二进制的：<br />
00 00 00 64 00 00 00 00 FF FF FF 9C。</p>
<p>【例 10-8】读取数据文件 ep10_6.dat 中的三个 int 型数字，求和并显示</p>
<pre class="lang:java decode:true ">【例 10-8】读取数据文件 ep10_6.dat 中的三个 int 型数字，求和并显示。
//********** ep10_8.java **********
import java.io.*;
class ep10_8{
    public static void main(String args[]){
        String fileName="D:\\myjava/ep10_7.dat";
        int sum=0;
        try{
            DataInputStream a=new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));
            sum+=a.readInt();
            sum+=a.readInt();
            sum+=a.readInt();
            System.out.println("三个数的和为："+sum);
            a.close();
        }
        catch(IOException e){
            System.out.println("出现错误！"+fileName);
        }
    }
}</pre>
<p>&nbsp;</p>
<p>运行结果：<br />
三个数的和为：0</p>
<p>readInt 方法可以从输入输出流中读入 4 个字节并将其作为 int 型数据直接参与运算。由于已经知道文件中有 3 个数据，所以可以使用 3 个读入语句，但若只知道文件中是 int 型数据而不知道数据的个数时该怎么办呢？因为 DataInputStream 的读入操作如遇到文件结尾就会抛出 EOFException 异常，所以可将读操作放入 try 中。</p>
<pre class="lang:java decode:true ">try{
while(true)
sum+=a.readInt();
}
catch(EOFException e){
System.out.pritnln("三个数的和为："+sum);
a.close();
}</pre>
<p>EOFException 是 IOException 的子类，只有文件结束异常时才会被捕捉到，但如果没有读到文件结尾，在读取过程中出现异常就属于 IOException。</p>
<p>【例 10-9】从键盘输入一个整数，求该数的各位数字之和</p>
<pre class="lang:java decode:true">【例 10-9】从键盘输入一个整数，求该数的各位数字之和。
//********** ep10_9.java **********
import java.io.*;
class ep10_9{
    public static void main(String args[]) throws IOException{
        DataInputStream a=new DataInputStream(System.in);
        System.out.print("请输入一个整数：");
        int b=a.readInt();
        int sum=0;
        int c=b;
        while(c&gt;0){
            int d=c%10;  //取最低位
            c=c/10;  //去掉最低位
            sum=sum+d;  //累加各位之和
        }
        System.out.println(b+"的各位数字之和="+sum);
    }
}</pre>
<p>&nbsp;</p>
<p>运行结果：<br />
请输入一个整数：26<br />
842403082 的各位数字之和=31</p>
<p>需要注意的是，输入的数据 26 为变成了 842403082，原因在于输入数据不符合基本类型数据的格式，从键盘提供的数据是字符的字节码表示方式，若输入 26，只代表 2 和 6 两个字符的字节数据，而不是代表整数 26 的字节码。</p>
<p>若要从键盘得到整数需要先读取字符串，再利用其他方法将字符串转化为整数。</p>
<h2>标准输入输出</h2>
<p>System.in、System.out、System.err 这 3 个标准输入输流对象定义在 java.lang.System 包中，这 3 个对象在 Java 源程序编译时会被自动加载。</p>
<ol>
<li>标准输入：标准输入 System.in 是 BufferedInputStream 类的对象，当程序需要从键盘上读入数据时，只需要调用 System.in 的 read()方法即可，该方法从键盘缓冲区读入一个字节的二进制数据，返回以此字节为低位字节，高位字节为 0 的整型数据。</li>
<li>标准输出：标准输出 System.out 是打印输出流 PrintStream 类的对象。PrintStream 类是过滤输出流类 FilterOutputStream 的一个子类，其中定义了向屏幕输出不同类型数据的方法print()和 println()。</li>
<li>标准错误输出：System.err 用于为用户显示错误信息，也是由 PrintStream 类派生出来的错误流。Err 流的作用是使 print()和 println()将信息输出到 err 流并显示在屏幕上，以方便用户使用和调试程序。</li>
</ol>
<p>【例 10-10】输入一串字符显示出来，并显示 System.in 和 System.out 所属的类</p>
<pre class="lang:java decode:true ">【例 10-10】输入一串字符显示出来，并显示 System.in 和 System.out 所属的类。
//********** ep10_10.java **********
import java.io.*;
class ep10_10{
    public static void main(String args[]){
        try{
            byte a[]=new byte[128];  //设置输入缓冲区
            System.out.print("请输入字符串：");
            int count =System.in.read(a);  //读取标准输入输出流
            System.out.println("输入的是：");
            for(int i=0;i&lt;count;i++)
               System.out.print(a[i]+"");  //输出数组元素的 ASCII 值
            System.out.println();
            for(int i=0;i&lt;count-2;i++)  //不显示回车和换行符
                System.out.print((char)a[i]+"");  //按字符方式输出元素
            System.out.println();
            System.out.println("输入的字符个数为："+count);
            Class InClass=System.in.getClass();
            Class OutClass=System.out.getClass();
            System.out.println("in 所在的类为："+InClass.toString());
            System.out.println("out 所在的类为："+OutClass.toString());
        }
        catch(IOException e){}
    }
}</pre>
<p>&nbsp;</p>
<p>运行结果如图 10-10 所示：</p>
<div><a href="http://www.yq1012.com/wp-content/uploads/2016/10/18.png"><img class="aligncenter size-full wp-image-3740" src="http://www.yq1012.com/wp-content/uploads/2016/10/18.png" alt="1" width="398" height="215" srcset="http://www.yq1012.com/wp-content/uploads/2016/10/18.png 398w, http://www.yq1012.com/wp-content/uploads/2016/10/18-300x162.png 300w, http://www.yq1012.com/wp-content/uploads/2016/10/18-220x118.png 220w" sizes="(max-width: 398px) 100vw, 398px" /></a>图 10-10  例 10_10 运行结果</p>
</div>
<p>需要注意的是，输入了 3 个字符按回车后，输出的结果显示为 5 个字符。这是由于 Java 中回车被当作两个字符，一个是 ASCⅡ为 13 的回车符，一个是值为 10 的换行符。程序中 getClass()和 ToString()是 Object 类的方法，作用分别是返回当前对象所对应的类和返回当前对象的字符串表示。</p>
</div>
<div id="ad-arc-bottom" class="clearfix"></div>
		</article>
						<p>&nbsp;</p>
			</div>
</section>

<footer class="footer">
	<div class="container">
						<p>&copy; 2021 <a href="http://www.yq1012.com">程序员一代码搬运工</a> &nbsp; 版权所有，保留一切权利！ <a href="http://www.beian.miit.gov.cn" title="工信部网站备案" rel="external nofollow" target="_blank">闽ICP备14003021号-1</a> 技术支持 <a href="http://www.yq1012.com/about" target="_blank">java学习</a> 
</p>
	</div>
</footer>


<div class="rollbar rollbar-rb"><ul><li><a target="_blank" href="http://wpa.qq.com/msgrd?v=3&uin=742275749&site=qq&menu=yes"><i class="fa fa-qq"></i><span>QQ咨询</span></a><h6>QQ咨询<i></i></h6></li><li class="rollbar-totop"><a href="javascript:(jsui.scrollTo());"><i class="fa fa-angle-up"></i><span>回顶</span></a><h6>回顶部<i></i></h6></li></ul></div>
<script>
window.jsui={
	www: 'http://www.yq1012.com',
	uri: 'http://www.yq1012.com/wp-content/themes/duxnew',
	ver: '6.1',
	roll: [],
	ajaxpager: '0',
	url_rp: 'http://www.yq1012.com/hezuo'
};
</script>
<script type='text/javascript' src='http://www.yq1012.com/wp-content/themes/duxnew/js/libs/bootstrap.min.js?ver=6.1'></script>
<script type='text/javascript' src='http://www.yq1012.com/wp-content/themes/duxnew/js/loader.js?ver=6.1'></script>
<script type='text/javascript' src='http://www.yq1012.com/wp-content/plugins/enlighter/cache/enlighterjs.min.js?ver=0A0B0C'></script>
<script type='text/javascript'>
!function(e,n){if("undefined"!=typeof EnlighterJS){var o={"selectors":{"block":"pre.EnlighterJSRAW","inline":"code.EnlighterJSRAW"},"options":{"indent":4,"ampersandCleanup":true,"linehover":true,"rawcodeDbclick":false,"textOverflow":"break","linenumbers":true,"theme":"enlighter","language":"generic","retainCssClasses":false,"collapse":false,"toolbarOuter":"","toolbarTop":"{BTN_RAW}{BTN_COPY}{BTN_WINDOW}{BTN_WEBSITE}","toolbarBottom":""}};(e.EnlighterJSINIT=function(){EnlighterJS.init(o.selectors.block,o.selectors.inline,o.options)})()}else{(n&&(n.error||n.log)||function(){})("Error: EnlighterJS resources not loaded yet!")}}(window,console);
</script>
<script type='text/javascript' src='http://www.yq1012.com/wp-includes/js/wp-embed.min.js?ver=5.2.9'></script>
</body>
</html>