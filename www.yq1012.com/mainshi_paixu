<!DOCTYPE HTML>
<html>
<head>
<meta charset="UTF-8">
<link rel="dns-prefetch" href="//apps.bdimg.com">
<meta http-equiv="X-UA-Compatible" content="IE=11,IE=10,IE=9,IE=8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0">
<meta name="apple-mobile-web-app-title" content="程序员一代码搬运工">
<meta http-equiv="Cache-Control" content="no-siteapp">
<title>java排序打印-程序员一代码搬运工</title>
<link rel='dns-prefetch' href='//www.yq1012.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel='stylesheet' id='wp-block-library-css'  href='http://www.yq1012.com/wp-includes/css/dist/block-library/style.min.css?ver=5.2.9' type='text/css' media='all' />
<link rel='stylesheet' id='_bootstrap-css'  href='http://www.yq1012.com/wp-content/themes/duxnew/css/bootstrap.min.css?ver=6.1' type='text/css' media='all' />
<link rel='stylesheet' id='_fontawesome-css'  href='http://www.yq1012.com/wp-content/themes/duxnew/css/font-awesome.min.css?ver=6.1' type='text/css' media='all' />
<link rel='stylesheet' id='_main-css'  href='http://www.yq1012.com/wp-content/themes/duxnew/css/main.css?ver=6.1' type='text/css' media='all' />
<link rel='stylesheet' id='enlighterjs-css'  href='http://www.yq1012.com/wp-content/plugins/enlighter/cache/enlighterjs.min.css?ver=0A0B0C' type='text/css' media='all' />
<script type='text/javascript' src='http://www.yq1012.com/wp-content/themes/duxnew/js/libs/jquery.min.js?ver=6.1'></script>
<link rel='https://api.w.org/' href='http://www.yq1012.com/wp-json/' />
<link rel="canonical" href="http://www.yq1012.com/mainshi_paixu" />
<link rel='shortlink' href='http://www.yq1012.com/?p=3920' />
<link rel="alternate" type="application/json+oembed" href="http://www.yq1012.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fwww.yq1012.com%2Fmainshi_paixu" />
<link rel="alternate" type="text/xml+oembed" href="http://www.yq1012.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fwww.yq1012.com%2Fmainshi_paixu&#038;format=xml" />
<meta name="description" content="1， 直接插入排序 （1）基本思想：在要排序的一组数中，假设前面(n-1)[n&gt;=2] 个数已经是排  好顺序的，现在要把第n个数插到前面的有序数中，使得这n个数  也是排好顺序的。如此反复循环，直到全部排好顺序。  （2）实例   package demo;  public class Paixu {  	public static void main(String[] args) { 	">
<link rel="shortcut icon" href="http://www.yq1012.com/favicon.ico">
<!--[if lt IE 9]><script src="http://www.yq1012.com/wp-content/themes/duxnew/js/libs/html5.min.js"></script><![endif]-->
</head>
<body class="page-template page-template-pages page-template-mianshi page-template-pagesmianshi-php page page-id-3920 m-excerpt-cat comment-open site-layout-2 text-justify-on m-sidebar">
<header class="header">
	<div class="container">
		<div class="logo"><a href="http://www.yq1012.com" title="程序员一代码搬运工
                   【Java学习心得和Java学习技术个人总结】"><img src="http://www.yq1012.com/wp-content/uploads/2015/09/logo.png" alt="程序员一代码搬运工
                   【Java学习心得和Java学习技术个人总结】">程序员一代码搬运工</a></div>		<div class="brand">程序员一代码搬运工<br>                   【Java学习心得和Java学习技术个人总结】</div>		<ul class="site-nav site-navbar">
			<li id="menu-item-7" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-7"><a title="java学习" href="http://www.yq1012.com/">java首页</a></li>
<li id="menu-item-3736" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-3736"><a href="http://www.yq1012.com/javalanguage">java手册</a></li>
<li id="menu-item-16" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-16"><a title="javappt" href="http://www.yq1012.com/java/jichu">java基础</a>
<ul class="sub-menu">
	<li id="menu-item-701" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-701"><a href="http://www.yq1012.com/java/myssh">java三层</a></li>
	<li id="menu-item-19" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-19"><a title="wenti" href="http://www.yq1012.com/java/question">java问题</a></li>
	<li id="menu-item-108" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-108"><a href="http://www.yq1012.com/java/shuju">java数据</a></li>
</ul>
</li>
<li id="menu-item-4744" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-4744"><a href="http://www.yq1012.com/java/mianshizhuanti">面试专题</a></li>
<li id="menu-item-3735" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-3735"><a href="http://tool.yq1012.com">java工具</a></li>
<li id="menu-item-129" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-129"><a title="shizhan" href="http://www.yq1012.com/java/shizhan">java实战</a></li>
							<li class="navto-search"><a href="javascript:;" class="search-show active"><i class="fa fa-search"></i></a></li>
					</ul>
				<div class="topbar">
			<ul class="site-nav topmenu">
											</ul>
					</div>
						<i class="fa fa-bars m-icon-nav"></i>
			</div>
</header>
<div class="site-search">
	<div class="container">
		<form method="get" class="site-search-form" action="http://www.yq1012.com/" ><input class="search-input" name="s" type="text" placeholder="输入关键字" value=""><button class="search-btn" type="submit"><i class="fa fa-search"></i></button></form>	</div>
</div><section class="container container-page">
	<div class="pageside">
	<div class="pagemenus">
		<ul class="pagemenu">
			
<li class="page_item page-item-3459"><a href="http://www.yq1012.com/javalanguage">1.1 Java语言概述</a></li>
<li class="page_item page-item-3462"><a href="http://www.yq1012.com/jvm">1.2 Java虚拟机以及跨平台原理</a></li>
<li class="page_item page-item-3466"><a href="http://www.yq1012.com/fangxiang">1.3 Java的主要就业方向</a></li>
<li class="page_item page-item-3469"><a href="http://www.yq1012.com/version">1.4Java的不同版本：J2SE、J2EE、J2ME的区别</a></li>
<li class="page_item page-item-3471"><a href="http://www.yq1012.com/huanjing">1.5 Java开发环境搭建</a></li>
<li class="page_item page-item-3473"><a href="http://www.yq1012.com/helloworld">1.6 第一个Java程序示例</a></li>
<li class="page_item page-item-3475"><a href="http://www.yq1012.com/objectgainian">1.7 Java类和对象的概念</a></li>
<li class="page_item page-item-3478"><a href="http://www.yq1012.com/jdk">1.8 Java类库及其组织结构</a></li>
<li class="page_item page-item-3481"><a href="http://www.yq1012.com/import">1.9 Java import</a></li>
<li class="page_item page-item-3484"><a href="http://www.yq1012.com/numtype">2.1 Java数据类型以及变量的定义</a></li>
<li class="page_item page-item-3486"><a href="http://www.yq1012.com/zhuanhuan">2.2 Java数据类型转换</a></li>
<li class="page_item page-item-3489"><a href="http://www.yq1012.com/yunsuanfu">2.3 Java运算符</a></li>
<li class="page_item page-item-3491"><a href="http://www.yq1012.com/liucheng">2.4 Java流程控制</a></li>
<li class="page_item page-item-3493"><a href="http://www.yq1012.com/array">2.5 Java数组的定义和使用</a></li>
<li class="page_item page-item-3495"><a href="http://www.yq1012.com/string">2.6 Java字符串(String)</a></li>
<li class="page_item page-item-3497"><a href="http://www.yq1012.com/stringbuffer">2.7 Java StringBuffer与StringBuider</a></li>
<li class="page_item page-item-3499"><a href="http://www.yq1012.com/faction">2.8 强调一下编程风格</a></li>
<li class="page_item page-item-3501"><a href="http://www.yq1012.com/class">3.1 Java类的定义及其实例化</a></li>
<li class="page_item page-item-3503"><a href="http://www.yq1012.com/public">3.2 Java访问修饰符</a></li>
<li class="page_item page-item-3505"><a href="http://www.yq1012.com/var">3.3 Java变量的作用域</a></li>
<li class="page_item page-item-3507"><a href="http://www.yq1012.com/keyword">3.4 Java this关键字详解</a></li>
<li class="page_item page-item-3509"><a href="http://www.yq1012.com/load">3.5 Java方法重载</a></li>
<li class="page_item page-item-3511"><a href="http://www.yq1012.com/order">3.6 Java类的基本运行顺序</a></li>
<li class="page_item page-item-3513"><a href="http://www.yq1012.com/packing">3.7 Java包装类、拆箱和装箱详解</a></li>
<li class="page_item page-item-3516"><a href="http://www.yq1012.com/package">3.8 再谈Java包</a></li>
<li class="page_item page-item-3518"><a href="http://www.yq1012.com/rule">3.9 源文件的声明规则</a></li>
<li class="page_item page-item-3520"><a href="http://www.yq1012.com/extends">4.1 继承的概念与实现</a></li>
<li class="page_item page-item-3522"><a href="http://www.yq1012.com/super">4.2 Java super关键字</a></li>
<li class="page_item page-item-3524"><a href="http://www.yq1012.com/overload">4.3 继承中的方法的覆盖和重载</a></li>
<li class="page_item page-item-3527"><a href="http://www.yq1012.com/duotai">4.4 多态和动态绑定</a></li>
<li class="page_item page-item-3529"><a href="http://www.yq1012.com/instanceof">4.5 instanceof 运算符</a></li>
<li class="page_item page-item-3531"><a href="http://www.yq1012.com/duotaizhuanhuan">4.6 多态对象的类型转换</a></li>
<li class="page_item page-item-3533"><a href="http://www.yq1012.com/static">4.7 Java static关键字</a></li>
<li class="page_item page-item-3535"><a href="http://www.yq1012.com/final">4.8 Java final关键字</a></li>
<li class="page_item page-item-3537"><a href="http://www.yq1012.com/object">4.9 Java Object类</a></li>
<li class="page_item page-item-3539"><a href="http://www.yq1012.com/internalclass">5.1 Java内部类及其实例化</a></li>
<li class="page_item page-item-3541"><a href="http://www.yq1012.com/internaltype">5.2 内部类的分类</a></li>
<li class="page_item page-item-3543"><a href="http://www.yq1012.com/abstractclass">5.3 抽象类的概念和使用</a></li>
<li class="page_item page-item-3545"><a href="http://www.yq1012.com/interface">5.4 接口的概念和使用</a></li>
<li class="page_item page-item-3547"><a href="http://www.yq1012.com/interfaceabstract">5.5 接口和抽象类的区别</a></li>
<li class="page_item page-item-3549"><a href="http://www.yq1012.com/generic">5.6 Java 泛型</a></li>
<li class="page_item page-item-3551"><a href="http://www.yq1012.com/genericparam">5.7 泛型通配符和类型参数的范围</a></li>
<li class="page_item page-item-3554"><a href="http://www.yq1012.com/exception">6.1 异常处理基础</a></li>
<li class="page_item page-item-3576"><a href="http://www.yq1012.com/inexception">6.10 Java的内置异常</a></li>
<li class="page_item page-item-3578"><a href="http://www.yq1012.com/newexception">6.11 创建自己的异常子类</a></li>
<li class="page_item page-item-3580"><a href="http://www.yq1012.com/assert">6.12 断言</a></li>
<li class="page_item page-item-3556"><a href="http://www.yq1012.com/exceptiontype">6.2 异常类型</a></li>
<li class="page_item page-item-3558"><a href="http://www.yq1012.com/try">6.3 未被捕获的异常</a></li>
<li class="page_item page-item-3560"><a href="http://www.yq1012.com/catch">6.4 try和catch的使用</a></li>
<li class="page_item page-item-3562"><a href="http://www.yq1012.com/catchmany">6.5 多重catch语句的使用</a></li>
<li class="page_item page-item-3564"><a href="http://www.yq1012.com/trymany">6.6 try语句的嵌套</a></li>
<li class="page_item page-item-3570"><a href="http://www.yq1012.com/throw">6.7 throw：异常的抛出</a></li>
<li class="page_item page-item-3572"><a href="http://www.yq1012.com/throws">6.8 throws子句</a></li>
<li class="page_item page-item-3574"><a href="http://www.yq1012.com/finally">6.9 finally块</a></li>
<li class="page_item page-item-3582"><a href="http://www.yq1012.com/thread">7.1 线程的概念</a></li>
<li class="page_item page-item-3600"><a href="http://www.yq1012.com/threaddeadlock">7.10 线程死锁</a></li>
<li class="page_item page-item-3602"><a href="http://www.yq1012.com/threadrestart">7.11 线程的挂起、恢复和终止</a></li>
<li class="page_item page-item-3584"><a href="http://www.yq1012.com/threadmodel">7.2 Java线程模型</a></li>
<li class="page_item page-item-3586"><a href="http://www.yq1012.com/threadmain">7.3 主线程</a></li>
<li class="page_item page-item-3588"><a href="http://www.yq1012.com/threadnew">7.4 创建线程</a></li>
<li class="page_item page-item-3590"><a href="http://www.yq1012.com/threadnewmany">7.5 创建多线程</a></li>
<li class="page_item page-item-3592"><a href="http://www.yq1012.com/threadutil">7.6 isAlive()和join()的使用</a></li>
<li class="page_item page-item-3594"><a href="http://www.yq1012.com/threadpri">7.7 线程优先级</a></li>
<li class="page_item page-item-3596"><a href="http://www.yq1012.com/threadsyc">7.8 线程同步</a></li>
<li class="page_item page-item-3598"><a href="http://www.yq1012.com/threadtx">7.9 线程间通信</a></li>
<li class="page_item page-item-3604"><a href="http://www.yq1012.com/file">8.1 输入输出基本概念</a></li>
<li class="page_item page-item-3606"><a href="http://www.yq1012.com/inputstram">8.2 面向字符的输入流</a></li>
<li class="page_item page-item-3608"><a href="http://www.yq1012.com/outputstream">8.3 面向字符的输出流</a></li>
<li class="page_item page-item-3610"><a href="http://www.yq1012.com/inoutstream">8.4 面向字节的输入输出流</a></li>
<li class="page_item page-item-3612"><a href="http://www.yq1012.com/fileinputstream">8.5 面向字节流的应用</a></li>
<li class="page_item page-item-3614"><a href="http://www.yq1012.com/fileandcategory">8.6 文件与目录管理</a></li>
<li class="page_item page-item-3616"><a href="http://www.yq1012.com/readandwrite">8.7 文件的随机读写</a></li>
<li class="page_item page-item-3618"><a href="http://www.yq1012.com/gzip">8.8 文件的压缩处理</a></li>
<li class="page_item page-item-3620"><a href="http://www.yq1012.com/javautil">9.1 Java基础类库</a></li>
<li class="page_item page-item-3622"><a href="http://www.yq1012.com/javalang">9.2 Java语言包(java.lang)简介</a></li>
<li class="page_item page-item-3625"><a href="http://www.yq1012.com/dateutil">9.3 日期和时间类</a></li>
<li class="page_item page-item-3627"><a href="http://www.yq1012.com/hashtable">9.4 哈希表及其应用</a></li>
<li class="page_item page-item-3001"><a href="http://www.yq1012.com/javashuji">Java书籍推荐</a></li>
<li class="page_item page-item-3905"><a href="http://www.yq1012.com/singleton">java单例模式</a></li>
<li class="page_item page-item-3911"><a href="http://www.yq1012.com/mianshi_chengfabiao">java打印乘法表</a></li>
<li class="page_item page-item-3917"><a href="http://www.yq1012.com/mianshi_shuixianhua">java打印水仙花</a></li>
<li class="page_item page-item-3907"><a href="http://www.yq1012.com/mianshi_lingxing">java打印菱形</a></li>
<li class="page_item page-item-3920 current_page_item"><a href="http://www.yq1012.com/mainshi_paixu" aria-current="page">java排序打印</a></li>
<li class="page_item page-item-3946"><a href="http://www.yq1012.com/mianshi_keguanti">java面试规划客观题</a></li>
<li class="page_item page-item-3943"><a href="http://www.yq1012.com/mianshi_jsp">jsp常见面试点</a></li>
<li class="page_item page-item-3348"><a href="http://www.yq1012.com/linuxshuji">Linux书籍推荐</a></li>
<li class="page_item page-item-3901"><a href="http://www.yq1012.com/mianshi_listmap">list和map</a></li>
<li class="page_item page-item-3892"><a href="http://www.yq1012.com/mianshi_overload">Overload 和 和 Override 的区 的区别</a></li>
<li class="page_item page-item-4071"><a href="http://www.yq1012.com/buy_qq">QQ插件在线演示视频页面</a></li>
<li class="page_item page-item-3940"><a href="http://www.yq1012.com/mianshi_request">Request 对象的主要方法</a></li>
<li class="page_item page-item-3938"><a href="http://www.yq1012.com/mianshi_servlet">servlet面试要点</a></li>
<li class="page_item page-item-3359"><a href="http://www.yq1012.com/jiazhiguan">价值观</a></li>
<li class="page_item page-item-3888"><a href="http://www.yq1012.com/mianshi_4">作用域 public ，private ，protected</a></li>
<li class="page_item page-item-3350"><a href="http://www.yq1012.com/about">关于我们</a></li>
<li class="page_item page-item-2059"><a href="http://www.yq1012.com/hezuo">商务合作</a></li>
<li class="page_item page-item-3896"><a href="http://www.yq1012.com/mianshi_datatype">基本的数据类型</a></li>
<li class="page_item page-item-3355"><a href="http://www.yq1012.com/shenming">版权申明</a></li>
<li class="page_item page-item-3352"><a href="http://www.yq1012.com/liuyanban">留言版</a></li>
<li class="page_item page-item-3361"><a href="http://www.yq1012.com/licheng">网站历程</a></li>
<li class="page_item page-item-3357"><a href="http://www.yq1012.com/lianxi">联系我们</a></li>
<li class="page_item page-item-3875"><a href="http://www.yq1012.com/mianshi_1">说说&#038;和&#038;&#038;的区别</a></li>
<li class="page_item page-item-3883"><a href="http://www.yq1012.com/mianshi_3">静态变量和实例变量的区别</a></li>

		</ul>
	</div>
</div>	<div class="content">
				<header class="article-header">
			<h1 class="article-title"><a href="http://www.yq1012.com/mainshi_paixu">java排序打印</a></h1>
		</header>
		<article class="article-content">
			<p><a href="http://www.yq1012.com/wp-content/uploads/2016/11/zong.png"><img class="aligncenter size-full wp-image-3936" src="http://www.yq1012.com/wp-content/uploads/2016/11/zong.png" alt="zong" width="599" height="468" srcset="http://www.yq1012.com/wp-content/uploads/2016/11/zong.png 599w, http://www.yq1012.com/wp-content/uploads/2016/11/zong-300x234.png 300w, http://www.yq1012.com/wp-content/uploads/2016/11/zong-191x150.png 191w" sizes="(max-width: 599px) 100vw, 599px" /></a></p>
<h2>1， 直接插入排序</h2>
<p>（1）基本思想：在要排序的一组数中，假设前面(n-1)[n&gt;=2] 个数已经是排</p>
<p>好顺序的，现在要把第n个数插到前面的有序数中，使得这n个数</p>
<p>也是排好顺序的。如此反复循环，直到全部排好顺序。</p>
<p>（2）实例</p>
<p><a href="http://www.yq1012.com/wp-content/uploads/2016/11/115.png"><img class="aligncenter size-full wp-image-3926" src="http://www.yq1012.com/wp-content/uploads/2016/11/115.png" alt="1" width="547" height="224" srcset="http://www.yq1012.com/wp-content/uploads/2016/11/115.png 547w, http://www.yq1012.com/wp-content/uploads/2016/11/115-300x122.png 300w, http://www.yq1012.com/wp-content/uploads/2016/11/115-220x90.png 220w" sizes="(max-width: 547px) 100vw, 547px" /></a></p>
<pre class="lang:java decode:true ">package demo;

public class Paixu {

	public static void main(String[] args) {
		insertSort();
	}

	public static void insertSort(){  
		    int a[]={49,38,65,97,76,13,27,49,78,34,12,64,5,4,62,99,98,54,56,17,18,23,34,15,35,25,53,51};  
		    int temp=0;  
		    for(int i=1;i&lt;a.length;i++){  
		       int j=i-1;  
		       temp=a[i]; 
		       for(;j&gt;=0&amp;&amp;temp&lt;a[j];j--){  
		       a[j+1]=a[j];                       //将大于temp的值整体后移一个单位  
		       }  
		       a[j+1]=temp;  
		    }  
		    for(int i=0;i&lt;a.length;i++)  
		       System.out.println(a[i]);  
		}

}
</pre>
<p>&nbsp;</p>
<h2>2，希尔排序（最小增量排序）</h2>
<p>（1）基本思想：算法先将要排序的一组数按某个增量d（n/2,n为要排序数的个数）分成若干组，每组中记录的下标相差d.对每组中全部元素进行直接插入排序，然后再用一个较小的增量（d/2）对它进行分组，在每组中再进行直接插入排序。当增量减到1时，进行直接插入排序后，排序完成。</p>
<p>（2）实例：<a href="http://www.yq1012.com/wp-content/uploads/2016/11/24.png"><img class="aligncenter size-full wp-image-3927" src="http://www.yq1012.com/wp-content/uploads/2016/11/24.png" alt="2" width="553" height="267" srcset="http://www.yq1012.com/wp-content/uploads/2016/11/24.png 553w, http://www.yq1012.com/wp-content/uploads/2016/11/24-300x144.png 300w, http://www.yq1012.com/wp-content/uploads/2016/11/24-220x106.png 220w" sizes="(max-width: 553px) 100vw, 553px" /></a></p>
<pre class="lang:java decode:true">package test;

public class test {

	public static void main(String[] args) {
		int a[]={1,54,6,3,78,34,12,45,56,100};  
	    double d1=a.length;  
	    int temp=0;  
	    while(true){  
	        d1= Math.ceil(d1/2);  
	        int d=(int) d1;  
	        for(int x=0;x&lt;d;x++){  
	            for(int i=x+d;i&lt;a.length;i+=d){  
	                int j=i-d;  
	                temp=a[i];  
	                for(;j&gt;=0&amp;&amp;temp&lt;a[j];j-=d){  
	                a[j+d]=a[j];  
	                }  
	                a[j+d]=temp;  
	            }  
	        }  
	        if(d==1)  
	            break;  
	    }  
	    for(int i=0;i&lt;a.length;i++)  
	        System.out.println(a[i]);  
	}  
	
}
</pre>
<p>&nbsp;</p>
<h2>3.简单选择排序</h2>
<p>（1）基本思想：在要排序的一组数中，选出最小的一个数与第一个位置的数交换；</p>
<p>然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。</p>
<p>（2）实例：<a href="http://www.yq1012.com/wp-content/uploads/2016/11/34.png"><img class="aligncenter size-full wp-image-3928" src="http://www.yq1012.com/wp-content/uploads/2016/11/34.png" alt="3" width="547" height="210" srcset="http://www.yq1012.com/wp-content/uploads/2016/11/34.png 547w, http://www.yq1012.com/wp-content/uploads/2016/11/34-300x115.png 300w, http://www.yq1012.com/wp-content/uploads/2016/11/34-220x84.png 220w" sizes="(max-width: 547px) 100vw, 547px" /></a></p>
<pre class="lang:java decode:true ">package test;

public class test {

	public static void main(String[] args) {
		   int a[]={1,54,6,3,78,34,12,45};  
	        int position=0;  
	        for(int i=0;i&lt;a.length;i++){  

	            int j=i+1;  
	            position=i;  
	            int temp=a[i];  
	            for(;j&lt;a.length;j++){  
	            if(a[j]&lt;temp){  
	                temp=a[j];  
	                position=j;  
	            }  
	            }  
	            a[position]=a[i];  
	            a[i]=temp;  
	        }  
	        for(int i=0;i&lt;a.length;i++)  
	            System.out.println(a[i]); 
	}  
	
}
</pre>
<p>&nbsp;</p>
<h2>4，堆排序</h2>
<p align="left">（1）基本思想：堆排序是一种树形选择排序，是对直接选择排序的有效改进。</p>
<p align="left">堆的定义如下：具有n个元素的序列（h1,h2,…,hn),当且仅当满足（hi&gt;=h2i,hi&gt;=2i+1）或（hi&lt;=h2i,hi&lt;=2i+1） (i=1,2,…,n/2)时称之为堆。在这里只讨论满足前者条件的堆。由堆的定义可以看出，堆顶元素（即第一个元素）必为最大项（大顶堆）。完全二叉树可以很直观地表示堆的结构。堆顶为根，其它为左子树、右子树。初始时把要排序的数的序列看作是一棵顺序存储的二叉树，调整它们的存储序，使之成为一个堆，这时堆的根节点的数最大。然后将根节点与堆的最后一个节点交换。然后对前面(n-1)个数重新调整使之成为堆。依此类推，直到只有两个节点的堆，并对它们作交换，最后得到有n个节点的有序序列。从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆的渗透函数，二是反复调用渗透函数实现排序的函数。</p>
<p align="left">（2）实例：</p>
<p align="left">初始序列：46,79,56,38,40,84</p>
<p align="left">建堆：</p>
<p><a href="http://www.yq1012.com/wp-content/uploads/2016/11/4-1.png"><img class="aligncenter size-full wp-image-3929" src="http://www.yq1012.com/wp-content/uploads/2016/11/4-1.png" alt="4-1" width="337" height="223" srcset="http://www.yq1012.com/wp-content/uploads/2016/11/4-1.png 337w, http://www.yq1012.com/wp-content/uploads/2016/11/4-1-300x198.png 300w, http://www.yq1012.com/wp-content/uploads/2016/11/4-1-220x145.png 220w" sizes="(max-width: 337px) 100vw, 337px" /></a></p>
<p align="left">交换，从堆中踢出最大数</p>
<p align="left"><a href="http://www.yq1012.com/wp-content/uploads/2016/11/4-2.png"><img class="aligncenter size-full wp-image-3930" src="http://www.yq1012.com/wp-content/uploads/2016/11/4-2.png" alt="4-2" width="440" height="296" srcset="http://www.yq1012.com/wp-content/uploads/2016/11/4-2.png 440w, http://www.yq1012.com/wp-content/uploads/2016/11/4-2-300x201.png 300w, http://www.yq1012.com/wp-content/uploads/2016/11/4-2-220x148.png 220w" sizes="(max-width: 440px) 100vw, 440px" /></a></p>
<p align="left"><a href="http://www.yq1012.com/wp-content/uploads/2016/11/4-3.png"><img class="aligncenter size-full wp-image-3931" src="http://www.yq1012.com/wp-content/uploads/2016/11/4-3.png" alt="4-3" width="378" height="265" srcset="http://www.yq1012.com/wp-content/uploads/2016/11/4-3.png 378w, http://www.yq1012.com/wp-content/uploads/2016/11/4-3-300x210.png 300w, http://www.yq1012.com/wp-content/uploads/2016/11/4-3-213x150.png 213w" sizes="(max-width: 378px) 100vw, 378px" /></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p align="left">依次类推：最后堆中剩余的最后两个结点交换，踢出一个，排序完成。</p>
<pre class="lang:java decode:true ">package test;

import java.util.Arrays;

public class test {

	   
	    public  void heapSort(int[] a){  
	        System.out.println("开始排序");  
	        int arrayLength=a.length;  
	        //循环建堆  
	        for(int i=0;i&lt;arrayLength-1;i++){  
	            //建堆  

	      buildMaxHeap(a,arrayLength-1-i);  
	            //交换堆顶和最后一个元素  
	            swap(a,0,arrayLength-1-i);  
	            System.out.println(Arrays.toString(a));  
	        }  
	    }  

	    private  void swap(int[] data, int i, int j) {  
	        // TODO Auto-generated method stub  
	        int tmp=data[i];  
	        data[i]=data[j];  
	        data[j]=tmp;  
	    }  
	    //对data数组从0到lastIndex建大顶堆  
	    private void buildMaxHeap(int[] data, int lastIndex) {  
	        // TODO Auto-generated method stub  
	        //从lastIndex处节点（最后一个节点）的父节点开始  
	        for(int i=(lastIndex-1)/2;i&gt;=0;i--){  
	            //k保存正在判断的节点  
	            int k=i;  
	            //如果当前k节点的子节点存在  
	            while(k*2+1&lt;=lastIndex){  
	                //k节点的左子节点的索引  
	                int biggerIndex=2*k+1;  
	                //如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在  
	                if(biggerIndex&lt;lastIndex){  
	                    //若果右子节点的值较大  
	                    if(data[biggerIndex]&lt;data[biggerIndex+1]){  
	                        //biggerIndex总是记录较大子节点的索引  
	                        biggerIndex++;  
	                    }  
	                }  
	                //如果k节点的值小于其较大的子节点的值  
	                if(data[k]&lt;data[biggerIndex]){  
	                    //交换他们  
	                    swap(data,k,biggerIndex);  
	                    //将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值  
	                    k=biggerIndex;  
	                }else{  
	                    break;  
	                }  
	            }
	        }
	    }
	
	    public static void main(String[] args) {
		 	int a[]={49,38,65,97,76,13,27,49,78,34,12,64,5,4,62,99,98,54,56,17,18,23,34,15,35,25,53,51};  
		 	test t= new test();
	    	t.heapSort(a);
		}
}
</pre>
<p>&nbsp;</p>
<h2>5.冒泡排序</h2>
<p align="left">（1）基本思想：在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。</p>
<p align="left">（2）实例：</p>
<p><a href="http://www.yq1012.com/wp-content/uploads/2016/11/53.png"><img class="aligncenter size-full wp-image-3932" src="http://www.yq1012.com/wp-content/uploads/2016/11/53.png" alt="5" width="455" height="238" srcset="http://www.yq1012.com/wp-content/uploads/2016/11/53.png 455w, http://www.yq1012.com/wp-content/uploads/2016/11/53-300x156.png 300w, http://www.yq1012.com/wp-content/uploads/2016/11/53-220x115.png 220w" sizes="(max-width: 455px) 100vw, 455px" /></a></p>
<pre class="lang:java decode:true ">package test;

public class test {

	public static void main(String[] args) {
		int a[] = { 49, 38, 65, 97, 76, 13, 27, 49, 78, 34, 12, 64, 5, 4, 62, 99, 98, 54, 56, 17, 18, 23, 34, 15, 35,
				25, 53, 51 };
		int temp = 0;
		for (int i = 0; i &lt; a.length - 1; i++) {
			for (int j = 0; j &lt; a.length - 1 - i; j++) {
				if (a[j] &gt; a[j + 1]) {
					temp = a[j];
					a[j] = a[j + 1];
					a[j + 1] = temp;
				}
			}
		}
		for (int i = 0; i &lt; a.length; i++)
			System.out.println(a[i]);

	}
}
</pre>
<p>&nbsp;</p>
<h2 align="left">6.快速排序</h2>
<p>（1）基本思想：选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分。</p>
<p>（2）实例：</p>
<p><a href="http://www.yq1012.com/wp-content/uploads/2016/11/63.png"><img class="aligncenter size-full wp-image-3933" src="http://www.yq1012.com/wp-content/uploads/2016/11/63.png" alt="6" width="305" height="401" srcset="http://www.yq1012.com/wp-content/uploads/2016/11/63.png 305w, http://www.yq1012.com/wp-content/uploads/2016/11/63-228x300.png 228w, http://www.yq1012.com/wp-content/uploads/2016/11/63-114x150.png 114w" sizes="(max-width: 305px) 100vw, 305px" /></a></p>
<pre class="lang:java decode:true ">package test;

public class test {

	int a[] = { 49, 38, 65, 97, 76, 13, 27, 49, 78, 34, 12, 64, 5, 4, 62, 99, 98, 54, 56, 17, 18, 23, 34, 15, 35, 25,
			53, 51 };

	public  test(){  
	     quick(a);  
	     for(int i=0;i&lt;a.length;i++)  
	         System.out.println(a[i]);  
	 }

	public int getMiddle(int[] list, int low, int high) {
		int tmp = list[low]; // 数组的第一个作为中轴
		while (low &lt; high) {
			while (low &lt; high &amp;&amp; list[high] &gt;= tmp) {

				high--;
			}
			list[low] = list[high]; // 比中轴小的记录移到低端
			while (low &lt; high &amp;&amp; list[low] &lt;= tmp) {
				low++;
			}
			list[high] = list[low]; // 比中轴大的记录移到高端
		}
		list[low] = tmp; // 中轴记录到尾
		return low; // 返回中轴的位置
	}

	public void _quickSort(int[] list, int low, int high) {
		if (low &lt; high) {
			int middle = getMiddle(list, low, high); // 将list数组进行一分为二
			_quickSort(list, low, middle - 1); // 对低字表进行递归排序
			_quickSort(list, middle + 1, high); // 对高字表进行递归排序
		}
	}

	public void quick(int[] a2) {
		if (a2.length &gt; 0) { // 查看数组是否为空
			_quickSort(a2, 0, a2.length - 1);
		}
	}

	public static void main(String[] args) {
		test t= new test();
	}
}
</pre>
<p>&nbsp;</p>
<h2 align="left">7、归并排序</h2>
<p align="left">（1）基本排序：归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</p>
<p align="left">（2）实例：<a href="http://www.yq1012.com/wp-content/uploads/2016/11/73.png"><img class="aligncenter size-full wp-image-3934" src="http://www.yq1012.com/wp-content/uploads/2016/11/73.png" alt="7" width="402" height="202" srcset="http://www.yq1012.com/wp-content/uploads/2016/11/73.png 402w, http://www.yq1012.com/wp-content/uploads/2016/11/73-300x150.png 300w, http://www.yq1012.com/wp-content/uploads/2016/11/73-220x110.png 220w" sizes="(max-width: 402px) 100vw, 402px" /></a></p>
<pre class="lang:java decode:true ">package test;

import java.util.Arrays;

public class test {

	int a[]={49,38,65,97,76,13,27,49,78,34,12,64,5,4,62,99,98,54,56,17,18,23,34,15,35,25,53,51};  
	public  test(){  
	    sort(a,0,a.length-1);  
	    for(int i=0;i&lt;a.length;i++)  
	        System.out.println(a[i]);  
	}  
	public void sort(int[] data, int left, int right) {  
	    // TODO Auto-generated method stub  
	    if(left&lt;right){  
	        //找出中间索引  
	        int center=(left+right)/2;  
	        //对左边数组进行递归  
	        sort(data,left,center);  
	        //对右边数组进行递归  
	        sort(data,center+1,right);  
	        //合并  
	        merge(data,left,center,right);  

	    }  
	}  
	public void merge(int[] data, int left, int center, int right) {  
	    // TODO Auto-generated method stub  
	    int [] tmpArr=new int[data.length];  
	    int mid=center+1;  
	    //third记录中间数组的索引  
	    int third=left;  
	    int tmp=left;  
	    while(left&lt;=center&amp;&amp;mid&lt;=right){  

	   //从两个数组中取出最小的放入中间数组  
	        if(data[left]&lt;=data[mid]){  
	            tmpArr[third++]=data[left++];  
	        }else{  
	            tmpArr[third++]=data[mid++];  
	        }  
	    }  
	    //剩余部分依次放入中间数组  
	    while(mid&lt;=right){  
	        tmpArr[third++]=data[mid++];  
	    }  
	    while(left&lt;=center){  
	        tmpArr[third++]=data[left++];  
	    }  
	    //将中间数组中的内容复制回原数组  
	    while(tmp&lt;=right){  
	        data[tmp]=tmpArr[tmp++];  
	    }  
	    System.out.println(Arrays.toString(data));  
	}  
	public static void main(String[] args) {
		test t= new test();
	}
}
</pre>
<p>&nbsp;</p>
<h2 align="left">8、基数排序</h2>
<p align="left">（1）基本思想：将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后,数列就变成一个有序序列。</p>
<p align="left">（2）实例：<a href="http://www.yq1012.com/wp-content/uploads/2016/11/83.png"><img class="aligncenter size-full wp-image-3935" src="http://www.yq1012.com/wp-content/uploads/2016/11/83.png" alt="8" width="630" height="482" srcset="http://www.yq1012.com/wp-content/uploads/2016/11/83.png 630w, http://www.yq1012.com/wp-content/uploads/2016/11/83-300x229.png 300w, http://www.yq1012.com/wp-content/uploads/2016/11/83-196x150.png 196w" sizes="(max-width: 630px) 100vw, 630px" /></a></p>
<pre class="lang:java decode:true ">package test;

import java.util.ArrayList;
import java.util.List;

public class test {

	int a[] = { 49, 38, 65, 97, 76, 13, 27, 49, 78, 34, 12, 64, 5, 4, 62, 99, 98, 54, 101, 56, 17, 18, 23, 34, 15, 35,
			25, 53, 51 };

	public test(){  
	      sort(a);  
	      for(int i=0;i&lt;a.length;i++)  
	          System.out.println(a[i]);  
	  }

	public void sort(int[] array) {

		// 首先确定排序的趟数;
		int max = array[0];
		for (int i = 1; i &lt; array.length; i++) {
			if (array[i] &gt; max) {
				max = array[i];
			}
		}

		int time = 0;
		// 判断位数;
		while (max &gt; 0) {
			max /= 10;
			time++;
		}

		// 建立10个队列;
		List&lt;ArrayList&gt; queue = new ArrayList&lt;ArrayList&gt;();
		for (int i = 0; i &lt; 10; i++) {
			ArrayList&lt;Integer&gt; queue1 = new ArrayList&lt;Integer&gt;();
			queue.add(queue1);
		}

		// 进行time次分配和收集;
		for (int i = 0; i &lt; time; i++) {

			// 分配数组元素;
			for (int j = 0; j &lt; array.length; j++) {
				// 得到数字的第time+1位数;
				int x = array[j] % (int) Math.pow(10, i + 1) / (int) Math.pow(10, i);
				ArrayList&lt;Integer&gt; queue2 = queue.get(x);
				queue2.add(array[j]);
				queue.set(x, queue2);
			}
			int count = 0;// 元素计数器;
			// 收集队列元素;
			for (int k = 0; k &lt; 10; k++) {
				while (queue.get(k).size() &gt; 0) {
					ArrayList&lt;Integer&gt; queue3 = queue.get(k);
					array[count] = queue3.get(0);
					queue3.remove(0);
					count++;
				}
			}
		}

	}

	public static void main(String[] args) {
		test t = new test();
	}
}
</pre>
<p>&nbsp;</p>
<p><strong> </strong></p>
<p>&nbsp;</p>
		</article>
						<p>&nbsp;</p>
			</div>
</section>

<footer class="footer">
	<div class="container">
						<p>&copy; 2021 <a href="http://www.yq1012.com">程序员一代码搬运工</a> &nbsp; 版权所有，保留一切权利！ <a href="http://www.beian.miit.gov.cn" title="工信部网站备案" rel="external nofollow" target="_blank">闽ICP备14003021号-1</a> 技术支持 <a href="http://www.yq1012.com/about" target="_blank">java学习</a> 
</p>
	</div>
</footer>


<div class="rollbar rollbar-rb"><ul><li><a target="_blank" href="http://wpa.qq.com/msgrd?v=3&uin=742275749&site=qq&menu=yes"><i class="fa fa-qq"></i><span>QQ咨询</span></a><h6>QQ咨询<i></i></h6></li><li class="rollbar-totop"><a href="javascript:(jsui.scrollTo());"><i class="fa fa-angle-up"></i><span>回顶</span></a><h6>回顶部<i></i></h6></li></ul></div>
<script>
window.jsui={
	www: 'http://www.yq1012.com',
	uri: 'http://www.yq1012.com/wp-content/themes/duxnew',
	ver: '6.1',
	roll: [],
	ajaxpager: '0',
	url_rp: 'http://www.yq1012.com/hezuo'
};
</script>
<script type='text/javascript' src='http://www.yq1012.com/wp-content/themes/duxnew/js/libs/bootstrap.min.js?ver=6.1'></script>
<script type='text/javascript' src='http://www.yq1012.com/wp-content/themes/duxnew/js/loader.js?ver=6.1'></script>
<script type='text/javascript' src='http://www.yq1012.com/wp-content/plugins/enlighter/cache/enlighterjs.min.js?ver=0A0B0C'></script>
<script type='text/javascript'>
!function(e,n){if("undefined"!=typeof EnlighterJS){var o={"selectors":{"block":"pre.EnlighterJSRAW","inline":"code.EnlighterJSRAW"},"options":{"indent":4,"ampersandCleanup":true,"linehover":true,"rawcodeDbclick":false,"textOverflow":"break","linenumbers":true,"theme":"enlighter","language":"generic","retainCssClasses":false,"collapse":false,"toolbarOuter":"","toolbarTop":"{BTN_RAW}{BTN_COPY}{BTN_WINDOW}{BTN_WEBSITE}","toolbarBottom":""}};(e.EnlighterJSINIT=function(){EnlighterJS.init(o.selectors.block,o.selectors.inline,o.options)})()}else{(n&&(n.error||n.log)||function(){})("Error: EnlighterJS resources not loaded yet!")}}(window,console);
</script>
<script type='text/javascript' src='http://www.yq1012.com/wp-includes/js/wp-embed.min.js?ver=5.2.9'></script>
</body>
</html>