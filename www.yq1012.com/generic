<!DOCTYPE HTML>
<html>
<head>
<meta charset="UTF-8">
<link rel="dns-prefetch" href="//apps.bdimg.com">
<meta http-equiv="X-UA-Compatible" content="IE=11,IE=10,IE=9,IE=8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0">
<meta name="apple-mobile-web-app-title" content="程序员一代码搬运工">
<meta http-equiv="Cache-Control" content="no-siteapp">
<title>5.6 Java 泛型-程序员一代码搬运工</title>
<link rel='dns-prefetch' href='//www.yq1012.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel='stylesheet' id='wp-block-library-css'  href='http://www.yq1012.com/wp-includes/css/dist/block-library/style.min.css?ver=5.2.9' type='text/css' media='all' />
<link rel='stylesheet' id='_bootstrap-css'  href='http://www.yq1012.com/wp-content/themes/duxnew/css/bootstrap.min.css?ver=6.1' type='text/css' media='all' />
<link rel='stylesheet' id='_fontawesome-css'  href='http://www.yq1012.com/wp-content/themes/duxnew/css/font-awesome.min.css?ver=6.1' type='text/css' media='all' />
<link rel='stylesheet' id='_main-css'  href='http://www.yq1012.com/wp-content/themes/duxnew/css/main.css?ver=6.1' type='text/css' media='all' />
<link rel='stylesheet' id='enlighterjs-css'  href='http://www.yq1012.com/wp-content/plugins/enlighter/cache/enlighterjs.min.css?ver=0A0B0C' type='text/css' media='all' />
<script type='text/javascript' src='http://www.yq1012.com/wp-content/themes/duxnew/js/libs/jquery.min.js?ver=6.1'></script>
<link rel='https://api.w.org/' href='http://www.yq1012.com/wp-json/' />
<link rel="canonical" href="http://www.yq1012.com/generic" />
<link rel='shortlink' href='http://www.yq1012.com/?p=3549' />
<link rel="alternate" type="application/json+oembed" href="http://www.yq1012.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fwww.yq1012.com%2Fgeneric" />
<link rel="alternate" type="text/xml+oembed" href="http://www.yq1012.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fwww.yq1012.com%2Fgeneric&#038;format=xml" />
<meta name="description" content="我们知道，使用变量之前要定义，定义一个变量时必须要指明它的数据类型，什么样的数据类型赋给什么样的值。  假如我们现在要定义一个类来表示坐标，要求坐标的数据类型可以是整数、小数和字符串，例如：  	x = 10、y = 10 	x = 12.88、y = 129.65 	x = '东京180度'、y = '北纬210度'  针对不同的数据类型，除了借助方法重载，还可以借助自动装箱和向上转型。我们知道">
<link rel="shortcut icon" href="http://www.yq1012.com/favicon.ico">
<!--[if lt IE 9]><script src="http://www.yq1012.com/wp-content/themes/duxnew/js/libs/html5.min.js"></script><![endif]-->
</head>
<body class="page-template page-template-pages page-template-java page-template-pagesjava-php page page-id-3549 m-excerpt-cat comment-open site-layout-2 text-justify-on m-sidebar">
<header class="header">
	<div class="container">
		<div class="logo"><a href="http://www.yq1012.com" title="程序员一代码搬运工
                   【Java学习心得和Java学习技术个人总结】"><img src="http://www.yq1012.com/wp-content/uploads/2015/09/logo.png" alt="程序员一代码搬运工
                   【Java学习心得和Java学习技术个人总结】">程序员一代码搬运工</a></div>		<div class="brand">程序员一代码搬运工<br>                   【Java学习心得和Java学习技术个人总结】</div>		<ul class="site-nav site-navbar">
			<li id="menu-item-7" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-7"><a title="java学习" href="http://www.yq1012.com/">java首页</a></li>
<li id="menu-item-3736" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-3736"><a href="http://www.yq1012.com/javalanguage">java手册</a></li>
<li id="menu-item-16" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-16"><a title="javappt" href="http://www.yq1012.com/java/jichu">java基础</a>
<ul class="sub-menu">
	<li id="menu-item-701" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-701"><a href="http://www.yq1012.com/java/myssh">java三层</a></li>
	<li id="menu-item-19" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-19"><a title="wenti" href="http://www.yq1012.com/java/question">java问题</a></li>
	<li id="menu-item-108" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-108"><a href="http://www.yq1012.com/java/shuju">java数据</a></li>
</ul>
</li>
<li id="menu-item-4744" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-4744"><a href="http://www.yq1012.com/java/mianshizhuanti">面试专题</a></li>
<li id="menu-item-3735" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-3735"><a href="http://tool.yq1012.com">java工具</a></li>
<li id="menu-item-129" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-129"><a title="shizhan" href="http://www.yq1012.com/java/shizhan">java实战</a></li>
							<li class="navto-search"><a href="javascript:;" class="search-show active"><i class="fa fa-search"></i></a></li>
					</ul>
				<div class="topbar">
			<ul class="site-nav topmenu">
											</ul>
					</div>
						<i class="fa fa-bars m-icon-nav"></i>
			</div>
</header>
<div class="site-search">
	<div class="container">
		<form method="get" class="site-search-form" action="http://www.yq1012.com/" ><input class="search-input" name="s" type="text" placeholder="输入关键字" value=""><button class="search-btn" type="submit"><i class="fa fa-search"></i></button></form>	</div>
</div><section class="container container-page">
	<div class="pageside">
	<div class="pagemenus">
		<ul class="pagemenu">
			
<li class="page_item page-item-3459"><a href="http://www.yq1012.com/javalanguage">1.1 Java语言概述</a></li>
<li class="page_item page-item-3462"><a href="http://www.yq1012.com/jvm">1.2 Java虚拟机以及跨平台原理</a></li>
<li class="page_item page-item-3466"><a href="http://www.yq1012.com/fangxiang">1.3 Java的主要就业方向</a></li>
<li class="page_item page-item-3469"><a href="http://www.yq1012.com/version">1.4Java的不同版本：J2SE、J2EE、J2ME的区别</a></li>
<li class="page_item page-item-3471"><a href="http://www.yq1012.com/huanjing">1.5 Java开发环境搭建</a></li>
<li class="page_item page-item-3473"><a href="http://www.yq1012.com/helloworld">1.6 第一个Java程序示例</a></li>
<li class="page_item page-item-3475"><a href="http://www.yq1012.com/objectgainian">1.7 Java类和对象的概念</a></li>
<li class="page_item page-item-3478"><a href="http://www.yq1012.com/jdk">1.8 Java类库及其组织结构</a></li>
<li class="page_item page-item-3481"><a href="http://www.yq1012.com/import">1.9 Java import</a></li>
<li class="page_item page-item-3484"><a href="http://www.yq1012.com/numtype">2.1 Java数据类型以及变量的定义</a></li>
<li class="page_item page-item-3486"><a href="http://www.yq1012.com/zhuanhuan">2.2 Java数据类型转换</a></li>
<li class="page_item page-item-3489"><a href="http://www.yq1012.com/yunsuanfu">2.3 Java运算符</a></li>
<li class="page_item page-item-3491"><a href="http://www.yq1012.com/liucheng">2.4 Java流程控制</a></li>
<li class="page_item page-item-3493"><a href="http://www.yq1012.com/array">2.5 Java数组的定义和使用</a></li>
<li class="page_item page-item-3495"><a href="http://www.yq1012.com/string">2.6 Java字符串(String)</a></li>
<li class="page_item page-item-3497"><a href="http://www.yq1012.com/stringbuffer">2.7 Java StringBuffer与StringBuider</a></li>
<li class="page_item page-item-3499"><a href="http://www.yq1012.com/faction">2.8 强调一下编程风格</a></li>
<li class="page_item page-item-3501"><a href="http://www.yq1012.com/class">3.1 Java类的定义及其实例化</a></li>
<li class="page_item page-item-3503"><a href="http://www.yq1012.com/public">3.2 Java访问修饰符</a></li>
<li class="page_item page-item-3505"><a href="http://www.yq1012.com/var">3.3 Java变量的作用域</a></li>
<li class="page_item page-item-3507"><a href="http://www.yq1012.com/keyword">3.4 Java this关键字详解</a></li>
<li class="page_item page-item-3509"><a href="http://www.yq1012.com/load">3.5 Java方法重载</a></li>
<li class="page_item page-item-3511"><a href="http://www.yq1012.com/order">3.6 Java类的基本运行顺序</a></li>
<li class="page_item page-item-3513"><a href="http://www.yq1012.com/packing">3.7 Java包装类、拆箱和装箱详解</a></li>
<li class="page_item page-item-3516"><a href="http://www.yq1012.com/package">3.8 再谈Java包</a></li>
<li class="page_item page-item-3518"><a href="http://www.yq1012.com/rule">3.9 源文件的声明规则</a></li>
<li class="page_item page-item-3520"><a href="http://www.yq1012.com/extends">4.1 继承的概念与实现</a></li>
<li class="page_item page-item-3522"><a href="http://www.yq1012.com/super">4.2 Java super关键字</a></li>
<li class="page_item page-item-3524"><a href="http://www.yq1012.com/overload">4.3 继承中的方法的覆盖和重载</a></li>
<li class="page_item page-item-3527"><a href="http://www.yq1012.com/duotai">4.4 多态和动态绑定</a></li>
<li class="page_item page-item-3529"><a href="http://www.yq1012.com/instanceof">4.5 instanceof 运算符</a></li>
<li class="page_item page-item-3531"><a href="http://www.yq1012.com/duotaizhuanhuan">4.6 多态对象的类型转换</a></li>
<li class="page_item page-item-3533"><a href="http://www.yq1012.com/static">4.7 Java static关键字</a></li>
<li class="page_item page-item-3535"><a href="http://www.yq1012.com/final">4.8 Java final关键字</a></li>
<li class="page_item page-item-3537"><a href="http://www.yq1012.com/object">4.9 Java Object类</a></li>
<li class="page_item page-item-3539"><a href="http://www.yq1012.com/internalclass">5.1 Java内部类及其实例化</a></li>
<li class="page_item page-item-3541"><a href="http://www.yq1012.com/internaltype">5.2 内部类的分类</a></li>
<li class="page_item page-item-3543"><a href="http://www.yq1012.com/abstractclass">5.3 抽象类的概念和使用</a></li>
<li class="page_item page-item-3545"><a href="http://www.yq1012.com/interface">5.4 接口的概念和使用</a></li>
<li class="page_item page-item-3547"><a href="http://www.yq1012.com/interfaceabstract">5.5 接口和抽象类的区别</a></li>
<li class="page_item page-item-3549 current_page_item"><a href="http://www.yq1012.com/generic" aria-current="page">5.6 Java 泛型</a></li>
<li class="page_item page-item-3551"><a href="http://www.yq1012.com/genericparam">5.7 泛型通配符和类型参数的范围</a></li>
<li class="page_item page-item-3554"><a href="http://www.yq1012.com/exception">6.1 异常处理基础</a></li>
<li class="page_item page-item-3576"><a href="http://www.yq1012.com/inexception">6.10 Java的内置异常</a></li>
<li class="page_item page-item-3578"><a href="http://www.yq1012.com/newexception">6.11 创建自己的异常子类</a></li>
<li class="page_item page-item-3580"><a href="http://www.yq1012.com/assert">6.12 断言</a></li>
<li class="page_item page-item-3556"><a href="http://www.yq1012.com/exceptiontype">6.2 异常类型</a></li>
<li class="page_item page-item-3558"><a href="http://www.yq1012.com/try">6.3 未被捕获的异常</a></li>
<li class="page_item page-item-3560"><a href="http://www.yq1012.com/catch">6.4 try和catch的使用</a></li>
<li class="page_item page-item-3562"><a href="http://www.yq1012.com/catchmany">6.5 多重catch语句的使用</a></li>
<li class="page_item page-item-3564"><a href="http://www.yq1012.com/trymany">6.6 try语句的嵌套</a></li>
<li class="page_item page-item-3570"><a href="http://www.yq1012.com/throw">6.7 throw：异常的抛出</a></li>
<li class="page_item page-item-3572"><a href="http://www.yq1012.com/throws">6.8 throws子句</a></li>
<li class="page_item page-item-3574"><a href="http://www.yq1012.com/finally">6.9 finally块</a></li>
<li class="page_item page-item-3582"><a href="http://www.yq1012.com/thread">7.1 线程的概念</a></li>
<li class="page_item page-item-3600"><a href="http://www.yq1012.com/threaddeadlock">7.10 线程死锁</a></li>
<li class="page_item page-item-3602"><a href="http://www.yq1012.com/threadrestart">7.11 线程的挂起、恢复和终止</a></li>
<li class="page_item page-item-3584"><a href="http://www.yq1012.com/threadmodel">7.2 Java线程模型</a></li>
<li class="page_item page-item-3586"><a href="http://www.yq1012.com/threadmain">7.3 主线程</a></li>
<li class="page_item page-item-3588"><a href="http://www.yq1012.com/threadnew">7.4 创建线程</a></li>
<li class="page_item page-item-3590"><a href="http://www.yq1012.com/threadnewmany">7.5 创建多线程</a></li>
<li class="page_item page-item-3592"><a href="http://www.yq1012.com/threadutil">7.6 isAlive()和join()的使用</a></li>
<li class="page_item page-item-3594"><a href="http://www.yq1012.com/threadpri">7.7 线程优先级</a></li>
<li class="page_item page-item-3596"><a href="http://www.yq1012.com/threadsyc">7.8 线程同步</a></li>
<li class="page_item page-item-3598"><a href="http://www.yq1012.com/threadtx">7.9 线程间通信</a></li>
<li class="page_item page-item-3604"><a href="http://www.yq1012.com/file">8.1 输入输出基本概念</a></li>
<li class="page_item page-item-3606"><a href="http://www.yq1012.com/inputstram">8.2 面向字符的输入流</a></li>
<li class="page_item page-item-3608"><a href="http://www.yq1012.com/outputstream">8.3 面向字符的输出流</a></li>
<li class="page_item page-item-3610"><a href="http://www.yq1012.com/inoutstream">8.4 面向字节的输入输出流</a></li>
<li class="page_item page-item-3612"><a href="http://www.yq1012.com/fileinputstream">8.5 面向字节流的应用</a></li>
<li class="page_item page-item-3614"><a href="http://www.yq1012.com/fileandcategory">8.6 文件与目录管理</a></li>
<li class="page_item page-item-3616"><a href="http://www.yq1012.com/readandwrite">8.7 文件的随机读写</a></li>
<li class="page_item page-item-3618"><a href="http://www.yq1012.com/gzip">8.8 文件的压缩处理</a></li>
<li class="page_item page-item-3620"><a href="http://www.yq1012.com/javautil">9.1 Java基础类库</a></li>
<li class="page_item page-item-3622"><a href="http://www.yq1012.com/javalang">9.2 Java语言包(java.lang)简介</a></li>
<li class="page_item page-item-3625"><a href="http://www.yq1012.com/dateutil">9.3 日期和时间类</a></li>
<li class="page_item page-item-3627"><a href="http://www.yq1012.com/hashtable">9.4 哈希表及其应用</a></li>
<li class="page_item page-item-3001"><a href="http://www.yq1012.com/javashuji">Java书籍推荐</a></li>
<li class="page_item page-item-3905"><a href="http://www.yq1012.com/singleton">java单例模式</a></li>
<li class="page_item page-item-3911"><a href="http://www.yq1012.com/mianshi_chengfabiao">java打印乘法表</a></li>
<li class="page_item page-item-3917"><a href="http://www.yq1012.com/mianshi_shuixianhua">java打印水仙花</a></li>
<li class="page_item page-item-3907"><a href="http://www.yq1012.com/mianshi_lingxing">java打印菱形</a></li>
<li class="page_item page-item-3920"><a href="http://www.yq1012.com/mainshi_paixu">java排序打印</a></li>
<li class="page_item page-item-3946"><a href="http://www.yq1012.com/mianshi_keguanti">java面试规划客观题</a></li>
<li class="page_item page-item-3943"><a href="http://www.yq1012.com/mianshi_jsp">jsp常见面试点</a></li>
<li class="page_item page-item-3348"><a href="http://www.yq1012.com/linuxshuji">Linux书籍推荐</a></li>
<li class="page_item page-item-3901"><a href="http://www.yq1012.com/mianshi_listmap">list和map</a></li>
<li class="page_item page-item-3892"><a href="http://www.yq1012.com/mianshi_overload">Overload 和 和 Override 的区 的区别</a></li>
<li class="page_item page-item-4071"><a href="http://www.yq1012.com/buy_qq">QQ插件在线演示视频页面</a></li>
<li class="page_item page-item-3940"><a href="http://www.yq1012.com/mianshi_request">Request 对象的主要方法</a></li>
<li class="page_item page-item-3938"><a href="http://www.yq1012.com/mianshi_servlet">servlet面试要点</a></li>
<li class="page_item page-item-3359"><a href="http://www.yq1012.com/jiazhiguan">价值观</a></li>
<li class="page_item page-item-3888"><a href="http://www.yq1012.com/mianshi_4">作用域 public ，private ，protected</a></li>
<li class="page_item page-item-3350"><a href="http://www.yq1012.com/about">关于我们</a></li>
<li class="page_item page-item-2059"><a href="http://www.yq1012.com/hezuo">商务合作</a></li>
<li class="page_item page-item-3896"><a href="http://www.yq1012.com/mianshi_datatype">基本的数据类型</a></li>
<li class="page_item page-item-3355"><a href="http://www.yq1012.com/shenming">版权申明</a></li>
<li class="page_item page-item-3352"><a href="http://www.yq1012.com/liuyanban">留言版</a></li>
<li class="page_item page-item-3361"><a href="http://www.yq1012.com/licheng">网站历程</a></li>
<li class="page_item page-item-3357"><a href="http://www.yq1012.com/lianxi">联系我们</a></li>
<li class="page_item page-item-3875"><a href="http://www.yq1012.com/mianshi_1">说说&#038;和&#038;&#038;的区别</a></li>
<li class="page_item page-item-3883"><a href="http://www.yq1012.com/mianshi_3">静态变量和实例变量的区别</a></li>

		</ul>
	</div>
</div>	<div class="content">
				<header class="article-header">
			<h1 class="article-title"><a href="http://www.yq1012.com/generic">5.6 Java 泛型</a></h1>
		</header>
		<article class="article-content">
			<p>我们知道，使用变量之前要定义，定义一个变量时必须要指明它的数据类型，什么样的数据类型赋给什么样的值。</p>
<p>假如我们现在要定义一个类来表示坐标，要求坐标的数据类型可以是整数、小数和字符串，例如：</p>
<ul>
<li>x = 10、y = 10</li>
<li>x = 12.88、y = 129.65</li>
<li>x = &#8220;东京180度&#8221;、y = &#8220;北纬210度&#8221;</li>
</ul>
<p>针对不同的数据类型，除了借助方法重载，还可以借助自动装箱和向上转型。我们知道，基本数据类型可以自动装箱，被转换成对应的包装类；Object 是所有类的祖先类，任何一个类的实例都可以向上转型为 Object 类型，例如：</p>
<ul>
<li>int &#8211;&gt; Integer &#8211;&gt; Object</li>
<li>double &#8211;&gt;Double &#8211;&gt; Object</li>
<li>String &#8211;&gt; Object</li>
</ul>
<p>这样，只需要定义一个方法，就可以接收所有类型的数据。请看下面的代码：</p>
<pre class="lang:java decode:true ">public class Demo {
    public static void main(String[] args){
        Point p = new Point();

        p.setX(10);  // int -&gt; Integer -&gt; Object
        p.setY(20);
        int x = (Integer)p.getX();  // 必须向下转型
        int y = (Integer)p.getY();
        System.out.println("This point is：" + x + ", " + y);
       
        p.setX(25.4);  // double -&gt; Integer -&gt; Object
        p.setY("东京180度");
        double m = (Double)p.getX();  // 必须向下转型
        double n = (Double)p.getY();  // 运行期间抛出异常
        System.out.println("This point is：" + m + ", " + n);
    }
}

class Point{
    Object x = 0;
    Object y = 0;

    public Object getX() {
        return x;
    }
    public void setX(Object x) {
        this.x = x;
    }
    public Object getY() {
        return y;
    }
    public void setY(Object y) {
        this.y = y;
    }
}</pre>
<p>上面的代码中，生成坐标时不会有任何问题，但是取出坐标时，要向下转型，在 <a href="http://www.weixueyuan.net/view/6002.html" target="_blank">Java多态对象的类型转换</a> 一文中我们讲到，向下转型存在着风险，而且编译期间不容易发现，只有在运行期间才会抛出异常，所以要尽量避免使用向下转型。运行上面的代码，第12行会抛出 java.lang.ClassCastException 异常。</p>
<p>那么，有没有更好的办法，既可以不使用重载（有重复代码），又能把风险降到最低呢？</p>
<p>有，可以使用泛型类(Java Class)，它可以接受任意类型的数据。所谓“泛型”，就是“宽泛的数据类型”，任意的数据类型。</p>
<p>更改上面的代码，使用泛型类：</p>
<pre class="lang:java decode:true ">public class Demo {
    public static void main(String[] args){
        // 实例化泛型类
        Point&lt;Integer, Integer&gt; p1 = new Point&lt;Integer, Integer&gt;();
        p1.setX(10);
        p1.setY(20);
        int x = p1.getX();
        int y = p1.getY();
        System.out.println("This point is：" + x + ", " + y);
       
        Point&lt;Double, String&gt; p2 = new Point&lt;Double, String&gt;();
        p2.setX(25.4);
        p2.setY("东京180度");
        double m = p2.getX();
        String n = p2.getY();
        System.out.println("This point is：" + m + ", " + n);
    }
}

// 定义泛型类
class Point&lt;T1, T2&gt;{
    T1 x;
    T2 y;
    public T1 getX() {
        return x;
    }
    public void setX(T1 x) {
        this.x = x;
    }
    public T2 getY() {
        return y;
    }
    public void setY(T2 y) {
        this.y = y;
    }
}</pre>
<p>运行结果：<br />
This point is：10, 20<br />
This point is：25.4, 东京180度</p>
<p>与普通类的定义相比，上面的代码在类名后面多出了 &lt;T1, T2&gt;，T1, T2 是自定义的标识符，也是参数，用来传递数据的类型，而不是数据的值，我们称之为类型参数。在泛型中，不但数据的值可以通过参数传递，数据的类型也可以通过参数传递。T1, T2 只是数据类型的占位符，运行时会被替换为真正的数据类型。</p>
<p>传值参数（我们通常所说的参数）由小括号包围，如 (int x, double y)，类型参数（泛型参数）由尖括号包围，多个参数由逗号分隔，如 &lt;T&gt; 或 &lt;T, E&gt;。</p>
<p>类型参数需要在类名后面给出。一旦给出了类型参数，就可以在类中使用了。类型参数必须是一个合法的标识符，习惯上使用单个大写字母，通常情况下，K 表示键，V 表示值，E 表示异常或错误，T 表示一般意义上的数据类型。</p>
<p>泛型类在实例化时必须指出具体的类型，也就是向类型参数传值，格式为：<br />
className variable&lt;dataType1, dataType2&gt; = new className&lt;dataType1, dataType2&gt;();<br />
也可以省略等号右边的数据类型，但是会产生警告，即：<br />
className variable&lt;dataType1, dataType2&gt; = new className();</p>
<p>因为在使用泛型类时指明了数据类型，赋给其他类型的值会抛出异常，既不需要向下转型，也没有潜在的风险，比本文一开始介绍的自动装箱和向上转型要更加实用。</p>
<p>注意：</p>
<ul>
<li>泛型是 Java 1.5 的新增特性，它以C++模板为参照，本质是参数化类型(Parameterized Type)的应用。</li>
<li>类型参数只能用来表示引用类型，不能用来表示基本类型，如  int、double、char 等。但是传递基本类型不会报错，因为它们会自动装箱成对应的包装类。</li>
</ul>
<h2>泛型方法</h2>
<p>除了定义泛型类，还可以定义泛型方法，例如，定义一个打印坐标的泛型方法：</p>
<pre class="lang:java decode:true ">public class Demo {
    public static void main(String[] args){
        // 实例化泛型类
        Point&lt;Integer, Integer&gt; p1 = new Point&lt;Integer, Integer&gt;();
        p1.setX(10);
        p1.setY(20);
        p1.printPoint(p1.getX(), p1.getY());
       
        Point&lt;Double, String&gt; p2 = new Point&lt;Double, String&gt;();
        p2.setX(25.4);
        p2.setY("东京180度");
        p2.printPoint(p2.getX(), p2.getY());
    }
}

// 定义泛型类
class Point&lt;T1, T2&gt;{
    T1 x;
    T2 y;
    public T1 getX() {
        return x;
    }
    public void setX(T1 x) {
        this.x = x;
    }
    public T2 getY() {
        return y;
    }
    public void setY(T2 y) {
        this.y = y;
    }
   
    // 定义泛型方法
    public &lt;T1, T2&gt; void printPoint(T1 x, T2 y){
        T1 m = x;
        T2 n = y;
        System.out.println("This point is：" + m + ", " + n);
    }
}</pre>
<p>运行结果：<br />
This point is：10, 20<br />
This point is：25.4, 东京180度</p>
<p>上面的代码中定义了一个泛型方法 printPoint()，既有普通参数，也有类型参数，类型参数需要放在修饰符后面、返回值类型前面。一旦定义了类型参数，就可以在参数列表、方法体和返回值类型中使用了。</p>
<p>与使用泛型类不同，使用泛型方法时不必指明参数类型，编译器会根据传递的参数自动查找出具体的类型。泛型方法除了定义不同，调用就像普通方法一样。</p>
<p>注意：泛型方法与泛型类没有必然的联系，泛型方法有自己的类型参数，在普通类中也可以定义泛型方法。泛型方法 printPoint() 中的类型参数 T1, T2 与泛型类 Point 中的 T1, T2 没有必然的联系，也可以使用其他的标识符代替：</p>
<pre class="lang:java decode:true ">public static &lt;V1, V2&gt; void printPoint(V1 x, V2 y){
    V1 m = x;
    V2 n = y;
    System.out.println("This point is：" + m + ", " + n);
}</pre>
<p>&nbsp;</p>
<h2>泛型接口</h2>
<p>在Java中也可以定义泛型接口，这里不再赘述，仅仅给出示例代码：</p>
<pre class="lang:java decode:true ">public class Demo {
    public static void main(String arsg[]) {
        Info&lt;String&gt; obj = new InfoImp&lt;String&gt;("www.yq1012.com");
        System.out.println("Length Of String: " + obj.getVar().length());
    }
}

//定义泛型接口
interface Info&lt;T&gt; {
    public T getVar();
}

//实现接口
class InfoImp&lt;T&gt; implements Info&lt;T&gt; {
    private T var;

    // 定义泛型构造方法
    public InfoImp(T var) {
        this.setVar(var);
    }

    public void setVar(T var) {
        this.var = var;
    }

    public T getVar() {
        return this.var;
    }
}</pre>
<p>运行结果：<br />
Length Of String: 18</p>
<h2>类型擦除</h2>
<p>如果在使用泛型时没有指明数据类型，那么就会擦除泛型类型，请看下面的代码：</p>
<pre class="lang:java decode:true ">public class Demo {
    public static void main(String[] args){
        Point p = new Point();  // 类型擦除
        p.setX(10);
        p.setY(20.8);
        int x = (Integer)p.getX();  // 向下转型
        double y = (Double)p.getY();
        System.out.println("This point is：" + x + ", " + y);
    }
}

class Point&lt;T1, T2&gt;{
    T1 x;
    T2 y;
    public T1 getX() {
        return x;
    }
    public void setX(T1 x) {
        this.x = x;
    }
    public T2 getY() {
        return y;
    }
    public void setY(T2 y) {
        this.y = y;
    }
}</pre>
<p>运行结果：<br />
This point is：10, 20.8</p>
<p>因为在使用泛型时没有指明数据类型，为了不出现错误，编译器会将所有数据向上转型为 Object，所以在取出坐标使用时要向下转型，这与本文一开始不使用泛型没什么两样。</p>
<h2>限制泛型的可用类型</h2>
<p>在上面的代码中，类型参数可以接受任意的数据类型，只要它是被定义过的。但是，很多时候我们只需要一部分数据类型就够了，用户传递其他数据类型可能会引起错误。例如，编写一个泛型函数用于返回不同类型数组（Integer 数组、Double 数组、Character 数组等）中的最大值：</p>
<pre class="lang:java decode:true ">public &lt;T&gt; T getMax(T array[]){
    T max = null;
    for(T element : array){
        max = element.doubleValue() &gt; max.doubleValue() ? element : max;
    }
    return max;
}</pre>
<p>上面的代码会报错，doubleValue() 是 Number 类的方法，不是所有的类都有该方法，所以我们要限制类型参数 T，让它只能接受 Number 及其子类（Integer、Double、Character 等）。</p>
<p>通过 extends 关键字可以限制泛型的类型，改进上面的代码：</p>
<pre class="lang:java decode:true  ">public &lt;T extends Number&gt; T getMax(T array[]){
    T max = null;
    for(T element : array){
        max = element.doubleValue() &gt; max.doubleValue() ? element : max;
    }
    return max;
}</pre>
<p>&lt;T extends Number&gt; 表示 T 只接受 Number 及其子类，传入其他类型的数据会报错。这里的限定使用关键字 extends，后面可以是类也可以是接口。但这里的 extends 已经不是继承的含义了，应该理解为 T 是继承自 Number 类的类型，或者 T 是实现了 XX 接口的类型。</p>
<p>注意：一般的应用开发中泛型使用较少，多用在框架或者库的设计中，这里不再深入讲解，主要让大家对泛型有所认识，为后面的教程做铺垫。</p>
		</article>
						<p>&nbsp;</p>
			</div>
</section>

<footer class="footer">
	<div class="container">
						<p>&copy; 2021 <a href="http://www.yq1012.com">程序员一代码搬运工</a> &nbsp; 版权所有，保留一切权利！ <a href="http://www.beian.miit.gov.cn" title="工信部网站备案" rel="external nofollow" target="_blank">闽ICP备14003021号-1</a> 技术支持 <a href="http://www.yq1012.com/about" target="_blank">java学习</a> 
</p>
	</div>
</footer>


<div class="rollbar rollbar-rb"><ul><li><a target="_blank" href="http://wpa.qq.com/msgrd?v=3&uin=742275749&site=qq&menu=yes"><i class="fa fa-qq"></i><span>QQ咨询</span></a><h6>QQ咨询<i></i></h6></li><li class="rollbar-totop"><a href="javascript:(jsui.scrollTo());"><i class="fa fa-angle-up"></i><span>回顶</span></a><h6>回顶部<i></i></h6></li></ul></div>
<script>
window.jsui={
	www: 'http://www.yq1012.com',
	uri: 'http://www.yq1012.com/wp-content/themes/duxnew',
	ver: '6.1',
	roll: [],
	ajaxpager: '0',
	url_rp: 'http://www.yq1012.com/hezuo'
};
</script>
<script type='text/javascript' src='http://www.yq1012.com/wp-content/themes/duxnew/js/libs/bootstrap.min.js?ver=6.1'></script>
<script type='text/javascript' src='http://www.yq1012.com/wp-content/themes/duxnew/js/loader.js?ver=6.1'></script>
<script type='text/javascript' src='http://www.yq1012.com/wp-content/plugins/enlighter/cache/enlighterjs.min.js?ver=0A0B0C'></script>
<script type='text/javascript'>
!function(e,n){if("undefined"!=typeof EnlighterJS){var o={"selectors":{"block":"pre.EnlighterJSRAW","inline":"code.EnlighterJSRAW"},"options":{"indent":4,"ampersandCleanup":true,"linehover":true,"rawcodeDbclick":false,"textOverflow":"break","linenumbers":true,"theme":"enlighter","language":"generic","retainCssClasses":false,"collapse":false,"toolbarOuter":"","toolbarTop":"{BTN_RAW}{BTN_COPY}{BTN_WINDOW}{BTN_WEBSITE}","toolbarBottom":""}};(e.EnlighterJSINIT=function(){EnlighterJS.init(o.selectors.block,o.selectors.inline,o.options)})()}else{(n&&(n.error||n.log)||function(){})("Error: EnlighterJS resources not loaded yet!")}}(window,console);
</script>
<script type='text/javascript' src='http://www.yq1012.com/wp-includes/js/wp-embed.min.js?ver=5.2.9'></script>
</body>
</html>