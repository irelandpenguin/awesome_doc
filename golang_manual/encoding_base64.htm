
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>base64 - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package base64</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "encoding/base64"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package base64 implements base64 encoding as specified by RFC 4648.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
				<dd><a href="#variables">Variables</a></dd>
			
			
				
				<dd><a href="#NewDecoder">func NewDecoder(enc *Encoding, r io.Reader) io.Reader</a></dd>
			
				
				<dd><a href="#NewEncoder">func NewEncoder(enc *Encoding, w io.Writer) io.WriteCloser</a></dd>
			
			
				
				<dd><a href="#CorruptInputError">type CorruptInputError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#CorruptInputError.Error">func (e CorruptInputError) Error() string</a></dd>
				
			
				
				<dd><a href="#Encoding">type Encoding</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewEncoding">func NewEncoding(encoder string) *Encoding</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Encoding.Decode">func (enc *Encoding) Decode(dst, src []byte) (n int, err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Encoding.DecodeString">func (enc *Encoding) DecodeString(s string) ([]byte, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Encoding.DecodedLen">func (enc *Encoding) DecodedLen(n int) int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Encoding.Encode">func (enc *Encoding) Encode(dst, src []byte)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Encoding.EncodeToString">func (enc *Encoding) EncodeToString(src []byte) string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Encoding.EncodedLen">func (enc *Encoding) EncodedLen(n int) int</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/encoding/base64/base64.htm">base64.go</a>
			
			</span>
			</p>
		
	
		
		
			<h2 id="variables">Variables</h2>
			
				<pre>var StdEncoding = NewEncoding(encodeStd)</pre>
				<p>
StdEncoding is the standard base64 encoding, as defined in
RFC 4648.
</p>

			
				<pre>var URLEncoding = NewEncoding(encodeURL)</pre>
				<p>
URLEncoding is the alternate base64 encoding defined in RFC 4648.
It is typically used in URLs and file names.
</p>

			
		
		
			
			
			<h2 id="NewDecoder">func <a href="src/pkg/encoding/base64/base64.htm#L338">NewDecoder</a></h2>
			<pre>func NewDecoder(enc *Encoding, r io.Reader) io.Reader</pre>
			<p>
NewDecoder constructs a new base64 stream decoder.
</p>

			
		
			
			
			<h2 id="NewEncoder">func <a href="src/pkg/encoding/base64/base64.htm#L181">NewEncoder</a></h2>
			<pre>func NewEncoder(enc *Encoding, w io.Writer) io.WriteCloser</pre>
			<p>
NewEncoder returns a new base64 stream encoder.  Data written to
the returned writer will be encoded using enc and then written to w.
Base64 encodings operate in 4-byte blocks; when finished
writing, the caller must Close the returned encoder to flush any
partially written blocks.
</p>

			
		
		
			
			
			<h2 id="CorruptInputError">type <a href="src/pkg/encoding/base64/base64.htm#L193">CorruptInputError</a></h2>
			<pre>type CorruptInputError int64</pre>
			

			

			

			

			

			
				
				<h3 id="CorruptInputError.Error">func (CorruptInputError) <a href="src/pkg/encoding/base64/base64.htm#L195">Error</a></h3>
				<pre>func (e CorruptInputError) Error() string</pre>
				
				
				
			
		
			
			
			<h2 id="Encoding">type <a href="src/pkg/encoding/base64/base64.htm#L12">Encoding</a></h2>
			<pre>type Encoding struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
An Encoding is a radix 64 encoding/decoding scheme, defined by a
64-character alphabet.  The most common encoding is the &#34;base64&#34;
encoding defined in RFC 4648 and used in MIME (RFC 2045) and PEM
(RFC 1421).  RFC 4648 also defines an alternate encoding, which is
the standard encoding with - and _ substituted for + and /.
</p>


			

			

			

			
				
				<h3 id="NewEncoding">func <a href="src/pkg/encoding/base64/base64.htm#L22">NewEncoding</a></h3>
				<pre>func NewEncoding(encoder string) *Encoding</pre>
				<p>
NewEncoding returns a new Encoding defined by the given alphabet,
which must be a 64-byte string.
</p>

				
			

			
				
				<h3 id="Encoding.Decode">func (*Encoding) <a href="src/pkg/encoding/base64/base64.htm#L266">Decode</a></h3>
				<pre>func (enc *Encoding) Decode(dst, src []byte) (n int, err error)</pre>
				<p>
Decode decodes src using the encoding enc.  It writes at most
DecodedLen(len(src)) bytes to dst and returns the number of bytes
written.  If src contains invalid base64 data, it will return the
number of bytes successfully written and CorruptInputError.
New line characters (\r and \n) are ignored.
</p>

				
				
			
				
				<h3 id="Encoding.DecodeString">func (*Encoding) <a href="src/pkg/encoding/base64/base64.htm#L272">DecodeString</a></h3>
				<pre>func (enc *Encoding) DecodeString(s string) ([]byte, error)</pre>
				<p>
DecodeString returns the bytes represented by the base64 string s.
</p>

				
				
			
				
				<h3 id="Encoding.DecodedLen">func (*Encoding) <a href="src/pkg/encoding/base64/base64.htm#L344">DecodedLen</a></h3>
				<pre>func (enc *Encoding) DecodedLen(n int) int</pre>
				<p>
DecodedLen returns the maximum length in bytes of the decoded data
corresponding to n bytes of base64-encoded data.
</p>

				
				
			
				
				<h3 id="Encoding.Encode">func (*Encoding) <a href="src/pkg/encoding/base64/base64.htm#L52">Encode</a></h3>
				<pre>func (enc *Encoding) Encode(dst, src []byte)</pre>
				<p>
Encode encodes src using the encoding enc, writing
EncodedLen(len(src)) bytes to dst.
</p>
<p>
The encoding pads the output to a multiple of 4 bytes,
so Encode is not appropriate for use on individual blocks
of a large data stream.  Use NewEncoder() instead.
</p>

				
				
			
				
				<h3 id="Encoding.EncodeToString">func (*Encoding) <a href="src/pkg/encoding/base64/base64.htm#L99">EncodeToString</a></h3>
				<pre>func (enc *Encoding) EncodeToString(src []byte) string</pre>
				<p>
EncodeToString returns the base64 encoding of src.
</p>

				
				
			
				
				<h3 id="Encoding.EncodedLen">func (*Encoding) <a href="src/pkg/encoding/base64/base64.htm#L187">EncodedLen</a></h3>
				<pre>func (enc *Encoding) EncodedLen(n int) int</pre>
				<p>
EncodedLen returns the length in bytes of the base64 encoding
of an input buffer of length n.
</p>

				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
