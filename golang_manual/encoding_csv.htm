
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>csv - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package csv</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "encoding/csv"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package csv reads and writes comma-separated values (CSV) files.
</p>
<p>
A csv file contains zero or more records of one or more fields per record.
Each record is separated by the newline character. The final record may
optionally be followed by a newline character.
</p>
<pre>field1,field2,field3
</pre>
<p>
White space is considered part of a field.
</p>
<p>
Carriage returns before newline characters are silently removed.
</p>
<p>
Blank lines are ignored.  A line with only whitespace characters (excluding
the ending newline character) is not considered a blank line.
</p>
<p>
Fields which start and stop with the quote character &#34; are called
quoted-fields.  The beginning and ending quote are not part of the
field.
</p>
<p>
The source:
</p>
<pre>normal string,&#34;quoted-field&#34;
</pre>
<p>
results in the fields
</p>
<pre>{`normal string`, `quoted-field`}
</pre>
<p>
Within a quoted-field a quote character followed by a second quote
character is considered a single quote.
</p>
<pre>&#34;the &#34;&#34;word&#34;&#34; is true&#34;,&#34;a &#34;&#34;quoted-field&#34;&#34;&#34;
</pre>
<p>
results in
</p>
<pre>{`the &#34;word&#34; is true`, `a &#34;quoted-field&#34;`}
</pre>
<p>
Newlines and commas may be included in a quoted-field
</p>
<pre>&#34;Multi-line
field&#34;,&#34;comma is ,&#34;
</pre>
<p>
results in
</p>
<pre>{`Multi-line
field`, `comma is ,`}
</pre>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
				<dd><a href="#variables">Variables</a></dd>
			
			
			
				
				<dd><a href="#ParseError">type ParseError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#ParseError.Error">func (e *ParseError) Error() string</a></dd>
				
			
				
				<dd><a href="#Reader">type Reader</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewReader">func NewReader(r io.Reader) *Reader</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Reader.Read">func (r *Reader) Read() (record []string, err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Reader.ReadAll">func (r *Reader) ReadAll() (records [][]string, err error)</a></dd>
				
			
				
				<dd><a href="#Writer">type Writer</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewWriter">func NewWriter(w io.Writer) *Writer</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Flush">func (w *Writer) Flush()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Write">func (w *Writer) Write(record []string) (err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.WriteAll">func (w *Writer) WriteAll(records [][]string) (err error)</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/encoding/csv/reader.htm">reader.go</a>
			
				<a href="src/pkg/encoding/csv/writer.htm">writer.go</a>
			
			</span>
			</p>
		
	
		
		
			<h2 id="variables">Variables</h2>
			
				<pre>var (
    ErrTrailingComma = errors.New(&#34;extra delimiter at end of line&#34;)
    ErrBareQuote     = errors.New(&#34;bare \&#34; in non-quoted-field&#34;)
    ErrQuote         = errors.New(&#34;extraneous \&#34; in field&#34;)
    ErrFieldCount    = errors.New(&#34;wrong number of fields in line&#34;)
)</pre>
				<p>
These are the errors that can be returned in ParseError.Error
</p>

			
		
		
		
			
			
			<h2 id="ParseError">type <a href="src/pkg/encoding/csv/reader.htm#L53">ParseError</a></h2>
			<pre>type ParseError struct {
    Line   int   <span class="comment">// Line where the error occurred</span>
    Column int   <span class="comment">// Column (rune index) where the error occurred</span>
    Err    error <span class="comment">// The actual error</span>
}</pre>
			<p>
A ParseError is returned for parsing errors.
The first line is 1.  The first column is 0.
</p>


			

			

			

			

			
				
				<h3 id="ParseError.Error">func (*ParseError) <a href="src/pkg/encoding/csv/reader.htm#L59">Error</a></h3>
				<pre>func (e *ParseError) Error() string</pre>
				
				
				
			
		
			
			
			<h2 id="Reader">type <a href="src/pkg/encoding/csv/reader.htm#L94">Reader</a></h2>
			<pre>type Reader struct {
    Comma            rune <span class="comment">// Field delimiter (set to &#39;,&#39; by NewReader)</span>
    Comment          rune <span class="comment">// Comment character for start of line</span>
    FieldsPerRecord  int  <span class="comment">// Number of expected fields per record</span>
    LazyQuotes       bool <span class="comment">// Allow lazy quotes</span>
    TrailingComma    bool <span class="comment">// Allow trailing comma</span>
    TrimLeadingSpace bool <span class="comment">// Trim leading space</span>
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A Reader reads records from a CSV-encoded file.
</p>
<p>
As returned by NewReader, a Reader expects input conforming to RFC 4180.
The exported fields can be changed to customize the details before the
first call to Read or ReadAll.
</p>
<p>
Comma is the field delimiter.  It defaults to &#39;,&#39;.
</p>
<p>
Comment, if not 0, is the comment character. Lines beginning with the
Comment character are ignored.
</p>
<p>
If FieldsPerRecord is positive, Read requires each record to
have the given number of fields.  If FieldsPerRecord is 0, Read sets it to
the number of fields in the first record, so that future records must
have the same field count.  If FieldsPerRecord is negative, no check is
made and records may have a variable number of fields.
</p>
<p>
If LazyQuotes is true, a quote may appear in an unquoted field and a
non-doubled quote may appear in a quoted field.
</p>
<p>
If TrailingComma is true, the last field may be an unquoted empty field.
</p>
<p>
If TrimLeadingSpace is true, leading white space in a field is ignored.
</p>


			

			

			

			
				
				<h3 id="NewReader">func <a href="src/pkg/encoding/csv/reader.htm#L108">NewReader</a></h3>
				<pre>func NewReader(r io.Reader) *Reader</pre>
				<p>
NewReader returns a new Reader that reads from r.
</p>

				
			

			
				
				<h3 id="Reader.Read">func (*Reader) <a href="src/pkg/encoding/csv/reader.htm#L126">Read</a></h3>
				<pre>func (r *Reader) Read() (record []string, err error)</pre>
				<p>
Read reads one record from r.  The record is a slice of strings with each
string representing one field.
</p>

				
				
			
				
				<h3 id="Reader.ReadAll">func (*Reader) <a href="src/pkg/encoding/csv/reader.htm#L153">ReadAll</a></h3>
				<pre>func (r *Reader) ReadAll() (records [][]string, err error)</pre>
				<p>
ReadAll reads all the remaining records from r.
Each record is a slice of fields.
A successful call returns err == nil, not err == EOF. Because ReadAll is
defined to read until EOF, it does not treat end of file as an error to be
reported.
</p>

				
				
			
		
			
			
			<h2 id="Writer">type <a href="src/pkg/encoding/csv/writer.htm#L14">Writer</a></h2>
			<pre>type Writer struct {
    Comma   rune <span class="comment">// Field delimiter (set to to &#39;,&#39; by NewWriter)</span>
    UseCRLF bool <span class="comment">// True to use \r\n as the line terminator</span>
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A Writer writes records to a CSV encoded file.
</p>
<p>
As returned by NewWriter, a Writer writes records terminated by a
newline and uses &#39;,&#39; as the field delimiter.  The exported fields can be
changed to customize the details before the first call to Write or WriteAll.
</p>
<p>
Comma is the field delimiter.
</p>
<p>
If UseCRLF is true, the Writer ends each record with \r\n instead of \n.
</p>


			

			

			

			
				
				<h3 id="NewWriter">func <a href="src/pkg/encoding/csv/writer.htm#L21">NewWriter</a></h3>
				<pre>func NewWriter(w io.Writer) *Writer</pre>
				<p>
NewWriter returns a new Writer that writes to w.
</p>

				
			

			
				
				<h3 id="Writer.Flush">func (*Writer) <a href="src/pkg/encoding/csv/writer.htm#L85">Flush</a></h3>
				<pre>func (w *Writer) Flush()</pre>
				<p>
Flush writes any buffered data to the underlying io.Writer.
</p>

				
				
			
				
				<h3 id="Writer.Write">func (*Writer) <a href="src/pkg/encoding/csv/writer.htm#L30">Write</a></h3>
				<pre>func (w *Writer) Write(record []string) (err error)</pre>
				<p>
Writer writes a single CSV record to w along with any necessary quoting.
A record is a slice of strings with each string being one field.
</p>

				
				
			
				
				<h3 id="Writer.WriteAll">func (*Writer) <a href="src/pkg/encoding/csv/writer.htm#L90">WriteAll</a></h3>
				<pre>func (w *Writer) WriteAll(records [][]string) (err error)</pre>
				<p>
WriteAll writes multiple CSV records to w using Write and then calls Flush.
</p>

				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
