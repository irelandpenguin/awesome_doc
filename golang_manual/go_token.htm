
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>token - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package token</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "go/token"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package token defines constants representing the lexical tokens of the Go
programming language and basic operations on tokens (printing, predicates).
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
				<dd><a href="#constants">Constants</a></dd>
			
			
			
			
				
				<dd><a href="#File">type File</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#File.AddLine">func (f *File) AddLine(offset int)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.AddLineInfo">func (f *File) AddLineInfo(offset int, filename string, line int)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Base">func (f *File) Base() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Line">func (f *File) Line(p Pos) int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.LineCount">func (f *File) LineCount() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Name">func (f *File) Name() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Offset">func (f *File) Offset(p Pos) int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Pos">func (f *File) Pos(offset int) Pos</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Position">func (f *File) Position(p Pos) (pos Position)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.SetLines">func (f *File) SetLines(lines []int) bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.SetLinesForContent">func (f *File) SetLinesForContent(content []byte)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Size">func (f *File) Size() int</a></dd>
				
			
				
				<dd><a href="#FileSet">type FileSet</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewFileSet">func NewFileSet() *FileSet</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#FileSet.AddFile">func (s *FileSet) AddFile(filename string, base, size int) *File</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileSet.Base">func (s *FileSet) Base() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileSet.File">func (s *FileSet) File(p Pos) (f *File)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileSet.Iterate">func (s *FileSet) Iterate(f func(*File) bool)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileSet.Position">func (s *FileSet) Position(p Pos) (pos Position)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileSet.Read">func (s *FileSet) Read(decode func(interface{}) error) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileSet.Write">func (s *FileSet) Write(encode func(interface{}) error) error</a></dd>
				
			
				
				<dd><a href="#Pos">type Pos</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Pos.IsValid">func (p Pos) IsValid() bool</a></dd>
				
			
				
				<dd><a href="#Position">type Position</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Position.IsValid">func (pos *Position) IsValid() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Position.String">func (pos Position) String() string</a></dd>
				
			
				
				<dd><a href="#Token">type Token</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Lookup">func Lookup(ident string) Token</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Token.IsKeyword">func (tok Token) IsKeyword() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Token.IsLiteral">func (tok Token) IsLiteral() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Token.IsOperator">func (tok Token) IsOperator() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Token.Precedence">func (op Token) Precedence() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Token.String">func (tok Token) String() string</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/go/token/position.htm">position.go</a>
			
				<a href="src/pkg/go/token/serialize.htm">serialize.go</a>
			
				<a href="src/pkg/go/token/token.htm">token.go</a>
			
			</span>
			</p>
		
	
		
			<h2 id="constants">Constants</h2>
			
				<pre>const (
    LowestPrec  = 0 <span class="comment">// non-operators</span>
    UnaryPrec   = 6
    HighestPrec = 7
)</pre>
				<p>
A set of constants for precedence-based expression parsing.
Non-operators have lowest precedence, followed by operators
starting with precedence 1 up to unary operators. The highest
precedence corresponds serves as &#34;catch-all&#34; precedence for
selector, indexing, and other operator and delimiter tokens.
</p>

			
		
		
		
		
			
			
			<h2 id="File">type <a href="src/pkg/go/token/position.htm#L83">File</a></h2>
			<pre>type File struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A File is a handle for a file belonging to a FileSet.
A File has a name, size, and line offset table.
</p>


			

			

			

			

			
				
				<h3 id="File.AddLine">func (*File) <a href="src/pkg/go/token/position.htm#L121">AddLine</a></h3>
				<pre>func (f *File) AddLine(offset int)</pre>
				<p>
AddLine adds the line offset for a new line.
The line offset must be larger than the offset for the previous line
and smaller than the file size; otherwise the line offset is ignored.
</p>

				
				
			
				
				<h3 id="File.AddLineInfo">func (*File) <a href="src/pkg/go/token/position.htm#L191">AddLineInfo</a></h3>
				<pre>func (f *File) AddLineInfo(offset int, filename string, line int)</pre>
				<p>
AddLineInfo adds alternative file and line number information for
a given file offset. The offset must be larger than the offset for
the previously added alternative line info and smaller than the
file size; otherwise the information is ignored.
</p>
<p>
AddLineInfo is typically used to register alternative position
information for //line filename:line comments in source files.
</p>

				
				
			
				
				<h3 id="File.Base">func (*File) <a href="src/pkg/go/token/position.htm#L100">Base</a></h3>
				<pre>func (f *File) Base() int</pre>
				<p>
Base returns the base offset of file f as registered with AddFile.
</p>

				
				
			
				
				<h3 id="File.Line">func (*File) <a href="src/pkg/go/token/position.htm#L224">Line</a></h3>
				<pre>func (f *File) Line(p Pos) int</pre>
				<p>
Line returns the line number for the given file position p;
p must be a Pos value in that file or NoPos.
</p>

				
				
			
				
				<h3 id="File.LineCount">func (*File) <a href="src/pkg/go/token/position.htm#L110">LineCount</a></h3>
				<pre>func (f *File) LineCount() int</pre>
				<p>
LineCount returns the number of lines in file f.
</p>

				
				
			
				
				<h3 id="File.Name">func (*File) <a href="src/pkg/go/token/position.htm#L95">Name</a></h3>
				<pre>func (f *File) Name() string</pre>
				<p>
Name returns the file name of file f as registered with AddFile.
</p>

				
				
			
				
				<h3 id="File.Offset">func (*File) <a href="src/pkg/go/token/position.htm#L214">Offset</a></h3>
				<pre>func (f *File) Offset(p Pos) int</pre>
				<p>
Offset returns the offset for the given file position p;
p must be a valid Pos value in that file.
f.Offset(f.Pos(offset)) == offset.
</p>

				
				
			
				
				<h3 id="File.Pos">func (*File) <a href="src/pkg/go/token/position.htm#L203">Pos</a></h3>
				<pre>func (f *File) Pos(offset int) Pos</pre>
				<p>
Pos returns the Pos value for the given file offset;
the offset must be &lt;= f.Size().
f.Pos(f.Offset(p)) == p.
</p>

				
				
			
				
				<h3 id="File.Position">func (*File) <a href="src/pkg/go/token/position.htm#L262">Position</a></h3>
				<pre>func (f *File) Position(p Pos) (pos Position)</pre>
				<p>
Position returns the Position value for the given file position p;
p must be a Pos value in that file or NoPos.
</p>

				
				
			
				
				<h3 id="File.SetLines">func (*File) <a href="src/pkg/go/token/position.htm#L137">SetLines</a></h3>
				<pre>func (f *File) SetLines(lines []int) bool</pre>
				<p>
SetLines sets the line offsets for a file and returns true if successful.
The line offsets are the offsets of the first character of each line;
for instance for the content &#34;ab\nc\n&#34; the line offsets are {0, 3}.
An empty file has an empty line offset table.
Each line offset must be larger than the offset for the previous line
and smaller than the file size; otherwise SetLines fails and returns
false.
</p>

				
				
			
				
				<h3 id="File.SetLinesForContent">func (*File) <a href="src/pkg/go/token/position.htm#L154">SetLinesForContent</a></h3>
				<pre>func (f *File) SetLinesForContent(content []byte)</pre>
				<p>
SetLinesForContent sets the line offsets for the given file content.
</p>

				
				
			
				
				<h3 id="File.Size">func (*File) <a href="src/pkg/go/token/position.htm#L105">Size</a></h3>
				<pre>func (f *File) Size() int</pre>
				<p>
Size returns the size of file f as registered with AddFile.
</p>

				
				
			
		
			
			
			<h2 id="FileSet">type <a href="src/pkg/go/token/position.htm#L279">FileSet</a></h2>
			<pre>type FileSet struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A FileSet represents a set of source files.
Methods of file sets are synchronized; multiple goroutines
may invoke them concurrently.
</p>


			

			

			

			
				
				<h3 id="NewFileSet">func <a href="src/pkg/go/token/position.htm#L287">NewFileSet</a></h3>
				<pre>func NewFileSet() *FileSet</pre>
				<p>
NewFileSet creates a new file set.
</p>

				
			

			
				
				<h3 id="FileSet.AddFile">func (*FileSet) <a href="src/pkg/go/token/position.htm#L319">AddFile</a></h3>
				<pre>func (s *FileSet) AddFile(filename string, base, size int) *File</pre>
				<p>
AddFile adds a new file with a given filename, base offset, and file size
to the file set s and returns the file. Multiple files may have the same
name. The base offset must not be smaller than the FileSet&#39;s Base(), and
size must not be negative.
</p>
<p>
Adding the file will set the file set&#39;s Base() value to base + size + 1
as the minimum base value for the next file. The following relationship
exists between a Pos value p for a given file offset offs:
</p>
<pre>int(p) = base + offs
</pre>
<p>
with offs in the range [0, size] and thus p in the range [base, base+size].
For convenience, File.Pos may be used to create file-specific position
values from a file offset.
</p>

				
				
			
				
				<h3 id="FileSet.Base">func (*FileSet) <a href="src/pkg/go/token/position.htm#L296">Base</a></h3>
				<pre>func (s *FileSet) Base() int</pre>
				<p>
Base returns the minimum base offset that must be provided to
AddFile when adding the next file.
</p>

				
				
			
				
				<h3 id="FileSet.File">func (*FileSet) <a href="src/pkg/go/token/position.htm#L380">File</a></h3>
				<pre>func (s *FileSet) File(p Pos) (f *File)</pre>
				<p>
File returns the file that contains the position p.
If no such file is found (for instance for p == NoPos),
the result is nil.
</p>

				
				
			
				
				<h3 id="FileSet.Iterate">func (*FileSet) <a href="src/pkg/go/token/position.htm#L341">Iterate</a></h3>
				<pre>func (s *FileSet) Iterate(f func(*File) bool)</pre>
				<p>
Iterate calls f for the files in the file set in the order they were added
until f returns false.
</p>

				
				
			
				
				<h3 id="FileSet.Position">func (*FileSet) <a href="src/pkg/go/token/position.htm#L390">Position</a></h3>
				<pre>func (s *FileSet) Position(p Pos) (pos Position)</pre>
				<p>
Position converts a Pos in the fileset into a general Position.
</p>

				
				
			
				
				<h3 id="FileSet.Read">func (*FileSet) <a href="src/pkg/go/token/serialize.htm#L12">Read</a></h3>
				<pre>func (s *FileSet) Read(decode func(interface{}) error) error</pre>
				<p>
Read calls decode to deserialize a file set into s; s must not be nil.
</p>

				
				
			
				
				<h3 id="FileSet.Write">func (*FileSet) <a href="src/pkg/go/token/serialize.htm#L33">Write</a></h3>
				<pre>func (s *FileSet) Write(encode func(interface{}) error) error</pre>
				<p>
Write calls encode to serialize the file set s.
</p>

				
				
			
		
			
			
			<h2 id="Pos">type <a href="src/pkg/go/token/position.htm#L63">Pos</a></h2>
			<pre>type Pos int</pre>
			<p>
Pos is a compact encoding of a source position within a file set.
It can be converted into a Position for a more convenient, but much
larger, representation.
</p>
<p>
The Pos value for a given file is a number in the range [base, base+size],
where base and size are specified when adding the file to the file set via
AddFile.
</p>
<p>
To create the Pos value for a specific source offset, first add
the respective file to the current file set (via FileSet.AddFile)
and then call File.Pos(offset) for that file. Given a Pos value p
for a specific file set fset, the corresponding Position value is
obtained by calling fset.Position(p).
</p>
<p>
Pos values can be compared directly with the usual comparison operators:
If two Pos values p and q are in the same file, comparing p and q is
equivalent to comparing the respective source file offsets. If p and q
are in different files, p &lt; q is true if the file implied by p was added
to the respective file set before the file implied by q.
</p>


			
				<pre>const NoPos Pos = 0</pre>
				<p>
The zero value for Pos is NoPos; there is no file and line information
associated with it, and NoPos().IsValid() is false. NoPos is always
smaller than any other Pos value. The corresponding Position value
for NoPos is the zero value for Position.
</p>

			

			

			

			

			
				
				<h3 id="Pos.IsValid">func (Pos) <a href="src/pkg/go/token/position.htm#L73">IsValid</a></h3>
				<pre>func (p Pos) IsValid() bool</pre>
				<p>
IsValid returns true if the position is valid.
</p>

				
				
			
		
			
			
			<h2 id="Position">type <a href="src/pkg/go/token/position.htm#L12">Position</a></h2>
			<pre>type Position struct {
    Filename string <span class="comment">// filename, if any</span>
    Offset   int    <span class="comment">// offset, starting at 0</span>
    Line     int    <span class="comment">// line number, starting at 1</span>
    Column   int    <span class="comment">// column number, starting at 1 (character count)</span>
}</pre>
			<p>
Position describes an arbitrary source position
including the file, line, and column location.
A Position is valid if the line number is &gt; 0.
</p>


			

			

			

			

			
				
				<h3 id="Position.IsValid">func (*Position) <a href="src/pkg/go/token/position.htm#L20">IsValid</a></h3>
				<pre>func (pos *Position) IsValid() bool</pre>
				<p>
IsValid returns true if the position is valid.
</p>

				
				
			
				
				<h3 id="Position.String">func (Position) <a href="src/pkg/go/token/position.htm#L29">String</a></h3>
				<pre>func (pos Position) String() string</pre>
				<p>
String returns a string in one of several forms:
</p>
<pre>file:line:column    valid position with file name
line:column         valid position without file name
file                invalid position with file name
-                   invalid position without file name
</pre>

				
				
			
		
			
			
			<h2 id="Token">type <a href="src/pkg/go/token/token.htm#L3">Token</a></h2>
			<pre>type Token int</pre>
			<p>
Token is the set of lexical tokens of the Go programming language.
</p>


			
				<pre>const (
    <span class="comment">// Special tokens</span>
    ILLEGAL Token = iota
    EOF
    COMMENT

    <span class="comment">// Identifiers and basic type literals</span>
    <span class="comment">// (these tokens stand for classes of literals)</span>
    IDENT <span class="comment">// main</span>
    INT   <span class="comment">// 12345</span>
    FLOAT <span class="comment">// 123.45</span>
    IMAG  <span class="comment">// 123.45i</span>
    CHAR  <span class="comment">// &#39;a&#39;</span>
    STRING

    <span class="comment">// Operators and delimiters</span>
    ADD <span class="comment">// +</span>
    SUB <span class="comment">// -</span>
    MUL <span class="comment">// *</span>
    QUO <span class="comment">// /</span>
    REM <span class="comment">// %</span>

    AND     <span class="comment">// &amp;</span>
    OR      <span class="comment">// |</span>
    XOR     <span class="comment">// ^</span>
    SHL     <span class="comment">// &lt;&lt;</span>
    SHR     <span class="comment">// &gt;&gt;</span>
    AND_NOT <span class="comment">// &amp;^</span>

    ADD_ASSIGN <span class="comment">// +=</span>
    SUB_ASSIGN <span class="comment">// -=</span>
    MUL_ASSIGN <span class="comment">// *=</span>
    QUO_ASSIGN <span class="comment">// /=</span>
    REM_ASSIGN <span class="comment">// %=</span>

    AND_ASSIGN     <span class="comment">// &amp;=</span>
    OR_ASSIGN      <span class="comment">// |=</span>
    XOR_ASSIGN     <span class="comment">// ^=</span>
    SHL_ASSIGN     <span class="comment">// &lt;&lt;=</span>
    SHR_ASSIGN     <span class="comment">// &gt;&gt;=</span>
    AND_NOT_ASSIGN <span class="comment">// &amp;^=</span>

    LAND  <span class="comment">// &amp;&amp;</span>
    LOR   <span class="comment">// ||</span>
    ARROW <span class="comment">// &lt;-</span>
    INC   <span class="comment">// ++</span>
    DEC   <span class="comment">// --</span>

    EQL    <span class="comment">// ==</span>
    LSS    <span class="comment">// &lt;</span>
    GTR    <span class="comment">// &gt;</span>
    ASSIGN <span class="comment">// =</span>
    NOT    <span class="comment">// !</span>

    NEQ      <span class="comment">// !=</span>
    LEQ      <span class="comment">// &lt;=</span>
    GEQ      <span class="comment">// &gt;=</span>
    DEFINE   <span class="comment">// :=</span>
    ELLIPSIS <span class="comment">// ...</span>

    LPAREN <span class="comment">// (</span>
    LBRACK <span class="comment">// [</span>
    LBRACE <span class="comment">// {</span>
    COMMA  <span class="comment">// ,</span>
    PERIOD <span class="comment">// .</span>

    RPAREN    <span class="comment">// )</span>
    RBRACK    <span class="comment">// ]</span>
    RBRACE    <span class="comment">// }</span>
    SEMICOLON <span class="comment">// ;</span>
    COLON

    <span class="comment">// Keywords</span>
    BREAK
    CASE
    CHAN
    CONST
    CONTINUE

    DEFAULT
    DEFER
    ELSE
    FALLTHROUGH
    FOR

    FUNC
    GO
    GOTO
    IF
    IMPORT

    INTERFACE
    MAP
    PACKAGE
    RANGE
    RETURN

    SELECT
    STRUCT
    SWITCH
    TYPE
    VAR
)</pre>
				<p>
The list of tokens.
</p>

			

			

			

			
				
				<h3 id="Lookup">func <a href="src/pkg/go/token/token.htm#L276">Lookup</a></h3>
				<pre>func Lookup(ident string) Token</pre>
				<p>
Lookup maps an identifier to its keyword token or IDENT (if not a keyword).
</p>

				
			

			
				
				<h3 id="Token.IsKeyword">func (Token) <a href="src/pkg/go/token/token.htm#L298">IsKeyword</a></h3>
				<pre>func (tok Token) IsKeyword() bool</pre>
				<p>
IsKeyword returns true for tokens corresponding to keywords;
it returns false otherwise.
</p>

				
				
			
				
				<h3 id="Token.IsLiteral">func (Token) <a href="src/pkg/go/token/token.htm#L288">IsLiteral</a></h3>
				<pre>func (tok Token) IsLiteral() bool</pre>
				<p>
IsLiteral returns true for tokens corresponding to identifiers
and basic type literals; it returns false otherwise.
</p>

				
				
			
				
				<h3 id="Token.IsOperator">func (Token) <a href="src/pkg/go/token/token.htm#L293">IsOperator</a></h3>
				<pre>func (tok Token) IsOperator() bool</pre>
				<p>
IsOperator returns true for tokens corresponding to operators and
delimiters; it returns false otherwise.
</p>

				
				
			
				
				<h3 id="Token.Precedence">func (Token) <a href="src/pkg/go/token/token.htm#L249">Precedence</a></h3>
				<pre>func (op Token) Precedence() int</pre>
				<p>
Precedence returns the operator precedence of the binary
operator op. If op is not a binary operator, the result
is LowestPrecedence.
</p>

				
				
			
				
				<h3 id="Token.String">func (Token) <a href="src/pkg/go/token/token.htm#L222">String</a></h3>
				<pre>func (tok Token) String() string</pre>
				<p>
String returns the string corresponding to the token tok.
For operators, delimiters, and keywords the string is the actual
token character sequence (e.g., for the token ADD, the string is
&#34;+&#34;). For all other tokens the string corresponds to the token
constant name (e.g. for the token IDENT, the string is &#34;IDENT&#34;).
</p>

				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
