
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>parser - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package parser</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "go/parser"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
				<dd><a href="#examples">Examples</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package parser implements a parser for Go source files. Input may be
provided in a variety of forms (see the various Parse* functions); the
output is an abstract syntax tree (AST) representing the Go source. The
parser is invoked through one of the Parse* functions.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#ParseDir">func ParseDir(fset *token.FileSet, path string, filter func(os.FileInfo) bool, mode Mode) (pkgs map[string]*ast.Package, first error)</a></dd>
			
				
				<dd><a href="#ParseExpr">func ParseExpr(x string) (ast.Expr, error)</a></dd>
			
				
				<dd><a href="#ParseFile">func ParseFile(fset *token.FileSet, filename string, src interface{}, mode Mode) (*ast.File, error)</a></dd>
			
			
				
				<dd><a href="#Mode">type Mode</a></dd>
				
				
			
			
		</dl>

		
			<h4 id="examples">Examples</h4>
			<dl>
			
			<dd><a class="exampleLink" href="#example_ParseFile">ParseFile</a></dd>
			
			</dl>
		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/go/parser/interface.htm">interface.go</a>
			
				<a href="src/pkg/go/parser/parser.htm">parser.go</a>
			
			</span>
			</p>
		
	
		
		
		
			
			
			<h2 id="ParseDir">func <a href="src/pkg/go/parser/interface.htm#L104">ParseDir</a></h2>
			<pre>func ParseDir(fset *token.FileSet, path string, filter func(os.FileInfo) bool, mode Mode) (pkgs map[string]*ast.Package, first error)</pre>
			<p>
ParseDir calls ParseFile for the files in the directory specified by path and
returns a map of package name -&gt; package AST with all the packages found. If
filter != nil, only the files with os.FileInfo entries passing through the filter
are considered. The mode bits are passed to ParseFile unchanged. Position
information is recorded in the file set fset.
</p>
<p>
If the directory couldn&#39;t be read, a nil map and the respective error are
returned. If a parse error occurred, a non-nil but incomplete map and the
first error encountered are returned.
</p>

			
		
			
			
			<h2 id="ParseExpr">func <a href="src/pkg/go/parser/interface.htm#L143">ParseExpr</a></h2>
			<pre>func ParseExpr(x string) (ast.Expr, error)</pre>
			<p>
ParseExpr is a convenience function for obtaining the AST of an expression x.
The position information recorded in the AST is undefined.
</p>

			
		
			
			
			<h2 id="ParseFile">func <a href="src/pkg/go/parser/interface.htm#L72">ParseFile</a></h2>
			<pre>func ParseFile(fset *token.FileSet, filename string, src interface{}, mode Mode) (*ast.File, error)</pre>
			<p>
ParseFile parses the source code of a single Go source file and returns
the corresponding ast.File node. The source code may be provided via
the filename of the source file, or via the src parameter.
</p>
<p>
If src != nil, ParseFile parses the source from src and the filename is
only used when recording position information. The type of the argument
for the src parameter must be string, []byte, or io.Reader.
If src == nil, ParseFile parses the file specified by filename.
</p>
<p>
The mode parameter controls the amount of source text parsed and other
optional parser functionality. Position information is recorded in the
file set fset.
</p>
<p>
If the source couldn&#39;t be read, the returned AST is nil and the error
indicates the specific failure. If the source was read but syntax
errors were found, the result is a partial AST (with ast.Bad* nodes
representing the fragments of erroneous source code). Multiple errors
are returned via a scanner.ErrorList which is sorted by file position.
</p>

			<div id="example_ParseFile" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">fset := token.NewFileSet() <span class="comment">// positions are relative to fset</span>

<span class="comment">// Parse the file containing this very example</span>
<span class="comment">// but stop after processing the imports.</span>
f, err := parser.ParseFile(fset, &#34;example_test.go&#34;, nil, parser.ImportsOnly)
if err != nil {
    fmt.Println(err)
    return
}

<span class="comment">// Print the imports from the file&#39;s AST.</span>
for _, s := range f.Imports {
    fmt.Println(s.Path.Value)
}

<span class="comment"></pre>
		
		<p>Output:</p>
		<pre class="output">&#34;fmt&#34;
&#34;go/parser&#34;
&#34;go/token&#34;</pre>
		
	</div>
</div>

		
		
			
			
			<h2 id="Mode">type <a href="src/pkg/go/parser/interface.htm#L42">Mode</a></h2>
			<pre>type Mode uint</pre>
			<p>
A Mode value is a set of flags (or 0).
They control the amount of source code parsed and other optional
parser functionality.
</p>


			
				<pre>const (
    PackageClauseOnly Mode = 1 &lt;&lt; iota <span class="comment">// parsing stops after package clause</span>
    ImportsOnly                        <span class="comment">// parsing stops after import declarations</span>
    ParseComments                      <span class="comment">// parse comments and add them to AST</span>
    Trace                              <span class="comment">// print a trace of parsed productions</span>
    DeclarationErrors                  <span class="comment">// report declaration errors</span>
    SpuriousErrors                     <span class="comment">// report all (not just the first) errors per line</span>
)</pre>
				
			

			

			

			

			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
