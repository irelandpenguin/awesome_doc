
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>printer - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>


<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package printer</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "go/printer"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
				<dd><a href="#examples">Examples</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package printer implements printing of AST nodes.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#Fprint">func Fprint(output io.Writer, fset *token.FileSet, node interface{}) error</a></dd>
			
			
				
				<dd><a href="#CommentedNode">type CommentedNode</a></dd>
				
				
			
				
				<dd><a href="#Config">type Config</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Config.Fprint">func (cfg *Config) Fprint(output io.Writer, fset *token.FileSet, node interface{}) error</a></dd>
				
			
				
				<dd><a href="#Mode">type Mode</a></dd>
				
				
			
			
		</dl>

		
			<h4 id="examples">Examples</h4>
			<dl>
			
			<dd><a class="exampleLink" href="#example_Fprint">Fprint</a></dd>
			
			</dl>
		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/go/printer/nodes.htm">nodes.go</a>
			
				<a href="src/pkg/go/printer/printer.htm">printer.go</a>
			
			</span>
			</p>
		
	
		
		
		
			
			
			<h2 id="Fprint">func <a href="src/pkg/go/printer/printer.htm#L1218">Fprint</a></h2>
			<pre>func Fprint(output io.Writer, fset *token.FileSet, node interface{}) error</pre>
			<p>
Fprint &#34;pretty-prints&#34; an AST node to output.
It calls Config.Fprint with default settings.
</p>

			<div id="example_Fprint" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code"><span class="comment">// Parse source file and extract the AST without comments for</span>
<span class="comment">// this function, with position information referring to the</span>
<span class="comment">// file set fset.</span>
funcAST, fset := parseFunc(&#34;example_test.go&#34;, &#34;ExampleFprint&#34;)

<span class="comment">// Print the function body into buffer buf.</span>
<span class="comment">// The file set is provided to the printer so that it knows</span>
<span class="comment">// about the original source formatting and can add additional</span>
<span class="comment">// line breaks where they were present in the source.</span>
var buf bytes.Buffer
printer.Fprint(&amp;buf, fset, funcAST.Body)

<span class="comment">// Remove braces {} enclosing the function body, unindent,</span>
<span class="comment">// and trim leading and trailing white space.</span>
s := buf.String()
s = s[1 : len(s)-1]
s = strings.TrimSpace(strings.Replace(s, &#34;\n\t&#34;, &#34;\n&#34;, -1))

<span class="comment">// Print the cleaned-up body text to stdout.</span>
fmt.Println(s)

<span class="comment"></pre>
		
		<p>Output:</p>
		<pre class="output">funcAST, fset := parseFunc(&#34;example_test.go&#34;, &#34;ExampleFprint&#34;)

var buf bytes.Buffer
printer.Fprint(&amp;buf, fset, funcAST.Body)

s := buf.String()
s = s[1 : len(s)-1]
s = strings.TrimSpace(strings.Replace(s, &#34;\n\t&#34;, &#34;\n&#34;, -1))

fmt.Println(s)</pre>
		
	</div>
</div>

		
		
			
			
			<h2 id="CommentedNode">type <a href="src/pkg/go/printer/printer.htm#L1201">CommentedNode</a></h2>
			<pre>type CommentedNode struct {
    Node     interface{} <span class="comment">// *ast.File, or ast.Expr, ast.Decl, ast.Spec, or ast.Stmt</span>
    Comments []*ast.CommentGroup
}</pre>
			<p>
A CommentedNode bundles an AST node and corresponding comments.
It may be provided as argument to any of the Fprint functions.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Config">type <a href="src/pkg/go/printer/printer.htm#L1144">Config</a></h2>
			<pre>type Config struct {
    Mode     Mode <span class="comment">// default: 0</span>
    Tabwidth int  <span class="comment">// default: 8</span>
}</pre>
			<p>
A Config node controls the output of Fprint.
</p>


			

			

			

			

			
				
				<h3 id="Config.Fprint">func (*Config) <a href="src/pkg/go/printer/printer.htm#L1211">Fprint</a></h3>
				<pre>func (cfg *Config) Fprint(output io.Writer, fset *token.FileSet, node interface{}) error</pre>
				<p>
Fprint &#34;pretty-prints&#34; an AST node to output for a given configuration cfg.
Position information is interpreted relative to the file set fset.
The node type must be *ast.File, *CommentedNode, or assignment-compatible
to ast.Expr, ast.Decl, ast.Spec, or ast.Stmt.
</p>

				
				
			
		
			
			
			<h2 id="Mode">type <a href="src/pkg/go/printer/printer.htm#L1134">Mode</a></h2>
			<pre>type Mode uint</pre>
			<p>
A Mode value is a set of flags (or 0). They coontrol printing.
</p>


			
				<pre>const (
    RawFormat Mode = 1 &lt;&lt; iota <span class="comment">// do not use a tabwriter; if set, UseSpaces is ignored</span>
    TabIndent                  <span class="comment">// use tabs for indentation independent of UseSpaces</span>
    UseSpaces                  <span class="comment">// use spaces instead of tabs for alignment</span>
    SourcePos                  <span class="comment">// emit //line comments to preserve original source positions</span>
)</pre>
				
			

			

			

			

			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
