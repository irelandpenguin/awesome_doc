
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>mail - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package mail</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "net/mail"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package mail implements parsing of mail messages.
</p>
<p>
For the most part, this package follows the syntax as specified by RFC 5322.
Notable divergences:
</p>
<pre>* Obsolete address formats are not parsed, including addresses with
  embedded route information.
* Group addresses are not parsed.
* The full range of spacing (the CFWS syntax element) is not supported,
  such as breaking addresses across lines.
</pre>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
				<dd><a href="#variables">Variables</a></dd>
			
			
			
				
				<dd><a href="#Address">type Address</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Address.String">func (a *Address) String() string</a></dd>
				
			
				
				<dd><a href="#Header">type Header</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Header.AddressList">func (h Header) AddressList(key string) ([]*Address, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Header.Date">func (h Header) Date() (time.Time, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Header.Get">func (h Header) Get(key string) string</a></dd>
				
			
				
				<dd><a href="#Message">type Message</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ReadMessage">func ReadMessage(r io.Reader) (msg *Message, err error)</a></dd>
				
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/net/mail/message.htm">message.go</a>
			
			</span>
			</p>
		
	
		
		
			<h2 id="variables">Variables</h2>
			
				<pre>var ErrHeaderNotPresent = errors.New(&#34;mail: header not in message&#34;)</pre>
				
			
		
		
		
			
			
			<h2 id="Address">type <a href="src/pkg/net/mail/message.htm#L124">Address</a></h2>
			<pre>type Address struct {
    Name    string <span class="comment">// Proper name; may be empty.</span>
    Address string <span class="comment">// user@domain</span>
}</pre>
			<p>
Address represents a single mail address.
An address such as &#34;Barry Gibbs &lt;bg@example.com&gt;&#34; is represented
as Address{Name: &#34;Barry Gibbs&#34;, Address: &#34;bg@example.com&#34;}.
</p>


			

			

			

			

			
				
				<h3 id="Address.String">func (*Address) <a href="src/pkg/net/mail/message.htm#L132">String</a></h3>
				<pre>func (a *Address) String() string</pre>
				<p>
String formats the address as a valid RFC 5322 address.
If the address&#39;s name contains non-ASCII characters
the name will be rendered according to RFC 2047.
</p>

				
				
			
		
			
			
			<h2 id="Header">type <a href="src/pkg/net/mail/message.htm#L93">Header</a></h2>
			<pre>type Header map[string][]string</pre>
			<p>
A Header represents the key-value pairs in a mail message header.
</p>


			

			

			

			

			
				
				<h3 id="Header.AddressList">func (Header) <a href="src/pkg/net/mail/message.htm#L113">AddressList</a></h3>
				<pre>func (h Header) AddressList(key string) ([]*Address, error)</pre>
				<p>
AddressList parses the named header field as a list of addresses.
</p>

				
				
			
				
				<h3 id="Header.Date">func (Header) <a href="src/pkg/net/mail/message.htm#L104">Date</a></h3>
				<pre>func (h Header) Date() (time.Time, error)</pre>
				<p>
Date parses the Date header field.
</p>

				
				
			
				
				<h3 id="Header.Get">func (Header) <a href="src/pkg/net/mail/message.htm#L97">Get</a></h3>
				<pre>func (h Header) Get(key string) string</pre>
				<p>
Get gets the first value associated with the given key.
If there are no values associated with the key, Get returns &#34;&#34;.
</p>

				
				
			
		
			
			
			<h2 id="Message">type <a href="src/pkg/net/mail/message.htm#L34">Message</a></h2>
			<pre>type Message struct {
    Header Header
    Body   io.Reader
}</pre>
			<p>
A Message represents a parsed mail message.
</p>


			

			

			

			
				
				<h3 id="ReadMessage">func <a href="src/pkg/net/mail/message.htm#L41">ReadMessage</a></h3>
				<pre>func ReadMessage(r io.Reader) (msg *Message, err error)</pre>
				<p>
ReadMessage reads a message from r.
The headers are parsed, and the body of the message will be reading from r.
</p>

				
			

			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
