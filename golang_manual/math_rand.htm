
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>rand - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package rand</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "math/rand"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package rand implements pseudo-random number generators.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#ExpFloat64">func ExpFloat64() float64</a></dd>
			
				
				<dd><a href="#Float32">func Float32() float32</a></dd>
			
				
				<dd><a href="#Float64">func Float64() float64</a></dd>
			
				
				<dd><a href="#Int">func Int() int</a></dd>
			
				
				<dd><a href="#Int31">func Int31() int32</a></dd>
			
				
				<dd><a href="#Int31n">func Int31n(n int32) int32</a></dd>
			
				
				<dd><a href="#Int63">func Int63() int64</a></dd>
			
				
				<dd><a href="#Int63n">func Int63n(n int64) int64</a></dd>
			
				
				<dd><a href="#Intn">func Intn(n int) int</a></dd>
			
				
				<dd><a href="#NormFloat64">func NormFloat64() float64</a></dd>
			
				
				<dd><a href="#Perm">func Perm(n int) []int</a></dd>
			
				
				<dd><a href="#Seed">func Seed(seed int64)</a></dd>
			
				
				<dd><a href="#Uint32">func Uint32() uint32</a></dd>
			
			
				
				<dd><a href="#Rand">type Rand</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#New">func New(src Source) *Rand</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Rand.ExpFloat64">func (r *Rand) ExpFloat64() float64</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rand.Float32">func (r *Rand) Float32() float32</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rand.Float64">func (r *Rand) Float64() float64</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rand.Int">func (r *Rand) Int() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rand.Int31">func (r *Rand) Int31() int32</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rand.Int31n">func (r *Rand) Int31n(n int32) int32</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rand.Int63">func (r *Rand) Int63() int64</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rand.Int63n">func (r *Rand) Int63n(n int64) int64</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rand.Intn">func (r *Rand) Intn(n int) int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rand.NormFloat64">func (r *Rand) NormFloat64() float64</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rand.Perm">func (r *Rand) Perm(n int) []int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rand.Seed">func (r *Rand) Seed(seed int64)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rand.Uint32">func (r *Rand) Uint32() uint32</a></dd>
				
			
				
				<dd><a href="#Source">type Source</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewSource">func NewSource(seed int64) Source</a></dd>
				
				
			
				
				<dd><a href="#Zipf">type Zipf</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewZipf">func NewZipf(r *Rand, s float64, v float64, imax uint64) *Zipf</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Zipf.Uint64">func (z *Zipf) Uint64() uint64</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/math/rand/exp.htm">exp.go</a>
			
				<a href="src/pkg/math/rand/normal.htm">normal.go</a>
			
				<a href="src/pkg/math/rand/rand.htm">rand.go</a>
			
				<a href="src/pkg/math/rand/rng.htm">rng.go</a>
			
				<a href="src/pkg/math/rand/zipf.htm">zipf.go</a>
			
			</span>
			</p>
		
	
		
		
		
			
			
			<h2 id="ExpFloat64">func <a href="src/pkg/math/rand/rand.htm#L162">ExpFloat64</a></h2>
			<pre>func ExpFloat64() float64</pre>
			<p>
ExpFloat64 returns an exponentially distributed float64 in the range
(0, +math.MaxFloat64] with an exponential distribution whose rate parameter
(lambda) is 1 and whose mean is 1/lambda (1).
To produce a distribution with a different rate parameter,
callers can adjust the output using:
</p>
<pre>sample = ExpFloat64() / desiredRateParameter
</pre>

			
		
			
			
			<h2 id="Float32">func <a href="src/pkg/math/rand/rand.htm#L139">Float32</a></h2>
			<pre>func Float32() float32</pre>
			<p>
Float32 returns, as a float32, a pseudo-random number in [0.0,1.0).
</p>

			
		
			
			
			<h2 id="Float64">func <a href="src/pkg/math/rand/rand.htm#L136">Float64</a></h2>
			<pre>func Float64() float64</pre>
			<p>
Float64 returns, as a float64, a pseudo-random number in [0.0,1.0).
</p>

			
		
			
			
			<h2 id="Int">func <a href="src/pkg/math/rand/rand.htm#L121">Int</a></h2>
			<pre>func Int() int</pre>
			<p>
Int returns a non-negative pseudo-random int.
</p>

			
		
			
			
			<h2 id="Int31">func <a href="src/pkg/math/rand/rand.htm#L118">Int31</a></h2>
			<pre>func Int31() int32</pre>
			<p>
Int31 returns a non-negative pseudo-random 31-bit integer as an int32.
</p>

			
		
			
			
			<h2 id="Int31n">func <a href="src/pkg/math/rand/rand.htm#L129">Int31n</a></h2>
			<pre>func Int31n(n int32) int32</pre>
			<p>
Int31n returns, as an int32, a non-negative pseudo-random number in [0,n).
It panics if n &lt;= 0.
</p>

			
		
			
			
			<h2 id="Int63">func <a href="src/pkg/math/rand/rand.htm#L112">Int63</a></h2>
			<pre>func Int63() int64</pre>
			<p>
Int63 returns a non-negative pseudo-random 63-bit integer as an int64.
</p>

			
		
			
			
			<h2 id="Int63n">func <a href="src/pkg/math/rand/rand.htm#L125">Int63n</a></h2>
			<pre>func Int63n(n int64) int64</pre>
			<p>
Int63n returns, as an int64, a non-negative pseudo-random number in [0,n).
It panics if n &lt;= 0.
</p>

			
		
			
			
			<h2 id="Intn">func <a href="src/pkg/math/rand/rand.htm#L133">Intn</a></h2>
			<pre>func Intn(n int) int</pre>
			<p>
Intn returns, as an int, a non-negative pseudo-random number in [0,n).
It panics if n &lt;= 0.
</p>

			
		
			
			
			<h2 id="NormFloat64">func <a href="src/pkg/math/rand/rand.htm#L152">NormFloat64</a></h2>
			<pre>func NormFloat64() float64</pre>
			<p>
NormFloat64 returns a normally distributed float64 in the range
[-math.MaxFloat64, +math.MaxFloat64] with
standard normal distribution (mean = 0, stddev = 1).
To produce a different normal distribution, callers can
adjust the output using:
</p>
<pre>sample = NormFloat64() * desiredStdDev + desiredMean
</pre>

			
		
			
			
			<h2 id="Perm">func <a href="src/pkg/math/rand/rand.htm#L142">Perm</a></h2>
			<pre>func Perm(n int) []int</pre>
			<p>
Perm returns, as a slice of n ints, a pseudo-random permutation of the integers [0,n).
</p>

			
		
			
			
			<h2 id="Seed">func <a href="src/pkg/math/rand/rand.htm#L109">Seed</a></h2>
			<pre>func Seed(seed int64)</pre>
			<p>
Seed uses the provided seed value to initialize the generator to a
deterministic state. If Seed is not called, the generator behaves as
if seeded by Seed(1).
</p>

			
		
			
			
			<h2 id="Uint32">func <a href="src/pkg/math/rand/rand.htm#L115">Uint32</a></h2>
			<pre>func Uint32() uint32</pre>
			<p>
Uint32 returns a pseudo-random 32-bit value as a uint32.
</p>

			
		
		
			
			
			<h2 id="Rand">type <a href="src/pkg/math/rand/rand.htm#L15">Rand</a></h2>
			<pre>type Rand struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A Rand is a source of random numbers.
</p>


			

			

			

			
				
				<h3 id="New">func <a href="src/pkg/math/rand/rand.htm#L21">New</a></h3>
				<pre>func New(src Source) *Rand</pre>
				<p>
New returns a new Rand that uses random values from src
to generate other random values.
</p>

				
			

			
				
				<h3 id="Rand.ExpFloat64">func (*Rand) <a href="src/pkg/math/rand/exp.htm#L21">ExpFloat64</a></h3>
				<pre>func (r *Rand) ExpFloat64() float64</pre>
				<p>
ExpFloat64 returns an exponentially distributed float64 in the range
(0, +math.MaxFloat64] with an exponential distribution whose rate parameter
(lambda) is 1 and whose mean is 1/lambda (1).
To produce a distribution with a different rate parameter,
callers can adjust the output using:
</p>
<pre>sample = ExpFloat64() / desiredRateParameter
</pre>

				
				
			
				
				<h3 id="Rand.Float32">func (*Rand) <a href="src/pkg/math/rand/rand.htm#L85">Float32</a></h3>
				<pre>func (r *Rand) Float32() float32</pre>
				<p>
Float32 returns, as a float32, a pseudo-random number in [0.0,1.0).
</p>

				
				
			
				
				<h3 id="Rand.Float64">func (*Rand) <a href="src/pkg/math/rand/rand.htm#L82">Float64</a></h3>
				<pre>func (r *Rand) Float64() float64</pre>
				<p>
Float64 returns, as a float64, a pseudo-random number in [0.0,1.0).
</p>

				
				
			
				
				<h3 id="Rand.Int">func (*Rand) <a href="src/pkg/math/rand/rand.htm#L36">Int</a></h3>
				<pre>func (r *Rand) Int() int</pre>
				<p>
Int returns a non-negative pseudo-random int.
</p>

				
				
			
				
				<h3 id="Rand.Int31">func (*Rand) <a href="src/pkg/math/rand/rand.htm#L33">Int31</a></h3>
				<pre>func (r *Rand) Int31() int32</pre>
				<p>
Int31 returns a non-negative pseudo-random 31-bit integer as an int32.
</p>

				
				
			
				
				<h3 id="Rand.Int31n">func (*Rand) <a href="src/pkg/math/rand/rand.htm#L57">Int31n</a></h3>
				<pre>func (r *Rand) Int31n(n int32) int32</pre>
				<p>
Int31n returns, as an int32, a non-negative pseudo-random number in [0,n).
It panics if n &lt;= 0.
</p>

				
				
			
				
				<h3 id="Rand.Int63">func (*Rand) <a href="src/pkg/math/rand/rand.htm#L27">Int63</a></h3>
				<pre>func (r *Rand) Int63() int64</pre>
				<p>
Int63 returns a non-negative pseudo-random 63-bit integer as an int64.
</p>

				
				
			
				
				<h3 id="Rand.Int63n">func (*Rand) <a href="src/pkg/math/rand/rand.htm#L43">Int63n</a></h3>
				<pre>func (r *Rand) Int63n(n int64) int64</pre>
				<p>
Int63n returns, as an int64, a non-negative pseudo-random number in [0,n).
It panics if n &lt;= 0.
</p>

				
				
			
				
				<h3 id="Rand.Intn">func (*Rand) <a href="src/pkg/math/rand/rand.htm#L71">Intn</a></h3>
				<pre>func (r *Rand) Intn(n int) int</pre>
				<p>
Intn returns, as an int, a non-negative pseudo-random number in [0,n).
It panics if n &lt;= 0.
</p>

				
				
			
				
				<h3 id="Rand.NormFloat64">func (*Rand) <a href="src/pkg/math/rand/normal.htm#L28">NormFloat64</a></h3>
				<pre>func (r *Rand) NormFloat64() float64</pre>
				<p>
NormFloat64 returns a normally distributed float64 in the range
[-math.MaxFloat64, +math.MaxFloat64] with
standard normal distribution (mean = 0, stddev = 1).
To produce a different normal distribution, callers can
adjust the output using:
</p>
<pre>sample = NormFloat64() * desiredStdDev + desiredMean
</pre>

				
				
			
				
				<h3 id="Rand.Perm">func (*Rand) <a href="src/pkg/math/rand/rand.htm#L88">Perm</a></h3>
				<pre>func (r *Rand) Perm(n int) []int</pre>
				<p>
Perm returns, as a slice of n ints, a pseudo-random permutation of the integers [0,n).
</p>

				
				
			
				
				<h3 id="Rand.Seed">func (*Rand) <a href="src/pkg/math/rand/rand.htm#L24">Seed</a></h3>
				<pre>func (r *Rand) Seed(seed int64)</pre>
				<p>
Seed uses the provided seed value to initialize the generator to a deterministic state.
</p>

				
				
			
				
				<h3 id="Rand.Uint32">func (*Rand) <a href="src/pkg/math/rand/rand.htm#L30">Uint32</a></h3>
				<pre>func (r *Rand) Uint32() uint32</pre>
				<p>
Uint32 returns a pseudo-random 32-bit value as a uint32.
</p>

				
				
			
		
			
			
			<h2 id="Source">type <a href="src/pkg/math/rand/rand.htm#L2">Source</a></h2>
			<pre>type Source interface {
    Int63() int64
    Seed(seed int64)
}</pre>
			<p>
A Source represents a source of uniformly-distributed
pseudo-random int64 values in the range [0, 1&lt;&lt;63).
</p>


			

			

			

			
				
				<h3 id="NewSource">func <a href="src/pkg/math/rand/rand.htm#L8">NewSource</a></h3>
				<pre>func NewSource(seed int64) Source</pre>
				<p>
NewSource returns a new pseudo-random Source seeded with the given value.
</p>

				
			

			
		
			
			
			<h2 id="Zipf">type <a href="src/pkg/math/rand/zipf.htm#L5">Zipf</a></h2>
			<pre>type Zipf struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A Zipf generates Zipf distributed variates.
</p>


			

			

			

			
				
				<h3 id="NewZipf">func <a href="src/pkg/math/rand/zipf.htm#L28">NewZipf</a></h3>
				<pre>func NewZipf(r *Rand, s float64, v float64, imax uint64) *Zipf</pre>
				<p>
NewZipf returns a Zipf generating variates p(k) on [0, imax]
proportional to (v+k)**(-s) where s&gt;1 and k&gt;=0, and v&gt;=1.
</p>

				
			

			
				
				<h3 id="Zipf.Uint64">func (*Zipf) <a href="src/pkg/math/rand/zipf.htm#L47">Uint64</a></h3>
				<pre>func (z *Zipf) Uint64() uint64</pre>
				<p>
Uint64 returns a value drawn from the Zipf distributed described
by the Zipf object.
</p>

				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
