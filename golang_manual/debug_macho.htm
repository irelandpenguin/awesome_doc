
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>macho - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package macho</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "debug/macho"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package macho implements access to Mach-O object files.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
				<dd><a href="#constants">Constants</a></dd>
			
			
			
			
				
				<dd><a href="#Cpu">type Cpu</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Cpu.GoString">func (i Cpu) GoString() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Cpu.String">func (i Cpu) String() string</a></dd>
				
			
				
				<dd><a href="#Dylib">type Dylib</a></dd>
				
				
			
				
				<dd><a href="#DylibCmd">type DylibCmd</a></dd>
				
				
			
				
				<dd><a href="#Dysymtab">type Dysymtab</a></dd>
				
				
			
				
				<dd><a href="#DysymtabCmd">type DysymtabCmd</a></dd>
				
				
			
				
				<dd><a href="#File">type File</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewFile">func NewFile(r io.ReaderAt) (*File, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Open">func Open(name string) (*File, error)</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Close">func (f *File) Close() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.DWARF">func (f *File) DWARF() (*dwarf.Data, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.ImportedLibraries">func (f *File) ImportedLibraries() ([]string, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.ImportedSymbols">func (f *File) ImportedSymbols() ([]string, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Section">func (f *File) Section(name string) *Section</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Segment">func (f *File) Segment(name string) *Segment</a></dd>
				
			
				
				<dd><a href="#FileHeader">type FileHeader</a></dd>
				
				
			
				
				<dd><a href="#FormatError">type FormatError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#FormatError.Error">func (e *FormatError) Error() string</a></dd>
				
			
				
				<dd><a href="#Load">type Load</a></dd>
				
				
			
				
				<dd><a href="#LoadBytes">type LoadBytes</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#LoadBytes.Raw">func (b LoadBytes) Raw() []byte</a></dd>
				
			
				
				<dd><a href="#LoadCmd">type LoadCmd</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#LoadCmd.GoString">func (i LoadCmd) GoString() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#LoadCmd.String">func (i LoadCmd) String() string</a></dd>
				
			
				
				<dd><a href="#Nlist32">type Nlist32</a></dd>
				
				
			
				
				<dd><a href="#Nlist64">type Nlist64</a></dd>
				
				
			
				
				<dd><a href="#Regs386">type Regs386</a></dd>
				
				
			
				
				<dd><a href="#RegsAMD64">type RegsAMD64</a></dd>
				
				
			
				
				<dd><a href="#Section">type Section</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Section.Data">func (s *Section) Data() ([]byte, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Section.Open">func (s *Section) Open() io.ReadSeeker</a></dd>
				
			
				
				<dd><a href="#Section32">type Section32</a></dd>
				
				
			
				
				<dd><a href="#Section64">type Section64</a></dd>
				
				
			
				
				<dd><a href="#SectionHeader">type SectionHeader</a></dd>
				
				
			
				
				<dd><a href="#Segment">type Segment</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Segment.Data">func (s *Segment) Data() ([]byte, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Segment.Open">func (s *Segment) Open() io.ReadSeeker</a></dd>
				
			
				
				<dd><a href="#Segment32">type Segment32</a></dd>
				
				
			
				
				<dd><a href="#Segment64">type Segment64</a></dd>
				
				
			
				
				<dd><a href="#SegmentHeader">type SegmentHeader</a></dd>
				
				
			
				
				<dd><a href="#Symbol">type Symbol</a></dd>
				
				
			
				
				<dd><a href="#Symtab">type Symtab</a></dd>
				
				
			
				
				<dd><a href="#SymtabCmd">type SymtabCmd</a></dd>
				
				
			
				
				<dd><a href="#Thread">type Thread</a></dd>
				
				
			
				
				<dd><a href="#Type">type Type</a></dd>
				
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/debug/macho/file.htm">file.go</a>
			
				<a href="src/pkg/debug/macho/macho.htm">macho.go</a>
			
			</span>
			</p>
		
	
		
			<h2 id="constants">Constants</h2>
			
				<pre>const (
    Magic32 uint32 = 0xfeedface
    Magic64 uint32 = 0xfeedfacf
)</pre>
				
			
		
		
		
		
			
			
			<h2 id="Cpu">type <a href="src/pkg/debug/macho/macho.htm#L32">Cpu</a></h2>
			<pre>type Cpu uint32</pre>
			<p>
A Cpu is a Mach-O cpu type.
</p>


			
				<pre>const (
    Cpu386   Cpu = 7
    CpuAmd64 Cpu = Cpu386 + 1&lt;&lt;24
)</pre>
				
			

			

			

			

			
				
				<h3 id="Cpu.GoString">func (Cpu) <a href="src/pkg/debug/macho/macho.htm#L45">GoString</a></h3>
				<pre>func (i Cpu) GoString() string</pre>
				
				
				
			
				
				<h3 id="Cpu.String">func (Cpu) <a href="src/pkg/debug/macho/macho.htm#L44">String</a></h3>
				<pre>func (i Cpu) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="Dylib">type <a href="src/pkg/debug/macho/file.htm#L109">Dylib</a></h2>
			<pre>type Dylib struct {
    LoadBytes
    Name           string
    Time           uint32
    CurrentVersion uint32
    CompatVersion  uint32
}</pre>
			<p>
A Dylib represents a Mach-O load dynamic library command.
</p>


			

			

			

			

			
		
			
			
			<h2 id="DylibCmd">type <a href="src/pkg/debug/macho/macho.htm#L103">DylibCmd</a></h2>
			<pre>type DylibCmd struct {
    Cmd            LoadCmd
    Len            uint32
    Name           uint32
    Time           uint32
    CurrentVersion uint32
    CompatVersion  uint32
}</pre>
			<p>
A DylibCmd is a Mach-O load dynamic library command.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Dysymtab">type <a href="src/pkg/debug/macho/file.htm#L125">Dysymtab</a></h2>
			<pre>type Dysymtab struct {
    LoadBytes
    DysymtabCmd
    IndirectSyms []uint32 <span class="comment">// indices into Symtab.Syms</span>
}</pre>
			<p>
A Dysymtab represents a Mach-O dynamic symbol table command.
</p>


			

			

			

			

			
		
			
			
			<h2 id="DysymtabCmd">type <a href="src/pkg/debug/macho/macho.htm#L154">DysymtabCmd</a></h2>
			<pre>type DysymtabCmd struct {
    Cmd            LoadCmd
    Len            uint32
    Ilocalsym      uint32
    Nlocalsym      uint32
    Iextdefsym     uint32
    Nextdefsym     uint32
    Iundefsym      uint32
    Nundefsym      uint32
    Tocoffset      uint32
    Ntoc           uint32
    Modtaboff      uint32
    Nmodtab        uint32
    Extrefsymoff   uint32
    Nextrefsyms    uint32
    Indirectsymoff uint32
    Nindirectsyms  uint32
    Extreloff      uint32
    Nextrel        uint32
    Locreloff      uint32
    Nlocrel        uint32
}</pre>
			<p>
A DysymtabCmd is a Mach-O dynamic symbol table command.
</p>


			

			

			

			

			
		
			
			
			<h2 id="File">type <a href="src/pkg/debug/macho/file.htm#L11">File</a></h2>
			<pre>type File struct {
    FileHeader
    ByteOrder binary.ByteOrder
    Loads     []Load
    Sections  []*Section

    Symtab   *Symtab
    Dysymtab *Dysymtab
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A File represents an open Mach-O file.
</p>


			

			

			

			
				
				<h3 id="NewFile">func <a href="src/pkg/debug/macho/file.htm#L179">NewFile</a></h3>
				<pre>func NewFile(r io.ReaderAt) (*File, error)</pre>
				<p>
NewFile creates a new File for accessing a Mach-O binary in an underlying reader.
The Mach-O binary is expected to start at position 0 in the ReaderAt.
</p>

				
			
				
				<h3 id="Open">func <a href="src/pkg/debug/macho/file.htm#L151">Open</a></h3>
				<pre>func Open(name string) (*File, error)</pre>
				<p>
Open opens the named file using os.Open and prepares it for use as a Mach-O binary.
</p>

				
			

			
				
				<h3 id="File.Close">func (*File) <a href="src/pkg/debug/macho/file.htm#L168">Close</a></h3>
				<pre>func (f *File) Close() error</pre>
				<p>
Close closes the File.
If the File was created using NewFile directly instead of Open,
Close has no effect.
</p>

				
				
			
				
				<h3 id="File.DWARF">func (*File) <a href="src/pkg/debug/macho/file.htm#L456">DWARF</a></h3>
				<pre>func (f *File) DWARF() (*dwarf.Data, error)</pre>
				<p>
DWARF returns the DWARF debug information for the Mach-O file.
</p>

				
				
			
				
				<h3 id="File.ImportedLibraries">func (*File) <a href="src/pkg/debug/macho/file.htm#L499">ImportedLibraries</a></h3>
				<pre>func (f *File) ImportedLibraries() ([]string, error)</pre>
				<p>
ImportedLibraries returns the paths of all libraries
referred to by the binary f that are expected to be
linked with the binary at dynamic link time.
</p>

				
				
			
				
				<h3 id="File.ImportedSymbols">func (*File) <a href="src/pkg/debug/macho/file.htm#L482">ImportedSymbols</a></h3>
				<pre>func (f *File) ImportedSymbols() ([]string, error)</pre>
				<p>
ImportedSymbols returns the names of all symbols
referred to by the binary f that are expected to be
satisfied by other libraries at dynamic load time.
</p>

				
				
			
				
				<h3 id="File.Section">func (*File) <a href="src/pkg/debug/macho/file.htm#L446">Section</a></h3>
				<pre>func (f *File) Section(name string) *Section</pre>
				<p>
Section returns the first section with the given name, or nil if no such
section exists.
</p>

				
				
			
				
				<h3 id="File.Segment">func (*File) <a href="src/pkg/debug/macho/file.htm#L435">Segment</a></h3>
				<pre>func (f *File) Segment(name string) *Segment</pre>
				<p>
Segment returns the first Segment with the given name, or nil if no such segment exists.
</p>

				
				
			
		
			
			
			<h2 id="FileHeader">type <a href="src/pkg/debug/macho/macho.htm#L3">FileHeader</a></h2>
			<pre>type FileHeader struct {
    Magic  uint32
    Cpu    Cpu
    SubCpu uint32
    Type   Type
    Ncmd   uint32
    Cmdsz  uint32
    Flags  uint32
}</pre>
			<p>
A FileHeader represents a Mach-O file header.
</p>


			

			

			

			

			
		
			
			
			<h2 id="FormatError">type <a href="src/pkg/debug/macho/file.htm#L135">FormatError</a></h2>
			<pre>type FormatError struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			

			

			

			

			

			
				
				<h3 id="FormatError.Error">func (*FormatError) <a href="src/pkg/debug/macho/file.htm#L141">Error</a></h3>
				<pre>func (e *FormatError) Error() string</pre>
				
				
				
			
		
			
			
			<h2 id="Load">type <a href="src/pkg/debug/macho/file.htm#L24">Load</a></h2>
			<pre>type Load interface {
    Raw() []byte
}</pre>
			<p>
A Load represents any Mach-O load command.
</p>


			

			

			

			

			
		
			
			
			<h2 id="LoadBytes">type <a href="src/pkg/debug/macho/file.htm#L29">LoadBytes</a></h2>
			<pre>type LoadBytes []byte</pre>
			<p>
A LoadBytes is the uninterpreted bytes of a Mach-O load command.
</p>


			

			

			

			

			
				
				<h3 id="LoadBytes.Raw">func (LoadBytes) <a href="src/pkg/debug/macho/file.htm#L31">Raw</a></h3>
				<pre>func (b LoadBytes) Raw() []byte</pre>
				
				
				
			
		
			
			
			<h2 id="LoadCmd">type <a href="src/pkg/debug/macho/macho.htm#L48">LoadCmd</a></h2>
			<pre>type LoadCmd uint32</pre>
			<p>
A LoadCmd is a Mach-O load command.
</p>


			
				<pre>const (
    LoadCmdSegment    LoadCmd = 1
    LoadCmdSymtab     LoadCmd = 2
    LoadCmdThread     LoadCmd = 4
    LoadCmdUnixThread LoadCmd = 5 <span class="comment">// thread+stack</span>
    LoadCmdDysymtab   LoadCmd = 11
    LoadCmdDylib      LoadCmd = 12
    LoadCmdDylinker   LoadCmd = 15
    LoadCmdSegment64  LoadCmd = 25
)</pre>
				
			

			

			

			

			
				
				<h3 id="LoadCmd.GoString">func (LoadCmd) <a href="src/pkg/debug/macho/macho.htm#L70">GoString</a></h3>
				<pre>func (i LoadCmd) GoString() string</pre>
				
				
				
			
				
				<h3 id="LoadCmd.String">func (LoadCmd) <a href="src/pkg/debug/macho/macho.htm#L69">String</a></h3>
				<pre>func (i LoadCmd) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="Nlist32">type <a href="src/pkg/debug/macho/macho.htm#L178">Nlist32</a></h2>
			<pre>type Nlist32 struct {
    Name  uint32
    Type  uint8
    Sect  uint8
    Desc  uint16
    Value uint32
}</pre>
			<p>
An Nlist32 is a Mach-O 32-bit symbol table entry.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Nlist64">type <a href="src/pkg/debug/macho/macho.htm#L187">Nlist64</a></h2>
			<pre>type Nlist64 struct {
    Name  uint32
    Type  uint8
    Sect  uint8
    Desc  uint16
    Value uint64
}</pre>
			<p>
An Nlist64 is a Mach-O 64-bit symbol table entry.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Regs386">type <a href="src/pkg/debug/macho/macho.htm#L213">Regs386</a></h2>
			<pre>type Regs386 struct {
    AX    uint32
    BX    uint32
    CX    uint32
    DX    uint32
    DI    uint32
    SI    uint32
    BP    uint32
    SP    uint32
    SS    uint32
    FLAGS uint32
    IP    uint32
    CS    uint32
    DS    uint32
    ES    uint32
    FS    uint32
    GS    uint32
}</pre>
			<p>
Regs386 is the Mach-O 386 register structure.
</p>


			

			

			

			

			
		
			
			
			<h2 id="RegsAMD64">type <a href="src/pkg/debug/macho/macho.htm#L233">RegsAMD64</a></h2>
			<pre>type RegsAMD64 struct {
    AX    uint64
    BX    uint64
    CX    uint64
    DX    uint64
    DI    uint64
    SI    uint64
    BP    uint64
    SP    uint64
    R8    uint64
    R9    uint64
    R10   uint64
    R11   uint64
    R12   uint64
    R13   uint64
    R14   uint64
    R15   uint64
    IP    uint64
    FLAGS uint64
    CS    uint64
    FS    uint64
    GS    uint64
}</pre>
			<p>
RegsAMD64 is the Mach-O AMD64 register structure.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Section">type <a href="src/pkg/debug/macho/file.htm#L85">Section</a></h2>
			<pre>type Section struct {
    SectionHeader

    <span class="comment">// Embed ReaderAt for ReadAt method.</span>
    <span class="comment">// Do not embed SectionReader directly</span>
    <span class="comment">// to avoid having Read and Seek.</span>
    <span class="comment">// If a client wants Read and Seek it must use</span>
    <span class="comment">// Open() to avoid fighting over the seek offset</span>
    <span class="comment">// with other clients.</span>
    io.ReaderAt
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			

			

			

			

			

			
				
				<h3 id="Section.Data">func (*Section) <a href="src/pkg/debug/macho/file.htm#L99">Data</a></h3>
				<pre>func (s *Section) Data() ([]byte, error)</pre>
				<p>
Data reads and returns the contents of the Mach-O section.
</p>

				
				
			
				
				<h3 id="Section.Open">func (*Section) <a href="src/pkg/debug/macho/file.htm#L106">Open</a></h3>
				<pre>func (s *Section) Open() io.ReadSeeker</pre>
				<p>
Open returns a new ReadSeeker reading the Mach-O section.
</p>

				
				
			
		
			
			
			<h2 id="Section32">type <a href="src/pkg/debug/macho/macho.htm#L113">Section32</a></h2>
			<pre>type Section32 struct {
    Name     [16]byte
    Seg      [16]byte
    Addr     uint32
    Size     uint32
    Offset   uint32
    Align    uint32
    Reloff   uint32
    Nreloc   uint32
    Flags    uint32
    Reserve1 uint32
    Reserve2 uint32
}</pre>
			<p>
A Section32 is a 32-bit Mach-O section header.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Section64">type <a href="src/pkg/debug/macho/macho.htm#L128">Section64</a></h2>
			<pre>type Section64 struct {
    Name     [16]byte
    Seg      [16]byte
    Addr     uint64
    Size     uint64
    Offset   uint32
    Align    uint32
    Reloff   uint32
    Nreloc   uint32
    Flags    uint32
    Reserve1 uint32
    Reserve2 uint32
    Reserve3 uint32
}</pre>
			<p>
A Section32 is a 64-bit Mach-O section header.
</p>


			

			

			

			

			
		
			
			
			<h2 id="SectionHeader">type <a href="src/pkg/debug/macho/file.htm#L73">SectionHeader</a></h2>
			<pre>type SectionHeader struct {
    Name   string
    Seg    string
    Addr   uint64
    Size   uint64
    Offset uint32
    Align  uint32
    Reloff uint32
    Nreloc uint32
    Flags  uint32
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Segment">type <a href="src/pkg/debug/macho/file.htm#L49">Segment</a></h2>
			<pre>type Segment struct {
    LoadBytes
    SegmentHeader

    <span class="comment">// Embed ReaderAt for ReadAt method.</span>
    <span class="comment">// Do not embed SectionReader directly</span>
    <span class="comment">// to avoid having Read and Seek.</span>
    <span class="comment">// If a client wants Read and Seek it must use</span>
    <span class="comment">// Open() to avoid fighting over the seek offset</span>
    <span class="comment">// with other clients.</span>
    io.ReaderAt
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A Segment represents a Mach-O 32-bit or 64-bit load segment command.
</p>


			

			

			

			

			
				
				<h3 id="Segment.Data">func (*Segment) <a href="src/pkg/debug/macho/file.htm#L64">Data</a></h3>
				<pre>func (s *Segment) Data() ([]byte, error)</pre>
				<p>
Data reads and returns the contents of the segment.
</p>

				
				
			
				
				<h3 id="Segment.Open">func (*Segment) <a href="src/pkg/debug/macho/file.htm#L71">Open</a></h3>
				<pre>func (s *Segment) Open() io.ReadSeeker</pre>
				<p>
Open returns a new ReadSeeker reading the segment.
</p>

				
				
			
		
			
			
			<h2 id="Segment32">type <a href="src/pkg/debug/macho/macho.htm#L88">Segment32</a></h2>
			<pre>type Segment32 struct {
    Cmd     LoadCmd
    Len     uint32
    Name    [16]byte
    Addr    uint32
    Memsz   uint32
    Offset  uint32
    Filesz  uint32
    Maxprot uint32
    Prot    uint32
    Nsect   uint32
    Flag    uint32
}</pre>
			<p>
A Segment32 is a 32-bit Mach-O segment load command.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Segment64">type <a href="src/pkg/debug/macho/macho.htm#L73">Segment64</a></h2>
			<pre>type Segment64 struct {
    Cmd     LoadCmd
    Len     uint32
    Name    [16]byte
    Addr    uint64
    Memsz   uint64
    Offset  uint64
    Filesz  uint64
    Maxprot uint32
    Prot    uint32
    Nsect   uint32
    Flag    uint32
}</pre>
			<p>
A Segment64 is a 64-bit Mach-O segment load command.
</p>


			

			

			

			

			
		
			
			
			<h2 id="SegmentHeader">type <a href="src/pkg/debug/macho/file.htm#L34">SegmentHeader</a></h2>
			<pre>type SegmentHeader struct {
    Cmd     LoadCmd
    Len     uint32
    Name    string
    Addr    uint64
    Memsz   uint64
    Offset  uint64
    Filesz  uint64
    Maxprot uint32
    Prot    uint32
    Nsect   uint32
    Flag    uint32
}</pre>
			<p>
A SegmentHeader is the header for a Mach-O 32-bit or 64-bit load segment command.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Symbol">type <a href="src/pkg/debug/macho/macho.htm#L196">Symbol</a></h2>
			<pre>type Symbol struct {
    Name  string
    Type  uint8
    Sect  uint8
    Desc  uint16
    Value uint64
}</pre>
			<p>
A Symbol is a Mach-O 32-bit or 64-bit symbol table entry.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Symtab">type <a href="src/pkg/debug/macho/file.htm#L118">Symtab</a></h2>
			<pre>type Symtab struct {
    LoadBytes
    SymtabCmd
    Syms []Symbol
}</pre>
			<p>
A Symtab represents a Mach-O symbol table command.
</p>


			

			

			

			

			
		
			
			
			<h2 id="SymtabCmd">type <a href="src/pkg/debug/macho/macho.htm#L144">SymtabCmd</a></h2>
			<pre>type SymtabCmd struct {
    Cmd     LoadCmd
    Len     uint32
    Symoff  uint32
    Nsyms   uint32
    Stroff  uint32
    Strsize uint32
}</pre>
			<p>
A SymtabCmd is a Mach-O symbol table command.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Thread">type <a href="src/pkg/debug/macho/macho.htm#L205">Thread</a></h2>
			<pre>type Thread struct {
    Cmd  LoadCmd
    Len  uint32
    Type uint32
    Data []uint32
}</pre>
			<p>
A Thread is a Mach-O thread state command.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Type">type <a href="src/pkg/debug/macho/macho.htm#L24">Type</a></h2>
			<pre>type Type uint32</pre>
			<p>
A Type is a Mach-O file type, either an object or an executable.
</p>


			
				<pre>const (
    TypeObj  Type = 1
    TypeExec Type = 2
)</pre>
				
			

			

			

			

			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
