
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>syslog - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package syslog</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "log/syslog"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package syslog provides a simple interface to the system log service. It
can send messages to the syslog daemon using UNIX domain sockets, UDP, or
TCP connections.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#NewLogger">func NewLogger(p Priority, logFlag int) (*log.Logger, error)</a></dd>
			
			
				
				<dd><a href="#Priority">type Priority</a></dd>
				
				
			
				
				<dd><a href="#Writer">type Writer</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Dial">func Dial(network, raddr string, priority Priority, prefix string) (w *Writer, err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#New">func New(priority Priority, prefix string) (w *Writer, err error)</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Alert">func (w *Writer) Alert(m string) (err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Close">func (w *Writer) Close() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Crit">func (w *Writer) Crit(m string) (err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Debug">func (w *Writer) Debug(m string) (err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Emerg">func (w *Writer) Emerg(m string) (err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Err">func (w *Writer) Err(m string) (err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Info">func (w *Writer) Info(m string) (err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Notice">func (w *Writer) Notice(m string) (err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Warning">func (w *Writer) Warning(m string) (err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Write">func (w *Writer) Write(b []byte) (int, error)</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/log/syslog/syslog.htm">syslog.go</a>
			
				<a href="src/pkg/log/syslog/syslog_unix.htm">syslog_unix.go</a>
			
			</span>
			</p>
		
	
		
		
		
			
			
			<h2 id="NewLogger">func <a href="src/pkg/log/syslog/syslog.htm#L154">NewLogger</a></h2>
			<pre>func NewLogger(p Priority, logFlag int) (*log.Logger, error)</pre>
			<p>
NewLogger creates a log.Logger whose output is written to
the system log service with the specified priority. The logFlag
argument is the flag set passed through to log.New to create
the Logger.
</p>

			
		
		
			
			
			<h2 id="Priority">type <a href="src/pkg/log/syslog/syslog.htm#L10">Priority</a></h2>
			<pre>type Priority int</pre>
			

			
				<pre>const (
    <span class="comment">// From /usr/include/sys/syslog.h.</span>
    <span class="comment">// These are the same on Linux, BSD, and OS X.</span>
    LOG_EMERG Priority = iota
    LOG_ALERT
    LOG_CRIT
    LOG_ERR
    LOG_WARNING
    LOG_NOTICE
    LOG_INFO
    LOG_DEBUG
)</pre>
				
			

			

			

			

			
		
			
			
			<h2 id="Writer">type <a href="src/pkg/log/syslog/syslog.htm#L26">Writer</a></h2>
			<pre>type Writer struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A Writer is a connection to a syslog server.
</p>


			

			

			

			
				
				<h3 id="Dial">func <a href="src/pkg/log/syslog/syslog.htm#L53">Dial</a></h3>
				<pre>func Dial(network, raddr string, priority Priority, prefix string) (w *Writer, err error)</pre>
				<p>
Dial establishes a connection to a log daemon by connecting
to address raddr on the network net.
Each write to the returned writer sends a log message with
the given priority and prefix.
</p>

				
			
				
				<h3 id="New">func <a href="src/pkg/log/syslog/syslog.htm#L45">New</a></h3>
				<pre>func New(priority Priority, prefix string) (w *Writer, err error)</pre>
				<p>
New establishes a new connection to the system log daemon.
Each write to the returned writer sends a log message with
the given priority and prefix.
</p>

				
			

			
				
				<h3 id="Writer.Alert">func (*Writer) <a href="src/pkg/log/syslog/syslog.htm#L89">Alert</a></h3>
				<pre>func (w *Writer) Alert(m string) (err error)</pre>
				<p>
Alert logs a message using the LOG_ALERT priority.
</p>

				
				
			
				
				<h3 id="Writer.Close">func (*Writer) <a href="src/pkg/log/syslog/syslog.htm#L80">Close</a></h3>
				<pre>func (w *Writer) Close() error</pre>
				
				
				
			
				
				<h3 id="Writer.Crit">func (*Writer) <a href="src/pkg/log/syslog/syslog.htm#L95">Crit</a></h3>
				<pre>func (w *Writer) Crit(m string) (err error)</pre>
				<p>
Crit logs a message using the LOG_CRIT priority.
</p>

				
				
			
				
				<h3 id="Writer.Debug">func (*Writer) <a href="src/pkg/log/syslog/syslog.htm#L125">Debug</a></h3>
				<pre>func (w *Writer) Debug(m string) (err error)</pre>
				<p>
Debug logs a message using the LOG_DEBUG priority.
</p>

				
				
			
				
				<h3 id="Writer.Emerg">func (*Writer) <a href="src/pkg/log/syslog/syslog.htm#L83">Emerg</a></h3>
				<pre>func (w *Writer) Emerg(m string) (err error)</pre>
				<p>
Emerg logs a message using the LOG_EMERG priority.
</p>

				
				
			
				
				<h3 id="Writer.Err">func (*Writer) <a href="src/pkg/log/syslog/syslog.htm#L101">Err</a></h3>
				<pre>func (w *Writer) Err(m string) (err error)</pre>
				<p>
Err logs a message using the LOG_ERR priority.
</p>

				
				
			
				
				<h3 id="Writer.Info">func (*Writer) <a href="src/pkg/log/syslog/syslog.htm#L119">Info</a></h3>
				<pre>func (w *Writer) Info(m string) (err error)</pre>
				<p>
Info logs a message using the LOG_INFO priority.
</p>

				
				
			
				
				<h3 id="Writer.Notice">func (*Writer) <a href="src/pkg/log/syslog/syslog.htm#L113">Notice</a></h3>
				<pre>func (w *Writer) Notice(m string) (err error)</pre>
				<p>
Notice logs a message using the LOG_NOTICE priority.
</p>

				
				
			
				
				<h3 id="Writer.Warning">func (*Writer) <a href="src/pkg/log/syslog/syslog.htm#L107">Warning</a></h3>
				<pre>func (w *Writer) Warning(m string) (err error)</pre>
				<p>
Warning logs a message using the LOG_WARNING priority.
</p>

				
				
			
				
				<h3 id="Writer.Write">func (*Writer) <a href="src/pkg/log/syslog/syslog.htm#L69">Write</a></h3>
				<pre>func (w *Writer) Write(b []byte) (int, error)</pre>
				<p>
Write sends a log message to the syslog daemon.
</p>

				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
