
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>list - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package list</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "container/list"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package list implements a doubly linked list.
</p>
<p>
To iterate over a list (where l is a *List):
</p>
<pre>for e := l.Front(); e != nil; e = e.Next() {
	// do something with e.Value
}
</pre>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
			
				
				<dd><a href="#Element">type Element</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Element.Next">func (e *Element) Next() *Element</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Element.Prev">func (e *Element) Prev() *Element</a></dd>
				
			
				
				<dd><a href="#List">type List</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#New">func New() *List</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#List.Back">func (l *List) Back() *Element</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.Front">func (l *List) Front() *Element</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.Init">func (l *List) Init() *List</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.InsertAfter">func (l *List) InsertAfter(value interface{}, mark *Element) *Element</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.InsertBefore">func (l *List) InsertBefore(value interface{}, mark *Element) *Element</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.Len">func (l *List) Len() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.MoveToBack">func (l *List) MoveToBack(e *Element)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.MoveToFront">func (l *List) MoveToFront(e *Element)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.PushBack">func (l *List) PushBack(value interface{}) *Element</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.PushBackList">func (l *List) PushBackList(ol *List)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.PushFront">func (l *List) PushFront(value interface{}) *Element</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.PushFrontList">func (l *List) PushFrontList(ol *List)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#List.Remove">func (l *List) Remove(e *Element) interface{}</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/container/list/list.htm">list.go</a>
			
			</span>
			</p>
		
	
		
		
		
		
			
			
			<h2 id="Element">type <a href="src/pkg/container/list/list.htm#L5">Element</a></h2>
			<pre>type Element struct {

    <span class="comment">// The contents of this list element.</span>
    Value interface{}
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Element is an element in the linked list.
</p>


			

			

			

			

			
				
				<h3 id="Element.Next">func (*Element) <a href="src/pkg/container/list/list.htm#L18">Next</a></h3>
				<pre>func (e *Element) Next() *Element</pre>
				<p>
Next returns the next list element or nil.
</p>

				
				
			
				
				<h3 id="Element.Prev">func (*Element) <a href="src/pkg/container/list/list.htm#L21">Prev</a></h3>
				<pre>func (e *Element) Prev() *Element</pre>
				<p>
Prev returns the previous list element or nil.
</p>

				
				
			
		
			
			
			<h2 id="List">type <a href="src/pkg/container/list/list.htm#L25">List</a></h2>
			<pre>type List struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
List represents a doubly linked list.
The zero value for List is an empty list ready to use.
</p>


			

			

			

			
				
				<h3 id="New">func <a href="src/pkg/container/list/list.htm#L39">New</a></h3>
				<pre>func New() *List</pre>
				<p>
New returns an initialized list.
</p>

				
			

			
				
				<h3 id="List.Back">func (*List) <a href="src/pkg/container/list/list.htm#L45">Back</a></h3>
				<pre>func (l *List) Back() *Element</pre>
				<p>
Back returns the last element in the list.
</p>

				
				
			
				
				<h3 id="List.Front">func (*List) <a href="src/pkg/container/list/list.htm#L42">Front</a></h3>
				<pre>func (l *List) Front() *Element</pre>
				<p>
Front returns the first element in the list.
</p>

				
				
			
				
				<h3 id="List.Init">func (*List) <a href="src/pkg/container/list/list.htm#L31">Init</a></h3>
				<pre>func (l *List) Init() *List</pre>
				<p>
Init initializes or clears a List.
</p>

				
				
			
				
				<h3 id="List.InsertAfter">func (*List) <a href="src/pkg/container/list/list.htm#L151">InsertAfter</a></h3>
				<pre>func (l *List) InsertAfter(value interface{}, mark *Element) *Element</pre>
				<p>
InsertAfter inserts the value immediately after mark and returns a new Element containing the value.
</p>

				
				
			
				
				<h3 id="List.InsertBefore">func (*List) <a href="src/pkg/container/list/list.htm#L141">InsertBefore</a></h3>
				<pre>func (l *List) InsertBefore(value interface{}, mark *Element) *Element</pre>
				<p>
InsertBefore inserts the value immediately before mark and returns a new Element containing the value.
</p>

				
				
			
				
				<h3 id="List.Len">func (*List) <a href="src/pkg/container/list/list.htm#L179">Len</a></h3>
				<pre>func (l *List) Len() int</pre>
				<p>
Len returns the number of elements in the list.
</p>

				
				
			
				
				<h3 id="List.MoveToBack">func (*List) <a href="src/pkg/container/list/list.htm#L170">MoveToBack</a></h3>
				<pre>func (l *List) MoveToBack(e *Element)</pre>
				<p>
MoveToBack moves the element to the back of the list.
</p>

				
				
			
				
				<h3 id="List.MoveToFront">func (*List) <a href="src/pkg/container/list/list.htm#L161">MoveToFront</a></h3>
				<pre>func (l *List) MoveToFront(e *Element)</pre>
				<p>
MoveToFront moves the element to the front of the list.
</p>

				
				
			
				
				<h3 id="List.PushBack">func (*List) <a href="src/pkg/container/list/list.htm#L134">PushBack</a></h3>
				<pre>func (l *List) PushBack(value interface{}) *Element</pre>
				<p>
PushBack inserts the value at the back of the list and returns a new Element containing the value.
</p>

				
				
			
				
				<h3 id="List.PushBackList">func (*List) <a href="src/pkg/container/list/list.htm#L182">PushBackList</a></h3>
				<pre>func (l *List) PushBackList(ol *List)</pre>
				<p>
PushBackList inserts each element of ol at the back of the list.
</p>

				
				
			
				
				<h3 id="List.PushFront">func (*List) <a href="src/pkg/container/list/list.htm#L127">PushFront</a></h3>
				<pre>func (l *List) PushFront(value interface{}) *Element</pre>
				<p>
PushFront inserts the value at the front of the list and returns a new Element containing the value.
</p>

				
				
			
				
				<h3 id="List.PushFrontList">func (*List) <a href="src/pkg/container/list/list.htm#L193">PushFrontList</a></h3>
				<pre>func (l *List) PushFrontList(ol *List)</pre>
				<p>
PushFrontList inserts each element of ol at the front of the list. The ordering of the passed list is preserved.
</p>

				
				
			
				
				<h3 id="List.Remove">func (*List) <a href="src/pkg/container/list/list.htm#L49">Remove</a></h3>
				<pre>func (l *List) Remove(e *Element) interface{}</pre>
				<p>
Remove removes the element from the list
and returns its Value.
</p>

				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
