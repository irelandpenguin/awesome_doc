
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>suffixarray - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package suffixarray</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "index/suffixarray"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package suffixarray implements substring search in logarithmic time using
an in-memory suffix array.
</p>
<p>
Example use:
</p>
<pre>// create index for some data
index := suffixarray.New(data)

// lookup byte slice s
offsets1 := index.Lookup(s, -1) // the list of all indices where s occurs in data
offsets2 := index.Lookup(s, 3)  // the list of at most 3 indices where s occurs in data
</pre>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
			
				
				<dd><a href="#Index">type Index</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#New">func New(data []byte) *Index</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Index.Bytes">func (x *Index) Bytes() []byte</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Index.FindAllIndex">func (x *Index) FindAllIndex(r *regexp.Regexp, n int) (result [][]int)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Index.Lookup">func (x *Index) Lookup(s []byte, n int) (result []int)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Index.Read">func (x *Index) Read(r io.Reader) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Index.Write">func (x *Index) Write(w io.Writer) error</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/index/suffixarray/qsufsort.htm">qsufsort.go</a>
			
				<a href="src/pkg/index/suffixarray/suffixarray.htm">suffixarray.go</a>
			
			</span>
			</p>
		
	
		
		
		
		
			
			
			<h2 id="Index">type <a href="src/pkg/index/suffixarray/suffixarray.htm#L18">Index</a></h2>
			<pre>type Index struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Index implements a suffix array for fast substring search.
</p>


			

			

			

			
				
				<h3 id="New">func <a href="src/pkg/index/suffixarray/suffixarray.htm#L25">New</a></h3>
				<pre>func New(data []byte) *Index</pre>
				<p>
New creates a new Index for data.
Index creation time is O(N*log(N)) for N = len(data).
</p>

				
			

			
				
				<h3 id="Index.Bytes">func (*Index) <a href="src/pkg/index/suffixarray/suffixarray.htm#L155">Bytes</a></h3>
				<pre>func (x *Index) Bytes() []byte</pre>
				<p>
Bytes returns the data over which the index was created.
It must not be modified.
</p>

				
				
			
				
				<h3 id="Index.FindAllIndex">func (*Index) <a href="src/pkg/index/suffixarray/suffixarray.htm#L202">FindAllIndex</a></h3>
				<pre>func (x *Index) FindAllIndex(r *regexp.Regexp, n int) (result [][]int)</pre>
				<p>
FindAllIndex returns a sorted list of non-overlapping matches of the
regular expression r, where a match is a pair of indices specifying
the matched slice of x.Bytes(). If n &lt; 0, all matches are returned
in successive order. Otherwise, at most n matches are returned and
they may not be successive. The result is nil if there are no matches,
or if n == 0.
</p>

				
				
			
				
				<h3 id="Index.Lookup">func (*Index) <a href="src/pkg/index/suffixarray/suffixarray.htm#L180">Lookup</a></h3>
				<pre>func (x *Index) Lookup(s []byte, n int) (result []int)</pre>
				<p>
Lookup returns an unsorted list of at most n indices where the byte string s
occurs in the indexed data. If n &lt; 0, all occurrences are returned.
The result is nil if s is empty, s is not found, or n == 0.
Lookup time is O(log(N)*len(s) + len(result)) where N is the
size of the indexed data.
</p>

				
				
			
				
				<h3 id="Index.Read">func (*Index) <a href="src/pkg/index/suffixarray/suffixarray.htm#L88">Read</a></h3>
				<pre>func (x *Index) Read(r io.Reader) error</pre>
				<p>
Read reads the index from r into x; x must not be nil.
</p>

				
				
			
				
				<h3 id="Index.Write">func (*Index) <a href="src/pkg/index/suffixarray/suffixarray.htm#L127">Write</a></h3>
				<pre>func (x *Index) Write(w io.Writer) error</pre>
				<p>
Write writes the index x to w.
</p>

				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
