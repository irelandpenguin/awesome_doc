
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>gosym - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package gosym</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "debug/gosym"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package gosym implements access to the Go symbol
and line number tables embedded in Go binaries generated
by the gc compilers.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
			
				
				<dd><a href="#DecodingError">type DecodingError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#DecodingError.Error">func (e *DecodingError) Error() string</a></dd>
				
			
				
				<dd><a href="#Func">type Func</a></dd>
				
				
			
				
				<dd><a href="#LineTable">type LineTable</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewLineTable">func NewLineTable(data []byte, text uint64) *LineTable</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#LineTable.LineToPC">func (t *LineTable) LineToPC(line int, maxpc uint64) uint64</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#LineTable.PCToLine">func (t *LineTable) PCToLine(pc uint64) int</a></dd>
				
			
				
				<dd><a href="#Obj">type Obj</a></dd>
				
				
			
				
				<dd><a href="#Sym">type Sym</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Sym.BaseName">func (s *Sym) BaseName() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Sym.PackageName">func (s *Sym) PackageName() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Sym.ReceiverName">func (s *Sym) ReceiverName() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Sym.Static">func (s *Sym) Static() bool</a></dd>
				
			
				
				<dd><a href="#Table">type Table</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewTable">func NewTable(symtab []byte, pcln *LineTable) (*Table, error)</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Table.LineToPC">func (t *Table) LineToPC(file string, line int) (pc uint64, fn *Func, err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Table.LookupFunc">func (t *Table) LookupFunc(name string) *Func</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Table.LookupSym">func (t *Table) LookupSym(name string) *Sym</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Table.PCToFunc">func (t *Table) PCToFunc(pc uint64) *Func</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Table.PCToLine">func (t *Table) PCToLine(pc uint64) (file string, line int, fn *Func)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Table.SymByAddr">func (t *Table) SymByAddr(addr uint64) *Sym</a></dd>
				
			
				
				<dd><a href="#UnknownFileError">type UnknownFileError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#UnknownFileError.Error">func (e UnknownFileError) Error() string</a></dd>
				
			
				
				<dd><a href="#UnknownLineError">type UnknownLineError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#UnknownLineError.Error">func (e *UnknownLineError) Error() string</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/debug/gosym/pclntab.htm">pclntab.go</a>
			
				<a href="src/pkg/debug/gosym/symtab.htm">symtab.go</a>
			
			</span>
			</p>
		
	
		
		
		
		
			
			
			<h2 id="DecodingError">type <a href="src/pkg/debug/gosym/symtab.htm#L524">DecodingError</a></h2>
			<pre>type DecodingError struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
DecodingError represents an error during the decoding of
the symbol table.
</p>


			

			

			

			

			
				
				<h3 id="DecodingError.Error">func (*DecodingError) <a href="src/pkg/debug/gosym/symtab.htm#L530">Error</a></h3>
				<pre>func (e *DecodingError) Error() string</pre>
				
				
				
			
		
			
			
			<h2 id="Func">type <a href="src/pkg/debug/gosym/symtab.htm#L58">Func</a></h2>
			<pre>type Func struct {
    Entry uint64
    *Sym
    End       uint64
    Params    []*Sym
    Locals    []*Sym
    FrameSize int
    LineTable *LineTable
    Obj       *Obj
}</pre>
			<p>
A Func collects information about a single function.
</p>


			

			

			

			

			
		
			
			
			<h2 id="LineTable">type <a href="src/pkg/debug/gosym/pclntab.htm#L3">LineTable</a></h2>
			<pre>type LineTable struct {
    Data []byte
    PC   uint64
    Line int
}</pre>
			

			

			

			

			
				
				<h3 id="NewLineTable">func <a href="src/pkg/debug/gosym/pclntab.htm#L70">NewLineTable</a></h3>
				<pre>func NewLineTable(data []byte, text uint64) *LineTable</pre>
				<p>
NewLineTable returns a new PC/line table
corresponding to the encoded data.
Text must be the start address of the
corresponding text segment.
</p>

				
			

			
				
				<h3 id="LineTable.LineToPC">func (*LineTable) <a href="src/pkg/debug/gosym/pclntab.htm#L57">LineToPC</a></h3>
				<pre>func (t *LineTable) LineToPC(line int, maxpc uint64) uint64</pre>
				
				
				
			
				
				<h3 id="LineTable.PCToLine">func (*LineTable) <a href="src/pkg/debug/gosym/pclntab.htm#L52">PCToLine</a></h3>
				<pre>func (t *LineTable) PCToLine(pc uint64) int</pre>
				
				
				
			
		
			
			
			<h2 id="Obj">type <a href="src/pkg/debug/gosym/symtab.htm#L70">Obj</a></h2>
			<pre>type Obj struct {
    Funcs []Func
    Paths []Sym
}</pre>
			<p>
An Obj represents a single object file.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Sym">type <a href="src/pkg/debug/gosym/symtab.htm#L17">Sym</a></h2>
			<pre>type Sym struct {
    Value  uint64
    Type   byte
    Name   string
    GoType uint64
    <span class="comment">// If this symbol if a function symbol, the corresponding Func</span>
    Func *Func
}</pre>
			<p>
A Sym represents a single symbol table entry.
</p>


			

			

			

			

			
				
				<h3 id="Sym.BaseName">func (*Sym) <a href="src/pkg/debug/gosym/symtab.htm#L50">BaseName</a></h3>
				<pre>func (s *Sym) BaseName() string</pre>
				<p>
BaseName returns the symbol name without the package or receiver name.
</p>

				
				
			
				
				<h3 id="Sym.PackageName">func (*Sym) <a href="src/pkg/debug/gosym/symtab.htm#L31">PackageName</a></h3>
				<pre>func (s *Sym) PackageName() string</pre>
				<p>
PackageName returns the package part of the symbol name,
or the empty string if there is none.
</p>

				
				
			
				
				<h3 id="Sym.ReceiverName">func (*Sym) <a href="src/pkg/debug/gosym/symtab.htm#L40">ReceiverName</a></h3>
				<pre>func (s *Sym) ReceiverName() string</pre>
				<p>
ReceiverName returns the receiver type name of this symbol,
or the empty string if there is none.
</p>

				
				
			
				
				<h3 id="Sym.Static">func (*Sym) <a href="src/pkg/debug/gosym/symtab.htm#L27">Static</a></h3>
				<pre>func (s *Sym) Static() bool</pre>
				<p>
Static returns whether this symbol is static (not visible outside its file).
</p>

				
				
			
		
			
			
			<h2 id="Table">type <a href="src/pkg/debug/gosym/symtab.htm#L82">Table</a></h2>
			<pre>type Table struct {
    Syms  []Sym
    Funcs []Func
    Files map[string]*Obj
    Objs  []Obj
}</pre>
			<p>
Table represents a Go symbol table.  It stores all of the
symbols decoded from the program and provides methods to translate
between symbols, names, and addresses.
</p>


			

			

			

			
				
				<h3 id="NewTable">func <a href="src/pkg/debug/gosym/symtab.htm#L141">NewTable</a></h3>
				<pre>func NewTable(symtab []byte, pcln *LineTable) (*Table, error)</pre>
				<p>
NewTable decodes the Go symbol table in data,
returning an in-memory representation.
</p>

				
			

			
				
				<h3 id="Table.LineToPC">func (*Table) <a href="src/pkg/debug/gosym/symtab.htm#L347">LineToPC</a></h3>
				<pre>func (t *Table) LineToPC(file string, line int) (pc uint64, fn *Func, err error)</pre>
				<p>
LineToPC looks up the first program counter on the given line in
the named file.  Returns UnknownPathError or UnknownLineError if
there is an error looking up this line.
</p>

				
				
			
				
				<h3 id="Table.LookupFunc">func (*Table) <a href="src/pkg/debug/gosym/symtab.htm#L384">LookupFunc</a></h3>
				<pre>func (t *Table) LookupFunc(name string) *Func</pre>
				<p>
LookupFunc returns the text, data, or bss symbol with the given name,
or nil if no such symbol is found.
</p>

				
				
			
				
				<h3 id="Table.LookupSym">func (*Table) <a href="src/pkg/debug/gosym/symtab.htm#L368">LookupSym</a></h3>
				<pre>func (t *Table) LookupSym(name string) *Sym</pre>
				<p>
LookupSym returns the text, data, or bss symbol with the given name,
or nil if no such symbol is found.
</p>

				
				
			
				
				<h3 id="Table.PCToFunc">func (*Table) <a href="src/pkg/debug/gosym/symtab.htm#L317">PCToFunc</a></h3>
				<pre>func (t *Table) PCToFunc(pc uint64) *Func</pre>
				<p>
PCToFunc returns the function containing the program counter pc,
or nil if there is no such function.
</p>

				
				
			
				
				<h3 id="Table.PCToLine">func (*Table) <a href="src/pkg/debug/gosym/symtab.htm#L336">PCToLine</a></h3>
				<pre>func (t *Table) PCToLine(pc uint64) (file string, line int, fn *Func)</pre>
				<p>
PCToLine looks up line number information for a program counter.
If there is no information, it returns fn == nil.
</p>

				
				
			
				
				<h3 id="Table.SymByAddr">func (*Table) <a href="src/pkg/debug/gosym/symtab.htm#L396">SymByAddr</a></h3>
				<pre>func (t *Table) SymByAddr(addr uint64) *Sym</pre>
				<p>
SymByAddr returns the text, data, or bss symbol starting at the given address.
TODO(rsc): Allow lookup by any address within the symbol.
</p>

				
				
			
		
			
			
			<h2 id="UnknownFileError">type <a href="src/pkg/debug/gosym/symtab.htm#L506">UnknownFileError</a></h2>
			<pre>type UnknownFileError string</pre>
			<p>
UnknownFileError represents a failure to find the specific file in
the symbol table.
</p>


			

			

			

			

			
				
				<h3 id="UnknownFileError.Error">func (UnknownFileError) <a href="src/pkg/debug/gosym/symtab.htm#L508">Error</a></h3>
				<pre>func (e UnknownFileError) Error() string</pre>
				
				
				
			
		
			
			
			<h2 id="UnknownLineError">type <a href="src/pkg/debug/gosym/symtab.htm#L513">UnknownLineError</a></h2>
			<pre>type UnknownLineError struct {
    File string
    Line int
}</pre>
			<p>
UnknownLineError represents a failure to map a line to a program
counter, either because the line is beyond the bounds of the file
or because there is no code on the given line.
</p>


			

			

			

			

			
				
				<h3 id="UnknownLineError.Error">func (*UnknownLineError) <a href="src/pkg/debug/gosym/symtab.htm#L518">Error</a></h3>
				<pre>func (e *UnknownLineError) Error() string</pre>
				
				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
