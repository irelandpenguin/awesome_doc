
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>httptest - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package httptest</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "net/http/httptest"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package httptest provides utilities for HTTP testing.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
				<dd><a href="#constants">Constants</a></dd>
			
			
			
			
				
				<dd><a href="#ResponseRecorder">type ResponseRecorder</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewRecorder">func NewRecorder() *ResponseRecorder</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#ResponseRecorder.Flush">func (rw *ResponseRecorder) Flush()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ResponseRecorder.Header">func (rw *ResponseRecorder) Header() http.Header</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ResponseRecorder.Write">func (rw *ResponseRecorder) Write(buf []byte) (int, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ResponseRecorder.WriteHeader">func (rw *ResponseRecorder) WriteHeader(code int)</a></dd>
				
			
				
				<dd><a href="#Server">type Server</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewServer">func NewServer(handler http.Handler) *Server</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewTLSServer">func NewTLSServer(handler http.Handler) *Server</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewUnstartedServer">func NewUnstartedServer(handler http.Handler) *Server</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Server.Close">func (s *Server) Close()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Server.CloseClientConnections">func (s *Server) CloseClientConnections()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Server.Start">func (s *Server) Start()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Server.StartTLS">func (s *Server) StartTLS()</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/net/http/httptest/recorder.htm">recorder.go</a>
			
				<a href="src/pkg/net/http/httptest/server.htm">server.go</a>
			
			</span>
			</p>
		
	
		
			<h2 id="constants">Constants</h2>
			
				<pre>const DefaultRemoteAddr = &#34;1.2.3.4&#34;</pre>
				<p>
DefaultRemoteAddr is the default remote address to return in RemoteAddr if
an explicit DefaultRemoteAddr isn&#39;t set on ResponseRecorder.
</p>

			
		
		
		
		
			
			
			<h2 id="ResponseRecorder">type <a href="src/pkg/net/http/httptest/recorder.htm#L5">ResponseRecorder</a></h2>
			<pre>type ResponseRecorder struct {
    Code      int           <span class="comment">// the HTTP response code from WriteHeader</span>
    HeaderMap http.Header   <span class="comment">// the HTTP response headers</span>
    Body      *bytes.Buffer <span class="comment">// if non-nil, the bytes.Buffer to append written data to</span>
    Flushed   bool
}</pre>
			<p>
ResponseRecorder is an implementation of http.ResponseWriter that
records its mutations for later inspection in tests.
</p>


			

			

			

			
				
				<h3 id="NewRecorder">func <a href="src/pkg/net/http/httptest/recorder.htm#L13">NewRecorder</a></h3>
				<pre>func NewRecorder() *ResponseRecorder</pre>
				<p>
NewRecorder returns an initialized ResponseRecorder.
</p>

				
			

			
				
				<h3 id="ResponseRecorder.Flush">func (*ResponseRecorder) <a href="src/pkg/net/http/httptest/recorder.htm#L46">Flush</a></h3>
				<pre>func (rw *ResponseRecorder) Flush()</pre>
				<p>
Flush sets rw.Flushed to true.
</p>

				
				
			
				
				<h3 id="ResponseRecorder.Header">func (*ResponseRecorder) <a href="src/pkg/net/http/httptest/recorder.htm#L25">Header</a></h3>
				<pre>func (rw *ResponseRecorder) Header() http.Header</pre>
				<p>
Header returns the response headers.
</p>

				
				
			
				
				<h3 id="ResponseRecorder.Write">func (*ResponseRecorder) <a href="src/pkg/net/http/httptest/recorder.htm#L30">Write</a></h3>
				<pre>func (rw *ResponseRecorder) Write(buf []byte) (int, error)</pre>
				<p>
Write always succeeds and writes to rw.Body, if not nil.
</p>

				
				
			
				
				<h3 id="ResponseRecorder.WriteHeader">func (*ResponseRecorder) <a href="src/pkg/net/http/httptest/recorder.htm#L41">WriteHeader</a></h3>
				<pre>func (rw *ResponseRecorder) WriteHeader(code int)</pre>
				<p>
WriteHeader sets rw.Code.
</p>

				
				
			
		
			
			
			<h2 id="Server">type <a href="src/pkg/net/http/httptest/server.htm#L11">Server</a></h2>
			<pre>type Server struct {
    URL      string <span class="comment">// base URL of form http://ipaddr:port with no trailing slash</span>
    Listener net.Listener
    TLS      *tls.Config

    <span class="comment">// Config may be changed after calling NewUnstartedServer and</span>
    <span class="comment">// before Start or StartTLS.</span>
    Config *http.Server
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A Server is an HTTP server listening on a system-chosen port on the
local loopback interface, for use in end-to-end HTTP tests.
</p>


			

			

			

			
				
				<h3 id="NewServer">func <a href="src/pkg/net/http/httptest/server.htm#L65">NewServer</a></h3>
				<pre>func NewServer(handler http.Handler) *Server</pre>
				<p>
NewServer starts and returns a new Server.
The caller should call Close when finished, to shut it down.
</p>

				
			
				
				<h3 id="NewTLSServer">func <a href="src/pkg/net/http/httptest/server.htm#L134">NewTLSServer</a></h3>
				<pre>func NewTLSServer(handler http.Handler) *Server</pre>
				<p>
NewTLSServer starts and returns a new Server using TLS.
The caller should call Close when finished, to shut it down.
</p>

				
			
				
				<h3 id="NewUnstartedServer">func <a href="src/pkg/net/http/httptest/server.htm#L77">NewUnstartedServer</a></h3>
				<pre>func NewUnstartedServer(handler http.Handler) *Server</pre>
				<p>
NewUnstartedServer returns a new Server but doesn&#39;t start it.
</p>
<p>
After changing its configuration, the caller should call Start or
StartTLS.
</p>
<p>
The caller should call Close when finished, to shut it down.
</p>

				
			

			
				
				<h3 id="Server.Close">func (*Server) <a href="src/pkg/net/http/httptest/server.htm#L142">Close</a></h3>
				<pre>func (s *Server) Close()</pre>
				<p>
Close shuts down the server and blocks until all outstanding
requests on this server have completed.
</p>

				
				
			
				
				<h3 id="Server.CloseClientConnections">func (*Server) <a href="src/pkg/net/http/httptest/server.htm#L149">CloseClientConnections</a></h3>
				<pre>func (s *Server) CloseClientConnections()</pre>
				<p>
CloseClientConnections closes any currently open HTTP connections
to the test Server.
</p>

				
				
			
				
				<h3 id="Server.Start">func (*Server) <a href="src/pkg/net/http/httptest/server.htm#L85">Start</a></h3>
				<pre>func (s *Server) Start()</pre>
				<p>
Start starts a server from NewUnstartedServer.
</p>

				
				
			
				
				<h3 id="Server.StartTLS">func (*Server) <a href="src/pkg/net/http/httptest/server.htm#L100">StartTLS</a></h3>
				<pre>func (s *Server) StartTLS()</pre>
				<p>
StartTLS starts TLS on a server from NewUnstartedServer.
</p>

				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
