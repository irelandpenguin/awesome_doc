
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>pem - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package pem</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "encoding/pem"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package pem implements the PEM data encoding, which originated in Privacy
Enhanced Mail. The most common use of PEM encoding today is in TLS keys and
certificates. See RFC 1421.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#Encode">func Encode(out io.Writer, b *Block) (err error)</a></dd>
			
				
				<dd><a href="#EncodeToMemory">func EncodeToMemory(b *Block) []byte</a></dd>
			
			
				
				<dd><a href="#Block">type Block</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Decode">func Decode(data []byte) (p *Block, rest []byte)</a></dd>
				
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/encoding/pem/pem.htm">pem.go</a>
			
			</span>
			</p>
		
	
		
		
		
			
			
			<h2 id="Encode">func <a href="src/pkg/encoding/pem/pem.htm#L202">Encode</a></h2>
			<pre>func Encode(out io.Writer, b *Block) (err error)</pre>
			
			
		
			
			
			<h2 id="EncodeToMemory">func <a href="src/pkg/encoding/pem/pem.htm#L244">EncodeToMemory</a></h2>
			<pre>func EncodeToMemory(b *Block) []byte</pre>
			
			
		
		
			
			
			<h2 id="Block">type <a href="src/pkg/encoding/pem/pem.htm#L14">Block</a></h2>
			<pre>type Block struct {
    Type    string            <span class="comment">// The type, taken from the preamble (i.e. &#34;RSA PRIVATE KEY&#34;).</span>
    Headers map[string]string <span class="comment">// Optional headers.</span>
    Bytes   []byte            <span class="comment">// The decoded bytes of the contents. Typically a DER encoded ASN.1 structure.</span>
}</pre>
			<p>
A Block represents a PEM encoded structure.
</p>
<p>
The encoded form is:
</p>
<pre>-----BEGIN Type-----
Headers
base64-encoded Bytes
-----END Type-----
</pre>
<p>
where Headers is a possibly empty sequence of Key: Value lines.
</p>


			

			

			

			
				
				<h3 id="Decode">func <a href="src/pkg/encoding/pem/pem.htm#L65">Decode</a></h3>
				<pre>func Decode(data []byte) (p *Block, rest []byte)</pre>
				<p>
Decode will find the next PEM formatted block (certificate, private key
etc) in the input. It returns that block and the remainder of the input. If
no PEM data is found, p is nil and the whole of the input is returned in
rest.
</p>

				
			

			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
