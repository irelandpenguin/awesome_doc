
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>cipher - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package cipher</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "crypto/cipher"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package cipher implements standard block cipher modes that can be wrapped
around low-level block cipher implementations.
See <a href="http://csrc.nist.gov/groups/ST/toolkit/BCM/current_modes.html">http://csrc.nist.gov/groups/ST/toolkit/BCM/current_modes.html</a>
and NIST Special Publication 800-38A.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
			
				
				<dd><a href="#Block">type Block</a></dd>
				
				
			
				
				<dd><a href="#BlockMode">type BlockMode</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewCBCDecrypter">func NewCBCDecrypter(b Block, iv []byte) BlockMode</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewCBCEncrypter">func NewCBCEncrypter(b Block, iv []byte) BlockMode</a></dd>
				
				
			
				
				<dd><a href="#Stream">type Stream</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewCFBDecrypter">func NewCFBDecrypter(block Block, iv []byte) Stream</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewCFBEncrypter">func NewCFBEncrypter(block Block, iv []byte) Stream</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewCTR">func NewCTR(block Block, iv []byte) Stream</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewOFB">func NewOFB(b Block, iv []byte) Stream</a></dd>
				
				
			
				
				<dd><a href="#StreamReader">type StreamReader</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#StreamReader.Read">func (r StreamReader) Read(dst []byte) (n int, err error)</a></dd>
				
			
				
				<dd><a href="#StreamWriter">type StreamWriter</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#StreamWriter.Close">func (w StreamWriter) Close() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#StreamWriter.Write">func (w StreamWriter) Write(src []byte) (n int, err error)</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/crypto/cipher/cbc.htm">cbc.go</a>
			
				<a href="src/pkg/crypto/cipher/cfb.htm">cfb.go</a>
			
				<a href="src/pkg/crypto/cipher/cipher.htm">cipher.go</a>
			
				<a href="src/pkg/crypto/cipher/ctr.htm">ctr.go</a>
			
				<a href="src/pkg/crypto/cipher/io.htm">io.go</a>
			
				<a href="src/pkg/crypto/cipher/ofb.htm">ofb.go</a>
			
			</span>
			</p>
		
	
		
		
		
		
			
			
			<h2 id="Block">type <a href="src/pkg/crypto/cipher/cipher.htm#L5">Block</a></h2>
			<pre>type Block interface {
    <span class="comment">// BlockSize returns the cipher&#39;s block size.</span>
    BlockSize() int

    <span class="comment">// Encrypt encrypts the first block in src into dst.</span>
    <span class="comment">// Dst and src may point at the same memory.</span>
    Encrypt(dst, src []byte)

    <span class="comment">// Decrypt decrypts the first block in src into dst.</span>
    <span class="comment">// Dst and src may point at the same memory.</span>
    Decrypt(dst, src []byte)
}</pre>
			<p>
A Block represents an implementation of block cipher
using a given key.  It provides the capability to encrypt
or decrypt individual blocks.  The mode implementations
extend that capability to streams of blocks.
</p>


			

			

			

			

			
		
			
			
			<h2 id="BlockMode">type <a href="src/pkg/crypto/cipher/cipher.htm#L27">BlockMode</a></h2>
			<pre>type BlockMode interface {
    <span class="comment">// BlockSize returns the mode&#39;s block size.</span>
    BlockSize() int

    <span class="comment">// CryptBlocks encrypts or decrypts a number of blocks. The length of</span>
    <span class="comment">// src must be a multiple of the block size. Dst and src may point to</span>
    <span class="comment">// the same memory.</span>
    CryptBlocks(dst, src []byte)
}</pre>
			<p>
A BlockMode represents a block cipher running in a block-based mode (CBC,
ECB etc).
</p>


			

			

			

			
				
				<h3 id="NewCBCDecrypter">func <a href="src/pkg/crypto/cipher/cbc.htm#L50">NewCBCDecrypter</a></h3>
				<pre>func NewCBCDecrypter(b Block, iv []byte) BlockMode</pre>
				<p>
NewCBCDecrypter returns a BlockMode which decrypts in cipher block chaining
mode, using the given Block. The length of iv must be the same as the
Block&#39;s block size and must match the iv used to encrypt the data.
</p>

				
			
				
				<h3 id="NewCBCEncrypter">func <a href="src/pkg/crypto/cipher/cbc.htm#L25">NewCBCEncrypter</a></h3>
				<pre>func NewCBCEncrypter(b Block, iv []byte) BlockMode</pre>
				<p>
NewCBCEncrypter returns a BlockMode which encrypts in cipher block chaining
mode, using the given Block. The length of iv must be the same as the
Block&#39;s block size.
</p>

				
			

			
		
			
			
			<h2 id="Stream">type <a href="src/pkg/crypto/cipher/cipher.htm#L19">Stream</a></h2>
			<pre>type Stream interface {
    <span class="comment">// XORKeyStream XORs each byte in the given slice with a byte from the</span>
    <span class="comment">// cipher&#39;s key stream. Dst and src may point to the same memory.</span>
    XORKeyStream(dst, src []byte)
}</pre>
			<p>
A Stream represents a stream cipher.
</p>


			

			

			

			
				
				<h3 id="NewCFBDecrypter">func <a href="src/pkg/crypto/cipher/cfb.htm#L16">NewCFBDecrypter</a></h3>
				<pre>func NewCFBDecrypter(block Block, iv []byte) Stream</pre>
				<p>
NewCFBDecrypter returns a Stream which decrypts with cipher feedback mode,
using the given Block. The iv must be the same length as the Block&#39;s block
size.
</p>

				
			
				
				<h3 id="NewCFBEncrypter">func <a href="src/pkg/crypto/cipher/cfb.htm#L9">NewCFBEncrypter</a></h3>
				<pre>func NewCFBEncrypter(block Block, iv []byte) Stream</pre>
				<p>
NewCFBEncrypter returns a Stream which encrypts with cipher feedback mode,
using the given Block. The iv must be the same length as the Block&#39;s block
size.
</p>

				
			
				
				<h3 id="NewCTR">func <a href="src/pkg/crypto/cipher/ctr.htm#L14">NewCTR</a></h3>
				<pre>func NewCTR(block Block, iv []byte) Stream</pre>
				<p>
NewCTR returns a Stream which encrypts/decrypts using the given Block in
counter mode. The length of iv must be the same as the Block&#39;s block size.
</p>

				
			
				
				<h3 id="NewOFB">func <a href="src/pkg/crypto/cipher/ofb.htm#L8">NewOFB</a></h3>
				<pre>func NewOFB(b Block, iv []byte) Stream</pre>
				<p>
NewOFB returns a Stream that encrypts or decrypts using the block cipher b
in output feedback mode. The initialization vector iv&#39;s length must be equal
to b&#39;s block size.
</p>

				
			

			
		
			
			
			<h2 id="StreamReader">type <a href="src/pkg/crypto/cipher/io.htm#L4">StreamReader</a></h2>
			<pre>type StreamReader struct {
    S Stream
    R io.Reader
}</pre>
			<p>
StreamReader wraps a Stream into an io.Reader. It calls XORKeyStream
to process each slice of data which passes through.
</p>


			

			

			

			

			
				
				<h3 id="StreamReader.Read">func (StreamReader) <a href="src/pkg/crypto/cipher/io.htm#L9">Read</a></h3>
				<pre>func (r StreamReader) Read(dst []byte) (n int, err error)</pre>
				
				
				
			
		
			
			
			<h2 id="StreamWriter">type <a href="src/pkg/crypto/cipher/io.htm#L18">StreamWriter</a></h2>
			<pre>type StreamWriter struct {
    S   Stream
    W   io.Writer
    Err error
}</pre>
			<p>
StreamWriter wraps a Stream into an io.Writer. It calls XORKeyStream
to process each slice of data which passes through. If any Write call
returns short then the StreamWriter is out of sync and must be discarded.
</p>


			

			

			

			

			
				
				<h3 id="StreamWriter.Close">func (StreamWriter) <a href="src/pkg/crypto/cipher/io.htm#L40">Close</a></h3>
				<pre>func (w StreamWriter) Close() error</pre>
				
				
				
			
				
				<h3 id="StreamWriter.Write">func (StreamWriter) <a href="src/pkg/crypto/cipher/io.htm#L24">Write</a></h3>
				<pre>func (w StreamWriter) Write(src []byte) (n int, err error)</pre>
				
				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
