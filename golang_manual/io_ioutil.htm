
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>ioutil - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package ioutil</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "io/ioutil"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package ioutil implements some I/O utility functions.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
				<dd><a href="#variables">Variables</a></dd>
			
			
				
				<dd><a href="#NopCloser">func NopCloser(r io.Reader) io.ReadCloser</a></dd>
			
				
				<dd><a href="#ReadAll">func ReadAll(r io.Reader) ([]byte, error)</a></dd>
			
				
				<dd><a href="#ReadDir">func ReadDir(dirname string) ([]os.FileInfo, error)</a></dd>
			
				
				<dd><a href="#ReadFile">func ReadFile(filename string) ([]byte, error)</a></dd>
			
				
				<dd><a href="#TempDir">func TempDir(dir, prefix string) (name string, err error)</a></dd>
			
				
				<dd><a href="#TempFile">func TempFile(dir, prefix string) (f *os.File, err error)</a></dd>
			
				
				<dd><a href="#WriteFile">func WriteFile(filename string, data []byte, perm os.FileMode) error</a></dd>
			
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/io/ioutil/ioutil.htm">ioutil.go</a>
			
				<a href="src/pkg/io/ioutil/tempfile.htm">tempfile.go</a>
			
			</span>
			</p>
		
	
		
		
			<h2 id="variables">Variables</h2>
			
				<pre>var Discard io.Writer = devNull(0)</pre>
				<p>
Discard is an io.Writer on which all Write calls succeed
without doing anything.
</p>

			
		
		
			
			
			<h2 id="NopCloser">func <a href="src/pkg/io/ioutil/ioutil.htm#L109">NopCloser</a></h2>
			<pre>func NopCloser(r io.Reader) io.ReadCloser</pre>
			<p>
NopCloser returns a ReadCloser with a no-op Close method wrapping
the provided Reader r.
</p>

			
		
			
			
			<h2 id="ReadAll">func <a href="src/pkg/io/ioutil/ioutil.htm#L30">ReadAll</a></h2>
			<pre>func ReadAll(r io.Reader) ([]byte, error)</pre>
			<p>
ReadAll reads from r until an error or EOF and returns the data it read.
A successful call returns err == nil, not err == EOF. Because ReadAll is
defined to read from src until EOF, it does not treat an EOF from Read
as an error to be reported.
</p>

			
		
			
			
			<h2 id="ReadDir">func <a href="src/pkg/io/ioutil/ioutil.htm#L87">ReadDir</a></h2>
			<pre>func ReadDir(dirname string) ([]os.FileInfo, error)</pre>
			<p>
ReadDir reads the directory named by dirname and returns
a list of sorted directory entries.
</p>

			
		
			
			
			<h2 id="ReadFile">func <a href="src/pkg/io/ioutil/ioutil.htm#L38">ReadFile</a></h2>
			<pre>func ReadFile(filename string) ([]byte, error)</pre>
			<p>
ReadFile reads the file named by filename and returns the contents.
A successful call returns err == nil, not err == EOF. Because ReadFile
reads the whole file, it does not treat an EOF from Read as an error
to be reported.
</p>

			
		
			
			
			<h2 id="TempDir">func <a href="src/pkg/io/ioutil/tempfile.htm#L60">TempDir</a></h2>
			<pre>func TempDir(dir, prefix string) (name string, err error)</pre>
			<p>
TempDir creates a new temporary directory in the directory dir
with a name beginning with prefix and returns the path of the
new directory.  If dir is the empty string, TempDir uses the
default directory for temporary files (see os.TempDir).
Multiple programs calling TempDir simultaneously
will not choose the same directory.  It is the caller&#39;s responsibility
to remove the directory when no longer needed.
</p>

			
		
			
			
			<h2 id="TempFile">func <a href="src/pkg/io/ioutil/tempfile.htm#L33">TempFile</a></h2>
			<pre>func TempFile(dir, prefix string) (f *os.File, err error)</pre>
			<p>
TempFile creates a new temporary file in the directory dir
with a name beginning with prefix, opens the file for reading
and writing, and returns the resulting *os.File.
If dir is the empty string, TempFile uses the default directory
for temporary files (see os.TempDir).
Multiple programs calling TempFile simultaneously
will not choose the same file.  The caller can use f.Name()
to find the name of the file.  It is the caller&#39;s responsibility to
remove the file when no longer needed.
</p>

			
		
			
			
			<h2 id="WriteFile">func <a href="src/pkg/io/ioutil/ioutil.htm#L65">WriteFile</a></h2>
			<pre>func WriteFile(filename string, data []byte, perm os.FileMode) error</pre>
			<p>
WriteFile writes data to a file named by filename.
If the file does not exist, WriteFile creates it with permissions perm;
otherwise WriteFile truncates it before writing.
</p>

			
		
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
