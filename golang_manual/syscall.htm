
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>syscall - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package syscall</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "syscall"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package syscall contains an interface to the low-level operating system
primitives.  The details vary depending on the underlying system.
Its primary use is inside other packages that provide a more portable
interface to the system, such as &#34;os&#34;, &#34;time&#34; and &#34;net&#34;.  Use those
packages rather than this one if you can.
For details of the functions and data types in this package consult
the manuals for the appropriate operating system.
These calls return err == nil to indicate success; otherwise
err is an operating system error describing the failure.
On most systems, that error has type syscall.Errno.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
				<dd><a href="#constants">Constants</a></dd>
			
			
				<dd><a href="#variables">Variables</a></dd>
			
			
				
				<dd><a href="#Accept">func Accept(fd int) (nfd int, sa Sockaddr, err error)</a></dd>
			
				
				<dd><a href="#Access">func Access(path string, mode uint32) (err error)</a></dd>
			
				
				<dd><a href="#Acct">func Acct(path string) (err error)</a></dd>
			
				
				<dd><a href="#Adjtimex">func Adjtimex(buf *Timex) (state int, err error)</a></dd>
			
				
				<dd><a href="#AttachLsf">func AttachLsf(fd int, i []SockFilter) error</a></dd>
			
				
				<dd><a href="#Bind">func Bind(fd int, sa Sockaddr) (err error)</a></dd>
			
				
				<dd><a href="#BindToDevice">func BindToDevice(fd int, device string) (err error)</a></dd>
			
				
				<dd><a href="#Chdir">func Chdir(path string) (err error)</a></dd>
			
				
				<dd><a href="#Chmod">func Chmod(path string, mode uint32) (err error)</a></dd>
			
				
				<dd><a href="#Chown">func Chown(path string, uid int, gid int) (err error)</a></dd>
			
				
				<dd><a href="#Chroot">func Chroot(path string) (err error)</a></dd>
			
				
				<dd><a href="#Clearenv">func Clearenv()</a></dd>
			
				
				<dd><a href="#Close">func Close(fd int) (err error)</a></dd>
			
				
				<dd><a href="#CloseOnExec">func CloseOnExec(fd int)</a></dd>
			
				
				<dd><a href="#CmsgLen">func CmsgLen(datalen int) int</a></dd>
			
				
				<dd><a href="#CmsgSpace">func CmsgSpace(datalen int) int</a></dd>
			
				
				<dd><a href="#Connect">func Connect(fd int, sa Sockaddr) (err error)</a></dd>
			
				
				<dd><a href="#Creat">func Creat(path string, mode uint32) (fd int, err error)</a></dd>
			
				
				<dd><a href="#DetachLsf">func DetachLsf(fd int) error</a></dd>
			
				
				<dd><a href="#Dup">func Dup(oldfd int) (fd int, err error)</a></dd>
			
				
				<dd><a href="#Dup2">func Dup2(oldfd int, newfd int) (err error)</a></dd>
			
				
				<dd><a href="#Environ">func Environ() []string</a></dd>
			
				
				<dd><a href="#EpollCreate">func EpollCreate(size int) (fd int, err error)</a></dd>
			
				
				<dd><a href="#EpollCreate1">func EpollCreate1(flag int) (fd int, err error)</a></dd>
			
				
				<dd><a href="#EpollCtl">func EpollCtl(epfd int, op int, fd int, event *EpollEvent) (err error)</a></dd>
			
				
				<dd><a href="#EpollWait">func EpollWait(epfd int, events []EpollEvent, msec int) (n int, err error)</a></dd>
			
				
				<dd><a href="#Exec">func Exec(argv0 string, argv []string, envv []string) (err error)</a></dd>
			
				
				<dd><a href="#Exit">func Exit(code int)</a></dd>
			
				
				<dd><a href="#Faccessat">func Faccessat(dirfd int, path string, mode uint32, flags int) (err error)</a></dd>
			
				
				<dd><a href="#Fallocate">func Fallocate(fd int, mode uint32, off int64, len int64) (err error)</a></dd>
			
				
				<dd><a href="#Fchdir">func Fchdir(fd int) (err error)</a></dd>
			
				
				<dd><a href="#Fchmod">func Fchmod(fd int, mode uint32) (err error)</a></dd>
			
				
				<dd><a href="#Fchmodat">func Fchmodat(dirfd int, path string, mode uint32, flags int) (err error)</a></dd>
			
				
				<dd><a href="#Fchown">func Fchown(fd int, uid int, gid int) (err error)</a></dd>
			
				
				<dd><a href="#Fchownat">func Fchownat(dirfd int, path string, uid int, gid int, flags int) (err error)</a></dd>
			
				
				<dd><a href="#Fdatasync">func Fdatasync(fd int) (err error)</a></dd>
			
				
				<dd><a href="#Flock">func Flock(fd int, how int) (err error)</a></dd>
			
				
				<dd><a href="#ForkExec">func ForkExec(argv0 string, argv []string, attr *ProcAttr) (pid int, err error)</a></dd>
			
				
				<dd><a href="#Fstat">func Fstat(fd int, stat *Stat_t) (err error)</a></dd>
			
				
				<dd><a href="#Fstatfs">func Fstatfs(fd int, buf *Statfs_t) (err error)</a></dd>
			
				
				<dd><a href="#Fsync">func Fsync(fd int) (err error)</a></dd>
			
				
				<dd><a href="#Ftruncate">func Ftruncate(fd int, length int64) (err error)</a></dd>
			
				
				<dd><a href="#Futimes">func Futimes(fd int, tv []Timeval) (err error)</a></dd>
			
				
				<dd><a href="#Futimesat">func Futimesat(dirfd int, path string, tv []Timeval) (err error)</a></dd>
			
				
				<dd><a href="#Getcwd">func Getcwd(buf []byte) (n int, err error)</a></dd>
			
				
				<dd><a href="#Getdents">func Getdents(fd int, buf []byte) (n int, err error)</a></dd>
			
				
				<dd><a href="#Getegid">func Getegid() (egid int)</a></dd>
			
				
				<dd><a href="#Getenv">func Getenv(key string) (value string, found bool)</a></dd>
			
				
				<dd><a href="#Geteuid">func Geteuid() (euid int)</a></dd>
			
				
				<dd><a href="#Getgid">func Getgid() (gid int)</a></dd>
			
				
				<dd><a href="#Getgroups">func Getgroups() (gids []int, err error)</a></dd>
			
				
				<dd><a href="#Getpagesize">func Getpagesize() int</a></dd>
			
				
				<dd><a href="#Getpgid">func Getpgid(pid int) (pgid int, err error)</a></dd>
			
				
				<dd><a href="#Getpgrp">func Getpgrp() (pid int)</a></dd>
			
				
				<dd><a href="#Getpid">func Getpid() (pid int)</a></dd>
			
				
				<dd><a href="#Getppid">func Getppid() (ppid int)</a></dd>
			
				
				<dd><a href="#Getrlimit">func Getrlimit(resource int, rlim *Rlimit) (err error)</a></dd>
			
				
				<dd><a href="#Getrusage">func Getrusage(who int, rusage *Rusage) (err error)</a></dd>
			
				
				<dd><a href="#GetsockoptInet4Addr">func GetsockoptInet4Addr(fd, level, opt int) (value [4]byte, err error)</a></dd>
			
				
				<dd><a href="#GetsockoptInt">func GetsockoptInt(fd, level, opt int) (value int, err error)</a></dd>
			
				
				<dd><a href="#Gettid">func Gettid() (tid int)</a></dd>
			
				
				<dd><a href="#Gettimeofday">func Gettimeofday(tv *Timeval) (err error)</a></dd>
			
				
				<dd><a href="#Getuid">func Getuid() (uid int)</a></dd>
			
				
				<dd><a href="#Getwd">func Getwd() (wd string, err error)</a></dd>
			
				
				<dd><a href="#InotifyAddWatch">func InotifyAddWatch(fd int, pathname string, mask uint32) (watchdesc int, err error)</a></dd>
			
				
				<dd><a href="#InotifyInit">func InotifyInit() (fd int, err error)</a></dd>
			
				
				<dd><a href="#InotifyInit1">func InotifyInit1(flags int) (fd int, err error)</a></dd>
			
				
				<dd><a href="#InotifyRmWatch">func InotifyRmWatch(fd int, watchdesc uint32) (success int, err error)</a></dd>
			
				
				<dd><a href="#Ioperm">func Ioperm(from int, num int, on int) (err error)</a></dd>
			
				
				<dd><a href="#Iopl">func Iopl(level int) (err error)</a></dd>
			
				
				<dd><a href="#Kill">func Kill(pid int, sig Signal) (err error)</a></dd>
			
				
				<dd><a href="#Klogctl">func Klogctl(typ int, buf []byte) (n int, err error)</a></dd>
			
				
				<dd><a href="#Lchown">func Lchown(path string, uid int, gid int) (err error)</a></dd>
			
				
				<dd><a href="#Link">func Link(oldpath string, newpath string) (err error)</a></dd>
			
				
				<dd><a href="#Listen">func Listen(s int, n int) (err error)</a></dd>
			
				
				<dd><a href="#LsfSocket">func LsfSocket(ifindex, proto int) (int, error)</a></dd>
			
				
				<dd><a href="#Lstat">func Lstat(path string, stat *Stat_t) (err error)</a></dd>
			
				
				<dd><a href="#Madvise">func Madvise(b []byte, advice int) (err error)</a></dd>
			
				
				<dd><a href="#Mkdir">func Mkdir(path string, mode uint32) (err error)</a></dd>
			
				
				<dd><a href="#Mkdirat">func Mkdirat(dirfd int, path string, mode uint32) (err error)</a></dd>
			
				
				<dd><a href="#Mkfifo">func Mkfifo(path string, mode uint32) (err error)</a></dd>
			
				
				<dd><a href="#Mknod">func Mknod(path string, mode uint32, dev int) (err error)</a></dd>
			
				
				<dd><a href="#Mknodat">func Mknodat(dirfd int, path string, mode uint32, dev int) (err error)</a></dd>
			
				
				<dd><a href="#Mlock">func Mlock(b []byte) (err error)</a></dd>
			
				
				<dd><a href="#Mlockall">func Mlockall(flags int) (err error)</a></dd>
			
				
				<dd><a href="#Mmap">func Mmap(fd int, offset int64, length int, prot int, flags int) (data []byte, err error)</a></dd>
			
				
				<dd><a href="#Mount">func Mount(source string, target string, fstype string, flags uintptr, data string) (err error)</a></dd>
			
				
				<dd><a href="#Mprotect">func Mprotect(b []byte, prot int) (err error)</a></dd>
			
				
				<dd><a href="#Munlock">func Munlock(b []byte) (err error)</a></dd>
			
				
				<dd><a href="#Munlockall">func Munlockall() (err error)</a></dd>
			
				
				<dd><a href="#Munmap">func Munmap(b []byte) (err error)</a></dd>
			
				
				<dd><a href="#Nanosleep">func Nanosleep(time *Timespec, leftover *Timespec) (err error)</a></dd>
			
				
				<dd><a href="#NetlinkRIB">func NetlinkRIB(proto, family int) ([]byte, error)</a></dd>
			
				
				<dd><a href="#Open">func Open(path string, mode int, perm uint32) (fd int, err error)</a></dd>
			
				
				<dd><a href="#Openat">func Openat(dirfd int, path string, flags int, mode uint32) (fd int, err error)</a></dd>
			
				
				<dd><a href="#ParseDirent">func ParseDirent(buf []byte, max int, names []string) (consumed int, count int, newnames []string)</a></dd>
			
				
				<dd><a href="#ParseNetlinkMessage">func ParseNetlinkMessage(buf []byte) ([]NetlinkMessage, error)</a></dd>
			
				
				<dd><a href="#ParseNetlinkRouteAttr">func ParseNetlinkRouteAttr(msg *NetlinkMessage) ([]NetlinkRouteAttr, error)</a></dd>
			
				
				<dd><a href="#ParseSocketControlMessage">func ParseSocketControlMessage(buf []byte) ([]SocketControlMessage, error)</a></dd>
			
				
				<dd><a href="#ParseUnixRights">func ParseUnixRights(msg *SocketControlMessage) ([]int, error)</a></dd>
			
				
				<dd><a href="#Pause">func Pause() (err error)</a></dd>
			
				
				<dd><a href="#Pipe">func Pipe(p []int) (err error)</a></dd>
			
				
				<dd><a href="#PivotRoot">func PivotRoot(newroot string, putold string) (err error)</a></dd>
			
				
				<dd><a href="#Pread">func Pread(fd int, p []byte, offset int64) (n int, err error)</a></dd>
			
				
				<dd><a href="#PtraceAttach">func PtraceAttach(pid int) (err error)</a></dd>
			
				
				<dd><a href="#PtraceCont">func PtraceCont(pid int, signal int) (err error)</a></dd>
			
				
				<dd><a href="#PtraceDetach">func PtraceDetach(pid int) (err error)</a></dd>
			
				
				<dd><a href="#PtraceGetEventMsg">func PtraceGetEventMsg(pid int) (msg uint, err error)</a></dd>
			
				
				<dd><a href="#PtraceGetRegs">func PtraceGetRegs(pid int, regsout *PtraceRegs) (err error)</a></dd>
			
				
				<dd><a href="#PtracePeekData">func PtracePeekData(pid int, addr uintptr, out []byte) (count int, err error)</a></dd>
			
				
				<dd><a href="#PtracePeekText">func PtracePeekText(pid int, addr uintptr, out []byte) (count int, err error)</a></dd>
			
				
				<dd><a href="#PtracePokeData">func PtracePokeData(pid int, addr uintptr, data []byte) (count int, err error)</a></dd>
			
				
				<dd><a href="#PtracePokeText">func PtracePokeText(pid int, addr uintptr, data []byte) (count int, err error)</a></dd>
			
				
				<dd><a href="#PtraceSetOptions">func PtraceSetOptions(pid int, options int) (err error)</a></dd>
			
				
				<dd><a href="#PtraceSetRegs">func PtraceSetRegs(pid int, regs *PtraceRegs) (err error)</a></dd>
			
				
				<dd><a href="#PtraceSingleStep">func PtraceSingleStep(pid int) (err error)</a></dd>
			
				
				<dd><a href="#Pwrite">func Pwrite(fd int, p []byte, offset int64) (n int, err error)</a></dd>
			
				
				<dd><a href="#RawSyscall">func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno)</a></dd>
			
				
				<dd><a href="#RawSyscall6">func RawSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)</a></dd>
			
				
				<dd><a href="#Read">func Read(fd int, p []byte) (n int, err error)</a></dd>
			
				
				<dd><a href="#ReadDirent">func ReadDirent(fd int, buf []byte) (n int, err error)</a></dd>
			
				
				<dd><a href="#Readlink">func Readlink(path string, buf []byte) (n int, err error)</a></dd>
			
				
				<dd><a href="#Reboot">func Reboot(cmd int) (err error)</a></dd>
			
				
				<dd><a href="#Recvfrom">func Recvfrom(fd int, p []byte, flags int) (n int, from Sockaddr, err error)</a></dd>
			
				
				<dd><a href="#Recvmsg">func Recvmsg(fd int, p, oob []byte, flags int) (n, oobn int, recvflags int, from Sockaddr, err error)</a></dd>
			
				
				<dd><a href="#Rename">func Rename(oldpath string, newpath string) (err error)</a></dd>
			
				
				<dd><a href="#Renameat">func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)</a></dd>
			
				
				<dd><a href="#Rmdir">func Rmdir(path string) (err error)</a></dd>
			
				
				<dd><a href="#Seek">func Seek(fd int, offset int64, whence int) (off int64, err error)</a></dd>
			
				
				<dd><a href="#Select">func Select(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err error)</a></dd>
			
				
				<dd><a href="#Sendfile">func Sendfile(outfd int, infd int, offset *int64, count int) (written int, err error)</a></dd>
			
				
				<dd><a href="#Sendmsg">func Sendmsg(fd int, p, oob []byte, to Sockaddr, flags int) (err error)</a></dd>
			
				
				<dd><a href="#Sendto">func Sendto(fd int, p []byte, flags int, to Sockaddr) (err error)</a></dd>
			
				
				<dd><a href="#SetLsfPromisc">func SetLsfPromisc(name string, m bool) error</a></dd>
			
				
				<dd><a href="#SetNonblock">func SetNonblock(fd int, nonblocking bool) (err error)</a></dd>
			
				
				<dd><a href="#Setdomainname">func Setdomainname(p []byte) (err error)</a></dd>
			
				
				<dd><a href="#Setenv">func Setenv(key, value string) error</a></dd>
			
				
				<dd><a href="#Setfsgid">func Setfsgid(gid int) (err error)</a></dd>
			
				
				<dd><a href="#Setfsuid">func Setfsuid(uid int) (err error)</a></dd>
			
				
				<dd><a href="#Setgid">func Setgid(gid int) (err error)</a></dd>
			
				
				<dd><a href="#Setgroups">func Setgroups(gids []int) (err error)</a></dd>
			
				
				<dd><a href="#Sethostname">func Sethostname(p []byte) (err error)</a></dd>
			
				
				<dd><a href="#Setpgid">func Setpgid(pid int, pgid int) (err error)</a></dd>
			
				
				<dd><a href="#Setregid">func Setregid(rgid int, egid int) (err error)</a></dd>
			
				
				<dd><a href="#Setresgid">func Setresgid(rgid int, egid int, sgid int) (err error)</a></dd>
			
				
				<dd><a href="#Setresuid">func Setresuid(ruid int, euid int, suid int) (err error)</a></dd>
			
				
				<dd><a href="#Setreuid">func Setreuid(ruid int, euid int) (err error)</a></dd>
			
				
				<dd><a href="#Setrlimit">func Setrlimit(resource int, rlim *Rlimit) (err error)</a></dd>
			
				
				<dd><a href="#Setsid">func Setsid() (pid int, err error)</a></dd>
			
				
				<dd><a href="#SetsockoptIPMreq">func SetsockoptIPMreq(fd, level, opt int, mreq *IPMreq) (err error)</a></dd>
			
				
				<dd><a href="#SetsockoptIPMreqn">func SetsockoptIPMreqn(fd, level, opt int, mreq *IPMreqn) (err error)</a></dd>
			
				
				<dd><a href="#SetsockoptIPv6Mreq">func SetsockoptIPv6Mreq(fd, level, opt int, mreq *IPv6Mreq) (err error)</a></dd>
			
				
				<dd><a href="#SetsockoptInet4Addr">func SetsockoptInet4Addr(fd, level, opt int, value [4]byte) (err error)</a></dd>
			
				
				<dd><a href="#SetsockoptInt">func SetsockoptInt(fd, level, opt int, value int) (err error)</a></dd>
			
				
				<dd><a href="#SetsockoptLinger">func SetsockoptLinger(fd, level, opt int, l *Linger) (err error)</a></dd>
			
				
				<dd><a href="#SetsockoptString">func SetsockoptString(fd, level, opt int, s string) (err error)</a></dd>
			
				
				<dd><a href="#SetsockoptTimeval">func SetsockoptTimeval(fd, level, opt int, tv *Timeval) (err error)</a></dd>
			
				
				<dd><a href="#Settimeofday">func Settimeofday(tv *Timeval) (err error)</a></dd>
			
				
				<dd><a href="#Setuid">func Setuid(uid int) (err error)</a></dd>
			
				
				<dd><a href="#Shutdown">func Shutdown(fd int, how int) (err error)</a></dd>
			
				
				<dd><a href="#Socket">func Socket(domain, typ, proto int) (fd int, err error)</a></dd>
			
				
				<dd><a href="#Socketpair">func Socketpair(domain, typ, proto int) (fd [2]int, err error)</a></dd>
			
				
				<dd><a href="#Splice">func Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int64, err error)</a></dd>
			
				
				<dd><a href="#StartProcess">func StartProcess(argv0 string, argv []string, attr *ProcAttr) (pid int, handle uintptr, err error)</a></dd>
			
				
				<dd><a href="#Stat">func Stat(path string, stat *Stat_t) (err error)</a></dd>
			
				
				<dd><a href="#Statfs">func Statfs(path string, buf *Statfs_t) (err error)</a></dd>
			
				
				<dd><a href="#StringBytePtr">func StringBytePtr(s string) *byte</a></dd>
			
				
				<dd><a href="#StringByteSlice">func StringByteSlice(s string) []byte</a></dd>
			
				
				<dd><a href="#StringSlicePtr">func StringSlicePtr(ss []string) []*byte</a></dd>
			
				
				<dd><a href="#Symlink">func Symlink(oldpath string, newpath string) (err error)</a></dd>
			
				
				<dd><a href="#Sync">func Sync()</a></dd>
			
				
				<dd><a href="#SyncFileRange">func SyncFileRange(fd int, off int64, n int64, flags int) (err error)</a></dd>
			
				
				<dd><a href="#Syscall">func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno)</a></dd>
			
				
				<dd><a href="#Syscall6">func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)</a></dd>
			
				
				<dd><a href="#Sysinfo">func Sysinfo(info *Sysinfo_t) (err error)</a></dd>
			
				
				<dd><a href="#Tee">func Tee(rfd int, wfd int, len int, flags int) (n int64, err error)</a></dd>
			
				
				<dd><a href="#Tgkill">func Tgkill(tgid int, tid int, sig Signal) (err error)</a></dd>
			
				
				<dd><a href="#Times">func Times(tms *Tms) (ticks uintptr, err error)</a></dd>
			
				
				<dd><a href="#TimespecToNsec">func TimespecToNsec(ts Timespec) int64</a></dd>
			
				
				<dd><a href="#TimevalToNsec">func TimevalToNsec(tv Timeval) int64</a></dd>
			
				
				<dd><a href="#Truncate">func Truncate(path string, length int64) (err error)</a></dd>
			
				
				<dd><a href="#Umask">func Umask(mask int) (oldmask int)</a></dd>
			
				
				<dd><a href="#Uname">func Uname(buf *Utsname) (err error)</a></dd>
			
				
				<dd><a href="#UnixCredentials">func UnixCredentials(ucred *Ucred) []byte</a></dd>
			
				
				<dd><a href="#UnixRights">func UnixRights(fds ...int) []byte</a></dd>
			
				
				<dd><a href="#Unlink">func Unlink(path string) (err error)</a></dd>
			
				
				<dd><a href="#Unlinkat">func Unlinkat(dirfd int, path string) (err error)</a></dd>
			
				
				<dd><a href="#Unmount">func Unmount(target string, flags int) (err error)</a></dd>
			
				
				<dd><a href="#Unshare">func Unshare(flags int) (err error)</a></dd>
			
				
				<dd><a href="#Ustat">func Ustat(dev int, ubuf *Ustat_t) (err error)</a></dd>
			
				
				<dd><a href="#Utime">func Utime(path string, buf *Utimbuf) (err error)</a></dd>
			
				
				<dd><a href="#Utimes">func Utimes(path string, tv []Timeval) (err error)</a></dd>
			
				
				<dd><a href="#Wait4">func Wait4(pid int, wstatus *WaitStatus, options int, rusage *Rusage) (wpid int, err error)</a></dd>
			
				
				<dd><a href="#Write">func Write(fd int, p []byte) (n int, err error)</a></dd>
			
			
				
				<dd><a href="#Cmsghdr">type Cmsghdr</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Cmsghdr.SetLen">func (cmsg *Cmsghdr) SetLen(length int)</a></dd>
				
			
				
				<dd><a href="#Credential">type Credential</a></dd>
				
				
			
				
				<dd><a href="#Dirent">type Dirent</a></dd>
				
				
			
				
				<dd><a href="#EpollEvent">type EpollEvent</a></dd>
				
				
			
				
				<dd><a href="#Errno">type Errno</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Errno.Error">func (e Errno) Error() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Errno.Temporary">func (e Errno) Temporary() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Errno.Timeout">func (e Errno) Timeout() bool</a></dd>
				
			
				
				<dd><a href="#FdSet">type FdSet</a></dd>
				
				
			
				
				<dd><a href="#Fsid">type Fsid</a></dd>
				
				
			
				
				<dd><a href="#IPMreq">type IPMreq</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#GetsockoptIPMreq">func GetsockoptIPMreq(fd, level, opt int) (*IPMreq, error)</a></dd>
				
				
			
				
				<dd><a href="#IPMreqn">type IPMreqn</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#GetsockoptIPMreqn">func GetsockoptIPMreqn(fd, level, opt int) (*IPMreqn, error)</a></dd>
				
				
			
				
				<dd><a href="#IPv6Mreq">type IPv6Mreq</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#GetsockoptIPv6Mreq">func GetsockoptIPv6Mreq(fd, level, opt int) (*IPv6Mreq, error)</a></dd>
				
				
			
				
				<dd><a href="#IfAddrmsg">type IfAddrmsg</a></dd>
				
				
			
				
				<dd><a href="#IfInfomsg">type IfInfomsg</a></dd>
				
				
			
				
				<dd><a href="#Inet4Pktinfo">type Inet4Pktinfo</a></dd>
				
				
			
				
				<dd><a href="#Inet6Pktinfo">type Inet6Pktinfo</a></dd>
				
				
			
				
				<dd><a href="#InotifyEvent">type InotifyEvent</a></dd>
				
				
			
				
				<dd><a href="#Iovec">type Iovec</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Iovec.SetLen">func (iov *Iovec) SetLen(length int)</a></dd>
				
			
				
				<dd><a href="#Linger">type Linger</a></dd>
				
				
			
				
				<dd><a href="#Msghdr">type Msghdr</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Msghdr.SetControllen">func (msghdr *Msghdr) SetControllen(length int)</a></dd>
				
			
				
				<dd><a href="#NetlinkMessage">type NetlinkMessage</a></dd>
				
				
			
				
				<dd><a href="#NetlinkRouteAttr">type NetlinkRouteAttr</a></dd>
				
				
			
				
				<dd><a href="#NetlinkRouteRequest">type NetlinkRouteRequest</a></dd>
				
				
			
				
				<dd><a href="#NlAttr">type NlAttr</a></dd>
				
				
			
				
				<dd><a href="#NlMsgerr">type NlMsgerr</a></dd>
				
				
			
				
				<dd><a href="#NlMsghdr">type NlMsghdr</a></dd>
				
				
			
				
				<dd><a href="#ProcAttr">type ProcAttr</a></dd>
				
				
			
				
				<dd><a href="#PtraceRegs">type PtraceRegs</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#PtraceRegs.PC">func (r *PtraceRegs) PC() uint64</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#PtraceRegs.SetPC">func (r *PtraceRegs) SetPC(pc uint64)</a></dd>
				
			
				
				<dd><a href="#RawSockaddr">type RawSockaddr</a></dd>
				
				
			
				
				<dd><a href="#RawSockaddrAny">type RawSockaddrAny</a></dd>
				
				
			
				
				<dd><a href="#RawSockaddrInet4">type RawSockaddrInet4</a></dd>
				
				
			
				
				<dd><a href="#RawSockaddrInet6">type RawSockaddrInet6</a></dd>
				
				
			
				
				<dd><a href="#RawSockaddrLinklayer">type RawSockaddrLinklayer</a></dd>
				
				
			
				
				<dd><a href="#RawSockaddrNetlink">type RawSockaddrNetlink</a></dd>
				
				
			
				
				<dd><a href="#RawSockaddrUnix">type RawSockaddrUnix</a></dd>
				
				
			
				
				<dd><a href="#Rlimit">type Rlimit</a></dd>
				
				
			
				
				<dd><a href="#RtAttr">type RtAttr</a></dd>
				
				
			
				
				<dd><a href="#RtGenmsg">type RtGenmsg</a></dd>
				
				
			
				
				<dd><a href="#RtMsg">type RtMsg</a></dd>
				
				
			
				
				<dd><a href="#RtNexthop">type RtNexthop</a></dd>
				
				
			
				
				<dd><a href="#Rusage">type Rusage</a></dd>
				
				
			
				
				<dd><a href="#Signal">type Signal</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Signal.Signal">func (s Signal) Signal()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Signal.String">func (s Signal) String() string</a></dd>
				
			
				
				<dd><a href="#SockFilter">type SockFilter</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#LsfJump">func LsfJump(code, k, jt, jf int) *SockFilter</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#LsfStmt">func LsfStmt(code, k int) *SockFilter</a></dd>
				
				
			
				
				<dd><a href="#SockFprog">type SockFprog</a></dd>
				
				
			
				
				<dd><a href="#Sockaddr">type Sockaddr</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Getpeername">func Getpeername(fd int) (sa Sockaddr, err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Getsockname">func Getsockname(fd int) (sa Sockaddr, err error)</a></dd>
				
				
			
				
				<dd><a href="#SockaddrInet4">type SockaddrInet4</a></dd>
				
				
			
				
				<dd><a href="#SockaddrInet6">type SockaddrInet6</a></dd>
				
				
			
				
				<dd><a href="#SockaddrLinklayer">type SockaddrLinklayer</a></dd>
				
				
			
				
				<dd><a href="#SockaddrNetlink">type SockaddrNetlink</a></dd>
				
				
			
				
				<dd><a href="#SockaddrUnix">type SockaddrUnix</a></dd>
				
				
			
				
				<dd><a href="#SocketControlMessage">type SocketControlMessage</a></dd>
				
				
			
				
				<dd><a href="#Stat_t">type Stat_t</a></dd>
				
				
			
				
				<dd><a href="#Statfs_t">type Statfs_t</a></dd>
				
				
			
				
				<dd><a href="#SysProcAttr">type SysProcAttr</a></dd>
				
				
			
				
				<dd><a href="#Sysinfo_t">type Sysinfo_t</a></dd>
				
				
			
				
				<dd><a href="#Termios">type Termios</a></dd>
				
				
			
				
				<dd><a href="#Time_t">type Time_t</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Time">func Time(t *Time_t) (tt Time_t, err error)</a></dd>
				
				
			
				
				<dd><a href="#Timespec">type Timespec</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NsecToTimespec">func NsecToTimespec(nsec int64) (ts Timespec)</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Timespec.Nano">func (ts *Timespec) Nano() int64</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Timespec.Unix">func (ts *Timespec) Unix() (sec int64, nsec int64)</a></dd>
				
			
				
				<dd><a href="#Timeval">type Timeval</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NsecToTimeval">func NsecToTimeval(nsec int64) (tv Timeval)</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Timeval.Nano">func (tv *Timeval) Nano() int64</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Timeval.Unix">func (tv *Timeval) Unix() (sec int64, nsec int64)</a></dd>
				
			
				
				<dd><a href="#Timex">type Timex</a></dd>
				
				
			
				
				<dd><a href="#Tms">type Tms</a></dd>
				
				
			
				
				<dd><a href="#Ucred">type Ucred</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ParseUnixCredentials">func ParseUnixCredentials(msg *SocketControlMessage) (*Ucred, error)</a></dd>
				
				
			
				
				<dd><a href="#Ustat_t">type Ustat_t</a></dd>
				
				
			
				
				<dd><a href="#Utimbuf">type Utimbuf</a></dd>
				
				
			
				
				<dd><a href="#Utsname">type Utsname</a></dd>
				
				
			
				
				<dd><a href="#WaitStatus">type WaitStatus</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#WaitStatus.Continued">func (w WaitStatus) Continued() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#WaitStatus.CoreDump">func (w WaitStatus) CoreDump() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#WaitStatus.ExitStatus">func (w WaitStatus) ExitStatus() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#WaitStatus.Exited">func (w WaitStatus) Exited() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#WaitStatus.Signal">func (w WaitStatus) Signal() Signal</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#WaitStatus.Signaled">func (w WaitStatus) Signaled() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#WaitStatus.StopSignal">func (w WaitStatus) StopSignal() Signal</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#WaitStatus.Stopped">func (w WaitStatus) Stopped() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#WaitStatus.TrapCause">func (w WaitStatus) TrapCause() int</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/syscall/env_unix.htm">env_unix.go</a>
			
				<a href="src/pkg/syscall/exec_linux.htm">exec_linux.go</a>
			
				<a href="src/pkg/syscall/exec_unix.htm">exec_unix.go</a>
			
				<a href="src/pkg/syscall/lsf_linux.htm">lsf_linux.go</a>
			
				<a href="src/pkg/syscall/netlink_linux.htm">netlink_linux.go</a>
			
				<a href="src/pkg/syscall/sockcmsg_linux.htm">sockcmsg_linux.go</a>
			
				<a href="src/pkg/syscall/sockcmsg_unix.htm">sockcmsg_unix.go</a>
			
				<a href="src/pkg/syscall/str.htm">str.go</a>
			
				<a href="src/pkg/syscall/syscall.htm">syscall.go</a>
			
				<a href="src/pkg/syscall/syscall_linux.htm">syscall_linux.go</a>
			
				<a href="src/pkg/syscall/syscall_linux_amd64.htm">syscall_linux_amd64.go</a>
			
				<a href="src/pkg/syscall/syscall_unix.htm">syscall_unix.go</a>
			
				<a href="src/pkg/syscall/zerrors_linux_amd64.htm">zerrors_linux_amd64.go</a>
			
				<a href="src/pkg/syscall/zsyscall_linux_amd64.htm">zsyscall_linux_amd64.go</a>
			
				<a href="src/pkg/syscall/zsysnum_linux_amd64.htm">zsysnum_linux_amd64.go</a>
			
				<a href="src/pkg/syscall/ztypes_linux_amd64.htm">ztypes_linux_amd64.go</a>
			
			</span>
			</p>
		
	
		
			<h2 id="constants">Constants</h2>
			
				<pre>const (
    AF_ALG                           = 0x26
    AF_APPLETALK                     = 0x5
    AF_ASH                           = 0x12
    AF_ATMPVC                        = 0x8
    AF_ATMSVC                        = 0x14
    AF_AX25                          = 0x3
    AF_BLUETOOTH                     = 0x1f
    AF_BRIDGE                        = 0x7
    AF_CAIF                          = 0x25
    AF_CAN                           = 0x1d
    AF_DECnet                        = 0xc
    AF_ECONET                        = 0x13
    AF_FILE                          = 0x1
    AF_IEEE802154                    = 0x24
    AF_INET                          = 0x2
    AF_INET6                         = 0xa
    AF_IPX                           = 0x4
    AF_IRDA                          = 0x17
    AF_ISDN                          = 0x22
    AF_IUCV                          = 0x20
    AF_KEY                           = 0xf
    AF_LLC                           = 0x1a
    AF_LOCAL                         = 0x1
    AF_MAX                           = 0x27
    AF_NETBEUI                       = 0xd
    AF_NETLINK                       = 0x10
    AF_NETROM                        = 0x6
    AF_PACKET                        = 0x11
    AF_PHONET                        = 0x23
    AF_PPPOX                         = 0x18
    AF_RDS                           = 0x15
    AF_ROSE                          = 0xb
    AF_ROUTE                         = 0x10
    AF_RXRPC                         = 0x21
    AF_SECURITY                      = 0xe
    AF_SNA                           = 0x16
    AF_TIPC                          = 0x1e
    AF_UNIX                          = 0x1
    AF_UNSPEC                        = 0x0
    AF_WANPIPE                       = 0x19
    AF_X25                           = 0x9
    ARPHRD_ADAPT                     = 0x108
    ARPHRD_APPLETLK                  = 0x8
    ARPHRD_ARCNET                    = 0x7
    ARPHRD_ASH                       = 0x30d
    ARPHRD_ATM                       = 0x13
    ARPHRD_AX25                      = 0x3
    ARPHRD_BIF                       = 0x307
    ARPHRD_CHAOS                     = 0x5
    ARPHRD_CISCO                     = 0x201
    ARPHRD_CSLIP                     = 0x101
    ARPHRD_CSLIP6                    = 0x103
    ARPHRD_DDCMP                     = 0x205
    ARPHRD_DLCI                      = 0xf
    ARPHRD_ECONET                    = 0x30e
    ARPHRD_EETHER                    = 0x2
    ARPHRD_ETHER                     = 0x1
    ARPHRD_EUI64                     = 0x1b
    ARPHRD_FCAL                      = 0x311
    ARPHRD_FCFABRIC                  = 0x313
    ARPHRD_FCPL                      = 0x312
    ARPHRD_FCPP                      = 0x310
    ARPHRD_FDDI                      = 0x306
    ARPHRD_FRAD                      = 0x302
    ARPHRD_HDLC                      = 0x201
    ARPHRD_HIPPI                     = 0x30c
    ARPHRD_HWX25                     = 0x110
    ARPHRD_IEEE1394                  = 0x18
    ARPHRD_IEEE802                   = 0x6
    ARPHRD_IEEE80211                 = 0x321
    ARPHRD_IEEE80211_PRISM           = 0x322
    ARPHRD_IEEE80211_RADIOTAP        = 0x323
    ARPHRD_IEEE802154                = 0x324
    ARPHRD_IEEE802154_PHY            = 0x325
    ARPHRD_IEEE802_TR                = 0x320
    ARPHRD_INFINIBAND                = 0x20
    ARPHRD_IPDDP                     = 0x309
    ARPHRD_IPGRE                     = 0x30a
    ARPHRD_IRDA                      = 0x30f
    ARPHRD_LAPB                      = 0x204
    ARPHRD_LOCALTLK                  = 0x305
    ARPHRD_LOOPBACK                  = 0x304
    ARPHRD_METRICOM                  = 0x17
    ARPHRD_NETROM                    = 0x0
    ARPHRD_NONE                      = 0xfffe
    ARPHRD_PIMREG                    = 0x30b
    ARPHRD_PPP                       = 0x200
    ARPHRD_PRONET                    = 0x4
    ARPHRD_RAWHDLC                   = 0x206
    ARPHRD_ROSE                      = 0x10e
    ARPHRD_RSRVD                     = 0x104
    ARPHRD_SIT                       = 0x308
    ARPHRD_SKIP                      = 0x303
    ARPHRD_SLIP                      = 0x100
    ARPHRD_SLIP6                     = 0x102
    ARPHRD_TUNNEL                    = 0x300
    ARPHRD_TUNNEL6                   = 0x301
    ARPHRD_VOID                      = 0xffff
    ARPHRD_X25                       = 0x10f
    BPF_A                            = 0x10
    BPF_ABS                          = 0x20
    BPF_ADD                          = 0x0
    BPF_ALU                          = 0x4
    BPF_AND                          = 0x50
    BPF_B                            = 0x10
    BPF_DIV                          = 0x30
    BPF_H                            = 0x8
    BPF_IMM                          = 0x0
    BPF_IND                          = 0x40
    BPF_JA                           = 0x0
    BPF_JEQ                          = 0x10
    BPF_JGE                          = 0x30
    BPF_JGT                          = 0x20
    BPF_JMP                          = 0x5
    BPF_JSET                         = 0x40
    BPF_K                            = 0x0
    BPF_LD                           = 0x0
    BPF_LDX                          = 0x1
    BPF_LEN                          = 0x80
    BPF_LSH                          = 0x60
    BPF_MAJOR_VERSION                = 0x1
    BPF_MAXINSNS                     = 0x1000
    BPF_MEM                          = 0x60
    BPF_MEMWORDS                     = 0x10
    BPF_MINOR_VERSION                = 0x1
    BPF_MISC                         = 0x7
    BPF_MSH                          = 0xa0
    BPF_MUL                          = 0x20
    BPF_NEG                          = 0x80
    BPF_OR                           = 0x40
    BPF_RET                          = 0x6
    BPF_RSH                          = 0x70
    BPF_ST                           = 0x2
    BPF_STX                          = 0x3
    BPF_SUB                          = 0x10
    BPF_TAX                          = 0x0
    BPF_TXA                          = 0x80
    BPF_W                            = 0x0
    BPF_X                            = 0x8
    DT_BLK                           = 0x6
    DT_CHR                           = 0x2
    DT_DIR                           = 0x4
    DT_FIFO                          = 0x1
    DT_LNK                           = 0xa
    DT_REG                           = 0x8
    DT_SOCK                          = 0xc
    DT_UNKNOWN                       = 0x0
    DT_WHT                           = 0xe
    EPOLLERR                         = 0x8
    EPOLLET                          = -0x80000000
    EPOLLHUP                         = 0x10
    EPOLLIN                          = 0x1
    EPOLLMSG                         = 0x400
    EPOLLONESHOT                     = 0x40000000
    EPOLLOUT                         = 0x4
    EPOLLPRI                         = 0x2
    EPOLLRDBAND                      = 0x80
    EPOLLRDHUP                       = 0x2000
    EPOLLRDNORM                      = 0x40
    EPOLLWRBAND                      = 0x200
    EPOLLWRNORM                      = 0x100
    EPOLL_CLOEXEC                    = 0x80000
    EPOLL_CTL_ADD                    = 0x1
    EPOLL_CTL_DEL                    = 0x2
    EPOLL_CTL_MOD                    = 0x3
    EPOLL_NONBLOCK                   = 0x800
    ETH_P_1588                       = 0x88f7
    ETH_P_8021Q                      = 0x8100
    ETH_P_802_2                      = 0x4
    ETH_P_802_3                      = 0x1
    ETH_P_AARP                       = 0x80f3
    ETH_P_ALL                        = 0x3
    ETH_P_AOE                        = 0x88a2
    ETH_P_ARCNET                     = 0x1a
    ETH_P_ARP                        = 0x806
    ETH_P_ATALK                      = 0x809b
    ETH_P_ATMFATE                    = 0x8884
    ETH_P_ATMMPOA                    = 0x884c
    ETH_P_AX25                       = 0x2
    ETH_P_BPQ                        = 0x8ff
    ETH_P_CAIF                       = 0xf7
    ETH_P_CAN                        = 0xc
    ETH_P_CONTROL                    = 0x16
    ETH_P_CUST                       = 0x6006
    ETH_P_DDCMP                      = 0x6
    ETH_P_DEC                        = 0x6000
    ETH_P_DIAG                       = 0x6005
    ETH_P_DNA_DL                     = 0x6001
    ETH_P_DNA_RC                     = 0x6002
    ETH_P_DNA_RT                     = 0x6003
    ETH_P_DSA                        = 0x1b
    ETH_P_ECONET                     = 0x18
    ETH_P_EDSA                       = 0xdada
    ETH_P_FCOE                       = 0x8906
    ETH_P_FIP                        = 0x8914
    ETH_P_HDLC                       = 0x19
    ETH_P_IEEE802154                 = 0xf6
    ETH_P_IEEEPUP                    = 0xa00
    ETH_P_IEEEPUPAT                  = 0xa01
    ETH_P_IP                         = 0x800
    ETH_P_IPV6                       = 0x86dd
    ETH_P_IPX                        = 0x8137
    ETH_P_IRDA                       = 0x17
    ETH_P_LAT                        = 0x6004
    ETH_P_LINK_CTL                   = 0x886c
    ETH_P_LOCALTALK                  = 0x9
    ETH_P_LOOP                       = 0x60
    ETH_P_MOBITEX                    = 0x15
    ETH_P_MPLS_MC                    = 0x8848
    ETH_P_MPLS_UC                    = 0x8847
    ETH_P_PAE                        = 0x888e
    ETH_P_PAUSE                      = 0x8808
    ETH_P_PHONET                     = 0xf5
    ETH_P_PPPTALK                    = 0x10
    ETH_P_PPP_DISC                   = 0x8863
    ETH_P_PPP_MP                     = 0x8
    ETH_P_PPP_SES                    = 0x8864
    ETH_P_PUP                        = 0x200
    ETH_P_PUPAT                      = 0x201
    ETH_P_RARP                       = 0x8035
    ETH_P_SCA                        = 0x6007
    ETH_P_SLOW                       = 0x8809
    ETH_P_SNAP                       = 0x5
    ETH_P_TEB                        = 0x6558
    ETH_P_TIPC                       = 0x88ca
    ETH_P_TRAILER                    = 0x1c
    ETH_P_TR_802_2                   = 0x11
    ETH_P_WAN_PPP                    = 0x7
    ETH_P_WCCP                       = 0x883e
    ETH_P_X25                        = 0x805
    FD_CLOEXEC                       = 0x1
    FD_SETSIZE                       = 0x400
    F_DUPFD                          = 0x0
    F_DUPFD_CLOEXEC                  = 0x406
    F_EXLCK                          = 0x4
    F_GETFD                          = 0x1
    F_GETFL                          = 0x3
    F_GETLEASE                       = 0x401
    F_GETLK                          = 0x5
    F_GETLK64                        = 0x5
    F_GETOWN                         = 0x9
    F_GETOWN_EX                      = 0x10
    F_GETPIPE_SZ                     = 0x408
    F_GETSIG                         = 0xb
    F_LOCK                           = 0x1
    F_NOTIFY                         = 0x402
    F_OK                             = 0x0
    F_RDLCK                          = 0x0
    F_SETFD                          = 0x2
    F_SETFL                          = 0x4
    F_SETLEASE                       = 0x400
    F_SETLK                          = 0x6
    F_SETLK64                        = 0x6
    F_SETLKW                         = 0x7
    F_SETLKW64                       = 0x7
    F_SETOWN                         = 0x8
    F_SETOWN_EX                      = 0xf
    F_SETPIPE_SZ                     = 0x407
    F_SETSIG                         = 0xa
    F_SHLCK                          = 0x8
    F_TEST                           = 0x3
    F_TLOCK                          = 0x2
    F_ULOCK                          = 0x0
    F_UNLCK                          = 0x2
    F_WRLCK                          = 0x1
    IFA_F_DADFAILED                  = 0x8
    IFA_F_DEPRECATED                 = 0x20
    IFA_F_HOMEADDRESS                = 0x10
    IFA_F_NODAD                      = 0x2
    IFA_F_OPTIMISTIC                 = 0x4
    IFA_F_PERMANENT                  = 0x80
    IFA_F_SECONDARY                  = 0x1
    IFA_F_TEMPORARY                  = 0x1
    IFA_F_TENTATIVE                  = 0x40
    IFA_MAX                          = 0x7
    IFF_ALLMULTI                     = 0x200
    IFF_AUTOMEDIA                    = 0x4000
    IFF_BROADCAST                    = 0x2
    IFF_DEBUG                        = 0x4
    IFF_DYNAMIC                      = 0x8000
    IFF_LOOPBACK                     = 0x8
    IFF_MASTER                       = 0x400
    IFF_MULTICAST                    = 0x1000
    IFF_NOARP                        = 0x80
    IFF_NOTRAILERS                   = 0x20
    IFF_NO_PI                        = 0x1000
    IFF_ONE_QUEUE                    = 0x2000
    IFF_POINTOPOINT                  = 0x10
    IFF_PORTSEL                      = 0x2000
    IFF_PROMISC                      = 0x100
    IFF_RUNNING                      = 0x40
    IFF_SLAVE                        = 0x800
    IFF_TAP                          = 0x2
    IFF_TUN                          = 0x1
    IFF_TUN_EXCL                     = 0x8000
    IFF_UP                           = 0x1
    IFF_VNET_HDR                     = 0x4000
    IFNAMSIZ                         = 0x10
    IN_ACCESS                        = 0x1
    IN_ALL_EVENTS                    = 0xfff
    IN_ATTRIB                        = 0x4
    IN_CLASSA_HOST                   = 0xffffff
    IN_CLASSA_MAX                    = 0x80
    IN_CLASSA_NET                    = 0xff000000
    IN_CLASSA_NSHIFT                 = 0x18
    IN_CLASSB_HOST                   = 0xffff
    IN_CLASSB_MAX                    = 0x10000
    IN_CLASSB_NET                    = 0xffff0000
    IN_CLASSB_NSHIFT                 = 0x10
    IN_CLASSC_HOST                   = 0xff
    IN_CLASSC_NET                    = 0xffffff00
    IN_CLASSC_NSHIFT                 = 0x8
    IN_CLOEXEC                       = 0x80000
    IN_CLOSE                         = 0x18
    IN_CLOSE_NOWRITE                 = 0x10
    IN_CLOSE_WRITE                   = 0x8
    IN_CREATE                        = 0x100
    IN_DELETE                        = 0x200
    IN_DELETE_SELF                   = 0x400
    IN_DONT_FOLLOW                   = 0x2000000
    IN_EXCL_UNLINK                   = 0x4000000
    IN_IGNORED                       = 0x8000
    IN_ISDIR                         = 0x40000000
    IN_LOOPBACKNET                   = 0x7f
    IN_MASK_ADD                      = 0x20000000
    IN_MODIFY                        = 0x2
    IN_MOVE                          = 0xc0
    IN_MOVED_FROM                    = 0x40
    IN_MOVED_TO                      = 0x80
    IN_MOVE_SELF                     = 0x800
    IN_NONBLOCK                      = 0x800
    IN_ONESHOT                       = 0x80000000
    IN_ONLYDIR                       = 0x1000000
    IN_OPEN                          = 0x20
    IN_Q_OVERFLOW                    = 0x4000
    IN_UNMOUNT                       = 0x2000
    IPPROTO_AH                       = 0x33
    IPPROTO_COMP                     = 0x6c
    IPPROTO_DCCP                     = 0x21
    IPPROTO_DSTOPTS                  = 0x3c
    IPPROTO_EGP                      = 0x8
    IPPROTO_ENCAP                    = 0x62
    IPPROTO_ESP                      = 0x32
    IPPROTO_FRAGMENT                 = 0x2c
    IPPROTO_GRE                      = 0x2f
    IPPROTO_HOPOPTS                  = 0x0
    IPPROTO_ICMP                     = 0x1
    IPPROTO_ICMPV6                   = 0x3a
    IPPROTO_IDP                      = 0x16
    IPPROTO_IGMP                     = 0x2
    IPPROTO_IP                       = 0x0
    IPPROTO_IPIP                     = 0x4
    IPPROTO_IPV6                     = 0x29
    IPPROTO_MTP                      = 0x5c
    IPPROTO_NONE                     = 0x3b
    IPPROTO_PIM                      = 0x67
    IPPROTO_PUP                      = 0xc
    IPPROTO_RAW                      = 0xff
    IPPROTO_ROUTING                  = 0x2b
    IPPROTO_RSVP                     = 0x2e
    IPPROTO_SCTP                     = 0x84
    IPPROTO_TCP                      = 0x6
    IPPROTO_TP                       = 0x1d
    IPPROTO_UDP                      = 0x11
    IPPROTO_UDPLITE                  = 0x88
    IPV6_2292DSTOPTS                 = 0x4
    IPV6_2292HOPLIMIT                = 0x8
    IPV6_2292HOPOPTS                 = 0x3
    IPV6_2292PKTINFO                 = 0x2
    IPV6_2292PKTOPTIONS              = 0x6
    IPV6_2292RTHDR                   = 0x5
    IPV6_ADDRFORM                    = 0x1
    IPV6_ADD_MEMBERSHIP              = 0x14
    IPV6_AUTHHDR                     = 0xa
    IPV6_CHECKSUM                    = 0x7
    IPV6_DROP_MEMBERSHIP             = 0x15
    IPV6_DSTOPTS                     = 0x3b
    IPV6_HOPLIMIT                    = 0x34
    IPV6_HOPOPTS                     = 0x36
    IPV6_IPSEC_POLICY                = 0x22
    IPV6_JOIN_ANYCAST                = 0x1b
    IPV6_JOIN_GROUP                  = 0x14
    IPV6_LEAVE_ANYCAST               = 0x1c
    IPV6_LEAVE_GROUP                 = 0x15
    IPV6_MTU                         = 0x18
    IPV6_MTU_DISCOVER                = 0x17
    IPV6_MULTICAST_HOPS              = 0x12
    IPV6_MULTICAST_IF                = 0x11
    IPV6_MULTICAST_LOOP              = 0x13
    IPV6_NEXTHOP                     = 0x9
    IPV6_PKTINFO                     = 0x32
    IPV6_PMTUDISC_DO                 = 0x2
    IPV6_PMTUDISC_DONT               = 0x0
    IPV6_PMTUDISC_PROBE              = 0x3
    IPV6_PMTUDISC_WANT               = 0x1
    IPV6_RECVDSTOPTS                 = 0x3a
    IPV6_RECVERR                     = 0x19
    IPV6_RECVHOPLIMIT                = 0x33
    IPV6_RECVHOPOPTS                 = 0x35
    IPV6_RECVPKTINFO                 = 0x31
    IPV6_RECVRTHDR                   = 0x38
    IPV6_RECVTCLASS                  = 0x42
    IPV6_ROUTER_ALERT                = 0x16
    IPV6_RTHDR                       = 0x39
    IPV6_RTHDRDSTOPTS                = 0x37
    IPV6_RTHDR_LOOSE                 = 0x0
    IPV6_RTHDR_STRICT                = 0x1
    IPV6_RTHDR_TYPE_0                = 0x0
    IPV6_RXDSTOPTS                   = 0x3b
    IPV6_RXHOPOPTS                   = 0x36
    IPV6_TCLASS                      = 0x43
    IPV6_UNICAST_HOPS                = 0x10
    IPV6_V6ONLY                      = 0x1a
    IPV6_XFRM_POLICY                 = 0x23
    IP_ADD_MEMBERSHIP                = 0x23
    IP_ADD_SOURCE_MEMBERSHIP         = 0x27
    IP_BLOCK_SOURCE                  = 0x26
    IP_DEFAULT_MULTICAST_LOOP        = 0x1
    IP_DEFAULT_MULTICAST_TTL         = 0x1
    IP_DF                            = 0x4000
    IP_DROP_MEMBERSHIP               = 0x24
    IP_DROP_SOURCE_MEMBERSHIP        = 0x28
    IP_FREEBIND                      = 0xf
    IP_HDRINCL                       = 0x3
    IP_IPSEC_POLICY                  = 0x10
    IP_MAXPACKET                     = 0xffff
    IP_MAX_MEMBERSHIPS               = 0x14
    IP_MF                            = 0x2000
    IP_MINTTL                        = 0x15
    IP_MSFILTER                      = 0x29
    IP_MSS                           = 0x240
    IP_MTU                           = 0xe
    IP_MTU_DISCOVER                  = 0xa
    IP_MULTICAST_IF                  = 0x20
    IP_MULTICAST_LOOP                = 0x22
    IP_MULTICAST_TTL                 = 0x21
    IP_OFFMASK                       = 0x1fff
    IP_OPTIONS                       = 0x4
    IP_ORIGDSTADDR                   = 0x14
    IP_PASSSEC                       = 0x12
    IP_PKTINFO                       = 0x8
    IP_PKTOPTIONS                    = 0x9
    IP_PMTUDISC                      = 0xa
    IP_PMTUDISC_DO                   = 0x2
    IP_PMTUDISC_DONT                 = 0x0
    IP_PMTUDISC_PROBE                = 0x3
    IP_PMTUDISC_WANT                 = 0x1
    IP_RECVERR                       = 0xb
    IP_RECVOPTS                      = 0x6
    IP_RECVORIGDSTADDR               = 0x14
    IP_RECVRETOPTS                   = 0x7
    IP_RECVTOS                       = 0xd
    IP_RECVTTL                       = 0xc
    IP_RETOPTS                       = 0x7
    IP_RF                            = 0x8000
    IP_ROUTER_ALERT                  = 0x5
    IP_TOS                           = 0x1
    IP_TRANSPARENT                   = 0x13
    IP_TTL                           = 0x2
    IP_UNBLOCK_SOURCE                = 0x25
    IP_XFRM_POLICY                   = 0x11
    LINUX_REBOOT_CMD_CAD_OFF         = 0x0
    LINUX_REBOOT_CMD_CAD_ON          = 0x89abcdef
    LINUX_REBOOT_CMD_HALT            = 0xcdef0123
    LINUX_REBOOT_CMD_KEXEC           = 0x45584543
    LINUX_REBOOT_CMD_POWER_OFF       = 0x4321fedc
    LINUX_REBOOT_CMD_RESTART         = 0x1234567
    LINUX_REBOOT_CMD_RESTART2        = 0xa1b2c3d4
    LINUX_REBOOT_CMD_SW_SUSPEND      = 0xd000fce2
    LINUX_REBOOT_MAGIC1              = 0xfee1dead
    LINUX_REBOOT_MAGIC2              = 0x28121969
    LOCK_EX                          = 0x2
    LOCK_NB                          = 0x4
    LOCK_SH                          = 0x1
    LOCK_UN                          = 0x8
    MADV_DOFORK                      = 0xb
    MADV_DONTFORK                    = 0xa
    MADV_DONTNEED                    = 0x4
    MADV_HUGEPAGE                    = 0xe
    MADV_HWPOISON                    = 0x64
    MADV_MERGEABLE                   = 0xc
    MADV_NOHUGEPAGE                  = 0xf
    MADV_NORMAL                      = 0x0
    MADV_RANDOM                      = 0x1
    MADV_REMOVE                      = 0x9
    MADV_SEQUENTIAL                  = 0x2
    MADV_UNMERGEABLE                 = 0xd
    MADV_WILLNEED                    = 0x3
    MAP_32BIT                        = 0x40
    MAP_ANON                         = 0x20
    MAP_ANONYMOUS                    = 0x20
    MAP_DENYWRITE                    = 0x800
    MAP_EXECUTABLE                   = 0x1000
    MAP_FILE                         = 0x0
    MAP_FIXED                        = 0x10
    MAP_GROWSDOWN                    = 0x100
    MAP_HUGETLB                      = 0x40000
    MAP_LOCKED                       = 0x2000
    MAP_NONBLOCK                     = 0x10000
    MAP_NORESERVE                    = 0x4000
    MAP_POPULATE                     = 0x8000
    MAP_PRIVATE                      = 0x2
    MAP_SHARED                       = 0x1
    MAP_STACK                        = 0x20000
    MAP_TYPE                         = 0xf
    MCL_CURRENT                      = 0x1
    MCL_FUTURE                       = 0x2
    MNT_DETACH                       = 0x2
    MNT_EXPIRE                       = 0x4
    MNT_FORCE                        = 0x1
    MSG_CMSG_CLOEXEC                 = 0x40000000
    MSG_CONFIRM                      = 0x800
    MSG_CTRUNC                       = 0x8
    MSG_DONTROUTE                    = 0x4
    MSG_DONTWAIT                     = 0x40
    MSG_EOR                          = 0x80
    MSG_ERRQUEUE                     = 0x2000
    MSG_FIN                          = 0x200
    MSG_MORE                         = 0x8000
    MSG_NOSIGNAL                     = 0x4000
    MSG_OOB                          = 0x1
    MSG_PEEK                         = 0x2
    MSG_PROXY                        = 0x10
    MSG_RST                          = 0x1000
    MSG_SYN                          = 0x400
    MSG_TRUNC                        = 0x20
    MSG_TRYHARD                      = 0x4
    MSG_WAITALL                      = 0x100
    MSG_WAITFORONE                   = 0x10000
    MS_ACTIVE                        = 0x40000000
    MS_ASYNC                         = 0x1
    MS_BIND                          = 0x1000
    MS_DIRSYNC                       = 0x80
    MS_INVALIDATE                    = 0x2
    MS_I_VERSION                     = 0x800000
    MS_KERNMOUNT                     = 0x400000
    MS_MANDLOCK                      = 0x40
    MS_MGC_MSK                       = 0xffff0000
    MS_MGC_VAL                       = 0xc0ed0000
    MS_MOVE                          = 0x2000
    MS_NOATIME                       = 0x400
    MS_NODEV                         = 0x4
    MS_NODIRATIME                    = 0x800
    MS_NOEXEC                        = 0x8
    MS_NOSUID                        = 0x2
    MS_NOUSER                        = -0x80000000
    MS_POSIXACL                      = 0x10000
    MS_PRIVATE                       = 0x40000
    MS_RDONLY                        = 0x1
    MS_REC                           = 0x4000
    MS_RELATIME                      = 0x200000
    MS_REMOUNT                       = 0x20
    MS_RMT_MASK                      = 0x800051
    MS_SHARED                        = 0x100000
    MS_SILENT                        = 0x8000
    MS_SLAVE                         = 0x80000
    MS_STRICTATIME                   = 0x1000000
    MS_SYNC                          = 0x4
    MS_SYNCHRONOUS                   = 0x10
    MS_UNBINDABLE                    = 0x20000
    NAME_MAX                         = 0xff
    NETLINK_ADD_MEMBERSHIP           = 0x1
    NETLINK_AUDIT                    = 0x9
    NETLINK_BROADCAST_ERROR          = 0x4
    NETLINK_CONNECTOR                = 0xb
    NETLINK_DNRTMSG                  = 0xe
    NETLINK_DROP_MEMBERSHIP          = 0x2
    NETLINK_ECRYPTFS                 = 0x13
    NETLINK_FIB_LOOKUP               = 0xa
    NETLINK_FIREWALL                 = 0x3
    NETLINK_GENERIC                  = 0x10
    NETLINK_INET_DIAG                = 0x4
    NETLINK_IP6_FW                   = 0xd
    NETLINK_ISCSI                    = 0x8
    NETLINK_KOBJECT_UEVENT           = 0xf
    NETLINK_NETFILTER                = 0xc
    NETLINK_NFLOG                    = 0x5
    NETLINK_NO_ENOBUFS               = 0x5
    NETLINK_PKTINFO                  = 0x3
    NETLINK_ROUTE                    = 0x0
    NETLINK_SCSITRANSPORT            = 0x12
    NETLINK_SELINUX                  = 0x7
    NETLINK_UNUSED                   = 0x1
    NETLINK_USERSOCK                 = 0x2
    NETLINK_XFRM                     = 0x6
    NLA_ALIGNTO                      = 0x4
    NLA_F_NESTED                     = 0x8000
    NLA_F_NET_BYTEORDER              = 0x4000
    NLA_HDRLEN                       = 0x4
    NLMSG_ALIGNTO                    = 0x4
    NLMSG_DONE                       = 0x3
    NLMSG_ERROR                      = 0x2
    NLMSG_HDRLEN                     = 0x10
    NLMSG_MIN_TYPE                   = 0x10
    NLMSG_NOOP                       = 0x1
    NLMSG_OVERRUN                    = 0x4
    NLM_F_ACK                        = 0x4
    NLM_F_APPEND                     = 0x800
    NLM_F_ATOMIC                     = 0x400
    NLM_F_CREATE                     = 0x400
    NLM_F_DUMP                       = 0x300
    NLM_F_ECHO                       = 0x8
    NLM_F_EXCL                       = 0x200
    NLM_F_MATCH                      = 0x200
    NLM_F_MULTI                      = 0x2
    NLM_F_REPLACE                    = 0x100
    NLM_F_REQUEST                    = 0x1
    NLM_F_ROOT                       = 0x100
    O_ACCMODE                        = 0x3
    O_APPEND                         = 0x400
    O_ASYNC                          = 0x2000
    O_CLOEXEC                        = 0x80000
    O_CREAT                          = 0x40
    O_DIRECT                         = 0x4000
    O_DIRECTORY                      = 0x10000
    O_DSYNC                          = 0x1000
    O_EXCL                           = 0x80
    O_FSYNC                          = 0x101000
    O_LARGEFILE                      = 0x0
    O_NDELAY                         = 0x800
    O_NOATIME                        = 0x40000
    O_NOCTTY                         = 0x100
    O_NOFOLLOW                       = 0x20000
    O_NONBLOCK                       = 0x800
    O_RDONLY                         = 0x0
    O_RDWR                           = 0x2
    O_RSYNC                          = 0x101000
    O_SYNC                           = 0x101000
    O_TRUNC                          = 0x200
    O_WRONLY                         = 0x1
    PACKET_ADD_MEMBERSHIP            = 0x1
    PACKET_BROADCAST                 = 0x1
    PACKET_DROP_MEMBERSHIP           = 0x2
    PACKET_FASTROUTE                 = 0x6
    PACKET_HOST                      = 0x0
    PACKET_LOOPBACK                  = 0x5
    PACKET_MR_ALLMULTI               = 0x2
    PACKET_MR_MULTICAST              = 0x0
    PACKET_MR_PROMISC                = 0x1
    PACKET_MULTICAST                 = 0x2
    PACKET_OTHERHOST                 = 0x3
    PACKET_OUTGOING                  = 0x4
    PACKET_RECV_OUTPUT               = 0x3
    PACKET_RX_RING                   = 0x5
    PACKET_STATISTICS                = 0x6
    PROT_EXEC                        = 0x4
    PROT_GROWSDOWN                   = 0x1000000
    PROT_GROWSUP                     = 0x2000000
    PROT_NONE                        = 0x0
    PROT_READ                        = 0x1
    PROT_WRITE                       = 0x2
    PR_CAPBSET_DROP                  = 0x18
    PR_CAPBSET_READ                  = 0x17
    PR_ENDIAN_BIG                    = 0x0
    PR_ENDIAN_LITTLE                 = 0x1
    PR_ENDIAN_PPC_LITTLE             = 0x2
    PR_FPEMU_NOPRINT                 = 0x1
    PR_FPEMU_SIGFPE                  = 0x2
    PR_FP_EXC_ASYNC                  = 0x2
    PR_FP_EXC_DISABLED               = 0x0
    PR_FP_EXC_DIV                    = 0x10000
    PR_FP_EXC_INV                    = 0x100000
    PR_FP_EXC_NONRECOV               = 0x1
    PR_FP_EXC_OVF                    = 0x20000
    PR_FP_EXC_PRECISE                = 0x3
    PR_FP_EXC_RES                    = 0x80000
    PR_FP_EXC_SW_ENABLE              = 0x80
    PR_FP_EXC_UND                    = 0x40000
    PR_GET_DUMPABLE                  = 0x3
    PR_GET_ENDIAN                    = 0x13
    PR_GET_FPEMU                     = 0x9
    PR_GET_FPEXC                     = 0xb
    PR_GET_KEEPCAPS                  = 0x7
    PR_GET_NAME                      = 0x10
    PR_GET_PDEATHSIG                 = 0x2
    PR_GET_SECCOMP                   = 0x15
    PR_GET_SECUREBITS                = 0x1b
    PR_GET_TIMERSLACK                = 0x1e
    PR_GET_TIMING                    = 0xd
    PR_GET_TSC                       = 0x19
    PR_GET_UNALIGN                   = 0x5
    PR_MCE_KILL                      = 0x21
    PR_MCE_KILL_CLEAR                = 0x0
    PR_MCE_KILL_DEFAULT              = 0x2
    PR_MCE_KILL_EARLY                = 0x1
    PR_MCE_KILL_GET                  = 0x22
    PR_MCE_KILL_LATE                 = 0x0
    PR_MCE_KILL_SET                  = 0x1
    PR_SET_DUMPABLE                  = 0x4
    PR_SET_ENDIAN                    = 0x14
    PR_SET_FPEMU                     = 0xa
    PR_SET_FPEXC                     = 0xc
    PR_SET_KEEPCAPS                  = 0x8
    PR_SET_NAME                      = 0xf
    PR_SET_PDEATHSIG                 = 0x1
    PR_SET_PTRACER                   = 0x59616d61
    PR_SET_SECCOMP                   = 0x16
    PR_SET_SECUREBITS                = 0x1c
    PR_SET_TIMERSLACK                = 0x1d
    PR_SET_TIMING                    = 0xe
    PR_SET_TSC                       = 0x1a
    PR_SET_UNALIGN                   = 0x6
    PR_TASK_PERF_EVENTS_DISABLE      = 0x1f
    PR_TASK_PERF_EVENTS_ENABLE       = 0x20
    PR_TIMING_STATISTICAL            = 0x0
    PR_TIMING_TIMESTAMP              = 0x1
    PR_TSC_ENABLE                    = 0x1
    PR_TSC_SIGSEGV                   = 0x2
    PR_UNALIGN_NOPRINT               = 0x1
    PR_UNALIGN_SIGBUS                = 0x2
    PTRACE_ARCH_PRCTL                = 0x1e
    PTRACE_ATTACH                    = 0x10
    PTRACE_CONT                      = 0x7
    PTRACE_DETACH                    = 0x11
    PTRACE_EVENT_CLONE               = 0x3
    PTRACE_EVENT_EXEC                = 0x4
    PTRACE_EVENT_EXIT                = 0x6
    PTRACE_EVENT_FORK                = 0x1
    PTRACE_EVENT_VFORK               = 0x2
    PTRACE_EVENT_VFORK_DONE          = 0x5
    PTRACE_GETEVENTMSG               = 0x4201
    PTRACE_GETFPREGS                 = 0xe
    PTRACE_GETFPXREGS                = 0x12
    PTRACE_GETREGS                   = 0xc
    PTRACE_GETREGSET                 = 0x4204
    PTRACE_GETSIGINFO                = 0x4202
    PTRACE_GET_THREAD_AREA           = 0x19
    PTRACE_KILL                      = 0x8
    PTRACE_OLDSETOPTIONS             = 0x15
    PTRACE_O_MASK                    = 0x7f
    PTRACE_O_TRACECLONE              = 0x8
    PTRACE_O_TRACEEXEC               = 0x10
    PTRACE_O_TRACEEXIT               = 0x40
    PTRACE_O_TRACEFORK               = 0x2
    PTRACE_O_TRACESYSGOOD            = 0x1
    PTRACE_O_TRACEVFORK              = 0x4
    PTRACE_O_TRACEVFORKDONE          = 0x20
    PTRACE_PEEKDATA                  = 0x2
    PTRACE_PEEKTEXT                  = 0x1
    PTRACE_PEEKUSR                   = 0x3
    PTRACE_POKEDATA                  = 0x5
    PTRACE_POKETEXT                  = 0x4
    PTRACE_POKEUSR                   = 0x6
    PTRACE_SETFPREGS                 = 0xf
    PTRACE_SETFPXREGS                = 0x13
    PTRACE_SETOPTIONS                = 0x4200
    PTRACE_SETREGS                   = 0xd
    PTRACE_SETREGSET                 = 0x4205
    PTRACE_SETSIGINFO                = 0x4203
    PTRACE_SET_THREAD_AREA           = 0x1a
    PTRACE_SINGLEBLOCK               = 0x21
    PTRACE_SINGLESTEP                = 0x9
    PTRACE_SYSCALL                   = 0x18
    PTRACE_SYSEMU                    = 0x1f
    PTRACE_SYSEMU_SINGLESTEP         = 0x20
    PTRACE_TRACEME                   = 0x0
    RLIMIT_AS                        = 0x9
    RLIMIT_CORE                      = 0x4
    RLIMIT_CPU                       = 0x0
    RLIMIT_DATA                      = 0x2
    RLIMIT_FSIZE                     = 0x1
    RLIMIT_NOFILE                    = 0x7
    RLIMIT_STACK                     = 0x3
    RLIM_INFINITY                    = -0x1
    RTAX_ADVMSS                      = 0x8
    RTAX_CWND                        = 0x7
    RTAX_FEATURES                    = 0xc
    RTAX_FEATURE_ALLFRAG             = 0x8
    RTAX_FEATURE_ECN                 = 0x1
    RTAX_FEATURE_SACK                = 0x2
    RTAX_FEATURE_TIMESTAMP           = 0x4
    RTAX_HOPLIMIT                    = 0xa
    RTAX_INITCWND                    = 0xb
    RTAX_INITRWND                    = 0xe
    RTAX_LOCK                        = 0x1
    RTAX_MAX                         = 0xe
    RTAX_MTU                         = 0x2
    RTAX_REORDERING                  = 0x9
    RTAX_RTO_MIN                     = 0xd
    RTAX_RTT                         = 0x4
    RTAX_RTTVAR                      = 0x5
    RTAX_SSTHRESH                    = 0x6
    RTAX_UNSPEC                      = 0x0
    RTAX_WINDOW                      = 0x3
    RTA_ALIGNTO                      = 0x4
    RTA_MAX                          = 0x10
    RTCF_DIRECTSRC                   = 0x4000000
    RTCF_DOREDIRECT                  = 0x1000000
    RTCF_LOG                         = 0x2000000
    RTCF_MASQ                        = 0x400000
    RTCF_NAT                         = 0x800000
    RTCF_VALVE                       = 0x200000
    RTF_ADDRCLASSMASK                = 0xf8000000
    RTF_ADDRCONF                     = 0x40000
    RTF_ALLONLINK                    = 0x20000
    RTF_BROADCAST                    = 0x10000000
    RTF_CACHE                        = 0x1000000
    RTF_DEFAULT                      = 0x10000
    RTF_DYNAMIC                      = 0x10
    RTF_FLOW                         = 0x2000000
    RTF_GATEWAY                      = 0x2
    RTF_HOST                         = 0x4
    RTF_INTERFACE                    = 0x40000000
    RTF_IRTT                         = 0x100
    RTF_LINKRT                       = 0x100000
    RTF_LOCAL                        = 0x80000000
    RTF_MODIFIED                     = 0x20
    RTF_MSS                          = 0x40
    RTF_MTU                          = 0x40
    RTF_MULTICAST                    = 0x20000000
    RTF_NAT                          = 0x8000000
    RTF_NOFORWARD                    = 0x1000
    RTF_NONEXTHOP                    = 0x200000
    RTF_NOPMTUDISC                   = 0x4000
    RTF_POLICY                       = 0x4000000
    RTF_REINSTATE                    = 0x8
    RTF_REJECT                       = 0x200
    RTF_STATIC                       = 0x400
    RTF_THROW                        = 0x2000
    RTF_UP                           = 0x1
    RTF_WINDOW                       = 0x80
    RTF_XRESOLVE                     = 0x800
    RTM_BASE                         = 0x10
    RTM_DELACTION                    = 0x31
    RTM_DELADDR                      = 0x15
    RTM_DELADDRLABEL                 = 0x49
    RTM_DELLINK                      = 0x11
    RTM_DELNEIGH                     = 0x1d
    RTM_DELQDISC                     = 0x25
    RTM_DELROUTE                     = 0x19
    RTM_DELRULE                      = 0x21
    RTM_DELTCLASS                    = 0x29
    RTM_DELTFILTER                   = 0x2d
    RTM_F_CLONED                     = 0x200
    RTM_F_EQUALIZE                   = 0x400
    RTM_F_NOTIFY                     = 0x100
    RTM_F_PREFIX                     = 0x800
    RTM_GETACTION                    = 0x32
    RTM_GETADDR                      = 0x16
    RTM_GETADDRLABEL                 = 0x4a
    RTM_GETANYCAST                   = 0x3e
    RTM_GETDCB                       = 0x4e
    RTM_GETLINK                      = 0x12
    RTM_GETMULTICAST                 = 0x3a
    RTM_GETNEIGH                     = 0x1e
    RTM_GETNEIGHTBL                  = 0x42
    RTM_GETQDISC                     = 0x26
    RTM_GETROUTE                     = 0x1a
    RTM_GETRULE                      = 0x22
    RTM_GETTCLASS                    = 0x2a
    RTM_GETTFILTER                   = 0x2e
    RTM_MAX                          = 0x4f
    RTM_NEWACTION                    = 0x30
    RTM_NEWADDR                      = 0x14
    RTM_NEWADDRLABEL                 = 0x48
    RTM_NEWLINK                      = 0x10
    RTM_NEWNDUSEROPT                 = 0x44
    RTM_NEWNEIGH                     = 0x1c
    RTM_NEWNEIGHTBL                  = 0x40
    RTM_NEWPREFIX                    = 0x34
    RTM_NEWQDISC                     = 0x24
    RTM_NEWROUTE                     = 0x18
    RTM_NEWRULE                      = 0x20
    RTM_NEWTCLASS                    = 0x28
    RTM_NEWTFILTER                   = 0x2c
    RTM_NR_FAMILIES                  = 0x10
    RTM_NR_MSGTYPES                  = 0x40
    RTM_SETDCB                       = 0x4f
    RTM_SETLINK                      = 0x13
    RTM_SETNEIGHTBL                  = 0x43
    RTNH_ALIGNTO                     = 0x4
    RTNH_F_DEAD                      = 0x1
    RTNH_F_ONLINK                    = 0x4
    RTNH_F_PERVASIVE                 = 0x2
    RTN_MAX                          = 0xb
    RTPROT_BIRD                      = 0xc
    RTPROT_BOOT                      = 0x3
    RTPROT_DHCP                      = 0x10
    RTPROT_DNROUTED                  = 0xd
    RTPROT_GATED                     = 0x8
    RTPROT_KERNEL                    = 0x2
    RTPROT_MRT                       = 0xa
    RTPROT_NTK                       = 0xf
    RTPROT_RA                        = 0x9
    RTPROT_REDIRECT                  = 0x1
    RTPROT_STATIC                    = 0x4
    RTPROT_UNSPEC                    = 0x0
    RTPROT_XORP                      = 0xe
    RTPROT_ZEBRA                     = 0xb
    RT_CLASS_DEFAULT                 = 0xfd
    RT_CLASS_LOCAL                   = 0xff
    RT_CLASS_MAIN                    = 0xfe
    RT_CLASS_MAX                     = 0xff
    RT_CLASS_UNSPEC                  = 0x0
    RUSAGE_CHILDREN                  = -0x1
    RUSAGE_SELF                      = 0x0
    RUSAGE_THREAD                    = 0x1
    SCM_CREDENTIALS                  = 0x2
    SCM_RIGHTS                       = 0x1
    SCM_TIMESTAMP                    = 0x1d
    SCM_TIMESTAMPING                 = 0x25
    SCM_TIMESTAMPNS                  = 0x23
    SHUT_RD                          = 0x0
    SHUT_RDWR                        = 0x2
    SHUT_WR                          = 0x1
    SIOCADDDLCI                      = 0x8980
    SIOCADDMULTI                     = 0x8931
    SIOCADDRT                        = 0x890b
    SIOCATMARK                       = 0x8905
    SIOCDARP                         = 0x8953
    SIOCDELDLCI                      = 0x8981
    SIOCDELMULTI                     = 0x8932
    SIOCDELRT                        = 0x890c
    SIOCDEVPRIVATE                   = 0x89f0
    SIOCDIFADDR                      = 0x8936
    SIOCDRARP                        = 0x8960
    SIOCGARP                         = 0x8954
    SIOCGIFADDR                      = 0x8915
    SIOCGIFBR                        = 0x8940
    SIOCGIFBRDADDR                   = 0x8919
    SIOCGIFCONF                      = 0x8912
    SIOCGIFCOUNT                     = 0x8938
    SIOCGIFDSTADDR                   = 0x8917
    SIOCGIFENCAP                     = 0x8925
    SIOCGIFFLAGS                     = 0x8913
    SIOCGIFHWADDR                    = 0x8927
    SIOCGIFINDEX                     = 0x8933
    SIOCGIFMAP                       = 0x8970
    SIOCGIFMEM                       = 0x891f
    SIOCGIFMETRIC                    = 0x891d
    SIOCGIFMTU                       = 0x8921
    SIOCGIFNAME                      = 0x8910
    SIOCGIFNETMASK                   = 0x891b
    SIOCGIFPFLAGS                    = 0x8935
    SIOCGIFSLAVE                     = 0x8929
    SIOCGIFTXQLEN                    = 0x8942
    SIOCGPGRP                        = 0x8904
    SIOCGRARP                        = 0x8961
    SIOCGSTAMP                       = 0x8906
    SIOCGSTAMPNS                     = 0x8907
    SIOCPROTOPRIVATE                 = 0x89e0
    SIOCRTMSG                        = 0x890d
    SIOCSARP                         = 0x8955
    SIOCSIFADDR                      = 0x8916
    SIOCSIFBR                        = 0x8941
    SIOCSIFBRDADDR                   = 0x891a
    SIOCSIFDSTADDR                   = 0x8918
    SIOCSIFENCAP                     = 0x8926
    SIOCSIFFLAGS                     = 0x8914
    SIOCSIFHWADDR                    = 0x8924
    SIOCSIFHWBROADCAST               = 0x8937
    SIOCSIFLINK                      = 0x8911
    SIOCSIFMAP                       = 0x8971
    SIOCSIFMEM                       = 0x8920
    SIOCSIFMETRIC                    = 0x891e
    SIOCSIFMTU                       = 0x8922
    SIOCSIFNAME                      = 0x8923
    SIOCSIFNETMASK                   = 0x891c
    SIOCSIFPFLAGS                    = 0x8934
    SIOCSIFSLAVE                     = 0x8930
    SIOCSIFTXQLEN                    = 0x8943
    SIOCSPGRP                        = 0x8902
    SIOCSRARP                        = 0x8962
    SOCK_CLOEXEC                     = 0x80000
    SOCK_DCCP                        = 0x6
    SOCK_DGRAM                       = 0x2
    SOCK_NONBLOCK                    = 0x800
    SOCK_PACKET                      = 0xa
    SOCK_RAW                         = 0x3
    SOCK_RDM                         = 0x4
    SOCK_SEQPACKET                   = 0x5
    SOCK_STREAM                      = 0x1
    SOL_AAL                          = 0x109
    SOL_ATM                          = 0x108
    SOL_DECNET                       = 0x105
    SOL_ICMPV6                       = 0x3a
    SOL_IP                           = 0x0
    SOL_IPV6                         = 0x29
    SOL_IRDA                         = 0x10a
    SOL_PACKET                       = 0x107
    SOL_RAW                          = 0xff
    SOL_SOCKET                       = 0x1
    SOL_TCP                          = 0x6
    SOL_X25                          = 0x106
    SOMAXCONN                        = 0x80
    SO_ACCEPTCONN                    = 0x1e
    SO_ATTACH_FILTER                 = 0x1a
    SO_BINDTODEVICE                  = 0x19
    SO_BROADCAST                     = 0x6
    SO_BSDCOMPAT                     = 0xe
    SO_DEBUG                         = 0x1
    SO_DETACH_FILTER                 = 0x1b
    SO_DOMAIN                        = 0x27
    SO_DONTROUTE                     = 0x5
    SO_ERROR                         = 0x4
    SO_KEEPALIVE                     = 0x9
    SO_LINGER                        = 0xd
    SO_MARK                          = 0x24
    SO_NO_CHECK                      = 0xb
    SO_OOBINLINE                     = 0xa
    SO_PASSCRED                      = 0x10
    SO_PASSSEC                       = 0x22
    SO_PEERCRED                      = 0x11
    SO_PEERNAME                      = 0x1c
    SO_PEERSEC                       = 0x1f
    SO_PRIORITY                      = 0xc
    SO_PROTOCOL                      = 0x26
    SO_RCVBUF                        = 0x8
    SO_RCVBUFFORCE                   = 0x21
    SO_RCVLOWAT                      = 0x12
    SO_RCVTIMEO                      = 0x14
    SO_REUSEADDR                     = 0x2
    SO_RXQ_OVFL                      = 0x28
    SO_SECURITY_AUTHENTICATION       = 0x16
    SO_SECURITY_ENCRYPTION_NETWORK   = 0x18
    SO_SECURITY_ENCRYPTION_TRANSPORT = 0x17
    SO_SNDBUF                        = 0x7
    SO_SNDBUFFORCE                   = 0x20
    SO_SNDLOWAT                      = 0x13
    SO_SNDTIMEO                      = 0x15
    SO_TIMESTAMP                     = 0x1d
    SO_TIMESTAMPING                  = 0x25
    SO_TIMESTAMPNS                   = 0x23
    SO_TYPE                          = 0x3
    S_BLKSIZE                        = 0x200
    S_IEXEC                          = 0x40
    S_IFBLK                          = 0x6000
    S_IFCHR                          = 0x2000
    S_IFDIR                          = 0x4000
    S_IFIFO                          = 0x1000
    S_IFLNK                          = 0xa000
    S_IFMT                           = 0xf000
    S_IFREG                          = 0x8000
    S_IFSOCK                         = 0xc000
    S_IREAD                          = 0x100
    S_IRGRP                          = 0x20
    S_IROTH                          = 0x4
    S_IRUSR                          = 0x100
    S_IRWXG                          = 0x38
    S_IRWXO                          = 0x7
    S_IRWXU                          = 0x1c0
    S_ISGID                          = 0x400
    S_ISUID                          = 0x800
    S_ISVTX                          = 0x200
    S_IWGRP                          = 0x10
    S_IWOTH                          = 0x2
    S_IWRITE                         = 0x80
    S_IWUSR                          = 0x80
    S_IXGRP                          = 0x8
    S_IXOTH                          = 0x1
    S_IXUSR                          = 0x40
    TCP_CONGESTION                   = 0xd
    TCP_CORK                         = 0x3
    TCP_DEFER_ACCEPT                 = 0x9
    TCP_INFO                         = 0xb
    TCP_KEEPCNT                      = 0x6
    TCP_KEEPIDLE                     = 0x4
    TCP_KEEPINTVL                    = 0x5
    TCP_LINGER2                      = 0x8
    TCP_MAXSEG                       = 0x2
    TCP_MAXWIN                       = 0xffff
    TCP_MAX_WINSHIFT                 = 0xe
    TCP_MD5SIG                       = 0xe
    TCP_MD5SIG_MAXKEYLEN             = 0x50
    TCP_MSS                          = 0x200
    TCP_NODELAY                      = 0x1
    TCP_QUICKACK                     = 0xc
    TCP_SYNCNT                       = 0x7
    TCP_WINDOW_CLAMP                 = 0xa
    TIOCCBRK                         = 0x5428
    TIOCCONS                         = 0x541d
    TIOCEXCL                         = 0x540c
    TIOCGDEV                         = 0x80045432
    TIOCGETD                         = 0x5424
    TIOCGICOUNT                      = 0x545d
    TIOCGLCKTRMIOS                   = 0x5456
    TIOCGPGRP                        = 0x540f
    TIOCGPTN                         = 0x80045430
    TIOCGRS485                       = 0x542e
    TIOCGSERIAL                      = 0x541e
    TIOCGSID                         = 0x5429
    TIOCGSOFTCAR                     = 0x5419
    TIOCGWINSZ                       = 0x5413
    TIOCINQ                          = 0x541b
    TIOCLINUX                        = 0x541c
    TIOCMBIC                         = 0x5417
    TIOCMBIS                         = 0x5416
    TIOCMGET                         = 0x5415
    TIOCMIWAIT                       = 0x545c
    TIOCMSET                         = 0x5418
    TIOCM_CAR                        = 0x40
    TIOCM_CD                         = 0x40
    TIOCM_CTS                        = 0x20
    TIOCM_DSR                        = 0x100
    TIOCM_DTR                        = 0x2
    TIOCM_LE                         = 0x1
    TIOCM_RI                         = 0x80
    TIOCM_RNG                        = 0x80
    TIOCM_RTS                        = 0x4
    TIOCM_SR                         = 0x10
    TIOCM_ST                         = 0x8
    TIOCNOTTY                        = 0x5422
    TIOCNXCL                         = 0x540d
    TIOCOUTQ                         = 0x5411
    TIOCPKT                          = 0x5420
    TIOCPKT_DATA                     = 0x0
    TIOCPKT_DOSTOP                   = 0x20
    TIOCPKT_FLUSHREAD                = 0x1
    TIOCPKT_FLUSHWRITE               = 0x2
    TIOCPKT_IOCTL                    = 0x40
    TIOCPKT_NOSTOP                   = 0x10
    TIOCPKT_START                    = 0x8
    TIOCPKT_STOP                     = 0x4
    TIOCSBRK                         = 0x5427
    TIOCSCTTY                        = 0x540e
    TIOCSERCONFIG                    = 0x5453
    TIOCSERGETLSR                    = 0x5459
    TIOCSERGETMULTI                  = 0x545a
    TIOCSERGSTRUCT                   = 0x5458
    TIOCSERGWILD                     = 0x5454
    TIOCSERSETMULTI                  = 0x545b
    TIOCSERSWILD                     = 0x5455
    TIOCSER_TEMT                     = 0x1
    TIOCSETD                         = 0x5423
    TIOCSIG                          = 0x40045436
    TIOCSLCKTRMIOS                   = 0x5457
    TIOCSPGRP                        = 0x5410
    TIOCSPTLCK                       = 0x40045431
    TIOCSRS485                       = 0x542f
    TIOCSSERIAL                      = 0x541f
    TIOCSSOFTCAR                     = 0x541a
    TIOCSTI                          = 0x5412
    TIOCSWINSZ                       = 0x5414
    TUNATTACHFILTER                  = 0x401054d5
    TUNDETACHFILTER                  = 0x401054d6
    TUNGETFEATURES                   = 0x800454cf
    TUNGETIFF                        = 0x800454d2
    TUNGETSNDBUF                     = 0x800454d3
    TUNGETVNETHDRSZ                  = 0x800454d7
    TUNSETDEBUG                      = 0x400454c9
    TUNSETGROUP                      = 0x400454ce
    TUNSETIFF                        = 0x400454ca
    TUNSETLINK                       = 0x400454cd
    TUNSETNOCSUM                     = 0x400454c8
    TUNSETOFFLOAD                    = 0x400454d0
    TUNSETOWNER                      = 0x400454cc
    TUNSETPERSIST                    = 0x400454cb
    TUNSETSNDBUF                     = 0x400454d4
    TUNSETTXFILTER                   = 0x400454d1
    TUNSETVNETHDRSZ                  = 0x400454d8
    WALL                             = 0x40000000
    WCLONE                           = 0x80000000
    WCONTINUED                       = 0x8
    WEXITED                          = 0x4
    WNOHANG                          = 0x1
    WNOTHREAD                        = 0x20000000
    WNOWAIT                          = 0x1000000
    WORDSIZE                         = 0x40
    WSTOPPED                         = 0x2
    WUNTRACED                        = 0x2
)</pre>
				
			
				<pre>const (
    E2BIG           = Errno(0x7)
    EACCES          = Errno(0xd)
    EADDRINUSE      = Errno(0x62)
    EADDRNOTAVAIL   = Errno(0x63)
    EADV            = Errno(0x44)
    EAFNOSUPPORT    = Errno(0x61)
    EAGAIN          = Errno(0xb)
    EALREADY        = Errno(0x72)
    EBADE           = Errno(0x34)
    EBADF           = Errno(0x9)
    EBADFD          = Errno(0x4d)
    EBADMSG         = Errno(0x4a)
    EBADR           = Errno(0x35)
    EBADRQC         = Errno(0x38)
    EBADSLT         = Errno(0x39)
    EBFONT          = Errno(0x3b)
    EBUSY           = Errno(0x10)
    ECANCELED       = Errno(0x7d)
    ECHILD          = Errno(0xa)
    ECHRNG          = Errno(0x2c)
    ECOMM           = Errno(0x46)
    ECONNABORTED    = Errno(0x67)
    ECONNREFUSED    = Errno(0x6f)
    ECONNRESET      = Errno(0x68)
    EDEADLK         = Errno(0x23)
    EDEADLOCK       = Errno(0x23)
    EDESTADDRREQ    = Errno(0x59)
    EDOM            = Errno(0x21)
    EDOTDOT         = Errno(0x49)
    EDQUOT          = Errno(0x7a)
    EEXIST          = Errno(0x11)
    EFAULT          = Errno(0xe)
    EFBIG           = Errno(0x1b)
    EHOSTDOWN       = Errno(0x70)
    EHOSTUNREACH    = Errno(0x71)
    EIDRM           = Errno(0x2b)
    EILSEQ          = Errno(0x54)
    EINPROGRESS     = Errno(0x73)
    EINTR           = Errno(0x4)
    EINVAL          = Errno(0x16)
    EIO             = Errno(0x5)
    EISCONN         = Errno(0x6a)
    EISDIR          = Errno(0x15)
    EISNAM          = Errno(0x78)
    EKEYEXPIRED     = Errno(0x7f)
    EKEYREJECTED    = Errno(0x81)
    EKEYREVOKED     = Errno(0x80)
    EL2HLT          = Errno(0x33)
    EL2NSYNC        = Errno(0x2d)
    EL3HLT          = Errno(0x2e)
    EL3RST          = Errno(0x2f)
    ELIBACC         = Errno(0x4f)
    ELIBBAD         = Errno(0x50)
    ELIBEXEC        = Errno(0x53)
    ELIBMAX         = Errno(0x52)
    ELIBSCN         = Errno(0x51)
    ELNRNG          = Errno(0x30)
    ELOOP           = Errno(0x28)
    EMEDIUMTYPE     = Errno(0x7c)
    EMFILE          = Errno(0x18)
    EMLINK          = Errno(0x1f)
    EMSGSIZE        = Errno(0x5a)
    EMULTIHOP       = Errno(0x48)
    ENAMETOOLONG    = Errno(0x24)
    ENAVAIL         = Errno(0x77)
    ENETDOWN        = Errno(0x64)
    ENETRESET       = Errno(0x66)
    ENETUNREACH     = Errno(0x65)
    ENFILE          = Errno(0x17)
    ENOANO          = Errno(0x37)
    ENOBUFS         = Errno(0x69)
    ENOCSI          = Errno(0x32)
    ENODATA         = Errno(0x3d)
    ENODEV          = Errno(0x13)
    ENOENT          = Errno(0x2)
    ENOEXEC         = Errno(0x8)
    ENOKEY          = Errno(0x7e)
    ENOLCK          = Errno(0x25)
    ENOLINK         = Errno(0x43)
    ENOMEDIUM       = Errno(0x7b)
    ENOMEM          = Errno(0xc)
    ENOMSG          = Errno(0x2a)
    ENONET          = Errno(0x40)
    ENOPKG          = Errno(0x41)
    ENOPROTOOPT     = Errno(0x5c)
    ENOSPC          = Errno(0x1c)
    ENOSR           = Errno(0x3f)
    ENOSTR          = Errno(0x3c)
    ENOSYS          = Errno(0x26)
    ENOTBLK         = Errno(0xf)
    ENOTCONN        = Errno(0x6b)
    ENOTDIR         = Errno(0x14)
    ENOTEMPTY       = Errno(0x27)
    ENOTNAM         = Errno(0x76)
    ENOTRECOVERABLE = Errno(0x83)
    ENOTSOCK        = Errno(0x58)
    ENOTSUP         = Errno(0x5f)
    ENOTTY          = Errno(0x19)
    ENOTUNIQ        = Errno(0x4c)
    ENXIO           = Errno(0x6)
    EOPNOTSUPP      = Errno(0x5f)
    EOVERFLOW       = Errno(0x4b)
    EOWNERDEAD      = Errno(0x82)
    EPERM           = Errno(0x1)
    EPFNOSUPPORT    = Errno(0x60)
    EPIPE           = Errno(0x20)
    EPROTO          = Errno(0x47)
    EPROTONOSUPPORT = Errno(0x5d)
    EPROTOTYPE      = Errno(0x5b)
    ERANGE          = Errno(0x22)
    EREMCHG         = Errno(0x4e)
    EREMOTE         = Errno(0x42)
    EREMOTEIO       = Errno(0x79)
    ERESTART        = Errno(0x55)
    ERFKILL         = Errno(0x84)
    EROFS           = Errno(0x1e)
    ESHUTDOWN       = Errno(0x6c)
    ESOCKTNOSUPPORT = Errno(0x5e)
    ESPIPE          = Errno(0x1d)
    ESRCH           = Errno(0x3)
    ESRMNT          = Errno(0x45)
    ESTALE          = Errno(0x74)
    ESTRPIPE        = Errno(0x56)
    ETIME           = Errno(0x3e)
    ETIMEDOUT       = Errno(0x6e)
    ETOOMANYREFS    = Errno(0x6d)
    ETXTBSY         = Errno(0x1a)
    EUCLEAN         = Errno(0x75)
    EUNATCH         = Errno(0x31)
    EUSERS          = Errno(0x57)
    EWOULDBLOCK     = Errno(0xb)
    EXDEV           = Errno(0x12)
    EXFULL          = Errno(0x36)
)</pre>
				<p>
Errors
</p>

			
				<pre>const (
    SIGABRT   = Signal(0x6)
    SIGALRM   = Signal(0xe)
    SIGBUS    = Signal(0x7)
    SIGCHLD   = Signal(0x11)
    SIGCLD    = Signal(0x11)
    SIGCONT   = Signal(0x12)
    SIGFPE    = Signal(0x8)
    SIGHUP    = Signal(0x1)
    SIGILL    = Signal(0x4)
    SIGINT    = Signal(0x2)
    SIGIO     = Signal(0x1d)
    SIGIOT    = Signal(0x6)
    SIGKILL   = Signal(0x9)
    SIGPIPE   = Signal(0xd)
    SIGPOLL   = Signal(0x1d)
    SIGPROF   = Signal(0x1b)
    SIGPWR    = Signal(0x1e)
    SIGQUIT   = Signal(0x3)
    SIGSEGV   = Signal(0xb)
    SIGSTKFLT = Signal(0x10)
    SIGSTOP   = Signal(0x13)
    SIGSYS    = Signal(0x1f)
    SIGTERM   = Signal(0xf)
    SIGTRAP   = Signal(0x5)
    SIGTSTP   = Signal(0x14)
    SIGTTIN   = Signal(0x15)
    SIGTTOU   = Signal(0x16)
    SIGUNUSED = Signal(0x1f)
    SIGURG    = Signal(0x17)
    SIGUSR1   = Signal(0xa)
    SIGUSR2   = Signal(0xc)
    SIGVTALRM = Signal(0x1a)
    SIGWINCH  = Signal(0x1c)
    SIGXCPU   = Signal(0x18)
    SIGXFSZ   = Signal(0x19)
)</pre>
				<p>
Signals
</p>

			
				<pre>const (
    SYS_READ                   = 0
    SYS_WRITE                  = 1
    SYS_OPEN                   = 2
    SYS_CLOSE                  = 3
    SYS_STAT                   = 4
    SYS_FSTAT                  = 5
    SYS_LSTAT                  = 6
    SYS_POLL                   = 7
    SYS_LSEEK                  = 8
    SYS_MMAP                   = 9
    SYS_MPROTECT               = 10
    SYS_MUNMAP                 = 11
    SYS_BRK                    = 12
    SYS_RT_SIGACTION           = 13
    SYS_RT_SIGPROCMASK         = 14
    SYS_RT_SIGRETURN           = 15
    SYS_IOCTL                  = 16
    SYS_PREAD64                = 17
    SYS_PWRITE64               = 18
    SYS_READV                  = 19
    SYS_WRITEV                 = 20
    SYS_ACCESS                 = 21
    SYS_PIPE                   = 22
    SYS_SELECT                 = 23
    SYS_SCHED_YIELD            = 24
    SYS_MREMAP                 = 25
    SYS_MSYNC                  = 26
    SYS_MINCORE                = 27
    SYS_MADVISE                = 28
    SYS_SHMGET                 = 29
    SYS_SHMAT                  = 30
    SYS_SHMCTL                 = 31
    SYS_DUP                    = 32
    SYS_DUP2                   = 33
    SYS_PAUSE                  = 34
    SYS_NANOSLEEP              = 35
    SYS_GETITIMER              = 36
    SYS_ALARM                  = 37
    SYS_SETITIMER              = 38
    SYS_GETPID                 = 39
    SYS_SENDFILE               = 40
    SYS_SOCKET                 = 41
    SYS_CONNECT                = 42
    SYS_ACCEPT                 = 43
    SYS_SENDTO                 = 44
    SYS_RECVFROM               = 45
    SYS_SENDMSG                = 46
    SYS_RECVMSG                = 47
    SYS_SHUTDOWN               = 48
    SYS_BIND                   = 49
    SYS_LISTEN                 = 50
    SYS_GETSOCKNAME            = 51
    SYS_GETPEERNAME            = 52
    SYS_SOCKETPAIR             = 53
    SYS_SETSOCKOPT             = 54
    SYS_GETSOCKOPT             = 55
    SYS_CLONE                  = 56
    SYS_FORK                   = 57
    SYS_VFORK                  = 58
    SYS_EXECVE                 = 59
    SYS_EXIT                   = 60
    SYS_WAIT4                  = 61
    SYS_KILL                   = 62
    SYS_UNAME                  = 63
    SYS_SEMGET                 = 64
    SYS_SEMOP                  = 65
    SYS_SEMCTL                 = 66
    SYS_SHMDT                  = 67
    SYS_MSGGET                 = 68
    SYS_MSGSND                 = 69
    SYS_MSGRCV                 = 70
    SYS_MSGCTL                 = 71
    SYS_FCNTL                  = 72
    SYS_FLOCK                  = 73
    SYS_FSYNC                  = 74
    SYS_FDATASYNC              = 75
    SYS_TRUNCATE               = 76
    SYS_FTRUNCATE              = 77
    SYS_GETDENTS               = 78
    SYS_GETCWD                 = 79
    SYS_CHDIR                  = 80
    SYS_FCHDIR                 = 81
    SYS_RENAME                 = 82
    SYS_MKDIR                  = 83
    SYS_RMDIR                  = 84
    SYS_CREAT                  = 85
    SYS_LINK                   = 86
    SYS_UNLINK                 = 87
    SYS_SYMLINK                = 88
    SYS_READLINK               = 89
    SYS_CHMOD                  = 90
    SYS_FCHMOD                 = 91
    SYS_CHOWN                  = 92
    SYS_FCHOWN                 = 93
    SYS_LCHOWN                 = 94
    SYS_UMASK                  = 95
    SYS_GETTIMEOFDAY           = 96
    SYS_GETRLIMIT              = 97
    SYS_GETRUSAGE              = 98
    SYS_SYSINFO                = 99
    SYS_TIMES                  = 100
    SYS_PTRACE                 = 101
    SYS_GETUID                 = 102
    SYS_SYSLOG                 = 103
    SYS_GETGID                 = 104
    SYS_SETUID                 = 105
    SYS_SETGID                 = 106
    SYS_GETEUID                = 107
    SYS_GETEGID                = 108
    SYS_SETPGID                = 109
    SYS_GETPPID                = 110
    SYS_GETPGRP                = 111
    SYS_SETSID                 = 112
    SYS_SETREUID               = 113
    SYS_SETREGID               = 114
    SYS_GETGROUPS              = 115
    SYS_SETGROUPS              = 116
    SYS_SETRESUID              = 117
    SYS_GETRESUID              = 118
    SYS_SETRESGID              = 119
    SYS_GETRESGID              = 120
    SYS_GETPGID                = 121
    SYS_SETFSUID               = 122
    SYS_SETFSGID               = 123
    SYS_GETSID                 = 124
    SYS_CAPGET                 = 125
    SYS_CAPSET                 = 126
    SYS_RT_SIGPENDING          = 127
    SYS_RT_SIGTIMEDWAIT        = 128
    SYS_RT_SIGQUEUEINFO        = 129
    SYS_RT_SIGSUSPEND          = 130
    SYS_SIGALTSTACK            = 131
    SYS_UTIME                  = 132
    SYS_MKNOD                  = 133
    SYS_USELIB                 = 134
    SYS_PERSONALITY            = 135
    SYS_USTAT                  = 136
    SYS_STATFS                 = 137
    SYS_FSTATFS                = 138
    SYS_SYSFS                  = 139
    SYS_GETPRIORITY            = 140
    SYS_SETPRIORITY            = 141
    SYS_SCHED_SETPARAM         = 142
    SYS_SCHED_GETPARAM         = 143
    SYS_SCHED_SETSCHEDULER     = 144
    SYS_SCHED_GETSCHEDULER     = 145
    SYS_SCHED_GET_PRIORITY_MAX = 146
    SYS_SCHED_GET_PRIORITY_MIN = 147
    SYS_SCHED_RR_GET_INTERVAL  = 148
    SYS_MLOCK                  = 149
    SYS_MUNLOCK                = 150
    SYS_MLOCKALL               = 151
    SYS_MUNLOCKALL             = 152
    SYS_VHANGUP                = 153
    SYS_MODIFY_LDT             = 154
    SYS_PIVOT_ROOT             = 155
    SYS__SYSCTL                = 156
    SYS_PRCTL                  = 157
    SYS_ARCH_PRCTL             = 158
    SYS_ADJTIMEX               = 159
    SYS_SETRLIMIT              = 160
    SYS_CHROOT                 = 161
    SYS_SYNC                   = 162
    SYS_ACCT                   = 163
    SYS_SETTIMEOFDAY           = 164
    SYS_MOUNT                  = 165
    SYS_UMOUNT2                = 166
    SYS_SWAPON                 = 167
    SYS_SWAPOFF                = 168
    SYS_REBOOT                 = 169
    SYS_SETHOSTNAME            = 170
    SYS_SETDOMAINNAME          = 171
    SYS_IOPL                   = 172
    SYS_IOPERM                 = 173
    SYS_CREATE_MODULE          = 174
    SYS_INIT_MODULE            = 175
    SYS_DELETE_MODULE          = 176
    SYS_GET_KERNEL_SYMS        = 177
    SYS_QUERY_MODULE           = 178
    SYS_QUOTACTL               = 179
    SYS_NFSSERVCTL             = 180
    SYS_GETPMSG                = 181
    SYS_PUTPMSG                = 182
    SYS_AFS_SYSCALL            = 183
    SYS_TUXCALL                = 184
    SYS_SECURITY               = 185
    SYS_GETTID                 = 186
    SYS_READAHEAD              = 187
    SYS_SETXATTR               = 188
    SYS_LSETXATTR              = 189
    SYS_FSETXATTR              = 190
    SYS_GETXATTR               = 191
    SYS_LGETXATTR              = 192
    SYS_FGETXATTR              = 193
    SYS_LISTXATTR              = 194
    SYS_LLISTXATTR             = 195
    SYS_FLISTXATTR             = 196
    SYS_REMOVEXATTR            = 197
    SYS_LREMOVEXATTR           = 198
    SYS_FREMOVEXATTR           = 199
    SYS_TKILL                  = 200
    SYS_TIME                   = 201
    SYS_FUTEX                  = 202
    SYS_SCHED_SETAFFINITY      = 203
    SYS_SCHED_GETAFFINITY      = 204
    SYS_SET_THREAD_AREA        = 205
    SYS_IO_SETUP               = 206
    SYS_IO_DESTROY             = 207
    SYS_IO_GETEVENTS           = 208
    SYS_IO_SUBMIT              = 209
    SYS_IO_CANCEL              = 210
    SYS_GET_THREAD_AREA        = 211
    SYS_LOOKUP_DCOOKIE         = 212
    SYS_EPOLL_CREATE           = 213
    SYS_EPOLL_CTL_OLD          = 214
    SYS_EPOLL_WAIT_OLD         = 215
    SYS_REMAP_FILE_PAGES       = 216
    SYS_GETDENTS64             = 217
    SYS_SET_TID_ADDRESS        = 218
    SYS_RESTART_SYSCALL        = 219
    SYS_SEMTIMEDOP             = 220
    SYS_FADVISE64              = 221
    SYS_TIMER_CREATE           = 222
    SYS_TIMER_SETTIME          = 223
    SYS_TIMER_GETTIME          = 224
    SYS_TIMER_GETOVERRUN       = 225
    SYS_TIMER_DELETE           = 226
    SYS_CLOCK_SETTIME          = 227
    SYS_CLOCK_GETTIME          = 228
    SYS_CLOCK_GETRES           = 229
    SYS_CLOCK_NANOSLEEP        = 230
    SYS_EXIT_GROUP             = 231
    SYS_EPOLL_WAIT             = 232
    SYS_EPOLL_CTL              = 233
    SYS_TGKILL                 = 234
    SYS_UTIMES                 = 235
    SYS_VSERVER                = 236
    SYS_MBIND                  = 237
    SYS_SET_MEMPOLICY          = 238
    SYS_GET_MEMPOLICY          = 239
    SYS_MQ_OPEN                = 240
    SYS_MQ_UNLINK              = 241
    SYS_MQ_TIMEDSEND           = 242
    SYS_MQ_TIMEDRECEIVE        = 243
    SYS_MQ_NOTIFY              = 244
    SYS_MQ_GETSETATTR          = 245
    SYS_KEXEC_LOAD             = 246
    SYS_WAITID                 = 247
    SYS_ADD_KEY                = 248
    SYS_REQUEST_KEY            = 249
    SYS_KEYCTL                 = 250
    SYS_IOPRIO_SET             = 251
    SYS_IOPRIO_GET             = 252
    SYS_INOTIFY_INIT           = 253
    SYS_INOTIFY_ADD_WATCH      = 254
    SYS_INOTIFY_RM_WATCH       = 255
    SYS_MIGRATE_PAGES          = 256
    SYS_OPENAT                 = 257
    SYS_MKDIRAT                = 258
    SYS_MKNODAT                = 259
    SYS_FCHOWNAT               = 260
    SYS_FUTIMESAT              = 261
    SYS_NEWFSTATAT             = 262
    SYS_UNLINKAT               = 263
    SYS_RENAMEAT               = 264
    SYS_LINKAT                 = 265
    SYS_SYMLINKAT              = 266
    SYS_READLINKAT             = 267
    SYS_FCHMODAT               = 268
    SYS_FACCESSAT              = 269
    SYS_PSELECT6               = 270
    SYS_PPOLL                  = 271
    SYS_UNSHARE                = 272
    SYS_SET_ROBUST_LIST        = 273
    SYS_GET_ROBUST_LIST        = 274
    SYS_SPLICE                 = 275
    SYS_TEE                    = 276
    SYS_SYNC_FILE_RANGE        = 277
    SYS_VMSPLICE               = 278
    SYS_MOVE_PAGES             = 279
    SYS_UTIMENSAT              = 280
    SYS_EPOLL_PWAIT            = 281
    SYS_SIGNALFD               = 282
    SYS_TIMERFD_CREATE         = 283
    SYS_EVENTFD                = 284
    SYS_FALLOCATE              = 285
    SYS_TIMERFD_SETTIME        = 286
    SYS_TIMERFD_GETTIME        = 287
    SYS_ACCEPT4                = 288
    SYS_SIGNALFD4              = 289
    SYS_EVENTFD2               = 290
    SYS_EPOLL_CREATE1          = 291
    SYS_DUP3                   = 292
    SYS_PIPE2                  = 293
    SYS_INOTIFY_INIT1          = 294
    SYS_PREADV                 = 295
    SYS_PWRITEV                = 296
    SYS_RT_TGSIGQUEUEINFO      = 297
    SYS_PERF_EVENT_OPEN        = 298
    SYS_RECVMMSG               = 299
    SYS_FANOTIFY_INIT          = 300
    SYS_FANOTIFY_MARK          = 301
    SYS_PRLIMIT64              = 302
)</pre>
				
			
				<pre>const (
    SizeofSockaddrInet4     = 0x10
    SizeofSockaddrInet6     = 0x1c
    SizeofSockaddrAny       = 0x70
    SizeofSockaddrUnix      = 0x6e
    SizeofSockaddrLinklayer = 0x14
    SizeofSockaddrNetlink   = 0xc
    SizeofLinger            = 0x8
    SizeofIPMreq            = 0x8
    SizeofIPMreqn           = 0xc
    SizeofIPv6Mreq          = 0x14
    SizeofMsghdr            = 0x38
    SizeofCmsghdr           = 0x10
    SizeofInet4Pktinfo      = 0xc
    SizeofInet6Pktinfo      = 0x14
    SizeofUcred             = 0xc
)</pre>
				
			
				<pre>const (
    IFA_UNSPEC        = 0x0
    IFA_ADDRESS       = 0x1
    IFA_LOCAL         = 0x2
    IFA_LABEL         = 0x3
    IFA_BROADCAST     = 0x4
    IFA_ANYCAST       = 0x5
    IFA_CACHEINFO     = 0x6
    IFA_MULTICAST     = 0x7
    IFLA_UNSPEC       = 0x0
    IFLA_ADDRESS      = 0x1
    IFLA_BROADCAST    = 0x2
    IFLA_IFNAME       = 0x3
    IFLA_MTU          = 0x4
    IFLA_LINK         = 0x5
    IFLA_QDISC        = 0x6
    IFLA_STATS        = 0x7
    IFLA_COST         = 0x8
    IFLA_PRIORITY     = 0x9
    IFLA_MASTER       = 0xa
    IFLA_WIRELESS     = 0xb
    IFLA_PROTINFO     = 0xc
    IFLA_TXQLEN       = 0xd
    IFLA_MAP          = 0xe
    IFLA_WEIGHT       = 0xf
    IFLA_OPERSTATE    = 0x10
    IFLA_LINKMODE     = 0x11
    IFLA_LINKINFO     = 0x12
    IFLA_NET_NS_PID   = 0x13
    IFLA_IFALIAS      = 0x14
    IFLA_MAX          = 0x1c
    RT_SCOPE_UNIVERSE = 0x0
    RT_SCOPE_SITE     = 0xc8
    RT_SCOPE_LINK     = 0xfd
    RT_SCOPE_HOST     = 0xfe
    RT_SCOPE_NOWHERE  = 0xff
    RT_TABLE_UNSPEC   = 0x0
    RT_TABLE_COMPAT   = 0xfc
    RT_TABLE_DEFAULT  = 0xfd
    RT_TABLE_MAIN     = 0xfe
    RT_TABLE_LOCAL    = 0xff
    RT_TABLE_MAX      = 0xffffffff
    RTA_UNSPEC        = 0x0
    RTA_DST           = 0x1
    RTA_SRC           = 0x2
    RTA_IIF           = 0x3
    RTA_OIF           = 0x4
    RTA_GATEWAY       = 0x5
    RTA_PRIORITY      = 0x6
    RTA_PREFSRC       = 0x7
    RTA_METRICS       = 0x8
    RTA_MULTIPATH     = 0x9
    RTA_FLOW          = 0xb
    RTA_CACHEINFO     = 0xc
    RTA_TABLE         = 0xf
    RTN_UNSPEC        = 0x0
    RTN_UNICAST       = 0x1
    RTN_LOCAL         = 0x2
    RTN_BROADCAST     = 0x3
    RTN_ANYCAST       = 0x4
    RTN_MULTICAST     = 0x5
    RTN_BLACKHOLE     = 0x6
    RTN_UNREACHABLE   = 0x7
    RTN_PROHIBIT      = 0x8
    RTN_THROW         = 0x9
    RTN_NAT           = 0xa
    RTN_XRESOLVE      = 0xb
    SizeofNlMsghdr    = 0x10
    SizeofNlMsgerr    = 0x14
    SizeofRtGenmsg    = 0x1
    SizeofNlAttr      = 0x4
    SizeofRtAttr      = 0x4
    SizeofIfInfomsg   = 0x10
    SizeofIfAddrmsg   = 0x8
    SizeofRtMsg       = 0xc
    SizeofRtNexthop   = 0x8
)</pre>
				
			
				<pre>const (
    SizeofSockFilter = 0x8
    SizeofSockFprog  = 0x10
)</pre>
				
			
				<pre>const (
    VINTR    = 0x0
    VQUIT    = 0x1
    VERASE   = 0x2
    VKILL    = 0x3
    VEOF     = 0x4
    VTIME    = 0x5
    VMIN     = 0x6
    VSWTC    = 0x7
    VSTART   = 0x8
    VSTOP    = 0x9
    VSUSP    = 0xa
    VEOL     = 0xb
    VREPRINT = 0xc
    VDISCARD = 0xd
    VWERASE  = 0xe
    VLNEXT   = 0xf
    VEOL2    = 0x10
    IGNBRK   = 0x1
    BRKINT   = 0x2
    IGNPAR   = 0x4
    PARMRK   = 0x8
    INPCK    = 0x10
    ISTRIP   = 0x20
    INLCR    = 0x40
    IGNCR    = 0x80
    ICRNL    = 0x100
    IUCLC    = 0x200
    IXON     = 0x400
    IXANY    = 0x800
    IXOFF    = 0x1000
    IMAXBEL  = 0x2000
    IUTF8    = 0x4000
    OPOST    = 0x1
    OLCUC    = 0x2
    ONLCR    = 0x4
    OCRNL    = 0x8
    ONOCR    = 0x10
    ONLRET   = 0x20
    OFILL    = 0x40
    OFDEL    = 0x80
    B0       = 0x0
    B50      = 0x1
    B75      = 0x2
    B110     = 0x3
    B134     = 0x4
    B150     = 0x5
    B200     = 0x6
    B300     = 0x7
    B600     = 0x8
    B1200    = 0x9
    B1800    = 0xa
    B2400    = 0xb
    B4800    = 0xc
    B9600    = 0xd
    B19200   = 0xe
    B38400   = 0xf
    CSIZE    = 0x30
    CS5      = 0x0
    CS6      = 0x10
    CS7      = 0x20
    CS8      = 0x30
    CSTOPB   = 0x40
    CREAD    = 0x80
    PARENB   = 0x100
    PARODD   = 0x200
    HUPCL    = 0x400
    CLOCAL   = 0x800
    B57600   = 0x1001
    B115200  = 0x1002
    B230400  = 0x1003
    B460800  = 0x1004
    B500000  = 0x1005
    B576000  = 0x1006
    B921600  = 0x1007
    B1000000 = 0x1008
    B1152000 = 0x1009
    B1500000 = 0x100a
    B2000000 = 0x100b
    B2500000 = 0x100c
    B3000000 = 0x100d
    B3500000 = 0x100e
    B4000000 = 0x100f
    ISIG     = 0x1
    ICANON   = 0x2
    XCASE    = 0x4
    ECHO     = 0x8
    ECHOE    = 0x10
    ECHOK    = 0x20
    ECHONL   = 0x40
    NOFLSH   = 0x80
    TOSTOP   = 0x100
    ECHOCTL  = 0x200
    ECHOPRT  = 0x400
    ECHOKE   = 0x800
    FLUSHO   = 0x1000
    PENDIN   = 0x4000
    IEXTEN   = 0x8000
    TCGETS   = 0x5401
    TCSETS   = 0x5402
)</pre>
				
			
				<pre>const ImplementsGetwd = true</pre>
				
			
				<pre>const (
    PathMax = 0x1000
)</pre>
				
			
				<pre>const SizeofInotifyEvent = 0x10</pre>
				
			
		
		
			<h2 id="variables">Variables</h2>
			
				<pre>var (
    Stdin  = 0
    Stdout = 1
    Stderr = 2
)</pre>
				
			
				<pre>var ForkLock sync.RWMutex</pre>
				
			
				<pre>var SocketDisableIPv6 bool</pre>
				<p>
For testing: clients can set this flag to force
creation of IPv6 sockets to return EAFNOSUPPORT.
</p>

			
		
		
			
			
			<h2 id="Accept">func <a href="src/pkg/syscall/syscall_linux.htm#L370">Accept</a></h2>
			<pre>func Accept(fd int) (nfd int, sa Sockaddr, err error)</pre>
			
			
		
			
			
			<h2 id="Access">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L110">Access</a></h2>
			<pre>func Access(path string, mode uint32) (err error)</pre>
			
			
		
			
			
			<h2 id="Acct">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L120">Acct</a></h2>
			<pre>func Acct(path string) (err error)</pre>
			
			
		
			
			
			<h2 id="Adjtimex">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L130">Adjtimex</a></h2>
			<pre>func Adjtimex(buf *Timex) (state int, err error)</pre>
			
			
		
			
			
			<h2 id="AttachLsf">func <a href="src/pkg/syscall/lsf_linux.htm#L58">AttachLsf</a></h2>
			<pre>func AttachLsf(fd int, i []SockFilter) error</pre>
			
			
		
			
			
			<h2 id="Bind">func <a href="src/pkg/syscall/syscall_linux.htm#L403">Bind</a></h2>
			<pre>func Bind(fd int, sa Sockaddr) (err error)</pre>
			
			
		
			
			
			<h2 id="BindToDevice">func <a href="src/pkg/syscall/syscall_linux.htm#L588">BindToDevice</a></h2>
			<pre>func BindToDevice(fd int, device string) (err error)</pre>
			<p>
BindToDevice binds the socket associated with fd to device.
</p>

			
		
			
			
			<h2 id="Chdir">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L141">Chdir</a></h2>
			<pre>func Chdir(path string) (err error)</pre>
			
			
		
			
			
			<h2 id="Chmod">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L151">Chmod</a></h2>
			<pre>func Chmod(path string, mode uint32) (err error)</pre>
			
			
		
			
			
			<h2 id="Chown">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1028">Chown</a></h2>
			<pre>func Chown(path string, uid int, gid int) (err error)</pre>
			
			
		
			
			
			<h2 id="Chroot">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L161">Chroot</a></h2>
			<pre>func Chroot(path string) (err error)</pre>
			
			
		
			
			
			<h2 id="Clearenv">func <a href="src/pkg/syscall/env_unix.htm#L81">Clearenv</a></h2>
			<pre>func Clearenv()</pre>
			
			
		
			
			
			<h2 id="Close">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L171">Close</a></h2>
			<pre>func Close(fd int) (err error)</pre>
			
			
		
			
			
			<h2 id="CloseOnExec">func <a href="src/pkg/syscall/exec_unix.htm#L67">CloseOnExec</a></h2>
			<pre>func CloseOnExec(fd int)</pre>
			
			
		
			
			
			<h2 id="CmsgLen">func <a href="src/pkg/syscall/sockcmsg_unix.htm#L21">CmsgLen</a></h2>
			<pre>func CmsgLen(datalen int) int</pre>
			<p>
CmsgLen returns the value to store in the Len field of the Cmsghdr
structure, taking into account any necessary alignment.
</p>

			
		
			
			
			<h2 id="CmsgSpace">func <a href="src/pkg/syscall/sockcmsg_unix.htm#L27">CmsgSpace</a></h2>
			<pre>func CmsgSpace(datalen int) int</pre>
			<p>
CmsgSpace returns the number of bytes an ancillary element with
payload of the passed data length occupies.
</p>

			
		
			
			
			<h2 id="Connect">func <a href="src/pkg/syscall/syscall_linux.htm#L411">Connect</a></h2>
			<pre>func Connect(fd int, sa Sockaddr) (err error)</pre>
			
			
		
			
			
			<h2 id="Creat">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L181">Creat</a></h2>
			<pre>func Creat(path string, mode uint32) (fd int, err error)</pre>
			
			
		
			
			
			<h2 id="DetachLsf">func <a href="src/pkg/syscall/lsf_linux.htm#L65">DetachLsf</a></h2>
			<pre>func DetachLsf(fd int) error</pre>
			
			
		
			
			
			<h2 id="Dup">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L192">Dup</a></h2>
			<pre>func Dup(oldfd int) (fd int, err error)</pre>
			
			
		
			
			
			<h2 id="Dup2">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L203">Dup2</a></h2>
			<pre>func Dup2(oldfd int, newfd int) (err error)</pre>
			
			
		
			
			
			<h2 id="Environ">func <a href="src/pkg/syscall/env_unix.htm#L92">Environ</a></h2>
			<pre>func Environ() []string</pre>
			
			
		
			
			
			<h2 id="EpollCreate">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L213">EpollCreate</a></h2>
			<pre>func EpollCreate(size int) (fd int, err error)</pre>
			
			
		
			
			
			<h2 id="EpollCreate1">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L224">EpollCreate1</a></h2>
			<pre>func EpollCreate1(flag int) (fd int, err error)</pre>
			
			
		
			
			
			<h2 id="EpollCtl">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L235">EpollCtl</a></h2>
			<pre>func EpollCtl(epfd int, op int, fd int, event *EpollEvent) (err error)</pre>
			
			
		
			
			
			<h2 id="EpollWait">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L245">EpollWait</a></h2>
			<pre>func EpollWait(epfd int, events []EpollEvent, msec int) (n int, err error)</pre>
			
			
		
			
			
			<h2 id="Exec">func <a href="src/pkg/syscall/exec_unix.htm#L207">Exec</a></h2>
			<pre>func Exec(argv0 string, argv []string, envv []string) (err error)</pre>
			<p>
Ordinary exec.
</p>

			
		
			
			
			<h2 id="Exit">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L262">Exit</a></h2>
			<pre>func Exit(code int)</pre>
			
			
		
			
			
			<h2 id="Faccessat">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L269">Faccessat</a></h2>
			<pre>func Faccessat(dirfd int, path string, mode uint32, flags int) (err error)</pre>
			
			
		
			
			
			<h2 id="Fallocate">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L279">Fallocate</a></h2>
			<pre>func Fallocate(fd int, mode uint32, off int64, len int64) (err error)</pre>
			
			
		
			
			
			<h2 id="Fchdir">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L289">Fchdir</a></h2>
			<pre>func Fchdir(fd int) (err error)</pre>
			
			
		
			
			
			<h2 id="Fchmod">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L299">Fchmod</a></h2>
			<pre>func Fchmod(fd int, mode uint32) (err error)</pre>
			
			
		
			
			
			<h2 id="Fchmodat">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L309">Fchmodat</a></h2>
			<pre>func Fchmodat(dirfd int, path string, mode uint32, flags int) (err error)</pre>
			
			
		
			
			
			<h2 id="Fchown">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1038">Fchown</a></h2>
			<pre>func Fchown(fd int, uid int, gid int) (err error)</pre>
			
			
		
			
			
			<h2 id="Fchownat">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L319">Fchownat</a></h2>
			<pre>func Fchownat(dirfd int, path string, uid int, gid int, flags int) (err error)</pre>
			
			
		
			
			
			<h2 id="Fdatasync">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L340">Fdatasync</a></h2>
			<pre>func Fdatasync(fd int) (err error)</pre>
			
			
		
			
			
			<h2 id="Flock">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L350">Flock</a></h2>
			<pre>func Flock(fd int, how int) (err error)</pre>
			
			
		
			
			
			<h2 id="ForkExec">func <a href="src/pkg/syscall/exec_unix.htm#L196">ForkExec</a></h2>
			<pre>func ForkExec(argv0 string, argv []string, attr *ProcAttr) (pid int, err error)</pre>
			<p>
Combination of fork and exec, careful to be thread safe.
</p>

			
		
			
			
			<h2 id="Fstat">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1048">Fstat</a></h2>
			<pre>func Fstat(fd int, stat *Stat_t) (err error)</pre>
			
			
		
			
			
			<h2 id="Fstatfs">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1058">Fstatfs</a></h2>
			<pre>func Fstatfs(fd int, buf *Statfs_t) (err error)</pre>
			
			
		
			
			
			<h2 id="Fsync">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L360">Fsync</a></h2>
			<pre>func Fsync(fd int) (err error)</pre>
			
			
		
			
			
			<h2 id="Ftruncate">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1068">Ftruncate</a></h2>
			<pre>func Ftruncate(fd int, length int64) (err error)</pre>
			
			
		
			
			
			<h2 id="Futimes">func <a href="src/pkg/syscall/syscall_linux.htm#L48">Futimes</a></h2>
			<pre>func Futimes(fd int, tv []Timeval) (err error)</pre>
			
			
		
			
			
			<h2 id="Futimesat">func <a href="src/pkg/syscall/syscall_linux.htm#L41">Futimesat</a></h2>
			<pre>func Futimesat(dirfd int, path string, tv []Timeval) (err error)</pre>
			<p>
sys	futimesat(dirfd int, path *byte, times *[2]Timeval) (err error)
</p>

			
		
			
			
			<h2 id="Getcwd">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L52">Getcwd</a></h2>
			<pre>func Getcwd(buf []byte) (n int, err error)</pre>
			
			
		
			
			
			<h2 id="Getdents">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L370">Getdents</a></h2>
			<pre>func Getdents(fd int, buf []byte) (n int, err error)</pre>
			
			
		
			
			
			<h2 id="Getegid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1078">Getegid</a></h2>
			<pre>func Getegid() (egid int)</pre>
			
			
		
			
			
			<h2 id="Getenv">func <a href="src/pkg/syscall/env_unix.htm#L37">Getenv</a></h2>
			<pre>func Getenv(key string) (value string, found bool)</pre>
			
			
		
			
			
			<h2 id="Geteuid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1086">Geteuid</a></h2>
			<pre>func Geteuid() (euid int)</pre>
			
			
		
			
			
			<h2 id="Getgid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1094">Getgid</a></h2>
			<pre>func Getgid() (gid int)</pre>
			
			
		
			
			
			<h2 id="Getgroups">func <a href="src/pkg/syscall/syscall_linux.htm#L70">Getgroups</a></h2>
			<pre>func Getgroups() (gids []int, err error)</pre>
			
			
		
			
			
			<h2 id="Getpagesize">func <a href="src/pkg/syscall/syscall_linux_amd64.htm#L46">Getpagesize</a></h2>
			<pre>func Getpagesize() int</pre>
			
			
		
			
			
			<h2 id="Getpgid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L387">Getpgid</a></h2>
			<pre>func Getpgid(pid int) (pgid int, err error)</pre>
			
			
		
			
			
			<h2 id="Getpgrp">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L398">Getpgrp</a></h2>
			<pre>func Getpgrp() (pid int)</pre>
			
			
		
			
			
			<h2 id="Getpid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L406">Getpid</a></h2>
			<pre>func Getpid() (pid int)</pre>
			
			
		
			
			
			<h2 id="Getppid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L414">Getppid</a></h2>
			<pre>func Getppid() (ppid int)</pre>
			
			
		
			
			
			<h2 id="Getrlimit">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L422">Getrlimit</a></h2>
			<pre>func Getrlimit(resource int, rlim *Rlimit) (err error)</pre>
			
			
		
			
			
			<h2 id="Getrusage">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L432">Getrusage</a></h2>
			<pre>func Getrusage(who int, rusage *Rusage) (err error)</pre>
			
			
		
			
			
			<h2 id="GetsockoptInet4Addr">func <a href="src/pkg/syscall/syscall_linux.htm#L439">GetsockoptInet4Addr</a></h2>
			<pre>func GetsockoptInet4Addr(fd, level, opt int) (value [4]byte, err error)</pre>
			
			
		
			
			
			<h2 id="GetsockoptInt">func <a href="src/pkg/syscall/syscall_linux.htm#L432">GetsockoptInt</a></h2>
			<pre>func GetsockoptInt(fd, level, opt int) (value int, err error)</pre>
			
			
		
			
			
			<h2 id="Gettid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L442">Gettid</a></h2>
			<pre>func Gettid() (tid int)</pre>
			
			
		
			
			
			<h2 id="Gettimeofday">func <a href="src/pkg/syscall/syscall_linux_amd64.htm#L48">Gettimeofday</a></h2>
			<pre>func Gettimeofday(tv *Timeval) (err error)</pre>
			
			
		
			
			
			<h2 id="Getuid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1102">Getuid</a></h2>
			<pre>func Getuid() (uid int)</pre>
			
			
		
			
			
			<h2 id="Getwd">func <a href="src/pkg/syscall/syscall_linux.htm#L57">Getwd</a></h2>
			<pre>func Getwd() (wd string, err error)</pre>
			<p>
sys	Getcwd(buf []byte) (n int, err error)
</p>

			
		
			
			
			<h2 id="InotifyAddWatch">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L450">InotifyAddWatch</a></h2>
			<pre>func InotifyAddWatch(fd int, pathname string, mask uint32) (watchdesc int, err error)</pre>
			
			
		
			
			
			<h2 id="InotifyInit">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L461">InotifyInit</a></h2>
			<pre>func InotifyInit() (fd int, err error)</pre>
			
			
		
			
			
			<h2 id="InotifyInit1">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L472">InotifyInit1</a></h2>
			<pre>func InotifyInit1(flags int) (fd int, err error)</pre>
			
			
		
			
			
			<h2 id="InotifyRmWatch">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L483">InotifyRmWatch</a></h2>
			<pre>func InotifyRmWatch(fd int, watchdesc uint32) (success int, err error)</pre>
			
			
		
			
			
			<h2 id="Ioperm">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1110">Ioperm</a></h2>
			<pre>func Ioperm(from int, num int, on int) (err error)</pre>
			
			
		
			
			
			<h2 id="Iopl">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1120">Iopl</a></h2>
			<pre>func Iopl(level int) (err error)</pre>
			
			
		
			
			
			<h2 id="Kill">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L494">Kill</a></h2>
			<pre>func Kill(pid int, sig Signal) (err error)</pre>
			
			
		
			
			
			<h2 id="Klogctl">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L504">Klogctl</a></h2>
			<pre>func Klogctl(typ int, buf []byte) (n int, err error)</pre>
			
			
		
			
			
			<h2 id="Lchown">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1130">Lchown</a></h2>
			<pre>func Lchown(path string, uid int, gid int) (err error)</pre>
			
			
		
			
			
			<h2 id="Link">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L521">Link</a></h2>
			<pre>func Link(oldpath string, newpath string) (err error)</pre>
			
			
		
			
			
			<h2 id="Listen">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1140">Listen</a></h2>
			<pre>func Listen(s int, n int) (err error)</pre>
			
			
		
			
			
			<h2 id="LsfSocket">func <a href="src/pkg/syscall/lsf_linux.htm#L11">LsfSocket</a></h2>
			<pre>func LsfSocket(ifindex, proto int) (int, error)</pre>
			
			
		
			
			
			<h2 id="Lstat">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1150">Lstat</a></h2>
			<pre>func Lstat(path string, stat *Stat_t) (err error)</pre>
			
			
		
			
			
			<h2 id="Madvise">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L944">Madvise</a></h2>
			<pre>func Madvise(b []byte, advice int) (err error)</pre>
			
			
		
			
			
			<h2 id="Mkdir">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L531">Mkdir</a></h2>
			<pre>func Mkdir(path string, mode uint32) (err error)</pre>
			
			
		
			
			
			<h2 id="Mkdirat">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L541">Mkdirat</a></h2>
			<pre>func Mkdirat(dirfd int, path string, mode uint32) (err error)</pre>
			
			
		
			
			
			<h2 id="Mkfifo">func <a href="src/pkg/syscall/syscall_linux.htm#L175">Mkfifo</a></h2>
			<pre>func Mkfifo(path string, mode uint32) (err error)</pre>
			
			
		
			
			
			<h2 id="Mknod">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L551">Mknod</a></h2>
			<pre>func Mknod(path string, mode uint32, dev int) (err error)</pre>
			
			
		
			
			
			<h2 id="Mknodat">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L561">Mknodat</a></h2>
			<pre>func Mknodat(dirfd int, path string, mode uint32, dev int) (err error)</pre>
			
			
		
			
			
			<h2 id="Mlock">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L976">Mlock</a></h2>
			<pre>func Mlock(b []byte) (err error)</pre>
			
			
		
			
			
			<h2 id="Mlockall">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1008">Mlockall</a></h2>
			<pre>func Mlockall(flags int) (err error)</pre>
			
			
		
			
			
			<h2 id="Mmap">func <a href="src/pkg/syscall/syscall_linux.htm#L873">Mmap</a></h2>
			<pre>func Mmap(fd int, offset int64, length int, prot int, flags int) (data []byte, err error)</pre>
			
			
		
			
			
			<h2 id="Mount">func <a href="src/pkg/syscall/syscall_linux.htm#L770">Mount</a></h2>
			<pre>func Mount(source string, target string, fstype string, flags uintptr, data string) (err error)</pre>
			<p>
sys	mount(source string, target string, fstype string, flags uintptr, data *byte) (err error)
</p>

			
		
			
			
			<h2 id="Mprotect">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L960">Mprotect</a></h2>
			<pre>func Mprotect(b []byte, prot int) (err error)</pre>
			
			
		
			
			
			<h2 id="Munlock">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L992">Munlock</a></h2>
			<pre>func Munlock(b []byte) (err error)</pre>
			
			
		
			
			
			<h2 id="Munlockall">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1018">Munlockall</a></h2>
			<pre>func Munlockall() (err error)</pre>
			
			
		
			
			
			<h2 id="Munmap">func <a href="src/pkg/syscall/syscall_linux.htm#L877">Munmap</a></h2>
			<pre>func Munmap(b []byte) (err error)</pre>
			
			
		
			
			
			<h2 id="Nanosleep">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L571">Nanosleep</a></h2>
			<pre>func Nanosleep(time *Timespec, leftover *Timespec) (err error)</pre>
			
			
		
			
			
			<h2 id="NetlinkRIB">func <a href="src/pkg/syscall/netlink_linux.htm#L56">NetlinkRIB</a></h2>
			<pre>func NetlinkRIB(proto, family int) ([]byte, error)</pre>
			<p>
NetlinkRIB returns routing information base, as known as RIB,
which consists of network facility information, states and
parameters.
</p>

			
		
			
			
			<h2 id="Open">func <a href="src/pkg/syscall/syscall_linux.htm#L11">Open</a></h2>
			<pre>func Open(path string, mode int, perm uint32) (fd int, err error)</pre>
			<p>
sys	open(path string, mode int, perm uint32) (fd int, err error)
</p>

			
		
			
			
			<h2 id="Openat">func <a href="src/pkg/syscall/syscall_linux.htm#L16">Openat</a></h2>
			<pre>func Openat(dirfd int, path string, flags int, mode uint32) (fd int, err error)</pre>
			<p>
sys	openat(dirfd int, path string, flags int, mode uint32) (fd int, err error)
</p>

			
		
			
			
			<h2 id="ParseDirent">func <a href="src/pkg/syscall/syscall_linux.htm#L748">ParseDirent</a></h2>
			<pre>func ParseDirent(buf []byte, max int, names []string) (consumed int, count int, newnames []string)</pre>
			
			
		
			
			
			<h2 id="ParseNetlinkMessage">func <a href="src/pkg/syscall/netlink_linux.htm#L133">ParseNetlinkMessage</a></h2>
			<pre>func ParseNetlinkMessage(buf []byte) ([]NetlinkMessage, error)</pre>
			<p>
ParseNetlinkMessage parses buf as netlink messages and returns
the slice containing the NetlinkMessage structs.
</p>

			
		
			
			
			<h2 id="ParseNetlinkRouteAttr">func <a href="src/pkg/syscall/netlink_linux.htm#L174">ParseNetlinkRouteAttr</a></h2>
			<pre>func ParseNetlinkRouteAttr(msg *NetlinkMessage) ([]NetlinkRouteAttr, error)</pre>
			<p>
ParseNetlinkRouteAttr parses msg&#39;s payload as netlink route
attributes and returns the slice containing the NetlinkRouteAttr
structs.
</p>

			
		
			
			
			<h2 id="ParseSocketControlMessage">func <a href="src/pkg/syscall/sockcmsg_unix.htm#L40">ParseSocketControlMessage</a></h2>
			<pre>func ParseSocketControlMessage(buf []byte) ([]SocketControlMessage, error)</pre>
			
			
		
			
			
			<h2 id="ParseUnixRights">func <a href="src/pkg/syscall/sockcmsg_unix.htm#L92">ParseUnixRights</a></h2>
			<pre>func ParseUnixRights(msg *SocketControlMessage) ([]int, error)</pre>
			<p>
ParseUnixRights decodes a socket control message that contains an
integer array of open file descriptors from another process.
</p>

			
		
			
			
			<h2 id="Pause">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L581">Pause</a></h2>
			<pre>func Pause() (err error)</pre>
			
			
		
			
			
			<h2 id="Pipe">func <a href="src/pkg/syscall/syscall_linux.htm#L21">Pipe</a></h2>
			<pre>func Pipe(p []int) (err error)</pre>
			<p>
sysnb	pipe(p *[2]_C_int) (err error)
</p>

			
		
			
			
			<h2 id="PivotRoot">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L591">PivotRoot</a></h2>
			<pre>func PivotRoot(newroot string, putold string) (err error)</pre>
			
			
		
			
			
			<h2 id="Pread">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1160">Pread</a></h2>
			<pre>func Pread(fd int, p []byte, offset int64) (n int, err error)</pre>
			
			
		
			
			
			<h2 id="PtraceAttach">func <a href="src/pkg/syscall/syscall_linux.htm#L726">PtraceAttach</a></h2>
			<pre>func PtraceAttach(pid int) (err error)</pre>
			
			
		
			
			
			<h2 id="PtraceCont">func <a href="src/pkg/syscall/syscall_linux.htm#L720">PtraceCont</a></h2>
			<pre>func PtraceCont(pid int, signal int) (err error)</pre>
			
			
		
			
			
			<h2 id="PtraceDetach">func <a href="src/pkg/syscall/syscall_linux.htm#L728">PtraceDetach</a></h2>
			<pre>func PtraceDetach(pid int) (err error)</pre>
			
			
		
			
			
			<h2 id="PtraceGetEventMsg">func <a href="src/pkg/syscall/syscall_linux.htm#L713">PtraceGetEventMsg</a></h2>
			<pre>func PtraceGetEventMsg(pid int) (msg uint, err error)</pre>
			
			
		
			
			
			<h2 id="PtraceGetRegs">func <a href="src/pkg/syscall/syscall_linux.htm#L701">PtraceGetRegs</a></h2>
			<pre>func PtraceGetRegs(pid int, regsout *PtraceRegs) (err error)</pre>
			
			
		
			
			
			<h2 id="PtracePeekData">func <a href="src/pkg/syscall/syscall_linux.htm#L638">PtracePeekData</a></h2>
			<pre>func PtracePeekData(pid int, addr uintptr, out []byte) (count int, err error)</pre>
			
			
		
			
			
			<h2 id="PtracePeekText">func <a href="src/pkg/syscall/syscall_linux.htm#L634">PtracePeekText</a></h2>
			<pre>func PtracePeekText(pid int, addr uintptr, out []byte) (count int, err error)</pre>
			
			
		
			
			
			<h2 id="PtracePokeData">func <a href="src/pkg/syscall/syscall_linux.htm#L697">PtracePokeData</a></h2>
			<pre>func PtracePokeData(pid int, addr uintptr, data []byte) (count int, err error)</pre>
			
			
		
			
			
			<h2 id="PtracePokeText">func <a href="src/pkg/syscall/syscall_linux.htm#L693">PtracePokeText</a></h2>
			<pre>func PtracePokeText(pid int, addr uintptr, data []byte) (count int, err error)</pre>
			
			
		
			
			
			<h2 id="PtraceSetOptions">func <a href="src/pkg/syscall/syscall_linux.htm#L709">PtraceSetOptions</a></h2>
			<pre>func PtraceSetOptions(pid int, options int) (err error)</pre>
			
			
		
			
			
			<h2 id="PtraceSetRegs">func <a href="src/pkg/syscall/syscall_linux.htm#L705">PtraceSetRegs</a></h2>
			<pre>func PtraceSetRegs(pid int, regs *PtraceRegs) (err error)</pre>
			
			
		
			
			
			<h2 id="PtraceSingleStep">func <a href="src/pkg/syscall/syscall_linux.htm#L724">PtraceSingleStep</a></h2>
			<pre>func PtraceSingleStep(pid int) (err error)</pre>
			
			
		
			
			
			<h2 id="Pwrite">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1177">Pwrite</a></h2>
			<pre>func Pwrite(fd int, p []byte, offset int64) (n int, err error)</pre>
			
			
		
			
			
			<h2 id="RawSyscall">func <a href="src/pkg/syscall/syscall_unix.htm#L15">RawSyscall</a></h2>
			<pre>func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno)</pre>
			
			
		
			
			
			<h2 id="RawSyscall6">func <a href="src/pkg/syscall/syscall_unix.htm#L16">RawSyscall6</a></h2>
			<pre>func RawSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)</pre>
			
			
		
			
			
			<h2 id="Read">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L601">Read</a></h2>
			<pre>func Read(fd int, p []byte) (n int, err error)</pre>
			
			
		
			
			
			<h2 id="ReadDirent">func <a href="src/pkg/syscall/syscall_linux.htm#L744">ReadDirent</a></h2>
			<pre>func ReadDirent(fd int, buf []byte) (n int, err error)</pre>
			
			
		
			
			
			<h2 id="Readlink">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L618">Readlink</a></h2>
			<pre>func Readlink(path string, buf []byte) (n int, err error)</pre>
			
			
		
			
			
			<h2 id="Reboot">func <a href="src/pkg/syscall/syscall_linux.htm#L731">Reboot</a></h2>
			<pre>func Reboot(cmd int) (err error)</pre>
			<p>
sys	reboot(magic1 uint, magic2 uint, cmd int, arg string) (err error)
</p>

			
		
			
			
			<h2 id="Recvfrom">func <a href="src/pkg/syscall/syscall_linux.htm#L499">Recvfrom</a></h2>
			<pre>func Recvfrom(fd int, p []byte, flags int) (n int, from Sockaddr, err error)</pre>
			
			
		
			
			
			<h2 id="Recvmsg">func <a href="src/pkg/syscall/syscall_linux.htm#L517">Recvmsg</a></h2>
			<pre>func Recvmsg(fd int, p, oob []byte, flags int) (n, oobn int, recvflags int, from Sockaddr, err error)</pre>
			
			
		
			
			
			<h2 id="Rename">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L635">Rename</a></h2>
			<pre>func Rename(oldpath string, newpath string) (err error)</pre>
			
			
		
			
			
			<h2 id="Renameat">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L645">Renameat</a></h2>
			<pre>func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error)</pre>
			
			
		
			
			
			<h2 id="Rmdir">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L655">Rmdir</a></h2>
			<pre>func Rmdir(path string) (err error)</pre>
			
			
		
			
			
			<h2 id="Seek">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1194">Seek</a></h2>
			<pre>func Seek(fd int, offset int64, whence int) (off int64, err error)</pre>
			
			
		
			
			
			<h2 id="Select">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1205">Select</a></h2>
			<pre>func Select(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err error)</pre>
			
			
		
			
			
			<h2 id="Sendfile">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1216">Sendfile</a></h2>
			<pre>func Sendfile(outfd int, infd int, offset *int64, count int) (written int, err error)</pre>
			
			
		
			
			
			<h2 id="Sendmsg">func <a href="src/pkg/syscall/syscall_linux.htm#L551">Sendmsg</a></h2>
			<pre>func Sendmsg(fd int, p, oob []byte, to Sockaddr, flags int) (err error)</pre>
			
			
		
			
			
			<h2 id="Sendto">func <a href="src/pkg/syscall/syscall_linux.htm#L509">Sendto</a></h2>
			<pre>func Sendto(fd int, p []byte, flags int, to Sockaddr) (err error)</pre>
			
			
		
			
			
			<h2 id="SetLsfPromisc">func <a href="src/pkg/syscall/lsf_linux.htm#L34">SetLsfPromisc</a></h2>
			<pre>func SetLsfPromisc(name string, m bool) error</pre>
			
			
		
			
			
			<h2 id="SetNonblock">func <a href="src/pkg/syscall/exec_unix.htm#L69">SetNonblock</a></h2>
			<pre>func SetNonblock(fd int, nonblocking bool) (err error)</pre>
			
			
		
			
			
			<h2 id="Setdomainname">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L665">Setdomainname</a></h2>
			<pre>func Setdomainname(p []byte) (err error)</pre>
			
			
		
			
			
			<h2 id="Setenv">func <a href="src/pkg/syscall/env_unix.htm#L59">Setenv</a></h2>
			<pre>func Setenv(key, value string) error</pre>
			
			
		
			
			
			<h2 id="Setfsgid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1227">Setfsgid</a></h2>
			<pre>func Setfsgid(gid int) (err error)</pre>
			
			
		
			
			
			<h2 id="Setfsuid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1237">Setfsuid</a></h2>
			<pre>func Setfsuid(uid int) (err error)</pre>
			
			
		
			
			
			<h2 id="Setgid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1247">Setgid</a></h2>
			<pre>func Setgid(gid int) (err error)</pre>
			
			
		
			
			
			<h2 id="Setgroups">func <a href="src/pkg/syscall/syscall_linux.htm#L96">Setgroups</a></h2>
			<pre>func Setgroups(gids []int) (err error)</pre>
			
			
		
			
			
			<h2 id="Sethostname">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L681">Sethostname</a></h2>
			<pre>func Sethostname(p []byte) (err error)</pre>
			
			
		
			
			
			<h2 id="Setpgid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L697">Setpgid</a></h2>
			<pre>func Setpgid(pid int, pgid int) (err error)</pre>
			
			
		
			
			
			<h2 id="Setregid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1257">Setregid</a></h2>
			<pre>func Setregid(rgid int, egid int) (err error)</pre>
			
			
		
			
			
			<h2 id="Setresgid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1267">Setresgid</a></h2>
			<pre>func Setresgid(rgid int, egid int, sgid int) (err error)</pre>
			
			
		
			
			
			<h2 id="Setresuid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1277">Setresuid</a></h2>
			<pre>func Setresuid(ruid int, euid int, suid int) (err error)</pre>
			
			
		
			
			
			<h2 id="Setreuid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1287">Setreuid</a></h2>
			<pre>func Setreuid(ruid int, euid int) (err error)</pre>
			
			
		
			
			
			<h2 id="Setrlimit">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L707">Setrlimit</a></h2>
			<pre>func Setrlimit(resource int, rlim *Rlimit) (err error)</pre>
			
			
		
			
			
			<h2 id="Setsid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L717">Setsid</a></h2>
			<pre>func Setsid() (pid int, err error)</pre>
			
			
		
			
			
			<h2 id="SetsockoptIPMreq">func <a href="src/pkg/syscall/syscall_linux.htm#L483">SetsockoptIPMreq</a></h2>
			<pre>func SetsockoptIPMreq(fd, level, opt int, mreq *IPMreq) (err error)</pre>
			
			
		
			
			
			<h2 id="SetsockoptIPMreqn">func <a href="src/pkg/syscall/syscall_linux.htm#L487">SetsockoptIPMreqn</a></h2>
			<pre>func SetsockoptIPMreqn(fd, level, opt int, mreq *IPMreqn) (err error)</pre>
			
			
		
			
			
			<h2 id="SetsockoptIPv6Mreq">func <a href="src/pkg/syscall/syscall_linux.htm#L491">SetsockoptIPv6Mreq</a></h2>
			<pre>func SetsockoptIPv6Mreq(fd, level, opt int, mreq *IPv6Mreq) (err error)</pre>
			
			
		
			
			
			<h2 id="SetsockoptInet4Addr">func <a href="src/pkg/syscall/syscall_linux.htm#L471">SetsockoptInet4Addr</a></h2>
			<pre>func SetsockoptInet4Addr(fd, level, opt int, value [4]byte) (err error)</pre>
			
			
		
			
			
			<h2 id="SetsockoptInt">func <a href="src/pkg/syscall/syscall_linux.htm#L466">SetsockoptInt</a></h2>
			<pre>func SetsockoptInt(fd, level, opt int, value int) (err error)</pre>
			
			
		
			
			
			<h2 id="SetsockoptLinger">func <a href="src/pkg/syscall/syscall_linux.htm#L479">SetsockoptLinger</a></h2>
			<pre>func SetsockoptLinger(fd, level, opt int, l *Linger) (err error)</pre>
			
			
		
			
			
			<h2 id="SetsockoptString">func <a href="src/pkg/syscall/syscall_linux.htm#L495">SetsockoptString</a></h2>
			<pre>func SetsockoptString(fd, level, opt int, s string) (err error)</pre>
			
			
		
			
			
			<h2 id="SetsockoptTimeval">func <a href="src/pkg/syscall/syscall_linux.htm#L475">SetsockoptTimeval</a></h2>
			<pre>func SetsockoptTimeval(fd, level, opt int, tv *Timeval) (err error)</pre>
			
			
		
			
			
			<h2 id="Settimeofday">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L728">Settimeofday</a></h2>
			<pre>func Settimeofday(tv *Timeval) (err error)</pre>
			
			
		
			
			
			<h2 id="Setuid">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L738">Setuid</a></h2>
			<pre>func Setuid(uid int) (err error)</pre>
			
			
		
			
			
			<h2 id="Shutdown">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1297">Shutdown</a></h2>
			<pre>func Shutdown(fd int, how int) (err error)</pre>
			
			
		
			
			
			<h2 id="Socket">func <a href="src/pkg/syscall/syscall_linux.htm#L419">Socket</a></h2>
			<pre>func Socket(domain, typ, proto int) (fd int, err error)</pre>
			
			
		
			
			
			<h2 id="Socketpair">func <a href="src/pkg/syscall/syscall_linux.htm#L427">Socketpair</a></h2>
			<pre>func Socketpair(domain, typ, proto int) (fd [2]int, err error)</pre>
			
			
		
			
			
			<h2 id="Splice">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1307">Splice</a></h2>
			<pre>func Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int64, err error)</pre>
			
			
		
			
			
			<h2 id="StartProcess">func <a href="src/pkg/syscall/exec_unix.htm#L201">StartProcess</a></h2>
			<pre>func StartProcess(argv0 string, argv []string, attr *ProcAttr) (pid int, handle uintptr, err error)</pre>
			<p>
StartProcess wraps ForkExec for package os.
</p>

			
		
			
			
			<h2 id="Stat">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1318">Stat</a></h2>
			<pre>func Stat(path string, stat *Stat_t) (err error)</pre>
			
			
		
			
			
			<h2 id="Statfs">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1328">Statfs</a></h2>
			<pre>func Statfs(path string, buf *Statfs_t) (err error)</pre>
			
			
		
			
			
			<h2 id="StringBytePtr">func <a href="src/pkg/syscall/syscall.htm#L17">StringBytePtr</a></h2>
			<pre>func StringBytePtr(s string) *byte</pre>
			<p>
StringBytePtr returns a pointer to a NUL-terminated array of bytes
containing the text of s.
</p>

			
		
			
			
			<h2 id="StringByteSlice">func <a href="src/pkg/syscall/syscall.htm#L9">StringByteSlice</a></h2>
			<pre>func StringByteSlice(s string) []byte</pre>
			<p>
StringByteSlice returns a NUL-terminated slice of bytes
containing the text of s.
</p>

			
		
			
			
			<h2 id="StringSlicePtr">func <a href="src/pkg/syscall/exec_unix.htm#L58">StringSlicePtr</a></h2>
			<pre>func StringSlicePtr(ss []string) []*byte</pre>
			<p>
Convert array of string to array
of NUL-terminated byte pointer.
</p>

			
		
			
			
			<h2 id="Symlink">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L748">Symlink</a></h2>
			<pre>func Symlink(oldpath string, newpath string) (err error)</pre>
			
			
		
			
			
			<h2 id="Sync">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L758">Sync</a></h2>
			<pre>func Sync()</pre>
			
			
		
			
			
			<h2 id="SyncFileRange">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1338">SyncFileRange</a></h2>
			<pre>func SyncFileRange(fd int, off int64, n int64, flags int) (err error)</pre>
			
			
		
			
			
			<h2 id="Syscall">func <a href="src/pkg/syscall/syscall_unix.htm#L13">Syscall</a></h2>
			<pre>func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno)</pre>
			
			
		
			
			
			<h2 id="Syscall6">func <a href="src/pkg/syscall/syscall_unix.htm#L14">Syscall6</a></h2>
			<pre>func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)</pre>
			
			
		
			
			
			<h2 id="Sysinfo">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L765">Sysinfo</a></h2>
			<pre>func Sysinfo(info *Sysinfo_t) (err error)</pre>
			
			
		
			
			
			<h2 id="Tee">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L775">Tee</a></h2>
			<pre>func Tee(rfd int, wfd int, len int, flags int) (n int64, err error)</pre>
			
			
		
			
			
			<h2 id="Tgkill">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L786">Tgkill</a></h2>
			<pre>func Tgkill(tgid int, tid int, sig Signal) (err error)</pre>
			
			
		
			
			
			<h2 id="Times">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L796">Times</a></h2>
			<pre>func Times(tms *Tms) (ticks uintptr, err error)</pre>
			
			
		
			
			
			<h2 id="TimespecToNsec">func <a href="src/pkg/syscall/syscall_linux_amd64.htm#L51">TimespecToNsec</a></h2>
			<pre>func TimespecToNsec(ts Timespec) int64</pre>
			
			
		
			
			
			<h2 id="TimevalToNsec">func <a href="src/pkg/syscall/syscall_linux_amd64.htm#L59">TimevalToNsec</a></h2>
			<pre>func TimevalToNsec(tv Timeval) int64</pre>
			
			
		
			
			
			<h2 id="Truncate">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L1348">Truncate</a></h2>
			<pre>func Truncate(path string, length int64) (err error)</pre>
			
			
		
			
			
			<h2 id="Umask">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L807">Umask</a></h2>
			<pre>func Umask(mask int) (oldmask int)</pre>
			
			
		
			
			
			<h2 id="Uname">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L815">Uname</a></h2>
			<pre>func Uname(buf *Utsname) (err error)</pre>
			
			
		
			
			
			<h2 id="UnixCredentials">func <a href="src/pkg/syscall/sockcmsg_linux.htm#L6">UnixCredentials</a></h2>
			<pre>func UnixCredentials(ucred *Ucred) []byte</pre>
			<p>
UnixCredentials encodes credentials into a socket control message
for sending to another process. This can be used for
authentication.
</p>

			
		
			
			
			<h2 id="UnixRights">func <a href="src/pkg/syscall/sockcmsg_unix.htm#L73">UnixRights</a></h2>
			<pre>func UnixRights(fds ...int) []byte</pre>
			<p>
UnixRights encodes a set of open file descriptors into a socket
control message for sending to another process.
</p>

			
		
			
			
			<h2 id="Unlink">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L825">Unlink</a></h2>
			<pre>func Unlink(path string) (err error)</pre>
			
			
		
			
			
			<h2 id="Unlinkat">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L835">Unlinkat</a></h2>
			<pre>func Unlinkat(dirfd int, path string) (err error)</pre>
			
			
		
			
			
			<h2 id="Unmount">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L845">Unmount</a></h2>
			<pre>func Unmount(target string, flags int) (err error)</pre>
			
			
		
			
			
			<h2 id="Unshare">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L855">Unshare</a></h2>
			<pre>func Unshare(flags int) (err error)</pre>
			
			
		
			
			
			<h2 id="Ustat">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L865">Ustat</a></h2>
			<pre>func Ustat(dev int, ubuf *Ustat_t) (err error)</pre>
			
			
		
			
			
			<h2 id="Utime">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L875">Utime</a></h2>
			<pre>func Utime(path string, buf *Utimbuf) (err error)</pre>
			
			
		
			
			
			<h2 id="Utimes">func <a href="src/pkg/syscall/syscall_linux.htm#L33">Utimes</a></h2>
			<pre>func Utimes(path string, tv []Timeval) (err error)</pre>
			<p>
sys	utimes(path string, times *[2]Timeval) (err error)
</p>

			
		
			
			
			<h2 id="Wait4">func <a href="src/pkg/syscall/syscall_linux.htm#L166">Wait4</a></h2>
			<pre>func Wait4(pid int, wstatus *WaitStatus, options int, rusage *Rusage) (wpid int, err error)</pre>
			<p>
sys	wait4(pid int, wstatus *_C_int, options int, rusage *Rusage) (wpid int, err error)
</p>

			
		
			
			
			<h2 id="Write">func <a href="src/pkg/syscall/zsyscall_linux_amd64.htm#L885">Write</a></h2>
			<pre>func Write(fd int, p []byte) (n int, err error)</pre>
			
			
		
		
			
			
			<h2 id="Cmsghdr">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L222">Cmsghdr</a></h2>
			<pre>type Cmsghdr struct {
    Len          uint64
    Level        int32
    Type         int32
    X__cmsg_data [0]byte
}</pre>
			

			

			

			

			

			
				
				<h3 id="Cmsghdr.SetLen">func (*Cmsghdr) <a href="src/pkg/syscall/syscall_linux_amd64.htm#L80">SetLen</a></h3>
				<pre>func (cmsg *Cmsghdr) SetLen(length int)</pre>
				
				
				
			
		
			
			
			<h2 id="Credential">type <a href="src/pkg/syscall/exec_unix.htm#L85">Credential</a></h2>
			<pre>type Credential struct {
    Uid    uint32   <span class="comment">// User ID.</span>
    Gid    uint32   <span class="comment">// Group ID.</span>
    Groups []uint32 <span class="comment">// Supplementary group IDs.</span>
}</pre>
			<p>
Credential holds user and group identities to be assumed
by a child process started by StartProcess.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Dirent">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L122">Dirent</a></h2>
			<pre>type Dirent struct {
    Ino       uint64
    Off       int64
    Reclen    uint16
    Type      uint8
    Name      [256]int8
    Pad_cgo_0 [5]byte
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="EpollEvent">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L504">EpollEvent</a></h2>
			<pre>type EpollEvent struct {
    Events uint32
    Fd     int32
    Pad    int32
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Errno">type <a href="src/pkg/syscall/syscall_unix.htm#L85">Errno</a></h2>
			<pre>type Errno uintptr</pre>
			<p>
An Errno is an unsigned number describing an error condition.
It implements the error interface.  The zero Errno is by convention
a non-error, so code to convert from Errno to error should use:
</p>
<pre>err = nil
if errno != 0 {
	err = errno
}
</pre>


			

			

			

			

			
				
				<h3 id="Errno.Error">func (Errno) <a href="src/pkg/syscall/syscall_unix.htm#L87">Error</a></h3>
				<pre>func (e Errno) Error() string</pre>
				
				
				
			
				
				<h3 id="Errno.Temporary">func (Errno) <a href="src/pkg/syscall/syscall_unix.htm#L97">Temporary</a></h3>
				<pre>func (e Errno) Temporary() bool</pre>
				
				
				
			
				
				<h3 id="Errno.Timeout">func (Errno) <a href="src/pkg/syscall/syscall_unix.htm#L101">Timeout</a></h3>
				<pre>func (e Errno) Timeout() bool</pre>
				
				
				
			
		
			
			
			<h2 id="FdSet">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L463">FdSet</a></h2>
			<pre>type FdSet struct {
    Bits [16]int64
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Fsid">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L131">Fsid</a></h2>
			<pre>type Fsid struct {
    X__val [2]int32
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="IPMreq">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L194">IPMreq</a></h2>
			<pre>type IPMreq struct {
    Multiaddr [4]byte <span class="comment">/* in_addr */</span>
    Interface [4]byte <span class="comment">/* in_addr */</span>
}</pre>
			

			

			

			

			
				
				<h3 id="GetsockoptIPMreq">func <a href="src/pkg/syscall/syscall_linux.htm#L445">GetsockoptIPMreq</a></h3>
				<pre>func GetsockoptIPMreq(fd, level, opt int) (*IPMreq, error)</pre>
				
				
			

			
		
			
			
			<h2 id="IPMreqn">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L199">IPMreqn</a></h2>
			<pre>type IPMreqn struct {
    Multiaddr [4]byte <span class="comment">/* in_addr */</span>
    Address   [4]byte <span class="comment">/* in_addr */</span>
    Ifindex   int32
}</pre>
			

			

			

			

			
				
				<h3 id="GetsockoptIPMreqn">func <a href="src/pkg/syscall/syscall_linux.htm#L452">GetsockoptIPMreqn</a></h3>
				<pre>func GetsockoptIPMreqn(fd, level, opt int) (*IPMreqn, error)</pre>
				
				
			

			
		
			
			
			<h2 id="IPv6Mreq">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L205">IPv6Mreq</a></h2>
			<pre>type IPv6Mreq struct {
    Multiaddr [16]byte <span class="comment">/* in6_addr */</span>
    Interface uint32
}</pre>
			

			

			

			

			
				
				<h3 id="GetsockoptIPv6Mreq">func <a href="src/pkg/syscall/syscall_linux.htm#L459">GetsockoptIPv6Mreq</a></h3>
				<pre>func GetsockoptIPv6Mreq(fd, level, opt int) (*IPv6Mreq, error)</pre>
				
				
			

			
		
			
			
			<h2 id="IfAddrmsg">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L378">IfAddrmsg</a></h2>
			<pre>type IfAddrmsg struct {
    Family    uint8
    Prefixlen uint8
    Flags     uint8
    Scope     uint8
    Index     uint32
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="IfInfomsg">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L369">IfInfomsg</a></h2>
			<pre>type IfInfomsg struct {
    Family     uint8
    X__ifi_pad uint8
    Type       uint16
    Index      int32
    Flags      uint32
    Change     uint32
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Inet4Pktinfo">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L229">Inet4Pktinfo</a></h2>
			<pre>type Inet4Pktinfo struct {
    Ifindex  int32
    Spec_dst [4]byte <span class="comment">/* in_addr */</span>
    Addr     [4]byte <span class="comment">/* in_addr */</span>
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Inet6Pktinfo">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L235">Inet6Pktinfo</a></h2>
			<pre>type Inet6Pktinfo struct {
    Addr    [16]byte <span class="comment">/* in6_addr */</span>
    Ifindex uint32
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="InotifyEvent">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L423">InotifyEvent</a></h2>
			<pre>type InotifyEvent struct {
    Wd     int32
    Mask   uint32
    Cookie uint32
    Len    uint32
    Name   [0]byte
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Iovec">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L189">Iovec</a></h2>
			<pre>type Iovec struct {
    Base *byte
    Len  uint64
}</pre>
			

			

			

			

			

			
				
				<h3 id="Iovec.SetLen">func (*Iovec) <a href="src/pkg/syscall/syscall_linux_amd64.htm#L72">SetLen</a></h3>
				<pre>func (iov *Iovec) SetLen(length int)</pre>
				
				
				
			
		
			
			
			<h2 id="Linger">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L184">Linger</a></h2>
			<pre>type Linger struct {
    Onoff  int32
    Linger int32
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Msghdr">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L210">Msghdr</a></h2>
			<pre>type Msghdr struct {
    Name       *byte
    Namelen    uint32
    Pad_cgo_0  [4]byte
    Iov        *Iovec
    Iovlen     uint64
    Control    *byte
    Controllen uint64
    Flags      int32
    Pad_cgo_1  [4]byte
}</pre>
			

			

			

			

			

			
				
				<h3 id="Msghdr.SetControllen">func (*Msghdr) <a href="src/pkg/syscall/syscall_linux_amd64.htm#L76">SetControllen</a></h3>
				<pre>func (msghdr *Msghdr) SetControllen(length int)</pre>
				
				
				
			
		
			
			
			<h2 id="NetlinkMessage">type <a href="src/pkg/syscall/netlink_linux.htm#L126">NetlinkMessage</a></h2>
			<pre>type NetlinkMessage struct {
    Header NlMsghdr
    Data   []byte
}</pre>
			<p>
NetlinkMessage represents the netlink message.
</p>


			

			

			

			

			
		
			
			
			<h2 id="NetlinkRouteAttr">type <a href="src/pkg/syscall/netlink_linux.htm#L166">NetlinkRouteAttr</a></h2>
			<pre>type NetlinkRouteAttr struct {
    Attr  RtAttr
    Value []byte
}</pre>
			<p>
NetlinkRouteAttr represents the netlink route attribute.
</p>


			

			

			

			

			
		
			
			
			<h2 id="NetlinkRouteRequest">type <a href="src/pkg/syscall/netlink_linux.htm#L16">NetlinkRouteRequest</a></h2>
			<pre>type NetlinkRouteRequest struct {
    Header NlMsghdr
    Data   RtGenmsg
}</pre>
			<p>
NetlinkRouteRequest represents the request message to receive
routing and link states from the kernel.
</p>


			

			

			

			

			
		
			
			
			<h2 id="NlAttr">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L359">NlAttr</a></h2>
			<pre>type NlAttr struct {
    Len  uint16
    Type uint16
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="NlMsgerr">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L350">NlMsgerr</a></h2>
			<pre>type NlMsgerr struct {
    Error int32
    Msg   NlMsghdr
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="NlMsghdr">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L342">NlMsghdr</a></h2>
			<pre>type NlMsghdr struct {
    Len   uint32
    Type  uint16
    Flags uint16
    Seq   uint32
    Pid   uint32
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="ProcAttr">type <a href="src/pkg/syscall/exec_unix.htm#L93">ProcAttr</a></h2>
			<pre>type ProcAttr struct {
    Dir   string    <span class="comment">// Current working directory.</span>
    Env   []string  <span class="comment">// Environment.</span>
    Files []uintptr <span class="comment">// File descriptors.</span>
    Sys   *SysProcAttr
}</pre>
			<p>
ProcAttr holds attributes that will be applied to a new process started
by StartProcess.
</p>


			

			

			

			

			
		
			
			
			<h2 id="PtraceRegs">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L433">PtraceRegs</a></h2>
			<pre>type PtraceRegs struct {
    R15      uint64
    R14      uint64
    R13      uint64
    R12      uint64
    Rbp      uint64
    Rbx      uint64
    R11      uint64
    R10      uint64
    R9       uint64
    R8       uint64
    Rax      uint64
    Rcx      uint64
    Rdx      uint64
    Rsi      uint64
    Rdi      uint64
    Orig_rax uint64
    Rip      uint64
    Cs       uint64
    Eflags   uint64
    Rsp      uint64
    Ss       uint64
    Fs_base  uint64
    Gs_base  uint64
    Ds       uint64
    Es       uint64
    Fs       uint64
    Gs       uint64
}</pre>
			

			

			

			

			

			
				
				<h3 id="PtraceRegs.PC">func (*PtraceRegs) <a href="src/pkg/syscall/syscall_linux_amd64.htm#L68">PC</a></h3>
				<pre>func (r *PtraceRegs) PC() uint64</pre>
				
				
				
			
				
				<h3 id="PtraceRegs.SetPC">func (*PtraceRegs) <a href="src/pkg/syscall/syscall_linux_amd64.htm#L70">SetPC</a></h3>
				<pre>func (r *PtraceRegs) SetPC(pc uint64)</pre>
				
				
				
			
		
			
			
			<h2 id="RawSockaddr">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L172">RawSockaddr</a></h2>
			<pre>type RawSockaddr struct {
    Family uint16
    Data   [14]int8
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="RawSockaddrAny">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L177">RawSockaddrAny</a></h2>
			<pre>type RawSockaddrAny struct {
    Addr RawSockaddr
    Pad  [96]int8
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="RawSockaddrInet4">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L135">RawSockaddrInet4</a></h2>
			<pre>type RawSockaddrInet4 struct {
    Family uint16
    Port   uint16
    Addr   [4]byte <span class="comment">/* in_addr */</span>
    Zero   [8]uint8
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="RawSockaddrInet6">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L142">RawSockaddrInet6</a></h2>
			<pre>type RawSockaddrInet6 struct {
    Family   uint16
    Port     uint16
    Flowinfo uint32
    Addr     [16]byte <span class="comment">/* in6_addr */</span>
    Scope_id uint32
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="RawSockaddrLinklayer">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L155">RawSockaddrLinklayer</a></h2>
			<pre>type RawSockaddrLinklayer struct {
    Family   uint16
    Protocol uint16
    Ifindex  int32
    Hatype   uint16
    Pkttype  uint8
    Halen    uint8
    Addr     [8]uint8
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="RawSockaddrNetlink">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L165">RawSockaddrNetlink</a></h2>
			<pre>type RawSockaddrNetlink struct {
    Family uint16
    Pad    uint16
    Pid    uint32
    Groups uint32
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="RawSockaddrUnix">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L150">RawSockaddrUnix</a></h2>
			<pre>type RawSockaddrUnix struct {
    Family uint16
    Path   [108]int8
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Rlimit">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L82">Rlimit</a></h2>
			<pre>type Rlimit struct {
    Cur uint64
    Max uint64
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="RtAttr">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L364">RtAttr</a></h2>
			<pre>type RtAttr struct {
    Len  uint16
    Type uint16
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="RtGenmsg">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L355">RtGenmsg</a></h2>
			<pre>type RtGenmsg struct {
    Family uint8
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="RtMsg">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L386">RtMsg</a></h2>
			<pre>type RtMsg struct {
    Family   uint8
    Dst_len  uint8
    Src_len  uint8
    Tos      uint8
    Table    uint8
    Protocol uint8
    Scope    uint8
    Type     uint8
    Flags    uint32
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="RtNexthop">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L398">RtNexthop</a></h2>
			<pre>type RtNexthop struct {
    Len     uint16
    Flags   uint8
    Hops    uint8
    Ifindex int32
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Rusage">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L63">Rusage</a></h2>
			<pre>type Rusage struct {
    Utime    Timeval
    Stime    Timeval
    Maxrss   int64
    Ixrss    int64
    Idrss    int64
    Isrss    int64
    Minflt   int64
    Majflt   int64
    Nswap    int64
    Inblock  int64
    Oublock  int64
    Msgsnd   int64
    Msgrcv   int64
    Nsignals int64
    Nvcsw    int64
    Nivcsw   int64
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Signal">type <a href="src/pkg/syscall/syscall_unix.htm#L107">Signal</a></h2>
			<pre>type Signal int</pre>
			<p>
A Signal is a number describing a process signal.
It implements the os.Signal interface.
</p>


			

			

			

			

			
				
				<h3 id="Signal.Signal">func (Signal) <a href="src/pkg/syscall/syscall_unix.htm#L109">Signal</a></h3>
				<pre>func (s Signal) Signal()</pre>
				
				
				
			
				
				<h3 id="Signal.String">func (Signal) <a href="src/pkg/syscall/syscall_unix.htm#L111">String</a></h3>
				<pre>func (s Signal) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="SockFilter">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L410">SockFilter</a></h2>
			<pre>type SockFilter struct {
    Code uint16
    Jt   uint8
    Jf   uint8
    K    uint32
}</pre>
			

			

			

			

			
				
				<h3 id="LsfJump">func <a href="src/pkg/syscall/lsf_linux.htm#L7">LsfJump</a></h3>
				<pre>func LsfJump(code, k, jt, jf int) *SockFilter</pre>
				
				
			
				
				<h3 id="LsfStmt">func <a href="src/pkg/syscall/lsf_linux.htm#L3">LsfStmt</a></h3>
				<pre>func LsfStmt(code, k int) *SockFilter</pre>
				
				
			

			
		
			
			
			<h2 id="SockFprog">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L417">SockFprog</a></h2>
			<pre>type SockFprog struct {
    Len       uint16
    Pad_cgo_0 [6]byte
    Filter    *SockFilter
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Sockaddr">type <a href="src/pkg/syscall/syscall_linux.htm#L183">Sockaddr</a></h2>
			<pre>type Sockaddr interface {
    <span class="comment">// contains filtered or unexported methods</span>
}</pre>
			

			

			

			

			
				
				<h3 id="Getpeername">func <a href="src/pkg/syscall/syscall_linux.htm#L394">Getpeername</a></h3>
				<pre>func Getpeername(fd int) (sa Sockaddr, err error)</pre>
				
				
			
				
				<h3 id="Getsockname">func <a href="src/pkg/syscall/syscall_linux.htm#L385">Getsockname</a></h3>
				<pre>func Getsockname(fd int) (sa Sockaddr, err error)</pre>
				
				
			

			
		
			
			
			<h2 id="SockaddrInet4">type <a href="src/pkg/syscall/syscall_linux.htm#L187">SockaddrInet4</a></h2>
			<pre>type SockaddrInet4 struct {
    Port int
    Addr [4]byte
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="SockaddrInet6">type <a href="src/pkg/syscall/syscall_linux.htm#L207">SockaddrInet6</a></h2>
			<pre>type SockaddrInet6 struct {
    Port   int
    ZoneId uint32
    Addr   [16]byte
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="SockaddrLinklayer">type <a href="src/pkg/syscall/syscall_linux.htm#L255">SockaddrLinklayer</a></h2>
			<pre>type SockaddrLinklayer struct {
    Protocol uint16
    Ifindex  int
    Hatype   uint16
    Pkttype  uint8
    Halen    uint8
    Addr     [8]byte
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="SockaddrNetlink">type <a href="src/pkg/syscall/syscall_linux.htm#L281">SockaddrNetlink</a></h2>
			<pre>type SockaddrNetlink struct {
    Family uint16
    Pad    uint16
    Pid    uint32
    Groups uint32
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="SockaddrUnix">type <a href="src/pkg/syscall/syscall_linux.htm#L229">SockaddrUnix</a></h2>
			<pre>type SockaddrUnix struct {
    Name string
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="SocketControlMessage">type <a href="src/pkg/syscall/sockcmsg_unix.htm#L35">SocketControlMessage</a></h2>
			<pre>type SocketControlMessage struct {
    Header Cmsghdr
    Data   []byte
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Stat_t">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L89">Stat_t</a></h2>
			<pre>type Stat_t struct {
    Dev       uint64
    Ino       uint64
    Nlink     uint64
    Mode      uint32
    Uid       uint32
    Gid       uint32
    X__pad0   int32
    Rdev      uint64
    Size      int64
    Blksize   int64
    Blocks    int64
    Atim      Timespec
    Mtim      Timespec
    Ctim      Timespec
    X__unused [3]int64
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Statfs_t">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L107">Statfs_t</a></h2>
			<pre>type Statfs_t struct {
    Type    int64
    Bsize   int64
    Blocks  uint64
    Bfree   uint64
    Bavail  uint64
    Files   uint64
    Ffree   uint64
    Fsid    Fsid
    Namelen int64
    Frsize  int64
    Flags   int64
    Spare   [4]int64
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="SysProcAttr">type <a href="src/pkg/syscall/exec_linux.htm#L3">SysProcAttr</a></h2>
			<pre>type SysProcAttr struct {
    Chroot     string      <span class="comment">// Chroot.</span>
    Credential *Credential <span class="comment">// Credential.</span>
    Ptrace     bool        <span class="comment">// Enable tracing.</span>
    Setsid     bool        <span class="comment">// Create session.</span>
    Setpgid    bool        <span class="comment">// Set process group ID to new pid (SYSV setpgrp)</span>
    Setctty    bool        <span class="comment">// Set controlling terminal to fd 0</span>
    Noctty     bool        <span class="comment">// Detach fd 0 from controlling terminal</span>
    Pdeathsig  Signal      <span class="comment">// Signal that the process will get when its parent dies (Linux only)</span>
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Sysinfo_t">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L467">Sysinfo_t</a></h2>
			<pre>type Sysinfo_t struct {
    Uptime    int64
    Loads     [3]uint64
    Totalram  uint64
    Freeram   uint64
    Sharedram uint64
    Bufferram uint64
    Totalswap uint64
    Freeswap  uint64
    Procs     uint16
    Pad       uint16
    Pad_cgo_0 [4]byte
    Totalhigh uint64
    Freehigh  uint64
    Unit      uint32
    X_f       [0]byte
    Pad_cgo_1 [4]byte
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Termios">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L510">Termios</a></h2>
			<pre>type Termios struct {
    Iflag     uint32
    Oflag     uint32
    Cflag     uint32
    Lflag     uint32
    Line      uint8
    Cc        [32]uint8
    Pad_cgo_0 [3]byte
    Ispeed    uint32
    Ospeed    uint32
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Time_t">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L49">Time_t</a></h2>
			<pre>type Time_t int64</pre>
			

			

			

			

			
				
				<h3 id="Time">func <a href="src/pkg/syscall/syscall_linux_amd64.htm#L49">Time</a></h3>
				<pre>func Time(t *Time_t) (tt Time_t, err error)</pre>
				
				
			

			
		
			
			
			<h2 id="Timespec">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L12">Timespec</a></h2>
			<pre>type Timespec struct {
    Sec  int64
    Nsec int64
}</pre>
			

			

			

			

			
				
				<h3 id="NsecToTimespec">func <a href="src/pkg/syscall/syscall_linux_amd64.htm#L53">NsecToTimespec</a></h3>
				<pre>func NsecToTimespec(nsec int64) (ts Timespec)</pre>
				
				
			

			
				
				<h3 id="Timespec.Nano">func (*Timespec) <a href="src/pkg/syscall/syscall.htm#L31">Nano</a></h3>
				<pre>func (ts *Timespec) Nano() int64</pre>
				
				
				
			
				
				<h3 id="Timespec.Unix">func (*Timespec) <a href="src/pkg/syscall/syscall.htm#L23">Unix</a></h3>
				<pre>func (ts *Timespec) Unix() (sec int64, nsec int64)</pre>
				
				
				
			
		
			
			
			<h2 id="Timeval">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L17">Timeval</a></h2>
			<pre>type Timeval struct {
    Sec  int64
    Usec int64
}</pre>
			

			

			

			

			
				
				<h3 id="NsecToTimeval">func <a href="src/pkg/syscall/syscall_linux_amd64.htm#L61">NsecToTimeval</a></h3>
				<pre>func NsecToTimeval(nsec int64) (tv Timeval)</pre>
				
				
			

			
				
				<h3 id="Timeval.Nano">func (*Timeval) <a href="src/pkg/syscall/syscall.htm#L35">Nano</a></h3>
				<pre>func (tv *Timeval) Nano() int64</pre>
				
				
				
			
				
				<h3 id="Timeval.Unix">func (*Timeval) <a href="src/pkg/syscall/syscall.htm#L27">Unix</a></h3>
				<pre>func (tv *Timeval) Unix() (sec int64, nsec int64)</pre>
				
				
				
			
		
			
			
			<h2 id="Timex">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L22">Timex</a></h2>
			<pre>type Timex struct {
    Modes     uint32
    Pad_cgo_0 [4]byte
    Offset    int64
    Freq      int64
    Maxerror  int64
    Esterror  int64
    Status    int32
    Pad_cgo_1 [4]byte
    Constant  int64
    Precision int64
    Tolerance int64
    Time      Timeval
    Tick      int64
    Ppsfreq   int64
    Jitter    int64
    Shift     int32
    Pad_cgo_2 [4]byte
    Stabil    int64
    Jitcnt    int64
    Calcnt    int64
    Errcnt    int64
    Stbcnt    int64
    Tai       int32
    Pad_cgo_3 [44]byte
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Tms">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L51">Tms</a></h2>
			<pre>type Tms struct {
    Utime  int64
    Stime  int64
    Cutime int64
    Cstime int64
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Ucred">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L240">Ucred</a></h2>
			<pre>type Ucred struct {
    Pid int32
    Uid uint32
    Gid uint32
}</pre>
			

			

			

			

			
				
				<h3 id="ParseUnixCredentials">func <a href="src/pkg/syscall/sockcmsg_linux.htm#L19">ParseUnixCredentials</a></h3>
				<pre>func ParseUnixCredentials(msg *SocketControlMessage) (*Ucred, error)</pre>
				<p>
ParseUnixCredentials decodes a socket control message that contains
credentials in a Ucred structure. To receive such a message, the
SO_PASSCRED option must be enabled on the socket.
</p>

				
			

			
		
			
			
			<h2 id="Ustat_t">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L495">Ustat_t</a></h2>
			<pre>type Ustat_t struct {
    Tfree     int32
    Pad_cgo_0 [4]byte
    Tinode    uint64
    Fname     [6]int8
    Fpack     [6]int8
    Pad_cgo_1 [4]byte
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Utimbuf">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L58">Utimbuf</a></h2>
			<pre>type Utimbuf struct {
    Actime  int64
    Modtime int64
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Utsname">type <a href="src/pkg/syscall/ztypes_linux_amd64.htm#L486">Utsname</a></h2>
			<pre>type Utsname struct {
    Sysname    [65]int8
    Nodename   [65]int8
    Release    [65]int8
    Version    [65]int8
    Machine    [65]int8
    Domainname [65]int8
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="WaitStatus">type <a href="src/pkg/syscall/syscall_linux.htm#L108">WaitStatus</a></h2>
			<pre>type WaitStatus uint32</pre>
			

			

			

			

			

			
				
				<h3 id="WaitStatus.Continued">func (WaitStatus) <a href="src/pkg/syscall/syscall_linux.htm#L133">Continued</a></h3>
				<pre>func (w WaitStatus) Continued() bool</pre>
				
				
				
			
				
				<h3 id="WaitStatus.CoreDump">func (WaitStatus) <a href="src/pkg/syscall/syscall_linux.htm#L135">CoreDump</a></h3>
				<pre>func (w WaitStatus) CoreDump() bool</pre>
				
				
				
			
				
				<h3 id="WaitStatus.ExitStatus">func (WaitStatus) <a href="src/pkg/syscall/syscall_linux.htm#L137">ExitStatus</a></h3>
				<pre>func (w WaitStatus) ExitStatus() int</pre>
				
				
				
			
				
				<h3 id="WaitStatus.Exited">func (WaitStatus) <a href="src/pkg/syscall/syscall_linux.htm#L127">Exited</a></h3>
				<pre>func (w WaitStatus) Exited() bool</pre>
				
				
				
			
				
				<h3 id="WaitStatus.Signal">func (WaitStatus) <a href="src/pkg/syscall/syscall_linux.htm#L144">Signal</a></h3>
				<pre>func (w WaitStatus) Signal() Signal</pre>
				
				
				
			
				
				<h3 id="WaitStatus.Signaled">func (WaitStatus) <a href="src/pkg/syscall/syscall_linux.htm#L129">Signaled</a></h3>
				<pre>func (w WaitStatus) Signaled() bool</pre>
				
				
				
			
				
				<h3 id="WaitStatus.StopSignal">func (WaitStatus) <a href="src/pkg/syscall/syscall_linux.htm#L151">StopSignal</a></h3>
				<pre>func (w WaitStatus) StopSignal() Signal</pre>
				
				
				
			
				
				<h3 id="WaitStatus.Stopped">func (WaitStatus) <a href="src/pkg/syscall/syscall_linux.htm#L131">Stopped</a></h3>
				<pre>func (w WaitStatus) Stopped() bool</pre>
				
				
				
			
				
				<h3 id="WaitStatus.TrapCause">func (WaitStatus) <a href="src/pkg/syscall/syscall_linux.htm#L158">TrapCause</a></h3>
				<pre>func (w WaitStatus) TrapCause() int</pre>
				
				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
