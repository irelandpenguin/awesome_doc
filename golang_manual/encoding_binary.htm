
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>binary - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package binary</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "encoding/binary"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
				<dd><a href="#examples">Examples</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package binary implements translation between numbers and byte sequences
and encoding and decoding of varints.
</p>
<p>
Numbers are translated by reading and writing fixed-size values.
A fixed-size value is either a fixed-size arithmetic
type (int8, uint8, int16, float32, complex64, ...)
or an array or struct containing only fixed-size values.
</p>
<p>
Varints are a method of encoding integers using one or more bytes;
numbers with smaller absolute value take a smaller number of bytes.
For a specification, see <a href="http://code.google.com/apis/protocolbuffers/docs/encoding.html">http://code.google.com/apis/protocolbuffers/docs/encoding.html</a>.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
				<dd><a href="#constants">Constants</a></dd>
			
			
				<dd><a href="#variables">Variables</a></dd>
			
			
				
				<dd><a href="#PutUvarint">func PutUvarint(buf []byte, x uint64) int</a></dd>
			
				
				<dd><a href="#PutVarint">func PutVarint(buf []byte, x int64) int</a></dd>
			
				
				<dd><a href="#Read">func Read(r io.Reader, order ByteOrder, data interface{}) error</a></dd>
			
				
				<dd><a href="#ReadUvarint">func ReadUvarint(r io.ByteReader) (uint64, error)</a></dd>
			
				
				<dd><a href="#ReadVarint">func ReadVarint(r io.ByteReader) (int64, error)</a></dd>
			
				
				<dd><a href="#Size">func Size(v interface{}) int</a></dd>
			
				
				<dd><a href="#Uvarint">func Uvarint(buf []byte) (uint64, int)</a></dd>
			
				
				<dd><a href="#Varint">func Varint(buf []byte) (int64, int)</a></dd>
			
				
				<dd><a href="#Write">func Write(w io.Writer, order ByteOrder, data interface{}) error</a></dd>
			
			
				
				<dd><a href="#ByteOrder">type ByteOrder</a></dd>
				
				
			
			
		</dl>

		
			<h4 id="examples">Examples</h4>
			<dl>
			
			<dd><a class="exampleLink" href="#example_Read">Read</a></dd>
			
			<dd><a class="exampleLink" href="#example_Write">Write</a></dd>
			
			<dd><a class="exampleLink" href="#example_Write_multi">Write (Multi)</a></dd>
			
			</dl>
		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/encoding/binary/binary.htm">binary.go</a>
			
				<a href="src/pkg/encoding/binary/varint.htm">varint.go</a>
			
			</span>
			</p>
		
	
		
			<h2 id="constants">Constants</h2>
			
				<pre>const (
    MaxVarintLen16 = 3
    MaxVarintLen32 = 5
    MaxVarintLen64 = 10
)</pre>
				<p>
MaxVarintLenN is the maximum length of a varint-encoded N-bit integer.
</p>

			
		
		
			<h2 id="variables">Variables</h2>
			
				<pre>var BigEndian bigEndian</pre>
				<p>
BigEndian is the big-endian implementation of ByteOrder.
</p>

			
				<pre>var LittleEndian littleEndian</pre>
				<p>
LittleEndian is the little-endian implementation of ByteOrder.
</p>

			
		
		
			
			
			<h2 id="PutUvarint">func <a href="src/pkg/encoding/binary/varint.htm#L31">PutUvarint</a></h2>
			<pre>func PutUvarint(buf []byte, x uint64) int</pre>
			<p>
PutUvarint encodes a uint64 into buf and returns the number of bytes written.
If the buffer is too small, PutUvarint will panic.
</p>

			
		
			
			
			<h2 id="PutVarint">func <a href="src/pkg/encoding/binary/varint.htm#L68">PutVarint</a></h2>
			<pre>func PutVarint(buf []byte, x int64) int</pre>
			<p>
PutVarint encodes an int64 into buf and returns the number of bytes written.
If the buffer is too small, PutVarint will panic.
</p>

			
		
			
			
			<h2 id="Read">func <a href="src/pkg/encoding/binary/binary.htm#L118">Read</a></h2>
			<pre>func Read(r io.Reader, order ByteOrder, data interface{}) error</pre>
			<p>
Read reads structured binary data from r into data.
Data must be a pointer to a fixed-size value or a slice
of fixed-size values.
Bytes read from r are decoded using the specified byte order
and written to successive fields of the data.
</p>

			<div id="example_Read" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">var pi float64
b := []byte{0x18, 0x2d, 0x44, 0x54, 0xfb, 0x21, 0x09, 0x40}
buf := bytes.NewBuffer(b)
err := binary.Read(buf, binary.LittleEndian, &amp;pi)
if err != nil {
    fmt.Println(&#34;binary.Read failed:&#34;, err)
}
fmt.Print(pi)
<span class="comment"></pre>
		
		<p>Output:</p>
		<pre class="output">3.141592653589793</pre>
		
	</div>
</div>

		
			
			
			<h2 id="ReadUvarint">func <a href="src/pkg/encoding/binary/varint.htm#L96">ReadUvarint</a></h2>
			<pre>func ReadUvarint(r io.ByteReader) (uint64, error)</pre>
			<p>
ReadUvarint reads an encoded unsigned integer from r and returns it as a uint64.
</p>

			
		
			
			
			<h2 id="ReadVarint">func <a href="src/pkg/encoding/binary/varint.htm#L117">ReadVarint</a></h2>
			<pre>func ReadVarint(r io.ByteReader) (int64, error)</pre>
			<p>
ReadVarint reads an encoded unsigned integer from r and returns it as a uint64.
</p>

			
		
			
			
			<h2 id="Size">func <a href="src/pkg/encoding/binary/binary.htm#L246">Size</a></h2>
			<pre>func Size(v interface{}) int</pre>
			<p>
Size returns how many bytes Write would generate to encode the value v, which
must be a fixed-size value or a slice of fixed-size values, or a pointer to such data.
</p>

			
		
			
			
			<h2 id="Uvarint">func <a href="src/pkg/encoding/binary/varint.htm#L50">Uvarint</a></h2>
			<pre>func Uvarint(buf []byte) (uint64, int)</pre>
			<p>
Uvarint decodes a uint64 from buf and returns that value and the
number of bytes read (&gt; 0). If an error occurred, the value is 0
and the number of bytes n is &lt;= 0 meaning:
</p>
<pre>	n == 0: buf too small
	n  &lt; 0: value larger than 64 bits (overflow)
             and -n is the number of bytes read
</pre>

			
		
			
			
			<h2 id="Varint">func <a href="src/pkg/encoding/binary/varint.htm#L84">Varint</a></h2>
			<pre>func Varint(buf []byte) (int64, int)</pre>
			<p>
Varint decodes an int64 from buf and returns that value and the
number of bytes read (&gt; 0). If an error occurred, the value is 0
and the number of bytes n is &lt;= 0 with the following meaning:
</p>
<pre>	n == 0: buf too small
	n  &lt; 0: value larger than 64 bits (overflow)
             and -n is the number of bytes read
</pre>

			
		
			
			
			<h2 id="Write">func <a href="src/pkg/encoding/binary/binary.htm#L174">Write</a></h2>
			<pre>func Write(w io.Writer, order ByteOrder, data interface{}) error</pre>
			<p>
Write writes the binary representation of data into w.
Data must be a fixed-size value or a slice of fixed-size
values, or a pointer to such data.
Bytes written to w are encoded using the specified byte order
and read from successive fields of the data.
</p>

			<div id="example_Write" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">buf := new(bytes.Buffer)
var pi float64 = math.Pi
err := binary.Write(buf, binary.LittleEndian, pi)
if err != nil {
    fmt.Println(&#34;binary.Write failed:&#34;, err)
}
fmt.Printf(&#34;% x&#34;, buf.Bytes())
<span class="comment"></pre>
		
		<p>Output:</p>
		<pre class="output">18 2d 44 54 fb 21 09 40</pre>
		
	</div>
</div>
<div id="example_Write_multi" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example (Multi)</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example (Multi)</span></p>
		
		<p>Code:</p>
		<pre class="code">buf := new(bytes.Buffer)
var data = []interface{}{
    uint16(61374),
    int8(-54),
    uint8(254),
}
for _, v := range data {
    err := binary.Write(buf, binary.LittleEndian, v)
    if err != nil {
        fmt.Println(&#34;binary.Write failed:&#34;, err)
    }
}
fmt.Printf(&#34;%x&#34;, buf.Bytes())
<span class="comment"></pre>
		
		<p>Output:</p>
		<pre class="output">beefcafe</pre>
		
	</div>
</div>

		
		
			
			
			<h2 id="ByteOrder">type <a href="src/pkg/encoding/binary/binary.htm#L17">ByteOrder</a></h2>
			<pre>type ByteOrder interface {
    Uint16([]byte) uint16
    Uint32([]byte) uint32
    Uint64([]byte) uint64
    PutUint16([]byte, uint16)
    PutUint32([]byte, uint32)
    PutUint64([]byte, uint64)
    String() string
}</pre>
			<p>
A ByteOrder specifies how to convert byte sequences into
16-, 32-, or 64-bit unsigned integers.
</p>


			

			

			

			

			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
