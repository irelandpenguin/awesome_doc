
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>hex - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package hex</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "encoding/hex"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package hex implements hexadecimal encoding and decoding.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
				<dd><a href="#variables">Variables</a></dd>
			
			
				
				<dd><a href="#Decode">func Decode(dst, src []byte) (int, error)</a></dd>
			
				
				<dd><a href="#DecodeString">func DecodeString(s string) ([]byte, error)</a></dd>
			
				
				<dd><a href="#DecodedLen">func DecodedLen(x int) int</a></dd>
			
				
				<dd><a href="#Dump">func Dump(data []byte) string</a></dd>
			
				
				<dd><a href="#Dumper">func Dumper(w io.Writer) io.WriteCloser</a></dd>
			
				
				<dd><a href="#Encode">func Encode(dst, src []byte) int</a></dd>
			
				
				<dd><a href="#EncodeToString">func EncodeToString(src []byte) string</a></dd>
			
				
				<dd><a href="#EncodedLen">func EncodedLen(n int) int</a></dd>
			
			
				
				<dd><a href="#InvalidByteError">type InvalidByteError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#InvalidByteError.Error">func (e InvalidByteError) Error() string</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/encoding/hex/hex.htm">hex.go</a>
			
			</span>
			</p>
		
	
		
		
			<h2 id="variables">Variables</h2>
			
				<pre>var ErrLength = errors.New(&#34;encoding/hex: odd length hex string&#34;)</pre>
				<p>
ErrLength results from decoding an odd length slice.
</p>

			
		
		
			
			
			<h2 id="Decode">func <a href="src/pkg/encoding/hex/hex.htm#L39">Decode</a></h2>
			<pre>func Decode(dst, src []byte) (int, error)</pre>
			<p>
Decode decodes src into DecodedLen(len(src)) bytes, returning the actual
number of bytes written to dst.
</p>
<p>
If Decode encounters invalid input, it returns an error describing the failure.
</p>

			
		
			
			
			<h2 id="DecodeString">func <a href="src/pkg/encoding/hex/hex.htm#L81">DecodeString</a></h2>
			<pre>func DecodeString(s string) ([]byte, error)</pre>
			<p>
DecodeString returns the bytes represented by the hexadecimal string s.
</p>

			
		
			
			
			<h2 id="DecodedLen">func <a href="src/pkg/encoding/hex/hex.htm#L33">DecodedLen</a></h2>
			<pre>func DecodedLen(x int) int</pre>
			
			
		
			
			
			<h2 id="Dump">func <a href="src/pkg/encoding/hex/hex.htm#L93">Dump</a></h2>
			<pre>func Dump(data []byte) string</pre>
			<p>
Dump returns a string that contains a hex dump of the given data. The format
of the hex dump matches the output of `hexdump -C` on the command line.
</p>

			
		
			
			
			<h2 id="Dumper">func <a href="src/pkg/encoding/hex/hex.htm#L104">Dumper</a></h2>
			<pre>func Dumper(w io.Writer) io.WriteCloser</pre>
			<p>
Dumper returns a WriteCloser that writes a hex dump of all written data to
w. The format of the dump matches the output of `hexdump -C` on the command
line.
</p>

			
		
			
			
			<h2 id="Encode">func <a href="src/pkg/encoding/hex/hex.htm#L14">Encode</a></h2>
			<pre>func Encode(dst, src []byte) int</pre>
			<p>
Encode encodes src into EncodedLen(len(src))
bytes of dst.  As a convenience, it returns the number
of bytes written to dst, but this value is always EncodedLen(len(src)).
Encode implements hexadecimal encoding.
</p>

			
		
			
			
			<h2 id="EncodeToString">func <a href="src/pkg/encoding/hex/hex.htm#L74">EncodeToString</a></h2>
			<pre>func EncodeToString(src []byte) string</pre>
			<p>
EncodeToString returns the hexadecimal encoding of src.
</p>

			
		
			
			
			<h2 id="EncodedLen">func <a href="src/pkg/encoding/hex/hex.htm#L8">EncodedLen</a></h2>
			<pre>func EncodedLen(n int) int</pre>
			<p>
EncodedLen returns the length of an encoding of n source bytes.
</p>

			
		
		
			
			
			<h2 id="InvalidByteError">type <a href="src/pkg/encoding/hex/hex.htm#L27">InvalidByteError</a></h2>
			<pre>type InvalidByteError byte</pre>
			<p>
InvalidByteError values describe errors resulting from an invalid byte in a hex string.
</p>


			

			

			

			

			
				
				<h3 id="InvalidByteError.Error">func (InvalidByteError) <a href="src/pkg/encoding/hex/hex.htm#L29">Error</a></h3>
				<pre>func (e InvalidByteError) Error() string</pre>
				
				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
