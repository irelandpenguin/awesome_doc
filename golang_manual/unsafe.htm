
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>unsafe - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package unsafe</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "unsafe"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package unsafe contains operations that step around the type safety of Go programs.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#Alignof">func Alignof(v ArbitraryType) uintptr</a></dd>
			
				
				<dd><a href="#Offsetof">func Offsetof(v ArbitraryType) uintptr</a></dd>
			
				
				<dd><a href="#Sizeof">func Sizeof(v ArbitraryType) uintptr</a></dd>
			
			
				
				<dd><a href="#ArbitraryType">type ArbitraryType</a></dd>
				
				
			
				
				<dd><a href="#Pointer">type Pointer</a></dd>
				
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/unsafe/unsafe.htm">unsafe.go</a>
			
			</span>
			</p>
		
	
		
		
		
			
			
			<h2 id="Alignof">func <a href="src/pkg/unsafe/unsafe.htm#L27">Alignof</a></h2>
			<pre>func Alignof(v ArbitraryType) uintptr</pre>
			<p>
Alignof returns the alignment of the value v.  It is the maximum value m such
that the address of a variable with the type of v will always always be zero mod m.
If v is of the form structValue.field, it returns the alignment of field f within struct object obj.
</p>

			
		
			
			
			<h2 id="Offsetof">func <a href="src/pkg/unsafe/unsafe.htm#L22">Offsetof</a></h2>
			<pre>func Offsetof(v ArbitraryType) uintptr</pre>
			<p>
Offsetof returns the offset within the struct of the field represented by v,
which must be of the form structValue.field.  In other words, it returns the
number of bytes between the start of the struct and the start of the field.
</p>

			
		
			
			
			<h2 id="Sizeof">func <a href="src/pkg/unsafe/unsafe.htm#L17">Sizeof</a></h2>
			<pre>func Sizeof(v ArbitraryType) uintptr</pre>
			<p>
Sizeof returns the size in bytes occupied by the value v.  The size is that of the
&#34;top level&#34; of the value only.  For instance, if v is a slice, it returns the size of
the slice descriptor, not the size of the memory referenced by the slice.
</p>

			
		
		
			
			
			<h2 id="ArbitraryType">type <a href="src/pkg/unsafe/unsafe.htm#L2">ArbitraryType</a></h2>
			<pre>type ArbitraryType int</pre>
			<p>
ArbitraryType is here for the purposes of documentation only and is not actually
part of the unsafe package.  It represents the type of an arbitrary Go expression.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Pointer">type <a href="src/pkg/unsafe/unsafe.htm#L12">Pointer</a></h2>
			<pre>type Pointer *ArbitraryType</pre>
			<p>
Pointer represents a pointer to an arbitrary type.  There are three special operations
available for type Pointer that are not available for other types.
</p>
<pre>1) A pointer value of any type can be converted to a Pointer.
2) A Pointer can be converted to a pointer value of any type.
3) A uintptr can be converted to a Pointer.
4) A Pointer can be converted to a uintptr.
</pre>
<p>
Pointer therefore allows a program to defeat the type system and read and write
arbitrary memory. It should be used with extreme care.
</p>


			

			

			

			

			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
