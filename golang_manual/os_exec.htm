
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>exec - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package exec</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "os/exec"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
				<dd><a href="#examples">Examples</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package exec runs external commands. It wraps os.StartProcess to make it
easier to remap stdin and stdout, connect I/O with pipes, and do other
adjustments.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
				<dd><a href="#variables">Variables</a></dd>
			
			
				
				<dd><a href="#LookPath">func LookPath(file string) (string, error)</a></dd>
			
			
				
				<dd><a href="#Cmd">type Cmd</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Command">func Command(name string, arg ...string) *Cmd</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Cmd.CombinedOutput">func (c *Cmd) CombinedOutput() ([]byte, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Cmd.Output">func (c *Cmd) Output() ([]byte, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Cmd.Run">func (c *Cmd) Run() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Cmd.Start">func (c *Cmd) Start() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Cmd.StderrPipe">func (c *Cmd) StderrPipe() (io.ReadCloser, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Cmd.StdinPipe">func (c *Cmd) StdinPipe() (io.WriteCloser, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Cmd.StdoutPipe">func (c *Cmd) StdoutPipe() (io.ReadCloser, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Cmd.Wait">func (c *Cmd) Wait() error</a></dd>
				
			
				
				<dd><a href="#Error">type Error</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Error.Error">func (e *Error) Error() string</a></dd>
				
			
				
				<dd><a href="#ExitError">type ExitError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#ExitError.Error">func (e *ExitError) Error() string</a></dd>
				
			
			
		</dl>

		
			<h4 id="examples">Examples</h4>
			<dl>
			
			<dd><a class="exampleLink" href="#example_Cmd_Output">Cmd.Output</a></dd>
			
			<dd><a class="exampleLink" href="#example_Cmd_Start">Cmd.Start</a></dd>
			
			<dd><a class="exampleLink" href="#example_Cmd_StdoutPipe">Cmd.StdoutPipe</a></dd>
			
			<dd><a class="exampleLink" href="#example_Command">Command</a></dd>
			
			<dd><a class="exampleLink" href="#example_LookPath">LookPath</a></dd>
			
			</dl>
		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/os/exec/exec.htm">exec.go</a>
			
				<a href="src/pkg/os/exec/lp_unix.htm">lp_unix.go</a>
			
			</span>
			</p>
		
	
		
		
			<h2 id="variables">Variables</h2>
			
				<pre>var ErrNotFound = errors.New(&#34;executable file not found in $PATH&#34;)</pre>
				<p>
ErrNotFound is the error resulting if a path search failed to find an executable file.
</p>

			
		
		
			
			
			<h2 id="LookPath">func <a href="src/pkg/os/exec/lp_unix.htm#L22">LookPath</a></h2>
			<pre>func LookPath(file string) (string, error)</pre>
			<p>
LookPath searches for an executable binary named file
in the directories named by the PATH environment variable.
If file contains a slash, it is tried directly and the PATH is not consulted.
</p>

			<div id="example_LookPath" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">
path, err := exec.LookPath(&#34;fortune&#34;)
if err != nil {
    log.Fatal(&#34;installing fortune is in your future&#34;)
}
fmt.Printf(&#34;fortune is available at %s\n&#34;, path)
</pre>
		
	</div>
</div>

		
		
			
			
			<h2 id="Cmd">type <a href="src/pkg/os/exec/exec.htm#L21">Cmd</a></h2>
			<pre>type Cmd struct {
    <span class="comment">// Path is the path of the command to run.</span>
    <span class="comment">//</span>
    <span class="comment">// This is the only field that must be set to a non-zero</span>
    <span class="comment">// value.</span>
    Path string

    <span class="comment">// Args holds command line arguments, including the command as Args[0].</span>
    <span class="comment">// If the Args field is empty or nil, Run uses {Path}.</span>
    <span class="comment">// </span>
    <span class="comment">// In typical use, both Path and Args are set by calling Command.</span>
    Args []string

    <span class="comment">// Env specifies the environment of the process.</span>
    <span class="comment">// If Env is nil, Run uses the current process&#39;s environment.</span>
    Env []string

    <span class="comment">// Dir specifies the working directory of the command.</span>
    <span class="comment">// If Dir is the empty string, Run runs the command in the</span>
    <span class="comment">// calling process&#39;s current directory.</span>
    Dir string

    <span class="comment">// Stdin specifies the process&#39;s standard input. If Stdin is</span>
    <span class="comment">// nil, the process reads from the null device (os.DevNull).</span>
    Stdin io.Reader

    <span class="comment">// Stdout and Stderr specify the process&#39;s standard output and error.</span>
    <span class="comment">//</span>
    <span class="comment">// If either is nil, Run connects the corresponding file descriptor</span>
    <span class="comment">// to the null device (os.DevNull).</span>
    <span class="comment">//</span>
    <span class="comment">// If Stdout and Stderr are the same writer, at most one</span>
    <span class="comment">// goroutine at a time will call Write.</span>
    Stdout io.Writer
    Stderr io.Writer

    <span class="comment">// ExtraFiles specifies additional open files to be inherited by the</span>
    <span class="comment">// new process. It does not include standard input, standard output, or</span>
    <span class="comment">// standard error. If non-nil, entry i becomes file descriptor 3+i.</span>
    <span class="comment">//</span>
    <span class="comment">// BUG: on OS X 10.6, child processes may sometimes inherit unwanted fds.</span>
    <span class="comment">// http://golang.org/issue/2603</span>
    ExtraFiles []*os.File

    <span class="comment">// SysProcAttr holds optional, operating system-specific attributes.</span>
    <span class="comment">// Run passes it to os.StartProcess as the os.ProcAttr&#39;s Sys field.</span>
    SysProcAttr *syscall.SysProcAttr

    <span class="comment">// Process is the underlying process, once started.</span>
    Process *os.Process

    <span class="comment">// ProcessState contains information about an exited process,</span>
    <span class="comment">// available after a call to Wait or Run.</span>
    ProcessState *os.ProcessState
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Cmd represents an external command being prepared or run.
</p>


			

			

			

			
				
				<h3 id="Command">func <a href="src/pkg/os/exec/exec.htm#L98">Command</a></h3>
				<pre>func Command(name string, arg ...string) *Cmd</pre>
				<p>
Command returns the Cmd struct to execute the named program with
the given arguments.
</p>
<p>
It sets Path and Args in the returned structure and zeroes the
other fields.
</p>
<p>
If name contains no path separators, Command uses LookPath to
resolve the path to a complete name if possible. Otherwise it uses
name directly.
</p>
<p>
The returned Cmd&#39;s Args field is constructed from the command name
followed by the elements of arg, so arg should not include the
command name itself. For example, Command(&#34;echo&#34;, &#34;hello&#34;)
</p>

				<div id="example_Command" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">
cmd := exec.Command(&#34;tr&#34;, &#34;a-z&#34;, &#34;A-Z&#34;)
cmd.Stdin = strings.NewReader(&#34;some input&#34;)
var out bytes.Buffer
cmd.Stdout = &amp;out
err := cmd.Run()
if err != nil {
    log.Fatal(err)
}
fmt.Printf(&#34;in all caps: %q\n&#34;, out.String())
</pre>
		
	</div>
</div>

			

			
				
				<h3 id="Cmd.CombinedOutput">func (*Cmd) <a href="src/pkg/os/exec/exec.htm#L320">CombinedOutput</a></h3>
				<pre>func (c *Cmd) CombinedOutput() ([]byte, error)</pre>
				<p>
CombinedOutput runs the command and returns its combined standard
output and standard error.
</p>

				
				
			
				
				<h3 id="Cmd.Output">func (*Cmd) <a href="src/pkg/os/exec/exec.htm#L308">Output</a></h3>
				<pre>func (c *Cmd) Output() ([]byte, error)</pre>
				<p>
Output runs the command and returns its standard output.
</p>

				
				<div id="example_Cmd_Output" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">
out, err := exec.Command(&#34;date&#34;).Output()
if err != nil {
    log.Fatal(err)
}
fmt.Printf(&#34;The date is %s\n&#34;, out)
</pre>
		
	</div>
</div>

			
				
				<h3 id="Cmd.Run">func (*Cmd) <a href="src/pkg/os/exec/exec.htm#L206">Run</a></h3>
				<pre>func (c *Cmd) Run() error</pre>
				<p>
Run starts the specified command and waits for it to complete.
</p>
<p>
The returned error is nil if the command runs, has no problems
copying stdin, stdout, and stderr, and exits with a zero exit
status.
</p>
<p>
If the command fails to run or doesn&#39;t complete successfully, the
error is of type *ExitError. Other error types may be
returned for I/O problems.
</p>

				
				
			
				
				<h3 id="Cmd.Start">func (*Cmd) <a href="src/pkg/os/exec/exec.htm#L214">Start</a></h3>
				<pre>func (c *Cmd) Start() error</pre>
				<p>
Start starts the specified command but does not wait for it to complete.
</p>

				
				<div id="example_Cmd_Start" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">
cmd := exec.Command(&#34;sleep&#34;, &#34;5&#34;)
err := cmd.Start()
if err != nil {
    log.Fatal(err)
}
log.Printf(&#34;Waiting for command to finish...&#34;)
err = cmd.Wait()
log.Printf(&#34;Command finished with error: %v&#34;, err)
</pre>
		
	</div>
</div>

			
				
				<h3 id="Cmd.StderrPipe">func (*Cmd) <a href="src/pkg/os/exec/exec.htm#L376">StderrPipe</a></h3>
				<pre>func (c *Cmd) StderrPipe() (io.ReadCloser, error)</pre>
				<p>
StderrPipe returns a pipe that will be connected to the command&#39;s
standard error when the command starts.
The pipe will be closed automatically after Wait sees the command exit.
</p>

				
				
			
				
				<h3 id="Cmd.StdinPipe">func (*Cmd) <a href="src/pkg/os/exec/exec.htm#L336">StdinPipe</a></h3>
				<pre>func (c *Cmd) StdinPipe() (io.WriteCloser, error)</pre>
				<p>
StdinPipe returns a pipe that will be connected to the command&#39;s
standard input when the command starts.
</p>

				
				
			
				
				<h3 id="Cmd.StdoutPipe">func (*Cmd) <a href="src/pkg/os/exec/exec.htm#L356">StdoutPipe</a></h3>
				<pre>func (c *Cmd) StdoutPipe() (io.ReadCloser, error)</pre>
				<p>
StdoutPipe returns a pipe that will be connected to the command&#39;s
standard output when the command starts.
The pipe will be closed automatically after Wait sees the command exit.
</p>

				
				<div id="example_Cmd_StdoutPipe" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">
cmd := exec.Command(&#34;echo&#34;, &#34;-n&#34;, `{&#34;Name&#34;: &#34;Bob&#34;, &#34;Age&#34;: 32}`)
stdout, err := cmd.StdoutPipe()
if err != nil {
    log.Fatal(err)
}
if err := cmd.Start(); err != nil {
    log.Fatal(err)
}
var person struct {
    Name string
    Age  int
}
if err := json.NewDecoder(stdout).Decode(&amp;person); err != nil {
    log.Fatal(err)
}
if err := cmd.Wait(); err != nil {
    log.Fatal(err)
}
fmt.Printf(&#34;%s is %d years old\n&#34;, person.Name, person.Age)
</pre>
		
	</div>
</div>

			
				
				<h3 id="Cmd.Wait">func (*Cmd) <a href="src/pkg/os/exec/exec.htm#L276">Wait</a></h3>
				<pre>func (c *Cmd) Wait() error</pre>
				<p>
Wait waits for the command to exit.
It must have been started by Start.
</p>
<p>
The returned error is nil if the command runs, has no problems
copying stdin, stdout, and stderr, and exits with a zero exit
status.
</p>
<p>
If the command fails to run or doesn&#39;t complete successfully, the
error is of type *ExitError. Other error types may be
returned for I/O problems.
</p>

				
				
			
		
			
			
			<h2 id="Error">type <a href="src/pkg/os/exec/exec.htm#L11">Error</a></h2>
			<pre>type Error struct {
    Name string
    Err  error
}</pre>
			<p>
Error records the name of a binary that failed to be be executed
and the reason it failed.
</p>


			

			

			

			

			
				
				<h3 id="Error.Error">func (*Error) <a href="src/pkg/os/exec/exec.htm#L16">Error</a></h3>
				<pre>func (e *Error) Error() string</pre>
				
				
				
			
		
			
			
			<h2 id="ExitError">type <a href="src/pkg/os/exec/exec.htm#L258">ExitError</a></h2>
			<pre>type ExitError struct {
    *os.ProcessState
}</pre>
			<p>
An ExitError reports an unsuccessful exit by a command.
</p>


			

			

			

			

			
				
				<h3 id="ExitError.Error">func (*ExitError) <a href="src/pkg/os/exec/exec.htm#L262">Error</a></h3>
				<pre>func (e *ExitError) Error() string</pre>
				
				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
