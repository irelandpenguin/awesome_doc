
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>mime - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package mime</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "mime"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
				<dd><a href="#subdirectories">Subdirectories</a></dd>
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package mime implements parts of the MIME spec.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#AddExtensionType">func AddExtensionType(ext, typ string) error</a></dd>
			
				
				<dd><a href="#FormatMediaType">func FormatMediaType(t string, param map[string]string) string</a></dd>
			
				
				<dd><a href="#ParseMediaType">func ParseMediaType(v string) (mediatype string, params map[string]string, err error)</a></dd>
			
				
				<dd><a href="#TypeByExtension">func TypeByExtension(ext string) string</a></dd>
			
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/mime/grammar.htm">grammar.go</a>
			
				<a href="src/pkg/mime/mediatype.htm">mediatype.go</a>
			
				<a href="src/pkg/mime/type.htm">type.go</a>
			
				<a href="src/pkg/mime/type_unix.htm">type_unix.go</a>
			
			</span>
			</p>
		
	
		
		
		
			
			
			<h2 id="AddExtensionType">func <a href="src/pkg/mime/type.htm#L46">AddExtensionType</a></h2>
			<pre>func AddExtensionType(ext, typ string) error</pre>
			<p>
AddExtensionType sets the MIME type associated with
the extension ext to typ.  The extension should begin with
a leading dot, as in &#34;.html&#34;.
</p>

			
		
			
			
			<h2 id="FormatMediaType">func <a href="src/pkg/mime/mediatype.htm#L10">FormatMediaType</a></h2>
			<pre>func FormatMediaType(t string, param map[string]string) string</pre>
			<p>
FormatMediaType serializes mediatype t and the parameters
param as a media type conforming to RFC 2045 and RFC 2616.
The type and parameter names are written in lower-case.
When any of the arguments result in a standard violation then
FormatMediaType returns the empty string.
</p>

			
		
			
			
			<h2 id="ParseMediaType">func <a href="src/pkg/mime/mediatype.htm#L83">ParseMediaType</a></h2>
			<pre>func ParseMediaType(v string) (mediatype string, params map[string]string, err error)</pre>
			<p>
ParseMediaType parses a media type value and any optional
parameters, per RFC 1521.  Media types are the values in
Content-Type and Content-Disposition headers (RFC 2183).
On success, ParseMediaType returns the media type converted
to lowercase and trimmed of white space and a non-nil map.
The returned map, params, maps from the lowercase
attribute to the attribute value with its case preserved.
</p>

			
		
			
			
			<h2 id="TypeByExtension">func <a href="src/pkg/mime/type.htm#L35">TypeByExtension</a></h2>
			<pre>func TypeByExtension(ext string) string</pre>
			<p>
TypeByExtension returns the MIME type associated with the file extension ext.
The extension ext should begin with a leading dot, as in &#34;.html&#34;.
When ext has no associated type, TypeByExtension returns &#34;&#34;.
</p>
<p>
The built-in table is small but on unix it is augmented by the local
system&#39;s mime.types file(s) if available under one or more of these
names:
</p>
<pre>/etc/mime.types
/etc/apache2/mime.types
/etc/apache/mime.types
</pre>
<p>
Windows system mime types are extracted from registry.
</p>
<p>
Text types have the charset parameter set to &#34;utf-8&#34; by default.
</p>

			
		
		
		</div>
	

	







	
	
		<h2 id="subdirectories">Subdirectories</h2>
	
	<table class="dir">
	<tr>
	<th>Name</th>
	<th>&nbsp;&nbsp;&nbsp;&nbsp;</th>
	<th style="text-align: left; width: auto">Synopsis</th>
	</tr>

	
		
			<tr>
			<td class="name"><a href="mime_multipart.htm">multipart</a></td>
			<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
			<td style="width: auto">Package multipart implements MIME multipart parsing, as defined in RFC 2046.</td>
			</tr>
		
	
	</table>
	



</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
