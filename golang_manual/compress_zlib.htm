
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>zlib - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package zlib</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "compress/zlib"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package zlib implements reading and writing of zlib format compressed data,
as specified in RFC 1950.
</p>
<p>
The implementation provides filters that uncompress during reading
and compress during writing.  For example, to write compressed data
to a buffer:
</p>
<pre>var b bytes.Buffer
w, err := zlib.NewWriter(&amp;b)
w.Write([]byte(&#34;hello, world\n&#34;))
w.Close()
</pre>
<p>
and to read that data back:
</p>
<pre>r, err := zlib.NewReader(&amp;b)
io.Copy(os.Stdout, r)
r.Close()
</pre>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
				<dd><a href="#constants">Constants</a></dd>
			
			
				<dd><a href="#variables">Variables</a></dd>
			
			
				
				<dd><a href="#NewReader">func NewReader(r io.Reader) (io.ReadCloser, error)</a></dd>
			
				
				<dd><a href="#NewReaderDict">func NewReaderDict(r io.Reader, dict []byte) (io.ReadCloser, error)</a></dd>
			
			
				
				<dd><a href="#Writer">type Writer</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewWriter">func NewWriter(w io.Writer) *Writer</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewWriterLevel">func NewWriterLevel(w io.Writer, level int) (*Writer, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewWriterLevelDict">func NewWriterLevelDict(w io.Writer, level int, dict []byte) (*Writer, error)</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Close">func (z *Writer) Close() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Flush">func (z *Writer) Flush() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Write">func (z *Writer) Write(p []byte) (n int, err error)</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/compress/zlib/reader.htm">reader.go</a>
			
				<a href="src/pkg/compress/zlib/writer.htm">writer.go</a>
			
			</span>
			</p>
		
	
		
			<h2 id="constants">Constants</h2>
			
				<pre>const (
    NoCompression      = flate.NoCompression
    BestSpeed          = flate.BestSpeed
    BestCompression    = flate.BestCompression
    DefaultCompression = flate.DefaultCompression
)</pre>
				<p>
These constants are copied from the flate package, so that code that imports
&#34;compress/zlib&#34; does not also have to import &#34;compress/flate&#34;.
</p>

			
		
		
			<h2 id="variables">Variables</h2>
			
				<pre>var (
    <span class="comment">// ErrChecksum is returned when reading ZLIB data that has an invalid checksum.</span>
    ErrChecksum = errors.New(&#34;zlib: invalid checksum&#34;)
    <span class="comment">// ErrDictionary is returned when reading ZLIB data that has an invalid dictionary.</span>
    ErrDictionary = errors.New(&#34;zlib: invalid dictionary&#34;)
    <span class="comment">// ErrHeader is returned when reading ZLIB data that has an invalid header.</span>
    ErrHeader = errors.New(&#34;zlib: invalid header&#34;)
)</pre>
				
			
		
		
			
			
			<h2 id="NewReader">func <a href="src/pkg/compress/zlib/reader.htm#L47">NewReader</a></h2>
			<pre>func NewReader(r io.Reader) (io.ReadCloser, error)</pre>
			<p>
NewReader creates a new io.ReadCloser that satisfies reads by decompressing data read from r.
The implementation buffers input and may read more data than necessary from r.
It is the caller&#39;s responsibility to call Close on the ReadCloser when done.
</p>

			
		
			
			
			<h2 id="NewReaderDict">func <a href="src/pkg/compress/zlib/reader.htm#L53">NewReaderDict</a></h2>
			<pre>func NewReaderDict(r io.Reader, dict []byte) (io.ReadCloser, error)</pre>
			<p>
NewReaderDict is like NewReader but uses a preset dictionary.
NewReaderDict ignores the dictionary if the compressed data does not refer to it.
</p>

			
		
		
			
			
			<h2 id="Writer">type <a href="src/pkg/compress/zlib/writer.htm#L16">Writer</a></h2>
			<pre>type Writer struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A Writer takes data written to it and writes the compressed
form of that data to an underlying writer (see NewWriter).
</p>


			

			

			

			
				
				<h3 id="NewWriter">func <a href="src/pkg/compress/zlib/writer.htm#L32">NewWriter</a></h3>
				<pre>func NewWriter(w io.Writer) *Writer</pre>
				<p>
NewWriter creates a new Writer that satisfies writes by compressing data
written to w.
</p>
<p>
It is the caller&#39;s responsibility to call Close on the WriteCloser when done.
Writes may be buffered and not flushed until Close.
</p>

				
			
				
				<h3 id="NewWriterLevel">func <a href="src/pkg/compress/zlib/writer.htm#L43">NewWriterLevel</a></h3>
				<pre>func NewWriterLevel(w io.Writer, level int) (*Writer, error)</pre>
				<p>
NewWriterLevel is like NewWriter but specifies the compression level instead
of assuming DefaultCompression.
</p>
<p>
The compression level can be DefaultCompression, NoCompression, or any
integer value between BestSpeed and BestCompression inclusive. The error
returned will be nil if the level is valid.
</p>

				
			
				
				<h3 id="NewWriterLevelDict">func <a href="src/pkg/compress/zlib/writer.htm#L52">NewWriterLevelDict</a></h3>
				<pre>func NewWriterLevelDict(w io.Writer, level int, dict []byte) (*Writer, error)</pre>
				<p>
NewWriterLevelDict is like NewWriterLevel but specifies a dictionary to
compress with.
</p>
<p>
The dictionary may be nil. If not, its contents should not be modified until
the Writer is closed.
</p>

				
			

			
				
				<h3 id="Writer.Close">func (*Writer) <a href="src/pkg/compress/zlib/writer.htm#L147">Close</a></h3>
				<pre>func (z *Writer) Close() error</pre>
				<p>
Calling Close does not close the wrapped io.Writer originally passed to NewWriter.
</p>

				
				
			
				
				<h3 id="Writer.Flush">func (*Writer) <a href="src/pkg/compress/zlib/writer.htm#L135">Flush</a></h3>
				<pre>func (z *Writer) Flush() error</pre>
				<p>
Flush flushes the Writer to its underlying io.Writer.
</p>

				
				
			
				
				<h3 id="Writer.Write">func (*Writer) <a href="src/pkg/compress/zlib/writer.htm#L115">Write</a></h3>
				<pre>func (z *Writer) Write(p []byte) (n int, err error)</pre>
				<p>
Write writes a compressed form of p to the underlying io.Writer. The
compressed bytes are not necessarily flushed until the Writer is closed or
explicitly flushed.
</p>

				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
