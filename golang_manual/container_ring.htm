
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>ring - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package ring</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "container/ring"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package ring implements operations on circular lists.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
			
				
				<dd><a href="#Ring">type Ring</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#New">func New(n int) *Ring</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Ring.Do">func (r *Ring) Do(f func(interface{}))</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Ring.Len">func (r *Ring) Len() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Ring.Link">func (r *Ring) Link(s *Ring) *Ring</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Ring.Move">func (r *Ring) Move(n int) *Ring</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Ring.Next">func (r *Ring) Next() *Ring</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Ring.Prev">func (r *Ring) Prev() *Ring</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Ring.Unlink">func (r *Ring) Unlink(n int) *Ring</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/container/ring/ring.htm">ring.go</a>
			
			</span>
			</p>
		
	
		
		
		
		
			
			
			<h2 id="Ring">type <a href="src/pkg/container/ring/ring.htm#L4">Ring</a></h2>
			<pre>type Ring struct {
    Value interface{} <span class="comment">// for use by client; untouched by this library</span>
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A Ring is an element of a circular list, or ring.
Rings do not have a beginning or end; a pointer to any ring element
serves as reference to the entire ring. Empty rings are represented
as nil Ring pointers. The zero value for a Ring is a one-element
ring with a nil Value.
</p>


			

			

			

			
				
				<h3 id="New">func <a href="src/pkg/container/ring/ring.htm#L52">New</a></h3>
				<pre>func New(n int) *Ring</pre>
				<p>
New creates a ring of n elements.
</p>

				
			

			
				
				<h3 id="Ring.Do">func (*Ring) <a href="src/pkg/container/ring/ring.htm#L124">Do</a></h3>
				<pre>func (r *Ring) Do(f func(interface{}))</pre>
				<p>
Do calls function f on each element of the ring, in forward order.
The behavior of Do is undefined if f changes *r.
</p>

				
				
			
				
				<h3 id="Ring.Len">func (*Ring) <a href="src/pkg/container/ring/ring.htm#L111">Len</a></h3>
				<pre>func (r *Ring) Len() int</pre>
				<p>
Len computes the number of elements in ring r.
It executes in time proportional to the number of elements.
</p>

				
				
			
				
				<h3 id="Ring.Link">func (*Ring) <a href="src/pkg/container/ring/ring.htm#L83">Link</a></h3>
				<pre>func (r *Ring) Link(s *Ring) *Ring</pre>
				<p>
Link connects ring r with with ring s such that r.Next()
becomes s and returns the original value for r.Next().
r must not be empty.
</p>
<p>
If r and s point to the same ring, linking
them removes the elements between r and s from the ring.
The removed elements form a subring and the result is a
reference to that subring (if no elements were removed,
the result is still the original value for r.Next(),
and not nil).
</p>
<p>
If r and s point to different rings, linking
them creates a single ring with the elements of s inserted
after r. The result points to the element following the
last element of s after insertion.
</p>

				
				
			
				
				<h3 id="Ring.Move">func (*Ring) <a href="src/pkg/container/ring/ring.htm#L34">Move</a></h3>
				<pre>func (r *Ring) Move(n int) *Ring</pre>
				<p>
Move moves n % r.Len() elements backward (n &lt; 0) or forward (n &gt;= 0)
in the ring and returns that ring element. r must not be empty.
</p>

				
				
			
				
				<h3 id="Ring.Next">func (*Ring) <a href="src/pkg/container/ring/ring.htm#L16">Next</a></h3>
				<pre>func (r *Ring) Next() *Ring</pre>
				<p>
Next returns the next ring element. r must not be empty.
</p>

				
				
			
				
				<h3 id="Ring.Prev">func (*Ring) <a href="src/pkg/container/ring/ring.htm#L24">Prev</a></h3>
				<pre>func (r *Ring) Prev() *Ring</pre>
				<p>
Prev returns the previous ring element. r must not be empty.
</p>

				
				
			
				
				<h3 id="Ring.Unlink">func (*Ring) <a href="src/pkg/container/ring/ring.htm#L101">Unlink</a></h3>
				<pre>func (r *Ring) Unlink(n int) *Ring</pre>
				<p>
Unlink removes n % r.Len() elements from the ring r, starting
at r.Next(). If n % r.Len() == 0, r remains unchanged.
The result is the removed subring. r must not be empty.
</p>

				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
