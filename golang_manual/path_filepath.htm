<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>filepath - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package filepath</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "path/filepath"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package filepath implements utility routines for manipulating filename paths
in a way compatible with the target operating system-defined file paths.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
				<dd><a href="#constants">Constants</a></dd>
			
			
				<dd><a href="#variables">Variables</a></dd>
			
			
				
				<dd><a href="#Abs">func Abs(path string) (string, error)</a></dd>
			
				
				<dd><a href="#Base">func Base(path string) string</a></dd>
			
				
				<dd><a href="#Clean">func Clean(path string) string</a></dd>
			
				
				<dd><a href="#Dir">func Dir(path string) string</a></dd>
			
				
				<dd><a href="#EvalSymlinks">func EvalSymlinks(path string) (string, error)</a></dd>
			
				
				<dd><a href="#Ext">func Ext(path string) string</a></dd>
			
				
				<dd><a href="#FromSlash">func FromSlash(path string) string</a></dd>
			
				
				<dd><a href="#Glob">func Glob(pattern string) (matches []string, err error)</a></dd>
			
				
				<dd><a href="#HasPrefix">func HasPrefix(p, prefix string) bool</a></dd>
			
				
				<dd><a href="#IsAbs">func IsAbs(path string) bool</a></dd>
			
				
				<dd><a href="#Join">func Join(elem ...string) string</a></dd>
			
				
				<dd><a href="#Match">func Match(pattern, name string) (matched bool, err error)</a></dd>
			
				
				<dd><a href="#Rel">func Rel(basepath, targpath string) (string, error)</a></dd>
			
				
				<dd><a href="#Split">func Split(path string) (dir, file string)</a></dd>
			
				
				<dd><a href="#SplitList">func SplitList(path string) []string</a></dd>
			
				
				<dd><a href="#ToSlash">func ToSlash(path string) string</a></dd>
			
				
				<dd><a href="#VolumeName">func VolumeName(path string) string</a></dd>
			
				
				<dd><a href="#Walk">func Walk(root string, walkFn WalkFunc) error</a></dd>
			
			
				
				<dd><a href="#WalkFunc">type WalkFunc</a></dd>
				
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/path/filepath/match.htm">match.go</a>
			
				<a href="src/pkg/path/filepath/path.htm">path.go</a>
			
				<a href="src/pkg/path/filepath/path_unix.htm">path_unix.go</a>
			
				<a href="src/pkg/path/filepath/symlink.htm">symlink.go</a>
			
			</span>
			</p>
		
	
		
			<h2 id="constants">Constants</h2>
			
				<pre>const (
    Separator     = os.PathSeparator
    ListSeparator = os.PathListSeparator
)</pre>
				
			
		
		
			<h2 id="variables">Variables</h2>
			
				<pre>var ErrBadPattern = errors.New(&#34;syntax error in pattern&#34;)</pre>
				<p>
ErrBadPattern indicates a globbing pattern was malformed.
</p>

			
				<pre>var SkipDir = errors.New(&#34;skip this directory&#34;)</pre>
				<p>
SkipDir is used as a return value from WalkFuncs to indicate that
the directory named in the call is to be skipped. It is not returned
as an error by any function.
</p>

			
		
		
			
			
			<h2 id="Abs">func <a href="src/pkg/path/filepath/path.htm#L192">Abs</a></h2>
			<pre>func Abs(path string) (string, error)</pre>
			<p>
Abs returns an absolute representation of path.
If the path is not absolute it will be joined with the current
working directory to turn it into an absolute path.  The absolute
path name for a given file is not guaranteed to be unique.
</p>

			
		
			
			
			<h2 id="Base">func <a href="src/pkg/path/filepath/path.htm#L361">Base</a></h2>
			<pre>func Base(path string) string</pre>
			<p>
Base returns the last element of path.
Trailing path separators are removed before extracting the last element.
If the path is empty, Base returns &#34;.&#34;.
If the path consists entirely of separators, Base returns a single separator.
</p>

			
		
			
			
			<h2 id="Clean">func <a href="src/pkg/path/filepath/path.htm#L32">Clean</a></h2>
			<pre>func Clean(path string) string</pre>
			<p>
Clean returns the shortest path name equivalent to path
by purely lexical processing.  It applies the following rules
iteratively until no further processing can be done:
</p>
<pre>	1. Replace multiple Separator elements with a single one.
	2. Eliminate each . path name element (the current directory).
	3. Eliminate each inner .. path name element (the parent directory)
	   along with the non-.. element that precedes it.
	4. Eliminate .. elements that begin a rooted path:
	   that is, replace &#34;/..&#34; by &#34;/&#34; at the beginning of a path,
        assuming Separator is &#39;/&#39;.
</pre>
<p>
The returned path ends in a slash only if it represents a root directory,
such as &#34;/&#34; on Unix or `C:\` on Windows.
</p>
<p>
If the result of this process is an empty string, Clean
returns the string &#34;.&#34;.
</p>
<p>
See also Rob Pike, &ldquo;Lexical File Names in Plan 9 or
Getting Dot-Dot Right,&rdquo;
<a href="http://plan9.bell-labs.com/sys/doc/lexnames.html">http://plan9.bell-labs.com/sys/doc/lexnames.html</a>
</p>

			
		
			
			
			<h2 id="Dir">func <a href="src/pkg/path/filepath/path.htm#L391">Dir</a></h2>
			<pre>func Dir(path string) string</pre>
			<p>
Dir returns all but the last element of path, typically the path&#39;s directory.
Trailing path separators are removed before processing.
If the path is empty, Dir returns &#34;.&#34;.
If the path consists entirely of separators, Dir returns a single separator.
The returned path does not end in a separator unless it is the root directory.
</p>

			
		
			
			
			<h2 id="EvalSymlinks">func <a href="src/pkg/path/filepath/path.htm#L184">EvalSymlinks</a></h2>
			<pre>func EvalSymlinks(path string) (string, error)</pre>
			<p>
EvalSymlinks returns the path name after the evaluation of any symbolic
links.
If path is relative the result will be relative to the current directory,
unless one of the components is an absolute symbolic link.
</p>

			
		
			
			
			<h2 id="Ext">func <a href="src/pkg/path/filepath/path.htm#L171">Ext</a></h2>
			<pre>func Ext(path string) string</pre>
			<p>
Ext returns the file name extension used by path.
The extension is the suffix beginning at the final dot
in the final element of path; it is empty if there is
no dot.
</p>

			
		
			
			
			<h2 id="FromSlash">func <a href="src/pkg/path/filepath/path.htm#L124">FromSlash</a></h2>
			<pre>func FromSlash(path string) string</pre>
			<p>
FromSlash returns the result of replacing each slash (&#39;/&#39;) character
in path with a separator character. Multiple slashes are replaced
by multiple separators.
</p>

			
		
			
			
			<h2 id="Glob">func <a href="src/pkg/path/filepath/match.htm#L215">Glob</a></h2>
			<pre>func Glob(pattern string) (matches []string, err error)</pre>
			<p>
Glob returns the names of all files matching pattern or nil
if there is no matching file. The syntax of patterns is the same
as in Match. The pattern may describe hierarchical names such as
/usr/*/bin/ed (assuming the Separator is &#39;/&#39;).
</p>

			
		
			
			
			<h2 id="HasPrefix">func <a href="src/pkg/path/filepath/path_unix.htm#L13">HasPrefix</a></h2>
			<pre>func HasPrefix(p, prefix string) bool</pre>
			<p>
HasPrefix exists for historical compatibility and should not be used.
</p>

			
		
			
			
			<h2 id="IsAbs">func <a href="src/pkg/path/filepath/path_unix.htm#L2">IsAbs</a></h2>
			<pre>func IsAbs(path string) bool</pre>
			<p>
IsAbs returns true if the path is absolute.
</p>

			
		
			
			
			<h2 id="Join">func <a href="src/pkg/path/filepath/path.htm#L158">Join</a></h2>
			<pre>func Join(elem ...string) string</pre>
			<p>
Join joins any number of path elements into a single path, adding
a Separator if necessary. The result is Cleaned, in particular
all empty strings are ignored.
</p>

			
		
			
			
			<h2 id="Match">func <a href="src/pkg/path/filepath/match.htm#L34">Match</a></h2>
			<pre>func Match(pattern, name string) (matched bool, err error)</pre>
			<p>
Match returns true if name matches the shell file name pattern.
The pattern syntax is:
</p>
<pre>pattern:
	{ term }
term:
	&#39;*&#39;         matches any sequence of non-Separator characters
	&#39;?&#39;         matches any single non-Separator character
	&#39;[&#39; [ &#39;^&#39; ] { character-range } &#39;]&#39;
	            character class (must be non-empty)
	c           matches character c (c != &#39;*&#39;, &#39;?&#39;, &#39;\\&#39;, &#39;[&#39;)
	&#39;\\&#39; c      matches character c

character-range:
	c           matches character c (c != &#39;\\&#39;, &#39;-&#39;, &#39;]&#39;)
	&#39;\\&#39; c      matches character c
	lo &#39;-&#39; hi   matches character c for lo &lt;= c &lt;= hi
</pre>
<p>
Match requires pattern to match all of name, not just a substring.
The only possible returned error is ErrBadPattern, when pattern
is malformed.
</p>
<p>
On Windows, escaping is disabled. Instead, &#39;\\&#39; is treated as
path separator.
</p>

			
		
			
			
			<h2 id="Rel">func <a href="src/pkg/path/filepath/path.htm#L210">Rel</a></h2>
			<pre>func Rel(basepath, targpath string) (string, error)</pre>
			<p>
Rel returns a relative path that is lexically equivalent to targpath when
joined to basepath with an intervening separator. That is,
Join(basepath, Rel(basepath, targpath)) is equivalent to targpath itself.
On success, the returned path will always be relative to basepath,
even if basepath and targpath share no elements.
An error is returned if targpath can&#39;t be made relative to basepath or if
knowing the current working directory would be necessary to compute it.
</p>

			
		
			
			
			<h2 id="Split">func <a href="src/pkg/path/filepath/path.htm#L146">Split</a></h2>
			<pre>func Split(path string) (dir, file string)</pre>
			<p>
Split splits path immediately following the final Separator,
separating it into a directory and file name component.
If there is no Separator in path, Split returns an empty dir
and file set to path.
The returned values have the property that path = dir+file.
</p>

			
		
			
			
			<h2 id="SplitList">func <a href="src/pkg/path/filepath/path.htm#L134">SplitList</a></h2>
			<pre>func SplitList(path string) []string</pre>
			<p>
SplitList splits a list of paths joined by the OS-specific ListSeparator,
usually found in PATH or GOPATH environment variables.
Unlike strings.Split, SplitList returns an empty slice when passed an empty string.
</p>

			
		
			
			
			<h2 id="ToSlash">func <a href="src/pkg/path/filepath/path.htm#L114">ToSlash</a></h2>
			<pre>func ToSlash(path string) string</pre>
			<p>
ToSlash returns the result of replacing each separator character
in path with a slash (&#39;/&#39;) character. Multiple separators are
replaced by multiple slashes.
</p>

			
		
			
			
			<h2 id="VolumeName">func <a href="src/pkg/path/filepath/path_unix.htm#L8">VolumeName</a></h2>
			<pre>func VolumeName(path string) string</pre>
			<p>
VolumeName returns the leading volume name on Windows.
It returns &#34;&#34; elsewhere.
</p>

			
		
			
			
			<h2 id="Walk">func <a href="src/pkg/path/filepath/path.htm#L325">Walk</a></h2>
			<pre>func Walk(root string, walkFn WalkFunc) error</pre>
			<p>
Walk walks the file tree rooted at root, calling walkFn for each file or
directory in the tree, including root. All errors that arise visiting files
and directories are filtered by walkFn. The files are walked in lexical
order, which makes the output deterministic but means that for very
large directories Walk can be inefficient.
</p>

			
		
		
			
			
			<h2 id="WalkFunc">type <a href="src/pkg/path/filepath/path.htm#L291">WalkFunc</a></h2>
			<pre>type WalkFunc func(path string, info os.FileInfo, err error) error</pre>
			<p>
WalkFunc is the type of the function called for each file or directory
visited by Walk.  If there was a problem walking to the file or directory
named by path, the incoming error will describe the problem and the
function can decide how to handle that error (and Walk will not descend
into that directory).  If an error is returned, processing stops.  The
sole exception is that if path is a directory and the function returns the
special value SkipDir, the contents of the directory are skipped
and processing continues as usual on the next file.
</p>


			

			

			

			

			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
