
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>multipart - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package multipart</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "mime/multipart"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package multipart implements MIME multipart parsing, as defined in RFC
2046.
</p>
<p>
The implementation is sufficient for HTTP (RFC 2388) and the multipart
bodies generated by popular browsers.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
			
				
				<dd><a href="#File">type File</a></dd>
				
				
			
				
				<dd><a href="#FileHeader">type FileHeader</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#FileHeader.Open">func (fh *FileHeader) Open() (File, error)</a></dd>
				
			
				
				<dd><a href="#Form">type Form</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Form.RemoveAll">func (f *Form) RemoveAll() error</a></dd>
				
			
				
				<dd><a href="#Part">type Part</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Part.Close">func (p *Part) Close() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Part.FileName">func (p *Part) FileName() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Part.FormName">func (p *Part) FormName() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Part.Read">func (p *Part) Read(d []byte) (n int, err error)</a></dd>
				
			
				
				<dd><a href="#Reader">type Reader</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewReader">func NewReader(reader io.Reader, boundary string) *Reader</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Reader.NextPart">func (r *Reader) NextPart() (*Part, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Reader.ReadForm">func (r *Reader) ReadForm(maxMemory int64) (f *Form, err error)</a></dd>
				
			
				
				<dd><a href="#Writer">type Writer</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewWriter">func NewWriter(w io.Writer) *Writer</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Boundary">func (w *Writer) Boundary() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Close">func (w *Writer) Close() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.CreateFormField">func (w *Writer) CreateFormField(fieldname string) (io.Writer, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.CreateFormFile">func (w *Writer) CreateFormFile(fieldname, filename string) (io.Writer, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.CreatePart">func (w *Writer) CreatePart(header textproto.MIMEHeader) (io.Writer, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.FormDataContentType">func (w *Writer) FormDataContentType() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.WriteField">func (w *Writer) WriteField(fieldname, value string) error</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/mime/multipart/formdata.htm">formdata.go</a>
			
				<a href="src/pkg/mime/multipart/multipart.htm">multipart.go</a>
			
				<a href="src/pkg/mime/multipart/writer.htm">writer.go</a>
			
			</span>
			</p>
		
	
		
		
		
		
			
			
			<h2 id="File">type <a href="src/pkg/mime/multipart/formdata.htm#L132">File</a></h2>
			<pre>type File interface {
    io.Reader
    io.ReaderAt
    io.Seeker
    io.Closer
}</pre>
			<p>
File is an interface to access the file part of a multipart message.
Its contents may be either stored in memory or on disk.
If stored on disk, the File&#39;s underlying concrete type will be an *os.File.
</p>


			

			

			

			

			
		
			
			
			<h2 id="FileHeader">type <a href="src/pkg/mime/multipart/formdata.htm#L112">FileHeader</a></h2>
			<pre>type FileHeader struct {
    Filename string
    Header   textproto.MIMEHeader
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A FileHeader describes a file part of a multipart request.
</p>


			

			

			

			

			
				
				<h3 id="FileHeader.Open">func (*FileHeader) <a href="src/pkg/mime/multipart/formdata.htm#L121">Open</a></h3>
				<pre>func (fh *FileHeader) Open() (File, error)</pre>
				<p>
Open opens and returns the FileHeader&#39;s associated File.
</p>

				
				
			
		
			
			
			<h2 id="Form">type <a href="src/pkg/mime/multipart/formdata.htm#L90">Form</a></h2>
			<pre>type Form struct {
    Value map[string][]string
    File  map[string][]*FileHeader
}</pre>
			<p>
Form is a parsed multipart form.
Its File parts are stored either in memory or on disk,
and are accessible via the *FileHeader&#39;s Open method.
Its Value parts are stored as strings.
Both are keyed by field name.
</p>


			

			

			

			

			
				
				<h3 id="Form.RemoveAll">func (*Form) <a href="src/pkg/mime/multipart/formdata.htm#L96">RemoveAll</a></h3>
				<pre>func (f *Form) RemoveAll() error</pre>
				<p>
RemoveAll removes any temporary files associated with a Form.
</p>

				
				
			
		
			
			
			<h2 id="Part">type <a href="src/pkg/mime/multipart/multipart.htm#L23">Part</a></h2>
			<pre>type Part struct {
    <span class="comment">// The headers of the body, if any, with the keys canonicalized</span>
    <span class="comment">// in the same fashion that the Go http.Request headers are.</span>
    <span class="comment">// i.e. &#34;foo-bar&#34; changes case to &#34;Foo-Bar&#34;</span>
    Header textproto.MIMEHeader
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A Part represents a single part in a multipart body.
</p>


			

			

			

			

			
				
				<h3 id="Part.Close">func (*Part) <a href="src/pkg/mime/multipart/multipart.htm#L151">Close</a></h3>
				<pre>func (p *Part) Close() error</pre>
				
				
				
			
				
				<h3 id="Part.FileName">func (*Part) <a href="src/pkg/mime/multipart/multipart.htm#L52">FileName</a></h3>
				<pre>func (p *Part) FileName() string</pre>
				<p>
FileName returns the filename parameter of the Part&#39;s
Content-Disposition header.
</p>

				
				
			
				
				<h3 id="Part.FormName">func (*Part) <a href="src/pkg/mime/multipart/multipart.htm#L38">FormName</a></h3>
				<pre>func (p *Part) FormName() string</pre>
				<p>
FormName returns the name parameter if p has a Content-Disposition
of type &#34;form-data&#34;.  Otherwise it returns the empty string.
</p>

				
				
			
				
				<h3 id="Part.Read">func (*Part) <a href="src/pkg/mime/multipart/multipart.htm#L105">Read</a></h3>
				<pre>func (p *Part) Read(d []byte) (n int, err error)</pre>
				<p>
Read reads the body of a part, after its headers and before the
next part (if any) begins.
</p>

				
				
			
		
			
			
			<h2 id="Reader">type <a href="src/pkg/mime/multipart/multipart.htm#L159">Reader</a></h2>
			<pre>type Reader struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Reader is an iterator over parts in a MIME multipart body.
Reader&#39;s underlying parser consumes its input as needed.  Seeking
isn&#39;t supported.
</p>


			

			

			

			
				
				<h3 id="NewReader">func <a href="src/pkg/mime/multipart/multipart.htm#L70">NewReader</a></h3>
				<pre>func NewReader(reader io.Reader, boundary string) *Reader</pre>
				<p>
NewReader creates a new multipart Reader reading from r using the
given MIME boundary.
</p>

				
			

			
				
				<h3 id="Reader.NextPart">func (*Reader) <a href="src/pkg/mime/multipart/multipart.htm#L170">NextPart</a></h3>
				<pre>func (r *Reader) NextPart() (*Part, error)</pre>
				<p>
NextPart returns the next part in the multipart or an error.
When there are no more parts, the error io.EOF is returned.
</p>

				
				
			
				
				<h3 id="Reader.ReadForm">func (*Reader) <a href="src/pkg/mime/multipart/formdata.htm#L13">ReadForm</a></h3>
				<pre>func (r *Reader) ReadForm(maxMemory int64) (f *Form, err error)</pre>
				<p>
ReadForm parses an entire multipart message whose parts have
a Content-Disposition of &#34;form-data&#34;.
It stores up to maxMemory bytes of the file parts in memory
and the remainder on disk in temporary files.
</p>

				
				
			
		
			
			
			<h2 id="Writer">type <a href="src/pkg/mime/multipart/writer.htm#L8">Writer</a></h2>
			<pre>type Writer struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A Writer generates multipart messages.
</p>


			

			

			

			
				
				<h3 id="NewWriter">func <a href="src/pkg/mime/multipart/writer.htm#L16">NewWriter</a></h3>
				<pre>func NewWriter(w io.Writer) *Writer</pre>
				<p>
NewWriter returns a new multipart Writer with a random boundary,
writing to w.
</p>

				
			

			
				
				<h3 id="Writer.Boundary">func (*Writer) <a href="src/pkg/mime/multipart/writer.htm#L24">Boundary</a></h3>
				<pre>func (w *Writer) Boundary() string</pre>
				<p>
Boundary returns the Writer&#39;s randomly selected boundary string.
</p>

				
				
			
				
				<h3 id="Writer.Close">func (*Writer) <a href="src/pkg/mime/multipart/writer.htm#L116">Close</a></h3>
				<pre>func (w *Writer) Close() error</pre>
				<p>
Close finishes the multipart message and writes the trailing
boundary end line to the output.
</p>

				
				
			
				
				<h3 id="Writer.CreateFormField">func (*Writer) <a href="src/pkg/mime/multipart/writer.htm#L97">CreateFormField</a></h3>
				<pre>func (w *Writer) CreateFormField(fieldname string) (io.Writer, error)</pre>
				<p>
CreateFormField calls CreatePart with a header using the
given field name.
</p>

				
				
			
				
				<h3 id="Writer.CreateFormFile">func (*Writer) <a href="src/pkg/mime/multipart/writer.htm#L86">CreateFormFile</a></h3>
				<pre>func (w *Writer) CreateFormFile(fieldname, filename string) (io.Writer, error)</pre>
				<p>
CreateFormFile is a convenience wrapper around CreatePart. It creates
a new form-data header with the provided field name and file name.
</p>

				
				
			
				
				<h3 id="Writer.CreatePart">func (*Writer) <a href="src/pkg/mime/multipart/writer.htm#L47">CreatePart</a></h3>
				<pre>func (w *Writer) CreatePart(header textproto.MIMEHeader) (io.Writer, error)</pre>
				<p>
CreatePart creates a new multipart section with the provided
header. The body of the part should be written to the returned
Writer. After calling CreatePart, any previous part may no longer
be written to.
</p>

				
				
			
				
				<h3 id="Writer.FormDataContentType">func (*Writer) <a href="src/pkg/mime/multipart/writer.htm#L30">FormDataContentType</a></h3>
				<pre>func (w *Writer) FormDataContentType() string</pre>
				<p>
FormDataContentType returns the Content-Type for an HTTP
multipart/form-data with this Writer&#39;s Boundary.
</p>

				
				
			
				
				<h3 id="Writer.WriteField">func (*Writer) <a href="src/pkg/mime/multipart/writer.htm#L105">WriteField</a></h3>
				<pre>func (w *Writer) WriteField(fieldname, value string) error</pre>
				<p>
WriteField calls CreateFormField and then writes the given value.
</p>

				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
