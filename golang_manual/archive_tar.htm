<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>tar - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="doc/style.css">
<script type="text/javascript" src="doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="topbar"><div class="container wide">

</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package tar</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "archive/tar"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package tar implements access to tar archives.
It aims to cover most of the variations, including those produced
by GNU and BSD tars.
</p>
<p>
References:
</p>
<pre><a href="http://www.freebsd.org/cgi/man.cgi?query=tar&amp;sektion=5">http://www.freebsd.org/cgi/man.cgi?query=tar&amp;sektion=5</a>
<a href="http://www.gnu.org/software/tar/manual/html_node/Standard.html">http://www.gnu.org/software/tar/manual/html_node/Standard.html</a>
</pre>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
				<dd><a href="#constants">Constants</a></dd>
			
			
				<dd><a href="#variables">Variables</a></dd>
			
			
			
				
				<dd><a href="#Header">type Header</a></dd>
				
				
			
				
				<dd><a href="#Reader">type Reader</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewReader">func NewReader(r io.Reader) *Reader</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Reader.Next">func (tr *Reader) Next() (*Header, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Reader.Read">func (tr *Reader) Read(b []byte) (n int, err error)</a></dd>
				
			
				
				<dd><a href="#Writer">type Writer</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewWriter">func NewWriter(w io.Writer) *Writer</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Close">func (tw *Writer) Close() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Flush">func (tw *Writer) Flush() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Write">func (tw *Writer) Write(b []byte) (n int, err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.WriteHeader">func (tw *Writer) WriteHeader(hdr *Header) error</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/archive/tar/common.htm">common.go</a>
			
				<a href="src/pkg/archive/tar/reader.htm">reader.go</a>
			
				<a href="src/pkg/archive/tar/writer.htm">writer.go</a>
			
			</span>
			</p>
		
	
		
			<h2 id="constants">Constants</h2>
			
				<pre>const (

    <span class="comment">// Types</span>
    TypeReg           = &#39;0&#39;    <span class="comment">// regular file</span>
    TypeRegA          = &#39;\x00&#39; <span class="comment">// regular file</span>
    TypeLink          = &#39;1&#39;    <span class="comment">// hard link</span>
    TypeSymlink       = &#39;2&#39;    <span class="comment">// symbolic link</span>
    TypeChar          = &#39;3&#39;    <span class="comment">// character device node</span>
    TypeBlock         = &#39;4&#39;    <span class="comment">// block device node</span>
    TypeDir           = &#39;5&#39;    <span class="comment">// directory</span>
    TypeFifo          = &#39;6&#39;    <span class="comment">// fifo node</span>
    TypeCont          = &#39;7&#39;    <span class="comment">// reserved</span>
    TypeXHeader       = &#39;x&#39;    <span class="comment">// extended header</span>
    TypeXGlobalHeader = &#39;g&#39;    <span class="comment">// global extended header</span>
)</pre>
				
			
		
		
			<h2 id="variables">Variables</h2>
			
				<pre>var (
    ErrWriteTooLong    = errors.New(&#34;archive/tar: write too long&#34;)
    ErrFieldTooLong    = errors.New(&#34;archive/tar: header field too long&#34;)
    ErrWriteAfterClose = errors.New(&#34;archive/tar: write after close&#34;)
)</pre>
				
			
				<pre>var (
    ErrHeader = errors.New(&#34;archive/tar: invalid tar header&#34;)
)</pre>
				
			
		
		
		
			
			
			<h2 id="Header">type <a href="src/pkg/archive/tar/common.htm#L25">Header</a></h2>
			<pre>type Header struct {
    Name       string    <span class="comment">// name of header file entry</span>
    Mode       int64     <span class="comment">// permission and mode bits</span>
    Uid        int       <span class="comment">// user id of owner</span>
    Gid        int       <span class="comment">// group id of owner</span>
    Size       int64     <span class="comment">// length in bytes</span>
    ModTime    time.Time <span class="comment">// modified time</span>
    Typeflag   byte      <span class="comment">// type of header entry</span>
    Linkname   string    <span class="comment">// target name of link</span>
    Uname      string    <span class="comment">// user name of owner</span>
    Gname      string    <span class="comment">// group name of owner</span>
    Devmajor   int64     <span class="comment">// major number of character or block device</span>
    Devminor   int64     <span class="comment">// minor number of character or block device</span>
    AccessTime time.Time <span class="comment">// access time</span>
    ChangeTime time.Time <span class="comment">// status change time</span>
}</pre>
			<p>
A Header represents a single header in a tar archive.
Some fields may not be populated.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Reader">type <a href="src/pkg/archive/tar/reader.htm#L32">Reader</a></h2>
			<pre>type Reader struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A Reader provides sequential access to the contents of a tar archive.
A tar archive consists of a sequence of files.
The Next method advances to the next file in the archive (including the first),
and then it can be treated as an io.Reader to access the file&#39;s data.
</p>
<p>
Example:
</p>
<pre>tr := tar.NewReader(r)
for {
	hdr, err := tr.Next()
	if err == io.EOF {
		// end of tar archive
		break
	}
	if err != nil {
		// handle error
	}
	io.Copy(data, tr)
}
</pre>


			

			

			

			
				
				<h3 id="NewReader">func <a href="../../src/pkg/archive/tar/reader.htm#L40">NewReader</a></h3>
				<pre>func NewReader(r io.Reader) *Reader</pre>
				<p>
NewReader creates a new Reader reading from r.
</p>

				
			

			
				
				<h3 id="Reader.Next">func (*Reader) <a href="../../src/pkg/archive/tar/reader.htm#L43">Next</a></h3>
				<pre>func (tr *Reader) Next() (*Header, error)</pre>
				<p>
Next advances to the next entry in the tar archive.
</p>

				
				
			
				
				<h3 id="Reader.Read">func (*Reader) <a href="../../src/pkg/archive/tar/reader.htm#L196">Read</a></h3>
				<pre>func (tr *Reader) Read(b []byte) (n int, err error)</pre>
				<p>
Read reads from the current entry in the tar archive.
It returns 0, io.EOF when it reaches the end of that entry,
until Next is called to advance to the next entry.
</p>

				
				
			
		
			
			
			<h2 id="Writer">type <a href="../../src/pkg/archive/tar/writer.htm#L28">Writer</a></h2>
			<pre>type Writer struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A Writer provides sequential writing of a tar archive in POSIX.1 format.
A tar archive consists of a sequence of files.
Call WriteHeader to begin a new file, and then call Write to supply that file&#39;s data,
writing at most hdr.Size bytes in total.
</p>
<p>
Example:
</p>
<pre>tw := tar.NewWriter(w)
hdr := new(Header)
hdr.Size = length of data in bytes
// populate other hdr fields as desired
if err := tw.WriteHeader(hdr); err != nil {
	// handle error
}
io.Copy(tw, data)
tw.Close()
</pre>


			

			

			

			
				
				<h3 id="NewWriter">func <a href="../../src/pkg/archive/tar/writer.htm#L38">NewWriter</a></h3>
				<pre>func NewWriter(w io.Writer) *Writer</pre>
				<p>
NewWriter creates a new Writer writing to w.
</p>

				
			

			
				
				<h3 id="Writer.Close">func (*Writer) <a href="../../src/pkg/archive/tar/writer.htm#L186">Close</a></h3>
				<pre>func (tw *Writer) Close() error</pre>
				<p>
Close closes the tar archive, flushing any unwritten
data to the underlying writer.
</p>

				
				
			
				
				<h3 id="Writer.Flush">func (*Writer) <a href="../../src/pkg/archive/tar/writer.htm#L41">Flush</a></h3>
				<pre>func (tw *Writer) Flush() error</pre>
				<p>
Flush finishes writing the current file (optional).
</p>

				
				
			
				
				<h3 id="Writer.Write">func (*Writer) <a href="../../src/pkg/archive/tar/writer.htm#L164">Write</a></h3>
				<pre>func (tw *Writer) Write(b []byte) (n int, err error)</pre>
				<p>
Write writes to the current entry in the tar archive.
Write returns the error ErrWriteTooLong if more than
hdr.Size bytes are written after WriteHeader.
</p>

				
				
			
				
				<h3 id="Writer.WriteHeader">func (*Writer) <a href="../../src/pkg/archive/tar/writer.htm#L106">WriteHeader</a></h3>
				<pre>func (tw *Writer) WriteHeader(hdr *Header) error</pre>
				<p>
WriteHeader writes hdr and prepares to accept the file&#39;s contents.
WriteHeader calls Flush if it is not the first header.
Calling after a Close will return ErrWriteAfterClose.
</p>

				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
