
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>url - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package url</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "net/url"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
				<dd><a href="#examples">Examples</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package url parses URLs and implements query escaping.
See RFC 3986.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#QueryEscape">func QueryEscape(s string) string</a></dd>
			
				
				<dd><a href="#QueryUnescape">func QueryUnescape(s string) (string, error)</a></dd>
			
			
				
				<dd><a href="#Error">type Error</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Error.Error">func (e *Error) Error() string</a></dd>
				
			
				
				<dd><a href="#EscapeError">type EscapeError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#EscapeError.Error">func (e EscapeError) Error() string</a></dd>
				
			
				
				<dd><a href="#URL">type URL</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Parse">func Parse(rawurl string) (url *URL, err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ParseRequestURI">func ParseRequestURI(rawurl string) (url *URL, err error)</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#URL.IsAbs">func (u *URL) IsAbs() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#URL.Parse">func (u *URL) Parse(ref string) (*URL, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#URL.Query">func (u *URL) Query() Values</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#URL.RequestURI">func (u *URL) RequestURI() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#URL.ResolveReference">func (u *URL) ResolveReference(ref *URL) *URL</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#URL.String">func (u *URL) String() string</a></dd>
				
			
				
				<dd><a href="#Userinfo">type Userinfo</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#User">func User(username string) *Userinfo</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#UserPassword">func UserPassword(username, password string) *Userinfo</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Userinfo.Password">func (u *Userinfo) Password() (string, bool)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Userinfo.String">func (u *Userinfo) String() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Userinfo.Username">func (u *Userinfo) Username() string</a></dd>
				
			
				
				<dd><a href="#Values">type Values</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ParseQuery">func ParseQuery(query string) (m Values, err error)</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Values.Add">func (v Values) Add(key, value string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Values.Del">func (v Values) Del(key string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Values.Encode">func (v Values) Encode() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Values.Get">func (v Values) Get(key string) string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Values.Set">func (v Values) Set(key, value string)</a></dd>
				
			
			
		</dl>

		
			<h4 id="examples">Examples</h4>
			<dl>
			
			<dd><a class="exampleLink" href="#example_URL">URL</a></dd>
			
			<dd><a class="exampleLink" href="#example_Values">Values</a></dd>
			
			</dl>
		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/net/url/url.htm">url.go</a>
			
			</span>
			</p>
		
	
		
		
		
			
			
			<h2 id="QueryEscape">func <a href="src/pkg/net/url/url.htm#L161">QueryEscape</a></h2>
			<pre>func QueryEscape(s string) string</pre>
			<p>
QueryEscape escapes the string so it can be safely placed
inside a URL query.
</p>

			
		
			
			
			<h2 id="QueryUnescape">func <a href="src/pkg/net/url/url.htm#L100">QueryUnescape</a></h2>
			<pre>func QueryUnescape(s string) (string, error)</pre>
			<p>
QueryUnescape does the inverse transformation of QueryEscape, converting
%AB into the byte 0xAB and &#39;+&#39; into &#39; &#39; (space). It returns an error if
any % is not followed by two hexadecimal digits.
</p>

			
		
		
			
			
			<h2 id="Error">type <a href="src/pkg/net/url/url.htm#L6">Error</a></h2>
			<pre>type Error struct {
    Op  string
    URL string
    Err error
}</pre>
			<p>
Error reports an error and the operation and URL that caused it.
</p>


			

			

			

			

			
				
				<h3 id="Error.Error">func (*Error) <a href="src/pkg/net/url/url.htm#L12">Error</a></h3>
				<pre>func (e *Error) Error() string</pre>
				
				
				
			
		
			
			
			<h2 id="EscapeError">type <a href="src/pkg/net/url/url.htm#L47">EscapeError</a></h2>
			<pre>type EscapeError string</pre>
			

			

			

			

			

			
				
				<h3 id="EscapeError.Error">func (EscapeError) <a href="src/pkg/net/url/url.htm#L49">Error</a></h3>
				<pre>func (e EscapeError) Error() string</pre>
				
				
				
			
		
			
			
			<h2 id="URL">type <a href="src/pkg/net/url/url.htm#L211">URL</a></h2>
			<pre>type URL struct {
    Scheme   string
    Opaque   string    <span class="comment">// encoded opaque data</span>
    User     *Userinfo <span class="comment">// username and password information</span>
    Host     string
    Path     string
    RawQuery string <span class="comment">// encoded query values, without &#39;?&#39;</span>
    Fragment string <span class="comment">// fragment for references, without &#39;#&#39;</span>
}</pre>
			<p>
A URL represents a parsed URL (technically, a URI reference).
The general form represented is:
</p>
<pre>scheme://[userinfo@]host/path[?query][#fragment]
</pre>
<p>
URLs that do not start with a slash after the scheme are interpreted as:
</p>
<pre>scheme:opaque[?query][#fragment]
</pre>


			

			

			<div id="example_URL" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">u, err := url.Parse(&#34;http://bing.com/search?q=dotnet&#34;)
if err != nil {
    log.Fatal(err)
}
u.Scheme = &#34;https&#34;
u.Host = &#34;google.com&#34;
q := u.Query()
q.Set(&#34;q&#34;, &#34;golang&#34;)
u.RawQuery = q.Encode()
fmt.Println(u)
<span class="comment"></pre>
		
		<p>Output:</p>
		<pre class="output">https://google.com/search?q=golang</pre>
		
	</div>
</div>


			
				
				<h3 id="Parse">func <a href="src/pkg/net/url/url.htm#L315">Parse</a></h3>
				<pre>func Parse(rawurl string) (url *URL, err error)</pre>
				<p>
Parse parses rawurl into a URL structure.
The rawurl may be relative or absolute.
</p>

				
			
				
				<h3 id="ParseRequestURI">func <a href="src/pkg/net/url/url.htm#L335">ParseRequestURI</a></h3>
				<pre>func ParseRequestURI(rawurl string) (url *URL, err error)</pre>
				<p>
ParseRequestURI parses rawurl into a URL structure.  It assumes that
rawurl was received in an HTTP request, so the rawurl is interpreted
only as an absolute URI or an absolute path.
The string rawurl is assumed not to have a #fragment suffix.
(Web browsers strip #fragment before sending the URL to a web server.)
</p>

				
			

			
				
				<h3 id="URL.IsAbs">func (*URL) <a href="src/pkg/net/url/url.htm#L571">IsAbs</a></h3>
				<pre>func (u *URL) IsAbs() bool</pre>
				<p>
IsAbs returns true if the URL is absolute.
</p>

				
				
			
				
				<h3 id="URL.Parse">func (*URL) <a href="src/pkg/net/url/url.htm#L578">Parse</a></h3>
				<pre>func (u *URL) Parse(ref string) (*URL, error)</pre>
				<p>
Parse parses a URL in the context of the receiver.  The provided URL
may be relative or absolute.  Parse returns nil, err on parse
failure, otherwise its return value is the same as ResolveReference.
</p>

				
				
			
				
				<h3 id="URL.Query">func (*URL) <a href="src/pkg/net/url/url.htm#L628">Query</a></h3>
				<pre>func (u *URL) Query() Values</pre>
				<p>
Query parses RawQuery and returns the corresponding values.
</p>

				
				
			
				
				<h3 id="URL.RequestURI">func (*URL) <a href="src/pkg/net/url/url.htm#L635">RequestURI</a></h3>
				<pre>func (u *URL) RequestURI() string</pre>
				<p>
RequestURI returns the encoded path?query or opaque?query
string that would be used in an HTTP request for u.
</p>

				
				
			
				
				<h3 id="URL.ResolveReference">func (*URL) <a href="src/pkg/net/url/url.htm#L592">ResolveReference</a></h3>
				<pre>func (u *URL) ResolveReference(ref *URL) *URL</pre>
				<p>
ResolveReference resolves a URI reference to an absolute URI from
an absolute base URI, per RFC 2396 Section 5.2.  The URI reference
may be relative or absolute.  ResolveReference always returns a new
URL instance, even if the returned URL is identical to either the
base or reference. If ref is an absolute URL, then ResolveReference
ignores base and returns a copy of ref.
</p>

				
				
			
				
				<h3 id="URL.String">func (*URL) <a href="src/pkg/net/url/url.htm#L418">String</a></h3>
				<pre>func (u *URL) String() string</pre>
				<p>
String reassembles the URL into a valid URL string.
</p>

				
				
			
		
			
			
			<h2 id="Userinfo">type <a href="src/pkg/net/url/url.htm#L242">Userinfo</a></h2>
			<pre>type Userinfo struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
The Userinfo type is an immutable encapsulation of username and
password details for a URL. An existing Userinfo value is guaranteed
to have a username set (potentially empty, as allowed by RFC 2396),
and optionally a password.
</p>


			

			

			

			
				
				<h3 id="User">func <a href="src/pkg/net/url/url.htm#L223">User</a></h3>
				<pre>func User(username string) *Userinfo</pre>
				<p>
User returns a Userinfo containing the provided username
and no password set.
</p>

				
			
				
				<h3 id="UserPassword">func <a href="src/pkg/net/url/url.htm#L234">UserPassword</a></h3>
				<pre>func UserPassword(username, password string) *Userinfo</pre>
				<p>
UserPassword returns a Userinfo containing the provided username
and password.
This functionality should only be used with legacy web sites.
RFC 2396 warns that interpreting Userinfo this way
&ldquo;is NOT RECOMMENDED, because the passing of authentication
information in clear text (such as URI) has proven to be a
security risk in almost every case where it has been used.&rdquo;
</p>

				
			

			
				
				<h3 id="Userinfo.Password">func (*Userinfo) <a href="src/pkg/net/url/url.htm#L254">Password</a></h3>
				<pre>func (u *Userinfo) Password() (string, bool)</pre>
				<p>
Password returns the password in case it is set, and whether it is set.
</p>

				
				
			
				
				<h3 id="Userinfo.String">func (*Userinfo) <a href="src/pkg/net/url/url.htm#L263">String</a></h3>
				<pre>func (u *Userinfo) String() string</pre>
				<p>
String returns the encoded userinfo information in the standard form
of &#34;username[:password]&#34;.
</p>

				
				
			
				
				<h3 id="Userinfo.Username">func (*Userinfo) <a href="src/pkg/net/url/url.htm#L249">Username</a></h3>
				<pre>func (u *Userinfo) Username() string</pre>
				<p>
Username returns the username.
</p>

				
				
			
		
			
			
			<h2 id="Values">type <a href="src/pkg/net/url/url.htm#L449">Values</a></h2>
			<pre>type Values map[string][]string</pre>
			<p>
Values maps a string key to a list of values.
It is typically used for query parameters and form values.
Unlike in the http.Header map, the keys in a Values map
are case-sensitive.
</p>


			

			

			<div id="example_Values" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">v := url.Values{}
v.Set(&#34;name&#34;, &#34;Ava&#34;)
v.Add(&#34;friend&#34;, &#34;Jess&#34;)
v.Add(&#34;friend&#34;, &#34;Sarah&#34;)
v.Add(&#34;friend&#34;, &#34;Zoe&#34;)
<span class="comment">// v.Encode() == &#34;name=Ava&amp;friend=Jess&amp;friend=Sarah&amp;friend=Zoe&#34;</span>
fmt.Println(v.Get(&#34;name&#34;))
fmt.Println(v.Get(&#34;friend&#34;))
fmt.Println(v[&#34;friend&#34;])
<span class="comment"></pre>
		
		<p>Output:</p>
		<pre class="output">Ava
Jess
[Jess Sarah Zoe]</pre>
		
	</div>
</div>


			
				
				<h3 id="ParseQuery">func <a href="src/pkg/net/url/url.htm#L488">ParseQuery</a></h3>
				<pre>func ParseQuery(query string) (m Values, err error)</pre>
				<p>
ParseQuery parses the URL-encoded query string and returns
a map listing the values specified for each key.
ParseQuery always returns a non-nil map containing all the
valid query parameters found; err describes the first decoding error
encountered, if any.
</p>

				
			

			
				
				<h3 id="Values.Add">func (Values) <a href="src/pkg/net/url/url.htm#L474">Add</a></h3>
				<pre>func (v Values) Add(key, value string)</pre>
				<p>
Add adds the key to value. It appends to any existing
values associated with key.
</p>

				
				
			
				
				<h3 id="Values.Del">func (Values) <a href="src/pkg/net/url/url.htm#L479">Del</a></h3>
				<pre>func (v Values) Del(key string)</pre>
				<p>
Del deletes the values associated with key.
</p>

				
				
			
				
				<h3 id="Values.Encode">func (Values) <a href="src/pkg/net/url/url.htm#L526">Encode</a></h3>
				<pre>func (v Values) Encode() string</pre>
				<p>
Encode encodes the values into &ldquo;URL encoded&rdquo; form.
e.g. &#34;foo=bar&amp;bar=baz&#34;
</p>

				
				
			
				
				<h3 id="Values.Get">func (Values) <a href="src/pkg/net/url/url.htm#L455">Get</a></h3>
				<pre>func (v Values) Get(key string) string</pre>
				<p>
Get gets the first value associated with the given key.
If there are no values associated with the key, Get returns
the empty string. To access multiple values, use the map
directly.
</p>

				
				
			
				
				<h3 id="Values.Set">func (Values) <a href="src/pkg/net/url/url.htm#L468">Set</a></h3>
				<pre>func (v Values) Set(key, value string)</pre>
				<p>
Set sets the key to value. It replaces any existing
values.
</p>

				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
