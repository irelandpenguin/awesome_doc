
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>quick - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package quick</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "testing/quick"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package quick implements utility functions to help with black box testing.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#Check">func Check(function interface{}, config *Config) (err error)</a></dd>
			
				
				<dd><a href="#CheckEqual">func CheckEqual(f, g interface{}, config *Config) (err error)</a></dd>
			
				
				<dd><a href="#Value">func Value(t reflect.Type, rand *rand.Rand) (value reflect.Value, ok bool)</a></dd>
			
			
				
				<dd><a href="#CheckEqualError">type CheckEqualError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#CheckEqualError.Error">func (s *CheckEqualError) Error() string</a></dd>
				
			
				
				<dd><a href="#CheckError">type CheckError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#CheckError.Error">func (s *CheckError) Error() string</a></dd>
				
			
				
				<dd><a href="#Config">type Config</a></dd>
				
				
			
				
				<dd><a href="#Generator">type Generator</a></dd>
				
				
			
				
				<dd><a href="#SetupError">type SetupError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#SetupError.Error">func (s SetupError) Error() string</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/testing/quick/quick.htm">quick.go</a>
			
			</span>
			</p>
		
	
		
		
		
			
			
			<h2 id="Check">func <a href="src/pkg/testing/quick/quick.htm#L222">Check</a></h2>
			<pre>func Check(function interface{}, config *Config) (err error)</pre>
			<p>
Check looks for an input to f, any function that returns bool,
such that f returns false.  It calls f repeatedly, with arbitrary
values for each argument.  If f returns false on a given input,
Check returns that input as a *CheckError.
For example:
</p>
<pre>func TestOddMultipleOfThree(t *testing.T) {
	f := func(x int) bool {
		y := OddMultipleOfThree(x)
		return y%2 == 1 &amp;&amp; y%3 == 0
	}
	if err := quick.Check(f, nil); err != nil {
		t.Error(err)
	}
}
</pre>

			
		
			
			
			<h2 id="CheckEqual">func <a href="src/pkg/testing/quick/quick.htm#L265">CheckEqual</a></h2>
			<pre>func CheckEqual(f, g interface{}, config *Config) (err error)</pre>
			<p>
CheckEqual looks for an input on which f and g return different results.
It calls f and g repeatedly with arbitrary values for each argument.
If f and g return different answers, CheckEqual returns a *CheckEqualError
describing the input and the outputs.
</p>

			
		
			
			
			<h2 id="Value">func <a href="src/pkg/testing/quick/quick.htm#L44">Value</a></h2>
			<pre>func Value(t reflect.Type, rand *rand.Rand) (value reflect.Value, ok bool)</pre>
			<p>
Value returns an arbitrary value of the given type.
If the type implements the Generator interface, that will be used.
Note: To create arbitrary values for structs, all the fields must be exported.
</p>

			
		
		
			
			
			<h2 id="CheckEqualError">type <a href="src/pkg/testing/quick/quick.htm#L197">CheckEqualError</a></h2>
			<pre>type CheckEqualError struct {
    CheckError
    Out1 []interface{}
    Out2 []interface{}
}</pre>
			<p>
A CheckEqualError is the result CheckEqual finding an error.
</p>


			

			

			

			

			
				
				<h3 id="CheckEqualError.Error">func (*CheckEqualError) <a href="src/pkg/testing/quick/quick.htm#L203">Error</a></h3>
				<pre>func (s *CheckEqualError) Error() string</pre>
				
				
				
			
		
			
			
			<h2 id="CheckError">type <a href="src/pkg/testing/quick/quick.htm#L187">CheckError</a></h2>
			<pre>type CheckError struct {
    Count int
    In    []interface{}
}</pre>
			<p>
A CheckError is the result of Check finding an error.
</p>


			

			

			

			

			
				
				<h3 id="CheckError.Error">func (*CheckError) <a href="src/pkg/testing/quick/quick.htm#L192">Error</a></h3>
				<pre>func (s *CheckError) Error() string</pre>
				
				
				
			
		
			
			
			<h2 id="Config">type <a href="src/pkg/testing/quick/quick.htm#L138">Config</a></h2>
			<pre>type Config struct {
    <span class="comment">// MaxCount sets the maximum number of iterations. If zero,</span>
    <span class="comment">// MaxCountScale is used.</span>
    MaxCount int
    <span class="comment">// MaxCountScale is a non-negative scale factor applied to the default</span>
    <span class="comment">// maximum. If zero, the default is unchanged.</span>
    MaxCountScale float64
    <span class="comment">// If non-nil, rand is a source of random numbers. Otherwise a default</span>
    <span class="comment">// pseudo-random source will be used.</span>
    Rand *rand.Rand
    <span class="comment">// If non-nil, the Values function generates a slice of arbitrary</span>
    <span class="comment">// reflect.Values that are congruent with the arguments to the function</span>
    <span class="comment">// being tested. Otherwise, the top-level Values function is used</span>
    <span class="comment">// to generate them.</span>
    Values func([]reflect.Value, *rand.Rand)
}</pre>
			<p>
A Config structure contains options for running a test.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Generator">type <a href="src/pkg/testing/quick/quick.htm#L10">Generator</a></h2>
			<pre>type Generator interface {
    <span class="comment">// Generate returns a random instance of the type on which it is a</span>
    <span class="comment">// method using the size as a size hint.</span>
    Generate(rand *rand.Rand, size int) reflect.Value
}</pre>
			<p>
A Generator can generate random values of its own type.
</p>


			

			

			

			

			
		
			
			
			<h2 id="SetupError">type <a href="src/pkg/testing/quick/quick.htm#L182">SetupError</a></h2>
			<pre>type SetupError string</pre>
			<p>
A SetupError is the result of an error in the way that check is being
used, independent of the functions being tested.
</p>


			

			

			

			

			
				
				<h3 id="SetupError.Error">func (SetupError) <a href="src/pkg/testing/quick/quick.htm#L184">Error</a></h3>
				<pre>func (s SetupError) Error() string</pre>
				
				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
