
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>doc - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package doc</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "go/doc"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package doc extracts source code documentation from a Go AST.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#Examples">func Examples(files ...*ast.File) []*Example</a></dd>
			
				
				<dd><a href="#Synopsis">func Synopsis(s string) string</a></dd>
			
				
				<dd><a href="#ToHTML">func ToHTML(w io.Writer, text string, words map[string]string)</a></dd>
			
				
				<dd><a href="#ToText">func ToText(w io.Writer, text string, indent, preIndent string, width int)</a></dd>
			
			
				
				<dd><a href="#Example">type Example</a></dd>
				
				
			
				
				<dd><a href="#Filter">type Filter</a></dd>
				
				
			
				
				<dd><a href="#Func">type Func</a></dd>
				
				
			
				
				<dd><a href="#Mode">type Mode</a></dd>
				
				
			
				
				<dd><a href="#Package">type Package</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#New">func New(pkg *ast.Package, importPath string, mode Mode) *Package</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Package.Filter">func (p *Package) Filter(f Filter)</a></dd>
				
			
				
				<dd><a href="#Type">type Type</a></dd>
				
				
			
				
				<dd><a href="#Value">type Value</a></dd>
				
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/go/doc/comment.htm">comment.go</a>
			
				<a href="src/pkg/go/doc/doc.htm">doc.go</a>
			
				<a href="src/pkg/go/doc/example.htm">example.go</a>
			
				<a href="src/pkg/go/doc/exports.htm">exports.go</a>
			
				<a href="src/pkg/go/doc/filter.htm">filter.go</a>
			
				<a href="src/pkg/go/doc/reader.htm">reader.go</a>
			
				<a href="src/pkg/go/doc/synopsis.htm">synopsis.go</a>
			
			</span>
			</p>
		
	
		
		
		
			
			
			<h2 id="Examples">func <a href="src/pkg/go/doc/example.htm#L17">Examples</a></h2>
			<pre>func Examples(files ...*ast.File) []*Example</pre>
			
			
		
			
			
			<h2 id="Synopsis">func <a href="src/pkg/go/doc/synopsis.htm#L23">Synopsis</a></h2>
			<pre>func Synopsis(s string) string</pre>
			<p>
Synopsis returns a cleaned version of the first sentence in s.
That sentence ends after the first period followed by space and
not preceded by exactly one uppercase letter. The result string
has no \n, \r, or \t characters and uses only single spaces between
words.
</p>

			
		
			
			
			<h2 id="ToHTML">func <a href="src/pkg/go/doc/comment.htm#L242">ToHTML</a></h2>
			<pre>func ToHTML(w io.Writer, text string, words map[string]string)</pre>
			<p>
ToHTML converts comment text to formatted HTML.
The comment was prepared by DocReader,
so it is known not to have leading, trailing blank lines
nor to have trailing spaces at the end of lines.
The comment markers have already been removed.
</p>
<p>
Turn each run of multiple \n into &lt;/p&gt;&lt;p&gt;.
Turn each run of indented lines into a &lt;pre&gt; block without indent.
Enclose headings with header tags.
</p>
<p>
URLs in the comment text are converted into links; if the URL also appears
in the words map, the link is taken from the map (if the corresponding map
value is the empty string, the URL is not converted into a link).
</p>
<p>
Go identifiers that appear in the words map are italicized; if the corresponding
map value is not the empty string, it is considered a URL and the word is converted
into a link.
</p>

			
		
			
			
			<h2 id="ToText">func <a href="src/pkg/go/doc/comment.htm#L356">ToText</a></h2>
			<pre>func ToText(w io.Writer, text string, indent, preIndent string, width int)</pre>
			<p>
ToText prepares comment text for presentation in textual output.
It wraps paragraphs of text to width or fewer Unicode code points
and then prefixes each line with the indent.  In preformatted sections
(such as program text), it prefixes each non-blank line with preIndent.
</p>

			
		
		
			
			
			<h2 id="Example">type <a href="src/pkg/go/doc/example.htm#L9">Example</a></h2>
			<pre>type Example struct {
    Name     string <span class="comment">// name of the item being exemplified</span>
    Doc      string <span class="comment">// example function doc string</span>
    Code     ast.Node
    Comments []*ast.CommentGroup
    Output   string <span class="comment">// expected output</span>
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Filter">type <a href="src/pkg/go/doc/filter.htm#L1">Filter</a></h2>
			<pre>type Filter func(string) bool</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Func">type <a href="src/pkg/go/doc/doc.htm#L42">Func</a></h2>
			<pre>type Func struct {
    Doc  string
    Name string
    Decl *ast.FuncDecl

    <span class="comment">// methods</span>
    <span class="comment">// (for functions, these fields have the respective zero value)</span>
    Recv  string <span class="comment">// actual   receiver &#34;T&#34; or &#34;*T&#34;</span>
    Orig  string <span class="comment">// original receiver &#34;T&#34; or &#34;*T&#34;</span>
    Level int    <span class="comment">// embedding level; 0 means not embedded</span>
}</pre>
			<p>
Func is the documentation for a func declaration.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Mode">type <a href="src/pkg/go/doc/doc.htm#L55">Mode</a></h2>
			<pre>type Mode int</pre>
			<p>
Mode values control the operation of New.
</p>


			
				<pre>const (
    <span class="comment">// extract documentation for all package-level declarations,</span>
    <span class="comment">// not just exported ones</span>
    AllDecls Mode = 1 &lt;&lt; iota

    <span class="comment">// show all embedded methods, not just the ones of</span>
    <span class="comment">// invisible (unexported) anonymous fields</span>
    AllMethods
)</pre>
				
			

			

			

			

			
		
			
			
			<h2 id="Package">type <a href="src/pkg/go/doc/doc.htm#L4">Package</a></h2>
			<pre>type Package struct {
    Doc        string
    Name       string
    ImportPath string
    Imports    []string
    Filenames  []string
    Bugs       []string

    <span class="comment">// declarations</span>
    Consts []*Value
    Types  []*Type
    Vars   []*Value
    Funcs  []*Func
}</pre>
			<p>
Package is the documentation for an entire package.
</p>


			

			

			

			
				
				<h3 id="New">func <a href="src/pkg/go/doc/doc.htm#L70">New</a></h3>
				<pre>func New(pkg *ast.Package, importPath string, mode Mode) *Package</pre>
				<p>
New computes the package documentation for the given package AST.
New takes ownership of the AST pkg and may edit or overwrite it.
</p>

				
			

			
				
				<h3 id="Package.Filter">func (*Package) <a href="src/pkg/go/doc/filter.htm#L89">Filter</a></h3>
				<pre>func (p *Package) Filter(f Filter)</pre>
				<p>
Filter eliminates documentation for names that don&#39;t pass through the filter f.
TODO: Recognize &#34;Type.Method&#34; as a name.
</p>

				
				
			
		
			
			
			<h2 id="Type">type <a href="src/pkg/go/doc/doc.htm#L29">Type</a></h2>
			<pre>type Type struct {
    Doc  string
    Name string
    Decl *ast.GenDecl

    <span class="comment">// associated declarations</span>
    Consts  []*Value <span class="comment">// sorted list of constants of (mostly) this type</span>
    Vars    []*Value <span class="comment">// sorted list of variables of (mostly) this type</span>
    Funcs   []*Func  <span class="comment">// sorted list of functions returning this type</span>
    Methods []*Func  <span class="comment">// sorted list of methods (including embedded ones) of this type</span>
}</pre>
			<p>
Type is the documentation for a type declaration.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Value">type <a href="src/pkg/go/doc/doc.htm#L20">Value</a></h2>
			<pre>type Value struct {
    Doc   string
    Names []string <span class="comment">// var or const names in declaration order</span>
    Decl  *ast.GenDecl
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Value is the documentation for a (possibly grouped) var or const declaration.
</p>


			

			

			

			

			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
