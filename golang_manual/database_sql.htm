
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>sql - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package sql</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "database/sql"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
				<dd><a href="#subdirectories">Subdirectories</a></dd>
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package sql provides a generic interface around SQL (or SQL-like)
databases.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
				<dd><a href="#variables">Variables</a></dd>
			
			
				
				<dd><a href="#Register">func Register(name string, driver driver.Driver)</a></dd>
			
			
				
				<dd><a href="#DB">type DB</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Open">func Open(driverName, dataSourceName string) (*DB, error)</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#DB.Begin">func (db *DB) Begin() (*Tx, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#DB.Close">func (db *DB) Close() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#DB.Driver">func (db *DB) Driver() driver.Driver</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#DB.Exec">func (db *DB) Exec(query string, args ...interface{}) (Result, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#DB.Prepare">func (db *DB) Prepare(query string) (*Stmt, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#DB.Query">func (db *DB) Query(query string, args ...interface{}) (*Rows, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#DB.QueryRow">func (db *DB) QueryRow(query string, args ...interface{}) *Row</a></dd>
				
			
				
				<dd><a href="#NullBool">type NullBool</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#NullBool.Scan">func (n *NullBool) Scan(value interface{}) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NullBool.Value">func (n NullBool) Value() (driver.Value, error)</a></dd>
				
			
				
				<dd><a href="#NullFloat64">type NullFloat64</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#NullFloat64.Scan">func (n *NullFloat64) Scan(value interface{}) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NullFloat64.Value">func (n NullFloat64) Value() (driver.Value, error)</a></dd>
				
			
				
				<dd><a href="#NullInt64">type NullInt64</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#NullInt64.Scan">func (n *NullInt64) Scan(value interface{}) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NullInt64.Value">func (n NullInt64) Value() (driver.Value, error)</a></dd>
				
			
				
				<dd><a href="#NullString">type NullString</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#NullString.Scan">func (ns *NullString) Scan(value interface{}) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NullString.Value">func (ns NullString) Value() (driver.Value, error)</a></dd>
				
			
				
				<dd><a href="#RawBytes">type RawBytes</a></dd>
				
				
			
				
				<dd><a href="#Result">type Result</a></dd>
				
				
			
				
				<dd><a href="#Row">type Row</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Row.Scan">func (r *Row) Scan(dest ...interface{}) error</a></dd>
				
			
				
				<dd><a href="#Rows">type Rows</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Rows.Close">func (rs *Rows) Close() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rows.Columns">func (rs *Rows) Columns() ([]string, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rows.Err">func (rs *Rows) Err() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rows.Next">func (rs *Rows) Next() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rows.Scan">func (rs *Rows) Scan(dest ...interface{}) error</a></dd>
				
			
				
				<dd><a href="#Scanner">type Scanner</a></dd>
				
				
			
				
				<dd><a href="#Stmt">type Stmt</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Stmt.Close">func (s *Stmt) Close() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Stmt.Exec">func (s *Stmt) Exec(args ...interface{}) (Result, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Stmt.Query">func (s *Stmt) Query(args ...interface{}) (*Rows, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Stmt.QueryRow">func (s *Stmt) QueryRow(args ...interface{}) *Row</a></dd>
				
			
				
				<dd><a href="#Tx">type Tx</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Tx.Commit">func (tx *Tx) Commit() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Tx.Exec">func (tx *Tx) Exec(query string, args ...interface{}) (Result, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Tx.Prepare">func (tx *Tx) Prepare(query string) (*Stmt, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Tx.Query">func (tx *Tx) Query(query string, args ...interface{}) (*Rows, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Tx.QueryRow">func (tx *Tx) QueryRow(query string, args ...interface{}) *Row</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Tx.Rollback">func (tx *Tx) Rollback() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Tx.Stmt">func (tx *Tx) Stmt(stmt *Stmt) *Stmt</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/database/sql/convert.htm">convert.go</a>
			
				<a href="src/pkg/database/sql/sql.htm">sql.go</a>
			
			</span>
			</p>
		
	
		
		
			<h2 id="variables">Variables</h2>
			
				<pre>var ErrNoRows = errors.New(&#34;sql: no rows in result set&#34;)</pre>
				<p>
ErrNoRows is returned by Scan when QueryRow doesn&#39;t return a
row. In such a case, QueryRow returns a placeholder *Row value that
defers this error until a Scan.
</p>

			
				<pre>var ErrTxDone = errors.New(&#34;sql: Transaction has already been committed or rolled back&#34;)</pre>
				
			
		
		
			
			
			<h2 id="Register">func <a href="src/pkg/database/sql/sql.htm#L12">Register</a></h2>
			<pre>func Register(name string, driver driver.Driver)</pre>
			<p>
Register makes a database driver available by the provided name.
If Register is called twice with the same name or if driver is nil,
it panics.
</p>

			
		
		
			
			
			<h2 id="DB">type <a href="src/pkg/database/sql/sql.htm#L178">DB</a></h2>
			<pre>type DB struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
DB is a database handle. It&#39;s safe for concurrent use by multiple
goroutines.
</p>
<p>
If the underlying database driver has the concept of a connection
and per-connection session state, the sql package manages creating
and freeing connections automatically, including maintaining a free
pool of idle connections. If observing session state is required,
either do not share a *DB between multiple concurrent goroutines or
create and observe all state only within a transaction. Once
DB.Open is called, the returned Tx is bound to a single isolated
connection. Once Tx.Commit or Tx.Rollback is called, that
connection is returned to DB&#39;s idle connection pool.
</p>


			

			

			

			
				
				<h3 id="Open">func <a href="src/pkg/database/sql/sql.htm#L193">Open</a></h3>
				<pre>func Open(driverName, dataSourceName string) (*DB, error)</pre>
				<p>
Open opens a database specified by its database driver name and a
driver-specific data source name, usually consisting of at least a
database name and connection information.
</p>
<p>
Most users will open a database via a driver-specific connection
helper function that returns a *DB.
</p>

				
			

			
				
				<h3 id="DB.Begin">func (*DB) <a href="src/pkg/database/sql/sql.htm#L388">Begin</a></h3>
				<pre>func (db *DB) Begin() (*Tx, error)</pre>
				<p>
Begin starts a transaction. The isolation level is dependent on
the driver.
</p>

				
				
			
				
				<h3 id="DB.Close">func (*DB) <a href="src/pkg/database/sql/sql.htm#L202">Close</a></h3>
				<pre>func (db *DB) Close() error</pre>
				<p>
Close closes the database, releasing any open resources.
</p>

				
				
			
				
				<h3 id="DB.Driver">func (*DB) <a href="src/pkg/database/sql/sql.htm#L418">Driver</a></h3>
				<pre>func (db *DB) Driver() driver.Driver</pre>
				<p>
Driver returns the database&#39;s underlying driver.
</p>

				
				
			
				
				<h3 id="DB.Exec">func (*DB) <a href="src/pkg/database/sql/sql.htm#L318">Exec</a></h3>
				<pre>func (db *DB) Exec(query string, args ...interface{}) (Result, error)</pre>
				<p>
Exec executes a query without returning any rows.
</p>

				
				
			
				
				<h3 id="DB.Prepare">func (*DB) <a href="src/pkg/database/sql/sql.htm#L281">Prepare</a></h3>
				<pre>func (db *DB) Prepare(query string) (*Stmt, error)</pre>
				<p>
Prepare creates a prepared statement for later execution.
</p>

				
				
			
				
				<h3 id="DB.Query">func (*DB) <a href="src/pkg/database/sql/sql.htm#L364">Query</a></h3>
				<pre>func (db *DB) Query(query string, args ...interface{}) (*Rows, error)</pre>
				<p>
Query executes a query that returns rows, typically a SELECT.
</p>

				
				
			
				
				<h3 id="DB.QueryRow">func (*DB) <a href="src/pkg/database/sql/sql.htm#L381">QueryRow</a></h3>
				<pre>func (db *DB) QueryRow(query string, args ...interface{}) *Row</pre>
				<p>
QueryRow executes a query that is expected to return at most one row.
QueryRow always return a non-nil value. Errors are deferred until
Row&#39;s Scan method is called.
</p>

				
				
			
		
			
			
			<h2 id="NullBool">type <a href="src/pkg/database/sql/sql.htm#L118">NullBool</a></h2>
			<pre>type NullBool struct {
    Bool  bool
    Valid bool <span class="comment">// Valid is true if Bool is not NULL</span>
}</pre>
			<p>
NullBool represents a bool that may be null.
NullBool implements the Scanner interface so
it can be used as a scan destination, similar to NullString.
</p>


			

			

			

			

			
				
				<h3 id="NullBool.Scan">func (*NullBool) <a href="src/pkg/database/sql/sql.htm#L124">Scan</a></h3>
				<pre>func (n *NullBool) Scan(value interface{}) error</pre>
				<p>
Scan implements the Scanner interface.
</p>

				
				
			
				
				<h3 id="NullBool.Value">func (NullBool) <a href="src/pkg/database/sql/sql.htm#L134">Value</a></h3>
				<pre>func (n NullBool) Value() (driver.Value, error)</pre>
				<p>
Value implements the driver Valuer interface.
</p>

				
				
			
		
			
			
			<h2 id="NullFloat64">type <a href="src/pkg/database/sql/sql.htm#L92">NullFloat64</a></h2>
			<pre>type NullFloat64 struct {
    Float64 float64
    Valid   bool <span class="comment">// Valid is true if Float64 is not NULL</span>
}</pre>
			<p>
NullFloat64 represents a float64 that may be null.
NullFloat64 implements the Scanner interface so
it can be used as a scan destination, similar to NullString.
</p>


			

			

			

			

			
				
				<h3 id="NullFloat64.Scan">func (*NullFloat64) <a href="src/pkg/database/sql/sql.htm#L98">Scan</a></h3>
				<pre>func (n *NullFloat64) Scan(value interface{}) error</pre>
				<p>
Scan implements the Scanner interface.
</p>

				
				
			
				
				<h3 id="NullFloat64.Value">func (NullFloat64) <a href="src/pkg/database/sql/sql.htm#L108">Value</a></h3>
				<pre>func (n NullFloat64) Value() (driver.Value, error)</pre>
				<p>
Value implements the driver Valuer interface.
</p>

				
				
			
		
			
			
			<h2 id="NullInt64">type <a href="src/pkg/database/sql/sql.htm#L66">NullInt64</a></h2>
			<pre>type NullInt64 struct {
    Int64 int64
    Valid bool <span class="comment">// Valid is true if Int64 is not NULL</span>
}</pre>
			<p>
NullInt64 represents an int64 that may be null.
NullInt64 implements the Scanner interface so
it can be used as a scan destination, similar to NullString.
</p>


			

			

			

			

			
				
				<h3 id="NullInt64.Scan">func (*NullInt64) <a href="src/pkg/database/sql/sql.htm#L72">Scan</a></h3>
				<pre>func (n *NullInt64) Scan(value interface{}) error</pre>
				<p>
Scan implements the Scanner interface.
</p>

				
				
			
				
				<h3 id="NullInt64.Value">func (NullInt64) <a href="src/pkg/database/sql/sql.htm#L82">Value</a></h3>
				<pre>func (n NullInt64) Value() (driver.Value, error)</pre>
				<p>
Value implements the driver Valuer interface.
</p>

				
				
			
		
			
			
			<h2 id="NullString">type <a href="src/pkg/database/sql/sql.htm#L40">NullString</a></h2>
			<pre>type NullString struct {
    String string
    Valid  bool <span class="comment">// Valid is true if String is not NULL</span>
}</pre>
			<p>
NullString represents a string that may be null.
NullString implements the Scanner interface so
it can be used as a scan destination:
</p>
<pre>var s NullString
err := db.QueryRow(&#34;SELECT name FROM foo WHERE id=?&#34;, id).Scan(&amp;s)
...
if s.Valid {
   // use s.String
} else {
   // NULL value
}
</pre>


			

			

			

			

			
				
				<h3 id="NullString.Scan">func (*NullString) <a href="src/pkg/database/sql/sql.htm#L46">Scan</a></h3>
				<pre>func (ns *NullString) Scan(value interface{}) error</pre>
				<p>
Scan implements the Scanner interface.
</p>

				
				
			
				
				<h3 id="NullString.Value">func (NullString) <a href="src/pkg/database/sql/sql.htm#L56">Value</a></h3>
				<pre>func (ns NullString) Value() (driver.Value, error)</pre>
				<p>
Value implements the driver Valuer interface.
</p>

				
				
			
		
			
			
			<h2 id="RawBytes">type <a href="src/pkg/database/sql/sql.htm#L25">RawBytes</a></h2>
			<pre>type RawBytes []byte</pre>
			<p>
RawBytes is a byte slice that holds a reference to memory owned by
the database itself. After a Scan into a RawBytes, the slice is only
valid until the next call to Next, Scan, or Close.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Result">type <a href="src/pkg/database/sql/sql.htm#L1049">Result</a></h2>
			<pre>type Result interface {
    LastInsertId() (int64, error)
    RowsAffected() (int64, error)
}</pre>
			<p>
A Result summarizes an executed SQL command.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Row">type <a href="src/pkg/database/sql/sql.htm#L1002">Row</a></h2>
			<pre>type Row struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Row is the result of calling QueryRow to select a single row.
</p>


			

			

			

			

			
				
				<h3 id="Row.Scan">func (*Row) <a href="src/pkg/database/sql/sql.htm#L1012">Scan</a></h3>
				<pre>func (r *Row) Scan(dest ...interface{}) error</pre>
				<p>
Scan copies the columns from the matched row into the values
pointed at by dest.  If more than one row matches the query,
Scan uses the first row and discards the rest.  If no row matches
the query, Scan returns ErrNoRows.
</p>

				
				
			
		
			
			
			<h2 id="Rows">type <a href="src/pkg/database/sql/sql.htm#L879">Rows</a></h2>
			<pre>type Rows struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Rows is the result of a query. Its cursor starts before the first row
of the result set. Use Next to advance through the rows:
</p>
<pre>rows, err := db.Query(&#34;SELECT ...&#34;)
...
for rows.Next() {
    var id int
    var name string
    err = rows.Scan(&amp;id, &amp;name)
    ...
}
err = rows.Err() // get any error encountered during iteration
...
</pre>


			

			

			

			

			
				
				<h3 id="Rows.Close">func (*Rows) <a href="src/pkg/database/sql/sql.htm#L988">Close</a></h3>
				<pre>func (rs *Rows) Close() error</pre>
				<p>
Close closes the Rows, preventing further enumeration. If the
end is encountered, the Rows are closed automatically. Close
is idempotent.
</p>

				
				
			
				
				<h3 id="Rows.Columns">func (*Rows) <a href="src/pkg/database/sql/sql.htm#L923">Columns</a></h3>
				<pre>func (rs *Rows) Columns() ([]string, error)</pre>
				<p>
Columns returns the column names.
Columns returns an error if the rows are closed, or if the rows
are from QueryRow and there was a deferred error.
</p>

				
				
			
				
				<h3 id="Rows.Err">func (*Rows) <a href="src/pkg/database/sql/sql.htm#L913">Err</a></h3>
				<pre>func (rs *Rows) Err() error</pre>
				<p>
Err returns the error, if any, that was encountered during iteration.
</p>

				
				
			
				
				<h3 id="Rows.Next">func (*Rows) <a href="src/pkg/database/sql/sql.htm#L895">Next</a></h3>
				<pre>func (rs *Rows) Next() bool</pre>
				<p>
Next prepares the next result row for reading with the Scan method.
It returns true on success, false if there is no next result row.
Every call to Scan, even the first one, must be preceded by a call
to Next.
</p>

				
				
			
				
				<h3 id="Rows.Scan">func (*Rows) <a href="src/pkg/database/sql/sql.htm#L945">Scan</a></h3>
				<pre>func (rs *Rows) Scan(dest ...interface{}) error</pre>
				<p>
Scan copies the columns in the current row into the values pointed
at by dest.
</p>
<p>
If an argument has type *[]byte, Scan saves in that argument a copy
of the corresponding data. The copy is owned by the caller and can
be modified and held indefinitely. The copy can be avoided by using
an argument of type *RawBytes instead; see the documentation for
RawBytes for restrictions on its use.
</p>
<p>
If an argument has type *interface{}, Scan copies the value
provided by the underlying driver without conversion. If the value
is of type []byte, a copy is made and the caller owns the result.
</p>

				
				
			
		
			
			
			<h2 id="Scanner">type <a href="src/pkg/database/sql/sql.htm#L142">Scanner</a></h2>
			<pre>type Scanner interface {
    <span class="comment">// Scan assigns a value from a database driver.</span>
    <span class="comment">//</span>
    <span class="comment">// The src value will be of one of the following restricted</span>
    <span class="comment">// set of types:</span>
    <span class="comment">//</span>
    <span class="comment">//    int64</span>
    <span class="comment">//    float64</span>
    <span class="comment">//    bool</span>
    <span class="comment">//    []byte</span>
    <span class="comment">//    string</span>
    <span class="comment">//    time.Time</span>
    <span class="comment">//    nil - for NULL values</span>
    <span class="comment">//</span>
    <span class="comment">// An error should be returned if the value can not be stored</span>
    <span class="comment">// without loss of information.</span>
    Scan(src interface{}) error
}</pre>
			<p>
Scanner is an interface used by Scan.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Stmt">type <a href="src/pkg/database/sql/sql.htm#L631">Stmt</a></h2>
			<pre>type Stmt struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Stmt is a prepared statement. Stmt is safe for concurrent use by multiple goroutines.
</p>


			

			

			

			

			
				
				<h3 id="Stmt.Close">func (*Stmt) <a href="src/pkg/database/sql/sql.htm#L838">Close</a></h3>
				<pre>func (s *Stmt) Close() error</pre>
				<p>
Close closes the statement.
</p>

				
				
			
				
				<h3 id="Stmt.Exec">func (*Stmt) <a href="src/pkg/database/sql/sql.htm#L653">Exec</a></h3>
				<pre>func (s *Stmt) Exec(args ...interface{}) (Result, error)</pre>
				<p>
Exec executes a prepared statement with the given arguments and
returns a Result summarizing the effect of the statement.
</p>

				
				
			
				
				<h3 id="Stmt.Query">func (*Stmt) <a href="src/pkg/database/sql/sql.htm#L786">Query</a></h3>
				<pre>func (s *Stmt) Query(args ...interface{}) (*Rows, error)</pre>
				<p>
Query executes a prepared query statement with the given arguments
and returns the query results as a *Rows.
</p>

				
				
			
				
				<h3 id="Stmt.QueryRow">func (*Stmt) <a href="src/pkg/database/sql/sql.htm#L829">QueryRow</a></h3>
				<pre>func (s *Stmt) QueryRow(args ...interface{}) *Row</pre>
				<p>
QueryRow executes a prepared query statement with the given arguments.
If an error occurs during the execution of the statement, that error will
be returned by a call to Scan on the returned *Row, which is always non-nil.
If the query selects no rows, the *Row&#39;s Scan will return ErrNoRows.
Otherwise, the *Row&#39;s Scan scans the first selected row and discards
the rest.
</p>
<p>
Example usage:
</p>
<pre>var name string
err := nameByUseridStmt.QueryRow(id).Scan(&amp;name)
</pre>

				
				
			
		
			
			
			<h2 id="Tx">type <a href="src/pkg/database/sql/sql.htm#L428">Tx</a></h2>
			<pre>type Tx struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Tx is an in-progress database transaction.
</p>
<p>
A transaction must end with a call to Commit or Rollback.
</p>
<p>
After a call to Commit or Rollback, all operations on the
transaction fail with ErrTxDone.
</p>


			

			

			

			

			
				
				<h3 id="Tx.Commit">func (*Tx) <a href="src/pkg/database/sql/sql.htm#L471">Commit</a></h3>
				<pre>func (tx *Tx) Commit() error</pre>
				<p>
Commit commits the transaction.
</p>

				
				
			
				
				<h3 id="Tx.Exec">func (*Tx) <a href="src/pkg/database/sql/sql.htm#L563">Exec</a></h3>
				<pre>func (tx *Tx) Exec(query string, args ...interface{}) (Result, error)</pre>
				<p>
Exec executes a query that doesn&#39;t return rows.
For example: an INSERT and UPDATE.
</p>

				
				
			
				
				<h3 id="Tx.Prepare">func (*Tx) <a href="src/pkg/database/sql/sql.htm#L494">Prepare</a></h3>
				<pre>func (tx *Tx) Prepare(query string) (*Stmt, error)</pre>
				<p>
Prepare creates a prepared statement for use within a transaction.
</p>
<p>
The returned statement operates within the transaction and can no longer
be used once the transaction has been committed or rolled back.
</p>
<p>
To use an existing prepared statement on this transaction, see Tx.Stmt.
</p>

				
				
			
				
				<h3 id="Tx.Query">func (*Tx) <a href="src/pkg/database/sql/sql.htm#L599">Query</a></h3>
				<pre>func (tx *Tx) Query(query string, args ...interface{}) (*Rows, error)</pre>
				<p>
Query executes a query that returns rows, typically a SELECT.
</p>

				
				
			
				
				<h3 id="Tx.QueryRow">func (*Tx) <a href="src/pkg/database/sql/sql.htm#L619">QueryRow</a></h3>
				<pre>func (tx *Tx) QueryRow(query string, args ...interface{}) *Row</pre>
				<p>
QueryRow executes a query that is expected to return at most one row.
QueryRow always return a non-nil value. Errors are deferred until
Row&#39;s Scan method is called.
</p>

				
				
			
				
				<h3 id="Tx.Rollback">func (*Tx) <a href="src/pkg/database/sql/sql.htm#L480">Rollback</a></h3>
				<pre>func (tx *Tx) Rollback() error</pre>
				<p>
Rollback aborts the transaction.
</p>

				
				
			
				
				<h3 id="Tx.Stmt">func (*Tx) <a href="src/pkg/database/sql/sql.htm#L537">Stmt</a></h3>
				<pre>func (tx *Tx) Stmt(stmt *Stmt) *Stmt</pre>
				<p>
Stmt returns a transaction-specific prepared statement from
an existing statement.
</p>
<p>
Example:
</p>
<pre>updateMoney, err := db.Prepare(&#34;UPDATE balance SET money=money+? WHERE id=?&#34;)
...
tx, err := db.Begin()
...
res, err := tx.Stmt(updateMoney).Exec(123.45, 98293203)
</pre>

				
				
			
		
		</div>
	

	







	
	
		<h2 id="subdirectories">Subdirectories</h2>
	
	<table class="dir">
	<tr>
	<th>Name</th>
	<th>&nbsp;&nbsp;&nbsp;&nbsp;</th>
	<th style="text-align: left; width: auto">Synopsis</th>
	</tr>
	
		
			<tr>
			<td class="name"><a href="database_sql_drive.htm">driver</a></td>
			<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
			<td style="width: auto">Package driver defines interfaces to be implemented by database drivers as used by package sql.</td>
			</tr>
		
	
	</table>
	



</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
