
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>errors - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package errors</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "errors"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
				<dd><a href="#examples">Examples</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package errors implements functions to manipulate errors.
</p>

			</div>
		</div>
		<div id="example_" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">package errors_test

import (
    &#34;fmt&#34;
    &#34;time&#34;
)

<span class="comment">// MyError is an error implementation that includes a time and message.</span>
type MyError struct {
    When time.Time
    What string
}

func (e MyError) Error() string {
    return fmt.Sprintf(&#34;%v: %v&#34;, e.When, e.What)
}

func oops() error {
    return MyError{
        time.Date(1989, 3, 15, 22, 30, 0, 0, time.UTC),
        &#34;the file system has gone away&#34;,
    }
}

func Example() {
    if err := oops(); err != nil {
        fmt.Println(err)
    }
    <span class="comment">// Output: 1989-03-15 22:30:00 +0000 UTC: the file system has gone away</span>
}
</pre>
		
	</div>
</div>

	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#New">func New(text string) error</a></dd>
			
			
			
		</dl>

		
			<h4 id="examples">Examples</h4>
			<dl>
			
			<dd><a class="exampleLink" href="#example_">Package</a></dd>
			
			<dd><a class="exampleLink" href="#example_New">New</a></dd>
			
			<dd><a class="exampleLink" href="#example_New_errorf">New (Errorf)</a></dd>
			
			</dl>
		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/errors/errors.htm">errors.go</a>
			
			</span>
			</p>
		
	
		
		
		
			
			
			<h2 id="New">func <a href="src/pkg/errors/errors.htm#L1">New</a></h2>
			<pre>func New(text string) error</pre>
			<p>
New returns an error that formats as the given text.
</p>

			<div id="example_New" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">err := errors.New(&#34;emit macho dwarf: elf header corrupted&#34;)
if err != nil {
    fmt.Print(err)
}
<span class="comment"></pre>
		
		<p>Output:</p>
		<pre class="output">emit macho dwarf: elf header corrupted</pre>
		
	</div>
</div>
<div id="example_New_errorf" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example (Errorf)</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example (Errorf)</span></p>
		<p>The fmt package&#39;s Errorf function lets us use the package&#39;s formatting
features to create descriptive error messages.
</p>
		<p>Code:</p>
		<pre class="code">const name, id = &#34;bimmler&#34;, 17
err := fmt.Errorf(&#34;user %q (id %d) not found&#34;, name, id)
if err != nil {
    fmt.Print(err)
}
<span class="comment"></pre>
		
		<p>Output:</p>
		<pre class="output">user &#34;bimmler&#34; (id 17) not found</pre>
		
	</div>
</div>

		
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
