
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>atomic - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package atomic</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "sync/atomic"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package atomic provides low-level atomic memory primitives
useful for implementing synchronization algorithms.
</p>
<p>
These functions require great care to be used correctly.
Except for special, low-level applications, synchronization is better
done with channels or the facilities of the sync package.
Share memory by communicating;
don&#39;t communicate by sharing memory.
</p>
<p>
The compare-and-swap operation, implemented by the CompareAndSwapT
functions, is the atomic equivalent of:
</p>
<pre>if *val == old {
	*val = new
	return true
}
return false
</pre>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#AddInt32">func AddInt32(val *int32, delta int32) (new int32)</a></dd>
			
				
				<dd><a href="#AddInt64">func AddInt64(val *int64, delta int64) (new int64)</a></dd>
			
				
				<dd><a href="#AddUint32">func AddUint32(val *uint32, delta uint32) (new uint32)</a></dd>
			
				
				<dd><a href="#AddUint64">func AddUint64(val *uint64, delta uint64) (new uint64)</a></dd>
			
				
				<dd><a href="#AddUintptr">func AddUintptr(val *uintptr, delta uintptr) (new uintptr)</a></dd>
			
				
				<dd><a href="#CompareAndSwapInt32">func CompareAndSwapInt32(val *int32, old, new int32) (swapped bool)</a></dd>
			
				
				<dd><a href="#CompareAndSwapInt64">func CompareAndSwapInt64(val *int64, old, new int64) (swapped bool)</a></dd>
			
				
				<dd><a href="#CompareAndSwapPointer">func CompareAndSwapPointer(val *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)</a></dd>
			
				
				<dd><a href="#CompareAndSwapUint32">func CompareAndSwapUint32(val *uint32, old, new uint32) (swapped bool)</a></dd>
			
				
				<dd><a href="#CompareAndSwapUint64">func CompareAndSwapUint64(val *uint64, old, new uint64) (swapped bool)</a></dd>
			
				
				<dd><a href="#CompareAndSwapUintptr">func CompareAndSwapUintptr(val *uintptr, old, new uintptr) (swapped bool)</a></dd>
			
				
				<dd><a href="#LoadInt32">func LoadInt32(addr *int32) (val int32)</a></dd>
			
				
				<dd><a href="#LoadInt64">func LoadInt64(addr *int64) (val int64)</a></dd>
			
				
				<dd><a href="#LoadPointer">func LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)</a></dd>
			
				
				<dd><a href="#LoadUint32">func LoadUint32(addr *uint32) (val uint32)</a></dd>
			
				
				<dd><a href="#LoadUint64">func LoadUint64(addr *uint64) (val uint64)</a></dd>
			
				
				<dd><a href="#LoadUintptr">func LoadUintptr(addr *uintptr) (val uintptr)</a></dd>
			
				
				<dd><a href="#StoreInt32">func StoreInt32(addr *int32, val int32)</a></dd>
			
				
				<dd><a href="#StoreInt64">func StoreInt64(addr *int64, val int64)</a></dd>
			
				
				<dd><a href="#StorePointer">func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)</a></dd>
			
				
				<dd><a href="#StoreUint32">func StoreUint32(addr *uint32, val uint32)</a></dd>
			
				
				<dd><a href="#StoreUint64">func StoreUint64(addr *uint64, val uint64)</a></dd>
			
				
				<dd><a href="#StoreUintptr">func StoreUintptr(addr *uintptr, val uintptr)</a></dd>
			
			
			
				<dd><a href="#bugs">Bugs</a></dd>
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/sync/atomic/doc.htm">doc.go</a>
			
			</span>
			</p>
		
	
		
		
		
			
			
			<h2 id="AddInt32">func <a href="src/pkg/sync/atomic/doc.htm#L42">AddInt32</a></h2>
			<pre>func AddInt32(val *int32, delta int32) (new int32)</pre>
			<p>
AddInt32 atomically adds delta to *val and returns the new value.
</p>

			
		
			
			
			<h2 id="AddInt64">func <a href="src/pkg/sync/atomic/doc.htm#L48">AddInt64</a></h2>
			<pre>func AddInt64(val *int64, delta int64) (new int64)</pre>
			<p>
AddInt64 atomically adds delta to *val and returns the new value.
</p>

			
		
			
			
			<h2 id="AddUint32">func <a href="src/pkg/sync/atomic/doc.htm#L45">AddUint32</a></h2>
			<pre>func AddUint32(val *uint32, delta uint32) (new uint32)</pre>
			<p>
AddUint32 atomically adds delta to *val and returns the new value.
</p>

			
		
			
			
			<h2 id="AddUint64">func <a href="src/pkg/sync/atomic/doc.htm#L51">AddUint64</a></h2>
			<pre>func AddUint64(val *uint64, delta uint64) (new uint64)</pre>
			<p>
AddUint64 atomically adds delta to *val and returns the new value.
</p>

			
		
			
			
			<h2 id="AddUintptr">func <a href="src/pkg/sync/atomic/doc.htm#L54">AddUintptr</a></h2>
			<pre>func AddUintptr(val *uintptr, delta uintptr) (new uintptr)</pre>
			<p>
AddUintptr atomically adds delta to *val and returns the new value.
</p>

			
		
			
			
			<h2 id="CompareAndSwapInt32">func <a href="src/pkg/sync/atomic/doc.htm#L24">CompareAndSwapInt32</a></h2>
			<pre>func CompareAndSwapInt32(val *int32, old, new int32) (swapped bool)</pre>
			<p>
CompareAndSwapInt32 executes the compare-and-swap operation for an int32 value.
</p>

			
		
			
			
			<h2 id="CompareAndSwapInt64">func <a href="src/pkg/sync/atomic/doc.htm#L27">CompareAndSwapInt64</a></h2>
			<pre>func CompareAndSwapInt64(val *int64, old, new int64) (swapped bool)</pre>
			<p>
CompareAndSwapInt64 executes the compare-and-swap operation for an int64 value.
</p>

			
		
			
			
			<h2 id="CompareAndSwapPointer">func <a href="src/pkg/sync/atomic/doc.htm#L39">CompareAndSwapPointer</a></h2>
			<pre>func CompareAndSwapPointer(val *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)</pre>
			<p>
CompareAndSwapPointer executes the compare-and-swap operation for a unsafe.Pointer value.
</p>

			
		
			
			
			<h2 id="CompareAndSwapUint32">func <a href="src/pkg/sync/atomic/doc.htm#L30">CompareAndSwapUint32</a></h2>
			<pre>func CompareAndSwapUint32(val *uint32, old, new uint32) (swapped bool)</pre>
			<p>
CompareAndSwapUint32 executes the compare-and-swap operation for a uint32 value.
</p>

			
		
			
			
			<h2 id="CompareAndSwapUint64">func <a href="src/pkg/sync/atomic/doc.htm#L33">CompareAndSwapUint64</a></h2>
			<pre>func CompareAndSwapUint64(val *uint64, old, new uint64) (swapped bool)</pre>
			<p>
CompareAndSwapUint64 executes the compare-and-swap operation for a uint64 value.
</p>

			
		
			
			
			<h2 id="CompareAndSwapUintptr">func <a href="src/pkg/sync/atomic/doc.htm#L36">CompareAndSwapUintptr</a></h2>
			<pre>func CompareAndSwapUintptr(val *uintptr, old, new uintptr) (swapped bool)</pre>
			<p>
CompareAndSwapUintptr executes the compare-and-swap operation for a uintptr value.
</p>

			
		
			
			
			<h2 id="LoadInt32">func <a href="src/pkg/sync/atomic/doc.htm#L57">LoadInt32</a></h2>
			<pre>func LoadInt32(addr *int32) (val int32)</pre>
			<p>
LoadInt32 atomically loads *addr.
</p>

			
		
			
			
			<h2 id="LoadInt64">func <a href="src/pkg/sync/atomic/doc.htm#L60">LoadInt64</a></h2>
			<pre>func LoadInt64(addr *int64) (val int64)</pre>
			<p>
LoadInt64 atomically loads *addr.
</p>

			
		
			
			
			<h2 id="LoadPointer">func <a href="src/pkg/sync/atomic/doc.htm#L72">LoadPointer</a></h2>
			<pre>func LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)</pre>
			<p>
LoadPointer atomically loads *addr.
</p>

			
		
			
			
			<h2 id="LoadUint32">func <a href="src/pkg/sync/atomic/doc.htm#L63">LoadUint32</a></h2>
			<pre>func LoadUint32(addr *uint32) (val uint32)</pre>
			<p>
LoadUint32 atomically loads *addr.
</p>

			
		
			
			
			<h2 id="LoadUint64">func <a href="src/pkg/sync/atomic/doc.htm#L66">LoadUint64</a></h2>
			<pre>func LoadUint64(addr *uint64) (val uint64)</pre>
			<p>
LoadUint64 atomically loads *addr.
</p>

			
		
			
			
			<h2 id="LoadUintptr">func <a href="src/pkg/sync/atomic/doc.htm#L69">LoadUintptr</a></h2>
			<pre>func LoadUintptr(addr *uintptr) (val uintptr)</pre>
			<p>
LoadUintptr atomically loads *addr.
</p>

			
		
			
			
			<h2 id="StoreInt32">func <a href="src/pkg/sync/atomic/doc.htm#L75">StoreInt32</a></h2>
			<pre>func StoreInt32(addr *int32, val int32)</pre>
			<p>
StoreInt32 atomically stores val into *addr.
</p>

			
		
			
			
			<h2 id="StoreInt64">func <a href="src/pkg/sync/atomic/doc.htm#L78">StoreInt64</a></h2>
			<pre>func StoreInt64(addr *int64, val int64)</pre>
			<p>
StoreInt64 atomically stores val into *addr.
</p>

			
		
			
			
			<h2 id="StorePointer">func <a href="src/pkg/sync/atomic/doc.htm#L90">StorePointer</a></h2>
			<pre>func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)</pre>
			<p>
StorePointer atomically stores val into *addr.
</p>

			
		
			
			
			<h2 id="StoreUint32">func <a href="src/pkg/sync/atomic/doc.htm#L81">StoreUint32</a></h2>
			<pre>func StoreUint32(addr *uint32, val uint32)</pre>
			<p>
StoreUint32 atomically stores val into *addr.
</p>

			
		
			
			
			<h2 id="StoreUint64">func <a href="src/pkg/sync/atomic/doc.htm#L84">StoreUint64</a></h2>
			<pre>func StoreUint64(addr *uint64, val uint64)</pre>
			<p>
StoreUint64 atomically stores val into *addr.
</p>

			
		
			
			
			<h2 id="StoreUintptr">func <a href="src/pkg/sync/atomic/doc.htm#L87">StoreUintptr</a></h2>
			<pre>func StoreUintptr(addr *uintptr, val uintptr)</pre>
			<p>
StoreUintptr atomically stores val into *addr.
</p>

			
		
		
		</div>
	

	
		<h2 id="bugs">Bugs</h2>
		
		<p>
On ARM, the 64-bit functions use instructions unavailable before ARM 11.
</p>
<p>
On x86-32, the 64-bit functions use instructions unavailable before the Pentium MMX.
</p>

		
	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
