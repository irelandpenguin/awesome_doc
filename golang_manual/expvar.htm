
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>expvar - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package expvar</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "expvar"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package expvar provides a standardized interface to public variables, such
as operation counters in servers. It exposes these variables via HTTP at
/debug/vars in JSON format.
</p>
<p>
Operations to set or modify these public variables are atomic.
</p>
<p>
In addition to adding the HTTP handler, this package registers the
following variables:
</p>
<pre>cmdline   os.Args
memstats  runtime.Memstats
</pre>
<p>
The package is sometimes only imported for the side effect of
registering its HTTP handler and the above variables.  To use it
this way, link this package into your program:
</p>
<pre>import _ &#34;expvar&#34;
</pre>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#Do">func Do(f func(KeyValue))</a></dd>
			
				
				<dd><a href="#Publish">func Publish(name string, v Var)</a></dd>
			
			
				
				<dd><a href="#Float">type Float</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewFloat">func NewFloat(name string) *Float</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Float.Add">func (v *Float) Add(delta float64)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Float.Set">func (v *Float) Set(value float64)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Float.String">func (v *Float) String() string</a></dd>
				
			
				
				<dd><a href="#Func">type Func</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Func.String">func (f Func) String() string</a></dd>
				
			
				
				<dd><a href="#Int">type Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewInt">func NewInt(name string) *Int</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Add">func (v *Int) Add(delta int64)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Set">func (v *Int) Set(value int64)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.String">func (v *Int) String() string</a></dd>
				
			
				
				<dd><a href="#KeyValue">type KeyValue</a></dd>
				
				
			
				
				<dd><a href="#Map">type Map</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewMap">func NewMap(name string) *Map</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Map.Add">func (v *Map) Add(key string, delta int64)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Map.AddFloat">func (v *Map) AddFloat(key string, delta float64)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Map.Do">func (v *Map) Do(f func(KeyValue))</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Map.Get">func (v *Map) Get(key string) Var</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Map.Init">func (v *Map) Init() *Map</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Map.Set">func (v *Map) Set(key string, av Var)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Map.String">func (v *Map) String() string</a></dd>
				
			
				
				<dd><a href="#String">type String</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewString">func NewString(name string) *String</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#String.Set">func (v *String) Set(value string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#String.String">func (v *String) String() string</a></dd>
				
			
				
				<dd><a href="#Var">type Var</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Get">func Get(name string) Var</a></dd>
				
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/expvar/expvar.htm">expvar.go</a>
			
			</span>
			</p>
		
	
		
		
		
			
			
			<h2 id="Do">func <a href="src/pkg/expvar/expvar.htm#L260">Do</a></h2>
			<pre>func Do(f func(KeyValue))</pre>
			<p>
Do calls f for each exported variable.
The global variable map is locked during the iteration,
but existing entries may be concurrently updated.
</p>

			
		
			
			
			<h2 id="Publish">func <a href="src/pkg/expvar/expvar.htm#L215">Publish</a></h2>
			<pre>func Publish(name string, v Var)</pre>
			<p>
Publish declares a named exported variable. This should be called from a
package&#39;s init function when it creates its Vars. If the name is already
registered then this will log.Panic.
</p>

			
		
		
			
			
			<h2 id="Float">type <a href="src/pkg/expvar/expvar.htm#L56">Float</a></h2>
			<pre>type Float struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Float is a 64-bit float variable that satisfies the Var interface.
</p>


			

			

			

			
				
				<h3 id="NewFloat">func <a href="src/pkg/expvar/expvar.htm#L239">NewFloat</a></h3>
				<pre>func NewFloat(name string) *Float</pre>
				
				
			

			
				
				<h3 id="Float.Add">func (*Float) <a href="src/pkg/expvar/expvar.htm#L68">Add</a></h3>
				<pre>func (v *Float) Add(delta float64)</pre>
				<p>
Add adds delta to v.
</p>

				
				
			
				
				<h3 id="Float.Set">func (*Float) <a href="src/pkg/expvar/expvar.htm#L75">Set</a></h3>
				<pre>func (v *Float) Set(value float64)</pre>
				<p>
Set sets v to value.
</p>

				
				
			
				
				<h3 id="Float.String">func (*Float) <a href="src/pkg/expvar/expvar.htm#L61">String</a></h3>
				<pre>func (v *Float) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="Func">type <a href="src/pkg/expvar/expvar.htm#L199">Func</a></h2>
			<pre>type Func func() interface{}</pre>
			<p>
Func implements Var by calling the function
and formatting the returned value using JSON.
</p>


			

			

			

			

			
				
				<h3 id="Func.String">func (Func) <a href="src/pkg/expvar/expvar.htm#L201">String</a></h3>
				<pre>func (f Func) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="Int">type <a href="src/pkg/expvar/expvar.htm#L32">Int</a></h2>
			<pre>type Int struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Int is a 64-bit integer variable that satisfies the Var interface.
</p>


			

			

			

			
				
				<h3 id="NewInt">func <a href="src/pkg/expvar/expvar.htm#L233">NewInt</a></h3>
				<pre>func NewInt(name string) *Int</pre>
				
				
			

			
				
				<h3 id="Int.Add">func (*Int) <a href="src/pkg/expvar/expvar.htm#L43">Add</a></h3>
				<pre>func (v *Int) Add(delta int64)</pre>
				
				
				
			
				
				<h3 id="Int.Set">func (*Int) <a href="src/pkg/expvar/expvar.htm#L49">Set</a></h3>
				<pre>func (v *Int) Set(value int64)</pre>
				
				
				
			
				
				<h3 id="Int.String">func (*Int) <a href="src/pkg/expvar/expvar.htm#L37">String</a></h3>
				<pre>func (v *Int) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="KeyValue">type <a href="src/pkg/expvar/expvar.htm#L88">KeyValue</a></h2>
			<pre>type KeyValue struct {
    Key   string
    Value Var
}</pre>
			<p>
KeyValue represents a single entry in a Map.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Map">type <a href="src/pkg/expvar/expvar.htm#L82">Map</a></h2>
			<pre>type Map struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Map is a string-to-Var map variable that satisfies the Var interface.
</p>


			

			

			

			
				
				<h3 id="NewMap">func <a href="src/pkg/expvar/expvar.htm#L245">NewMap</a></h3>
				<pre>func NewMap(name string) *Map</pre>
				
				
			

			
				
				<h3 id="Map.Add">func (*Map) <a href="src/pkg/expvar/expvar.htm#L127">Add</a></h3>
				<pre>func (v *Map) Add(key string, delta int64)</pre>
				
				
				
			
				
				<h3 id="Map.AddFloat">func (*Map) <a href="src/pkg/expvar/expvar.htm#L148">AddFloat</a></h3>
				<pre>func (v *Map) AddFloat(key string, delta float64)</pre>
				<p>
AddFloat adds delta to the *Float value stored under the given map key.
</p>

				
				
			
				
				<h3 id="Map.Do">func (*Map) <a href="src/pkg/expvar/expvar.htm#L171">Do</a></h3>
				<pre>func (v *Map) Do(f func(KeyValue))</pre>
				<p>
Do calls f for each entry in the map.
The map is locked during the iteration,
but existing entries may be concurrently updated.
</p>

				
				
			
				
				<h3 id="Map.Get">func (*Map) <a href="src/pkg/expvar/expvar.htm#L115">Get</a></h3>
				<pre>func (v *Map) Get(key string) Var</pre>
				
				
				
			
				
				<h3 id="Map.Init">func (*Map) <a href="src/pkg/expvar/expvar.htm#L110">Init</a></h3>
				<pre>func (v *Map) Init() *Map</pre>
				
				
				
			
				
				<h3 id="Map.Set">func (*Map) <a href="src/pkg/expvar/expvar.htm#L121">Set</a></h3>
				<pre>func (v *Map) Set(key string, av Var)</pre>
				
				
				
			
				
				<h3 id="Map.String">func (*Map) <a href="src/pkg/expvar/expvar.htm#L93">String</a></h3>
				<pre>func (v *Map) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="String">type <a href="src/pkg/expvar/expvar.htm#L180">String</a></h2>
			<pre>type String struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
String is a string variable, and satisfies the Var interface.
</p>


			

			

			

			
				
				<h3 id="NewString">func <a href="src/pkg/expvar/expvar.htm#L251">NewString</a></h3>
				<pre>func NewString(name string) *String</pre>
				
				
			

			
				
				<h3 id="String.Set">func (*String) <a href="src/pkg/expvar/expvar.htm#L191">Set</a></h3>
				<pre>func (v *String) Set(value string)</pre>
				
				
				
			
				
				<h3 id="String.String">func (*String) <a href="src/pkg/expvar/expvar.htm#L185">String</a></h3>
				<pre>func (v *String) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="Var">type <a href="src/pkg/expvar/expvar.htm#L27">Var</a></h2>
			<pre>type Var interface {
    String() string
}</pre>
			<p>
Var is an abstract type for all exported variables.
</p>


			

			

			

			
				
				<h3 id="Get">func <a href="src/pkg/expvar/expvar.htm#L225">Get</a></h3>
				<pre>func Get(name string) Var</pre>
				<p>
Get retrieves a named exported variable.
</p>

				
			

			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
