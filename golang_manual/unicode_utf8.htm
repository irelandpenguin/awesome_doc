
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>utf8 - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package utf8</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "unicode/utf8"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package utf8 implements functions and constants to support text encoded in
UTF-8. It includes functions to translate between runes and UTF-8 byte sequences.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
				<dd><a href="#constants">Constants</a></dd>
			
			
			
				
				<dd><a href="#DecodeLastRune">func DecodeLastRune(p []byte) (r rune, size int)</a></dd>
			
				
				<dd><a href="#DecodeLastRuneInString">func DecodeLastRuneInString(s string) (r rune, size int)</a></dd>
			
				
				<dd><a href="#DecodeRune">func DecodeRune(p []byte) (r rune, size int)</a></dd>
			
				
				<dd><a href="#DecodeRuneInString">func DecodeRuneInString(s string) (r rune, size int)</a></dd>
			
				
				<dd><a href="#EncodeRune">func EncodeRune(p []byte, r rune) int</a></dd>
			
				
				<dd><a href="#FullRune">func FullRune(p []byte) bool</a></dd>
			
				
				<dd><a href="#FullRuneInString">func FullRuneInString(s string) bool</a></dd>
			
				
				<dd><a href="#RuneCount">func RuneCount(p []byte) int</a></dd>
			
				
				<dd><a href="#RuneCountInString">func RuneCountInString(s string) (n int)</a></dd>
			
				
				<dd><a href="#RuneLen">func RuneLen(r rune) int</a></dd>
			
				
				<dd><a href="#RuneStart">func RuneStart(b byte) bool</a></dd>
			
				
				<dd><a href="#Valid">func Valid(p []byte) bool</a></dd>
			
				
				<dd><a href="#ValidString">func ValidString(s string) bool</a></dd>
			
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/unicode/utf8/utf8.htm">utf8.go</a>
			
			</span>
			</p>
		
	
		
			<h2 id="constants">Constants</h2>
			
				<pre>const (
    RuneError = &#39;\uFFFD&#39;     <span class="comment">// the &#34;error&#34; Rune or &#34;Unicode replacement character&#34;</span>
    RuneSelf  = 0x80         <span class="comment">// characters below Runeself are represented as themselves in a single byte.</span>
    MaxRune   = &#39;\U0010FFFF&#39; <span class="comment">// Maximum valid Unicode code point.</span>
    UTFMax    = 4            <span class="comment">// maximum number of bytes of a UTF-8 encoded Unicode character.</span>
)</pre>
				<p>
Numbers fundamental to the encoding.
</p>

			
		
		
		
			
			
			<h2 id="DecodeLastRune">func <a href="src/pkg/unicode/utf8/utf8.htm#L209">DecodeLastRune</a></h2>
			<pre>func DecodeLastRune(p []byte) (r rune, size int)</pre>
			<p>
DecodeLastRune unpacks the last UTF-8 encoding in p and returns the rune and its width in bytes.
If the encoding is invalid, it returns (RuneError, 1), an impossible result for correct UTF-8.
</p>

			
		
			
			
			<h2 id="DecodeLastRuneInString">func <a href="src/pkg/unicode/utf8/utf8.htm#L243">DecodeLastRuneInString</a></h2>
			<pre>func DecodeLastRuneInString(s string) (r rune, size int)</pre>
			<p>
DecodeLastRuneInString is like DecodeLastRune but its input is a string.
If the encoding is invalid, it returns (RuneError, 1), an impossible result for correct UTF-8.
</p>

			
		
			
			
			<h2 id="DecodeRune">func <a href="src/pkg/unicode/utf8/utf8.htm#L195">DecodeRune</a></h2>
			<pre>func DecodeRune(p []byte) (r rune, size int)</pre>
			<p>
DecodeRune unpacks the first UTF-8 encoding in p and returns the rune and its width in bytes.
If the encoding is invalid, it returns (RuneError, 1), an impossible result for correct UTF-8.
</p>

			
		
			
			
			<h2 id="DecodeRuneInString">func <a href="src/pkg/unicode/utf8/utf8.htm#L202">DecodeRuneInString</a></h2>
			<pre>func DecodeRuneInString(s string) (r rune, size int)</pre>
			<p>
DecodeRuneInString is like DecodeRune but its input is a string.
If the encoding is invalid, it returns (RuneError, 1), an impossible result for correct UTF-8.
</p>

			
		
			
			
			<h2 id="EncodeRune">func <a href="src/pkg/unicode/utf8/utf8.htm#L292">EncodeRune</a></h2>
			<pre>func EncodeRune(p []byte, r rune) int</pre>
			<p>
EncodeRune writes into p (which must be large enough) the UTF-8 encoding of the rune.
It returns the number of bytes written.
</p>

			
		
			
			
			<h2 id="FullRune">func <a href="src/pkg/unicode/utf8/utf8.htm#L182">FullRune</a></h2>
			<pre>func FullRune(p []byte) bool</pre>
			<p>
FullRune reports whether the bytes in p begin with a full UTF-8 encoding of a rune.
An invalid encoding is considered a full Rune since it will convert as a width-1 error rune.
</p>

			
		
			
			
			<h2 id="FullRuneInString">func <a href="src/pkg/unicode/utf8/utf8.htm#L188">FullRuneInString</a></h2>
			<pre>func FullRuneInString(s string) bool</pre>
			<p>
FullRuneInString is like FullRune but its input is a string.
</p>

			
		
			
			
			<h2 id="RuneCount">func <a href="src/pkg/unicode/utf8/utf8.htm#L325">RuneCount</a></h2>
			<pre>func RuneCount(p []byte) int</pre>
			<p>
RuneCount returns the number of runes in p.  Erroneous and short
encodings are treated as single runes of width 1 byte.
</p>

			
		
			
			
			<h2 id="RuneCountInString">func <a href="src/pkg/unicode/utf8/utf8.htm#L340">RuneCountInString</a></h2>
			<pre>func RuneCountInString(s string) (n int)</pre>
			<p>
RuneCountInString is like RuneCount but its input is a string.
</p>

			
		
			
			
			<h2 id="RuneLen">func <a href="src/pkg/unicode/utf8/utf8.htm#L276">RuneLen</a></h2>
			<pre>func RuneLen(r rune) int</pre>
			<p>
RuneLen returns the number of bytes required to encode the rune.
</p>

			
		
			
			
			<h2 id="RuneStart">func <a href="src/pkg/unicode/utf8/utf8.htm#L350">RuneStart</a></h2>
			<pre>func RuneStart(b byte) bool</pre>
			<p>
RuneStart reports whether the byte could be the first byte of
an encoded rune.  Second and subsequent bytes always have the top
two bits set to 10.
</p>

			
		
			
			
			<h2 id="Valid">func <a href="src/pkg/unicode/utf8/utf8.htm#L353">Valid</a></h2>
			<pre>func Valid(p []byte) bool</pre>
			<p>
Valid reports whether p consists entirely of valid UTF-8-encoded runes.
</p>

			
		
			
			
			<h2 id="ValidString">func <a href="src/pkg/unicode/utf8/utf8.htm#L373">ValidString</a></h2>
			<pre>func ValidString(s string) bool</pre>
			<p>
ValidString reports whether s consists entirely of valid UTF-8-encoded runes.
</p>

			
		
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
