
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>zip - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="topbar"><div class="container wide">

</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package zip</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "archive/zip"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
				<dd><a href="#examples">Examples</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package zip provides support for reading and writing ZIP archives.
</p>
<p>
See: <a href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT">http://www.pkware.com/documents/casestudies/APPNOTE.TXT</a>
</p>
<p>
This package does not support ZIP64 or disk spanning.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
				<dd><a href="#constants">Constants</a></dd>
			
			
				<dd><a href="#variables">Variables</a></dd>
			
			
			
				
				<dd><a href="#File">type File</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Open">func (f *File) Open() (rc io.ReadCloser, err error)</a></dd>
				
			
				
				<dd><a href="#FileHeader">type FileHeader</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileInfoHeader">func FileInfoHeader(fi os.FileInfo) (*FileHeader, error)</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#FileHeader.FileInfo">func (h *FileHeader) FileInfo() os.FileInfo</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileHeader.ModTime">func (h *FileHeader) ModTime() time.Time</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileHeader.Mode">func (h *FileHeader) Mode() (mode os.FileMode)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileHeader.SetModTime">func (h *FileHeader) SetModTime(t time.Time)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileHeader.SetMode">func (h *FileHeader) SetMode(mode os.FileMode)</a></dd>
				
			
				
				<dd><a href="#ReadCloser">type ReadCloser</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#OpenReader">func OpenReader(name string) (*ReadCloser, error)</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#ReadCloser.Close">func (rc *ReadCloser) Close() error</a></dd>
				
			
				
				<dd><a href="#Reader">type Reader</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewReader">func NewReader(r io.ReaderAt, size int64) (*Reader, error)</a></dd>
				
				
			
				
				<dd><a href="#Writer">type Writer</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewWriter">func NewWriter(w io.Writer) *Writer</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Close">func (w *Writer) Close() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.Create">func (w *Writer) Create(name string) (io.Writer, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Writer.CreateHeader">func (w *Writer) CreateHeader(fh *FileHeader) (io.Writer, error)</a></dd>
				
			
			
		</dl>

		
			<h4 id="examples">Examples</h4>
			<dl>
			
			<dd><a class="exampleLink" href="#example_Reader">Reader</a></dd>
			
			<dd><a class="exampleLink" href="#example_Writer">Writer</a></dd>
			
			</dl>
		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/archive/zip/reader.htm">reader.go</a>
			
				<a href="src/pkg/archive/zip/struct.htm">struct.go</a>
			
				<a href="src/pkg/archive/zip/writer.htm">writer.go</a>
			
			</span>
			</p>
		
	
		
			<h2 id="constants">Constants</h2>
			
				<pre>const (
    Store   uint16 = 0
    Deflate uint16 = 8
)</pre>
				<p>
Compression methods.
</p>

			
		
		
			<h2 id="variables">Variables</h2>
			
				<pre>var (
    ErrFormat    = errors.New(&#34;zip: not a valid zip file&#34;)
    ErrAlgorithm = errors.New(&#34;zip: unsupported compression algorithm&#34;)
    ErrChecksum  = errors.New(&#34;zip: checksum error&#34;)
)</pre>
				
			
		
		
		
			
			
			<h2 id="File">type <a href="src/pkg/archive/zip/reader.htm#L26">File</a></h2>
			<pre>type File struct {
    FileHeader
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			

			

			

			

			

			
				
				<h3 id="File.Open">func (*File) <a href="src/pkg/archive/zip/reader.htm#L111">Open</a></h3>
				<pre>func (f *File) Open() (rc io.ReadCloser, err error)</pre>
				<p>
Open returns a ReadCloser that provides access to the File&#39;s contents.
Multiple files may be read concurrently.
</p>

				
				
			
		
			
			
			<h2 id="FileHeader">type <a href="src/pkg/archive/zip/struct.htm#L34">FileHeader</a></h2>
			<pre>type FileHeader struct {
    Name             string
    CreatorVersion   uint16
    ReaderVersion    uint16
    Flags            uint16
    Method           uint16
    ModifiedTime     uint16 <span class="comment">// MS-DOS time</span>
    ModifiedDate     uint16 <span class="comment">// MS-DOS date</span>
    CRC32            uint32
    CompressedSize   uint32
    UncompressedSize uint32
    Extra            []byte
    ExternalAttrs    uint32 <span class="comment">// Meaning depends on CreatorVersion</span>
    Comment          string
}</pre>
			

			

			

			

			
				
				<h3 id="FileInfoHeader">func <a href="src/pkg/archive/zip/struct.htm#L69">FileInfoHeader</a></h3>
				<pre>func FileInfoHeader(fi os.FileInfo) (*FileHeader, error)</pre>
				<p>
FileInfoHeader creates a partially-populated FileHeader from an
os.FileInfo.
</p>

				
			

			
				
				<h3 id="FileHeader.FileInfo">func (*FileHeader) <a href="src/pkg/archive/zip/struct.htm#L51">FileInfo</a></h3>
				<pre>func (h *FileHeader) FileInfo() os.FileInfo</pre>
				<p>
FileInfo returns an os.FileInfo for the FileHeader.
</p>

				
				
			
				
				<h3 id="FileHeader.ModTime">func (*FileHeader) <a href="src/pkg/archive/zip/struct.htm#L126">ModTime</a></h3>
				<pre>func (h *FileHeader) ModTime() time.Time</pre>
				<p>
ModTime returns the modification time.
The resolution is 2s.
</p>

				
				
			
				
				<h3 id="FileHeader.Mode">func (*FileHeader) <a href="src/pkg/archive/zip/struct.htm#L156">Mode</a></h3>
				<pre>func (h *FileHeader) Mode() (mode os.FileMode)</pre>
				<p>
Mode returns the permission and mode bits for the FileHeader.
</p>

				
				
			
				
				<h3 id="FileHeader.SetModTime">func (*FileHeader) <a href="src/pkg/archive/zip/struct.htm#L132">SetModTime</a></h3>
				<pre>func (h *FileHeader) SetModTime(t time.Time)</pre>
				<p>
SetModTime sets the ModifiedTime and ModifiedDate fields to the given time.
The resolution is 2s.
</p>

				
				
			
				
				<h3 id="FileHeader.SetMode">func (*FileHeader) <a href="src/pkg/archive/zip/struct.htm#L170">SetMode</a></h3>
				<pre>func (h *FileHeader) SetMode(mode os.FileMode)</pre>
				<p>
SetMode changes the permission and mode bits for the FileHeader.
</p>

				
				
			
		
			
			
			<h2 id="ReadCloser">type <a href="src/pkg/archive/zip/reader.htm#L21">ReadCloser</a></h2>
			<pre>type ReadCloser struct {
    Reader
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			

			

			

			

			
				
				<h3 id="OpenReader">func <a href="src/pkg/archive/zip/reader.htm#L38">OpenReader</a></h3>
				<pre>func OpenReader(name string) (*ReadCloser, error)</pre>
				<p>
OpenReader will open the Zip file specified by name and return a ReadCloser.
</p>

				
			

			
				
				<h3 id="ReadCloser.Close">func (*ReadCloser) <a href="src/pkg/archive/zip/reader.htm#L105">Close</a></h3>
				<pre>func (rc *ReadCloser) Close() error</pre>
				<p>
Close closes the Zip file, rendering it unusable for I/O.
</p>

				
				
			
		
			
			
			<h2 id="Reader">type <a href="src/pkg/archive/zip/reader.htm#L15">Reader</a></h2>
			<pre>type Reader struct {
    File    []*File
    Comment string
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			

			

			

			<div id="example_Reader" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code"><span class="comment">// Open a zip archive for reading.</span>
r, err := zip.OpenReader(&#34;testdata/readme.zip&#34;)
if err != nil {
    log.Fatal(err)
}
defer r.Close()

<span class="comment">// Iterate through the files in the archive,</span>
<span class="comment">// printing some of their contents.</span>
for _, f := range r.File {
    fmt.Printf(&#34;Contents of %s:\n&#34;, f.Name)
    rc, err := f.Open()
    if err != nil {
        log.Fatal(err)
    }
    _, err = io.CopyN(os.Stdout, rc, 68)
    if err != nil {
        log.Fatal(err)
    }
    rc.Close()
    fmt.Println()
}
<span class="comment"></pre>
		
		<p>Output:</p>
		<pre class="output">Contents of README:
This is the source code repository for the Go programming language.</pre>
		
	</div>
</div>


			
				
				<h3 id="NewReader">func <a href="src/pkg/archive/zip/reader.htm#L59">NewReader</a></h3>
				<pre>func NewReader(r io.ReaderAt, size int64) (*Reader, error)</pre>
				<p>
NewReader returns a new Reader reading from r, which is assumed to
have the given size in bytes.
</p>

				
			

			
		
			
			
			<h2 id="Writer">type <a href="src/pkg/archive/zip/writer.htm#L11">Writer</a></h2>
			<pre>type Writer struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Writer implements a zip file writer.
</p>


			

			

			<div id="example_Writer" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">
<span class="comment">// Create a buffer to write our archive to.</span>
buf := new(bytes.Buffer)

<span class="comment">// Create a new zip archive.</span>
w := zip.NewWriter(buf)

<span class="comment">// Add some files to the archive.</span>
var files = []struct {
    Name, Body string
}{
    {&#34;readme.txt&#34;, &#34;This archive contains some text files.&#34;},
    {&#34;gopher.txt&#34;, &#34;Gopher names:\nGeorge\nGeoffrey\nGonzo&#34;},
    {&#34;todo.txt&#34;, &#34;Get animal handling licence.\nWrite more examples.&#34;},
}
for _, file := range files {
    f, err := w.Create(file.Name)
    if err != nil {
        log.Fatal(err)
    }
    _, err = f.Write([]byte(file.Body))
    if err != nil {
        log.Fatal(err)
    }
}

<span class="comment">// Make sure to check the error on Close.</span>
err := w.Close()
if err != nil {
    log.Fatal(err)
}
</pre>
		
	</div>
</div>


			
				
				<h3 id="NewWriter">func <a href="src/pkg/archive/zip/writer.htm#L24">NewWriter</a></h3>
				<pre>func NewWriter(w io.Writer) *Writer</pre>
				<p>
NewWriter returns a new Writer writing a zip file to w.
</p>

				
			

			
				
				<h3 id="Writer.Close">func (*Writer) <a href="src/pkg/archive/zip/writer.htm#L30">Close</a></h3>
				<pre>func (w *Writer) Close() error</pre>
				<p>
Close finishes writing the zip file by writing the central directory.
It does not (and can not) close the underlying writer.
</p>

				
				
			
				
				<h3 id="Writer.Create">func (*Writer) <a href="src/pkg/archive/zip/writer.htm#L99">Create</a></h3>
				<pre>func (w *Writer) Create(name string) (io.Writer, error)</pre>
				<p>
Create adds a file to the zip file using the provided name.
It returns a Writer to which the file contents should be written.
The file&#39;s contents must be written to the io.Writer before the next
call to Create, CreateHeader, or Close.
</p>

				
				
			
				
				<h3 id="Writer.CreateHeader">func (*Writer) <a href="src/pkg/archive/zip/writer.htm#L112">CreateHeader</a></h3>
				<pre>func (w *Writer) CreateHeader(fh *FileHeader) (io.Writer, error)</pre>
				<p>
CreateHeader adds a file to the zip file using the provided FileHeader
for the file metadata.
It returns a Writer to which the file contents should be written.
The file&#39;s contents must be written to the io.Writer before the next
call to Create, CreateHeader, or Close.
</p>

				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
