
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>strconv - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package strconv</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "strconv"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package strconv implements conversions to and from string representations
of basic data types.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
				<dd><a href="#constants">Constants</a></dd>
			
			
				<dd><a href="#variables">Variables</a></dd>
			
			
				
				<dd><a href="#AppendBool">func AppendBool(dst []byte, b bool) []byte</a></dd>
			
				
				<dd><a href="#AppendFloat">func AppendFloat(dst []byte, f float64, fmt byte, prec int, bitSize int) []byte</a></dd>
			
				
				<dd><a href="#AppendInt">func AppendInt(dst []byte, i int64, base int) []byte</a></dd>
			
				
				<dd><a href="#AppendQuote">func AppendQuote(dst []byte, s string) []byte</a></dd>
			
				
				<dd><a href="#AppendQuoteRune">func AppendQuoteRune(dst []byte, r rune) []byte</a></dd>
			
				
				<dd><a href="#AppendQuoteRuneToASCII">func AppendQuoteRuneToASCII(dst []byte, r rune) []byte</a></dd>
			
				
				<dd><a href="#AppendQuoteToASCII">func AppendQuoteToASCII(dst []byte, s string) []byte</a></dd>
			
				
				<dd><a href="#AppendUint">func AppendUint(dst []byte, i uint64, base int) []byte</a></dd>
			
				
				<dd><a href="#Atoi">func Atoi(s string) (i int, err error)</a></dd>
			
				
				<dd><a href="#CanBackquote">func CanBackquote(s string) bool</a></dd>
			
				
				<dd><a href="#FormatBool">func FormatBool(b bool) string</a></dd>
			
				
				<dd><a href="#FormatFloat">func FormatFloat(f float64, fmt byte, prec, bitSize int) string</a></dd>
			
				
				<dd><a href="#FormatInt">func FormatInt(i int64, base int) string</a></dd>
			
				
				<dd><a href="#FormatUint">func FormatUint(i uint64, base int) string</a></dd>
			
				
				<dd><a href="#IsPrint">func IsPrint(r rune) bool</a></dd>
			
				
				<dd><a href="#Itoa">func Itoa(i int) string</a></dd>
			
				
				<dd><a href="#ParseBool">func ParseBool(str string) (value bool, err error)</a></dd>
			
				
				<dd><a href="#ParseFloat">func ParseFloat(s string, bitSize int) (f float64, err error)</a></dd>
			
				
				<dd><a href="#ParseInt">func ParseInt(s string, base int, bitSize int) (i int64, err error)</a></dd>
			
				
				<dd><a href="#ParseUint">func ParseUint(s string, b int, bitSize int) (n uint64, err error)</a></dd>
			
				
				<dd><a href="#Quote">func Quote(s string) string</a></dd>
			
				
				<dd><a href="#QuoteRune">func QuoteRune(r rune) string</a></dd>
			
				
				<dd><a href="#QuoteRuneToASCII">func QuoteRuneToASCII(r rune) string</a></dd>
			
				
				<dd><a href="#QuoteToASCII">func QuoteToASCII(s string) string</a></dd>
			
				
				<dd><a href="#Unquote">func Unquote(s string) (t string, err error)</a></dd>
			
				
				<dd><a href="#UnquoteChar">func UnquoteChar(s string, quote byte) (value rune, multibyte bool, tail string, err error)</a></dd>
			
			
				
				<dd><a href="#NumError">type NumError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#NumError.Error">func (e *NumError) Error() string</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/strconv/atob.htm">atob.go</a>
			
				<a href="src/pkg/strconv/atof.htm">atof.go</a>
			
				<a href="src/pkg/strconv/atoi.htm">atoi.go</a>
			
				<a href="src/pkg/strconv/decimal.htm">decimal.go</a>
			
				<a href="src/pkg/strconv/extfloat.htm">extfloat.go</a>
			
				<a href="src/pkg/strconv/ftoa.htm">ftoa.go</a>
			
				<a href="src/pkg/strconv/isprint.htm">isprint.go</a>
			
				<a href="src/pkg/strconv/itoa.htm">itoa.go</a>
			
				<a href="src/pkg/strconv/quote.htm">quote.go</a>
			
			</span>
			</p>
		
	
		
			<h2 id="constants">Constants</h2>
			
				<pre>const IntSize = intSize <span class="comment">// number of bits in int, uint (32 or 64)</span>
</pre>
				
			
		
		
			<h2 id="variables">Variables</h2>
			
				<pre>var ErrRange = errors.New(&#34;value out of range&#34;)</pre>
				<p>
ErrRange indicates that a value is out of range for the target type.
</p>

			
				<pre>var ErrSyntax = errors.New(&#34;invalid syntax&#34;)</pre>
				<p>
ErrSyntax indicates that a value does not have the right syntax for the target type.
</p>

			
		
		
			
			
			<h2 id="AppendBool">func <a href="src/pkg/strconv/atob.htm#L20">AppendBool</a></h2>
			<pre>func AppendBool(dst []byte, b bool) []byte</pre>
			<p>
AppendBool appends &#34;true&#34; or &#34;false&#34;, according to the value of b,
to dst and returns the extended buffer.
</p>

			
		
			
			
			<h2 id="AppendFloat">func <a href="src/pkg/strconv/ftoa.htm#L40">AppendFloat</a></h2>
			<pre>func AppendFloat(dst []byte, f float64, fmt byte, prec int, bitSize int) []byte</pre>
			<p>
AppendFloat appends the string form of the floating-point number f,
as generated by FormatFloat, to dst and returns the extended buffer.
</p>

			
		
			
			
			<h2 id="AppendInt">func <a href="src/pkg/strconv/itoa.htm#L16">AppendInt</a></h2>
			<pre>func AppendInt(dst []byte, i int64, base int) []byte</pre>
			<p>
AppendInt appends the string form of the integer i,
as generated by FormatInt, to dst and returns the extended buffer.
</p>

			
		
			
			
			<h2 id="AppendQuote">func <a href="src/pkg/strconv/quote.htm#L86">AppendQuote</a></h2>
			<pre>func AppendQuote(dst []byte, s string) []byte</pre>
			<p>
AppendQuote appends a double-quoted Go string literal representing s,
as generated by Quote, to dst and returns the extended buffer.
</p>

			
		
			
			
			<h2 id="AppendQuoteRune">func <a href="src/pkg/strconv/quote.htm#L113">AppendQuoteRune</a></h2>
			<pre>func AppendQuoteRune(dst []byte, r rune) []byte</pre>
			<p>
AppendQuoteRune appends a single-quoted Go character literal representing the rune,
as generated by QuoteRune, to dst and returns the extended buffer.
</p>

			
		
			
			
			<h2 id="AppendQuoteRuneToASCII">func <a href="src/pkg/strconv/quote.htm#L128">AppendQuoteRuneToASCII</a></h2>
			<pre>func AppendQuoteRuneToASCII(dst []byte, r rune) []byte</pre>
			<p>
AppendQuoteRune appends a single-quoted Go character literal representing the rune,
as generated by QuoteRuneToASCII, to dst and returns the extended buffer.
</p>

			
		
			
			
			<h2 id="AppendQuoteToASCII">func <a href="src/pkg/strconv/quote.htm#L99">AppendQuoteToASCII</a></h2>
			<pre>func AppendQuoteToASCII(dst []byte, s string) []byte</pre>
			<p>
AppendQuoteToASCII appends a double-quoted Go string literal representing s,
as generated by QuoteToASCII, to dst and returns the extended buffer.
</p>

			
		
			
			
			<h2 id="AppendUint">func <a href="src/pkg/strconv/itoa.htm#L23">AppendUint</a></h2>
			<pre>func AppendUint(dst []byte, i uint64, base int) []byte</pre>
			<p>
AppendUint appends the string form of the unsigned integer i,
as generated by FormatUint, to dst and returns the extended buffer.
</p>

			
		
			
			
			<h2 id="Atoi">func <a href="src/pkg/strconv/atoi.htm#L182">Atoi</a></h2>
			<pre>func Atoi(s string) (i int, err error)</pre>
			<p>
Atoi is shorthand for ParseInt(s, 10, 0).
</p>

			
		
			
			
			<h2 id="CanBackquote">func <a href="src/pkg/strconv/quote.htm#L134">CanBackquote</a></h2>
			<pre>func CanBackquote(s string) bool</pre>
			<p>
CanBackquote returns whether the string s would be
a valid Go string literal if enclosed in backquotes.
</p>

			
		
			
			
			<h2 id="FormatBool">func <a href="src/pkg/strconv/atob.htm#L11">FormatBool</a></h2>
			<pre>func FormatBool(b bool) string</pre>
			<p>
FormatBool returns &#34;true&#34; or &#34;false&#34; according to the value of b
</p>

			
		
			
			
			<h2 id="FormatFloat">func <a href="src/pkg/strconv/ftoa.htm#L34">FormatFloat</a></h2>
			<pre>func FormatFloat(f float64, fmt byte, prec, bitSize int) string</pre>
			<p>
FormatFloat converts the floating-point number f to a string,
according to the format fmt and precision prec.  It rounds the
result assuming that the original was obtained from a floating-point
value of bitSize bits (32 for float32, 64 for float64).
</p>
<p>
The format fmt is one of
&#39;b&#39; (-ddddpddd, a binary exponent),
&#39;e&#39; (-d.ddddedd, a decimal exponent),
&#39;E&#39; (-d.ddddEdd, a decimal exponent),
&#39;f&#39; (-ddd.dddd, no exponent),
&#39;g&#39; (&#39;e&#39; for large exponents, &#39;f&#39; otherwise), or
&#39;G&#39; (&#39;E&#39; for large exponents, &#39;f&#39; otherwise).
</p>
<p>
The precision prec controls the number of digits
(excluding the exponent) printed by the &#39;e&#39;, &#39;E&#39;, &#39;f&#39;, &#39;g&#39;, and &#39;G&#39; formats.
For &#39;e&#39;, &#39;E&#39;, and &#39;f&#39; it is the number of digits after the decimal point.
For &#39;g&#39; and &#39;G&#39; it is the total number of digits.
The special precision -1 uses the smallest number of digits
necessary such that ParseFloat will return f exactly.
</p>

			
		
			
			
			<h2 id="FormatInt">func <a href="src/pkg/strconv/itoa.htm#L4">FormatInt</a></h2>
			<pre>func FormatInt(i int64, base int) string</pre>
			<p>
FormatInt returns the string representation of i in the given base.
</p>

			
		
			
			
			<h2 id="FormatUint">func <a href="src/pkg/strconv/itoa.htm#L1">FormatUint</a></h2>
			<pre>func FormatUint(i uint64, base int) string</pre>
			<p>
FormatUint returns the string representation of i in the given base.
</p>

			
		
			
			
			<h2 id="IsPrint">func <a href="src/pkg/strconv/quote.htm#L390">IsPrint</a></h2>
			<pre>func IsPrint(r rune) bool</pre>
			<p>
IsPrint reports whether the rune is defined as printable by Go, with
the same definition as unicode.IsPrint: letters, numbers, punctuation,
symbols and ASCII space.
</p>

			
		
			
			
			<h2 id="Itoa">func <a href="src/pkg/strconv/itoa.htm#L10">Itoa</a></h2>
			<pre>func Itoa(i int) string</pre>
			<p>
Itoa is shorthand for FormatInt(i, 10).
</p>

			
		
			
			
			<h2 id="ParseBool">func <a href="src/pkg/strconv/atob.htm#L1">ParseBool</a></h2>
			<pre>func ParseBool(str string) (value bool, err error)</pre>
			<p>
ParseBool returns the boolean value represented by the string.
It accepts 1, t, T, TRUE, true, True, 0, f, F, FALSE, false, False.
Any other value returns an error.
</p>

			
		
			
			
			<h2 id="ParseFloat">func <a href="src/pkg/strconv/atof.htm#L421">ParseFloat</a></h2>
			<pre>func ParseFloat(s string, bitSize int) (f float64, err error)</pre>
			<p>
ParseFloat converts the string s to a floating-point number
with the precision specified by bitSize: 32 for float32, or 64 for float64.
When bitSize=32, the result still has type float64, but it will be
convertible to float32 without changing its value.
</p>
<p>
If s is well-formed and near a valid floating point number,
ParseFloat returns the nearest floating point number rounded
using IEEE754 unbiased rounding.
</p>
<p>
The errors that ParseFloat returns have concrete type *NumError
and include err.Num = s.
</p>
<p>
If s is not syntactically well-formed, ParseFloat returns err.Error = ErrSyntax.
</p>
<p>
If s is syntactically well-formed but is more than 1/2 ULP
away from the largest floating point number of the given size,
ParseFloat returns f = Inf, err.Error = ErrRange.
</p>

			
		
			
			
			<h2 id="ParseInt">func <a href="src/pkg/strconv/atoi.htm#L137">ParseInt</a></h2>
			<pre>func ParseInt(s string, base int, bitSize int) (i int64, err error)</pre>
			<p>
ParseInt interprets a string s in the given base (2 to 36) and
returns the corresponding value i.  If base == 0, the base is
implied by the string&#39;s prefix: base 16 for &#34;0x&#34;, base 8 for
&#34;0&#34;, and base 10 otherwise.
</p>
<p>
The bitSize argument specifies the integer type
that the result must fit into.  Bit sizes 0, 8, 16, 32, and 64
correspond to int, int8, int16, int32, and int64.
</p>
<p>
The errors that ParseInt returns have concrete type *NumError
and include err.Num = s.  If s is empty or contains invalid
digits, err.Error = ErrSyntax; if the value corresponding
to s cannot be represented by a signed integer of the
given size, err.Error = ErrRange.
</p>

			
		
			
			
			<h2 id="ParseUint">func <a href="src/pkg/strconv/atoi.htm#L37">ParseUint</a></h2>
			<pre>func ParseUint(s string, b int, bitSize int) (n uint64, err error)</pre>
			<p>
ParseUint is like ParseInt but for unsigned numbers.
</p>

			
		
			
			
			<h2 id="Quote">func <a href="src/pkg/strconv/quote.htm#L80">Quote</a></h2>
			<pre>func Quote(s string) string</pre>
			<p>
Quote returns a double-quoted Go string literal representing s.  The
returned string uses Go escape sequences (\t, \n, \xFF, \u0100) for
control characters and non-printable characters as defined by
IsPrint.
</p>

			
		
			
			
			<h2 id="QuoteRune">func <a href="src/pkg/strconv/quote.htm#L106">QuoteRune</a></h2>
			<pre>func QuoteRune(r rune) string</pre>
			<p>
QuoteRune returns a single-quoted Go character literal representing the
rune.  The returned string uses Go escape sequences (\t, \n, \xFF, \u0100)
for control characters and non-printable characters as defined by IsPrint.
</p>

			
		
			
			
			<h2 id="QuoteRuneToASCII">func <a href="src/pkg/strconv/quote.htm#L121">QuoteRuneToASCII</a></h2>
			<pre>func QuoteRuneToASCII(r rune) string</pre>
			<p>
QuoteRuneToASCII returns a single-quoted Go character literal representing
the rune.  The returned string uses Go escape sequences (\t, \n, \xFF,
\u0100) for non-ASCII characters and non-printable characters as defined
by IsPrint.
</p>

			
		
			
			
			<h2 id="QuoteToASCII">func <a href="src/pkg/strconv/quote.htm#L93">QuoteToASCII</a></h2>
			<pre>func QuoteToASCII(s string) string</pre>
			<p>
QuoteToASCII returns a double-quoted Go string literal representing s.
The returned string uses Go escape sequences (\t, \n, \xFF, \u0100) for
non-ASCII characters and non-printable characters as defined by IsPrint.
</p>

			
		
			
			
			<h2 id="Unquote">func <a href="src/pkg/strconv/quote.htm#L282">Unquote</a></h2>
			<pre>func Unquote(s string) (t string, err error)</pre>
			<p>
Unquote interprets s as a single-quoted, double-quoted,
or backquoted Go string literal, returning the string value
that s quotes.  (If s is single-quoted, it would be a Go
character literal; Unquote returns the corresponding
one-character string.)
</p>

			
		
			
			
			<h2 id="UnquoteChar">func <a href="src/pkg/strconv/quote.htm#L170">UnquoteChar</a></h2>
			<pre>func UnquoteChar(s string, quote byte) (value rune, multibyte bool, tail string, err error)</pre>
			<p>
UnquoteChar decodes the first character or byte in the escaped string
or character literal represented by the string s.
It returns four values:
</p>
<pre>1) value, the decoded Unicode code point or byte value;
2) multibyte, a boolean indicating whether the decoded character requires a multibyte UTF-8 representation;
3) tail, the remainder of the string after the character; and
4) an error that will be nil if the character is syntactically valid.
</pre>
<p>
The second argument, quote, specifies the type of literal being parsed
and therefore which escaped quote character is permitted.
If set to a single quote, it permits the sequence \&#39; and disallows unescaped &#39;.
If set to a double quote, it permits \&#34; and disallows unescaped &#34;.
If set to zero, it does not permit either escape and allows both quote characters to appear unescaped.
</p>

			
		
		
			
			
			<h2 id="NumError">type <a href="src/pkg/strconv/atoi.htm#L6">NumError</a></h2>
			<pre>type NumError struct {
    Func string <span class="comment">// the failing function (ParseBool, ParseInt, ParseUint, ParseFloat)</span>
    Num  string <span class="comment">// the input</span>
    Err  error  <span class="comment">// the reason the conversion failed (ErrRange, ErrSyntax)</span>
}</pre>
			<p>
A NumError records a failed conversion.
</p>


			

			

			

			

			
				
				<h3 id="NumError.Error">func (*NumError) <a href="src/pkg/strconv/atoi.htm#L12">Error</a></h3>
				<pre>func (e *NumError) Error() string</pre>
				
				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
