
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>parse - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package parse</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "text/template/parse"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package parse builds parse trees for templates as defined by text/template
and html/template. Clients should use those packages to construct templates
rather than this one, which provides shared internal data structures not
intended for general use.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#IsEmptyTree">func IsEmptyTree(n Node) bool</a></dd>
			
				
				<dd><a href="#Parse">func Parse(name, text, leftDelim, rightDelim string, funcs ...map[string]interface{}) (treeSet map[string]*Tree, err error)</a></dd>
			
			
				
				<dd><a href="#ActionNode">type ActionNode</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#ActionNode.Copy">func (a *ActionNode) Copy() Node</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ActionNode.String">func (a *ActionNode) String() string</a></dd>
				
			
				
				<dd><a href="#BoolNode">type BoolNode</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#BoolNode.Copy">func (b *BoolNode) Copy() Node</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#BoolNode.String">func (b *BoolNode) String() string</a></dd>
				
			
				
				<dd><a href="#BranchNode">type BranchNode</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#BranchNode.String">func (b *BranchNode) String() string</a></dd>
				
			
				
				<dd><a href="#CommandNode">type CommandNode</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#CommandNode.Copy">func (c *CommandNode) Copy() Node</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#CommandNode.String">func (c *CommandNode) String() string</a></dd>
				
			
				
				<dd><a href="#DotNode">type DotNode</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#DotNode.Copy">func (d *DotNode) Copy() Node</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#DotNode.String">func (d *DotNode) String() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#DotNode.Type">func (d *DotNode) Type() NodeType</a></dd>
				
			
				
				<dd><a href="#FieldNode">type FieldNode</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#FieldNode.Copy">func (f *FieldNode) Copy() Node</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FieldNode.String">func (f *FieldNode) String() string</a></dd>
				
			
				
				<dd><a href="#IdentifierNode">type IdentifierNode</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewIdentifier">func NewIdentifier(ident string) *IdentifierNode</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#IdentifierNode.Copy">func (i *IdentifierNode) Copy() Node</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#IdentifierNode.String">func (i *IdentifierNode) String() string</a></dd>
				
			
				
				<dd><a href="#IfNode">type IfNode</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#IfNode.Copy">func (i *IfNode) Copy() Node</a></dd>
				
			
				
				<dd><a href="#ListNode">type ListNode</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#ListNode.Copy">func (l *ListNode) Copy() Node</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ListNode.CopyList">func (l *ListNode) CopyList() *ListNode</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ListNode.String">func (l *ListNode) String() string</a></dd>
				
			
				
				<dd><a href="#Node">type Node</a></dd>
				
				
			
				
				<dd><a href="#NodeType">type NodeType</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#NodeType.Type">func (t NodeType) Type() NodeType</a></dd>
				
			
				
				<dd><a href="#NumberNode">type NumberNode</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#NumberNode.Copy">func (n *NumberNode) Copy() Node</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NumberNode.String">func (n *NumberNode) String() string</a></dd>
				
			
				
				<dd><a href="#PipeNode">type PipeNode</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#PipeNode.Copy">func (p *PipeNode) Copy() Node</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#PipeNode.CopyPipe">func (p *PipeNode) CopyPipe() *PipeNode</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#PipeNode.String">func (p *PipeNode) String() string</a></dd>
				
			
				
				<dd><a href="#RangeNode">type RangeNode</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#RangeNode.Copy">func (r *RangeNode) Copy() Node</a></dd>
				
			
				
				<dd><a href="#StringNode">type StringNode</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#StringNode.Copy">func (s *StringNode) Copy() Node</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#StringNode.String">func (s *StringNode) String() string</a></dd>
				
			
				
				<dd><a href="#TemplateNode">type TemplateNode</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#TemplateNode.Copy">func (t *TemplateNode) Copy() Node</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#TemplateNode.String">func (t *TemplateNode) String() string</a></dd>
				
			
				
				<dd><a href="#TextNode">type TextNode</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#TextNode.Copy">func (t *TextNode) Copy() Node</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#TextNode.String">func (t *TextNode) String() string</a></dd>
				
			
				
				<dd><a href="#Tree">type Tree</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#New">func New(name string, funcs ...map[string]interface{}) *Tree</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Tree.Parse">func (t *Tree) Parse(s, leftDelim, rightDelim string, treeSet map[string]*Tree, funcs ...map[string]interface{}) (tree *Tree, err error)</a></dd>
				
			
				
				<dd><a href="#VariableNode">type VariableNode</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#VariableNode.Copy">func (v *VariableNode) Copy() Node</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#VariableNode.String">func (v *VariableNode) String() string</a></dd>
				
			
				
				<dd><a href="#WithNode">type WithNode</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#WithNode.Copy">func (w *WithNode) Copy() Node</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/text/template/parse/lex.htm">lex.go</a>
			
				<a href="src/pkg/text/template/parse/node.htm">node.go</a>
			
				<a href="src/pkg/text/template/parse/parse.htm">parse.go</a>
			
			</span>
			</p>
		
	
		
		
		
			
			
			<h2 id="IsEmptyTree">func <a href="src/pkg/text/template/parse/parse.htm#L184">IsEmptyTree</a></h2>
			<pre>func IsEmptyTree(n Node) bool</pre>
			<p>
IsEmptyTree reports whether this tree (node) is empty of everything but space.
</p>

			
		
			
			
			<h2 id="Parse">func <a href="src/pkg/text/template/parse/parse.htm#L25">Parse</a></h2>
			<pre>func Parse(name, text, leftDelim, rightDelim string, funcs ...map[string]interface{}) (treeSet map[string]*Tree, err error)</pre>
			<p>
Parse returns a map from template name to parse.Tree, created by parsing the
templates described in the argument string. The top-level template will be
given the specified name. If an error is encountered, parsing stops and an
empty map is returned with the error.
</p>

			
		
		
			
			
			<h2 id="ActionNode">type <a href="src/pkg/text/template/parse/node.htm#L161">ActionNode</a></h2>
			<pre>type ActionNode struct {
    NodeType
    Line int       <span class="comment">// The line number in the input.</span>
    Pipe *PipeNode <span class="comment">// The pipeline in the action.</span>
}</pre>
			<p>
ActionNode holds an action (something bounded by delimiters).
Control actions have their own nodes; ActionNode represents simple
ones such as field evaluations.
</p>


			

			

			

			

			
				
				<h3 id="ActionNode.Copy">func (*ActionNode) <a href="src/pkg/text/template/parse/node.htm#L176">Copy</a></h3>
				<pre>func (a *ActionNode) Copy() Node</pre>
				
				
				
			
				
				<h3 id="ActionNode.String">func (*ActionNode) <a href="src/pkg/text/template/parse/node.htm#L171">String</a></h3>
				<pre>func (a *ActionNode) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="BoolNode">type <a href="src/pkg/text/template/parse/node.htm#L306">BoolNode</a></h2>
			<pre>type BoolNode struct {
    NodeType
    True bool <span class="comment">// The value of the boolean constant.</span>
}</pre>
			<p>
BoolNode holds a boolean constant.
</p>


			

			

			

			

			
				
				<h3 id="BoolNode.Copy">func (*BoolNode) <a href="src/pkg/text/template/parse/node.htm#L322">Copy</a></h3>
				<pre>func (b *BoolNode) Copy() Node</pre>
				
				
				
			
				
				<h3 id="BoolNode.String">func (*BoolNode) <a href="src/pkg/text/template/parse/node.htm#L315">String</a></h3>
				<pre>func (b *BoolNode) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="BranchNode">type <a href="src/pkg/text/template/parse/node.htm#L512">BranchNode</a></h2>
			<pre>type BranchNode struct {
    NodeType
    Line     int       <span class="comment">// The line number in the input.</span>
    Pipe     *PipeNode <span class="comment">// The pipeline to be evaluated.</span>
    List     *ListNode <span class="comment">// What to execute if the value is non-empty.</span>
    ElseList *ListNode <span class="comment">// What to execute if the value is empty (nil if absent).</span>
}</pre>
			<p>
BranchNode is the common representation of if, range, and with.
</p>


			

			

			

			

			
				
				<h3 id="BranchNode.String">func (*BranchNode) <a href="src/pkg/text/template/parse/node.htm#L520">String</a></h3>
				<pre>func (b *BranchNode) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="CommandNode">type <a href="src/pkg/text/template/parse/node.htm#L182">CommandNode</a></h2>
			<pre>type CommandNode struct {
    NodeType
    Args []Node <span class="comment">// Arguments in lexical order: Identifier, field, or constant.</span>
}</pre>
			<p>
CommandNode holds a command (a pipeline inside an evaluating action).
</p>


			

			

			

			

			
				
				<h3 id="CommandNode.Copy">func (*CommandNode) <a href="src/pkg/text/template/parse/node.htm#L206">Copy</a></h3>
				<pre>func (c *CommandNode) Copy() Node</pre>
				
				
				
			
				
				<h3 id="CommandNode.String">func (*CommandNode) <a href="src/pkg/text/template/parse/node.htm#L195">String</a></h3>
				<pre>func (c *CommandNode) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="DotNode">type <a href="src/pkg/text/template/parse/node.htm#L263">DotNode</a></h2>
			<pre>type DotNode bool</pre>
			<p>
DotNode holds the special identifier &#39;.&#39;. It is represented by a nil pointer.
</p>


			

			

			

			

			
				
				<h3 id="DotNode.Copy">func (*DotNode) <a href="src/pkg/text/template/parse/node.htm#L277">Copy</a></h3>
				<pre>func (d *DotNode) Copy() Node</pre>
				
				
				
			
				
				<h3 id="DotNode.String">func (*DotNode) <a href="src/pkg/text/template/parse/node.htm#L273">String</a></h3>
				<pre>func (d *DotNode) String() string</pre>
				
				
				
			
				
				<h3 id="DotNode.Type">func (*DotNode) <a href="src/pkg/text/template/parse/node.htm#L269">Type</a></h3>
				<pre>func (d *DotNode) Type() NodeType</pre>
				
				
				
			
		
			
			
			<h2 id="FieldNode">type <a href="src/pkg/text/template/parse/node.htm#L284">FieldNode</a></h2>
			<pre>type FieldNode struct {
    NodeType
    Ident []string <span class="comment">// The identifiers in lexical order.</span>
}</pre>
			<p>
FieldNode holds a field (identifier starting with &#39;.&#39;).
The names may be chained (&#39;.x.y&#39;).
The period is dropped from each ident.
</p>


			

			

			

			

			
				
				<h3 id="FieldNode.Copy">func (*FieldNode) <a href="src/pkg/text/template/parse/node.htm#L301">Copy</a></h3>
				<pre>func (f *FieldNode) Copy() Node</pre>
				
				
				
			
				
				<h3 id="FieldNode.String">func (*FieldNode) <a href="src/pkg/text/template/parse/node.htm#L293">String</a></h3>
				<pre>func (f *FieldNode) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="IdentifierNode">type <a href="src/pkg/text/template/parse/node.htm#L218">IdentifierNode</a></h2>
			<pre>type IdentifierNode struct {
    NodeType
    Ident string <span class="comment">// The identifier&#39;s name.</span>
}</pre>
			<p>
IdentifierNode holds an identifier.
</p>


			

			

			

			
				
				<h3 id="NewIdentifier">func <a href="src/pkg/text/template/parse/node.htm#L224">NewIdentifier</a></h3>
				<pre>func NewIdentifier(ident string) *IdentifierNode</pre>
				<p>
NewIdentifier returns a new IdentifierNode with the given identifier name.
</p>

				
			

			
				
				<h3 id="IdentifierNode.Copy">func (*IdentifierNode) <a href="src/pkg/text/template/parse/node.htm#L232">Copy</a></h3>
				<pre>func (i *IdentifierNode) Copy() Node</pre>
				
				
				
			
				
				<h3 id="IdentifierNode.String">func (*IdentifierNode) <a href="src/pkg/text/template/parse/node.htm#L228">String</a></h3>
				<pre>func (i *IdentifierNode) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="IfNode">type <a href="src/pkg/text/template/parse/node.htm#L539">IfNode</a></h2>
			<pre>type IfNode struct {
    BranchNode
}</pre>
			<p>
IfNode represents an {{if}} action and its commands.
</p>


			

			

			

			

			
				
				<h3 id="IfNode.Copy">func (*IfNode) <a href="src/pkg/text/template/parse/node.htm#L547">Copy</a></h3>
				<pre>func (i *IfNode) Copy() Node</pre>
				
				
				
			
		
			
			
			<h2 id="ListNode">type <a href="src/pkg/text/template/parse/node.htm#L49">ListNode</a></h2>
			<pre>type ListNode struct {
    NodeType
    Nodes []Node <span class="comment">// The element nodes in lexical order.</span>
}</pre>
			<p>
ListNode holds a sequence of nodes.
</p>


			

			

			

			

			
				
				<h3 id="ListNode.Copy">func (*ListNode) <a href="src/pkg/text/template/parse/node.htm#L81">Copy</a></h3>
				<pre>func (l *ListNode) Copy() Node</pre>
				
				
				
			
				
				<h3 id="ListNode.CopyList">func (*ListNode) <a href="src/pkg/text/template/parse/node.htm#L70">CopyList</a></h3>
				<pre>func (l *ListNode) CopyList() *ListNode</pre>
				
				
				
			
				
				<h3 id="ListNode.String">func (*ListNode) <a href="src/pkg/text/template/parse/node.htm#L62">String</a></h3>
				<pre>func (l *ListNode) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="Node">type <a href="src/pkg/text/template/parse/node.htm#L7">Node</a></h2>
			<pre>type Node interface {
    Type() NodeType
    String() string
    <span class="comment">// Copy does a deep copy of the Node and all its components.</span>
    <span class="comment">// To avoid type assertions, some XxxNodes also have specialized</span>
    <span class="comment">// CopyXxx methods that return *XxxNode.</span>
    Copy() Node
}</pre>
			<p>
A node is an element in the parse tree. The interface is trivial.
</p>


			

			

			

			

			
		
			
			
			<h2 id="NodeType">type <a href="src/pkg/text/template/parse/node.htm#L17">NodeType</a></h2>
			<pre>type NodeType int</pre>
			<p>
NodeType identifies the type of a parse tree node.
</p>


			
				<pre>const (
    NodeText    NodeType = iota <span class="comment">// Plain text.</span>
    NodeAction                  <span class="comment">// A simple action such as field evaluation.</span>
    NodeBool                    <span class="comment">// A boolean constant.</span>
    NodeCommand                 <span class="comment">// An element of a pipeline.</span>
    NodeDot                     <span class="comment">// The cursor, dot.</span>

    NodeField      <span class="comment">// A field or method name.</span>
    NodeIdentifier <span class="comment">// An identifier; always a function name.</span>
    NodeIf         <span class="comment">// An if action.</span>
    NodeList       <span class="comment">// A list of Nodes.</span>
    NodeNumber     <span class="comment">// A numerical constant.</span>
    NodePipe       <span class="comment">// A pipeline of commands.</span>
    NodeRange      <span class="comment">// A range action.</span>
    NodeString     <span class="comment">// A string constant.</span>
    NodeTemplate   <span class="comment">// A template invocation action.</span>
    NodeVariable   <span class="comment">// A $ variable.</span>
    NodeWith       <span class="comment">// A with action.</span>
)</pre>
				
			

			

			

			

			
				
				<h3 id="NodeType.Type">func (NodeType) <a href="src/pkg/text/template/parse/node.htm#L21">Type</a></h3>
				<pre>func (t NodeType) Type() NodeType</pre>
				<p>
Type returns itself and provides an easy default implementation
for embedding in a Node. Embedded in all non-trivial Nodes.
</p>

				
				
			
		
			
			
			<h2 id="NumberNode">type <a href="src/pkg/text/template/parse/node.htm#L329">NumberNode</a></h2>
			<pre>type NumberNode struct {
    NodeType
    IsInt      bool       <span class="comment">// Number has an integral value.</span>
    IsUint     bool       <span class="comment">// Number has an unsigned integral value.</span>
    IsFloat    bool       <span class="comment">// Number has a floating-point value.</span>
    IsComplex  bool       <span class="comment">// Number is complex.</span>
    Int64      int64      <span class="comment">// The signed integer value.</span>
    Uint64     uint64     <span class="comment">// The unsigned integer value.</span>
    Float64    float64    <span class="comment">// The floating-point value.</span>
    Complex128 complex128 <span class="comment">// The complex value.</span>
    Text       string     <span class="comment">// The original textual representation from the input.</span>
}</pre>
			<p>
NumberNode holds a number: signed or unsigned integer, float, or complex.
The value is parsed and stored under all the types that can represent the value.
This simulates in a small amount of code the behavior of Go&#39;s ideal constants.
</p>


			

			

			

			

			
				
				<h3 id="NumberNode.Copy">func (*NumberNode) <a href="src/pkg/text/template/parse/node.htm#L444">Copy</a></h3>
				<pre>func (n *NumberNode) Copy() Node</pre>
				
				
				
			
				
				<h3 id="NumberNode.String">func (*NumberNode) <a href="src/pkg/text/template/parse/node.htm#L440">String</a></h3>
				<pre>func (n *NumberNode) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="PipeNode">type <a href="src/pkg/text/template/parse/node.htm#L104">PipeNode</a></h2>
			<pre>type PipeNode struct {
    NodeType
    Line int             <span class="comment">// The line number in the input.</span>
    Decl []*VariableNode <span class="comment">// Variable declarations in lexical order.</span>
    Cmds []*CommandNode  <span class="comment">// The commands in lexical order.</span>
}</pre>
			<p>
PipeNode holds a pipeline with optional declaration
</p>


			

			

			

			

			
				
				<h3 id="PipeNode.Copy">func (*PipeNode) <a href="src/pkg/text/template/parse/node.htm#L154">Copy</a></h3>
				<pre>func (p *PipeNode) Copy() Node</pre>
				
				
				
			
				
				<h3 id="PipeNode.CopyPipe">func (*PipeNode) <a href="src/pkg/text/template/parse/node.htm#L139">CopyPipe</a></h3>
				<pre>func (p *PipeNode) CopyPipe() *PipeNode</pre>
				
				
				
			
				
				<h3 id="PipeNode.String">func (*PipeNode) <a href="src/pkg/text/template/parse/node.htm#L119">String</a></h3>
				<pre>func (p *PipeNode) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="RangeNode">type <a href="src/pkg/text/template/parse/node.htm#L552">RangeNode</a></h2>
			<pre>type RangeNode struct {
    BranchNode
}</pre>
			<p>
RangeNode represents a {{range}} action and its commands.
</p>


			

			

			

			

			
				
				<h3 id="RangeNode.Copy">func (*RangeNode) <a href="src/pkg/text/template/parse/node.htm#L560">Copy</a></h3>
				<pre>func (r *RangeNode) Copy() Node</pre>
				
				
				
			
		
			
			
			<h2 id="StringNode">type <a href="src/pkg/text/template/parse/node.htm#L451">StringNode</a></h2>
			<pre>type StringNode struct {
    NodeType
    Quoted string <span class="comment">// The original text of the string, with quotes.</span>
    Text   string <span class="comment">// The string, after quote processing.</span>
}</pre>
			<p>
StringNode holds a string constant. The value has been &#34;unquoted&#34;.
</p>


			

			

			

			

			
				
				<h3 id="StringNode.Copy">func (*StringNode) <a href="src/pkg/text/template/parse/node.htm#L465">Copy</a></h3>
				<pre>func (s *StringNode) Copy() Node</pre>
				
				
				
			
				
				<h3 id="StringNode.String">func (*StringNode) <a href="src/pkg/text/template/parse/node.htm#L461">String</a></h3>
				<pre>func (s *StringNode) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="TemplateNode">type <a href="src/pkg/text/template/parse/node.htm#L578">TemplateNode</a></h2>
			<pre>type TemplateNode struct {
    NodeType
    Line int       <span class="comment">// The line number in the input.</span>
    Name string    <span class="comment">// The name of the template (unquoted).</span>
    Pipe *PipeNode <span class="comment">// The command to evaluate as dot for the template.</span>
}</pre>
			<p>
TemplateNode represents a {{template}} action.
</p>


			

			

			

			

			
				
				<h3 id="TemplateNode.Copy">func (*TemplateNode) <a href="src/pkg/text/template/parse/node.htm#L596">Copy</a></h3>
				<pre>func (t *TemplateNode) Copy() Node</pre>
				
				
				
			
				
				<h3 id="TemplateNode.String">func (*TemplateNode) <a href="src/pkg/text/template/parse/node.htm#L589">String</a></h3>
				<pre>func (t *TemplateNode) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="TextNode">type <a href="src/pkg/text/template/parse/node.htm#L86">TextNode</a></h2>
			<pre>type TextNode struct {
    NodeType
    Text []byte <span class="comment">// The text; may span newlines.</span>
}</pre>
			<p>
TextNode holds plain text.
</p>


			

			

			

			

			
				
				<h3 id="TextNode.Copy">func (*TextNode) <a href="src/pkg/text/template/parse/node.htm#L99">Copy</a></h3>
				<pre>func (t *TextNode) Copy() Node</pre>
				
				
				
			
				
				<h3 id="TextNode.String">func (*TextNode) <a href="src/pkg/text/template/parse/node.htm#L95">String</a></h3>
				<pre>func (t *TextNode) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="Tree">type <a href="src/pkg/text/template/parse/parse.htm#L10">Tree</a></h2>
			<pre>type Tree struct {
    Name string    <span class="comment">// name of the template represented by the tree.</span>
    Root *ListNode <span class="comment">// top-level root of the tree.</span>
    <span class="comment">// Parsing only; cleared after parse.</span>
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Tree is the representation of a single parsed template.
</p>


			

			

			

			
				
				<h3 id="New">func <a href="src/pkg/text/template/parse/parse.htm#L65">New</a></h3>
				<pre>func New(name string, funcs ...map[string]interface{}) *Tree</pre>
				<p>
New allocates a new parse tree with the given name.
</p>

				
			

			
				
				<h3 id="Tree.Parse">func (*Tree) <a href="src/pkg/text/template/parse/parse.htm#L162">Parse</a></h3>
				<pre>func (t *Tree) Parse(s, leftDelim, rightDelim string, treeSet map[string]*Tree, funcs ...map[string]interface{}) (tree *Tree, err error)</pre>
				<p>
Parse parses the template definition string to construct a representation of
the template for execution. If either action delimiter string is empty, the
default (&#34;{{&#34; or &#34;}}&#34;) is used. Embedded template definitions are added to
the treeSet map.
</p>

				
				
			
		
			
			
			<h2 id="VariableNode">type <a href="src/pkg/text/template/parse/node.htm#L238">VariableNode</a></h2>
			<pre>type VariableNode struct {
    NodeType
    Ident []string <span class="comment">// Variable names in lexical order.</span>
}</pre>
			<p>
VariableNode holds a list of variable names. The dollar sign is
part of the name.
</p>


			

			

			

			

			
				
				<h3 id="VariableNode.Copy">func (*VariableNode) <a href="src/pkg/text/template/parse/node.htm#L258">Copy</a></h3>
				<pre>func (v *VariableNode) Copy() Node</pre>
				
				
				
			
				
				<h3 id="VariableNode.String">func (*VariableNode) <a href="src/pkg/text/template/parse/node.htm#L247">String</a></h3>
				<pre>func (v *VariableNode) String() string</pre>
				
				
				
			
		
			
			
			<h2 id="WithNode">type <a href="src/pkg/text/template/parse/node.htm#L565">WithNode</a></h2>
			<pre>type WithNode struct {
    BranchNode
}</pre>
			<p>
WithNode represents a {{with}} action and its commands.
</p>


			

			

			

			

			
				
				<h3 id="WithNode.Copy">func (*WithNode) <a href="src/pkg/text/template/parse/node.htm#L573">Copy</a></h3>
				<pre>func (w *WithNode) Copy() Node</pre>
				
				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
