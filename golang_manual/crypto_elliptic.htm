
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>elliptic - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package elliptic</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "crypto/elliptic"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package elliptic implements several standard elliptic curves over prime
fields.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#GenerateKey">func GenerateKey(curve Curve, rand io.Reader) (priv []byte, x, y *big.Int, err error)</a></dd>
			
				
				<dd><a href="#Marshal">func Marshal(curve Curve, x, y *big.Int) []byte</a></dd>
			
				
				<dd><a href="#Unmarshal">func Unmarshal(curve Curve, data []byte) (x, y *big.Int)</a></dd>
			
			
				
				<dd><a href="#Curve">type Curve</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#P224">func P224() Curve</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#P256">func P256() Curve</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#P384">func P384() Curve</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#P521">func P521() Curve</a></dd>
				
				
			
				
				<dd><a href="#CurveParams">type CurveParams</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#CurveParams.Add">func (curve *CurveParams) Add(x1, y1, x2, y2 *big.Int) (*big.Int, *big.Int)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#CurveParams.Double">func (curve *CurveParams) Double(x1, y1 *big.Int) (*big.Int, *big.Int)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#CurveParams.IsOnCurve">func (curve *CurveParams) IsOnCurve(x, y *big.Int) bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#CurveParams.Params">func (curve *CurveParams) Params() *CurveParams</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#CurveParams.ScalarBaseMult">func (curve *CurveParams) ScalarBaseMult(k []byte) (*big.Int, *big.Int)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#CurveParams.ScalarMult">func (curve *CurveParams) ScalarMult(Bx, By *big.Int, k []byte) (*big.Int, *big.Int)</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/crypto/elliptic/elliptic.htm">elliptic.go</a>
			
				<a href="src/pkg/crypto/elliptic/p224.htm">p224.go</a>
			
			</span>
			</p>
		
	
		
		
		
			
			
			<h2 id="GenerateKey">func <a href="src/pkg/crypto/elliptic/elliptic.htm#L257">GenerateKey</a></h2>
			<pre>func GenerateKey(curve Curve, rand io.Reader) (priv []byte, x, y *big.Int, err error)</pre>
			<p>
GenerateKey returns a public/private key pair. The private key is
generated using the given reader, which must return random data.
</p>

			
		
			
			
			<h2 id="Marshal">func <a href="src/pkg/crypto/elliptic/elliptic.htm#L279">Marshal</a></h2>
			<pre>func Marshal(curve Curve, x, y *big.Int) []byte</pre>
			<p>
Marshal converts a point into the form specified in section 4.3.6 of ANSI X9.62.
</p>

			
		
			
			
			<h2 id="Unmarshal">func <a href="src/pkg/crypto/elliptic/elliptic.htm#L293">Unmarshal</a></h2>
			<pre>func Unmarshal(curve Curve, data []byte) (x, y *big.Int)</pre>
			<p>
Unmarshal converts a point, serialized by Marshal, into an x, y pair. On error, x = nil.
</p>

			
		
		
			
			
			<h2 id="Curve">type <a href="src/pkg/crypto/elliptic/elliptic.htm#L14">Curve</a></h2>
			<pre>type Curve interface {
    <span class="comment">// Params returns the parameters for the curve.</span>
    Params() *CurveParams
    <span class="comment">// IsOnCurve returns true if the given (x,y) lies on the curve.</span>
    IsOnCurve(x, y *big.Int) bool
    <span class="comment">// Add returns the sum of (x1,y1) and (x2,y2)</span>
    Add(x1, y1, x2, y2 *big.Int) (x, y *big.Int)
    <span class="comment">// Double returns 2*(x,y)</span>
    Double(x1, y1 *big.Int) (x, y *big.Int)
    <span class="comment">// ScalarMult returns k*(Bx,By) where k is a number in big-endian form.</span>
    ScalarMult(x1, y1 *big.Int, scalar []byte) (x, y *big.Int)
    <span class="comment">// ScalarBaseMult returns k*G, where G is the base point of the group and k</span>
    <span class="comment">// is an integer in big-endian form.</span>
    ScalarBaseMult(scalar []byte) (x, y *big.Int)
}</pre>
			<p>
A Curve represents a short-form Weierstrass curve with a=-3.
See <a href="http://www.hyperelliptic.org/EFD/g1p/auto-shortw.html">http://www.hyperelliptic.org/EFD/g1p/auto-shortw.html</a>
</p>


			

			

			

			
				
				<h3 id="P224">func <a href="src/pkg/crypto/elliptic/p224.htm#L29">P224</a></h3>
				<pre>func P224() Curve</pre>
				<p>
P224 returns a Curve which implements P-224 (see FIPS 186-3, section D.2.2)
</p>

				
			
				
				<h3 id="P256">func <a href="src/pkg/crypto/elliptic/elliptic.htm#L352">P256</a></h3>
				<pre>func P256() Curve</pre>
				<p>
P256 returns a Curve which implements P-256 (see FIPS 186-3, section D.2.3)
</p>

				
			
				
				<h3 id="P384">func <a href="src/pkg/crypto/elliptic/elliptic.htm#L358">P384</a></h3>
				<pre>func P384() Curve</pre>
				<p>
P384 returns a Curve which implements P-384 (see FIPS 186-3, section D.2.4)
</p>

				
			
				
				<h3 id="P521">func <a href="src/pkg/crypto/elliptic/elliptic.htm#L364">P521</a></h3>
				<pre>func P521() Curve</pre>
				<p>
P256 returns a Curve which implements P-521 (see FIPS 186-3, section D.2.5)
</p>

				
			

			
		
			
			
			<h2 id="CurveParams">type <a href="src/pkg/crypto/elliptic/elliptic.htm#L32">CurveParams</a></h2>
			<pre>type CurveParams struct {
    P       *big.Int <span class="comment">// the order of the underlying field</span>
    N       *big.Int <span class="comment">// the order of the base point</span>
    B       *big.Int <span class="comment">// the constant of the curve equation</span>
    Gx, Gy  *big.Int <span class="comment">// (x,y) of the base point</span>
    BitSize int      <span class="comment">// the size of the underlying field</span>
}</pre>
			<p>
CurveParams contains the parameters of an elliptic curve and also provides
a generic, non-constant time implementation of Curve.
</p>


			

			

			

			

			
				
				<h3 id="CurveParams.Add">func (*CurveParams) <a href="src/pkg/crypto/elliptic/elliptic.htm#L76">Add</a></h3>
				<pre>func (curve *CurveParams) Add(x1, y1, x2, y2 *big.Int) (*big.Int, *big.Int)</pre>
				
				
				
			
				
				<h3 id="CurveParams.Double">func (*CurveParams) <a href="src/pkg/crypto/elliptic/elliptic.htm#L146">Double</a></h3>
				<pre>func (curve *CurveParams) Double(x1, y1 *big.Int) (*big.Int, *big.Int)</pre>
				
				
				
			
				
				<h3 id="CurveParams.IsOnCurve">func (*CurveParams) <a href="src/pkg/crypto/elliptic/elliptic.htm#L44">IsOnCurve</a></h3>
				<pre>func (curve *CurveParams) IsOnCurve(x, y *big.Int) bool</pre>
				
				
				
			
				
				<h3 id="CurveParams.Params">func (*CurveParams) <a href="src/pkg/crypto/elliptic/elliptic.htm#L40">Params</a></h3>
				<pre>func (curve *CurveParams) Params() *CurveParams</pre>
				
				
				
			
				
				<h3 id="CurveParams.ScalarBaseMult">func (*CurveParams) <a href="src/pkg/crypto/elliptic/elliptic.htm#L249">ScalarBaseMult</a></h3>
				<pre>func (curve *CurveParams) ScalarBaseMult(k []byte) (*big.Int, *big.Int)</pre>
				
				
				
			
				
				<h3 id="CurveParams.ScalarMult">func (*CurveParams) <a href="src/pkg/crypto/elliptic/elliptic.htm#L211">ScalarMult</a></h3>
				<pre>func (curve *CurveParams) ScalarMult(Bx, By *big.Int, k []byte) (*big.Int, *big.Int)</pre>
				
				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
