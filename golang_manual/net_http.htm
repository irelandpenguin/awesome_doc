
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>http - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package http</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "net/http"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
				<dd><a href="#examples">Examples</a></dd>
			
			
				<dd><a href="#subdirectories">Subdirectories</a></dd>
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package http provides HTTP client and server implementations.
</p>
<p>
Get, Head, Post, and PostForm make HTTP requests:
</p>
<pre>resp, err := http.Get(&#34;<a href="http://example.com/">http://example.com/</a>&#34;)
...
resp, err := http.Post(&#34;<a href="http://example.com/upload">http://example.com/upload</a>&#34;, &#34;image/jpeg&#34;, &amp;buf)
...
resp, err := http.PostForm(&#34;<a href="http://example.com/form">http://example.com/form</a>&#34;,
	url.Values{&#34;key&#34;: {&#34;Value&#34;}, &#34;id&#34;: {&#34;123&#34;}})
</pre>
<p>
The client must close the response body when finished with it:
</p>
<pre>resp, err := http.Get(&#34;<a href="http://example.com/">http://example.com/</a>&#34;)
if err != nil {
	// handle error
}
defer resp.Body.Close()
body, err := ioutil.ReadAll(resp.Body)
// ...
</pre>
<p>
For control over HTTP client headers, redirect policy, and other
settings, create a Client:
</p>
<pre>client := &amp;http.Client{
	CheckRedirect: redirectPolicyFunc,
}

resp, err := client.Get(&#34;<a href="http://example.com">http://example.com</a>&#34;)
// ...

req, err := http.NewRequest(&#34;GET&#34;, &#34;<a href="http://example.com">http://example.com</a>&#34;, nil)
// ...
req.Header.Add(&#34;If-None-Match&#34;, `W/&#34;wyzzy&#34;`)
resp, err := client.Do(req)
// ...
</pre>
<p>
For control over proxies, TLS configuration, keep-alives,
compression, and other settings, create a Transport:
</p>
<pre>tr := &amp;http.Transport{
	TLSClientConfig:    &amp;tls.Config{RootCAs: pool},
	DisableCompression: true,
}
client := &amp;http.Client{Transport: tr}
resp, err := client.Get(&#34;<a href="https://example.com">https://example.com</a>&#34;)
</pre>
<p>
Clients and Transports are safe for concurrent use by multiple
goroutines and for efficiency should only be created once and re-used.
</p>
<p>
ListenAndServe starts an HTTP server with a given address and handler.
The handler is usually nil, which means to use DefaultServeMux.
Handle and HandleFunc add handlers to DefaultServeMux:
</p>
<pre>http.Handle(&#34;/foo&#34;, fooHandler)

http.HandleFunc(&#34;/bar&#34;, func(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, &#34;Hello, %q&#34;, html.EscapeString(r.URL.Path))
})

log.Fatal(http.ListenAndServe(&#34;:8080&#34;, nil))
</pre>
<p>
More control over the server&#39;s behavior is available by creating a
custom Server:
</p>
<pre>s := &amp;http.Server{
	Addr:           &#34;:8080&#34;,
	Handler:        myHandler,
	ReadTimeout:    10 * time.Second,
	WriteTimeout:   10 * time.Second,
	MaxHeaderBytes: 1 &lt;&lt; 20,
}
log.Fatal(s.ListenAndServe())
</pre>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
				<dd><a href="#constants">Constants</a></dd>
			
			
				<dd><a href="#variables">Variables</a></dd>
			
			
				
				<dd><a href="#CanonicalHeaderKey">func CanonicalHeaderKey(s string) string</a></dd>
			
				
				<dd><a href="#DetectContentType">func DetectContentType(data []byte) string</a></dd>
			
				
				<dd><a href="#Error">func Error(w ResponseWriter, error string, code int)</a></dd>
			
				
				<dd><a href="#Handle">func Handle(pattern string, handler Handler)</a></dd>
			
				
				<dd><a href="#HandleFunc">func HandleFunc(pattern string, handler func(ResponseWriter, *Request))</a></dd>
			
				
				<dd><a href="#ListenAndServe">func ListenAndServe(addr string, handler Handler) error</a></dd>
			
				
				<dd><a href="#ListenAndServeTLS">func ListenAndServeTLS(addr string, certFile string, keyFile string, handler Handler) error</a></dd>
			
				
				<dd><a href="#MaxBytesReader">func MaxBytesReader(w ResponseWriter, r io.ReadCloser, n int64) io.ReadCloser</a></dd>
			
				
				<dd><a href="#NotFound">func NotFound(w ResponseWriter, r *Request)</a></dd>
			
				
				<dd><a href="#ParseHTTPVersion">func ParseHTTPVersion(vers string) (major, minor int, ok bool)</a></dd>
			
				
				<dd><a href="#ProxyFromEnvironment">func ProxyFromEnvironment(req *Request) (*url.URL, error)</a></dd>
			
				
				<dd><a href="#ProxyURL">func ProxyURL(fixedURL *url.URL) func(*Request) (*url.URL, error)</a></dd>
			
				
				<dd><a href="#Redirect">func Redirect(w ResponseWriter, r *Request, urlStr string, code int)</a></dd>
			
				
				<dd><a href="#Serve">func Serve(l net.Listener, handler Handler) error</a></dd>
			
				
				<dd><a href="#ServeContent">func ServeContent(w ResponseWriter, req *Request, name string, modtime time.Time, content io.ReadSeeker)</a></dd>
			
				
				<dd><a href="#ServeFile">func ServeFile(w ResponseWriter, r *Request, name string)</a></dd>
			
				
				<dd><a href="#SetCookie">func SetCookie(w ResponseWriter, cookie *Cookie)</a></dd>
			
				
				<dd><a href="#StatusText">func StatusText(code int) string</a></dd>
			
			
				
				<dd><a href="#Client">type Client</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Client.Do">func (c *Client) Do(req *Request) (resp *Response, err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Client.Get">func (c *Client) Get(url string) (r *Response, err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Client.Head">func (c *Client) Head(url string) (r *Response, err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Client.Post">func (c *Client) Post(url string, bodyType string, body io.Reader) (r *Response, err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Client.PostForm">func (c *Client) PostForm(url string, data url.Values) (r *Response, err error)</a></dd>
				
			
				
				<dd><a href="#Cookie">type Cookie</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Cookie.String">func (c *Cookie) String() string</a></dd>
				
			
				
				<dd><a href="#CookieJar">type CookieJar</a></dd>
				
				
			
				
				<dd><a href="#Dir">type Dir</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Dir.Open">func (d Dir) Open(name string) (File, error)</a></dd>
				
			
				
				<dd><a href="#File">type File</a></dd>
				
				
			
				
				<dd><a href="#FileSystem">type FileSystem</a></dd>
				
				
			
				
				<dd><a href="#Flusher">type Flusher</a></dd>
				
				
			
				
				<dd><a href="#Handler">type Handler</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#FileServer">func FileServer(root FileSystem) Handler</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NotFoundHandler">func NotFoundHandler() Handler</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#RedirectHandler">func RedirectHandler(url string, code int) Handler</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#StripPrefix">func StripPrefix(prefix string, h Handler) Handler</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#TimeoutHandler">func TimeoutHandler(h Handler, dt time.Duration, msg string) Handler</a></dd>
				
				
			
				
				<dd><a href="#HandlerFunc">type HandlerFunc</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#HandlerFunc.ServeHTTP">func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request)</a></dd>
				
			
				
				<dd><a href="#Header">type Header</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Header.Add">func (h Header) Add(key, value string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Header.Del">func (h Header) Del(key string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Header.Get">func (h Header) Get(key string) string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Header.Set">func (h Header) Set(key, value string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Header.Write">func (h Header) Write(w io.Writer) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Header.WriteSubset">func (h Header) WriteSubset(w io.Writer, exclude map[string]bool) error</a></dd>
				
			
				
				<dd><a href="#Hijacker">type Hijacker</a></dd>
				
				
			
				
				<dd><a href="#ProtocolError">type ProtocolError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#ProtocolError.Error">func (err *ProtocolError) Error() string</a></dd>
				
			
				
				<dd><a href="#Request">type Request</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewRequest">func NewRequest(method, urlStr string, body io.Reader) (*Request, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ReadRequest">func ReadRequest(b *bufio.Reader) (req *Request, err error)</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Request.AddCookie">func (r *Request) AddCookie(c *Cookie)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Request.Cookie">func (r *Request) Cookie(name string) (*Cookie, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Request.Cookies">func (r *Request) Cookies() []*Cookie</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Request.FormFile">func (r *Request) FormFile(key string) (multipart.File, *multipart.FileHeader, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Request.FormValue">func (r *Request) FormValue(key string) string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Request.MultipartReader">func (r *Request) MultipartReader() (*multipart.Reader, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Request.ParseForm">func (r *Request) ParseForm() (err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Request.ParseMultipartForm">func (r *Request) ParseMultipartForm(maxMemory int64) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Request.ProtoAtLeast">func (r *Request) ProtoAtLeast(major, minor int) bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Request.Referer">func (r *Request) Referer() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Request.SetBasicAuth">func (r *Request) SetBasicAuth(username, password string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Request.UserAgent">func (r *Request) UserAgent() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Request.Write">func (r *Request) Write(w io.Writer) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Request.WriteProxy">func (r *Request) WriteProxy(w io.Writer) error</a></dd>
				
			
				
				<dd><a href="#Response">type Response</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Get">func Get(url string) (r *Response, err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Head">func Head(url string) (r *Response, err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Post">func Post(url string, bodyType string, body io.Reader) (r *Response, err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#PostForm">func PostForm(url string, data url.Values) (r *Response, err error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ReadResponse">func ReadResponse(r *bufio.Reader, req *Request) (resp *Response, err error)</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Response.Cookies">func (r *Response) Cookies() []*Cookie</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Response.Location">func (r *Response) Location() (*url.URL, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Response.ProtoAtLeast">func (r *Response) ProtoAtLeast(major, minor int) bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Response.Write">func (r *Response) Write(w io.Writer) error</a></dd>
				
			
				
				<dd><a href="#ResponseWriter">type ResponseWriter</a></dd>
				
				
			
				
				<dd><a href="#RoundTripper">type RoundTripper</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewFileTransport">func NewFileTransport(fs FileSystem) RoundTripper</a></dd>
				
				
			
				
				<dd><a href="#ServeMux">type ServeMux</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewServeMux">func NewServeMux() *ServeMux</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#ServeMux.Handle">func (mux *ServeMux) Handle(pattern string, handler Handler)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ServeMux.HandleFunc">func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request))</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ServeMux.ServeHTTP">func (mux *ServeMux) ServeHTTP(w ResponseWriter, r *Request)</a></dd>
				
			
				
				<dd><a href="#Server">type Server</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Server.ListenAndServe">func (srv *Server) ListenAndServe() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Server.ListenAndServeTLS">func (srv *Server) ListenAndServeTLS(certFile, keyFile string) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Server.Serve">func (srv *Server) Serve(l net.Listener) error</a></dd>
				
			
				
				<dd><a href="#Transport">type Transport</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Transport.CloseIdleConnections">func (t *Transport) CloseIdleConnections()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Transport.RegisterProtocol">func (t *Transport) RegisterProtocol(scheme string, rt RoundTripper)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Transport.RoundTrip">func (t *Transport) RoundTrip(req *Request) (resp *Response, err error)</a></dd>
				
			
			
		</dl>

		
			<h4 id="examples">Examples</h4>
			<dl>
			
			<dd><a class="exampleLink" href="#example_FileServer">FileServer</a></dd>
			
			<dd><a class="exampleLink" href="#example_Get">Get</a></dd>
			
			<dd><a class="exampleLink" href="#example_Hijacker">Hijacker</a></dd>
			
			</dl>
		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/net/http/chunked.htm">chunked.go</a>
			
				<a href="src/pkg/net/http/client.htm">client.go</a>
			
				<a href="src/pkg/net/http/cookie.htm">cookie.go</a>
			
				<a href="src/pkg/net/http/doc.htm">doc.go</a>
			
				<a href="src/pkg/net/http/filetransport.htm">filetransport.go</a>
			
				<a href="src/pkg/net/http/fs.htm">fs.go</a>
			
				<a href="src/pkg/net/http/header.htm">header.go</a>
			
				<a href="src/pkg/net/http/jar.htm">jar.go</a>
			
				<a href="src/pkg/net/http/lex.htm">lex.go</a>
			
				<a href="src/pkg/net/http/request.htm">request.go</a>
			
				<a href="src/pkg/net/http/response.htm">response.go</a>
			
				<a href="src/pkg/net/http/server.htm">server.go</a>
			
				<a href="src/pkg/net/http/sniff.htm">sniff.go</a>
			
				<a href="src/pkg/net/http/status.htm">status.go</a>
			
				<a href="src/pkg/net/http/transfer.htm">transfer.go</a>
			
				<a href="src/pkg/net/http/transport.htm">transport.go</a>
			
			</span>
			</p>
		
	
		
			<h2 id="constants">Constants</h2>
			
				<pre>const (
    StatusContinue           = 100
    StatusSwitchingProtocols = 101

    StatusOK                   = 200
    StatusCreated              = 201
    StatusAccepted             = 202
    StatusNonAuthoritativeInfo = 203
    StatusNoContent            = 204
    StatusResetContent         = 205
    StatusPartialContent       = 206

    StatusMultipleChoices   = 300
    StatusMovedPermanently  = 301
    StatusFound             = 302
    StatusSeeOther          = 303
    StatusNotModified       = 304
    StatusUseProxy          = 305
    StatusTemporaryRedirect = 307

    StatusBadRequest                   = 400
    StatusUnauthorized                 = 401
    StatusPaymentRequired              = 402
    StatusForbidden                    = 403
    StatusNotFound                     = 404
    StatusMethodNotAllowed             = 405
    StatusNotAcceptable                = 406
    StatusProxyAuthRequired            = 407
    StatusRequestTimeout               = 408
    StatusConflict                     = 409
    StatusGone                         = 410
    StatusLengthRequired               = 411
    StatusPreconditionFailed           = 412
    StatusRequestEntityTooLarge        = 413
    StatusRequestURITooLong            = 414
    StatusUnsupportedMediaType         = 415
    StatusRequestedRangeNotSatisfiable = 416
    StatusExpectationFailed            = 417
    StatusTeapot                       = 418

    StatusInternalServerError     = 500
    StatusNotImplemented          = 501
    StatusBadGateway              = 502
    StatusServiceUnavailable      = 503
    StatusGatewayTimeout          = 504
    StatusHTTPVersionNotSupported = 505
)</pre>
				<p>
HTTP status codes, defined in RFC 2616.
</p>

			
				<pre>const DefaultMaxHeaderBytes = 1 &lt;&lt; 20 <span class="comment">// 1 MB</span>
</pre>
				<p>
DefaultMaxHeaderBytes is the maximum permitted size of the headers
in an HTTP request.
This can be overridden by setting Server.MaxHeaderBytes.
</p>

			
				<pre>const DefaultMaxIdleConnsPerHost = 2</pre>
				<p>
DefaultMaxIdleConnsPerHost is the default value of Transport&#39;s
MaxIdleConnsPerHost.
</p>

			
				<pre>const TimeFormat = &#34;Mon, 02 Jan 2006 15:04:05 GMT&#34;</pre>
				<p>
TimeFormat is the time format to use with
time.Parse and time.Time.Format when parsing
or generating times in HTTP headers.
It is like time.RFC1123 but hard codes GMT as the time zone.
</p>

			
		
		
			<h2 id="variables">Variables</h2>
			
				<pre>var (
    ErrHeaderTooLong        = &amp;ProtocolError{&#34;header too long&#34;}
    ErrShortBody            = &amp;ProtocolError{&#34;entity body too short&#34;}
    ErrNotSupported         = &amp;ProtocolError{&#34;feature not supported&#34;}
    ErrUnexpectedTrailer    = &amp;ProtocolError{&#34;trailer header without chunked transfer encoding&#34;}
    ErrMissingContentLength = &amp;ProtocolError{&#34;missing ContentLength in HEAD response&#34;}
    ErrNotMultipart         = &amp;ProtocolError{&#34;request Content-Type isn&#39;t multipart/form-data&#34;}
    ErrMissingBoundary      = &amp;ProtocolError{&#34;no multipart boundary param Content-Type&#34;}
)</pre>
				
			
				<pre>var (
    ErrWriteAfterFlush = errors.New(&#34;Conn.Write called after Flush&#34;)
    ErrBodyNotAllowed  = errors.New(&#34;http: response status code does not allow body&#34;)
    ErrHijacked        = errors.New(&#34;Conn has been hijacked&#34;)
    ErrContentLength   = errors.New(&#34;Conn.Write wrote more than the declared Content-Length&#34;)
)</pre>
				<p>
Errors introduced by the HTTP server.
</p>

			
				<pre>var DefaultClient = &amp;Client{}</pre>
				<p>
DefaultClient is the default Client and is used by Get, Head, and Post.
</p>

			
				<pre>var DefaultServeMux = NewServeMux()</pre>
				<p>
DefaultServeMux is the default ServeMux used by Serve.
</p>

			
				<pre>var ErrBodyReadAfterClose = errors.New(&#34;http: invalid Read on closed request Body&#34;)</pre>
				<p>
ErrBodyReadAfterClose is returned when reading a Request Body after
the body has been closed. This typically happens when the body is
read after an HTTP Handler calls WriteHeader or Write on its
ResponseWriter.
</p>

			
				<pre>var ErrHandlerTimeout = errors.New(&#34;http: Handler timeout&#34;)</pre>
				<p>
ErrHandlerTimeout is returned on ResponseWriter Write calls
in handlers which have timed out.
</p>

			
				<pre>var ErrLineTooLong = errors.New(&#34;header line too long&#34;)</pre>
				
			
				<pre>var ErrMissingFile = errors.New(&#34;http: no such file&#34;)</pre>
				<p>
ErrMissingFile is returned by FormFile when the provided file field name
is either not present in the request or not a file field.
</p>

			
				<pre>var ErrNoCookie = errors.New(&#34;http: named cookie not present&#34;)</pre>
				
			
				<pre>var ErrNoLocation = errors.New(&#34;http: no Location header in response&#34;)</pre>
				
			
		
		
			
			
			<h2 id="CanonicalHeaderKey">func <a href="src/pkg/net/http/header.htm#L68">CanonicalHeaderKey</a></h2>
			<pre>func CanonicalHeaderKey(s string) string</pre>
			<p>
CanonicalHeaderKey returns the canonical format of the
header key s.  The canonicalization converts the first
letter and any letter following a hyphen to upper case;
the rest are converted to lowercase.  For example, the
canonical key for &#34;accept-encoding&#34; is &#34;Accept-Encoding&#34;.
</p>

			
		
			
			
			<h2 id="DetectContentType">func <a href="src/pkg/net/http/sniff.htm#L11">DetectContentType</a></h2>
			<pre>func DetectContentType(data []byte) string</pre>
			<p>
DetectContentType implements the algorithm described
at <a href="http://mimesniff.spec.whatwg.org/">http://mimesniff.spec.whatwg.org/</a> to determine the
Content-Type of the given data.  It considers at most the
first 512 bytes of data.  DetectContentType always returns
a valid MIME type: if it cannot determine a more specific one, it
returns &#34;application/octet-stream&#34;.
</p>

			
		
			
			
			<h2 id="Error">func <a href="src/pkg/net/http/server.htm#L686">Error</a></h2>
			<pre>func Error(w ResponseWriter, error string, code int)</pre>
			<p>
Error replies to the request with the specified error message and HTTP code.
</p>

			
		
			
			
			<h2 id="Handle">func <a href="src/pkg/net/http/server.htm#L954">Handle</a></h2>
			<pre>func Handle(pattern string, handler Handler)</pre>
			<p>
Handle registers the handler for the given pattern
in the DefaultServeMux.
The documentation for ServeMux explains how patterns are matched.
</p>

			
		
			
			
			<h2 id="HandleFunc">func <a href="src/pkg/net/http/server.htm#L959">HandleFunc</a></h2>
			<pre>func HandleFunc(pattern string, handler func(ResponseWriter, *Request))</pre>
			<p>
HandleFunc registers the handler function for the given pattern
in the DefaultServeMux.
The documentation for ServeMux explains how patterns are matched.
</p>

			
		
			
			
			<h2 id="ListenAndServe">func <a href="src/pkg/net/http/server.htm#L1064">ListenAndServe</a></h2>
			<pre>func ListenAndServe(addr string, handler Handler) error</pre>
			<p>
ListenAndServe listens on the TCP network address addr
and then calls Serve with handler to handle requests
on incoming connections.  Handler is typically nil,
in which case the DefaultServeMux is used.
</p>
<p>
A trivial example server is:
</p>
<pre>package main

import (
	&#34;io&#34;
	&#34;net/http&#34;
	&#34;log&#34;
)

// hello world, the web server
func HelloServer(w http.ResponseWriter, req *http.Request) {
	io.WriteString(w, &#34;hello, world!\n&#34;)
}

func main() {
	http.HandleFunc(&#34;/hello&#34;, HelloServer)
	err := http.ListenAndServe(&#34;:12345&#34;, nil)
	if err != nil {
		log.Fatal(&#34;ListenAndServe: &#34;, err)
	}
}
</pre>

			
		
			
			
			<h2 id="ListenAndServeTLS">func <a href="src/pkg/net/http/server.htm#L1097">ListenAndServeTLS</a></h2>
			<pre>func ListenAndServeTLS(addr string, certFile string, keyFile string, handler Handler) error</pre>
			<p>
ListenAndServeTLS acts identically to ListenAndServe, except that it
expects HTTPS connections. Additionally, files containing a certificate and
matching private key for the server must be provided. If the certificate
is signed by a certificate authority, the certFile should be the concatenation
of the server&#39;s certificate followed by the CA&#39;s certificate.
</p>
<p>
A trivial example server is:
</p>
<pre>import (
	&#34;log&#34;
	&#34;net/http&#34;
)

func handler(w http.ResponseWriter, req *http.Request) {
	w.Header().Set(&#34;Content-Type&#34;, &#34;text/plain&#34;)
	w.Write([]byte(&#34;This is an example server.\n&#34;))
}

func main() {
	http.HandleFunc(&#34;/&#34;, handler)
	log.Printf(&#34;About to listen on 10443. Go to <a href="https://127.0.0.1:10443/">https://127.0.0.1:10443/</a>&#34;)
	err := http.ListenAndServeTLS(&#34;:10443&#34;, &#34;cert.pem&#34;, &#34;key.pem&#34;, nil)
	if err != nil {
		log.Fatal(err)
	}
}
</pre>
<p>
One can use generate_cert.go in crypto/tls to generate cert.pem and key.pem.
</p>

			
		
			
			
			<h2 id="MaxBytesReader">func <a href="src/pkg/net/http/request.htm#L554">MaxBytesReader</a></h2>
			<pre>func MaxBytesReader(w ResponseWriter, r io.ReadCloser, n int64) io.ReadCloser</pre>
			<p>
MaxBytesReader is similar to io.LimitReader but is intended for
limiting the size of incoming request bodies. In contrast to
io.LimitReader, MaxBytesReader&#39;s result is a ReadCloser, returns a
non-EOF error for a Read beyond the limit, and Closes the
underlying reader when its Close method is called.
</p>
<p>
MaxBytesReader prevents clients from accidentally or maliciously
sending a large request and wasting server resources.
</p>

			
		
			
			
			<h2 id="NotFound">func <a href="src/pkg/net/http/server.htm#L693">NotFound</a></h2>
			<pre>func NotFound(w ResponseWriter, r *Request)</pre>
			<p>
NotFound replies to the request with an HTTP 404 not found error.
</p>

			
		
			
			
			<h2 id="ParseHTTPVersion">func <a href="src/pkg/net/http/request.htm#L382">ParseHTTPVersion</a></h2>
			<pre>func ParseHTTPVersion(vers string) (major, minor int, ok bool)</pre>
			<p>
ParseHTTPVersion parses a HTTP version string.
&#34;HTTP/1.0&#34; returns (1, 0, true).
</p>

			
		
			
			
			<h2 id="ProxyFromEnvironment">func <a href="src/pkg/net/http/transport.htm#L72">ProxyFromEnvironment</a></h2>
			<pre>func ProxyFromEnvironment(req *Request) (*url.URL, error)</pre>
			<p>
ProxyFromEnvironment returns the URL of the proxy to use for a
given request, as indicated by the environment variables
$HTTP_PROXY and $NO_PROXY (or $http_proxy and $no_proxy).
An error is returned if the proxy environment is invalid.
A nil URL and nil error are returned if no proxy is defined in the
environment, or a proxy should not be used for the given request.
</p>

			
		
			
			
			<h2 id="ProxyURL">func <a href="src/pkg/net/http/transport.htm#L95">ProxyURL</a></h2>
			<pre>func ProxyURL(fixedURL *url.URL) func(*Request) (*url.URL, error)</pre>
			<p>
ProxyURL returns a proxy function (for use in a Transport)
that always returns the same URL.
</p>

			
		
			
			
			<h2 id="Redirect">func <a href="src/pkg/net/http/server.htm#L717">Redirect</a></h2>
			<pre>func Redirect(w ResponseWriter, r *Request, urlStr string, code int)</pre>
			<p>
Redirect replies to the request with a redirect to url,
which may be a path relative to the request path.
</p>

			
		
			
			
			<h2 id="Serve">func <a href="src/pkg/net/http/server.htm#L967">Serve</a></h2>
			<pre>func Serve(l net.Listener, handler Handler) error</pre>
			<p>
Serve accepts incoming HTTP connections on the listener l,
creating a new service thread for each.  The service threads
read requests and then call handler to reply to them.
Handler is typically nil, in which case the DefaultServeMux is used.
</p>

			
		
			
			
			<h2 id="ServeContent">func <a href="src/pkg/net/http/fs.htm#L91">ServeContent</a></h2>
			<pre>func ServeContent(w ResponseWriter, req *Request, name string, modtime time.Time, content io.ReadSeeker)</pre>
			<p>
ServeContent replies to the request using the content in the
provided ReadSeeker.  The main benefit of ServeContent over io.Copy
is that it handles Range requests properly, sets the MIME type, and
handles If-Modified-Since requests.
</p>
<p>
If the response&#39;s Content-Type header is not set, ServeContent
first tries to deduce the type from name&#39;s file extension and,
if that fails, falls back to reading the first block of the content
and passing it to DetectContentType.
The name is otherwise unused; in particular it can be empty and is
never sent in the response.
</p>
<p>
If modtime is not the zero time, ServeContent includes it in a
Last-Modified header in the response.  If the request includes an
If-Modified-Since header, ServeContent uses modtime to decide
whether the content needs to be sent at all.
</p>
<p>
The content&#39;s Seek method must work: ServeContent uses
a seek to the end of the content to determine its size.
</p>
<p>
Note that *os.File implements the io.ReadSeeker interface.
</p>

			
		
			
			
			<h2 id="ServeFile">func <a href="src/pkg/net/http/fs.htm#L271">ServeFile</a></h2>
			<pre>func ServeFile(w ResponseWriter, r *Request, name string)</pre>
			<p>
ServeFile replies to the request with the contents of the named file or directory.
</p>

			
		
			
			
			<h2 id="SetCookie">func <a href="src/pkg/net/http/cookie.htm#L123">SetCookie</a></h2>
			<pre>func SetCookie(w ResponseWriter, cookie *Cookie)</pre>
			<p>
SetCookie adds a Set-Cookie header to the provided ResponseWriter&#39;s headers.
</p>

			
		
			
			
			<h2 id="StatusText">func <a href="src/pkg/net/http/status.htm#L96">StatusText</a></h2>
			<pre>func StatusText(code int) string</pre>
			<p>
StatusText returns a text for the HTTP status code. It returns the empty
string if the code is unknown.
</p>

			
		
		
			
			
			<h2 id="Client">type <a href="src/pkg/net/http/client.htm#L17">Client</a></h2>
			<pre>type Client struct {
    <span class="comment">// Transport specifies the mechanism by which individual</span>
    <span class="comment">// HTTP requests are made.</span>
    <span class="comment">// If nil, DefaultTransport is used.</span>
    Transport RoundTripper

    <span class="comment">// CheckRedirect specifies the policy for handling redirects.</span>
    <span class="comment">// If CheckRedirect is not nil, the client calls it before</span>
    <span class="comment">// following an HTTP redirect. The arguments req and via</span>
    <span class="comment">// are the upcoming request and the requests made already,</span>
    <span class="comment">// oldest first. If CheckRedirect returns an error, the client</span>
    <span class="comment">// returns that error instead of issue the Request req.</span>
    <span class="comment">//</span>
    <span class="comment">// If CheckRedirect is nil, the Client uses its default policy,</span>
    <span class="comment">// which is to stop after 10 consecutive requests.</span>
    CheckRedirect func(req *Request, via []*Request) error

    <span class="comment">// Jar specifies the cookie jar. </span>
    <span class="comment">// If Jar is nil, cookies are not sent in requests and ignored </span>
    <span class="comment">// in responses.</span>
    Jar CookieJar
}</pre>
			<p>
A Client is an HTTP client. Its zero value (DefaultClient) is a usable client
that uses DefaultTransport.
</p>
<p>
The Client&#39;s Transport typically has internal state (cached
TCP connections), so Clients should be reused instead of created as
needed. Clients are safe for concurrent use by multiple goroutines.
</p>


			

			

			

			

			
				
				<h3 id="Client.Do">func (*Client) <a href="src/pkg/net/http/client.htm#L88">Do</a></h3>
				<pre>func (c *Client) Do(req *Request) (resp *Response, err error)</pre>
				<p>
Do sends an HTTP request and returns an HTTP response, following
policy (e.g. redirects, cookies, auth) as configured on the client.
</p>
<p>
A non-nil response always contains a non-nil resp.Body.
</p>
<p>
Callers should close resp.Body when done reading from it. If
resp.Body is not closed, the Client&#39;s underlying RoundTripper
(typically Transport) may not be able to re-use a persistent TCP
connection to the server for a subsequent &#34;keep-alive&#34; request.
</p>
<p>
Generally Get, Post, or PostForm will be used instead of Do.
</p>

				
				
			
				
				<h3 id="Client.Get">func (*Client) <a href="src/pkg/net/http/client.htm#L161">Get</a></h3>
				<pre>func (c *Client) Get(url string) (r *Response, err error)</pre>
				<p>
Get issues a GET to the specified URL.  If the response is one of the
following redirect codes, Get follows the redirect after calling the
Client&#39;s CheckRedirect function.
</p>
<pre>301 (Moved Permanently)
302 (Found)
303 (See Other)
307 (Temporary Redirect)
</pre>
<p>
Caller should close r.Body when done reading from it.
</p>

				
				
			
				
				<h3 id="Client.Head">func (*Client) <a href="src/pkg/net/http/client.htm#L318">Head</a></h3>
				<pre>func (c *Client) Head(url string) (r *Response, err error)</pre>
				<p>
Head issues a HEAD to the specified URL.  If the response is one of the
following redirect codes, Head follows the redirect after calling the
Client&#39;s CheckRedirect function.
</p>
<pre>301 (Moved Permanently)
302 (Found)
303 (See Other)
307 (Temporary Redirect)
</pre>

				
				
			
				
				<h3 id="Client.Post">func (*Client) <a href="src/pkg/net/http/client.htm#L265">Post</a></h3>
				<pre>func (c *Client) Post(url string, bodyType string, body io.Reader) (r *Response, err error)</pre>
				<p>
Post issues a POST to the specified URL.
</p>
<p>
Caller should close r.Body when done reading from it.
</p>

				
				
			
				
				<h3 id="Client.PostForm">func (*Client) <a href="src/pkg/net/http/client.htm#L292">PostForm</a></h3>
				<pre>func (c *Client) PostForm(url string, data url.Values) (r *Response, err error)</pre>
				<p>
PostForm issues a POST to the specified URL,
with data&#39;s keys and values urlencoded as the request body.
</p>
<p>
Caller should close r.Body when done reading from it.
</p>

				
				
			
		
			
			
			<h2 id="Cookie">type <a href="src/pkg/net/http/cookie.htm#L11">Cookie</a></h2>
			<pre>type Cookie struct {
    Name       string
    Value      string
    Path       string
    Domain     string
    Expires    time.Time
    RawExpires string

    <span class="comment">// MaxAge=0 means no &#39;Max-Age&#39; attribute specified. </span>
    <span class="comment">// MaxAge&lt;0 means delete cookie now, equivalently &#39;Max-Age: 0&#39;</span>
    <span class="comment">// MaxAge&gt;0 means Max-Age attribute present and given in seconds</span>
    MaxAge   int
    Secure   bool
    HttpOnly bool
    Raw      string
    Unparsed []string <span class="comment">// Raw text of unparsed attribute-value pairs</span>
}</pre>
			<p>
A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an
HTTP response or the Cookie header of an HTTP request.
</p>


			

			

			

			

			
				
				<h3 id="Cookie.String">func (*Cookie) <a href="src/pkg/net/http/cookie.htm#L130">String</a></h3>
				<pre>func (c *Cookie) String() string</pre>
				<p>
String returns the serialization of the cookie for use in a Cookie
header (if only Name and Value are set) or a Set-Cookie response
header (if other fields are set).
</p>

				
				
			
		
			
			
			<h2 id="CookieJar">type <a href="src/pkg/net/http/jar.htm#L5">CookieJar</a></h2>
			<pre>type CookieJar interface {
    <span class="comment">// SetCookies handles the receipt of the cookies in a reply for the </span>
    <span class="comment">// given URL.  It may or may not choose to save the cookies, depending </span>
    <span class="comment">// on the jar&#39;s policy and implementation. </span>
    SetCookies(u *url.URL, cookies []*Cookie)

    <span class="comment">// Cookies returns the cookies to send in a request for the given URL.</span>
    <span class="comment">// It is up to the implementation to honor the standard cookie use </span>
    <span class="comment">// restrictions such as in RFC 6265. </span>
    Cookies(u *url.URL) []*Cookie
}</pre>
			<p>
A CookieJar manages storage and use of cookies in HTTP requests.
</p>
<p>
Implementations of CookieJar must be safe for concurrent use by multiple
goroutines.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Dir">type <a href="src/pkg/net/http/fs.htm#L16">Dir</a></h2>
			<pre>type Dir string</pre>
			<p>
A Dir implements http.FileSystem using the native file
system restricted to a specific directory tree.
</p>
<p>
An empty Dir is treated as &#34;.&#34;.
</p>


			

			

			

			

			
				
				<h3 id="Dir.Open">func (Dir) <a href="src/pkg/net/http/fs.htm#L18">Open</a></h3>
				<pre>func (d Dir) Open(name string) (File, error)</pre>
				
				
				
			
		
			
			
			<h2 id="File">type <a href="src/pkg/net/http/fs.htm#L42">File</a></h2>
			<pre>type File interface {
    Close() error
    Stat() (os.FileInfo, error)
    Readdir(count int) ([]os.FileInfo, error)
    Read([]byte) (int, error)
    Seek(offset int64, whence int) (int64, error)
}</pre>
			<p>
A File is returned by a FileSystem&#39;s Open method and can be
served by the FileServer implementation.
</p>


			

			

			

			

			
		
			
			
			<h2 id="FileSystem">type <a href="src/pkg/net/http/fs.htm#L36">FileSystem</a></h2>
			<pre>type FileSystem interface {
    Open(name string) (File, error)
}</pre>
			<p>
A FileSystem implements access to a collection of named files.
The elements in a file path are separated by slash (&#39;/&#39;, U+002F)
characters, regardless of host operating system convention.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Flusher">type <a href="src/pkg/net/http/server.htm#L71">Flusher</a></h2>
			<pre>type Flusher interface {
    <span class="comment">// Flush sends any buffered data to the client.</span>
    Flush()
}</pre>
			<p>
The Flusher interface is implemented by ResponseWriters that allow
an HTTP handler to flush buffered data to the client.
</p>
<p>
Note that even for ResponseWriters that support Flush,
if the client is connected through an HTTP proxy,
the buffered data may not reach the client until the response
completes.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Handler">type <a href="src/pkg/net/http/server.htm#L37">Handler</a></h2>
			<pre>type Handler interface {
    ServeHTTP(ResponseWriter, *Request)
}</pre>
			<p>
Objects implementing the Handler interface can be
registered to serve a particular path or subtree
in the HTTP server.
</p>
<p>
ServeHTTP should write reply headers and data to the ResponseWriter
and then return.  Returning signals that the request is finished
and that the HTTP server can move on to the next request on
the connection.
</p>


			

			

			

			
				
				<h3 id="FileServer">func <a href="src/pkg/net/http/fs.htm#L287">FileServer</a></h3>
				<pre>func FileServer(root FileSystem) Handler</pre>
				<p>
FileServer returns a handler that serves HTTP requests
with the contents of the file system rooted at root.
</p>
<p>
To use the operating system&#39;s file system implementation,
use http.Dir:
</p>
<pre>http.Handle(&#34;/&#34;, http.FileServer(http.Dir(&#34;/tmp&#34;)))
</pre>

				<div id="example_FileServer" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">
<span class="comment">// we use StripPrefix so that /tmpfiles/somefile will access /tmp/somefile</span>
http.Handle(&#34;/tmpfiles/&#34;, http.StripPrefix(&#34;/tmpfiles/&#34;, http.FileServer(http.Dir(&#34;/tmp&#34;))))
</pre>
		
	</div>
</div>

			
				
				<h3 id="NotFoundHandler">func <a href="src/pkg/net/http/server.htm#L697">NotFoundHandler</a></h3>
				<pre>func NotFoundHandler() Handler</pre>
				<p>
NotFoundHandler returns a simple request handler
that replies to each request with a &ldquo;404 page not found&rdquo; reply.
</p>

				
			
				
				<h3 id="RedirectHandler">func <a href="src/pkg/net/http/server.htm#L801">RedirectHandler</a></h3>
				<pre>func RedirectHandler(url string, code int) Handler</pre>
				<p>
RedirectHandler returns a request handler that redirects
each request it receives to the given url using the given
status code.
</p>

				
			
				
				<h3 id="StripPrefix">func <a href="src/pkg/net/http/server.htm#L704">StripPrefix</a></h3>
				<pre>func StripPrefix(prefix string, h Handler) Handler</pre>
				<p>
StripPrefix returns a handler that serves HTTP requests
by removing the given prefix from the request URL&#39;s Path
and invoking the handler h. StripPrefix handles a
request for a path that doesn&#39;t begin with prefix by
replying with an HTTP 404 not found error.
</p>

				
			
				
				<h3 id="TimeoutHandler">func <a href="src/pkg/net/http/server.htm#L1148">TimeoutHandler</a></h3>
				<pre>func TimeoutHandler(h Handler, dt time.Duration, msg string) Handler</pre>
				<p>
TimeoutHandler returns a Handler that runs h with the given time limit.
</p>
<p>
The new Handler calls h.ServeHTTP to handle each request, but if a
call runs for more than ns nanoseconds, the handler responds with
a 503 Service Unavailable error and the given message in its body.
(If msg is empty, a suitable default message will be sent.)
After such a timeout, writes by h to its ResponseWriter will return
ErrHandlerTimeout.
</p>

				
			

			
		
			
			
			<h2 id="HandlerFunc">type <a href="src/pkg/net/http/server.htm#L676">HandlerFunc</a></h2>
			<pre>type HandlerFunc func(ResponseWriter, *Request)</pre>
			<p>
The HandlerFunc type is an adapter to allow the use of
ordinary functions as HTTP handlers.  If f is a function
with the appropriate signature, HandlerFunc(f) is a
Handler object that calls f.
</p>


			

			

			

			

			
				
				<h3 id="HandlerFunc.ServeHTTP">func (HandlerFunc) <a href="src/pkg/net/http/server.htm#L679">ServeHTTP</a></h3>
				<pre>func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request)</pre>
				<p>
ServeHTTP calls f(w, r).
</p>

				
				
			
		
			
			
			<h2 id="Header">type <a href="src/pkg/net/http/header.htm#L6">Header</a></h2>
			<pre>type Header map[string][]string</pre>
			<p>
A Header represents the key-value pairs in an HTTP header.
</p>


			

			

			

			

			
				
				<h3 id="Header.Add">func (Header) <a href="src/pkg/net/http/header.htm#L10">Add</a></h3>
				<pre>func (h Header) Add(key, value string)</pre>
				<p>
Add adds the key, value pair to the header.
It appends to any existing values associated with key.
</p>

				
				
			
				
				<h3 id="Header.Del">func (Header) <a href="src/pkg/net/http/header.htm#L30">Del</a></h3>
				<pre>func (h Header) Del(key string)</pre>
				<p>
Del deletes the values associated with key.
</p>

				
				
			
				
				<h3 id="Header.Get">func (Header) <a href="src/pkg/net/http/header.htm#L25">Get</a></h3>
				<pre>func (h Header) Get(key string) string</pre>
				<p>
Get gets the first value associated with the given key.
If there are no values associated with the key, Get returns &#34;&#34;.
To access multiple values of a key, access the map directly
with CanonicalHeaderKey.
</p>

				
				
			
				
				<h3 id="Header.Set">func (Header) <a href="src/pkg/net/http/header.htm#L17">Set</a></h3>
				<pre>func (h Header) Set(key, value string)</pre>
				<p>
Set sets the header entries associated with key to
the single element value.  It replaces any existing
values associated with key.
</p>

				
				
			
				
				<h3 id="Header.Write">func (Header) <a href="src/pkg/net/http/header.htm#L35">Write</a></h3>
				<pre>func (h Header) Write(w io.Writer) error</pre>
				<p>
Write writes a header in wire format.
</p>

				
				
			
				
				<h3 id="Header.WriteSubset">func (Header) <a href="src/pkg/net/http/header.htm#L43">WriteSubset</a></h3>
				<pre>func (h Header) WriteSubset(w io.Writer, exclude map[string]bool) error</pre>
				<p>
WriteSubset writes a header in wire format.
If exclude is not nil, keys where exclude[key] == true are not written.
</p>

				
				
			
		
			
			
			<h2 id="Hijacker">type <a href="src/pkg/net/http/server.htm#L78">Hijacker</a></h2>
			<pre>type Hijacker interface {
    <span class="comment">// Hijack lets the caller take over the connection.</span>
    <span class="comment">// After a call to Hijack(), the HTTP server library</span>
    <span class="comment">// will not do anything else with the connection.</span>
    <span class="comment">// It becomes the caller&#39;s responsibility to manage</span>
    <span class="comment">// and close the connection.</span>
    Hijack() (net.Conn, *bufio.ReadWriter, error)
}</pre>
			<p>
The Hijacker interface is implemented by ResponseWriters that allow
an HTTP handler to take over the connection.
</p>


			

			

			<div id="example_Hijacker" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">
http.HandleFunc(&#34;/hijack&#34;, func(w http.ResponseWriter, r *http.Request) {
    hj, ok := w.(http.Hijacker)
    if !ok {
        http.Error(w, &#34;webserver doesn&#39;t support hijacking&#34;, http.StatusInternalServerError)
        return
    }
    conn, bufrw, err := hj.Hijack()
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
    <span class="comment">// Don&#39;t forget to close the connection:</span>
    defer conn.Close()
    bufrw.WriteString(&#34;Now we&#39;re speaking raw TCP. Say hi: &#34;)
    bufrw.Flush()
    s, err := bufrw.ReadString(&#39;\n&#39;)
    if err != nil {
        log.Printf(&#34;error reading string: %v&#34;, err)
        return
    }
    fmt.Fprintf(bufrw, &#34;You said: %q\nBye.\n&#34;, s)
    bufrw.Flush()
})
</pre>
		
	</div>
</div>


			

			
		
			
			
			<h2 id="ProtocolError">type <a href="src/pkg/net/http/request.htm#L27">ProtocolError</a></h2>
			<pre>type ProtocolError struct {
    ErrorString string
}</pre>
			<p>
HTTP request parsing errors.
</p>


			

			

			

			

			
				
				<h3 id="ProtocolError.Error">func (*ProtocolError) <a href="src/pkg/net/http/request.htm#L31">Error</a></h3>
				<pre>func (err *ProtocolError) Error() string</pre>
				
				
				
			
		
			
			
			<h2 id="Request">type <a href="src/pkg/net/http/request.htm#L61">Request</a></h2>
			<pre>type Request struct {
    Method string <span class="comment">// GET, POST, PUT, etc.</span>
    URL    *url.URL

    <span class="comment">// The protocol version for incoming requests.</span>
    <span class="comment">// Outgoing requests always use HTTP/1.1.</span>
    Proto      string <span class="comment">// &#34;HTTP/1.0&#34;</span>
    ProtoMajor int    <span class="comment">// 1</span>
    ProtoMinor int

    <span class="comment">// A header maps request lines to their values.</span>
    <span class="comment">// If the header says</span>
    <span class="comment">//</span>
    <span class="comment">//	accept-encoding: gzip, deflate</span>
    <span class="comment">//	Accept-Language: en-us</span>
    <span class="comment">//	Connection: keep-alive</span>
    <span class="comment">//</span>
    <span class="comment">// then</span>
    <span class="comment">//</span>
    <span class="comment">//	Header = map[string][]string{</span>
    <span class="comment">//		&#34;Accept-Encoding&#34;: {&#34;gzip, deflate&#34;},</span>
    <span class="comment">//		&#34;Accept-Language&#34;: {&#34;en-us&#34;},</span>
    <span class="comment">//		&#34;Connection&#34;: {&#34;keep-alive&#34;},</span>
    <span class="comment">//	}</span>
    <span class="comment">//</span>
    <span class="comment">// HTTP defines that header names are case-insensitive.</span>
    <span class="comment">// The request parser implements this by canonicalizing the</span>
    <span class="comment">// name, making the first character and any characters</span>
    <span class="comment">// following a hyphen uppercase and the rest lowercase.</span>
    Header Header

    <span class="comment">// The message body.</span>
    Body io.ReadCloser

    <span class="comment">// ContentLength records the length of the associated content.</span>
    <span class="comment">// The value -1 indicates that the length is unknown.</span>
    <span class="comment">// Values &gt;= 0 indicate that the given number of bytes may</span>
    <span class="comment">// be read from Body.</span>
    <span class="comment">// For outgoing requests, a value of 0 means unknown if Body is not nil.</span>
    ContentLength int64

    <span class="comment">// TransferEncoding lists the transfer encodings from outermost to</span>
    <span class="comment">// innermost. An empty list denotes the &#34;identity&#34; encoding.</span>
    <span class="comment">// TransferEncoding can usually be ignored; chunked encoding is</span>
    <span class="comment">// automatically added and removed as necessary when sending and</span>
    <span class="comment">// receiving requests.</span>
    TransferEncoding []string

    <span class="comment">// Close indicates whether to close the connection after</span>
    <span class="comment">// replying to this request.</span>
    Close bool

    <span class="comment">// The host on which the URL is sought.</span>
    <span class="comment">// Per RFC 2616, this is either the value of the Host: header</span>
    <span class="comment">// or the host name given in the URL itself.</span>
    Host string

    <span class="comment">// Form contains the parsed form data, including both the URL</span>
    <span class="comment">// field&#39;s query parameters and the POST or PUT form data.</span>
    <span class="comment">// This field is only available after ParseForm is called.</span>
    <span class="comment">// The HTTP client ignores Form and uses Body instead.</span>
    Form url.Values

    <span class="comment">// MultipartForm is the parsed multipart form, including file uploads.</span>
    <span class="comment">// This field is only available after ParseMultipartForm is called.</span>
    <span class="comment">// The HTTP client ignores MultipartForm and uses Body instead.</span>
    MultipartForm *multipart.Form

    <span class="comment">// Trailer maps trailer keys to values.  Like for Header, if the</span>
    <span class="comment">// response has multiple trailer lines with the same key, they will be</span>
    <span class="comment">// concatenated, delimited by commas.</span>
    <span class="comment">// For server requests, Trailer is only populated after Body has been</span>
    <span class="comment">// closed or fully consumed.</span>
    <span class="comment">// Trailer support is only partially complete.</span>
    Trailer Header

    <span class="comment">// RemoteAddr allows HTTP servers and other software to record</span>
    <span class="comment">// the network address that sent the request, usually for</span>
    <span class="comment">// logging. This field is not filled in by ReadRequest and</span>
    <span class="comment">// has no defined format. The HTTP server in this package</span>
    <span class="comment">// sets RemoteAddr to an &#34;IP:port&#34; address before invoking a</span>
    <span class="comment">// handler.</span>
    <span class="comment">// This field is ignored by the HTTP client.</span>
    RemoteAddr string

    <span class="comment">// RequestURI is the unmodified Request-URI of the</span>
    <span class="comment">// Request-Line (RFC 2616, Section 5.1) as sent by the client</span>
    <span class="comment">// to a server. Usually the URL field should be used instead.</span>
    <span class="comment">// It is an error to set this field in an HTTP client request.</span>
    RequestURI string

    <span class="comment">// TLS allows HTTP servers and other software to record</span>
    <span class="comment">// information about the TLS connection on which the request</span>
    <span class="comment">// was received. This field is not filled in by ReadRequest.</span>
    <span class="comment">// The HTTP server in this package sets the field for</span>
    <span class="comment">// TLS-enabled connections before invoking a handler;</span>
    <span class="comment">// otherwise it leaves the field nil.</span>
    <span class="comment">// This field is ignored by the HTTP client.</span>
    TLS *tls.ConnectionState
}</pre>
			<p>
A Request represents an HTTP request received by a server
or to be sent by a client.
</p>


			

			

			

			
				
				<h3 id="NewRequest">func <a href="src/pkg/net/http/request.htm#L398">NewRequest</a></h3>
				<pre>func NewRequest(method, urlStr string, body io.Reader) (*Request, error)</pre>
				<p>
NewRequest returns a new Request given a method, URL, and optional body.
</p>

				
			
				
				<h3 id="ReadRequest">func <a href="src/pkg/net/http/request.htm#L440">ReadRequest</a></h3>
				<pre>func ReadRequest(b *bufio.Reader) (req *Request, err error)</pre>
				<p>
ReadRequest reads and parses a request from b.
</p>

				
			

			
				
				<h3 id="Request.AddCookie">func (*Request) <a href="src/pkg/net/http/request.htm#L194">AddCookie</a></h3>
				<pre>func (r *Request) AddCookie(c *Cookie)</pre>
				<p>
AddCookie adds a cookie to the request.  Per RFC 6265 section 5.4,
AddCookie does not attach more than one Cookie header field.  That
means all cookies, if any, are written into the same line,
separated by semicolon.
</p>

				
				
			
				
				<h3 id="Request.Cookie">func (*Request) <a href="src/pkg/net/http/request.htm#L183">Cookie</a></h3>
				<pre>func (r *Request) Cookie(name string) (*Cookie, error)</pre>
				<p>
Cookie returns the named cookie provided in the request or
ErrNoCookie if not found.
</p>

				
				
			
				
				<h3 id="Request.Cookies">func (*Request) <a href="src/pkg/net/http/request.htm#L175">Cookies</a></h3>
				<pre>func (r *Request) Cookies() []*Cookie</pre>
				<p>
Cookies parses and returns the HTTP cookies sent with the request.
</p>

				
				
			
				
				<h3 id="Request.FormFile">func (*Request) <a href="src/pkg/net/http/request.htm#L705">FormFile</a></h3>
				<pre>func (r *Request) FormFile(key string) (multipart.File, *multipart.FileHeader, error)</pre>
				<p>
FormFile returns the first file for the provided form key.
FormFile calls ParseMultipartForm and ParseForm if necessary.
</p>

				
				
			
				
				<h3 id="Request.FormValue">func (*Request) <a href="src/pkg/net/http/request.htm#L693">FormValue</a></h3>
				<pre>func (r *Request) FormValue(key string) string</pre>
				<p>
FormValue returns the first value for the named component of the query.
FormValue calls ParseMultipartForm and ParseForm if necessary.
</p>

				
				
			
				
				<h3 id="Request.MultipartReader">func (*Request) <a href="src/pkg/net/http/request.htm#L227">MultipartReader</a></h3>
				<pre>func (r *Request) MultipartReader() (*multipart.Reader, error)</pre>
				<p>
MultipartReader returns a MIME multipart reader if this is a
multipart/form-data POST request, else returns nil and an error.
Use this function instead of ParseMultipartForm to
process the request body as a stream.
</p>

				
				
			
				
				<h3 id="Request.ParseForm">func (*Request) <a href="src/pkg/net/http/request.htm#L595">ParseForm</a></h3>
				<pre>func (r *Request) ParseForm() (err error)</pre>
				<p>
ParseForm parses the raw query from the URL.
</p>
<p>
For POST or PUT requests, it also parses the request body as a form.
If the request Body&#39;s size has not already been limited by MaxBytesReader,
the size is capped at 10MB.
</p>
<p>
ParseMultipartForm calls ParseForm automatically.
It is idempotent.
</p>

				
				
			
				
				<h3 id="Request.ParseMultipartForm">func (*Request) <a href="src/pkg/net/http/request.htm#L658">ParseMultipartForm</a></h3>
				<pre>func (r *Request) ParseMultipartForm(maxMemory int64) error</pre>
				<p>
ParseMultipartForm parses a request body as multipart/form-data.
The whole request body is parsed and up to a total of maxMemory bytes of
its file parts are stored in memory, with the remainder stored on
disk in temporary files.
ParseMultipartForm calls ParseForm if necessary.
After one call to ParseMultipartForm, subsequent calls have no effect.
</p>

				
				
			
				
				<h3 id="Request.ProtoAtLeast">func (*Request) <a href="src/pkg/net/http/request.htm#L164">ProtoAtLeast</a></h3>
				<pre>func (r *Request) ProtoAtLeast(major, minor int) bool</pre>
				<p>
ProtoAtLeast returns whether the HTTP protocol used
in the request is at least major.minor.
</p>

				
				
			
				
				<h3 id="Request.Referer">func (*Request) <a href="src/pkg/net/http/request.htm#L211">Referer</a></h3>
				<pre>func (r *Request) Referer() string</pre>
				<p>
Referer returns the referring URL, if sent in the request.
</p>
<p>
Referer is misspelled as in the request itself, a mistake from the
earliest days of HTTP.  This value can also be fetched from the
Header map as Header[&#34;Referer&#34;]; the benefit of making it available
as a method is that the compiler can diagnose programs that use the
alternate (correct English) spelling req.Referrer() but cannot
diagnose programs that use Header[&#34;Referrer&#34;].
</p>

				
				
			
				
				<h3 id="Request.SetBasicAuth">func (*Request) <a href="src/pkg/net/http/request.htm#L434">SetBasicAuth</a></h3>
				<pre>func (r *Request) SetBasicAuth(username, password string)</pre>
				<p>
SetBasicAuth sets the request&#39;s Authorization header to use HTTP
Basic Authentication with the provided username and password.
</p>
<p>
With HTTP Basic Authentication the provided username and password
are not encrypted.
</p>

				
				
			
				
				<h3 id="Request.UserAgent">func (*Request) <a href="src/pkg/net/http/request.htm#L170">UserAgent</a></h3>
				<pre>func (r *Request) UserAgent() string</pre>
				<p>
UserAgent returns the client&#39;s User-Agent, if sent in the request.
</p>

				
				
			
				
				<h3 id="Request.Write">func (*Request) <a href="src/pkg/net/http/request.htm#L277">Write</a></h3>
				<pre>func (r *Request) Write(w io.Writer) error</pre>
				<p>
Write writes an HTTP/1.1 request -- header and body -- in wire format.
This method consults the following fields of the request:
</p>
<pre>Host
URL
Method (defaults to &#34;GET&#34;)
Header
ContentLength
TransferEncoding
Body
</pre>
<p>
If Body is present, Content-Length is &lt;= 0 and TransferEncoding
hasn&#39;t been set to &#34;identity&#34;, Write adds &#34;Transfer-Encoding:
chunked&#34; to the header. Body is closed after it is sent.
</p>

				
				
			
				
				<h3 id="Request.WriteProxy">func (*Request) <a href="src/pkg/net/http/request.htm#L287">WriteProxy</a></h3>
				<pre>func (r *Request) WriteProxy(w io.Writer) error</pre>
				<p>
WriteProxy is like Write but writes the request in the form
expected by an HTTP proxy.  In particular, WriteProxy writes the
initial Request-URI line of the request with an absolute URI, per
section 5.1.2 of RFC 2616, including the scheme and host.
In either case, WriteProxy also writes a Host header, using
either r.Host or r.URL.Host.
</p>

				
				
			
		
			
			
			<h2 id="Response">type <a href="src/pkg/net/http/response.htm#L17">Response</a></h2>
			<pre>type Response struct {
    Status     string <span class="comment">// e.g. &#34;200 OK&#34;</span>
    StatusCode int    <span class="comment">// e.g. 200</span>
    Proto      string <span class="comment">// e.g. &#34;HTTP/1.0&#34;</span>
    ProtoMajor int    <span class="comment">// e.g. 1</span>
    ProtoMinor int

    <span class="comment">// Header maps header keys to values.  If the response had multiple</span>
    <span class="comment">// headers with the same key, they will be concatenated, with comma</span>
    <span class="comment">// delimiters.  (Section 4.2 of RFC 2616 requires that multiple headers</span>
    <span class="comment">// be semantically equivalent to a comma-delimited sequence.) Values</span>
    <span class="comment">// duplicated by other fields in this struct (e.g., ContentLength) are</span>
    <span class="comment">// omitted from Header.</span>
    <span class="comment">//</span>
    <span class="comment">// Keys in the map are canonicalized (see CanonicalHeaderKey).</span>
    Header Header

    <span class="comment">// Body represents the response body.</span>
    <span class="comment">//</span>
    <span class="comment">// The http Client and Transport guarantee that Body is always</span>
    <span class="comment">// non-nil, even on responses without a body or responses with</span>
    <span class="comment">// a zero-lengthed body.</span>
    Body io.ReadCloser

    <span class="comment">// ContentLength records the length of the associated content.  The</span>
    <span class="comment">// value -1 indicates that the length is unknown.  Unless RequestMethod</span>
    <span class="comment">// is &#34;HEAD&#34;, values &gt;= 0 indicate that the given number of bytes may</span>
    <span class="comment">// be read from Body.</span>
    ContentLength int64

    <span class="comment">// Contains transfer encodings from outer-most to inner-most. Value is</span>
    <span class="comment">// nil, means that &#34;identity&#34; encoding is used.</span>
    TransferEncoding []string

    <span class="comment">// Close records whether the header directed that the connection be</span>
    <span class="comment">// closed after reading Body.  The value is advice for clients: neither</span>
    <span class="comment">// ReadResponse nor Response.Write ever closes a connection.</span>
    Close bool

    <span class="comment">// Trailer maps trailer keys to values, in the same</span>
    <span class="comment">// format as the header.</span>
    Trailer Header

    <span class="comment">// The Request that was sent to obtain this Response.</span>
    <span class="comment">// Request&#39;s Body is nil (having already been consumed).</span>
    <span class="comment">// This is only populated for Client requests.</span>
    Request *Request
}</pre>
			<p>
Response represents the response from an HTTP request.
</p>


			

			

			

			
				
				<h3 id="Get">func <a href="src/pkg/net/http/client.htm#L147">Get</a></h3>
				<pre>func Get(url string) (r *Response, err error)</pre>
				<p>
Get issues a GET to the specified URL.  If the response is one of the following
redirect codes, Get follows the redirect, up to a maximum of 10 redirects:
</p>
<pre>301 (Moved Permanently)
302 (Found)
303 (See Other)
307 (Temporary Redirect)
</pre>
<p>
Caller should close r.Body when done reading from it.
</p>
<p>
Get is a wrapper around DefaultClient.Get.
</p>

				<div id="example_Get" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">
res, err := http.Get(&#34;http://www.google.com/robots.txt&#34;)
if err != nil {
    log.Fatal(err)
}
robots, err := ioutil.ReadAll(res.Body)
if err != nil {
    log.Fatal(err)
}
res.Body.Close()
fmt.Printf(&#34;%s&#34;, robots)
</pre>
		
	</div>
</div>

			
				
				<h3 id="Head">func <a href="src/pkg/net/http/client.htm#L306">Head</a></h3>
				<pre>func Head(url string) (r *Response, err error)</pre>
				<p>
Head issues a HEAD to the specified URL.  If the response is one of the
following redirect codes, Head follows the redirect after calling the
Client&#39;s CheckRedirect function.
</p>
<pre>301 (Moved Permanently)
302 (Found)
303 (See Other)
307 (Temporary Redirect)
</pre>
<p>
Head is a wrapper around DefaultClient.Head
</p>

				
			
				
				<h3 id="Post">func <a href="src/pkg/net/http/client.htm#L258">Post</a></h3>
				<pre>func Post(url string, bodyType string, body io.Reader) (r *Response, err error)</pre>
				<p>
Post issues a POST to the specified URL.
</p>
<p>
Caller should close r.Body when done reading from it.
</p>
<p>
Post is a wrapper around DefaultClient.Post
</p>

				
			
				
				<h3 id="PostForm">func <a href="src/pkg/net/http/client.htm#L284">PostForm</a></h3>
				<pre>func PostForm(url string, data url.Values) (r *Response, err error)</pre>
				<p>
PostForm issues a POST to the specified URL,
with data&#39;s keys and values urlencoded as the request body.
</p>
<p>
Caller should close r.Body when done reading from it.
</p>
<p>
PostForm is a wrapper around DefaultClient.PostForm
</p>

				
			
				
				<h3 id="ReadResponse">func <a href="src/pkg/net/http/response.htm#L94">ReadResponse</a></h3>
				<pre>func ReadResponse(r *bufio.Reader, req *Request) (resp *Response, err error)</pre>
				<p>
ReadResponse reads and returns an HTTP response from r.  The
req parameter specifies the Request that corresponds to
this Response.  Clients must call resp.Body.Close when finished
reading resp.Body.  After that call, clients can inspect
resp.Trailer to find key/value pairs included in the response
trailer.
</p>

				
			

			
				
				<h3 id="Response.Cookies">func (*Response) <a href="src/pkg/net/http/response.htm#L67">Cookies</a></h3>
				<pre>func (r *Response) Cookies() []*Cookie</pre>
				<p>
Cookies parses and returns the cookies set in the Set-Cookie headers.
</p>

				
				
			
				
				<h3 id="Response.Location">func (*Response) <a href="src/pkg/net/http/response.htm#L77">Location</a></h3>
				<pre>func (r *Response) Location() (*url.URL, error)</pre>
				<p>
Location returns the URL of the response&#39;s &#34;Location&#34; header,
if present.  Relative redirects are resolved relative to
the Response&#39;s Request.  ErrNoLocation is returned if no
Location header is present.
</p>

				
				
			
				
				<h3 id="Response.ProtoAtLeast">func (*Response) <a href="src/pkg/net/http/response.htm#L161">ProtoAtLeast</a></h3>
				<pre>func (r *Response) ProtoAtLeast(major, minor int) bool</pre>
				<p>
ProtoAtLeast returns whether the HTTP protocol used
in the response is at least major.minor.
</p>

				
				
			
				
				<h3 id="Response.Write">func (*Response) <a href="src/pkg/net/http/response.htm#L179">Write</a></h3>
				<pre>func (r *Response) Write(w io.Writer) error</pre>
				<p>
Writes the response (header, body and trailer) in wire format. This method
consults the following fields of the response:
</p>
<pre>StatusCode
ProtoMajor
ProtoMinor
RequestMethod
TransferEncoding
Trailer
Body
ContentLength
Header, values for non-canonical keys will have unpredictable behavior
</pre>

				
				
			
		
			
			
			<h2 id="ResponseWriter">type <a href="src/pkg/net/http/server.htm#L43">ResponseWriter</a></h2>
			<pre>type ResponseWriter interface {
    <span class="comment">// Header returns the header map that will be sent by WriteHeader.</span>
    <span class="comment">// Changing the header after a call to WriteHeader (or Write) has</span>
    <span class="comment">// no effect.</span>
    Header() Header

    <span class="comment">// Write writes the data to the connection as part of an HTTP reply.</span>
    <span class="comment">// If WriteHeader has not yet been called, Write calls WriteHeader(http.StatusOK)</span>
    <span class="comment">// before writing the data.  If the Header does not contain a</span>
    <span class="comment">// Content-Type line, Write adds a Content-Type set to the result of passing</span>
    <span class="comment">// the initial 512 bytes of written data to DetectContentType.</span>
    Write([]byte) (int, error)

    <span class="comment">// WriteHeader sends an HTTP response header with status code.</span>
    <span class="comment">// If WriteHeader is not called explicitly, the first call to Write</span>
    <span class="comment">// will trigger an implicit WriteHeader(http.StatusOK).</span>
    <span class="comment">// Thus explicit calls to WriteHeader are mainly used to</span>
    <span class="comment">// send error codes.</span>
    WriteHeader(int)
}</pre>
			<p>
A ResponseWriter interface is used by an HTTP handler to
construct an HTTP response.
</p>


			

			

			

			

			
		
			
			
			<h2 id="RoundTripper">type <a href="src/pkg/net/http/client.htm#L48">RoundTripper</a></h2>
			<pre>type RoundTripper interface {
    <span class="comment">// RoundTrip executes a single HTTP transaction, returning</span>
    <span class="comment">// the Response for the request req.  RoundTrip should not</span>
    <span class="comment">// attempt to interpret the response.  In particular,</span>
    <span class="comment">// RoundTrip must return err == nil if it obtained a response,</span>
    <span class="comment">// regardless of the response&#39;s HTTP status code.  A non-nil</span>
    <span class="comment">// err should be reserved for failure to obtain a response.</span>
    <span class="comment">// Similarly, RoundTrip should not attempt to handle</span>
    <span class="comment">// higher-level protocol details such as redirects,</span>
    <span class="comment">// authentication, or cookies.</span>
    <span class="comment">//</span>
    <span class="comment">// RoundTrip should not modify the request, except for</span>
    <span class="comment">// consuming the Body.  The request&#39;s URL and Header fields</span>
    <span class="comment">// are guaranteed to be initialized.</span>
    RoundTrip(*Request) (*Response, error)
}</pre>
			<p>
RoundTripper is an interface representing the ability to execute a
single HTTP transaction, obtaining the Response for a given Request.
</p>
<p>
A RoundTripper must be safe for concurrent use by multiple
goroutines.
</p>


			

			
				<pre>var DefaultTransport RoundTripper = &amp;Transport{Proxy: ProxyFromEnvironment}</pre>
				<p>
DefaultTransport is the default implementation of Transport and is
used by DefaultClient.  It establishes a new network connection for
each call to Do and uses HTTP proxies as directed by the
$HTTP_PROXY and $NO_PROXY (or $http_proxy and $no_proxy)
environment variables.
</p>

			

			

			
				
				<h3 id="NewFileTransport">func <a href="src/pkg/net/http/filetransport.htm#L20">NewFileTransport</a></h3>
				<pre>func NewFileTransport(fs FileSystem) RoundTripper</pre>
				<p>
NewFileTransport returns a new RoundTripper, serving the provided
FileSystem. The returned RoundTripper ignores the URL host in its
incoming requests, as well as most other properties of the
request.
</p>
<p>
The typical use case for NewFileTransport is to register the &#34;file&#34;
protocol with a Transport, as in:
</p>
<pre>t := &amp;http.Transport{}
t.RegisterProtocol(&#34;file&#34;, http.NewFileTransport(http.Dir(&#34;/&#34;)))
c := &amp;http.Client{Transport: t}
res, err := c.Get(&#34;file:///etc/passwd&#34;)
...
</pre>

				
			

			
		
			
			
			<h2 id="ServeMux">type <a href="src/pkg/net/http/server.htm#L828">ServeMux</a></h2>
			<pre>type ServeMux struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
ServeMux is an HTTP request multiplexer.
It matches the URL of each incoming request against a list of registered
patterns and calls the handler for the pattern that
most closely matches the URL.
</p>
<p>
Patterns named fixed, rooted paths, like &#34;/favicon.ico&#34;,
or rooted subtrees, like &#34;/images/&#34; (note the trailing slash).
Longer patterns take precedence over shorter ones, so that
if there are handlers registered for both &#34;/images/&#34;
and &#34;/images/thumbnails/&#34;, the latter handler will be
called for paths beginning &#34;/images/thumbnails/&#34; and the
former will receiver requests for any other paths in the
&#34;/images/&#34; subtree.
</p>
<p>
Patterns may optionally begin with a host name, restricting matches to
URLs on that host only.  Host-specific patterns take precedence over
general patterns, so that a handler might register for the two patterns
&#34;/codesearch&#34; and &#34;codesearch.google.com/&#34; without also taking over
requests for &#34;<a href="http://www.google.com/">http://www.google.com/</a>&#34;.
</p>
<p>
ServeMux also takes care of sanitizing the URL request path,
redirecting any request containing . or .. elements to an
equivalent .- and ..-free URL.
</p>


			

			

			

			
				
				<h3 id="NewServeMux">func <a href="src/pkg/net/http/server.htm#L839">NewServeMux</a></h3>
				<pre>func NewServeMux() *ServeMux</pre>
				<p>
NewServeMux allocates and returns a new ServeMux.
</p>

				
			

			
				
				<h3 id="ServeMux.Handle">func (*ServeMux) <a href="src/pkg/net/http/server.htm#L921">Handle</a></h3>
				<pre>func (mux *ServeMux) Handle(pattern string, handler Handler)</pre>
				<p>
Handle registers the handler for the given pattern.
If a handler already exists for pattern, Handle panics.
</p>

				
				
			
				
				<h3 id="ServeMux.HandleFunc">func (*ServeMux) <a href="src/pkg/net/http/server.htm#L947">HandleFunc</a></h3>
				<pre>func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request))</pre>
				<p>
HandleFunc registers the handler function for the given pattern.
</p>

				
				
			
				
				<h3 id="ServeMux.ServeHTTP">func (*ServeMux) <a href="src/pkg/net/http/server.htm#L909">ServeHTTP</a></h3>
				<pre>func (mux *ServeMux) ServeHTTP(w ResponseWriter, r *Request)</pre>
				<p>
ServeHTTP dispatches the request to the handler whose
pattern most closely matches the request URL.
</p>

				
				
			
		
			
			
			<h2 id="Server">type <a href="src/pkg/net/http/server.htm#L973">Server</a></h2>
			<pre>type Server struct {
    Addr           string        <span class="comment">// TCP address to listen on, &#34;:http&#34; if empty</span>
    Handler        Handler       <span class="comment">// handler to invoke, http.DefaultServeMux if nil</span>
    ReadTimeout    time.Duration <span class="comment">// maximum duration before timing out read of the request</span>
    WriteTimeout   time.Duration <span class="comment">// maximum duration before timing out write of the response</span>
    MaxHeaderBytes int           <span class="comment">// maximum size of request headers, DefaultMaxHeaderBytes if 0</span>
    TLSConfig      *tls.Config   <span class="comment">// optional TLS config, used by ListenAndServeTLS</span>
}</pre>
			<p>
A Server defines parameters for running an HTTP server.
</p>


			

			

			

			

			
				
				<h3 id="Server.ListenAndServe">func (*Server) <a href="src/pkg/net/http/server.htm#L985">ListenAndServe</a></h3>
				<pre>func (srv *Server) ListenAndServe() error</pre>
				<p>
ListenAndServe listens on the TCP network address srv.Addr and then
calls Serve to handle requests on incoming connections.  If
srv.Addr is blank, &#34;:http&#34; is used.
</p>

				
				
			
				
				<h3 id="Server.ListenAndServeTLS">func (*Server) <a href="src/pkg/net/http/server.htm#L1111">ListenAndServeTLS</a></h3>
				<pre>func (srv *Server) ListenAndServeTLS(certFile, keyFile string) error</pre>
				<p>
ListenAndServeTLS listens on the TCP network address srv.Addr and
then calls Serve to handle requests on incoming TLS connections.
</p>
<p>
Filenames containing a certificate and matching private key for
the server must be provided. If the certificate is signed by a
certificate authority, the certFile should be the concatenation
of the server&#39;s certificate followed by the CA&#39;s certificate.
</p>
<p>
If srv.Addr is blank, &#34;:https&#34; is used.
</p>

				
				
			
				
				<h3 id="Server.Serve">func (*Server) <a href="src/pkg/net/http/server.htm#L1000">Serve</a></h3>
				<pre>func (srv *Server) Serve(l net.Listener) error</pre>
				<p>
Serve accepts incoming connections on the Listener l, creating a
new service thread for each.  The service threads read requests and
then call srv.Handler to reply to them.
</p>

				
				
			
		
			
			
			<h2 id="Transport">type <a href="src/pkg/net/http/transport.htm#L33">Transport</a></h2>
			<pre>type Transport struct {

    <span class="comment">// Proxy specifies a function to return a proxy for a given</span>
    <span class="comment">// Request. If the function returns a non-nil error, the</span>
    <span class="comment">// request is aborted with the provided error.</span>
    <span class="comment">// If Proxy is nil or returns a nil *URL, no proxy is used.</span>
    Proxy func(*Request) (*url.URL, error)

    <span class="comment">// Dial specifies the dial function for creating TCP</span>
    <span class="comment">// connections.</span>
    <span class="comment">// If Dial is nil, net.Dial is used.</span>
    Dial func(net, addr string) (c net.Conn, err error)

    <span class="comment">// TLSClientConfig specifies the TLS configuration to use with</span>
    <span class="comment">// tls.Client. If nil, the default configuration is used.</span>
    TLSClientConfig *tls.Config

    DisableKeepAlives  bool
    DisableCompression bool

    <span class="comment">// MaxIdleConnsPerHost, if non-zero, controls the maximum idle</span>
    <span class="comment">// (keep-alive) to keep to keep per-host.  If zero,</span>
    <span class="comment">// DefaultMaxIdleConnsPerHost is used.</span>
    MaxIdleConnsPerHost int
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Transport is an implementation of RoundTripper that supports http,
https, and http proxies (for either http or https with CONNECT).
Transport can also cache connections for future re-use.
</p>


			

			

			

			

			
				
				<h3 id="Transport.CloseIdleConnections">func (*Transport) <a href="src/pkg/net/http/transport.htm#L178">CloseIdleConnections</a></h3>
				<pre>func (t *Transport) CloseIdleConnections()</pre>
				<p>
CloseIdleConnections closes any connections which were previously
connected from previous requests but are now sitting idle in
a &#34;keep-alive&#34; state. It does not interrupt any connections currently
in use.
</p>

				
				
			
				
				<h3 id="Transport.RegisterProtocol">func (*Transport) <a href="src/pkg/net/http/transport.htm#L159">RegisterProtocol</a></h3>
				<pre>func (t *Transport) RegisterProtocol(scheme string, rt RoundTripper)</pre>
				<p>
RegisterProtocol registers a new protocol with scheme.
The Transport will pass requests using the given scheme to rt.
It is rt&#39;s responsibility to simulate HTTP request semantics.
</p>
<p>
RegisterProtocol can be used by other packages to provide
implementations of protocol schemes like &#34;ftp&#34; or &#34;file&#34;.
</p>

				
				
			
				
				<h3 id="Transport.RoundTrip">func (*Transport) <a href="src/pkg/net/http/transport.htm#L116">RoundTrip</a></h3>
				<pre>func (t *Transport) RoundTrip(req *Request) (resp *Response, err error)</pre>
				<p>
RoundTrip implements the RoundTripper interface.
</p>

				
				
			
		
		</div>
	

	







	
	
		<h2 id="subdirectories">Subdirectories</h2>
	
	<table class="dir">
	<tr>
	<th>Name</th>
	<th>&nbsp;&nbsp;&nbsp;&nbsp;</th>
	<th style="text-align: left; width: auto">Synopsis</th>
	</tr>
			<tr>
			<td class="name"><a href="net_http_cgi.htm">cgi</a></td>
			<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
			<td style="width: auto">Package cgi implements CGI (Common Gateway Interface) as specified in RFC 3875.</td>
			</tr>
		
	
		
			<tr>
			<td class="name"><a href="net_http_fcgi.htm">fcgi</a></td>
			<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
			<td style="width: auto">Package fcgi implements the FastCGI protocol.</td>
			</tr>
		
	
		
			<tr>
			<td class="name"><a href="net_http_httptest.htm">httptest</a></td>
			<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
			<td style="width: auto">Package httptest provides utilities for HTTP testing.</td>
			</tr>
		
	
		
			<tr>
			<td class="name"><a href="net_http_httputil.htm">httputil</a></td>
			<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
			<td style="width: auto">Package httputil provides HTTP utility functions, complementing the more common ones in the net/http package.</td>
			</tr>
		
	
		
			<tr>
			<td class="name"><a href="net_http_pprof.htm">pprof</a></td>
			<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
			<td style="width: auto">Package pprof serves via its HTTP server runtime profiling data in the format expected by the pprof visualization tool.</td>
			</tr>
		
	
	</table>
	



</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
