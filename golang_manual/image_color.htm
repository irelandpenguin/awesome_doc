
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>color - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package color</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "image/color"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package color implements a basic color library.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
				<dd><a href="#variables">Variables</a></dd>
			
			
				
				<dd><a href="#RGBToYCbCr">func RGBToYCbCr(r, g, b uint8) (uint8, uint8, uint8)</a></dd>
			
				
				<dd><a href="#YCbCrToRGB">func YCbCrToRGB(y, cb, cr uint8) (uint8, uint8, uint8)</a></dd>
			
			
				
				<dd><a href="#Alpha">type Alpha</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Alpha.RGBA">func (c Alpha) RGBA() (r, g, b, a uint32)</a></dd>
				
			
				
				<dd><a href="#Alpha16">type Alpha16</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Alpha16.RGBA">func (c Alpha16) RGBA() (r, g, b, a uint32)</a></dd>
				
			
				
				<dd><a href="#Color">type Color</a></dd>
				
				
			
				
				<dd><a href="#Gray">type Gray</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Gray.RGBA">func (c Gray) RGBA() (r, g, b, a uint32)</a></dd>
				
			
				
				<dd><a href="#Gray16">type Gray16</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Gray16.RGBA">func (c Gray16) RGBA() (r, g, b, a uint32)</a></dd>
				
			
				
				<dd><a href="#Model">type Model</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#ModelFunc">func ModelFunc(f func(Color) Color) Model</a></dd>
				
				
			
				
				<dd><a href="#NRGBA">type NRGBA</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#NRGBA.RGBA">func (c NRGBA) RGBA() (r, g, b, a uint32)</a></dd>
				
			
				
				<dd><a href="#NRGBA64">type NRGBA64</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#NRGBA64.RGBA">func (c NRGBA64) RGBA() (r, g, b, a uint32)</a></dd>
				
			
				
				<dd><a href="#Palette">type Palette</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Palette.Convert">func (p Palette) Convert(c Color) Color</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Palette.Index">func (p Palette) Index(c Color) int</a></dd>
				
			
				
				<dd><a href="#RGBA">type RGBA</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#RGBA.RGBA">func (c RGBA) RGBA() (r, g, b, a uint32)</a></dd>
				
			
				
				<dd><a href="#RGBA64">type RGBA64</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#RGBA64.RGBA">func (c RGBA64) RGBA() (r, g, b, a uint32)</a></dd>
				
			
				
				<dd><a href="#YCbCr">type YCbCr</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#YCbCr.RGBA">func (c YCbCr) RGBA() (uint32, uint32, uint32, uint32)</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/image/color/color.htm">color.go</a>
			
				<a href="src/pkg/image/color/ycbcr.htm">ycbcr.go</a>
			
			</span>
			</p>
		
	
		
		
			<h2 id="variables">Variables</h2>
			
				<pre>var (
    Black       = Gray16{0}
    White       = Gray16{0xffff}
    Transparent = Alpha16{0}
    Opaque      = Alpha16{0xffff}
)</pre>
				<p>
Standard colors.
</p>

			
		
		
			
			
			<h2 id="RGBToYCbCr">func <a href="src/pkg/image/color/ycbcr.htm#L1">RGBToYCbCr</a></h2>
			<pre>func RGBToYCbCr(r, g, b uint8) (uint8, uint8, uint8)</pre>
			<p>
RGBToYCbCr converts an RGB triple to a Y&#39;CbCr triple.
</p>

			
		
			
			
			<h2 id="YCbCrToRGB">func <a href="src/pkg/image/color/ycbcr.htm#L29">YCbCrToRGB</a></h2>
			<pre>func YCbCrToRGB(y, cb, cr uint8) (uint8, uint8, uint8)</pre>
			<p>
YCbCrToRGB converts a Y&#39;CbCr triple to an RGB triple.
</p>

			
		
		
			
			
			<h2 id="Alpha">type <a href="src/pkg/image/color/color.htm#L80">Alpha</a></h2>
			<pre>type Alpha struct {
    A uint8
}</pre>
			<p>
Alpha represents an 8-bit alpha color.
</p>


			

			

			

			

			
				
				<h3 id="Alpha.RGBA">func (Alpha) <a href="src/pkg/image/color/color.htm#L84">RGBA</a></h3>
				<pre>func (c Alpha) RGBA() (r, g, b, a uint32)</pre>
				
				
				
			
		
			
			
			<h2 id="Alpha16">type <a href="src/pkg/image/color/color.htm#L91">Alpha16</a></h2>
			<pre>type Alpha16 struct {
    A uint16
}</pre>
			<p>
Alpha16 represents a 16-bit alpha color.
</p>


			

			

			

			

			
				
				<h3 id="Alpha16.RGBA">func (Alpha16) <a href="src/pkg/image/color/color.htm#L95">RGBA</a></h3>
				<pre>func (c Alpha16) RGBA() (r, g, b, a uint32)</pre>
				
				
				
			
		
			
			
			<h2 id="Color">type <a href="src/pkg/image/color/color.htm#L1">Color</a></h2>
			<pre>type Color interface {
    <span class="comment">// RGBA returns the alpha-premultiplied red, green, blue and alpha values</span>
    <span class="comment">// for the color. Each value ranges within [0, 0xFFFF], but is represented</span>
    <span class="comment">// by a uint32 so that multiplying by a blend factor up to 0xFFFF will not</span>
    <span class="comment">// overflow.</span>
    RGBA() (r, g, b, a uint32)
}</pre>
			<p>
Color can convert itself to alpha-premultiplied 16-bits per channel RGBA.
The conversion may be lossy.
</p>


			

			

			

			

			
		
			
			
			<h2 id="Gray">type <a href="src/pkg/image/color/color.htm#L101">Gray</a></h2>
			<pre>type Gray struct {
    Y uint8
}</pre>
			<p>
Gray represents an 8-bit grayscale color.
</p>


			

			

			

			

			
				
				<h3 id="Gray.RGBA">func (Gray) <a href="src/pkg/image/color/color.htm#L105">RGBA</a></h3>
				<pre>func (c Gray) RGBA() (r, g, b, a uint32)</pre>
				
				
				
			
		
			
			
			<h2 id="Gray16">type <a href="src/pkg/image/color/color.htm#L112">Gray16</a></h2>
			<pre>type Gray16 struct {
    Y uint16
}</pre>
			<p>
Gray16 represents a 16-bit grayscale color.
</p>


			

			

			

			

			
				
				<h3 id="Gray16.RGBA">func (Gray16) <a href="src/pkg/image/color/color.htm#L116">RGBA</a></h3>
				<pre>func (c Gray16) RGBA() (r, g, b, a uint32)</pre>
				
				
				
			
		
			
			
			<h2 id="Model">type <a href="src/pkg/image/color/color.htm#L123">Model</a></h2>
			<pre>type Model interface {
    Convert(c Color) Color
}</pre>
			<p>
Model can convert any Color to one from its own color model. The conversion
may be lossy.
</p>


			

			
				<pre>var (
    RGBAModel    Model = ModelFunc(rgbaModel)
    RGBA64Model  Model = ModelFunc(rgba64Model)
    NRGBAModel   Model = ModelFunc(nrgbaModel)
    NRGBA64Model Model = ModelFunc(nrgba64Model)
    AlphaModel   Model = ModelFunc(alphaModel)
    Alpha16Model Model = ModelFunc(alpha16Model)
    GrayModel    Model = ModelFunc(grayModel)
    Gray16Model  Model = ModelFunc(gray16Model)
)</pre>
				<p>
Models for the standard color types.
</p>

			
				<pre>var YCbCrModel Model = ModelFunc(yCbCrModel)</pre>
				<p>
YCbCrModel is the Model for Y&#39;CbCr colors.
</p>

			

			

			
				
				<h3 id="ModelFunc">func <a href="src/pkg/image/color/color.htm#L128">ModelFunc</a></h3>
				<pre>func ModelFunc(f func(Color) Color) Model</pre>
				<p>
ModelFunc returns a Model that invokes f to implement the conversion.
</p>

				
			

			
		
			
			
			<h2 id="NRGBA">type <a href="src/pkg/image/color/color.htm#L37">NRGBA</a></h2>
			<pre>type NRGBA struct {
    R, G, B, A uint8
}</pre>
			<p>
NRGBA represents a non-alpha-premultiplied 32-bit color.
</p>


			

			

			

			

			
				
				<h3 id="NRGBA.RGBA">func (NRGBA) <a href="src/pkg/image/color/color.htm#L41">RGBA</a></h3>
				<pre>func (c NRGBA) RGBA() (r, g, b, a uint32)</pre>
				
				
				
			
		
			
			
			<h2 id="NRGBA64">type <a href="src/pkg/image/color/color.htm#L61">NRGBA64</a></h2>
			<pre>type NRGBA64 struct {
    R, G, B, A uint16
}</pre>
			<p>
NRGBA64 represents a non-alpha-premultiplied 64-bit color,
having 16 bits for each of red, green, blue and alpha.
</p>


			

			

			

			

			
				
				<h3 id="NRGBA64.RGBA">func (NRGBA64) <a href="src/pkg/image/color/color.htm#L65">RGBA</a></h3>
				<pre>func (c NRGBA64) RGBA() (r, g, b, a uint32)</pre>
				
				
				
			
		
			
			
			<h2 id="Palette">type <a href="src/pkg/image/color/color.htm#L244">Palette</a></h2>
			<pre>type Palette []Color</pre>
			<p>
Palette is a palette of colors.
</p>


			

			

			

			

			
				
				<h3 id="Palette.Convert">func (Palette) <a href="src/pkg/image/color/color.htm#L254">Convert</a></h3>
				<pre>func (p Palette) Convert(c Color) Color</pre>
				<p>
Convert returns the palette color closest to c in Euclidean R,G,B space.
</p>

				
				
			
				
				<h3 id="Palette.Index">func (Palette) <a href="src/pkg/image/color/color.htm#L263">Index</a></h3>
				<pre>func (p Palette) Index(c Color) int</pre>
				<p>
Index returns the index of the palette color closest to c in Euclidean
R,G,B space.
</p>

				
				
			
		
			
			
			<h2 id="RGBA">type <a href="src/pkg/image/color/color.htm#L10">RGBA</a></h2>
			<pre>type RGBA struct {
    R, G, B, A uint8
}</pre>
			<p>
RGBA represents a traditional 32-bit alpha-premultiplied color,
having 8 bits for each of red, green, blue and alpha.
</p>


			

			

			

			

			
				
				<h3 id="RGBA.RGBA">func (RGBA) <a href="src/pkg/image/color/color.htm#L14">RGBA</a></h3>
				<pre>func (c RGBA) RGBA() (r, g, b, a uint32)</pre>
				
				
				
			
		
			
			
			<h2 id="RGBA64">type <a href="src/pkg/image/color/color.htm#L28">RGBA64</a></h2>
			<pre>type RGBA64 struct {
    R, G, B, A uint16
}</pre>
			<p>
RGBA64 represents a 64-bit alpha-premultiplied color,
having 16 bits for each of red, green, blue and alpha.
</p>


			

			

			

			

			
				
				<h3 id="RGBA64.RGBA">func (RGBA64) <a href="src/pkg/image/color/color.htm#L32">RGBA</a></h3>
				<pre>func (c RGBA64) RGBA() (r, g, b, a uint32)</pre>
				
				
				
			
		
			
			
			<h2 id="YCbCr">type <a href="src/pkg/image/color/ycbcr.htm#L70">YCbCr</a></h2>
			<pre>type YCbCr struct {
    Y, Cb, Cr uint8
}</pre>
			<p>
YCbCr represents a fully opaque 24-bit Y&#39;CbCr color, having 8 bits each for
one luma and two chroma components.
</p>
<p>
JPEG, VP8, the MPEG family and other codecs use this color model. Such
codecs often use the terms YUV and Y&#39;CbCr interchangeably, but strictly
speaking, the term YUV applies only to analog video signals, and Y&#39; (luma)
is Y (luminance) after applying gamma correction.
</p>
<p>
Conversion between RGB and Y&#39;CbCr is lossy and there are multiple, slightly
different formulae for converting between the two. This package follows
the JFIF specification at <a href="http://www.w3.org/Graphics/JPEG/jfif3.pdf">http://www.w3.org/Graphics/JPEG/jfif3.pdf</a>.
</p>


			

			

			

			

			
				
				<h3 id="YCbCr.RGBA">func (YCbCr) <a href="src/pkg/image/color/ycbcr.htm#L74">RGBA</a></h3>
				<pre>func (c YCbCr) RGBA() (uint32, uint32, uint32, uint32)</pre>
				
				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
