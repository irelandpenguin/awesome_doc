
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>big - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package big</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "math/big"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
				<dd><a href="#examples">Examples</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package big implements multi-precision arithmetic (big numbers).
The following numeric types are supported:
</p>
<pre>- Int	signed integers
- Rat	rational numbers
</pre>
<p>
Methods are typically of the form:
</p>
<pre>func (z *Int) Op(x, y *Int) *Int	(similar for *Rat)
</pre>
<p>
and implement operations z = x Op y with the result as receiver; if it
is one of the operands it may be overwritten (and its memory reused).
To enable chaining of operations, the result is also returned. Methods
returning a result other than *Int or *Rat take one of the operands as
the receiver.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
				<dd><a href="#constants">Constants</a></dd>
			
			
			
			
				
				<dd><a href="#Int">type Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewInt">func NewInt(x int64) *Int</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Abs">func (z *Int) Abs(x *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Add">func (z *Int) Add(x, y *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.And">func (z *Int) And(x, y *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.AndNot">func (z *Int) AndNot(x, y *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Binomial">func (z *Int) Binomial(n, k int64) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Bit">func (x *Int) Bit(i int) uint</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.BitLen">func (x *Int) BitLen() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Bits">func (x *Int) Bits() []Word</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Bytes">func (x *Int) Bytes() []byte</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Cmp">func (x *Int) Cmp(y *Int) (r int)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Div">func (z *Int) Div(x, y *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.DivMod">func (z *Int) DivMod(x, y, m *Int) (*Int, *Int)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Exp">func (z *Int) Exp(x, y, m *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Format">func (x *Int) Format(s fmt.State, ch rune)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.GCD">func (z *Int) GCD(x, y, a, b *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.GobDecode">func (z *Int) GobDecode(buf []byte) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.GobEncode">func (x *Int) GobEncode() ([]byte, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Int64">func (x *Int) Int64() int64</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Lsh">func (z *Int) Lsh(x *Int, n uint) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Mod">func (z *Int) Mod(x, y *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.ModInverse">func (z *Int) ModInverse(g, p *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Mul">func (z *Int) Mul(x, y *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.MulRange">func (z *Int) MulRange(a, b int64) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Neg">func (z *Int) Neg(x *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Not">func (z *Int) Not(x *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Or">func (z *Int) Or(x, y *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.ProbablyPrime">func (x *Int) ProbablyPrime(n int) bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Quo">func (z *Int) Quo(x, y *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.QuoRem">func (z *Int) QuoRem(x, y, r *Int) (*Int, *Int)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Rand">func (z *Int) Rand(rnd *rand.Rand, n *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Rem">func (z *Int) Rem(x, y *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Rsh">func (z *Int) Rsh(x *Int, n uint) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Scan">func (z *Int) Scan(s fmt.ScanState, ch rune) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Set">func (z *Int) Set(x *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.SetBit">func (z *Int) SetBit(x *Int, i int, b uint) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.SetBits">func (z *Int) SetBits(abs []Word) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.SetBytes">func (z *Int) SetBytes(buf []byte) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.SetInt64">func (z *Int) SetInt64(x int64) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.SetString">func (z *Int) SetString(s string, base int) (*Int, bool)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Sign">func (x *Int) Sign() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.String">func (x *Int) String() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Sub">func (z *Int) Sub(x, y *Int) *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Int.Xor">func (z *Int) Xor(x, y *Int) *Int</a></dd>
				
			
				
				<dd><a href="#Rat">type Rat</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewRat">func NewRat(a, b int64) *Rat</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.Abs">func (z *Rat) Abs(x *Rat) *Rat</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.Add">func (z *Rat) Add(x, y *Rat) *Rat</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.Cmp">func (x *Rat) Cmp(y *Rat) int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.Denom">func (x *Rat) Denom() *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.FloatString">func (x *Rat) FloatString(prec int) string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.GobDecode">func (z *Rat) GobDecode(buf []byte) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.GobEncode">func (x *Rat) GobEncode() ([]byte, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.Inv">func (z *Rat) Inv(x *Rat) *Rat</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.IsInt">func (x *Rat) IsInt() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.Mul">func (z *Rat) Mul(x, y *Rat) *Rat</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.Neg">func (z *Rat) Neg(x *Rat) *Rat</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.Num">func (x *Rat) Num() *Int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.Quo">func (z *Rat) Quo(x, y *Rat) *Rat</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.RatString">func (x *Rat) RatString() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.Scan">func (z *Rat) Scan(s fmt.ScanState, ch rune) error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.Set">func (z *Rat) Set(x *Rat) *Rat</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.SetFrac">func (z *Rat) SetFrac(a, b *Int) *Rat</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.SetFrac64">func (z *Rat) SetFrac64(a, b int64) *Rat</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.SetInt">func (z *Rat) SetInt(x *Int) *Rat</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.SetInt64">func (z *Rat) SetInt64(x int64) *Rat</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.SetString">func (z *Rat) SetString(s string) (*Rat, bool)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.Sign">func (x *Rat) Sign() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.String">func (x *Rat) String() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Rat.Sub">func (z *Rat) Sub(x, y *Rat) *Rat</a></dd>
				
			
				
				<dd><a href="#Word">type Word</a></dd>
				
				
			
			
		</dl>

		
			<h4 id="examples">Examples</h4>
			<dl>
			
			<dd><a class="exampleLink" href="#example_Int_Scan">Int.Scan</a></dd>
			
			<dd><a class="exampleLink" href="#example_Int_SetString">Int.SetString</a></dd>
			
			<dd><a class="exampleLink" href="#example_Rat_Scan">Rat.Scan</a></dd>
			
			<dd><a class="exampleLink" href="#example_Rat_SetString">Rat.SetString</a></dd>
			
			</dl>
		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/math/big/arith.htm">arith.go</a>
			
				<a href="src/pkg/math/big/arith_decl.htm">arith_decl.go</a>
			
				<a href="src/pkg/math/big/int.htm">int.go</a>
			
				<a href="src/pkg/math/big/nat.htm">nat.go</a>
			
				<a href="src/pkg/math/big/rat.htm">rat.go</a>
			
			</span>
			</p>
		
	
		
			<h2 id="constants">Constants</h2>
			
				<pre>const MaxBase = &#39;z&#39; - &#39;a&#39; + 10 + 1 <span class="comment">// = hexValue(&#39;z&#39;) + 1</span>
</pre>
				<p>
MaxBase is the largest number base accepted for string conversions.
</p>

			
		
		
		
		
			
			
			<h2 id="Int">type <a href="src/pkg/math/big/int.htm#L9">Int</a></h2>
			<pre>type Int struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
An Int represents a signed multi-precision integer.
The zero value for an Int represents the value 0.
</p>


			

			

			

			
				
				<h3 id="NewInt">func <a href="src/pkg/math/big/int.htm#L45">NewInt</a></h3>
				<pre>func NewInt(x int64) *Int</pre>
				<p>
NewInt allocates and returns a new Int set to x.
</p>

				
			

			
				
				<h3 id="Int.Abs">func (*Int) <a href="src/pkg/math/big/int.htm#L79">Abs</a></h3>
				<pre>func (z *Int) Abs(x *Int) *Int</pre>
				<p>
Abs sets z to |x| (the absolute value of x) and returns z.
</p>

				
				
			
				
				<h3 id="Int.Add">func (*Int) <a href="src/pkg/math/big/int.htm#L93">Add</a></h3>
				<pre>func (z *Int) Add(x, y *Int) *Int</pre>
				<p>
Add sets z to the sum x+y and returns z.
</p>

				
				
			
				
				<h3 id="Int.And">func (*Int) <a href="src/pkg/math/big/int.htm#L722">And</a></h3>
				<pre>func (z *Int) And(x, y *Int) *Int</pre>
				<p>
And sets z = x &amp; y and returns z.
</p>

				
				
			
				
				<h3 id="Int.AndNot">func (*Int) <a href="src/pkg/math/big/int.htm#L752">AndNot</a></h3>
				<pre>func (z *Int) AndNot(x, y *Int) *Int</pre>
				<p>
AndNot sets z = x &amp;^ y and returns z.
</p>

				
				
			
				
				<h3 id="Int.Binomial">func (*Int) <a href="src/pkg/math/big/int.htm#L169">Binomial</a></h3>
				<pre>func (z *Int) Binomial(n, k int64) *Int</pre>
				<p>
Binomial sets z to the binomial coefficient of (n, k) and returns z.
</p>

				
				
			
				
				<h3 id="Int.Bit">func (*Int) <a href="src/pkg/math/big/int.htm#L689">Bit</a></h3>
				<pre>func (x *Int) Bit(i int) uint</pre>
				<p>
Bit returns the value of the i&#39;th bit of x. That is, it
returns (x&gt;&gt;i)&amp;1. The bit index i must be &gt;= 0.
</p>

				
				
			
				
				<h3 id="Int.BitLen">func (*Int) <a href="src/pkg/math/big/int.htm#L550">BitLen</a></h3>
				<pre>func (x *Int) BitLen() int</pre>
				<p>
BitLen returns the length of the absolute value of z in bits.
The bit length of 0 is 0.
</p>

				
				
			
				
				<h3 id="Int.Bits">func (*Int) <a href="src/pkg/math/big/int.htm#L63">Bits</a></h3>
				<pre>func (x *Int) Bits() []Word</pre>
				<p>
Bits provides raw (unchecked but fast) access to x by returning its
absolute value as a little-endian Word slice. The result and x share
the same underlying array.
Bits is intended to support implementation of missing low-level Int
functionality outside this package; it should be avoided otherwise.
</p>

				
				
			
				
				<h3 id="Int.Bytes">func (*Int) <a href="src/pkg/math/big/int.htm#L543">Bytes</a></h3>
				<pre>func (x *Int) Bytes() []byte</pre>
				<p>
Bytes returns the absolute value of z as a big-endian byte slice.
</p>

				
				
			
				
				<h3 id="Int.Cmp">func (*Int) <a href="src/pkg/math/big/int.htm#L288">Cmp</a></h3>
				<pre>func (x *Int) Cmp(y *Int) (r int)</pre>
				<p>
Cmp compares x and y and returns:
</p>
<pre>-1 if x &lt;  y
 0 if x == y
+1 if x &gt;  y
</pre>

				
				
			
				
				<h3 id="Int.Div">func (*Int) <a href="src/pkg/math/big/int.htm#L215">Div</a></h3>
				<pre>func (z *Int) Div(x, y *Int) *Int</pre>
				<p>
Div sets z to the quotient x/y for y != 0 and returns z.
If y == 0, a division-by-zero run-time panic occurs.
Div implements Euclidean division (unlike Go); see DivMod for more details.
</p>

				
				
			
				
				<h3 id="Int.DivMod">func (*Int) <a href="src/pkg/math/big/int.htm#L264">DivMod</a></h3>
				<pre>func (z *Int) DivMod(x, y, m *Int) (*Int, *Int)</pre>
				<p>
DivMod sets z to the quotient x div y and m to the modulus x mod y
and returns the pair (z, m) for y != 0.
If y == 0, a division-by-zero run-time panic occurs.
</p>
<p>
DivMod implements Euclidean division and modulus (unlike Go):
</p>
<pre>q = x div y  such that
m = x - y*q  with 0 &lt;= m &lt; |q|
</pre>
<p>
(See Raymond T. Boute, &ldquo;The Euclidean definition of the functions
div and mod&rdquo;. ACM Transactions on Programming Languages and
Systems (TOPLAS), 14(2):127-144, New York, NY, USA, 4/1992.
ACM press.)
See QuoRem for T-division and modulus (like Go).
</p>

				
				
			
				
				<h3 id="Int.Exp">func (*Int) <a href="src/pkg/math/big/int.htm#L556">Exp</a></h3>
				<pre>func (z *Int) Exp(x, y, m *Int) *Int</pre>
				<p>
Exp sets z = x**y mod m and returns z. If m is nil, z = x**y.
See Knuth, volume 2, section 4.6.3.
</p>

				
				
			
				
				<h3 id="Int.Format">func (*Int) <a href="src/pkg/math/big/int.htm#L354">Format</a></h3>
				<pre>func (x *Int) Format(s fmt.State, ch rune)</pre>
				<p>
Format is a support routine for fmt.Formatter. It accepts
the formats &#39;b&#39; (binary), &#39;o&#39; (octal), &#39;d&#39; (decimal), &#39;x&#39;
(lowercase hexadecimal), and &#39;X&#39; (uppercase hexadecimal).
Also supported are the full suite of package fmt&#39;s format
verbs for integral types, including &#39;+&#39;, &#39;-&#39;, and &#39; &#39;
for sign control, &#39;#&#39; for leading zero in octal and for
hexadecimal, a leading &#34;0x&#34; or &#34;0X&#34; for &#34;%#x&#34; and &#34;%#X&#34;
respectively, specification of minimum digits precision,
output field width, space or zero padding, and left or
right justification.
</p>

				
				
			
				
				<h3 id="Int.GCD">func (*Int) <a href="src/pkg/math/big/int.htm#L578">GCD</a></h3>
				<pre>func (z *Int) GCD(x, y, a, b *Int) *Int</pre>
				<p>
GCD sets z to the greatest common divisor of a and b, which must be
positive numbers, and returns z.
If x and y are not nil, GCD sets x and y such that z = a*x + b*y.
If either a or b is not positive, GCD sets z = x = y = 0.
</p>

				
				
			
				
				<h3 id="Int.GobDecode">func (*Int) <a href="src/pkg/math/big/int.htm#L875">GobDecode</a></h3>
				<pre>func (z *Int) GobDecode(buf []byte) error</pre>
				<p>
GobDecode implements the gob.GobDecoder interface.
</p>

				
				
			
				
				<h3 id="Int.GobEncode">func (*Int) <a href="src/pkg/math/big/int.htm#L863">GobEncode</a></h3>
				<pre>func (x *Int) GobEncode() ([]byte, error)</pre>
				<p>
GobEncode implements the gob.GobEncoder interface.
</p>

				
				
			
				
				<h3 id="Int.Int64">func (*Int) <a href="src/pkg/math/big/int.htm#L498">Int64</a></h3>
				<pre>func (x *Int) Int64() int64</pre>
				<p>
Int64 returns the int64 representation of x.
If x cannot be represented in an int64, the result is undefined.
</p>

				
				
			
				
				<h3 id="Int.Lsh">func (*Int) <a href="src/pkg/math/big/int.htm#L665">Lsh</a></h3>
				<pre>func (z *Int) Lsh(x *Int, n uint) *Int</pre>
				<p>
Lsh sets z = x &lt;&lt; n and returns z.
</p>

				
				
			
				
				<h3 id="Int.Mod">func (*Int) <a href="src/pkg/math/big/int.htm#L232">Mod</a></h3>
				<pre>func (z *Int) Mod(x, y *Int) *Int</pre>
				<p>
Mod sets z to the modulus x%y for y != 0 and returns z.
If y == 0, a division-by-zero run-time panic occurs.
Mod implements Euclidean modulus (unlike Go); see DivMod for more details.
</p>

				
				
			
				
				<h3 id="Int.ModInverse">func (*Int) <a href="src/pkg/math/big/int.htm#L653">ModInverse</a></h3>
				<pre>func (z *Int) ModInverse(g, p *Int) *Int</pre>
				<p>
ModInverse sets z to the multiplicative inverse of g in the group ?/p? (where
p is a prime) and returns z.
</p>

				
				
			
				
				<h3 id="Int.Mul">func (*Int) <a href="src/pkg/math/big/int.htm#L135">Mul</a></h3>
				<pre>func (z *Int) Mul(x, y *Int) *Int</pre>
				<p>
Mul sets z to the product x*y and returns z.
</p>

				
				
			
				
				<h3 id="Int.MulRange">func (*Int) <a href="src/pkg/math/big/int.htm#L148">MulRange</a></h3>
				<pre>func (z *Int) MulRange(a, b int64) *Int</pre>
				<p>
MulRange sets z to the product of all integers
in the range [a, b] inclusively and returns z.
If a &gt; b (empty range), the result is 1.
</p>

				
				
			
				
				<h3 id="Int.Neg">func (*Int) <a href="src/pkg/math/big/int.htm#L86">Neg</a></h3>
				<pre>func (z *Int) Neg(x *Int) *Int</pre>
				<p>
Neg sets z to -x and returns z.
</p>

				
				
			
				
				<h3 id="Int.Not">func (*Int) <a href="src/pkg/math/big/int.htm#L845">Not</a></h3>
				<pre>func (z *Int) Not(x *Int) *Int</pre>
				<p>
Not sets z = ^x and returns z.
</p>

				
				
			
				
				<h3 id="Int.Or">func (*Int) <a href="src/pkg/math/big/int.htm#L785">Or</a></h3>
				<pre>func (z *Int) Or(x, y *Int) *Int</pre>
				<p>
Or sets z = x | y and returns z.
</p>

				
				
			
				
				<h3 id="Int.ProbablyPrime">func (*Int) <a href="src/pkg/math/big/int.htm#L636">ProbablyPrime</a></h3>
				<pre>func (x *Int) ProbablyPrime(n int) bool</pre>
				<p>
ProbablyPrime performs n Miller-Rabin tests to check whether x is prime.
If it returns true, x is prime with probability 1 - 1/4^n.
If it returns false, x is not prime.
</p>

				
				
			
				
				<h3 id="Int.Quo">func (*Int) <a href="src/pkg/math/big/int.htm#L179">Quo</a></h3>
				<pre>func (z *Int) Quo(x, y *Int) *Int</pre>
				<p>
Quo sets z to the quotient x/y for y != 0 and returns z.
If y == 0, a division-by-zero run-time panic occurs.
Quo implements truncated division (like Go); see QuoRem for more details.
</p>

				
				
			
				
				<h3 id="Int.QuoRem">func (*Int) <a href="src/pkg/math/big/int.htm#L206">QuoRem</a></h3>
				<pre>func (z *Int) QuoRem(x, y, r *Int) (*Int, *Int)</pre>
				<p>
QuoRem sets z to the quotient x/y and r to the remainder x%y
and returns the pair (z, r) for y != 0.
If y == 0, a division-by-zero run-time panic occurs.
</p>
<p>
QuoRem implements T-division and modulus (like Go):
</p>
<pre>q = x/y      with the result truncated to zero
r = x - y*q
</pre>
<p>
(See Daan Leijen, &ldquo;Division and Modulus for Computer Scientists&rdquo;.)
See DivMod for Euclidean division and modulus (unlike Go).
</p>

				
				
			
				
				<h3 id="Int.Rand">func (*Int) <a href="src/pkg/math/big/int.htm#L641">Rand</a></h3>
				<pre>func (z *Int) Rand(rnd *rand.Rand, n *Int) *Int</pre>
				<p>
Rand sets z to a pseudo-random number in [0, n) and returns z.
</p>

				
				
			
				
				<h3 id="Int.Rem">func (*Int) <a href="src/pkg/math/big/int.htm#L188">Rem</a></h3>
				<pre>func (z *Int) Rem(x, y *Int) *Int</pre>
				<p>
Rem sets z to the remainder x%y for y != 0 and returns z.
If y == 0, a division-by-zero run-time panic occurs.
Rem implements truncated modulus (like Go); see QuoRem for more details.
</p>

				
				
			
				
				<h3 id="Int.Rsh">func (*Int) <a href="src/pkg/math/big/int.htm#L672">Rsh</a></h3>
				<pre>func (z *Int) Rsh(x *Int, n uint) *Int</pre>
				<p>
Rsh sets z = x &gt;&gt; n and returns z.
</p>

				
				
			
				
				<h3 id="Int.Scan">func (*Int) <a href="src/pkg/math/big/int.htm#L475">Scan</a></h3>
				<pre>func (z *Int) Scan(s fmt.ScanState, ch rune) error</pre>
				<p>
Scan is a support routine for fmt.Scanner; it sets z to the value of
the scanned number. It accepts the formats &#39;b&#39; (binary), &#39;o&#39; (octal),
&#39;d&#39; (decimal), &#39;x&#39; (lowercase hexadecimal), and &#39;X&#39; (uppercase hexadecimal).
</p>

				
				<div id="example_Int_Scan" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code"><span class="comment">// The Scan function is rarely used directly;</span>
<span class="comment">// the fmt package recognizes it as an implementation of fmt.Scanner.</span>
i := new(big.Int)
_, err := fmt.Sscan(&#34;18446744073709551617&#34;, i)
if err != nil {
    log.Println(&#34;error scanning value:&#34;, err)
} else {
    fmt.Println(i)
}
<span class="comment"></pre>
		
		<p>Output:</p>
		<pre class="output">18446744073709551617</pre>
		
	</div>
</div>

			
				
				<h3 id="Int.Set">func (*Int) <a href="src/pkg/math/big/int.htm#L50">Set</a></h3>
				<pre>func (z *Int) Set(x *Int) *Int</pre>
				<p>
Set sets z to x and returns z.
</p>

				
				
			
				
				<h3 id="Int.SetBit">func (*Int) <a href="src/pkg/math/big/int.htm#L705">SetBit</a></h3>
				<pre>func (z *Int) SetBit(x *Int, i int, b uint) *Int</pre>
				<p>
SetBit sets z to x, with x&#39;s i&#39;th bit set to b (0 or 1).
That is, if bit is 1 SetBit sets z = x | (1 &lt;&lt; i);
if bit is 0 it sets z = x &amp;^ (1 &lt;&lt; i). If bit is not 0 or 1,
SetBit will panic.
</p>

				
				
			
				
				<h3 id="Int.SetBits">func (*Int) <a href="src/pkg/math/big/int.htm#L72">SetBits</a></h3>
				<pre>func (z *Int) SetBits(abs []Word) *Int</pre>
				<p>
SetBits provides raw (unchecked but fast) access to z by setting its
value to abs, interpreted as a little-endian Word slice, and returning
z. The result and abs share the same underlying array.
SetBits is intended to support implementation of missing low-level Int
functionality outside this package; it should be avoided otherwise.
</p>

				
				
			
				
				<h3 id="Int.SetBytes">func (*Int) <a href="src/pkg/math/big/int.htm#L536">SetBytes</a></h3>
				<pre>func (z *Int) SetBytes(buf []byte) *Int</pre>
				<p>
SetBytes interprets buf as the bytes of a big-endian unsigned
integer, sets z to that value, and returns z.
</p>

				
				
			
				
				<h3 id="Int.SetInt64">func (*Int) <a href="src/pkg/math/big/int.htm#L33">SetInt64</a></h3>
				<pre>func (z *Int) SetInt64(x int64) *Int</pre>
				<p>
SetInt64 sets z to x and returns z.
</p>

				
				
			
				
				<h3 id="Int.SetString">func (*Int) <a href="src/pkg/math/big/int.htm#L521">SetString</a></h3>
				<pre>func (z *Int) SetString(s string, base int) (*Int, bool)</pre>
				<p>
SetString sets z to the value of s, interpreted in the given base,
and returns z and a boolean indicating success. If SetString fails,
the value of z is undefined but the returned value is nil.
</p>
<p>
The base argument must be 0 or a value from 2 through MaxBase. If the base
is 0, the string prefix determines the actual conversion base. A prefix of
&ldquo;0x&rdquo; or &ldquo;0X&rdquo; selects base 16; the &ldquo;0&rdquo; prefix selects base 8, and a
&ldquo;0b&rdquo; or &ldquo;0B&rdquo; prefix selects base 2. Otherwise the selected base is 10.
</p>

				
				<div id="example_Int_SetString" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">i := new(big.Int)
i.SetString(&#34;644&#34;, 8) <span class="comment">// octal</span>
fmt.Println(i)
<span class="comment"></pre>
		
		<p>Output:</p>
		<pre class="output">420</pre>
		
	</div>
</div>

			
				
				<h3 id="Int.Sign">func (*Int) <a href="src/pkg/math/big/int.htm#L22">Sign</a></h3>
				<pre>func (x *Int) Sign() int</pre>
				<p>
Sign returns:
</p>
<pre>-1 if x &lt;  0
 0 if x == 0
+1 if x &gt;  0
</pre>

				
				
			
				
				<h3 id="Int.String">func (*Int) <a href="src/pkg/math/big/int.htm#L307">String</a></h3>
				<pre>func (x *Int) String() string</pre>
				
				
				
			
				
				<h3 id="Int.Sub">func (*Int) <a href="src/pkg/math/big/int.htm#L114">Sub</a></h3>
				<pre>func (z *Int) Sub(x, y *Int) *Int</pre>
				<p>
Sub sets z to the difference x-y and returns z.
</p>

				
				
			
				
				<h3 id="Int.Xor">func (*Int) <a href="src/pkg/math/big/int.htm#L815">Xor</a></h3>
				<pre>func (z *Int) Xor(x, y *Int) *Int</pre>
				<p>
Xor sets z = x ^ y and returns z.
</p>

				
				
			
		
			
			
			<h2 id="Rat">type <a href="src/pkg/math/big/rat.htm#L8">Rat</a></h2>
			<pre>type Rat struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A Rat represents a quotient a/b of arbitrary precision.
The zero value for a Rat represents the value 0.
</p>


			

			

			

			
				
				<h3 id="NewRat">func <a href="src/pkg/math/big/rat.htm#L14">NewRat</a></h3>
				<pre>func NewRat(a, b int64) *Rat</pre>
				<p>
NewRat creates a new Rat with numerator a and denominator b.
</p>

				
			

			
				
				<h3 id="Rat.Abs">func (*Rat) <a href="src/pkg/math/big/rat.htm#L71">Abs</a></h3>
				<pre>func (z *Rat) Abs(x *Rat) *Rat</pre>
				<p>
Abs sets z to |x| (the absolute value of x) and returns z.
</p>

				
				
			
				
				<h3 id="Rat.Add">func (*Rat) <a href="src/pkg/math/big/rat.htm#L204">Add</a></h3>
				<pre>func (z *Rat) Add(x, y *Rat) *Rat</pre>
				<p>
Add sets z to the sum x+y and returns z.
</p>

				
				
			
				
				<h3 id="Rat.Cmp">func (*Rat) <a href="src/pkg/math/big/rat.htm#L199">Cmp</a></h3>
				<pre>func (x *Rat) Cmp(y *Rat) int</pre>
				<p>
Cmp compares x and y and returns:
</p>
<pre>-1 if x &lt;  y
 0 if x == y
+1 if x &gt;  y
</pre>

				
				
			
				
				<h3 id="Rat.Denom">func (*Rat) <a href="src/pkg/math/big/rat.htm#L127">Denom</a></h3>
				<pre>func (x *Rat) Denom() *Int</pre>
				<p>
Denom returns the denominator of x; it is always &gt; 0.
The result is a reference to x&#39;s denominator; it
may change if a new value is assigned to x.
</p>

				
				
			
				
				<h3 id="Rat.FloatString">func (*Rat) <a href="src/pkg/math/big/rat.htm#L340">FloatString</a></h3>
				<pre>func (x *Rat) FloatString(prec int) string</pre>
				<p>
FloatString returns a string representation of z in decimal form with prec
digits of precision after the decimal point and the last digit rounded.
</p>

				
				
			
				
				<h3 id="Rat.GobDecode">func (*Rat) <a href="src/pkg/math/big/rat.htm#L408">GobDecode</a></h3>
				<pre>func (z *Rat) GobDecode(buf []byte) error</pre>
				<p>
GobDecode implements the gob.GobDecoder interface.
</p>

				
				
			
				
				<h3 id="Rat.GobEncode">func (*Rat) <a href="src/pkg/math/big/rat.htm#L388">GobEncode</a></h3>
				<pre>func (x *Rat) GobEncode() ([]byte, error)</pre>
				<p>
GobEncode implements the gob.GobEncoder interface.
</p>

				
				
			
				
				<h3 id="Rat.Inv">func (*Rat) <a href="src/pkg/math/big/rat.htm#L85">Inv</a></h3>
				<pre>func (z *Rat) Inv(x *Rat) *Rat</pre>
				<p>
Inv sets z to 1/x and returns z.
</p>

				
				
			
				
				<h3 id="Rat.IsInt">func (*Rat) <a href="src/pkg/math/big/rat.htm#L113">IsInt</a></h3>
				<pre>func (x *Rat) IsInt() bool</pre>
				<p>
IsInt returns true if the denominator of x is 1.
</p>

				
				
			
				
				<h3 id="Rat.Mul">func (*Rat) <a href="src/pkg/math/big/rat.htm#L222">Mul</a></h3>
				<pre>func (z *Rat) Mul(x, y *Rat) *Rat</pre>
				<p>
Mul sets z to the product x*y and returns z.
</p>

				
				
			
				
				<h3 id="Rat.Neg">func (*Rat) <a href="src/pkg/math/big/rat.htm#L78">Neg</a></h3>
				<pre>func (z *Rat) Neg(x *Rat) *Rat</pre>
				<p>
Neg sets z to -x and returns z.
</p>

				
				
			
				
				<h3 id="Rat.Num">func (*Rat) <a href="src/pkg/math/big/rat.htm#L120">Num</a></h3>
				<pre>func (x *Rat) Num() *Int</pre>
				<p>
Num returns the numerator of x; it may be &lt;= 0.
The result is a reference to x&#39;s numerator; it
may change if a new value is assigned to x.
</p>

				
				
			
				
				<h3 id="Rat.Quo">func (*Rat) <a href="src/pkg/math/big/rat.htm#L230">Quo</a></h3>
				<pre>func (z *Rat) Quo(x, y *Rat) *Rat</pre>
				<p>
Quo sets z to the quotient x/y and returns z.
If y == 0, a division-by-zero run-time panic occurs.
</p>

				
				
			
				
				<h3 id="Rat.RatString">func (*Rat) <a href="src/pkg/math/big/rat.htm#L331">RatString</a></h3>
				<pre>func (x *Rat) RatString() string</pre>
				<p>
RatString returns a string representation of z in the form &#34;a/b&#34; if b != 1,
and in the form &#34;a&#34; if b == 1.
</p>

				
				
			
				
				<h3 id="Rat.Scan">func (*Rat) <a href="src/pkg/math/big/rat.htm#L248">Scan</a></h3>
				<pre>func (z *Rat) Scan(s fmt.ScanState, ch rune) error</pre>
				<p>
Scan is a support routine for fmt.Scanner. It accepts the formats
&#39;e&#39;, &#39;E&#39;, &#39;f&#39;, &#39;F&#39;, &#39;g&#39;, &#39;G&#39;, and &#39;v&#39;. All formats are equivalent.
</p>

				
				<div id="example_Rat_Scan" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code"><span class="comment">// The Scan function is rarely used directly;</span>
<span class="comment">// the fmt package recognizes it as an implementation of fmt.Scanner.</span>
r := new(big.Rat)
_, err := fmt.Sscan(&#34;1.5000&#34;, r)
if err != nil {
    log.Println(&#34;error scanning value:&#34;, err)
} else {
    fmt.Println(r)
}
<span class="comment"></pre>
		
		<p>Output:</p>
		<pre class="output">3/2</pre>
		
	</div>
</div>

			
				
				<h3 id="Rat.Set">func (*Rat) <a href="src/pkg/math/big/rat.htm#L62">Set</a></h3>
				<pre>func (z *Rat) Set(x *Rat) *Rat</pre>
				<p>
Set sets z to x (by making a copy of x) and returns z.
</p>

				
				
			
				
				<h3 id="Rat.SetFrac">func (*Rat) <a href="src/pkg/math/big/rat.htm#L19">SetFrac</a></h3>
				<pre>func (z *Rat) SetFrac(a, b *Int) *Rat</pre>
				<p>
SetFrac sets z to a/b and returns z.
</p>

				
				
			
				
				<h3 id="Rat.SetFrac64">func (*Rat) <a href="src/pkg/math/big/rat.htm#L34">SetFrac64</a></h3>
				<pre>func (z *Rat) SetFrac64(a, b int64) *Rat</pre>
				<p>
SetFrac64 sets z to a/b and returns z.
</p>

				
				
			
				
				<h3 id="Rat.SetInt">func (*Rat) <a href="src/pkg/math/big/rat.htm#L48">SetInt</a></h3>
				<pre>func (z *Rat) SetInt(x *Int) *Rat</pre>
				<p>
SetInt sets z to x (by making a copy of x) and returns z.
</p>

				
				
			
				
				<h3 id="Rat.SetInt64">func (*Rat) <a href="src/pkg/math/big/rat.htm#L55">SetInt64</a></h3>
				<pre>func (z *Rat) SetInt64(x int64) *Rat</pre>
				<p>
SetInt64 sets z to x and returns z.
</p>

				
				
			
				
				<h3 id="Rat.SetString">func (*Rat) <a href="src/pkg/math/big/rat.htm#L266">SetString</a></h3>
				<pre>func (z *Rat) SetString(s string) (*Rat, bool)</pre>
				<p>
SetString sets z to the value of s and returns z and a boolean indicating
success. s can be given as a fraction &#34;a/b&#34; or as a floating-point number
optionally followed by an exponent. If the operation failed, the value of
z is undefined but the returned value is nil.
</p>

				
				<div id="example_Rat_SetString" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">r := new(big.Rat)
r.SetString(&#34;355/113&#34;)
fmt.Println(r.FloatString(3))
<span class="comment"></pre>
		
		<p>Output:</p>
		<pre class="output">3.142</pre>
		
	</div>
</div>

			
				
				<h3 id="Rat.Sign">func (*Rat) <a href="src/pkg/math/big/rat.htm#L108">Sign</a></h3>
				<pre>func (x *Rat) Sign() int</pre>
				<p>
Sign returns:
</p>
<pre>-1 if x &lt;  0
 0 if x == 0
+1 if x &gt;  0
</pre>

				
				
			
				
				<h3 id="Rat.String">func (*Rat) <a href="src/pkg/math/big/rat.htm#L321">String</a></h3>
				<pre>func (x *Rat) String() string</pre>
				<p>
String returns a string representation of z in the form &#34;a/b&#34; (even if b == 1).
</p>

				
				
			
				
				<h3 id="Rat.Sub">func (*Rat) <a href="src/pkg/math/big/rat.htm#L213">Sub</a></h3>
				<pre>func (z *Rat) Sub(x, y *Rat) *Rat</pre>
				<p>
Sub sets z to the difference x-y and returns z.
</p>

				
				
			
		
			
			
			<h2 id="Word">type <a href="src/pkg/math/big/arith.htm#L2">Word</a></h2>
			<pre>type Word uintptr</pre>
			<p>
A Word represents a single digit of a multi-precision unsigned integer.
</p>


			

			

			

			

			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
