<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/compress/flate/huffman_code.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/compress/flate/huffman_code.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package flate
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;math&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;sort&#34;
<a id="L10"></a><span class="ln">    10</span>	)
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	type huffmanEncoder struct {
<a id="L13"></a><span class="ln">    13</span>		codeBits []uint8
<a id="L14"></a><span class="ln">    14</span>		code     []uint16
<a id="L15"></a><span class="ln">    15</span>	}
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	type literalNode struct {
<a id="L18"></a><span class="ln">    18</span>		literal uint16
<a id="L19"></a><span class="ln">    19</span>		freq    int32
<a id="L20"></a><span class="ln">    20</span>	}
<a id="L21"></a><span class="ln">    21</span>	
<a id="L22"></a><span class="ln">    22</span>	type chain struct {
<a id="L23"></a><span class="ln">    23</span>		<span class="comment">// The sum of the leaves in this tree</span>
<a id="L24"></a><span class="ln">    24</span>		freq int32
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>		<span class="comment">// The number of literals to the left of this item at this level</span>
<a id="L27"></a><span class="ln">    27</span>		leafCount int32
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>		<span class="comment">// The right child of this chain in the previous level.</span>
<a id="L30"></a><span class="ln">    30</span>		up *chain
<a id="L31"></a><span class="ln">    31</span>	}
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	type levelInfo struct {
<a id="L34"></a><span class="ln">    34</span>		<span class="comment">// Our level.  for better printing</span>
<a id="L35"></a><span class="ln">    35</span>		level int32
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>		<span class="comment">// The most recent chain generated for this level</span>
<a id="L38"></a><span class="ln">    38</span>		lastChain *chain
<a id="L39"></a><span class="ln">    39</span>	
<a id="L40"></a><span class="ln">    40</span>		<span class="comment">// The frequency of the next character to add to this level</span>
<a id="L41"></a><span class="ln">    41</span>		nextCharFreq int32
<a id="L42"></a><span class="ln">    42</span>	
<a id="L43"></a><span class="ln">    43</span>		<span class="comment">// The frequency of the next pair (from level below) to add to this level.</span>
<a id="L44"></a><span class="ln">    44</span>		<span class="comment">// Only valid if the &#34;needed&#34; value of the next lower level is 0.</span>
<a id="L45"></a><span class="ln">    45</span>		nextPairFreq int32
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>		<span class="comment">// The number of chains remaining to generate for this level before moving</span>
<a id="L48"></a><span class="ln">    48</span>		<span class="comment">// up to the next level</span>
<a id="L49"></a><span class="ln">    49</span>		needed int32
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>		<span class="comment">// The levelInfo for level+1</span>
<a id="L52"></a><span class="ln">    52</span>		up *levelInfo
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>		<span class="comment">// The levelInfo for level-1</span>
<a id="L55"></a><span class="ln">    55</span>		down *levelInfo
<a id="L56"></a><span class="ln">    56</span>	}
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>	func maxNode() literalNode { return literalNode{math.MaxUint16, math.MaxInt32} }
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	func newHuffmanEncoder(size int) *huffmanEncoder {
<a id="L61"></a><span class="ln">    61</span>		return &amp;huffmanEncoder{make([]uint8, size), make([]uint16, size)}
<a id="L62"></a><span class="ln">    62</span>	}
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// Generates a HuffmanCode corresponding to the fixed literal table</span>
<a id="L65"></a><span class="ln">    65</span>	func generateFixedLiteralEncoding() *huffmanEncoder {
<a id="L66"></a><span class="ln">    66</span>		h := newHuffmanEncoder(maxLit)
<a id="L67"></a><span class="ln">    67</span>		codeBits := h.codeBits
<a id="L68"></a><span class="ln">    68</span>		code := h.code
<a id="L69"></a><span class="ln">    69</span>		var ch uint16
<a id="L70"></a><span class="ln">    70</span>		for ch = 0; ch &lt; maxLit; ch++ {
<a id="L71"></a><span class="ln">    71</span>			var bits uint16
<a id="L72"></a><span class="ln">    72</span>			var size uint8
<a id="L73"></a><span class="ln">    73</span>			switch {
<a id="L74"></a><span class="ln">    74</span>			case ch &lt; 144:
<a id="L75"></a><span class="ln">    75</span>				<span class="comment">// size 8, 000110000  .. 10111111</span>
<a id="L76"></a><span class="ln">    76</span>				bits = ch + 48
<a id="L77"></a><span class="ln">    77</span>				size = 8
<a id="L78"></a><span class="ln">    78</span>				break
<a id="L79"></a><span class="ln">    79</span>			case ch &lt; 256:
<a id="L80"></a><span class="ln">    80</span>				<span class="comment">// size 9, 110010000 .. 111111111</span>
<a id="L81"></a><span class="ln">    81</span>				bits = ch + 400 - 144
<a id="L82"></a><span class="ln">    82</span>				size = 9
<a id="L83"></a><span class="ln">    83</span>				break
<a id="L84"></a><span class="ln">    84</span>			case ch &lt; 280:
<a id="L85"></a><span class="ln">    85</span>				<span class="comment">// size 7, 0000000 .. 0010111</span>
<a id="L86"></a><span class="ln">    86</span>				bits = ch - 256
<a id="L87"></a><span class="ln">    87</span>				size = 7
<a id="L88"></a><span class="ln">    88</span>				break
<a id="L89"></a><span class="ln">    89</span>			default:
<a id="L90"></a><span class="ln">    90</span>				<span class="comment">// size 8, 11000000 .. 11000111</span>
<a id="L91"></a><span class="ln">    91</span>				bits = ch + 192 - 280
<a id="L92"></a><span class="ln">    92</span>				size = 8
<a id="L93"></a><span class="ln">    93</span>			}
<a id="L94"></a><span class="ln">    94</span>			codeBits[ch] = size
<a id="L95"></a><span class="ln">    95</span>			code[ch] = reverseBits(bits, size)
<a id="L96"></a><span class="ln">    96</span>		}
<a id="L97"></a><span class="ln">    97</span>		return h
<a id="L98"></a><span class="ln">    98</span>	}
<a id="L99"></a><span class="ln">    99</span>	
<a id="L100"></a><span class="ln">   100</span>	func generateFixedOffsetEncoding() *huffmanEncoder {
<a id="L101"></a><span class="ln">   101</span>		h := newHuffmanEncoder(30)
<a id="L102"></a><span class="ln">   102</span>		codeBits := h.codeBits
<a id="L103"></a><span class="ln">   103</span>		code := h.code
<a id="L104"></a><span class="ln">   104</span>		for ch := uint16(0); ch &lt; 30; ch++ {
<a id="L105"></a><span class="ln">   105</span>			codeBits[ch] = 5
<a id="L106"></a><span class="ln">   106</span>			code[ch] = reverseBits(ch, 5)
<a id="L107"></a><span class="ln">   107</span>		}
<a id="L108"></a><span class="ln">   108</span>		return h
<a id="L109"></a><span class="ln">   109</span>	}
<a id="L110"></a><span class="ln">   110</span>	
<a id="L111"></a><span class="ln">   111</span>	var fixedLiteralEncoding *huffmanEncoder = generateFixedLiteralEncoding()
<a id="L112"></a><span class="ln">   112</span>	var fixedOffsetEncoding *huffmanEncoder = generateFixedOffsetEncoding()
<a id="L113"></a><span class="ln">   113</span>	
<a id="L114"></a><span class="ln">   114</span>	func (h *huffmanEncoder) bitLength(freq []int32) int64 {
<a id="L115"></a><span class="ln">   115</span>		var total int64
<a id="L116"></a><span class="ln">   116</span>		for i, f := range freq {
<a id="L117"></a><span class="ln">   117</span>			if f != 0 {
<a id="L118"></a><span class="ln">   118</span>				total += int64(f) * int64(h.codeBits[i])
<a id="L119"></a><span class="ln">   119</span>			}
<a id="L120"></a><span class="ln">   120</span>		}
<a id="L121"></a><span class="ln">   121</span>		return total
<a id="L122"></a><span class="ln">   122</span>	}
<a id="L123"></a><span class="ln">   123</span>	
<a id="L124"></a><span class="ln">   124</span>	<span class="comment">// Return the number of literals assigned to each bit size in the Huffman encoding</span>
<a id="L125"></a><span class="ln">   125</span>	<span class="comment">//</span>
<a id="L126"></a><span class="ln">   126</span>	<span class="comment">// This method is only called when list.length &gt;= 3</span>
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// The cases of 0, 1, and 2 literals are handled by special case code.</span>
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">//</span>
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// list  An array of the literals with non-zero frequencies</span>
<a id="L130"></a><span class="ln">   130</span>	<span class="comment">//             and their associated frequencies.  The array is in order of increasing</span>
<a id="L131"></a><span class="ln">   131</span>	<span class="comment">//             frequency, and has as its last element a special element with frequency</span>
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">//             MaxInt32</span>
<a id="L133"></a><span class="ln">   133</span>	<span class="comment">// maxBits     The maximum number of bits that should be used to encode any literal.</span>
<a id="L134"></a><span class="ln">   134</span>	<span class="comment">// return      An integer array in which array[i] indicates the number of literals</span>
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">//             that should be encoded in i bits.</span>
<a id="L136"></a><span class="ln">   136</span>	func (h *huffmanEncoder) bitCounts(list []literalNode, maxBits int32) []int32 {
<a id="L137"></a><span class="ln">   137</span>		n := int32(len(list))
<a id="L138"></a><span class="ln">   138</span>		list = list[0 : n+1]
<a id="L139"></a><span class="ln">   139</span>		list[n] = maxNode()
<a id="L140"></a><span class="ln">   140</span>	
<a id="L141"></a><span class="ln">   141</span>		<span class="comment">// The tree can&#39;t have greater depth than n - 1, no matter what.  This</span>
<a id="L142"></a><span class="ln">   142</span>		<span class="comment">// saves a little bit of work in some small cases</span>
<a id="L143"></a><span class="ln">   143</span>		if maxBits &gt; n-1 {
<a id="L144"></a><span class="ln">   144</span>			maxBits = n - 1
<a id="L145"></a><span class="ln">   145</span>		}
<a id="L146"></a><span class="ln">   146</span>	
<a id="L147"></a><span class="ln">   147</span>		<span class="comment">// Create information about each of the levels.</span>
<a id="L148"></a><span class="ln">   148</span>		<span class="comment">// A bogus &#34;Level 0&#34; whose sole purpose is so that</span>
<a id="L149"></a><span class="ln">   149</span>		<span class="comment">// level1.prev.needed==0.  This makes level1.nextPairFreq</span>
<a id="L150"></a><span class="ln">   150</span>		<span class="comment">// be a legitimate value that never gets chosen.</span>
<a id="L151"></a><span class="ln">   151</span>		top := &amp;levelInfo{needed: 0}
<a id="L152"></a><span class="ln">   152</span>		chain2 := &amp;chain{list[1].freq, 2, new(chain)}
<a id="L153"></a><span class="ln">   153</span>		for level := int32(1); level &lt;= maxBits; level++ {
<a id="L154"></a><span class="ln">   154</span>			<span class="comment">// For every level, the first two items are the first two characters.</span>
<a id="L155"></a><span class="ln">   155</span>			<span class="comment">// We initialize the levels as if we had already figured this out.</span>
<a id="L156"></a><span class="ln">   156</span>			top = &amp;levelInfo{
<a id="L157"></a><span class="ln">   157</span>				level:        level,
<a id="L158"></a><span class="ln">   158</span>				lastChain:    chain2,
<a id="L159"></a><span class="ln">   159</span>				nextCharFreq: list[2].freq,
<a id="L160"></a><span class="ln">   160</span>				nextPairFreq: list[0].freq + list[1].freq,
<a id="L161"></a><span class="ln">   161</span>				down:         top,
<a id="L162"></a><span class="ln">   162</span>			}
<a id="L163"></a><span class="ln">   163</span>			top.down.up = top
<a id="L164"></a><span class="ln">   164</span>			if level == 1 {
<a id="L165"></a><span class="ln">   165</span>				top.nextPairFreq = math.MaxInt32
<a id="L166"></a><span class="ln">   166</span>			}
<a id="L167"></a><span class="ln">   167</span>		}
<a id="L168"></a><span class="ln">   168</span>	
<a id="L169"></a><span class="ln">   169</span>		<span class="comment">// We need a total of 2*n - 2 items at top level and have already generated 2.</span>
<a id="L170"></a><span class="ln">   170</span>		top.needed = 2*n - 4
<a id="L171"></a><span class="ln">   171</span>	
<a id="L172"></a><span class="ln">   172</span>		l := top
<a id="L173"></a><span class="ln">   173</span>		for {
<a id="L174"></a><span class="ln">   174</span>			if l.nextPairFreq == math.MaxInt32 &amp;&amp; l.nextCharFreq == math.MaxInt32 {
<a id="L175"></a><span class="ln">   175</span>				<span class="comment">// We&#39;ve run out of both leafs and pairs.</span>
<a id="L176"></a><span class="ln">   176</span>				<span class="comment">// End all calculations for this level.</span>
<a id="L177"></a><span class="ln">   177</span>				<span class="comment">// To m sure we never come back to this level or any lower level,</span>
<a id="L178"></a><span class="ln">   178</span>				<span class="comment">// set nextPairFreq impossibly large.</span>
<a id="L179"></a><span class="ln">   179</span>				l.lastChain = nil
<a id="L180"></a><span class="ln">   180</span>				l.needed = 0
<a id="L181"></a><span class="ln">   181</span>				l = l.up
<a id="L182"></a><span class="ln">   182</span>				l.nextPairFreq = math.MaxInt32
<a id="L183"></a><span class="ln">   183</span>				continue
<a id="L184"></a><span class="ln">   184</span>			}
<a id="L185"></a><span class="ln">   185</span>	
<a id="L186"></a><span class="ln">   186</span>			prevFreq := l.lastChain.freq
<a id="L187"></a><span class="ln">   187</span>			if l.nextCharFreq &lt; l.nextPairFreq {
<a id="L188"></a><span class="ln">   188</span>				<span class="comment">// The next item on this row is a leaf node.</span>
<a id="L189"></a><span class="ln">   189</span>				n := l.lastChain.leafCount + 1
<a id="L190"></a><span class="ln">   190</span>				l.lastChain = &amp;chain{l.nextCharFreq, n, l.lastChain.up}
<a id="L191"></a><span class="ln">   191</span>				l.nextCharFreq = list[n].freq
<a id="L192"></a><span class="ln">   192</span>			} else {
<a id="L193"></a><span class="ln">   193</span>				<span class="comment">// The next item on this row is a pair from the previous row.</span>
<a id="L194"></a><span class="ln">   194</span>				<span class="comment">// nextPairFreq isn&#39;t valid until we generate two</span>
<a id="L195"></a><span class="ln">   195</span>				<span class="comment">// more values in the level below</span>
<a id="L196"></a><span class="ln">   196</span>				l.lastChain = &amp;chain{l.nextPairFreq, l.lastChain.leafCount, l.down.lastChain}
<a id="L197"></a><span class="ln">   197</span>				l.down.needed = 2
<a id="L198"></a><span class="ln">   198</span>			}
<a id="L199"></a><span class="ln">   199</span>	
<a id="L200"></a><span class="ln">   200</span>			if l.needed--; l.needed == 0 {
<a id="L201"></a><span class="ln">   201</span>				<span class="comment">// We&#39;ve done everything we need to do for this level.</span>
<a id="L202"></a><span class="ln">   202</span>				<span class="comment">// Continue calculating one level up.  Fill in nextPairFreq</span>
<a id="L203"></a><span class="ln">   203</span>				<span class="comment">// of that level with the sum of the two nodes we&#39;ve just calculated on</span>
<a id="L204"></a><span class="ln">   204</span>				<span class="comment">// this level.</span>
<a id="L205"></a><span class="ln">   205</span>				up := l.up
<a id="L206"></a><span class="ln">   206</span>				if up == nil {
<a id="L207"></a><span class="ln">   207</span>					<span class="comment">// All done!</span>
<a id="L208"></a><span class="ln">   208</span>					break
<a id="L209"></a><span class="ln">   209</span>				}
<a id="L210"></a><span class="ln">   210</span>				up.nextPairFreq = prevFreq + l.lastChain.freq
<a id="L211"></a><span class="ln">   211</span>				l = up
<a id="L212"></a><span class="ln">   212</span>			} else {
<a id="L213"></a><span class="ln">   213</span>				<span class="comment">// If we stole from below, move down temporarily to replenish it.</span>
<a id="L214"></a><span class="ln">   214</span>				for l.down.needed &gt; 0 {
<a id="L215"></a><span class="ln">   215</span>					l = l.down
<a id="L216"></a><span class="ln">   216</span>				}
<a id="L217"></a><span class="ln">   217</span>			}
<a id="L218"></a><span class="ln">   218</span>		}
<a id="L219"></a><span class="ln">   219</span>	
<a id="L220"></a><span class="ln">   220</span>		<span class="comment">// Somethings is wrong if at the end, the top level is null or hasn&#39;t used</span>
<a id="L221"></a><span class="ln">   221</span>		<span class="comment">// all of the leaves.</span>
<a id="L222"></a><span class="ln">   222</span>		if top.lastChain.leafCount != n {
<a id="L223"></a><span class="ln">   223</span>			panic(&#34;top.lastChain.leafCount != n&#34;)
<a id="L224"></a><span class="ln">   224</span>		}
<a id="L225"></a><span class="ln">   225</span>	
<a id="L226"></a><span class="ln">   226</span>		bitCount := make([]int32, maxBits+1)
<a id="L227"></a><span class="ln">   227</span>		bits := 1
<a id="L228"></a><span class="ln">   228</span>		for chain := top.lastChain; chain.up != nil; chain = chain.up {
<a id="L229"></a><span class="ln">   229</span>			<span class="comment">// chain.leafCount gives the number of literals requiring at least &#34;bits&#34;</span>
<a id="L230"></a><span class="ln">   230</span>			<span class="comment">// bits to encode.</span>
<a id="L231"></a><span class="ln">   231</span>			bitCount[bits] = chain.leafCount - chain.up.leafCount
<a id="L232"></a><span class="ln">   232</span>			bits++
<a id="L233"></a><span class="ln">   233</span>		}
<a id="L234"></a><span class="ln">   234</span>		return bitCount
<a id="L235"></a><span class="ln">   235</span>	}
<a id="L236"></a><span class="ln">   236</span>	
<a id="L237"></a><span class="ln">   237</span>	<span class="comment">// Look at the leaves and assign them a bit count and an encoding as specified</span>
<a id="L238"></a><span class="ln">   238</span>	<span class="comment">// in RFC 1951 3.2.2</span>
<a id="L239"></a><span class="ln">   239</span>	func (h *huffmanEncoder) assignEncodingAndSize(bitCount []int32, list []literalNode) {
<a id="L240"></a><span class="ln">   240</span>		code := uint16(0)
<a id="L241"></a><span class="ln">   241</span>		for n, bits := range bitCount {
<a id="L242"></a><span class="ln">   242</span>			code &lt;&lt;= 1
<a id="L243"></a><span class="ln">   243</span>			if n == 0 || bits == 0 {
<a id="L244"></a><span class="ln">   244</span>				continue
<a id="L245"></a><span class="ln">   245</span>			}
<a id="L246"></a><span class="ln">   246</span>			<span class="comment">// The literals list[len(list)-bits] .. list[len(list)-bits]</span>
<a id="L247"></a><span class="ln">   247</span>			<span class="comment">// are encoded using &#34;bits&#34; bits, and get the values</span>
<a id="L248"></a><span class="ln">   248</span>			<span class="comment">// code, code + 1, ....  The code values are</span>
<a id="L249"></a><span class="ln">   249</span>			<span class="comment">// assigned in literal order (not frequency order).</span>
<a id="L250"></a><span class="ln">   250</span>			chunk := list[len(list)-int(bits):]
<a id="L251"></a><span class="ln">   251</span>			sortByLiteral(chunk)
<a id="L252"></a><span class="ln">   252</span>			for _, node := range chunk {
<a id="L253"></a><span class="ln">   253</span>				h.codeBits[node.literal] = uint8(n)
<a id="L254"></a><span class="ln">   254</span>				h.code[node.literal] = reverseBits(code, uint8(n))
<a id="L255"></a><span class="ln">   255</span>				code++
<a id="L256"></a><span class="ln">   256</span>			}
<a id="L257"></a><span class="ln">   257</span>			list = list[0 : len(list)-int(bits)]
<a id="L258"></a><span class="ln">   258</span>		}
<a id="L259"></a><span class="ln">   259</span>	}
<a id="L260"></a><span class="ln">   260</span>	
<a id="L261"></a><span class="ln">   261</span>	<span class="comment">// Update this Huffman Code object to be the minimum code for the specified frequency count.</span>
<a id="L262"></a><span class="ln">   262</span>	<span class="comment">//</span>
<a id="L263"></a><span class="ln">   263</span>	<span class="comment">// freq  An array of frequencies, in which frequency[i] gives the frequency of literal i.</span>
<a id="L264"></a><span class="ln">   264</span>	<span class="comment">// maxBits  The maximum number of bits to use for any literal.</span>
<a id="L265"></a><span class="ln">   265</span>	func (h *huffmanEncoder) generate(freq []int32, maxBits int32) {
<a id="L266"></a><span class="ln">   266</span>		list := make([]literalNode, len(freq)+1)
<a id="L267"></a><span class="ln">   267</span>		<span class="comment">// Number of non-zero literals</span>
<a id="L268"></a><span class="ln">   268</span>		count := 0
<a id="L269"></a><span class="ln">   269</span>		<span class="comment">// Set list to be the set of all non-zero literals and their frequencies</span>
<a id="L270"></a><span class="ln">   270</span>		for i, f := range freq {
<a id="L271"></a><span class="ln">   271</span>			if f != 0 {
<a id="L272"></a><span class="ln">   272</span>				list[count] = literalNode{uint16(i), f}
<a id="L273"></a><span class="ln">   273</span>				count++
<a id="L274"></a><span class="ln">   274</span>			} else {
<a id="L275"></a><span class="ln">   275</span>				h.codeBits[i] = 0
<a id="L276"></a><span class="ln">   276</span>			}
<a id="L277"></a><span class="ln">   277</span>		}
<a id="L278"></a><span class="ln">   278</span>		<span class="comment">// If freq[] is shorter than codeBits[], fill rest of codeBits[] with zeros</span>
<a id="L279"></a><span class="ln">   279</span>		h.codeBits = h.codeBits[0:len(freq)]
<a id="L280"></a><span class="ln">   280</span>		list = list[0:count]
<a id="L281"></a><span class="ln">   281</span>		if count &lt;= 2 {
<a id="L282"></a><span class="ln">   282</span>			<span class="comment">// Handle the small cases here, because they are awkward for the general case code.  With</span>
<a id="L283"></a><span class="ln">   283</span>			<span class="comment">// two or fewer literals, everything has bit length 1.</span>
<a id="L284"></a><span class="ln">   284</span>			for i, node := range list {
<a id="L285"></a><span class="ln">   285</span>				<span class="comment">// &#34;list&#34; is in order of increasing literal value.</span>
<a id="L286"></a><span class="ln">   286</span>				h.codeBits[node.literal] = 1
<a id="L287"></a><span class="ln">   287</span>				h.code[node.literal] = uint16(i)
<a id="L288"></a><span class="ln">   288</span>			}
<a id="L289"></a><span class="ln">   289</span>			return
<a id="L290"></a><span class="ln">   290</span>		}
<a id="L291"></a><span class="ln">   291</span>		sortByFreq(list)
<a id="L292"></a><span class="ln">   292</span>	
<a id="L293"></a><span class="ln">   293</span>		<span class="comment">// Get the number of literals for each bit count</span>
<a id="L294"></a><span class="ln">   294</span>		bitCount := h.bitCounts(list, maxBits)
<a id="L295"></a><span class="ln">   295</span>		<span class="comment">// And do the assignment</span>
<a id="L296"></a><span class="ln">   296</span>		h.assignEncodingAndSize(bitCount, list)
<a id="L297"></a><span class="ln">   297</span>	}
<a id="L298"></a><span class="ln">   298</span>	
<a id="L299"></a><span class="ln">   299</span>	type literalNodeSorter struct {
<a id="L300"></a><span class="ln">   300</span>		a    []literalNode
<a id="L301"></a><span class="ln">   301</span>		less func(i, j int) bool
<a id="L302"></a><span class="ln">   302</span>	}
<a id="L303"></a><span class="ln">   303</span>	
<a id="L304"></a><span class="ln">   304</span>	func (s literalNodeSorter) Len() int { return len(s.a) }
<a id="L305"></a><span class="ln">   305</span>	
<a id="L306"></a><span class="ln">   306</span>	func (s literalNodeSorter) Less(i, j int) bool {
<a id="L307"></a><span class="ln">   307</span>		return s.less(i, j)
<a id="L308"></a><span class="ln">   308</span>	}
<a id="L309"></a><span class="ln">   309</span>	
<a id="L310"></a><span class="ln">   310</span>	func (s literalNodeSorter) Swap(i, j int) { s.a[i], s.a[j] = s.a[j], s.a[i] }
<a id="L311"></a><span class="ln">   311</span>	
<a id="L312"></a><span class="ln">   312</span>	func sortByFreq(a []literalNode) {
<a id="L313"></a><span class="ln">   313</span>		s := &amp;literalNodeSorter{a, func(i, j int) bool {
<a id="L314"></a><span class="ln">   314</span>			if a[i].freq == a[j].freq {
<a id="L315"></a><span class="ln">   315</span>				return a[i].literal &lt; a[j].literal
<a id="L316"></a><span class="ln">   316</span>			}
<a id="L317"></a><span class="ln">   317</span>			return a[i].freq &lt; a[j].freq
<a id="L318"></a><span class="ln">   318</span>		}}
<a id="L319"></a><span class="ln">   319</span>		sort.Sort(s)
<a id="L320"></a><span class="ln">   320</span>	}
<a id="L321"></a><span class="ln">   321</span>	
<a id="L322"></a><span class="ln">   322</span>	func sortByLiteral(a []literalNode) {
<a id="L323"></a><span class="ln">   323</span>		s := &amp;literalNodeSorter{a, func(i, j int) bool { return a[i].literal &lt; a[j].literal }}
<a id="L324"></a><span class="ln">   324</span>		sort.Sort(s)
<a id="L325"></a><span class="ln">   325</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

