<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/compress/flate/token.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/compress/flate/token.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package flate
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	const (
<a id="L8"></a><span class="ln">     8</span>		<span class="comment">// 2 bits:   type   0 = literal  1=EOF  2=Match   3=Unused</span>
<a id="L9"></a><span class="ln">     9</span>		<span class="comment">// 8 bits:   xlength = length - MIN_MATCH_LENGTH</span>
<a id="L10"></a><span class="ln">    10</span>		<span class="comment">// 22 bits   xoffset = offset - MIN_OFFSET_SIZE, or literal</span>
<a id="L11"></a><span class="ln">    11</span>		lengthShift = 22
<a id="L12"></a><span class="ln">    12</span>		offsetMask  = 1&lt;&lt;lengthShift - 1
<a id="L13"></a><span class="ln">    13</span>		typeMask    = 3 &lt;&lt; 30
<a id="L14"></a><span class="ln">    14</span>		literalType = 0 &lt;&lt; 30
<a id="L15"></a><span class="ln">    15</span>		matchType   = 1 &lt;&lt; 30
<a id="L16"></a><span class="ln">    16</span>	)
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// The length code for length X (MIN_MATCH_LENGTH &lt;= X &lt;= MAX_MATCH_LENGTH)</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// is lengthCodes[length - MIN_MATCH_LENGTH]</span>
<a id="L20"></a><span class="ln">    20</span>	var lengthCodes = [...]uint32{
<a id="L21"></a><span class="ln">    21</span>		0, 1, 2, 3, 4, 5, 6, 7, 8, 8,
<a id="L22"></a><span class="ln">    22</span>		9, 9, 10, 10, 11, 11, 12, 12, 12, 12,
<a id="L23"></a><span class="ln">    23</span>		13, 13, 13, 13, 14, 14, 14, 14, 15, 15,
<a id="L24"></a><span class="ln">    24</span>		15, 15, 16, 16, 16, 16, 16, 16, 16, 16,
<a id="L25"></a><span class="ln">    25</span>		17, 17, 17, 17, 17, 17, 17, 17, 18, 18,
<a id="L26"></a><span class="ln">    26</span>		18, 18, 18, 18, 18, 18, 19, 19, 19, 19,
<a id="L27"></a><span class="ln">    27</span>		19, 19, 19, 19, 20, 20, 20, 20, 20, 20,
<a id="L28"></a><span class="ln">    28</span>		20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
<a id="L29"></a><span class="ln">    29</span>		21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
<a id="L30"></a><span class="ln">    30</span>		21, 21, 21, 21, 21, 21, 22, 22, 22, 22,
<a id="L31"></a><span class="ln">    31</span>		22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
<a id="L32"></a><span class="ln">    32</span>		22, 22, 23, 23, 23, 23, 23, 23, 23, 23,
<a id="L33"></a><span class="ln">    33</span>		23, 23, 23, 23, 23, 23, 23, 23, 24, 24,
<a id="L34"></a><span class="ln">    34</span>		24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
<a id="L35"></a><span class="ln">    35</span>		24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
<a id="L36"></a><span class="ln">    36</span>		24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
<a id="L37"></a><span class="ln">    37</span>		25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
<a id="L38"></a><span class="ln">    38</span>		25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
<a id="L39"></a><span class="ln">    39</span>		25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
<a id="L40"></a><span class="ln">    40</span>		25, 25, 26, 26, 26, 26, 26, 26, 26, 26,
<a id="L41"></a><span class="ln">    41</span>		26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
<a id="L42"></a><span class="ln">    42</span>		26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
<a id="L43"></a><span class="ln">    43</span>		26, 26, 26, 26, 27, 27, 27, 27, 27, 27,
<a id="L44"></a><span class="ln">    44</span>		27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
<a id="L45"></a><span class="ln">    45</span>		27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
<a id="L46"></a><span class="ln">    46</span>		27, 27, 27, 27, 27, 28,
<a id="L47"></a><span class="ln">    47</span>	}
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>	var offsetCodes = [...]uint32{
<a id="L50"></a><span class="ln">    50</span>		0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7,
<a id="L51"></a><span class="ln">    51</span>		8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9,
<a id="L52"></a><span class="ln">    52</span>		10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
<a id="L53"></a><span class="ln">    53</span>		11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
<a id="L54"></a><span class="ln">    54</span>		12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
<a id="L55"></a><span class="ln">    55</span>		12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
<a id="L56"></a><span class="ln">    56</span>		13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
<a id="L57"></a><span class="ln">    57</span>		13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
<a id="L58"></a><span class="ln">    58</span>		14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
<a id="L59"></a><span class="ln">    59</span>		14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
<a id="L60"></a><span class="ln">    60</span>		14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
<a id="L61"></a><span class="ln">    61</span>		14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
<a id="L62"></a><span class="ln">    62</span>		15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
<a id="L63"></a><span class="ln">    63</span>		15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
<a id="L64"></a><span class="ln">    64</span>		15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
<a id="L65"></a><span class="ln">    65</span>		15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
<a id="L66"></a><span class="ln">    66</span>	}
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>	type token uint32
<a id="L69"></a><span class="ln">    69</span>	
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// Convert a literal into a literal token.</span>
<a id="L71"></a><span class="ln">    71</span>	func literalToken(literal uint32) token { return token(literalType + literal) }
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// Convert a &lt; xlength, xoffset &gt; pair into a match token.</span>
<a id="L74"></a><span class="ln">    74</span>	func matchToken(xlength uint32, xoffset uint32) token {
<a id="L75"></a><span class="ln">    75</span>		return token(matchType + xlength&lt;&lt;lengthShift + xoffset)
<a id="L76"></a><span class="ln">    76</span>	}
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// Returns the type of a token</span>
<a id="L79"></a><span class="ln">    79</span>	func (t token) typ() uint32 { return uint32(t) &amp; typeMask }
<a id="L80"></a><span class="ln">    80</span>	
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// Returns the literal of a literal token</span>
<a id="L82"></a><span class="ln">    82</span>	func (t token) literal() uint32 { return uint32(t - literalType) }
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">// Returns the extra offset of a match token</span>
<a id="L85"></a><span class="ln">    85</span>	func (t token) offset() uint32 { return uint32(t) &amp; offsetMask }
<a id="L86"></a><span class="ln">    86</span>	
<a id="L87"></a><span class="ln">    87</span>	func (t token) length() uint32 { return uint32((t - matchType) &gt;&gt; lengthShift) }
<a id="L88"></a><span class="ln">    88</span>	
<a id="L89"></a><span class="ln">    89</span>	func lengthCode(len uint32) uint32 { return lengthCodes[len] }
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// Returns the offset code corresponding to a specific offset</span>
<a id="L92"></a><span class="ln">    92</span>	func offsetCode(off uint32) uint32 {
<a id="L93"></a><span class="ln">    93</span>		const n = uint32(len(offsetCodes))
<a id="L94"></a><span class="ln">    94</span>		switch {
<a id="L95"></a><span class="ln">    95</span>		case off &lt; n:
<a id="L96"></a><span class="ln">    96</span>			return offsetCodes[off]
<a id="L97"></a><span class="ln">    97</span>		case off&gt;&gt;7 &lt; n:
<a id="L98"></a><span class="ln">    98</span>			return offsetCodes[off&gt;&gt;7] + 14
<a id="L99"></a><span class="ln">    99</span>		default:
<a id="L100"></a><span class="ln">   100</span>			return offsetCodes[off&gt;&gt;14] + 28
<a id="L101"></a><span class="ln">   101</span>		}
<a id="L102"></a><span class="ln">   102</span>		panic(&#34;unreachable&#34;)
<a id="L103"></a><span class="ln">   103</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

