<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/compress/flate/deflate.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/compress/flate/deflate.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package flate
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;fmt&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;io&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;math&#34;
<a id="L11"></a><span class="ln">    11</span>	)
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	const (
<a id="L14"></a><span class="ln">    14</span>		NoCompression      = 0
<a id="L15"></a><span class="ln">    15</span>		BestSpeed          = 1
<a id="L16"></a><span class="ln">    16</span>		fastCompression    = 3
<a id="L17"></a><span class="ln">    17</span>		BestCompression    = 9
<a id="L18"></a><span class="ln">    18</span>		DefaultCompression = -1
<a id="L19"></a><span class="ln">    19</span>		logWindowSize      = 15
<a id="L20"></a><span class="ln">    20</span>		windowSize         = 1 &lt;&lt; logWindowSize
<a id="L21"></a><span class="ln">    21</span>		windowMask         = windowSize - 1
<a id="L22"></a><span class="ln">    22</span>		logMaxOffsetSize   = 15  <span class="comment">// Standard DEFLATE</span>
<a id="L23"></a><span class="ln">    23</span>		minMatchLength     = 3   <span class="comment">// The smallest match that the compressor looks for</span>
<a id="L24"></a><span class="ln">    24</span>		maxMatchLength     = 258 <span class="comment">// The longest match for the compressor</span>
<a id="L25"></a><span class="ln">    25</span>		minOffsetSize      = 1   <span class="comment">// The shortest offset that makes any sence</span>
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>		<span class="comment">// The maximum number of tokens we put into a single flat block, just too</span>
<a id="L28"></a><span class="ln">    28</span>		<span class="comment">// stop things from getting too large.</span>
<a id="L29"></a><span class="ln">    29</span>		maxFlateBlockTokens = 1 &lt;&lt; 14
<a id="L30"></a><span class="ln">    30</span>		maxStoreBlockSize   = 65535
<a id="L31"></a><span class="ln">    31</span>		hashBits            = 17
<a id="L32"></a><span class="ln">    32</span>		hashSize            = 1 &lt;&lt; hashBits
<a id="L33"></a><span class="ln">    33</span>		hashMask            = (1 &lt;&lt; hashBits) - 1
<a id="L34"></a><span class="ln">    34</span>		hashShift           = (hashBits + minMatchLength - 1) / minMatchLength
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>		skipNever = math.MaxInt32
<a id="L37"></a><span class="ln">    37</span>	)
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>	type compressionLevel struct {
<a id="L40"></a><span class="ln">    40</span>		good, lazy, nice, chain, fastSkipHashing int
<a id="L41"></a><span class="ln">    41</span>	}
<a id="L42"></a><span class="ln">    42</span>	
<a id="L43"></a><span class="ln">    43</span>	var levels = []compressionLevel{
<a id="L44"></a><span class="ln">    44</span>		{}, <span class="comment">// 0</span>
<a id="L45"></a><span class="ln">    45</span>		<span class="comment">// For levels 1-3 we don&#39;t bother trying with lazy matches</span>
<a id="L46"></a><span class="ln">    46</span>		{3, 0, 8, 4, 4},
<a id="L47"></a><span class="ln">    47</span>		{3, 0, 16, 8, 5},
<a id="L48"></a><span class="ln">    48</span>		{3, 0, 32, 32, 6},
<a id="L49"></a><span class="ln">    49</span>		<span class="comment">// Levels 4-9 use increasingly more lazy matching</span>
<a id="L50"></a><span class="ln">    50</span>		<span class="comment">// and increasingly stringent conditions for &#34;good enough&#34;.</span>
<a id="L51"></a><span class="ln">    51</span>		{4, 4, 16, 16, skipNever},
<a id="L52"></a><span class="ln">    52</span>		{8, 16, 32, 32, skipNever},
<a id="L53"></a><span class="ln">    53</span>		{8, 16, 128, 128, skipNever},
<a id="L54"></a><span class="ln">    54</span>		{8, 32, 128, 256, skipNever},
<a id="L55"></a><span class="ln">    55</span>		{32, 128, 258, 1024, skipNever},
<a id="L56"></a><span class="ln">    56</span>		{32, 258, 258, 4096, skipNever},
<a id="L57"></a><span class="ln">    57</span>	}
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>	type compressor struct {
<a id="L60"></a><span class="ln">    60</span>		compressionLevel
<a id="L61"></a><span class="ln">    61</span>	
<a id="L62"></a><span class="ln">    62</span>		w *huffmanBitWriter
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>		<span class="comment">// compression algorithm</span>
<a id="L65"></a><span class="ln">    65</span>		fill func(*compressor, []byte) int <span class="comment">// copy data to window</span>
<a id="L66"></a><span class="ln">    66</span>		step func(*compressor)             <span class="comment">// process window</span>
<a id="L67"></a><span class="ln">    67</span>		sync bool                          <span class="comment">// requesting flush</span>
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>		<span class="comment">// Input hash chains</span>
<a id="L70"></a><span class="ln">    70</span>		<span class="comment">// hashHead[hashValue] contains the largest inputIndex with the specified hash value</span>
<a id="L71"></a><span class="ln">    71</span>		<span class="comment">// If hashHead[hashValue] is within the current window, then</span>
<a id="L72"></a><span class="ln">    72</span>		<span class="comment">// hashPrev[hashHead[hashValue] &amp; windowMask] contains the previous index</span>
<a id="L73"></a><span class="ln">    73</span>		<span class="comment">// with the same hash value.</span>
<a id="L74"></a><span class="ln">    74</span>		chainHead  int
<a id="L75"></a><span class="ln">    75</span>		hashHead   []int
<a id="L76"></a><span class="ln">    76</span>		hashPrev   []int
<a id="L77"></a><span class="ln">    77</span>		hashOffset int
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>		<span class="comment">// input window: unprocessed data is window[index:windowEnd]</span>
<a id="L80"></a><span class="ln">    80</span>		index         int
<a id="L81"></a><span class="ln">    81</span>		window        []byte
<a id="L82"></a><span class="ln">    82</span>		windowEnd     int
<a id="L83"></a><span class="ln">    83</span>		blockStart    int  <span class="comment">// window index where current tokens start</span>
<a id="L84"></a><span class="ln">    84</span>		byteAvailable bool <span class="comment">// if true, still need to process window[index-1].</span>
<a id="L85"></a><span class="ln">    85</span>	
<a id="L86"></a><span class="ln">    86</span>		<span class="comment">// queued output tokens</span>
<a id="L87"></a><span class="ln">    87</span>		tokens []token
<a id="L88"></a><span class="ln">    88</span>	
<a id="L89"></a><span class="ln">    89</span>		<span class="comment">// deflate state</span>
<a id="L90"></a><span class="ln">    90</span>		length         int
<a id="L91"></a><span class="ln">    91</span>		offset         int
<a id="L92"></a><span class="ln">    92</span>		hash           int
<a id="L93"></a><span class="ln">    93</span>		maxInsertIndex int
<a id="L94"></a><span class="ln">    94</span>		err            error
<a id="L95"></a><span class="ln">    95</span>	}
<a id="L96"></a><span class="ln">    96</span>	
<a id="L97"></a><span class="ln">    97</span>	func (d *compressor) fillDeflate(b []byte) int {
<a id="L98"></a><span class="ln">    98</span>		if d.index &gt;= 2*windowSize-(minMatchLength+maxMatchLength) {
<a id="L99"></a><span class="ln">    99</span>			<span class="comment">// shift the window by windowSize</span>
<a id="L100"></a><span class="ln">   100</span>			copy(d.window, d.window[windowSize:2*windowSize])
<a id="L101"></a><span class="ln">   101</span>			d.index -= windowSize
<a id="L102"></a><span class="ln">   102</span>			d.windowEnd -= windowSize
<a id="L103"></a><span class="ln">   103</span>			if d.blockStart &gt;= windowSize {
<a id="L104"></a><span class="ln">   104</span>				d.blockStart -= windowSize
<a id="L105"></a><span class="ln">   105</span>			} else {
<a id="L106"></a><span class="ln">   106</span>				d.blockStart = math.MaxInt32
<a id="L107"></a><span class="ln">   107</span>			}
<a id="L108"></a><span class="ln">   108</span>			d.hashOffset += windowSize
<a id="L109"></a><span class="ln">   109</span>		}
<a id="L110"></a><span class="ln">   110</span>		n := copy(d.window[d.windowEnd:], b)
<a id="L111"></a><span class="ln">   111</span>		d.windowEnd += n
<a id="L112"></a><span class="ln">   112</span>		return n
<a id="L113"></a><span class="ln">   113</span>	}
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>	func (d *compressor) writeBlock(tokens []token, index int, eof bool) error {
<a id="L116"></a><span class="ln">   116</span>		if index &gt; 0 || eof {
<a id="L117"></a><span class="ln">   117</span>			var window []byte
<a id="L118"></a><span class="ln">   118</span>			if d.blockStart &lt;= index {
<a id="L119"></a><span class="ln">   119</span>				window = d.window[d.blockStart:index]
<a id="L120"></a><span class="ln">   120</span>			}
<a id="L121"></a><span class="ln">   121</span>			d.blockStart = index
<a id="L122"></a><span class="ln">   122</span>			d.w.writeBlock(tokens, eof, window)
<a id="L123"></a><span class="ln">   123</span>			return d.w.err
<a id="L124"></a><span class="ln">   124</span>		}
<a id="L125"></a><span class="ln">   125</span>		return nil
<a id="L126"></a><span class="ln">   126</span>	}
<a id="L127"></a><span class="ln">   127</span>	
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// Try to find a match starting at index whose length is greater than prevSize.</span>
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// We only look at chainCount possibilities before giving up.</span>
<a id="L130"></a><span class="ln">   130</span>	func (d *compressor) findMatch(pos int, prevHead int, prevLength int, lookahead int) (length, offset int, ok bool) {
<a id="L131"></a><span class="ln">   131</span>		minMatchLook := maxMatchLength
<a id="L132"></a><span class="ln">   132</span>		if lookahead &lt; minMatchLook {
<a id="L133"></a><span class="ln">   133</span>			minMatchLook = lookahead
<a id="L134"></a><span class="ln">   134</span>		}
<a id="L135"></a><span class="ln">   135</span>	
<a id="L136"></a><span class="ln">   136</span>		win := d.window[0 : pos+minMatchLook]
<a id="L137"></a><span class="ln">   137</span>	
<a id="L138"></a><span class="ln">   138</span>		<span class="comment">// We quit when we get a match that&#39;s at least nice long</span>
<a id="L139"></a><span class="ln">   139</span>		nice := len(win) - pos
<a id="L140"></a><span class="ln">   140</span>		if d.nice &lt; nice {
<a id="L141"></a><span class="ln">   141</span>			nice = d.nice
<a id="L142"></a><span class="ln">   142</span>		}
<a id="L143"></a><span class="ln">   143</span>	
<a id="L144"></a><span class="ln">   144</span>		<span class="comment">// If we&#39;ve got a match that&#39;s good enough, only look in 1/4 the chain.</span>
<a id="L145"></a><span class="ln">   145</span>		tries := d.chain
<a id="L146"></a><span class="ln">   146</span>		length = prevLength
<a id="L147"></a><span class="ln">   147</span>		if length &gt;= d.good {
<a id="L148"></a><span class="ln">   148</span>			tries &gt;&gt;= 2
<a id="L149"></a><span class="ln">   149</span>		}
<a id="L150"></a><span class="ln">   150</span>	
<a id="L151"></a><span class="ln">   151</span>		w0 := win[pos]
<a id="L152"></a><span class="ln">   152</span>		w1 := win[pos+1]
<a id="L153"></a><span class="ln">   153</span>		wEnd := win[pos+length]
<a id="L154"></a><span class="ln">   154</span>		minIndex := pos - windowSize
<a id="L155"></a><span class="ln">   155</span>	
<a id="L156"></a><span class="ln">   156</span>		for i := prevHead; tries &gt; 0; tries-- {
<a id="L157"></a><span class="ln">   157</span>			if w0 == win[i] &amp;&amp; w1 == win[i+1] &amp;&amp; wEnd == win[i+length] {
<a id="L158"></a><span class="ln">   158</span>				<span class="comment">// The hash function ensures that if win[i] and win[i+1] match, win[i+2] matches</span>
<a id="L159"></a><span class="ln">   159</span>	
<a id="L160"></a><span class="ln">   160</span>				n := 3
<a id="L161"></a><span class="ln">   161</span>				for pos+n &lt; len(win) &amp;&amp; win[i+n] == win[pos+n] {
<a id="L162"></a><span class="ln">   162</span>					n++
<a id="L163"></a><span class="ln">   163</span>				}
<a id="L164"></a><span class="ln">   164</span>				if n &gt; length &amp;&amp; (n &gt; 3 || pos-i &lt;= 4096) {
<a id="L165"></a><span class="ln">   165</span>					length = n
<a id="L166"></a><span class="ln">   166</span>					offset = pos - i
<a id="L167"></a><span class="ln">   167</span>					ok = true
<a id="L168"></a><span class="ln">   168</span>					if n &gt;= nice {
<a id="L169"></a><span class="ln">   169</span>						<span class="comment">// The match is good enough that we don&#39;t try to find a better one.</span>
<a id="L170"></a><span class="ln">   170</span>						break
<a id="L171"></a><span class="ln">   171</span>					}
<a id="L172"></a><span class="ln">   172</span>					wEnd = win[pos+n]
<a id="L173"></a><span class="ln">   173</span>				}
<a id="L174"></a><span class="ln">   174</span>			}
<a id="L175"></a><span class="ln">   175</span>			if i == minIndex {
<a id="L176"></a><span class="ln">   176</span>				<span class="comment">// hashPrev[i &amp; windowMask] has already been overwritten, so stop now.</span>
<a id="L177"></a><span class="ln">   177</span>				break
<a id="L178"></a><span class="ln">   178</span>			}
<a id="L179"></a><span class="ln">   179</span>			if i = d.hashPrev[i&amp;windowMask] - d.hashOffset; i &lt; minIndex || i &lt; 0 {
<a id="L180"></a><span class="ln">   180</span>				break
<a id="L181"></a><span class="ln">   181</span>			}
<a id="L182"></a><span class="ln">   182</span>		}
<a id="L183"></a><span class="ln">   183</span>		return
<a id="L184"></a><span class="ln">   184</span>	}
<a id="L185"></a><span class="ln">   185</span>	
<a id="L186"></a><span class="ln">   186</span>	func (d *compressor) writeStoredBlock(buf []byte) error {
<a id="L187"></a><span class="ln">   187</span>		if d.w.writeStoredHeader(len(buf), false); d.w.err != nil {
<a id="L188"></a><span class="ln">   188</span>			return d.w.err
<a id="L189"></a><span class="ln">   189</span>		}
<a id="L190"></a><span class="ln">   190</span>		d.w.writeBytes(buf)
<a id="L191"></a><span class="ln">   191</span>		return d.w.err
<a id="L192"></a><span class="ln">   192</span>	}
<a id="L193"></a><span class="ln">   193</span>	
<a id="L194"></a><span class="ln">   194</span>	func (d *compressor) initDeflate() {
<a id="L195"></a><span class="ln">   195</span>		d.hashHead = make([]int, hashSize)
<a id="L196"></a><span class="ln">   196</span>		d.hashPrev = make([]int, windowSize)
<a id="L197"></a><span class="ln">   197</span>		d.window = make([]byte, 2*windowSize)
<a id="L198"></a><span class="ln">   198</span>		d.hashOffset = 1
<a id="L199"></a><span class="ln">   199</span>		d.tokens = make([]token, 0, maxFlateBlockTokens+1)
<a id="L200"></a><span class="ln">   200</span>		d.length = minMatchLength - 1
<a id="L201"></a><span class="ln">   201</span>		d.offset = 0
<a id="L202"></a><span class="ln">   202</span>		d.byteAvailable = false
<a id="L203"></a><span class="ln">   203</span>		d.index = 0
<a id="L204"></a><span class="ln">   204</span>		d.hash = 0
<a id="L205"></a><span class="ln">   205</span>		d.chainHead = -1
<a id="L206"></a><span class="ln">   206</span>	}
<a id="L207"></a><span class="ln">   207</span>	
<a id="L208"></a><span class="ln">   208</span>	func (d *compressor) deflate() {
<a id="L209"></a><span class="ln">   209</span>		if d.windowEnd-d.index &lt; minMatchLength+maxMatchLength &amp;&amp; !d.sync {
<a id="L210"></a><span class="ln">   210</span>			return
<a id="L211"></a><span class="ln">   211</span>		}
<a id="L212"></a><span class="ln">   212</span>	
<a id="L213"></a><span class="ln">   213</span>		d.maxInsertIndex = d.windowEnd - (minMatchLength - 1)
<a id="L214"></a><span class="ln">   214</span>		if d.index &lt; d.maxInsertIndex {
<a id="L215"></a><span class="ln">   215</span>			d.hash = int(d.window[d.index])&lt;&lt;hashShift + int(d.window[d.index+1])
<a id="L216"></a><span class="ln">   216</span>		}
<a id="L217"></a><span class="ln">   217</span>	
<a id="L218"></a><span class="ln">   218</span>	Loop:
<a id="L219"></a><span class="ln">   219</span>		for {
<a id="L220"></a><span class="ln">   220</span>			if d.index &gt; d.windowEnd {
<a id="L221"></a><span class="ln">   221</span>				panic(&#34;index &gt; windowEnd&#34;)
<a id="L222"></a><span class="ln">   222</span>			}
<a id="L223"></a><span class="ln">   223</span>			lookahead := d.windowEnd - d.index
<a id="L224"></a><span class="ln">   224</span>			if lookahead &lt; minMatchLength+maxMatchLength {
<a id="L225"></a><span class="ln">   225</span>				if !d.sync {
<a id="L226"></a><span class="ln">   226</span>					break Loop
<a id="L227"></a><span class="ln">   227</span>				}
<a id="L228"></a><span class="ln">   228</span>				if d.index &gt; d.windowEnd {
<a id="L229"></a><span class="ln">   229</span>					panic(&#34;index &gt; windowEnd&#34;)
<a id="L230"></a><span class="ln">   230</span>				}
<a id="L231"></a><span class="ln">   231</span>				if lookahead == 0 {
<a id="L232"></a><span class="ln">   232</span>					<span class="comment">// Flush current output block if any.</span>
<a id="L233"></a><span class="ln">   233</span>					if d.byteAvailable {
<a id="L234"></a><span class="ln">   234</span>						<span class="comment">// There is still one pending token that needs to be flushed</span>
<a id="L235"></a><span class="ln">   235</span>						d.tokens = append(d.tokens, literalToken(uint32(d.window[d.index-1])))
<a id="L236"></a><span class="ln">   236</span>						d.byteAvailable = false
<a id="L237"></a><span class="ln">   237</span>					}
<a id="L238"></a><span class="ln">   238</span>					if len(d.tokens) &gt; 0 {
<a id="L239"></a><span class="ln">   239</span>						if d.err = d.writeBlock(d.tokens, d.index, false); d.err != nil {
<a id="L240"></a><span class="ln">   240</span>							return
<a id="L241"></a><span class="ln">   241</span>						}
<a id="L242"></a><span class="ln">   242</span>						d.tokens = d.tokens[:0]
<a id="L243"></a><span class="ln">   243</span>					}
<a id="L244"></a><span class="ln">   244</span>					break Loop
<a id="L245"></a><span class="ln">   245</span>				}
<a id="L246"></a><span class="ln">   246</span>			}
<a id="L247"></a><span class="ln">   247</span>			if d.index &lt; d.maxInsertIndex {
<a id="L248"></a><span class="ln">   248</span>				<span class="comment">// Update the hash</span>
<a id="L249"></a><span class="ln">   249</span>				d.hash = (d.hash&lt;&lt;hashShift + int(d.window[d.index+2])) &amp; hashMask
<a id="L250"></a><span class="ln">   250</span>				d.chainHead = d.hashHead[d.hash]
<a id="L251"></a><span class="ln">   251</span>				d.hashPrev[d.index&amp;windowMask] = d.chainHead
<a id="L252"></a><span class="ln">   252</span>				d.hashHead[d.hash] = d.index + d.hashOffset
<a id="L253"></a><span class="ln">   253</span>			}
<a id="L254"></a><span class="ln">   254</span>			prevLength := d.length
<a id="L255"></a><span class="ln">   255</span>			prevOffset := d.offset
<a id="L256"></a><span class="ln">   256</span>			d.length = minMatchLength - 1
<a id="L257"></a><span class="ln">   257</span>			d.offset = 0
<a id="L258"></a><span class="ln">   258</span>			minIndex := d.index - windowSize
<a id="L259"></a><span class="ln">   259</span>			if minIndex &lt; 0 {
<a id="L260"></a><span class="ln">   260</span>				minIndex = 0
<a id="L261"></a><span class="ln">   261</span>			}
<a id="L262"></a><span class="ln">   262</span>	
<a id="L263"></a><span class="ln">   263</span>			if d.chainHead-d.hashOffset &gt;= minIndex &amp;&amp;
<a id="L264"></a><span class="ln">   264</span>				(d.fastSkipHashing != skipNever &amp;&amp; lookahead &gt; minMatchLength-1 ||
<a id="L265"></a><span class="ln">   265</span>					d.fastSkipHashing == skipNever &amp;&amp; lookahead &gt; prevLength &amp;&amp; prevLength &lt; d.lazy) {
<a id="L266"></a><span class="ln">   266</span>				if newLength, newOffset, ok := d.findMatch(d.index, d.chainHead-d.hashOffset, minMatchLength-1, lookahead); ok {
<a id="L267"></a><span class="ln">   267</span>					d.length = newLength
<a id="L268"></a><span class="ln">   268</span>					d.offset = newOffset
<a id="L269"></a><span class="ln">   269</span>				}
<a id="L270"></a><span class="ln">   270</span>			}
<a id="L271"></a><span class="ln">   271</span>			if d.fastSkipHashing != skipNever &amp;&amp; d.length &gt;= minMatchLength ||
<a id="L272"></a><span class="ln">   272</span>				d.fastSkipHashing == skipNever &amp;&amp; prevLength &gt;= minMatchLength &amp;&amp; d.length &lt;= prevLength {
<a id="L273"></a><span class="ln">   273</span>				<span class="comment">// There was a match at the previous step, and the current match is</span>
<a id="L274"></a><span class="ln">   274</span>				<span class="comment">// not better. Output the previous match.</span>
<a id="L275"></a><span class="ln">   275</span>				if d.fastSkipHashing != skipNever {
<a id="L276"></a><span class="ln">   276</span>					d.tokens = append(d.tokens, matchToken(uint32(d.length-minMatchLength), uint32(d.offset-minOffsetSize)))
<a id="L277"></a><span class="ln">   277</span>				} else {
<a id="L278"></a><span class="ln">   278</span>					d.tokens = append(d.tokens, matchToken(uint32(prevLength-minMatchLength), uint32(prevOffset-minOffsetSize)))
<a id="L279"></a><span class="ln">   279</span>				}
<a id="L280"></a><span class="ln">   280</span>				<span class="comment">// Insert in the hash table all strings up to the end of the match.</span>
<a id="L281"></a><span class="ln">   281</span>				<span class="comment">// index and index-1 are already inserted. If there is not enough</span>
<a id="L282"></a><span class="ln">   282</span>				<span class="comment">// lookahead, the last two strings are not inserted into the hash</span>
<a id="L283"></a><span class="ln">   283</span>				<span class="comment">// table.</span>
<a id="L284"></a><span class="ln">   284</span>				if d.length &lt;= d.fastSkipHashing {
<a id="L285"></a><span class="ln">   285</span>					var newIndex int
<a id="L286"></a><span class="ln">   286</span>					if d.fastSkipHashing != skipNever {
<a id="L287"></a><span class="ln">   287</span>						newIndex = d.index + d.length
<a id="L288"></a><span class="ln">   288</span>					} else {
<a id="L289"></a><span class="ln">   289</span>						newIndex = d.index + prevLength - 1
<a id="L290"></a><span class="ln">   290</span>					}
<a id="L291"></a><span class="ln">   291</span>					for d.index++; d.index &lt; newIndex; d.index++ {
<a id="L292"></a><span class="ln">   292</span>						if d.index &lt; d.maxInsertIndex {
<a id="L293"></a><span class="ln">   293</span>							d.hash = (d.hash&lt;&lt;hashShift + int(d.window[d.index+2])) &amp; hashMask
<a id="L294"></a><span class="ln">   294</span>							<span class="comment">// Get previous value with the same hash.</span>
<a id="L295"></a><span class="ln">   295</span>							<span class="comment">// Our chain should point to the previous value.</span>
<a id="L296"></a><span class="ln">   296</span>							d.hashPrev[d.index&amp;windowMask] = d.hashHead[d.hash]
<a id="L297"></a><span class="ln">   297</span>							<span class="comment">// Set the head of the hash chain to us.</span>
<a id="L298"></a><span class="ln">   298</span>							d.hashHead[d.hash] = d.index + d.hashOffset
<a id="L299"></a><span class="ln">   299</span>						}
<a id="L300"></a><span class="ln">   300</span>					}
<a id="L301"></a><span class="ln">   301</span>					if d.fastSkipHashing == skipNever {
<a id="L302"></a><span class="ln">   302</span>						d.byteAvailable = false
<a id="L303"></a><span class="ln">   303</span>						d.length = minMatchLength - 1
<a id="L304"></a><span class="ln">   304</span>					}
<a id="L305"></a><span class="ln">   305</span>				} else {
<a id="L306"></a><span class="ln">   306</span>					<span class="comment">// For matches this long, we don&#39;t bother inserting each individual</span>
<a id="L307"></a><span class="ln">   307</span>					<span class="comment">// item into the table.</span>
<a id="L308"></a><span class="ln">   308</span>					d.index += d.length
<a id="L309"></a><span class="ln">   309</span>					if d.index &lt; d.maxInsertIndex {
<a id="L310"></a><span class="ln">   310</span>						d.hash = (int(d.window[d.index])&lt;&lt;hashShift + int(d.window[d.index+1]))
<a id="L311"></a><span class="ln">   311</span>					}
<a id="L312"></a><span class="ln">   312</span>				}
<a id="L313"></a><span class="ln">   313</span>				if len(d.tokens) == maxFlateBlockTokens {
<a id="L314"></a><span class="ln">   314</span>					<span class="comment">// The block includes the current character</span>
<a id="L315"></a><span class="ln">   315</span>					if d.err = d.writeBlock(d.tokens, d.index, false); d.err != nil {
<a id="L316"></a><span class="ln">   316</span>						return
<a id="L317"></a><span class="ln">   317</span>					}
<a id="L318"></a><span class="ln">   318</span>					d.tokens = d.tokens[:0]
<a id="L319"></a><span class="ln">   319</span>				}
<a id="L320"></a><span class="ln">   320</span>			} else {
<a id="L321"></a><span class="ln">   321</span>				if d.fastSkipHashing != skipNever || d.byteAvailable {
<a id="L322"></a><span class="ln">   322</span>					i := d.index - 1
<a id="L323"></a><span class="ln">   323</span>					if d.fastSkipHashing != skipNever {
<a id="L324"></a><span class="ln">   324</span>						i = d.index
<a id="L325"></a><span class="ln">   325</span>					}
<a id="L326"></a><span class="ln">   326</span>					d.tokens = append(d.tokens, literalToken(uint32(d.window[i])))
<a id="L327"></a><span class="ln">   327</span>					if len(d.tokens) == maxFlateBlockTokens {
<a id="L328"></a><span class="ln">   328</span>						if d.err = d.writeBlock(d.tokens, i+1, false); d.err != nil {
<a id="L329"></a><span class="ln">   329</span>							return
<a id="L330"></a><span class="ln">   330</span>						}
<a id="L331"></a><span class="ln">   331</span>						d.tokens = d.tokens[:0]
<a id="L332"></a><span class="ln">   332</span>					}
<a id="L333"></a><span class="ln">   333</span>				}
<a id="L334"></a><span class="ln">   334</span>				d.index++
<a id="L335"></a><span class="ln">   335</span>				if d.fastSkipHashing == skipNever {
<a id="L336"></a><span class="ln">   336</span>					d.byteAvailable = true
<a id="L337"></a><span class="ln">   337</span>				}
<a id="L338"></a><span class="ln">   338</span>			}
<a id="L339"></a><span class="ln">   339</span>		}
<a id="L340"></a><span class="ln">   340</span>	}
<a id="L341"></a><span class="ln">   341</span>	
<a id="L342"></a><span class="ln">   342</span>	func (d *compressor) fillStore(b []byte) int {
<a id="L343"></a><span class="ln">   343</span>		n := copy(d.window[d.windowEnd:], b)
<a id="L344"></a><span class="ln">   344</span>		d.windowEnd += n
<a id="L345"></a><span class="ln">   345</span>		return n
<a id="L346"></a><span class="ln">   346</span>	}
<a id="L347"></a><span class="ln">   347</span>	
<a id="L348"></a><span class="ln">   348</span>	func (d *compressor) store() {
<a id="L349"></a><span class="ln">   349</span>		if d.windowEnd &gt; 0 {
<a id="L350"></a><span class="ln">   350</span>			d.err = d.writeStoredBlock(d.window[:d.windowEnd])
<a id="L351"></a><span class="ln">   351</span>		}
<a id="L352"></a><span class="ln">   352</span>		d.windowEnd = 0
<a id="L353"></a><span class="ln">   353</span>	}
<a id="L354"></a><span class="ln">   354</span>	
<a id="L355"></a><span class="ln">   355</span>	func (d *compressor) write(b []byte) (n int, err error) {
<a id="L356"></a><span class="ln">   356</span>		n = len(b)
<a id="L357"></a><span class="ln">   357</span>		b = b[d.fill(d, b):]
<a id="L358"></a><span class="ln">   358</span>		for len(b) &gt; 0 {
<a id="L359"></a><span class="ln">   359</span>			d.step(d)
<a id="L360"></a><span class="ln">   360</span>			b = b[d.fill(d, b):]
<a id="L361"></a><span class="ln">   361</span>		}
<a id="L362"></a><span class="ln">   362</span>		return n, d.err
<a id="L363"></a><span class="ln">   363</span>	}
<a id="L364"></a><span class="ln">   364</span>	
<a id="L365"></a><span class="ln">   365</span>	func (d *compressor) syncFlush() error {
<a id="L366"></a><span class="ln">   366</span>		d.sync = true
<a id="L367"></a><span class="ln">   367</span>		d.step(d)
<a id="L368"></a><span class="ln">   368</span>		if d.err == nil {
<a id="L369"></a><span class="ln">   369</span>			d.w.writeStoredHeader(0, false)
<a id="L370"></a><span class="ln">   370</span>			d.w.flush()
<a id="L371"></a><span class="ln">   371</span>			d.err = d.w.err
<a id="L372"></a><span class="ln">   372</span>		}
<a id="L373"></a><span class="ln">   373</span>		d.sync = false
<a id="L374"></a><span class="ln">   374</span>		return d.err
<a id="L375"></a><span class="ln">   375</span>	}
<a id="L376"></a><span class="ln">   376</span>	
<a id="L377"></a><span class="ln">   377</span>	func (d *compressor) init(w io.Writer, level int) (err error) {
<a id="L378"></a><span class="ln">   378</span>		d.w = newHuffmanBitWriter(w)
<a id="L379"></a><span class="ln">   379</span>	
<a id="L380"></a><span class="ln">   380</span>		switch {
<a id="L381"></a><span class="ln">   381</span>		case level == NoCompression:
<a id="L382"></a><span class="ln">   382</span>			d.window = make([]byte, maxStoreBlockSize)
<a id="L383"></a><span class="ln">   383</span>			d.fill = (*compressor).fillStore
<a id="L384"></a><span class="ln">   384</span>			d.step = (*compressor).store
<a id="L385"></a><span class="ln">   385</span>		case level == DefaultCompression:
<a id="L386"></a><span class="ln">   386</span>			level = 6
<a id="L387"></a><span class="ln">   387</span>			fallthrough
<a id="L388"></a><span class="ln">   388</span>		case 1 &lt;= level &amp;&amp; level &lt;= 9:
<a id="L389"></a><span class="ln">   389</span>			d.compressionLevel = levels[level]
<a id="L390"></a><span class="ln">   390</span>			d.initDeflate()
<a id="L391"></a><span class="ln">   391</span>			d.fill = (*compressor).fillDeflate
<a id="L392"></a><span class="ln">   392</span>			d.step = (*compressor).deflate
<a id="L393"></a><span class="ln">   393</span>		default:
<a id="L394"></a><span class="ln">   394</span>			return fmt.Errorf(&#34;flate: invalid compression level %d: want value in range [-1, 9]&#34;, level)
<a id="L395"></a><span class="ln">   395</span>		}
<a id="L396"></a><span class="ln">   396</span>		return nil
<a id="L397"></a><span class="ln">   397</span>	}
<a id="L398"></a><span class="ln">   398</span>	
<a id="L399"></a><span class="ln">   399</span>	func (d *compressor) close() error {
<a id="L400"></a><span class="ln">   400</span>		d.sync = true
<a id="L401"></a><span class="ln">   401</span>		d.step(d)
<a id="L402"></a><span class="ln">   402</span>		if d.err != nil {
<a id="L403"></a><span class="ln">   403</span>			return d.err
<a id="L404"></a><span class="ln">   404</span>		}
<a id="L405"></a><span class="ln">   405</span>		if d.w.writeStoredHeader(0, true); d.w.err != nil {
<a id="L406"></a><span class="ln">   406</span>			return d.w.err
<a id="L407"></a><span class="ln">   407</span>		}
<a id="L408"></a><span class="ln">   408</span>		d.w.flush()
<a id="L409"></a><span class="ln">   409</span>		return d.w.err
<a id="L410"></a><span class="ln">   410</span>	}
<a id="L411"></a><span class="ln">   411</span>	
<a id="L412"></a><span class="ln">   412</span>	<span class="comment">// NewWriter returns a new Writer compressing data at the given level.</span>
<a id="L413"></a><span class="ln">   413</span>	<span class="comment">// Following zlib, levels range from 1 (BestSpeed) to 9 (BestCompression);</span>
<a id="L414"></a><span class="ln">   414</span>	<span class="comment">// higher levels typically run slower but compress more. Level 0</span>
<a id="L415"></a><span class="ln">   415</span>	<span class="comment">// (NoCompression) does not attempt any compression; it only adds the</span>
<a id="L416"></a><span class="ln">   416</span>	<span class="comment">// necessary DEFLATE framing. Level -1 (DefaultCompression) uses the default</span>
<a id="L417"></a><span class="ln">   417</span>	<span class="comment">// compression level.</span>
<a id="L418"></a><span class="ln">   418</span>	<span class="comment">//</span>
<a id="L419"></a><span class="ln">   419</span>	<span class="comment">// If level is in the range [-1, 9] then the error returned will be nil.</span>
<a id="L420"></a><span class="ln">   420</span>	<span class="comment">// Otherwise the error returned will be non-nil.</span>
<a id="L421"></a><span class="ln">   421</span>	func NewWriter(w io.Writer, level int) (*Writer, error) {
<a id="L422"></a><span class="ln">   422</span>		const logWindowSize = logMaxOffsetSize
<a id="L423"></a><span class="ln">   423</span>		var dw Writer
<a id="L424"></a><span class="ln">   424</span>		if err := dw.d.init(w, level); err != nil {
<a id="L425"></a><span class="ln">   425</span>			return nil, err
<a id="L426"></a><span class="ln">   426</span>		}
<a id="L427"></a><span class="ln">   427</span>		return &amp;dw, nil
<a id="L428"></a><span class="ln">   428</span>	}
<a id="L429"></a><span class="ln">   429</span>	
<a id="L430"></a><span class="ln">   430</span>	<span class="comment">// NewWriterDict is like NewWriter but initializes the new</span>
<a id="L431"></a><span class="ln">   431</span>	<span class="comment">// Writer with a preset dictionary.  The returned Writer behaves</span>
<a id="L432"></a><span class="ln">   432</span>	<span class="comment">// as if the dictionary had been written to it without producing</span>
<a id="L433"></a><span class="ln">   433</span>	<span class="comment">// any compressed output.  The compressed data written to w</span>
<a id="L434"></a><span class="ln">   434</span>	<span class="comment">// can only be decompressed by a Reader initialized with the</span>
<a id="L435"></a><span class="ln">   435</span>	<span class="comment">// same dictionary.</span>
<a id="L436"></a><span class="ln">   436</span>	func NewWriterDict(w io.Writer, level int, dict []byte) (*Writer, error) {
<a id="L437"></a><span class="ln">   437</span>		dw := &amp;dictWriter{w, false}
<a id="L438"></a><span class="ln">   438</span>		zw, err := NewWriter(dw, level)
<a id="L439"></a><span class="ln">   439</span>		if err != nil {
<a id="L440"></a><span class="ln">   440</span>			return nil, err
<a id="L441"></a><span class="ln">   441</span>		}
<a id="L442"></a><span class="ln">   442</span>		zw.Write(dict)
<a id="L443"></a><span class="ln">   443</span>		zw.Flush()
<a id="L444"></a><span class="ln">   444</span>		dw.enabled = true
<a id="L445"></a><span class="ln">   445</span>		return zw, err
<a id="L446"></a><span class="ln">   446</span>	}
<a id="L447"></a><span class="ln">   447</span>	
<a id="L448"></a><span class="ln">   448</span>	type dictWriter struct {
<a id="L449"></a><span class="ln">   449</span>		w       io.Writer
<a id="L450"></a><span class="ln">   450</span>		enabled bool
<a id="L451"></a><span class="ln">   451</span>	}
<a id="L452"></a><span class="ln">   452</span>	
<a id="L453"></a><span class="ln">   453</span>	func (w *dictWriter) Write(b []byte) (n int, err error) {
<a id="L454"></a><span class="ln">   454</span>		if w.enabled {
<a id="L455"></a><span class="ln">   455</span>			return w.w.Write(b)
<a id="L456"></a><span class="ln">   456</span>		}
<a id="L457"></a><span class="ln">   457</span>		return len(b), nil
<a id="L458"></a><span class="ln">   458</span>	}
<a id="L459"></a><span class="ln">   459</span>	
<a id="L460"></a><span class="ln">   460</span>	<span class="comment">// A Writer takes data written to it and writes the compressed</span>
<a id="L461"></a><span class="ln">   461</span>	<span class="comment">// form of that data to an underlying writer (see NewWriter).</span>
<a id="L462"></a><span class="ln">   462</span>	type Writer struct {
<a id="L463"></a><span class="ln">   463</span>		d compressor
<a id="L464"></a><span class="ln">   464</span>	}
<a id="L465"></a><span class="ln">   465</span>	
<a id="L466"></a><span class="ln">   466</span>	<span class="comment">// Write writes data to w, which will eventually write the</span>
<a id="L467"></a><span class="ln">   467</span>	<span class="comment">// compressed form of data to its underlying writer.</span>
<a id="L468"></a><span class="ln">   468</span>	func (w *Writer) Write(data []byte) (n int, err error) {
<a id="L469"></a><span class="ln">   469</span>		return w.d.write(data)
<a id="L470"></a><span class="ln">   470</span>	}
<a id="L471"></a><span class="ln">   471</span>	
<a id="L472"></a><span class="ln">   472</span>	<span class="comment">// Flush flushes any pending compressed data to the underlying writer.</span>
<a id="L473"></a><span class="ln">   473</span>	<span class="comment">// It is useful mainly in compressed network protocols, to ensure that</span>
<a id="L474"></a><span class="ln">   474</span>	<span class="comment">// a remote reader has enough data to reconstruct a packet.</span>
<a id="L475"></a><span class="ln">   475</span>	<span class="comment">// Flush does not return until the data has been written.</span>
<a id="L476"></a><span class="ln">   476</span>	<span class="comment">// If the underlying writer returns an error, Flush returns that error.</span>
<a id="L477"></a><span class="ln">   477</span>	<span class="comment">//</span>
<a id="L478"></a><span class="ln">   478</span>	<span class="comment">// In the terminology of the zlib library, Flush is equivalent to Z_SYNC_FLUSH.</span>
<a id="L479"></a><span class="ln">   479</span>	func (w *Writer) Flush() error {
<a id="L480"></a><span class="ln">   480</span>		<span class="comment">// For more about flushing:</span>
<a id="L481"></a><span class="ln">   481</span>		<span class="comment">// http://www.bolet.org/~pornin/deflate-flush.html</span>
<a id="L482"></a><span class="ln">   482</span>		return w.d.syncFlush()
<a id="L483"></a><span class="ln">   483</span>	}
<a id="L484"></a><span class="ln">   484</span>	
<a id="L485"></a><span class="ln">   485</span>	<span class="comment">// Close flushes and closes the writer.</span>
<a id="L486"></a><span class="ln">   486</span>	func (w *Writer) Close() error {
<a id="L487"></a><span class="ln">   487</span>		return w.d.close()
<a id="L488"></a><span class="ln">   488</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

