<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/compress/bzip2/bzip2.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/compress/bzip2/bzip2.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package bzip2 implements bzip2 decompression.</span>
<a id="L6"></a><span class="ln">     6</span>	package bzip2
<a id="L7"></a><span class="ln">     7</span>	
<a id="L8"></a><span class="ln">     8</span>	import &#34;io&#34;
<a id="L9"></a><span class="ln">     9</span>	
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// There&#39;s no RFC for bzip2. I used the Wikipedia page for reference and a lot</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// of guessing: http://en.wikipedia.org/wiki/Bzip2</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// The source code to pyflate was useful for debugging:</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// http://www.paul.sladen.org/projects/pyflate</span>
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// A StructuralError is returned when the bzip2 data is found to be</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// syntactically invalid.</span>
<a id="L17"></a><span class="ln">    17</span>	type StructuralError string
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	func (s StructuralError) Error() string {
<a id="L20"></a><span class="ln">    20</span>		return &#34;bzip2 data invalid: &#34; + string(s)
<a id="L21"></a><span class="ln">    21</span>	}
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// A reader decompresses bzip2 compressed data.</span>
<a id="L24"></a><span class="ln">    24</span>	type reader struct {
<a id="L25"></a><span class="ln">    25</span>		br        bitReader
<a id="L26"></a><span class="ln">    26</span>		setupDone bool <span class="comment">// true if we have parsed the bzip2 header.</span>
<a id="L27"></a><span class="ln">    27</span>		blockSize int  <span class="comment">// blockSize in bytes, i.e. 900 * 1024.</span>
<a id="L28"></a><span class="ln">    28</span>		eof       bool
<a id="L29"></a><span class="ln">    29</span>		buf       []byte    <span class="comment">// stores Burrows-Wheeler transformed data.</span>
<a id="L30"></a><span class="ln">    30</span>		c         [256]uint <span class="comment">// the `C&#39; array for the inverse BWT.</span>
<a id="L31"></a><span class="ln">    31</span>		tt        []uint32  <span class="comment">// mirrors the `tt&#39; array in the bzip2 source and contains the P array in the upper 24 bits.</span>
<a id="L32"></a><span class="ln">    32</span>		tPos      uint32    <span class="comment">// Index of the next output byte in tt.</span>
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>		preRLE      []uint32 <span class="comment">// contains the RLE data still to be processed.</span>
<a id="L35"></a><span class="ln">    35</span>		preRLEUsed  int      <span class="comment">// number of entries of preRLE used.</span>
<a id="L36"></a><span class="ln">    36</span>		lastByte    int      <span class="comment">// the last byte value seen.</span>
<a id="L37"></a><span class="ln">    37</span>		byteRepeats uint     <span class="comment">// the number of repeats of lastByte seen.</span>
<a id="L38"></a><span class="ln">    38</span>		repeats     uint     <span class="comment">// the number of copies of lastByte to output.</span>
<a id="L39"></a><span class="ln">    39</span>	}
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// NewReader returns an io.Reader which decompresses bzip2 data from r.</span>
<a id="L42"></a><span class="ln">    42</span>	func NewReader(r io.Reader) io.Reader {
<a id="L43"></a><span class="ln">    43</span>		bz2 := new(reader)
<a id="L44"></a><span class="ln">    44</span>		bz2.br = newBitReader(r)
<a id="L45"></a><span class="ln">    45</span>		return bz2
<a id="L46"></a><span class="ln">    46</span>	}
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>	const bzip2FileMagic = 0x425a <span class="comment">// &#34;BZ&#34;</span>
<a id="L49"></a><span class="ln">    49</span>	const bzip2BlockMagic = 0x314159265359
<a id="L50"></a><span class="ln">    50</span>	const bzip2FinalMagic = 0x177245385090
<a id="L51"></a><span class="ln">    51</span>	
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// setup parses the bzip2 header.</span>
<a id="L53"></a><span class="ln">    53</span>	func (bz2 *reader) setup() error {
<a id="L54"></a><span class="ln">    54</span>		br := &amp;bz2.br
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>		magic := br.ReadBits(16)
<a id="L57"></a><span class="ln">    57</span>		if magic != bzip2FileMagic {
<a id="L58"></a><span class="ln">    58</span>			return StructuralError(&#34;bad magic value&#34;)
<a id="L59"></a><span class="ln">    59</span>		}
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>		t := br.ReadBits(8)
<a id="L62"></a><span class="ln">    62</span>		if t != &#39;h&#39; {
<a id="L63"></a><span class="ln">    63</span>			return StructuralError(&#34;non-Huffman entropy encoding&#34;)
<a id="L64"></a><span class="ln">    64</span>		}
<a id="L65"></a><span class="ln">    65</span>	
<a id="L66"></a><span class="ln">    66</span>		level := br.ReadBits(8)
<a id="L67"></a><span class="ln">    67</span>		if level &lt; &#39;1&#39; || level &gt; &#39;9&#39; {
<a id="L68"></a><span class="ln">    68</span>			return StructuralError(&#34;invalid compression level&#34;)
<a id="L69"></a><span class="ln">    69</span>		}
<a id="L70"></a><span class="ln">    70</span>	
<a id="L71"></a><span class="ln">    71</span>		bz2.blockSize = 100 * 1024 * (int(level) - &#39;0&#39;)
<a id="L72"></a><span class="ln">    72</span>		bz2.tt = make([]uint32, bz2.blockSize)
<a id="L73"></a><span class="ln">    73</span>		return nil
<a id="L74"></a><span class="ln">    74</span>	}
<a id="L75"></a><span class="ln">    75</span>	
<a id="L76"></a><span class="ln">    76</span>	func (bz2 *reader) Read(buf []byte) (n int, err error) {
<a id="L77"></a><span class="ln">    77</span>		if bz2.eof {
<a id="L78"></a><span class="ln">    78</span>			return 0, io.EOF
<a id="L79"></a><span class="ln">    79</span>		}
<a id="L80"></a><span class="ln">    80</span>	
<a id="L81"></a><span class="ln">    81</span>		if !bz2.setupDone {
<a id="L82"></a><span class="ln">    82</span>			err = bz2.setup()
<a id="L83"></a><span class="ln">    83</span>			brErr := bz2.br.Err()
<a id="L84"></a><span class="ln">    84</span>			if brErr != nil {
<a id="L85"></a><span class="ln">    85</span>				err = brErr
<a id="L86"></a><span class="ln">    86</span>			}
<a id="L87"></a><span class="ln">    87</span>			if err != nil {
<a id="L88"></a><span class="ln">    88</span>				return 0, err
<a id="L89"></a><span class="ln">    89</span>			}
<a id="L90"></a><span class="ln">    90</span>			bz2.setupDone = true
<a id="L91"></a><span class="ln">    91</span>		}
<a id="L92"></a><span class="ln">    92</span>	
<a id="L93"></a><span class="ln">    93</span>		n, err = bz2.read(buf)
<a id="L94"></a><span class="ln">    94</span>		brErr := bz2.br.Err()
<a id="L95"></a><span class="ln">    95</span>		if brErr != nil {
<a id="L96"></a><span class="ln">    96</span>			err = brErr
<a id="L97"></a><span class="ln">    97</span>		}
<a id="L98"></a><span class="ln">    98</span>		return
<a id="L99"></a><span class="ln">    99</span>	}
<a id="L100"></a><span class="ln">   100</span>	
<a id="L101"></a><span class="ln">   101</span>	func (bz2 *reader) read(buf []byte) (n int, err error) {
<a id="L102"></a><span class="ln">   102</span>		<span class="comment">// bzip2 is a block based compressor, except that it has a run-length</span>
<a id="L103"></a><span class="ln">   103</span>		<span class="comment">// preprocessing step. The block based nature means that we can</span>
<a id="L104"></a><span class="ln">   104</span>		<span class="comment">// preallocate fixed-size buffers and reuse them. However, the RLE</span>
<a id="L105"></a><span class="ln">   105</span>		<span class="comment">// preprocessing would require allocating huge buffers to store the</span>
<a id="L106"></a><span class="ln">   106</span>		<span class="comment">// maximum expansion. Thus we process blocks all at once, except for</span>
<a id="L107"></a><span class="ln">   107</span>		<span class="comment">// the RLE which we decompress as required.</span>
<a id="L108"></a><span class="ln">   108</span>	
<a id="L109"></a><span class="ln">   109</span>		for (bz2.repeats &gt; 0 || bz2.preRLEUsed &lt; len(bz2.preRLE)) &amp;&amp; n &lt; len(buf) {
<a id="L110"></a><span class="ln">   110</span>			<span class="comment">// We have RLE data pending.</span>
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>			<span class="comment">// The run-length encoding works like this:</span>
<a id="L113"></a><span class="ln">   113</span>			<span class="comment">// Any sequence of four equal bytes is followed by a length</span>
<a id="L114"></a><span class="ln">   114</span>			<span class="comment">// byte which contains the number of repeats of that byte to</span>
<a id="L115"></a><span class="ln">   115</span>			<span class="comment">// include. (The number of repeats can be zero.) Because we are</span>
<a id="L116"></a><span class="ln">   116</span>			<span class="comment">// decompressing on-demand our state is kept in the reader</span>
<a id="L117"></a><span class="ln">   117</span>			<span class="comment">// object.</span>
<a id="L118"></a><span class="ln">   118</span>	
<a id="L119"></a><span class="ln">   119</span>			if bz2.repeats &gt; 0 {
<a id="L120"></a><span class="ln">   120</span>				buf[n] = byte(bz2.lastByte)
<a id="L121"></a><span class="ln">   121</span>				n++
<a id="L122"></a><span class="ln">   122</span>				bz2.repeats--
<a id="L123"></a><span class="ln">   123</span>				if bz2.repeats == 0 {
<a id="L124"></a><span class="ln">   124</span>					bz2.lastByte = -1
<a id="L125"></a><span class="ln">   125</span>				}
<a id="L126"></a><span class="ln">   126</span>				continue
<a id="L127"></a><span class="ln">   127</span>			}
<a id="L128"></a><span class="ln">   128</span>	
<a id="L129"></a><span class="ln">   129</span>			bz2.tPos = bz2.preRLE[bz2.tPos]
<a id="L130"></a><span class="ln">   130</span>			b := byte(bz2.tPos)
<a id="L131"></a><span class="ln">   131</span>			bz2.tPos &gt;&gt;= 8
<a id="L132"></a><span class="ln">   132</span>			bz2.preRLEUsed++
<a id="L133"></a><span class="ln">   133</span>	
<a id="L134"></a><span class="ln">   134</span>			if bz2.byteRepeats == 3 {
<a id="L135"></a><span class="ln">   135</span>				bz2.repeats = uint(b)
<a id="L136"></a><span class="ln">   136</span>				bz2.byteRepeats = 0
<a id="L137"></a><span class="ln">   137</span>				continue
<a id="L138"></a><span class="ln">   138</span>			}
<a id="L139"></a><span class="ln">   139</span>	
<a id="L140"></a><span class="ln">   140</span>			if bz2.lastByte == int(b) {
<a id="L141"></a><span class="ln">   141</span>				bz2.byteRepeats++
<a id="L142"></a><span class="ln">   142</span>			} else {
<a id="L143"></a><span class="ln">   143</span>				bz2.byteRepeats = 0
<a id="L144"></a><span class="ln">   144</span>			}
<a id="L145"></a><span class="ln">   145</span>			bz2.lastByte = int(b)
<a id="L146"></a><span class="ln">   146</span>	
<a id="L147"></a><span class="ln">   147</span>			buf[n] = b
<a id="L148"></a><span class="ln">   148</span>			n++
<a id="L149"></a><span class="ln">   149</span>		}
<a id="L150"></a><span class="ln">   150</span>	
<a id="L151"></a><span class="ln">   151</span>		if n &gt; 0 {
<a id="L152"></a><span class="ln">   152</span>			return
<a id="L153"></a><span class="ln">   153</span>		}
<a id="L154"></a><span class="ln">   154</span>	
<a id="L155"></a><span class="ln">   155</span>		<span class="comment">// No RLE data is pending so we need to read a block.</span>
<a id="L156"></a><span class="ln">   156</span>	
<a id="L157"></a><span class="ln">   157</span>		br := &amp;bz2.br
<a id="L158"></a><span class="ln">   158</span>		magic := br.ReadBits64(48)
<a id="L159"></a><span class="ln">   159</span>		if magic == bzip2FinalMagic {
<a id="L160"></a><span class="ln">   160</span>			br.ReadBits64(32) <span class="comment">// ignored CRC</span>
<a id="L161"></a><span class="ln">   161</span>			bz2.eof = true
<a id="L162"></a><span class="ln">   162</span>			return 0, io.EOF
<a id="L163"></a><span class="ln">   163</span>		} else if magic != bzip2BlockMagic {
<a id="L164"></a><span class="ln">   164</span>			return 0, StructuralError(&#34;bad magic value found&#34;)
<a id="L165"></a><span class="ln">   165</span>		}
<a id="L166"></a><span class="ln">   166</span>	
<a id="L167"></a><span class="ln">   167</span>		err = bz2.readBlock()
<a id="L168"></a><span class="ln">   168</span>		if err != nil {
<a id="L169"></a><span class="ln">   169</span>			return 0, err
<a id="L170"></a><span class="ln">   170</span>		}
<a id="L171"></a><span class="ln">   171</span>	
<a id="L172"></a><span class="ln">   172</span>		return bz2.read(buf)
<a id="L173"></a><span class="ln">   173</span>	}
<a id="L174"></a><span class="ln">   174</span>	
<a id="L175"></a><span class="ln">   175</span>	<span class="comment">// readBlock reads a bzip2 block. The magic number should already have been consumed.</span>
<a id="L176"></a><span class="ln">   176</span>	func (bz2 *reader) readBlock() (err error) {
<a id="L177"></a><span class="ln">   177</span>		br := &amp;bz2.br
<a id="L178"></a><span class="ln">   178</span>		br.ReadBits64(32) <span class="comment">// skip checksum. TODO: check it if we can figure out what it is.</span>
<a id="L179"></a><span class="ln">   179</span>		randomized := br.ReadBits(1)
<a id="L180"></a><span class="ln">   180</span>		if randomized != 0 {
<a id="L181"></a><span class="ln">   181</span>			return StructuralError(&#34;deprecated randomized files&#34;)
<a id="L182"></a><span class="ln">   182</span>		}
<a id="L183"></a><span class="ln">   183</span>		origPtr := uint(br.ReadBits(24))
<a id="L184"></a><span class="ln">   184</span>	
<a id="L185"></a><span class="ln">   185</span>		<span class="comment">// If not every byte value is used in the block (i.e., it&#39;s text) then</span>
<a id="L186"></a><span class="ln">   186</span>		<span class="comment">// the symbol set is reduced. The symbols used are stored as a</span>
<a id="L187"></a><span class="ln">   187</span>		<span class="comment">// two-level, 16x16 bitmap.</span>
<a id="L188"></a><span class="ln">   188</span>		symbolRangeUsedBitmap := br.ReadBits(16)
<a id="L189"></a><span class="ln">   189</span>		symbolPresent := make([]bool, 256)
<a id="L190"></a><span class="ln">   190</span>		numSymbols := 0
<a id="L191"></a><span class="ln">   191</span>		for symRange := uint(0); symRange &lt; 16; symRange++ {
<a id="L192"></a><span class="ln">   192</span>			if symbolRangeUsedBitmap&amp;(1&lt;&lt;(15-symRange)) != 0 {
<a id="L193"></a><span class="ln">   193</span>				bits := br.ReadBits(16)
<a id="L194"></a><span class="ln">   194</span>				for symbol := uint(0); symbol &lt; 16; symbol++ {
<a id="L195"></a><span class="ln">   195</span>					if bits&amp;(1&lt;&lt;(15-symbol)) != 0 {
<a id="L196"></a><span class="ln">   196</span>						symbolPresent[16*symRange+symbol] = true
<a id="L197"></a><span class="ln">   197</span>						numSymbols++
<a id="L198"></a><span class="ln">   198</span>					}
<a id="L199"></a><span class="ln">   199</span>				}
<a id="L200"></a><span class="ln">   200</span>			}
<a id="L201"></a><span class="ln">   201</span>		}
<a id="L202"></a><span class="ln">   202</span>	
<a id="L203"></a><span class="ln">   203</span>		<span class="comment">// A block uses between two and six different Huffman trees.</span>
<a id="L204"></a><span class="ln">   204</span>		numHuffmanTrees := br.ReadBits(3)
<a id="L205"></a><span class="ln">   205</span>		if numHuffmanTrees &lt; 2 || numHuffmanTrees &gt; 6 {
<a id="L206"></a><span class="ln">   206</span>			return StructuralError(&#34;invalid number of Huffman trees&#34;)
<a id="L207"></a><span class="ln">   207</span>		}
<a id="L208"></a><span class="ln">   208</span>	
<a id="L209"></a><span class="ln">   209</span>		<span class="comment">// The Huffman tree can switch every 50 symbols so there&#39;s a list of</span>
<a id="L210"></a><span class="ln">   210</span>		<span class="comment">// tree indexes telling us which tree to use for each 50 symbol block.</span>
<a id="L211"></a><span class="ln">   211</span>		numSelectors := br.ReadBits(15)
<a id="L212"></a><span class="ln">   212</span>		treeIndexes := make([]uint8, numSelectors)
<a id="L213"></a><span class="ln">   213</span>	
<a id="L214"></a><span class="ln">   214</span>		<span class="comment">// The tree indexes are move-to-front transformed and stored as unary</span>
<a id="L215"></a><span class="ln">   215</span>		<span class="comment">// numbers.</span>
<a id="L216"></a><span class="ln">   216</span>		mtfTreeDecoder := newMTFDecoderWithRange(numHuffmanTrees)
<a id="L217"></a><span class="ln">   217</span>		for i := range treeIndexes {
<a id="L218"></a><span class="ln">   218</span>			c := 0
<a id="L219"></a><span class="ln">   219</span>			for {
<a id="L220"></a><span class="ln">   220</span>				inc := br.ReadBits(1)
<a id="L221"></a><span class="ln">   221</span>				if inc == 0 {
<a id="L222"></a><span class="ln">   222</span>					break
<a id="L223"></a><span class="ln">   223</span>				}
<a id="L224"></a><span class="ln">   224</span>				c++
<a id="L225"></a><span class="ln">   225</span>			}
<a id="L226"></a><span class="ln">   226</span>			if c &gt;= numHuffmanTrees {
<a id="L227"></a><span class="ln">   227</span>				return StructuralError(&#34;tree index too large&#34;)
<a id="L228"></a><span class="ln">   228</span>			}
<a id="L229"></a><span class="ln">   229</span>			treeIndexes[i] = uint8(mtfTreeDecoder.Decode(c))
<a id="L230"></a><span class="ln">   230</span>		}
<a id="L231"></a><span class="ln">   231</span>	
<a id="L232"></a><span class="ln">   232</span>		<span class="comment">// The list of symbols for the move-to-front transform is taken from</span>
<a id="L233"></a><span class="ln">   233</span>		<span class="comment">// the previously decoded symbol bitmap.</span>
<a id="L234"></a><span class="ln">   234</span>		symbols := make([]byte, numSymbols)
<a id="L235"></a><span class="ln">   235</span>		nextSymbol := 0
<a id="L236"></a><span class="ln">   236</span>		for i := 0; i &lt; 256; i++ {
<a id="L237"></a><span class="ln">   237</span>			if symbolPresent[i] {
<a id="L238"></a><span class="ln">   238</span>				symbols[nextSymbol] = byte(i)
<a id="L239"></a><span class="ln">   239</span>				nextSymbol++
<a id="L240"></a><span class="ln">   240</span>			}
<a id="L241"></a><span class="ln">   241</span>		}
<a id="L242"></a><span class="ln">   242</span>		mtf := newMTFDecoder(symbols)
<a id="L243"></a><span class="ln">   243</span>	
<a id="L244"></a><span class="ln">   244</span>		numSymbols += 2 <span class="comment">// to account for RUNA and RUNB symbols</span>
<a id="L245"></a><span class="ln">   245</span>		huffmanTrees := make([]huffmanTree, numHuffmanTrees)
<a id="L246"></a><span class="ln">   246</span>	
<a id="L247"></a><span class="ln">   247</span>		<span class="comment">// Now we decode the arrays of code-lengths for each tree.</span>
<a id="L248"></a><span class="ln">   248</span>		lengths := make([]uint8, numSymbols)
<a id="L249"></a><span class="ln">   249</span>		for i := 0; i &lt; numHuffmanTrees; i++ {
<a id="L250"></a><span class="ln">   250</span>			<span class="comment">// The code lengths are delta encoded from a 5-bit base value.</span>
<a id="L251"></a><span class="ln">   251</span>			length := br.ReadBits(5)
<a id="L252"></a><span class="ln">   252</span>			for j := 0; j &lt; numSymbols; j++ {
<a id="L253"></a><span class="ln">   253</span>				for {
<a id="L254"></a><span class="ln">   254</span>					if !br.ReadBit() {
<a id="L255"></a><span class="ln">   255</span>						break
<a id="L256"></a><span class="ln">   256</span>					}
<a id="L257"></a><span class="ln">   257</span>					if br.ReadBit() {
<a id="L258"></a><span class="ln">   258</span>						length--
<a id="L259"></a><span class="ln">   259</span>					} else {
<a id="L260"></a><span class="ln">   260</span>						length++
<a id="L261"></a><span class="ln">   261</span>					}
<a id="L262"></a><span class="ln">   262</span>				}
<a id="L263"></a><span class="ln">   263</span>				if length &lt; 0 || length &gt; 20 {
<a id="L264"></a><span class="ln">   264</span>					return StructuralError(&#34;Huffman length out of range&#34;)
<a id="L265"></a><span class="ln">   265</span>				}
<a id="L266"></a><span class="ln">   266</span>				lengths[j] = uint8(length)
<a id="L267"></a><span class="ln">   267</span>			}
<a id="L268"></a><span class="ln">   268</span>			huffmanTrees[i], err = newHuffmanTree(lengths)
<a id="L269"></a><span class="ln">   269</span>			if err != nil {
<a id="L270"></a><span class="ln">   270</span>				return err
<a id="L271"></a><span class="ln">   271</span>			}
<a id="L272"></a><span class="ln">   272</span>		}
<a id="L273"></a><span class="ln">   273</span>	
<a id="L274"></a><span class="ln">   274</span>		selectorIndex := 1 <span class="comment">// the next tree index to use</span>
<a id="L275"></a><span class="ln">   275</span>		currentHuffmanTree := huffmanTrees[treeIndexes[0]]
<a id="L276"></a><span class="ln">   276</span>		bufIndex := 0 <span class="comment">// indexes bz2.buf, the output buffer.</span>
<a id="L277"></a><span class="ln">   277</span>		<span class="comment">// The output of the move-to-front transform is run-length encoded and</span>
<a id="L278"></a><span class="ln">   278</span>		<span class="comment">// we merge the decoding into the Huffman parsing loop. These two</span>
<a id="L279"></a><span class="ln">   279</span>		<span class="comment">// variables accumulate the repeat count. See the Wikipedia page for</span>
<a id="L280"></a><span class="ln">   280</span>		<span class="comment">// details.</span>
<a id="L281"></a><span class="ln">   281</span>		repeat := 0
<a id="L282"></a><span class="ln">   282</span>		repeat_power := 0
<a id="L283"></a><span class="ln">   283</span>	
<a id="L284"></a><span class="ln">   284</span>		<span class="comment">// The `C&#39; array (used by the inverse BWT) needs to be zero initialized.</span>
<a id="L285"></a><span class="ln">   285</span>		for i := range bz2.c {
<a id="L286"></a><span class="ln">   286</span>			bz2.c[i] = 0
<a id="L287"></a><span class="ln">   287</span>		}
<a id="L288"></a><span class="ln">   288</span>	
<a id="L289"></a><span class="ln">   289</span>		decoded := 0 <span class="comment">// counts the number of symbols decoded by the current tree.</span>
<a id="L290"></a><span class="ln">   290</span>		for {
<a id="L291"></a><span class="ln">   291</span>			if decoded == 50 {
<a id="L292"></a><span class="ln">   292</span>				currentHuffmanTree = huffmanTrees[treeIndexes[selectorIndex]]
<a id="L293"></a><span class="ln">   293</span>				selectorIndex++
<a id="L294"></a><span class="ln">   294</span>				decoded = 0
<a id="L295"></a><span class="ln">   295</span>			}
<a id="L296"></a><span class="ln">   296</span>	
<a id="L297"></a><span class="ln">   297</span>			v := currentHuffmanTree.Decode(br)
<a id="L298"></a><span class="ln">   298</span>			decoded++
<a id="L299"></a><span class="ln">   299</span>	
<a id="L300"></a><span class="ln">   300</span>			if v &lt; 2 {
<a id="L301"></a><span class="ln">   301</span>				<span class="comment">// This is either the RUNA or RUNB symbol.</span>
<a id="L302"></a><span class="ln">   302</span>				if repeat == 0 {
<a id="L303"></a><span class="ln">   303</span>					repeat_power = 1
<a id="L304"></a><span class="ln">   304</span>				}
<a id="L305"></a><span class="ln">   305</span>				repeat += repeat_power &lt;&lt; v
<a id="L306"></a><span class="ln">   306</span>				repeat_power &lt;&lt;= 1
<a id="L307"></a><span class="ln">   307</span>	
<a id="L308"></a><span class="ln">   308</span>				<span class="comment">// This limit of 2 million comes from the bzip2 source</span>
<a id="L309"></a><span class="ln">   309</span>				<span class="comment">// code. It prevents repeat from overflowing.</span>
<a id="L310"></a><span class="ln">   310</span>				if repeat &gt; 2*1024*1024 {
<a id="L311"></a><span class="ln">   311</span>					return StructuralError(&#34;repeat count too large&#34;)
<a id="L312"></a><span class="ln">   312</span>				}
<a id="L313"></a><span class="ln">   313</span>				continue
<a id="L314"></a><span class="ln">   314</span>			}
<a id="L315"></a><span class="ln">   315</span>	
<a id="L316"></a><span class="ln">   316</span>			if repeat &gt; 0 {
<a id="L317"></a><span class="ln">   317</span>				<span class="comment">// We have decoded a complete run-length so we need to</span>
<a id="L318"></a><span class="ln">   318</span>				<span class="comment">// replicate the last output symbol.</span>
<a id="L319"></a><span class="ln">   319</span>				for i := 0; i &lt; repeat; i++ {
<a id="L320"></a><span class="ln">   320</span>					b := byte(mtf.First())
<a id="L321"></a><span class="ln">   321</span>					bz2.tt[bufIndex] = uint32(b)
<a id="L322"></a><span class="ln">   322</span>					bz2.c[b]++
<a id="L323"></a><span class="ln">   323</span>					bufIndex++
<a id="L324"></a><span class="ln">   324</span>				}
<a id="L325"></a><span class="ln">   325</span>				repeat = 0
<a id="L326"></a><span class="ln">   326</span>			}
<a id="L327"></a><span class="ln">   327</span>	
<a id="L328"></a><span class="ln">   328</span>			if int(v) == numSymbols-1 {
<a id="L329"></a><span class="ln">   329</span>				<span class="comment">// This is the EOF symbol. Because it&#39;s always at the</span>
<a id="L330"></a><span class="ln">   330</span>				<span class="comment">// end of the move-to-front list, and never gets moved</span>
<a id="L331"></a><span class="ln">   331</span>				<span class="comment">// to the front, it has this unique value.</span>
<a id="L332"></a><span class="ln">   332</span>				break
<a id="L333"></a><span class="ln">   333</span>			}
<a id="L334"></a><span class="ln">   334</span>	
<a id="L335"></a><span class="ln">   335</span>			<span class="comment">// Since two metasymbols (RUNA and RUNB) have values 0 and 1,</span>
<a id="L336"></a><span class="ln">   336</span>			<span class="comment">// one would expect |v-2| to be passed to the MTF decoder.</span>
<a id="L337"></a><span class="ln">   337</span>			<span class="comment">// However, the front of the MTF list is never referenced as 0,</span>
<a id="L338"></a><span class="ln">   338</span>			<span class="comment">// it&#39;s always referenced with a run-length of 1. Thus 0</span>
<a id="L339"></a><span class="ln">   339</span>			<span class="comment">// doesn&#39;t need to be encoded and we have |v-1| in the next</span>
<a id="L340"></a><span class="ln">   340</span>			<span class="comment">// line.</span>
<a id="L341"></a><span class="ln">   341</span>			b := byte(mtf.Decode(int(v - 1)))
<a id="L342"></a><span class="ln">   342</span>			bz2.tt[bufIndex] = uint32(b)
<a id="L343"></a><span class="ln">   343</span>			bz2.c[b]++
<a id="L344"></a><span class="ln">   344</span>			bufIndex++
<a id="L345"></a><span class="ln">   345</span>		}
<a id="L346"></a><span class="ln">   346</span>	
<a id="L347"></a><span class="ln">   347</span>		if origPtr &gt;= uint(bufIndex) {
<a id="L348"></a><span class="ln">   348</span>			return StructuralError(&#34;origPtr out of bounds&#34;)
<a id="L349"></a><span class="ln">   349</span>		}
<a id="L350"></a><span class="ln">   350</span>	
<a id="L351"></a><span class="ln">   351</span>		<span class="comment">// We have completed the entropy decoding. Now we can perform the</span>
<a id="L352"></a><span class="ln">   352</span>		<span class="comment">// inverse BWT and setup the RLE buffer.</span>
<a id="L353"></a><span class="ln">   353</span>		bz2.preRLE = bz2.tt[:bufIndex]
<a id="L354"></a><span class="ln">   354</span>		bz2.preRLEUsed = 0
<a id="L355"></a><span class="ln">   355</span>		bz2.tPos = inverseBWT(bz2.preRLE, origPtr, bz2.c[:])
<a id="L356"></a><span class="ln">   356</span>		bz2.lastByte = -1
<a id="L357"></a><span class="ln">   357</span>		bz2.byteRepeats = 0
<a id="L358"></a><span class="ln">   358</span>		bz2.repeats = 0
<a id="L359"></a><span class="ln">   359</span>	
<a id="L360"></a><span class="ln">   360</span>		return nil
<a id="L361"></a><span class="ln">   361</span>	}
<a id="L362"></a><span class="ln">   362</span>	
<a id="L363"></a><span class="ln">   363</span>	<span class="comment">// inverseBWT implements the inverse Burrows-Wheeler transform as described in</span>
<a id="L364"></a><span class="ln">   364</span>	<span class="comment">// http://www.hpl.hp.com/techreports/Compaq-DEC/SRC-RR-124.pdf, section 4.2.</span>
<a id="L365"></a><span class="ln">   365</span>	<span class="comment">// In that document, origPtr is called `I&#39; and c is the `C&#39; array after the</span>
<a id="L366"></a><span class="ln">   366</span>	<span class="comment">// first pass over the data. It&#39;s an argument here because we merge the first</span>
<a id="L367"></a><span class="ln">   367</span>	<span class="comment">// pass with the Huffman decoding.</span>
<a id="L368"></a><span class="ln">   368</span>	<span class="comment">//</span>
<a id="L369"></a><span class="ln">   369</span>	<span class="comment">// This also implements the `single array&#39; method from the bzip2 source code</span>
<a id="L370"></a><span class="ln">   370</span>	<span class="comment">// which leaves the output, still shuffled, in the bottom 8 bits of tt with the</span>
<a id="L371"></a><span class="ln">   371</span>	<span class="comment">// index of the next byte in the top 24-bits. The index of the first byte is</span>
<a id="L372"></a><span class="ln">   372</span>	<span class="comment">// returned.</span>
<a id="L373"></a><span class="ln">   373</span>	func inverseBWT(tt []uint32, origPtr uint, c []uint) uint32 {
<a id="L374"></a><span class="ln">   374</span>		sum := uint(0)
<a id="L375"></a><span class="ln">   375</span>		for i := 0; i &lt; 256; i++ {
<a id="L376"></a><span class="ln">   376</span>			sum += c[i]
<a id="L377"></a><span class="ln">   377</span>			c[i] = sum - c[i]
<a id="L378"></a><span class="ln">   378</span>		}
<a id="L379"></a><span class="ln">   379</span>	
<a id="L380"></a><span class="ln">   380</span>		for i := range tt {
<a id="L381"></a><span class="ln">   381</span>			b := tt[i] &amp; 0xff
<a id="L382"></a><span class="ln">   382</span>			tt[c[b]] |= uint32(i) &lt;&lt; 8
<a id="L383"></a><span class="ln">   383</span>			c[b]++
<a id="L384"></a><span class="ln">   384</span>		}
<a id="L385"></a><span class="ln">   385</span>	
<a id="L386"></a><span class="ln">   386</span>		return tt[origPtr] &gt;&gt; 8
<a id="L387"></a><span class="ln">   387</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

