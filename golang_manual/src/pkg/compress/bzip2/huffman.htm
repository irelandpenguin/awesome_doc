<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/compress/bzip2/huffman.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/compress/bzip2/huffman.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package bzip2
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import &#34;sort&#34;
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// A huffmanTree is a binary tree which is navigated, bit-by-bit to reach a</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// symbol.</span>
<a id="L11"></a><span class="ln">    11</span>	type huffmanTree struct {
<a id="L12"></a><span class="ln">    12</span>		<span class="comment">// nodes contains all the non-leaf nodes in the tree. nodes[0] is the</span>
<a id="L13"></a><span class="ln">    13</span>		<span class="comment">// root of the tree and nextNode contains the index of the next element</span>
<a id="L14"></a><span class="ln">    14</span>		<span class="comment">// of nodes to use when the tree is being constructed.</span>
<a id="L15"></a><span class="ln">    15</span>		nodes    []huffmanNode
<a id="L16"></a><span class="ln">    16</span>		nextNode int
<a id="L17"></a><span class="ln">    17</span>	}
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// A huffmanNode is a node in the tree. left and right contain indexes into the</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// nodes slice of the tree. If left or right is invalidNodeValue then the child</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// is a left node and its value is in leftValue/rightValue.</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">//</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// The symbols are uint16s because bzip2 encodes not only MTF indexes in the</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// tree, but also two magic values for run-length encoding and an EOF symbol.</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// Thus there are more than 256 possible symbols.</span>
<a id="L26"></a><span class="ln">    26</span>	type huffmanNode struct {
<a id="L27"></a><span class="ln">    27</span>		left, right           uint16
<a id="L28"></a><span class="ln">    28</span>		leftValue, rightValue uint16
<a id="L29"></a><span class="ln">    29</span>	}
<a id="L30"></a><span class="ln">    30</span>	
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// invalidNodeValue is an invalid index which marks a leaf node in the tree.</span>
<a id="L32"></a><span class="ln">    32</span>	const invalidNodeValue = 0xffff
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// Decode reads bits from the given bitReader and navigates the tree until a</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// symbol is found.</span>
<a id="L36"></a><span class="ln">    36</span>	func (t huffmanTree) Decode(br *bitReader) (v uint16) {
<a id="L37"></a><span class="ln">    37</span>		nodeIndex := uint16(0) <span class="comment">// node 0 is the root of the tree.</span>
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>		for {
<a id="L40"></a><span class="ln">    40</span>			node := &amp;t.nodes[nodeIndex]
<a id="L41"></a><span class="ln">    41</span>			bit := br.ReadBit()
<a id="L42"></a><span class="ln">    42</span>			<span class="comment">// bzip2 encodes left as a true bit.</span>
<a id="L43"></a><span class="ln">    43</span>			if bit {
<a id="L44"></a><span class="ln">    44</span>				<span class="comment">// left</span>
<a id="L45"></a><span class="ln">    45</span>				if node.left == invalidNodeValue {
<a id="L46"></a><span class="ln">    46</span>					return node.leftValue
<a id="L47"></a><span class="ln">    47</span>				}
<a id="L48"></a><span class="ln">    48</span>				nodeIndex = node.left
<a id="L49"></a><span class="ln">    49</span>			} else {
<a id="L50"></a><span class="ln">    50</span>				<span class="comment">// right</span>
<a id="L51"></a><span class="ln">    51</span>				if node.right == invalidNodeValue {
<a id="L52"></a><span class="ln">    52</span>					return node.rightValue
<a id="L53"></a><span class="ln">    53</span>				}
<a id="L54"></a><span class="ln">    54</span>				nodeIndex = node.right
<a id="L55"></a><span class="ln">    55</span>			}
<a id="L56"></a><span class="ln">    56</span>		}
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>		panic(&#34;unreachable&#34;)
<a id="L59"></a><span class="ln">    59</span>	}
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">// newHuffmanTree builds a Huffman tree from a slice containing the code</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">// lengths of each symbol. The maximum code length is 32 bits.</span>
<a id="L63"></a><span class="ln">    63</span>	func newHuffmanTree(lengths []uint8) (huffmanTree, error) {
<a id="L64"></a><span class="ln">    64</span>		<span class="comment">// There are many possible trees that assign the same code length to</span>
<a id="L65"></a><span class="ln">    65</span>		<span class="comment">// each symbol (consider reflecting a tree down the middle, for</span>
<a id="L66"></a><span class="ln">    66</span>		<span class="comment">// example). Since the code length assignments determine the</span>
<a id="L67"></a><span class="ln">    67</span>		<span class="comment">// efficiency of the tree, each of these trees is equally good. In</span>
<a id="L68"></a><span class="ln">    68</span>		<span class="comment">// order to minimize the amount of information needed to build a tree</span>
<a id="L69"></a><span class="ln">    69</span>		<span class="comment">// bzip2 uses a canonical tree so that it can be reconstructed given</span>
<a id="L70"></a><span class="ln">    70</span>		<span class="comment">// only the code length assignments.</span>
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>		if len(lengths) &lt; 2 {
<a id="L73"></a><span class="ln">    73</span>			panic(&#34;newHuffmanTree: too few symbols&#34;)
<a id="L74"></a><span class="ln">    74</span>		}
<a id="L75"></a><span class="ln">    75</span>	
<a id="L76"></a><span class="ln">    76</span>		var t huffmanTree
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>		<span class="comment">// First we sort the code length assignments by ascending code length,</span>
<a id="L79"></a><span class="ln">    79</span>		<span class="comment">// using the symbol value to break ties.</span>
<a id="L80"></a><span class="ln">    80</span>		pairs := huffmanSymbolLengthPairs(make([]huffmanSymbolLengthPair, len(lengths)))
<a id="L81"></a><span class="ln">    81</span>		for i, length := range lengths {
<a id="L82"></a><span class="ln">    82</span>			pairs[i].value = uint16(i)
<a id="L83"></a><span class="ln">    83</span>			pairs[i].length = length
<a id="L84"></a><span class="ln">    84</span>		}
<a id="L85"></a><span class="ln">    85</span>	
<a id="L86"></a><span class="ln">    86</span>		sort.Sort(pairs)
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>		<span class="comment">// Now we assign codes to the symbols, starting with the longest code.</span>
<a id="L89"></a><span class="ln">    89</span>		<span class="comment">// We keep the codes packed into a uint32, at the most-significant end.</span>
<a id="L90"></a><span class="ln">    90</span>		<span class="comment">// So branches are taken from the MSB downwards. This makes it easy to</span>
<a id="L91"></a><span class="ln">    91</span>		<span class="comment">// sort them later.</span>
<a id="L92"></a><span class="ln">    92</span>		code := uint32(0)
<a id="L93"></a><span class="ln">    93</span>		length := uint8(32)
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>		codes := huffmanCodes(make([]huffmanCode, len(lengths)))
<a id="L96"></a><span class="ln">    96</span>		for i := len(pairs) - 1; i &gt;= 0; i-- {
<a id="L97"></a><span class="ln">    97</span>			if length &gt; pairs[i].length {
<a id="L98"></a><span class="ln">    98</span>				<span class="comment">// If the code length decreases we shift in order to</span>
<a id="L99"></a><span class="ln">    99</span>				<span class="comment">// zero any bits beyond the end of the code.</span>
<a id="L100"></a><span class="ln">   100</span>				length &gt;&gt;= 32 - pairs[i].length
<a id="L101"></a><span class="ln">   101</span>				length &lt;&lt;= 32 - pairs[i].length
<a id="L102"></a><span class="ln">   102</span>				length = pairs[i].length
<a id="L103"></a><span class="ln">   103</span>			}
<a id="L104"></a><span class="ln">   104</span>			codes[i].code = code
<a id="L105"></a><span class="ln">   105</span>			codes[i].codeLen = length
<a id="L106"></a><span class="ln">   106</span>			codes[i].value = pairs[i].value
<a id="L107"></a><span class="ln">   107</span>			<span class="comment">// We need to &#39;increment&#39; the code, which means treating |code|</span>
<a id="L108"></a><span class="ln">   108</span>			<span class="comment">// like a |length| bit number.</span>
<a id="L109"></a><span class="ln">   109</span>			code += 1 &lt;&lt; (32 - length)
<a id="L110"></a><span class="ln">   110</span>		}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>		<span class="comment">// Now we can sort by the code so that the left half of each branch are</span>
<a id="L113"></a><span class="ln">   113</span>		<span class="comment">// grouped together, recursively.</span>
<a id="L114"></a><span class="ln">   114</span>		sort.Sort(codes)
<a id="L115"></a><span class="ln">   115</span>	
<a id="L116"></a><span class="ln">   116</span>		t.nodes = make([]huffmanNode, len(codes))
<a id="L117"></a><span class="ln">   117</span>		_, err := buildHuffmanNode(&amp;t, codes, 0)
<a id="L118"></a><span class="ln">   118</span>		return t, err
<a id="L119"></a><span class="ln">   119</span>	}
<a id="L120"></a><span class="ln">   120</span>	
<a id="L121"></a><span class="ln">   121</span>	<span class="comment">// huffmanSymbolLengthPair contains a symbol and its code length.</span>
<a id="L122"></a><span class="ln">   122</span>	type huffmanSymbolLengthPair struct {
<a id="L123"></a><span class="ln">   123</span>		value  uint16
<a id="L124"></a><span class="ln">   124</span>		length uint8
<a id="L125"></a><span class="ln">   125</span>	}
<a id="L126"></a><span class="ln">   126</span>	
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// huffmanSymbolLengthPair is used to provide an interface for sorting.</span>
<a id="L128"></a><span class="ln">   128</span>	type huffmanSymbolLengthPairs []huffmanSymbolLengthPair
<a id="L129"></a><span class="ln">   129</span>	
<a id="L130"></a><span class="ln">   130</span>	func (h huffmanSymbolLengthPairs) Len() int {
<a id="L131"></a><span class="ln">   131</span>		return len(h)
<a id="L132"></a><span class="ln">   132</span>	}
<a id="L133"></a><span class="ln">   133</span>	
<a id="L134"></a><span class="ln">   134</span>	func (h huffmanSymbolLengthPairs) Less(i, j int) bool {
<a id="L135"></a><span class="ln">   135</span>		if h[i].length &lt; h[j].length {
<a id="L136"></a><span class="ln">   136</span>			return true
<a id="L137"></a><span class="ln">   137</span>		}
<a id="L138"></a><span class="ln">   138</span>		if h[i].length &gt; h[j].length {
<a id="L139"></a><span class="ln">   139</span>			return false
<a id="L140"></a><span class="ln">   140</span>		}
<a id="L141"></a><span class="ln">   141</span>		if h[i].value &lt; h[j].value {
<a id="L142"></a><span class="ln">   142</span>			return true
<a id="L143"></a><span class="ln">   143</span>		}
<a id="L144"></a><span class="ln">   144</span>		return false
<a id="L145"></a><span class="ln">   145</span>	}
<a id="L146"></a><span class="ln">   146</span>	
<a id="L147"></a><span class="ln">   147</span>	func (h huffmanSymbolLengthPairs) Swap(i, j int) {
<a id="L148"></a><span class="ln">   148</span>		h[i], h[j] = h[j], h[i]
<a id="L149"></a><span class="ln">   149</span>	}
<a id="L150"></a><span class="ln">   150</span>	
<a id="L151"></a><span class="ln">   151</span>	<span class="comment">// huffmanCode contains a symbol, its code and code length.</span>
<a id="L152"></a><span class="ln">   152</span>	type huffmanCode struct {
<a id="L153"></a><span class="ln">   153</span>		code    uint32
<a id="L154"></a><span class="ln">   154</span>		codeLen uint8
<a id="L155"></a><span class="ln">   155</span>		value   uint16
<a id="L156"></a><span class="ln">   156</span>	}
<a id="L157"></a><span class="ln">   157</span>	
<a id="L158"></a><span class="ln">   158</span>	<span class="comment">// huffmanCodes is used to provide an interface for sorting.</span>
<a id="L159"></a><span class="ln">   159</span>	type huffmanCodes []huffmanCode
<a id="L160"></a><span class="ln">   160</span>	
<a id="L161"></a><span class="ln">   161</span>	func (n huffmanCodes) Len() int {
<a id="L162"></a><span class="ln">   162</span>		return len(n)
<a id="L163"></a><span class="ln">   163</span>	}
<a id="L164"></a><span class="ln">   164</span>	
<a id="L165"></a><span class="ln">   165</span>	func (n huffmanCodes) Less(i, j int) bool {
<a id="L166"></a><span class="ln">   166</span>		return n[i].code &lt; n[j].code
<a id="L167"></a><span class="ln">   167</span>	}
<a id="L168"></a><span class="ln">   168</span>	
<a id="L169"></a><span class="ln">   169</span>	func (n huffmanCodes) Swap(i, j int) {
<a id="L170"></a><span class="ln">   170</span>		n[i], n[j] = n[j], n[i]
<a id="L171"></a><span class="ln">   171</span>	}
<a id="L172"></a><span class="ln">   172</span>	
<a id="L173"></a><span class="ln">   173</span>	<span class="comment">// buildHuffmanNode takes a slice of sorted huffmanCodes and builds a node in</span>
<a id="L174"></a><span class="ln">   174</span>	<span class="comment">// the Huffman tree at the given level. It returns the index of the newly</span>
<a id="L175"></a><span class="ln">   175</span>	<span class="comment">// constructed node.</span>
<a id="L176"></a><span class="ln">   176</span>	func buildHuffmanNode(t *huffmanTree, codes []huffmanCode, level uint32) (nodeIndex uint16, err error) {
<a id="L177"></a><span class="ln">   177</span>		test := uint32(1) &lt;&lt; (31 - level)
<a id="L178"></a><span class="ln">   178</span>	
<a id="L179"></a><span class="ln">   179</span>		<span class="comment">// We have to search the list of codes to find the divide between the left and right sides.</span>
<a id="L180"></a><span class="ln">   180</span>		firstRightIndex := len(codes)
<a id="L181"></a><span class="ln">   181</span>		for i, code := range codes {
<a id="L182"></a><span class="ln">   182</span>			if code.code&amp;test != 0 {
<a id="L183"></a><span class="ln">   183</span>				firstRightIndex = i
<a id="L184"></a><span class="ln">   184</span>				break
<a id="L185"></a><span class="ln">   185</span>			}
<a id="L186"></a><span class="ln">   186</span>		}
<a id="L187"></a><span class="ln">   187</span>	
<a id="L188"></a><span class="ln">   188</span>		left := codes[:firstRightIndex]
<a id="L189"></a><span class="ln">   189</span>		right := codes[firstRightIndex:]
<a id="L190"></a><span class="ln">   190</span>	
<a id="L191"></a><span class="ln">   191</span>		if len(left) == 0 || len(right) == 0 {
<a id="L192"></a><span class="ln">   192</span>			return 0, StructuralError(&#34;superfluous level in Huffman tree&#34;)
<a id="L193"></a><span class="ln">   193</span>		}
<a id="L194"></a><span class="ln">   194</span>	
<a id="L195"></a><span class="ln">   195</span>		nodeIndex = uint16(t.nextNode)
<a id="L196"></a><span class="ln">   196</span>		node := &amp;t.nodes[t.nextNode]
<a id="L197"></a><span class="ln">   197</span>		t.nextNode++
<a id="L198"></a><span class="ln">   198</span>	
<a id="L199"></a><span class="ln">   199</span>		if len(left) == 1 {
<a id="L200"></a><span class="ln">   200</span>			<span class="comment">// leaf node</span>
<a id="L201"></a><span class="ln">   201</span>			node.left = invalidNodeValue
<a id="L202"></a><span class="ln">   202</span>			node.leftValue = left[0].value
<a id="L203"></a><span class="ln">   203</span>		} else {
<a id="L204"></a><span class="ln">   204</span>			node.left, err = buildHuffmanNode(t, left, level+1)
<a id="L205"></a><span class="ln">   205</span>		}
<a id="L206"></a><span class="ln">   206</span>	
<a id="L207"></a><span class="ln">   207</span>		if err != nil {
<a id="L208"></a><span class="ln">   208</span>			return
<a id="L209"></a><span class="ln">   209</span>		}
<a id="L210"></a><span class="ln">   210</span>	
<a id="L211"></a><span class="ln">   211</span>		if len(right) == 1 {
<a id="L212"></a><span class="ln">   212</span>			<span class="comment">// leaf node</span>
<a id="L213"></a><span class="ln">   213</span>			node.right = invalidNodeValue
<a id="L214"></a><span class="ln">   214</span>			node.rightValue = right[0].value
<a id="L215"></a><span class="ln">   215</span>		} else {
<a id="L216"></a><span class="ln">   216</span>			node.right, err = buildHuffmanNode(t, right, level+1)
<a id="L217"></a><span class="ln">   217</span>		}
<a id="L218"></a><span class="ln">   218</span>	
<a id="L219"></a><span class="ln">   219</span>		return
<a id="L220"></a><span class="ln">   220</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

