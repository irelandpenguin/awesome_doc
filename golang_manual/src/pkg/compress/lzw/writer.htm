<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/compress/lzw/writer.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/compress/lzw/writer.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package lzw
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bufio&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;errors&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;fmt&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;io&#34;
<a id="L12"></a><span class="ln">    12</span>	)
<a id="L13"></a><span class="ln">    13</span>	
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// A writer is a buffered, flushable writer.</span>
<a id="L15"></a><span class="ln">    15</span>	type writer interface {
<a id="L16"></a><span class="ln">    16</span>		WriteByte(byte) error
<a id="L17"></a><span class="ln">    17</span>		Flush() error
<a id="L18"></a><span class="ln">    18</span>	}
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// An errWriteCloser is an io.WriteCloser that always returns a given error.</span>
<a id="L21"></a><span class="ln">    21</span>	type errWriteCloser struct {
<a id="L22"></a><span class="ln">    22</span>		err error
<a id="L23"></a><span class="ln">    23</span>	}
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	func (e *errWriteCloser) Write([]byte) (int, error) {
<a id="L26"></a><span class="ln">    26</span>		return 0, e.err
<a id="L27"></a><span class="ln">    27</span>	}
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>	func (e *errWriteCloser) Close() error {
<a id="L30"></a><span class="ln">    30</span>		return e.err
<a id="L31"></a><span class="ln">    31</span>	}
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	const (
<a id="L34"></a><span class="ln">    34</span>		<span class="comment">// A code is a 12 bit value, stored as a uint32 when encoding to avoid</span>
<a id="L35"></a><span class="ln">    35</span>		<span class="comment">// type conversions when shifting bits.</span>
<a id="L36"></a><span class="ln">    36</span>		maxCode     = 1&lt;&lt;12 - 1
<a id="L37"></a><span class="ln">    37</span>		invalidCode = 1&lt;&lt;32 - 1
<a id="L38"></a><span class="ln">    38</span>		<span class="comment">// There are 1&lt;&lt;12 possible codes, which is an upper bound on the number of</span>
<a id="L39"></a><span class="ln">    39</span>		<span class="comment">// valid hash table entries at any given point in time. tableSize is 4x that.</span>
<a id="L40"></a><span class="ln">    40</span>		tableSize = 4 * 1 &lt;&lt; 12
<a id="L41"></a><span class="ln">    41</span>		tableMask = tableSize - 1
<a id="L42"></a><span class="ln">    42</span>		<span class="comment">// A hash table entry is a uint32. Zero is an invalid entry since the</span>
<a id="L43"></a><span class="ln">    43</span>		<span class="comment">// lower 12 bits of a valid entry must be a non-literal code.</span>
<a id="L44"></a><span class="ln">    44</span>		invalidEntry = 0
<a id="L45"></a><span class="ln">    45</span>	)
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">// encoder is LZW compressor.</span>
<a id="L48"></a><span class="ln">    48</span>	type encoder struct {
<a id="L49"></a><span class="ln">    49</span>		<span class="comment">// w is the writer that compressed bytes are written to.</span>
<a id="L50"></a><span class="ln">    50</span>		w writer
<a id="L51"></a><span class="ln">    51</span>		<span class="comment">// order, write, bits, nBits and width are the state for</span>
<a id="L52"></a><span class="ln">    52</span>		<span class="comment">// converting a code stream into a byte stream.</span>
<a id="L53"></a><span class="ln">    53</span>		order Order
<a id="L54"></a><span class="ln">    54</span>		write func(*encoder, uint32) error
<a id="L55"></a><span class="ln">    55</span>		bits  uint32
<a id="L56"></a><span class="ln">    56</span>		nBits uint
<a id="L57"></a><span class="ln">    57</span>		width uint
<a id="L58"></a><span class="ln">    58</span>		<span class="comment">// litWidth is the width in bits of literal codes.</span>
<a id="L59"></a><span class="ln">    59</span>		litWidth uint
<a id="L60"></a><span class="ln">    60</span>		<span class="comment">// hi is the code implied by the next code emission.</span>
<a id="L61"></a><span class="ln">    61</span>		<span class="comment">// overflow is the code at which hi overflows the code width.</span>
<a id="L62"></a><span class="ln">    62</span>		hi, overflow uint32
<a id="L63"></a><span class="ln">    63</span>		<span class="comment">// savedCode is the accumulated code at the end of the most recent Write</span>
<a id="L64"></a><span class="ln">    64</span>		<span class="comment">// call. It is equal to invalidCode if there was no such call.</span>
<a id="L65"></a><span class="ln">    65</span>		savedCode uint32
<a id="L66"></a><span class="ln">    66</span>		<span class="comment">// err is the first error encountered during writing. Closing the encoder</span>
<a id="L67"></a><span class="ln">    67</span>		<span class="comment">// will make any future Write calls return errClosed</span>
<a id="L68"></a><span class="ln">    68</span>		err error
<a id="L69"></a><span class="ln">    69</span>		<span class="comment">// table is the hash table from 20-bit keys to 12-bit values. Each table</span>
<a id="L70"></a><span class="ln">    70</span>		<span class="comment">// entry contains key&lt;&lt;12|val and collisions resolve by linear probing.</span>
<a id="L71"></a><span class="ln">    71</span>		<span class="comment">// The keys consist of a 12-bit code prefix and an 8-bit byte suffix.</span>
<a id="L72"></a><span class="ln">    72</span>		<span class="comment">// The values are a 12-bit code.</span>
<a id="L73"></a><span class="ln">    73</span>		table [tableSize]uint32
<a id="L74"></a><span class="ln">    74</span>	}
<a id="L75"></a><span class="ln">    75</span>	
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">// writeLSB writes the code c for &#34;Least Significant Bits first&#34; data.</span>
<a id="L77"></a><span class="ln">    77</span>	func (e *encoder) writeLSB(c uint32) error {
<a id="L78"></a><span class="ln">    78</span>		e.bits |= c &lt;&lt; e.nBits
<a id="L79"></a><span class="ln">    79</span>		e.nBits += e.width
<a id="L80"></a><span class="ln">    80</span>		for e.nBits &gt;= 8 {
<a id="L81"></a><span class="ln">    81</span>			if err := e.w.WriteByte(uint8(e.bits)); err != nil {
<a id="L82"></a><span class="ln">    82</span>				return err
<a id="L83"></a><span class="ln">    83</span>			}
<a id="L84"></a><span class="ln">    84</span>			e.bits &gt;&gt;= 8
<a id="L85"></a><span class="ln">    85</span>			e.nBits -= 8
<a id="L86"></a><span class="ln">    86</span>		}
<a id="L87"></a><span class="ln">    87</span>		return nil
<a id="L88"></a><span class="ln">    88</span>	}
<a id="L89"></a><span class="ln">    89</span>	
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// writeMSB writes the code c for &#34;Most Significant Bits first&#34; data.</span>
<a id="L91"></a><span class="ln">    91</span>	func (e *encoder) writeMSB(c uint32) error {
<a id="L92"></a><span class="ln">    92</span>		e.bits |= c &lt;&lt; (32 - e.width - e.nBits)
<a id="L93"></a><span class="ln">    93</span>		e.nBits += e.width
<a id="L94"></a><span class="ln">    94</span>		for e.nBits &gt;= 8 {
<a id="L95"></a><span class="ln">    95</span>			if err := e.w.WriteByte(uint8(e.bits &gt;&gt; 24)); err != nil {
<a id="L96"></a><span class="ln">    96</span>				return err
<a id="L97"></a><span class="ln">    97</span>			}
<a id="L98"></a><span class="ln">    98</span>			e.bits &lt;&lt;= 8
<a id="L99"></a><span class="ln">    99</span>			e.nBits -= 8
<a id="L100"></a><span class="ln">   100</span>		}
<a id="L101"></a><span class="ln">   101</span>		return nil
<a id="L102"></a><span class="ln">   102</span>	}
<a id="L103"></a><span class="ln">   103</span>	
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">// errOutOfCodes is an internal error that means that the encoder has run out</span>
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// of unused codes and a clear code needs to be sent next.</span>
<a id="L106"></a><span class="ln">   106</span>	var errOutOfCodes = errors.New(&#34;lzw: out of codes&#34;)
<a id="L107"></a><span class="ln">   107</span>	
<a id="L108"></a><span class="ln">   108</span>	<span class="comment">// incHi increments e.hi and checks for both overflow and running out of</span>
<a id="L109"></a><span class="ln">   109</span>	<span class="comment">// unused codes. In the latter case, incHi sends a clear code, resets the</span>
<a id="L110"></a><span class="ln">   110</span>	<span class="comment">// encoder state and returns errOutOfCodes.</span>
<a id="L111"></a><span class="ln">   111</span>	func (e *encoder) incHi() error {
<a id="L112"></a><span class="ln">   112</span>		e.hi++
<a id="L113"></a><span class="ln">   113</span>		if e.hi == e.overflow {
<a id="L114"></a><span class="ln">   114</span>			e.width++
<a id="L115"></a><span class="ln">   115</span>			e.overflow &lt;&lt;= 1
<a id="L116"></a><span class="ln">   116</span>		}
<a id="L117"></a><span class="ln">   117</span>		if e.hi == maxCode {
<a id="L118"></a><span class="ln">   118</span>			clear := uint32(1) &lt;&lt; e.litWidth
<a id="L119"></a><span class="ln">   119</span>			if err := e.write(e, clear); err != nil {
<a id="L120"></a><span class="ln">   120</span>				return err
<a id="L121"></a><span class="ln">   121</span>			}
<a id="L122"></a><span class="ln">   122</span>			e.width = uint(e.litWidth) + 1
<a id="L123"></a><span class="ln">   123</span>			e.hi = clear + 1
<a id="L124"></a><span class="ln">   124</span>			e.overflow = clear &lt;&lt; 1
<a id="L125"></a><span class="ln">   125</span>			for i := range e.table {
<a id="L126"></a><span class="ln">   126</span>				e.table[i] = invalidEntry
<a id="L127"></a><span class="ln">   127</span>			}
<a id="L128"></a><span class="ln">   128</span>			return errOutOfCodes
<a id="L129"></a><span class="ln">   129</span>		}
<a id="L130"></a><span class="ln">   130</span>		return nil
<a id="L131"></a><span class="ln">   131</span>	}
<a id="L132"></a><span class="ln">   132</span>	
<a id="L133"></a><span class="ln">   133</span>	<span class="comment">// Write writes a compressed representation of p to e&#39;s underlying writer.</span>
<a id="L134"></a><span class="ln">   134</span>	func (e *encoder) Write(p []byte) (int, error) {
<a id="L135"></a><span class="ln">   135</span>		if e.err != nil {
<a id="L136"></a><span class="ln">   136</span>			return 0, e.err
<a id="L137"></a><span class="ln">   137</span>		}
<a id="L138"></a><span class="ln">   138</span>		if len(p) == 0 {
<a id="L139"></a><span class="ln">   139</span>			return 0, nil
<a id="L140"></a><span class="ln">   140</span>		}
<a id="L141"></a><span class="ln">   141</span>		litMask := uint32(1&lt;&lt;e.litWidth - 1)
<a id="L142"></a><span class="ln">   142</span>		code := e.savedCode
<a id="L143"></a><span class="ln">   143</span>		if code == invalidCode {
<a id="L144"></a><span class="ln">   144</span>			<span class="comment">// The first code sent is always a literal code.</span>
<a id="L145"></a><span class="ln">   145</span>			code, p = uint32(p[0])&amp;litMask, p[1:]
<a id="L146"></a><span class="ln">   146</span>		}
<a id="L147"></a><span class="ln">   147</span>	loop:
<a id="L148"></a><span class="ln">   148</span>		for _, x := range p {
<a id="L149"></a><span class="ln">   149</span>			literal := uint32(x) &amp; litMask
<a id="L150"></a><span class="ln">   150</span>			key := code&lt;&lt;8 | literal
<a id="L151"></a><span class="ln">   151</span>			<span class="comment">// If there is a hash table hit for this key then we continue the loop</span>
<a id="L152"></a><span class="ln">   152</span>			<span class="comment">// and do not emit a code yet.</span>
<a id="L153"></a><span class="ln">   153</span>			hash := (key&gt;&gt;12 ^ key) &amp; tableMask
<a id="L154"></a><span class="ln">   154</span>			for h, t := hash, e.table[hash]; t != invalidEntry; {
<a id="L155"></a><span class="ln">   155</span>				if key == t&gt;&gt;12 {
<a id="L156"></a><span class="ln">   156</span>					code = t &amp; maxCode
<a id="L157"></a><span class="ln">   157</span>					continue loop
<a id="L158"></a><span class="ln">   158</span>				}
<a id="L159"></a><span class="ln">   159</span>				h = (h + 1) &amp; tableMask
<a id="L160"></a><span class="ln">   160</span>				t = e.table[h]
<a id="L161"></a><span class="ln">   161</span>			}
<a id="L162"></a><span class="ln">   162</span>			<span class="comment">// Otherwise, write the current code, and literal becomes the start of</span>
<a id="L163"></a><span class="ln">   163</span>			<span class="comment">// the next emitted code.</span>
<a id="L164"></a><span class="ln">   164</span>			if e.err = e.write(e, code); e.err != nil {
<a id="L165"></a><span class="ln">   165</span>				return 0, e.err
<a id="L166"></a><span class="ln">   166</span>			}
<a id="L167"></a><span class="ln">   167</span>			code = literal
<a id="L168"></a><span class="ln">   168</span>			<span class="comment">// Increment e.hi, the next implied code. If we run out of codes, reset</span>
<a id="L169"></a><span class="ln">   169</span>			<span class="comment">// the encoder state (including clearing the hash table) and continue.</span>
<a id="L170"></a><span class="ln">   170</span>			if err := e.incHi(); err != nil {
<a id="L171"></a><span class="ln">   171</span>				if err == errOutOfCodes {
<a id="L172"></a><span class="ln">   172</span>					continue
<a id="L173"></a><span class="ln">   173</span>				}
<a id="L174"></a><span class="ln">   174</span>				e.err = err
<a id="L175"></a><span class="ln">   175</span>				return 0, e.err
<a id="L176"></a><span class="ln">   176</span>			}
<a id="L177"></a><span class="ln">   177</span>			<span class="comment">// Otherwise, insert key -&gt; e.hi into the map that e.table represents.</span>
<a id="L178"></a><span class="ln">   178</span>			for {
<a id="L179"></a><span class="ln">   179</span>				if e.table[hash] == invalidEntry {
<a id="L180"></a><span class="ln">   180</span>					e.table[hash] = (key &lt;&lt; 12) | e.hi
<a id="L181"></a><span class="ln">   181</span>					break
<a id="L182"></a><span class="ln">   182</span>				}
<a id="L183"></a><span class="ln">   183</span>				hash = (hash + 1) &amp; tableMask
<a id="L184"></a><span class="ln">   184</span>			}
<a id="L185"></a><span class="ln">   185</span>		}
<a id="L186"></a><span class="ln">   186</span>		e.savedCode = code
<a id="L187"></a><span class="ln">   187</span>		return len(p), nil
<a id="L188"></a><span class="ln">   188</span>	}
<a id="L189"></a><span class="ln">   189</span>	
<a id="L190"></a><span class="ln">   190</span>	<span class="comment">// Close closes the encoder, flushing any pending output. It does not close or</span>
<a id="L191"></a><span class="ln">   191</span>	<span class="comment">// flush e&#39;s underlying writer.</span>
<a id="L192"></a><span class="ln">   192</span>	func (e *encoder) Close() error {
<a id="L193"></a><span class="ln">   193</span>		if e.err != nil {
<a id="L194"></a><span class="ln">   194</span>			if e.err == errClosed {
<a id="L195"></a><span class="ln">   195</span>				return nil
<a id="L196"></a><span class="ln">   196</span>			}
<a id="L197"></a><span class="ln">   197</span>			return e.err
<a id="L198"></a><span class="ln">   198</span>		}
<a id="L199"></a><span class="ln">   199</span>		<span class="comment">// Make any future calls to Write return errClosed.</span>
<a id="L200"></a><span class="ln">   200</span>		e.err = errClosed
<a id="L201"></a><span class="ln">   201</span>		<span class="comment">// Write the savedCode if valid.</span>
<a id="L202"></a><span class="ln">   202</span>		if e.savedCode != invalidCode {
<a id="L203"></a><span class="ln">   203</span>			if err := e.write(e, e.savedCode); err != nil {
<a id="L204"></a><span class="ln">   204</span>				return err
<a id="L205"></a><span class="ln">   205</span>			}
<a id="L206"></a><span class="ln">   206</span>			if err := e.incHi(); err != nil &amp;&amp; err != errOutOfCodes {
<a id="L207"></a><span class="ln">   207</span>				return err
<a id="L208"></a><span class="ln">   208</span>			}
<a id="L209"></a><span class="ln">   209</span>		}
<a id="L210"></a><span class="ln">   210</span>		<span class="comment">// Write the eof code.</span>
<a id="L211"></a><span class="ln">   211</span>		eof := uint32(1)&lt;&lt;e.litWidth + 1
<a id="L212"></a><span class="ln">   212</span>		if err := e.write(e, eof); err != nil {
<a id="L213"></a><span class="ln">   213</span>			return err
<a id="L214"></a><span class="ln">   214</span>		}
<a id="L215"></a><span class="ln">   215</span>		<span class="comment">// Write the final bits.</span>
<a id="L216"></a><span class="ln">   216</span>		if e.nBits &gt; 0 {
<a id="L217"></a><span class="ln">   217</span>			if e.order == MSB {
<a id="L218"></a><span class="ln">   218</span>				e.bits &gt;&gt;= 24
<a id="L219"></a><span class="ln">   219</span>			}
<a id="L220"></a><span class="ln">   220</span>			if err := e.w.WriteByte(uint8(e.bits)); err != nil {
<a id="L221"></a><span class="ln">   221</span>				return err
<a id="L222"></a><span class="ln">   222</span>			}
<a id="L223"></a><span class="ln">   223</span>		}
<a id="L224"></a><span class="ln">   224</span>		return e.w.Flush()
<a id="L225"></a><span class="ln">   225</span>	}
<a id="L226"></a><span class="ln">   226</span>	
<a id="L227"></a><span class="ln">   227</span>	<span class="comment">// NewWriter creates a new io.WriteCloser that satisfies writes by compressing</span>
<a id="L228"></a><span class="ln">   228</span>	<span class="comment">// the data and writing it to w.</span>
<a id="L229"></a><span class="ln">   229</span>	<span class="comment">// It is the caller&#39;s responsibility to call Close on the WriteCloser when</span>
<a id="L230"></a><span class="ln">   230</span>	<span class="comment">// finished writing.</span>
<a id="L231"></a><span class="ln">   231</span>	<span class="comment">// The number of bits to use for literal codes, litWidth, must be in the</span>
<a id="L232"></a><span class="ln">   232</span>	<span class="comment">// range [2,8] and is typically 8.</span>
<a id="L233"></a><span class="ln">   233</span>	func NewWriter(w io.Writer, order Order, litWidth int) io.WriteCloser {
<a id="L234"></a><span class="ln">   234</span>		var write func(*encoder, uint32) error
<a id="L235"></a><span class="ln">   235</span>		switch order {
<a id="L236"></a><span class="ln">   236</span>		case LSB:
<a id="L237"></a><span class="ln">   237</span>			write = (*encoder).writeLSB
<a id="L238"></a><span class="ln">   238</span>		case MSB:
<a id="L239"></a><span class="ln">   239</span>			write = (*encoder).writeMSB
<a id="L240"></a><span class="ln">   240</span>		default:
<a id="L241"></a><span class="ln">   241</span>			return &amp;errWriteCloser{errors.New(&#34;lzw: unknown order&#34;)}
<a id="L242"></a><span class="ln">   242</span>		}
<a id="L243"></a><span class="ln">   243</span>		if litWidth &lt; 2 || 8 &lt; litWidth {
<a id="L244"></a><span class="ln">   244</span>			return &amp;errWriteCloser{fmt.Errorf(&#34;lzw: litWidth %d out of range&#34;, litWidth)}
<a id="L245"></a><span class="ln">   245</span>		}
<a id="L246"></a><span class="ln">   246</span>		bw, ok := w.(writer)
<a id="L247"></a><span class="ln">   247</span>		if !ok {
<a id="L248"></a><span class="ln">   248</span>			bw = bufio.NewWriter(w)
<a id="L249"></a><span class="ln">   249</span>		}
<a id="L250"></a><span class="ln">   250</span>		lw := uint(litWidth)
<a id="L251"></a><span class="ln">   251</span>		return &amp;encoder{
<a id="L252"></a><span class="ln">   252</span>			w:         bw,
<a id="L253"></a><span class="ln">   253</span>			order:     order,
<a id="L254"></a><span class="ln">   254</span>			write:     write,
<a id="L255"></a><span class="ln">   255</span>			width:     1 + lw,
<a id="L256"></a><span class="ln">   256</span>			litWidth:  lw,
<a id="L257"></a><span class="ln">   257</span>			hi:        1&lt;&lt;lw + 1,
<a id="L258"></a><span class="ln">   258</span>			overflow:  1 &lt;&lt; (lw + 1),
<a id="L259"></a><span class="ln">   259</span>			savedCode: invalidCode,
<a id="L260"></a><span class="ln">   260</span>		}
<a id="L261"></a><span class="ln">   261</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

