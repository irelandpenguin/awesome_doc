<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/compress/lzw/reader.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/compress/lzw/reader.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package lzw implements the Lempel-Ziv-Welch compressed data format,</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// described in T. A. Welch, ``A Technique for High-Performance Data</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// Compression&#39;&#39;, Computer, 17(6) (June 1984), pp 8-19.</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">//</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// In particular, it implements LZW as used by the GIF, TIFF and PDF file</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// formats, which means variable-width codes up to 12 bits and the first</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// two non-literal codes are a clear code and an EOF code.</span>
<a id="L12"></a><span class="ln">    12</span>	package lzw
<a id="L13"></a><span class="ln">    13</span>	
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// TODO(nigeltao): check that TIFF and PDF use LZW in the same way as GIF,</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// modulo LSB/MSB packing order.</span>
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	import (
<a id="L18"></a><span class="ln">    18</span>		&#34;bufio&#34;
<a id="L19"></a><span class="ln">    19</span>		&#34;errors&#34;
<a id="L20"></a><span class="ln">    20</span>		&#34;fmt&#34;
<a id="L21"></a><span class="ln">    21</span>		&#34;io&#34;
<a id="L22"></a><span class="ln">    22</span>	)
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// Order specifies the bit ordering in an LZW data stream.</span>
<a id="L25"></a><span class="ln">    25</span>	type Order int
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>	const (
<a id="L28"></a><span class="ln">    28</span>		<span class="comment">// LSB means Least Significant Bits first, as used in the GIF file format.</span>
<a id="L29"></a><span class="ln">    29</span>		LSB Order = iota
<a id="L30"></a><span class="ln">    30</span>		<span class="comment">// MSB means Most Significant Bits first, as used in the TIFF and PDF</span>
<a id="L31"></a><span class="ln">    31</span>		<span class="comment">// file formats.</span>
<a id="L32"></a><span class="ln">    32</span>		MSB
<a id="L33"></a><span class="ln">    33</span>	)
<a id="L34"></a><span class="ln">    34</span>	
<a id="L35"></a><span class="ln">    35</span>	const (
<a id="L36"></a><span class="ln">    36</span>		maxWidth           = 12
<a id="L37"></a><span class="ln">    37</span>		decoderInvalidCode = 0xffff
<a id="L38"></a><span class="ln">    38</span>		flushBuffer        = 1 &lt;&lt; maxWidth
<a id="L39"></a><span class="ln">    39</span>	)
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// decoder is the state from which the readXxx method converts a byte</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">// stream into a code stream.</span>
<a id="L43"></a><span class="ln">    43</span>	type decoder struct {
<a id="L44"></a><span class="ln">    44</span>		r        io.ByteReader
<a id="L45"></a><span class="ln">    45</span>		bits     uint32
<a id="L46"></a><span class="ln">    46</span>		nBits    uint
<a id="L47"></a><span class="ln">    47</span>		width    uint
<a id="L48"></a><span class="ln">    48</span>		read     func(*decoder) (uint16, error) <span class="comment">// readLSB or readMSB</span>
<a id="L49"></a><span class="ln">    49</span>		litWidth int                            <span class="comment">// width in bits of literal codes</span>
<a id="L50"></a><span class="ln">    50</span>		err      error
<a id="L51"></a><span class="ln">    51</span>	
<a id="L52"></a><span class="ln">    52</span>		<span class="comment">// The first 1&lt;&lt;litWidth codes are literal codes.</span>
<a id="L53"></a><span class="ln">    53</span>		<span class="comment">// The next two codes mean clear and EOF.</span>
<a id="L54"></a><span class="ln">    54</span>		<span class="comment">// Other valid codes are in the range [lo, hi] where lo := clear + 2,</span>
<a id="L55"></a><span class="ln">    55</span>		<span class="comment">// with the upper bound incrementing on each code seen.</span>
<a id="L56"></a><span class="ln">    56</span>		<span class="comment">// overflow is the code at which hi overflows the code width.</span>
<a id="L57"></a><span class="ln">    57</span>		<span class="comment">// last is the most recently seen code, or decoderInvalidCode.</span>
<a id="L58"></a><span class="ln">    58</span>		clear, eof, hi, overflow, last uint16
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>		<span class="comment">// Each code c in [lo, hi] expands to two or more bytes. For c != hi:</span>
<a id="L61"></a><span class="ln">    61</span>		<span class="comment">//   suffix[c] is the last of these bytes.</span>
<a id="L62"></a><span class="ln">    62</span>		<span class="comment">//   prefix[c] is the code for all but the last byte.</span>
<a id="L63"></a><span class="ln">    63</span>		<span class="comment">//   This code can either be a literal code or another code in [lo, c).</span>
<a id="L64"></a><span class="ln">    64</span>		<span class="comment">// The c == hi case is a special case.</span>
<a id="L65"></a><span class="ln">    65</span>		suffix [1 &lt;&lt; maxWidth]uint8
<a id="L66"></a><span class="ln">    66</span>		prefix [1 &lt;&lt; maxWidth]uint16
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>		<span class="comment">// output is the temporary output buffer.</span>
<a id="L69"></a><span class="ln">    69</span>		<span class="comment">// Literal codes are accumulated from the start of the buffer.</span>
<a id="L70"></a><span class="ln">    70</span>		<span class="comment">// Non-literal codes decode to a sequence of suffixes that are first</span>
<a id="L71"></a><span class="ln">    71</span>		<span class="comment">// written right-to-left from the end of the buffer before being copied</span>
<a id="L72"></a><span class="ln">    72</span>		<span class="comment">// to the start of the buffer.</span>
<a id="L73"></a><span class="ln">    73</span>		<span class="comment">// It is flushed when it contains &gt;= 1&lt;&lt;maxWidth bytes,</span>
<a id="L74"></a><span class="ln">    74</span>		<span class="comment">// so that there is always room to decode an entire code.</span>
<a id="L75"></a><span class="ln">    75</span>		output [2 * 1 &lt;&lt; maxWidth]byte
<a id="L76"></a><span class="ln">    76</span>		o      int    <span class="comment">// write index into output</span>
<a id="L77"></a><span class="ln">    77</span>		toRead []byte <span class="comment">// bytes to return from Read</span>
<a id="L78"></a><span class="ln">    78</span>	}
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// readLSB returns the next code for &#34;Least Significant Bits first&#34; data.</span>
<a id="L81"></a><span class="ln">    81</span>	func (d *decoder) readLSB() (uint16, error) {
<a id="L82"></a><span class="ln">    82</span>		for d.nBits &lt; d.width {
<a id="L83"></a><span class="ln">    83</span>			x, err := d.r.ReadByte()
<a id="L84"></a><span class="ln">    84</span>			if err != nil {
<a id="L85"></a><span class="ln">    85</span>				return 0, err
<a id="L86"></a><span class="ln">    86</span>			}
<a id="L87"></a><span class="ln">    87</span>			d.bits |= uint32(x) &lt;&lt; d.nBits
<a id="L88"></a><span class="ln">    88</span>			d.nBits += 8
<a id="L89"></a><span class="ln">    89</span>		}
<a id="L90"></a><span class="ln">    90</span>		code := uint16(d.bits &amp; (1&lt;&lt;d.width - 1))
<a id="L91"></a><span class="ln">    91</span>		d.bits &gt;&gt;= d.width
<a id="L92"></a><span class="ln">    92</span>		d.nBits -= d.width
<a id="L93"></a><span class="ln">    93</span>		return code, nil
<a id="L94"></a><span class="ln">    94</span>	}
<a id="L95"></a><span class="ln">    95</span>	
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">// readMSB returns the next code for &#34;Most Significant Bits first&#34; data.</span>
<a id="L97"></a><span class="ln">    97</span>	func (d *decoder) readMSB() (uint16, error) {
<a id="L98"></a><span class="ln">    98</span>		for d.nBits &lt; d.width {
<a id="L99"></a><span class="ln">    99</span>			x, err := d.r.ReadByte()
<a id="L100"></a><span class="ln">   100</span>			if err != nil {
<a id="L101"></a><span class="ln">   101</span>				return 0, err
<a id="L102"></a><span class="ln">   102</span>			}
<a id="L103"></a><span class="ln">   103</span>			d.bits |= uint32(x) &lt;&lt; (24 - d.nBits)
<a id="L104"></a><span class="ln">   104</span>			d.nBits += 8
<a id="L105"></a><span class="ln">   105</span>		}
<a id="L106"></a><span class="ln">   106</span>		code := uint16(d.bits &gt;&gt; (32 - d.width))
<a id="L107"></a><span class="ln">   107</span>		d.bits &lt;&lt;= d.width
<a id="L108"></a><span class="ln">   108</span>		d.nBits -= d.width
<a id="L109"></a><span class="ln">   109</span>		return code, nil
<a id="L110"></a><span class="ln">   110</span>	}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>	func (d *decoder) Read(b []byte) (int, error) {
<a id="L113"></a><span class="ln">   113</span>		for {
<a id="L114"></a><span class="ln">   114</span>			if len(d.toRead) &gt; 0 {
<a id="L115"></a><span class="ln">   115</span>				n := copy(b, d.toRead)
<a id="L116"></a><span class="ln">   116</span>				d.toRead = d.toRead[n:]
<a id="L117"></a><span class="ln">   117</span>				return n, nil
<a id="L118"></a><span class="ln">   118</span>			}
<a id="L119"></a><span class="ln">   119</span>			if d.err != nil {
<a id="L120"></a><span class="ln">   120</span>				return 0, d.err
<a id="L121"></a><span class="ln">   121</span>			}
<a id="L122"></a><span class="ln">   122</span>			d.decode()
<a id="L123"></a><span class="ln">   123</span>		}
<a id="L124"></a><span class="ln">   124</span>		panic(&#34;unreachable&#34;)
<a id="L125"></a><span class="ln">   125</span>	}
<a id="L126"></a><span class="ln">   126</span>	
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// decode decompresses bytes from r and leaves them in d.toRead.</span>
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// read specifies how to decode bytes into codes.</span>
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// litWidth is the width in bits of literal codes.</span>
<a id="L130"></a><span class="ln">   130</span>	func (d *decoder) decode() {
<a id="L131"></a><span class="ln">   131</span>		<span class="comment">// Loop over the code stream, converting codes into decompressed bytes.</span>
<a id="L132"></a><span class="ln">   132</span>		for {
<a id="L133"></a><span class="ln">   133</span>			code, err := d.read(d)
<a id="L134"></a><span class="ln">   134</span>			if err != nil {
<a id="L135"></a><span class="ln">   135</span>				if err == io.EOF {
<a id="L136"></a><span class="ln">   136</span>					err = io.ErrUnexpectedEOF
<a id="L137"></a><span class="ln">   137</span>				}
<a id="L138"></a><span class="ln">   138</span>				d.err = err
<a id="L139"></a><span class="ln">   139</span>				return
<a id="L140"></a><span class="ln">   140</span>			}
<a id="L141"></a><span class="ln">   141</span>			switch {
<a id="L142"></a><span class="ln">   142</span>			case code &lt; d.clear:
<a id="L143"></a><span class="ln">   143</span>				<span class="comment">// We have a literal code.</span>
<a id="L144"></a><span class="ln">   144</span>				d.output[d.o] = uint8(code)
<a id="L145"></a><span class="ln">   145</span>				d.o++
<a id="L146"></a><span class="ln">   146</span>				if d.last != decoderInvalidCode {
<a id="L147"></a><span class="ln">   147</span>					<span class="comment">// Save what the hi code expands to.</span>
<a id="L148"></a><span class="ln">   148</span>					d.suffix[d.hi] = uint8(code)
<a id="L149"></a><span class="ln">   149</span>					d.prefix[d.hi] = d.last
<a id="L150"></a><span class="ln">   150</span>				}
<a id="L151"></a><span class="ln">   151</span>			case code == d.clear:
<a id="L152"></a><span class="ln">   152</span>				d.width = 1 + uint(d.litWidth)
<a id="L153"></a><span class="ln">   153</span>				d.hi = d.eof
<a id="L154"></a><span class="ln">   154</span>				d.overflow = 1 &lt;&lt; d.width
<a id="L155"></a><span class="ln">   155</span>				d.last = decoderInvalidCode
<a id="L156"></a><span class="ln">   156</span>				continue
<a id="L157"></a><span class="ln">   157</span>			case code == d.eof:
<a id="L158"></a><span class="ln">   158</span>				d.flush()
<a id="L159"></a><span class="ln">   159</span>				d.err = io.EOF
<a id="L160"></a><span class="ln">   160</span>				return
<a id="L161"></a><span class="ln">   161</span>			case code &lt;= d.hi:
<a id="L162"></a><span class="ln">   162</span>				c, i := code, len(d.output)-1
<a id="L163"></a><span class="ln">   163</span>				if code == d.hi {
<a id="L164"></a><span class="ln">   164</span>					<span class="comment">// code == hi is a special case which expands to the last expansion</span>
<a id="L165"></a><span class="ln">   165</span>					<span class="comment">// followed by the head of the last expansion. To find the head, we walk</span>
<a id="L166"></a><span class="ln">   166</span>					<span class="comment">// the prefix chain until we find a literal code.</span>
<a id="L167"></a><span class="ln">   167</span>					c = d.last
<a id="L168"></a><span class="ln">   168</span>					for c &gt;= d.clear {
<a id="L169"></a><span class="ln">   169</span>						c = d.prefix[c]
<a id="L170"></a><span class="ln">   170</span>					}
<a id="L171"></a><span class="ln">   171</span>					d.output[i] = uint8(c)
<a id="L172"></a><span class="ln">   172</span>					i--
<a id="L173"></a><span class="ln">   173</span>					c = d.last
<a id="L174"></a><span class="ln">   174</span>				}
<a id="L175"></a><span class="ln">   175</span>				<span class="comment">// Copy the suffix chain into output and then write that to w.</span>
<a id="L176"></a><span class="ln">   176</span>				for c &gt;= d.clear {
<a id="L177"></a><span class="ln">   177</span>					d.output[i] = d.suffix[c]
<a id="L178"></a><span class="ln">   178</span>					i--
<a id="L179"></a><span class="ln">   179</span>					c = d.prefix[c]
<a id="L180"></a><span class="ln">   180</span>				}
<a id="L181"></a><span class="ln">   181</span>				d.output[i] = uint8(c)
<a id="L182"></a><span class="ln">   182</span>				d.o += copy(d.output[d.o:], d.output[i:])
<a id="L183"></a><span class="ln">   183</span>				if d.last != decoderInvalidCode {
<a id="L184"></a><span class="ln">   184</span>					<span class="comment">// Save what the hi code expands to.</span>
<a id="L185"></a><span class="ln">   185</span>					d.suffix[d.hi] = uint8(c)
<a id="L186"></a><span class="ln">   186</span>					d.prefix[d.hi] = d.last
<a id="L187"></a><span class="ln">   187</span>				}
<a id="L188"></a><span class="ln">   188</span>			default:
<a id="L189"></a><span class="ln">   189</span>				d.err = errors.New(&#34;lzw: invalid code&#34;)
<a id="L190"></a><span class="ln">   190</span>				return
<a id="L191"></a><span class="ln">   191</span>			}
<a id="L192"></a><span class="ln">   192</span>			d.last, d.hi = code, d.hi+1
<a id="L193"></a><span class="ln">   193</span>			if d.hi &gt;= d.overflow {
<a id="L194"></a><span class="ln">   194</span>				if d.width == maxWidth {
<a id="L195"></a><span class="ln">   195</span>					d.last = decoderInvalidCode
<a id="L196"></a><span class="ln">   196</span>				} else {
<a id="L197"></a><span class="ln">   197</span>					d.width++
<a id="L198"></a><span class="ln">   198</span>					d.overflow &lt;&lt;= 1
<a id="L199"></a><span class="ln">   199</span>				}
<a id="L200"></a><span class="ln">   200</span>			}
<a id="L201"></a><span class="ln">   201</span>			if d.o &gt;= flushBuffer {
<a id="L202"></a><span class="ln">   202</span>				d.flush()
<a id="L203"></a><span class="ln">   203</span>				return
<a id="L204"></a><span class="ln">   204</span>			}
<a id="L205"></a><span class="ln">   205</span>		}
<a id="L206"></a><span class="ln">   206</span>		panic(&#34;unreachable&#34;)
<a id="L207"></a><span class="ln">   207</span>	}
<a id="L208"></a><span class="ln">   208</span>	
<a id="L209"></a><span class="ln">   209</span>	func (d *decoder) flush() {
<a id="L210"></a><span class="ln">   210</span>		d.toRead = d.output[:d.o]
<a id="L211"></a><span class="ln">   211</span>		d.o = 0
<a id="L212"></a><span class="ln">   212</span>	}
<a id="L213"></a><span class="ln">   213</span>	
<a id="L214"></a><span class="ln">   214</span>	var errClosed = errors.New(&#34;compress/lzw: reader/writer is closed&#34;)
<a id="L215"></a><span class="ln">   215</span>	
<a id="L216"></a><span class="ln">   216</span>	func (d *decoder) Close() error {
<a id="L217"></a><span class="ln">   217</span>		d.err = errClosed <span class="comment">// in case any Reads come along</span>
<a id="L218"></a><span class="ln">   218</span>		return nil
<a id="L219"></a><span class="ln">   219</span>	}
<a id="L220"></a><span class="ln">   220</span>	
<a id="L221"></a><span class="ln">   221</span>	<span class="comment">// NewReader creates a new io.ReadCloser that satisfies reads by decompressing</span>
<a id="L222"></a><span class="ln">   222</span>	<span class="comment">// the data read from r.</span>
<a id="L223"></a><span class="ln">   223</span>	<span class="comment">// It is the caller&#39;s responsibility to call Close on the ReadCloser when</span>
<a id="L224"></a><span class="ln">   224</span>	<span class="comment">// finished reading.</span>
<a id="L225"></a><span class="ln">   225</span>	<span class="comment">// The number of bits to use for literal codes, litWidth, must be in the</span>
<a id="L226"></a><span class="ln">   226</span>	<span class="comment">// range [2,8] and is typically 8.</span>
<a id="L227"></a><span class="ln">   227</span>	func NewReader(r io.Reader, order Order, litWidth int) io.ReadCloser {
<a id="L228"></a><span class="ln">   228</span>		d := new(decoder)
<a id="L229"></a><span class="ln">   229</span>		switch order {
<a id="L230"></a><span class="ln">   230</span>		case LSB:
<a id="L231"></a><span class="ln">   231</span>			d.read = (*decoder).readLSB
<a id="L232"></a><span class="ln">   232</span>		case MSB:
<a id="L233"></a><span class="ln">   233</span>			d.read = (*decoder).readMSB
<a id="L234"></a><span class="ln">   234</span>		default:
<a id="L235"></a><span class="ln">   235</span>			d.err = errors.New(&#34;lzw: unknown order&#34;)
<a id="L236"></a><span class="ln">   236</span>			return d
<a id="L237"></a><span class="ln">   237</span>		}
<a id="L238"></a><span class="ln">   238</span>		if litWidth &lt; 2 || 8 &lt; litWidth {
<a id="L239"></a><span class="ln">   239</span>			d.err = fmt.Errorf(&#34;lzw: litWidth %d out of range&#34;, litWidth)
<a id="L240"></a><span class="ln">   240</span>			return d
<a id="L241"></a><span class="ln">   241</span>		}
<a id="L242"></a><span class="ln">   242</span>		if br, ok := r.(io.ByteReader); ok {
<a id="L243"></a><span class="ln">   243</span>			d.r = br
<a id="L244"></a><span class="ln">   244</span>		} else {
<a id="L245"></a><span class="ln">   245</span>			d.r = bufio.NewReader(r)
<a id="L246"></a><span class="ln">   246</span>		}
<a id="L247"></a><span class="ln">   247</span>		d.litWidth = litWidth
<a id="L248"></a><span class="ln">   248</span>		d.width = 1 + uint(litWidth)
<a id="L249"></a><span class="ln">   249</span>		d.clear = uint16(1) &lt;&lt; uint(litWidth)
<a id="L250"></a><span class="ln">   250</span>		d.eof, d.hi = d.clear+1, d.clear+1
<a id="L251"></a><span class="ln">   251</span>		d.overflow = uint16(1) &lt;&lt; d.width
<a id="L252"></a><span class="ln">   252</span>		d.last = decoderInvalidCode
<a id="L253"></a><span class="ln">   253</span>	
<a id="L254"></a><span class="ln">   254</span>		return d
<a id="L255"></a><span class="ln">   255</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

