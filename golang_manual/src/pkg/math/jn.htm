<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/math/jn.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/math/jn.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package math
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">/*
</span><a id="L8"></a><span class="ln">     8</span>	<span class="comment">	Bessel function of the first and second kinds of order n.
</span><a id="L9"></a><span class="ln">     9</span>	<span class="comment">*/</span>
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// The original C code and the long comment below are</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// from FreeBSD&#39;s /usr/src/lib/msun/src/e_jn.c and</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// came with this notice.  The go code is a simplified</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// version of the original C.</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">//</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// ====================================================</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">//</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// Developed at SunPro, a Sun Microsystems, Inc. business.</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// Permission to use, copy, modify, and distribute this</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// software is freely granted, provided that this notice</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// is preserved.</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// ====================================================</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// __ieee754_jn(n, x), __ieee754_yn(n, x)</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// floating point Bessel&#39;s function of the 1st and 2nd kind</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// of order n</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">//</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// Special cases:</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">//      y0(0)=y1(0)=yn(n,0) = -inf with division by zero signal;</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">//      y0(-ve)=y1(-ve)=yn(n,-ve) are NaN with invalid signal.</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// Note 2. About jn(n,x), yn(n,x)</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">//      For n=0, j0(x) is called,</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">//      for n=1, j1(x) is called,</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//      for n&lt;x, forward recursion is used starting</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//      from values of j0(x) and j1(x).</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">//      for n&gt;x, a continued fraction approximation to</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//      j(n,x)/j(n-1,x) is evaluated and then backward</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">//      recursion is used starting from a supposed value</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">//      for j(n,x). The resulting value of j(0,x) is</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">//      compared with the actual value to correct the</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">//      supposed value of j(n,x).</span>
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">//</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">//      yn(n,x) is similar in all respects, except</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">//      that forward recursion is used for all</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">//      values of n&gt;1.</span>
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">// Jn returns the order-n Bessel function of the first kind.</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">//</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// Special cases are:</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">//	Jn(n, Â±Inf) = 0</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">//	Jn(n, NaN) = NaN</span>
<a id="L53"></a><span class="ln">    53</span>	func Jn(n int, x float64) float64 {
<a id="L54"></a><span class="ln">    54</span>		const (
<a id="L55"></a><span class="ln">    55</span>			TwoM29 = 1.0 / (1 &lt;&lt; 29) <span class="comment">// 2**-29 0x3e10000000000000</span>
<a id="L56"></a><span class="ln">    56</span>			Two302 = 1 &lt;&lt; 302        <span class="comment">// 2**302 0x52D0000000000000</span>
<a id="L57"></a><span class="ln">    57</span>		)
<a id="L58"></a><span class="ln">    58</span>		<span class="comment">// special cases</span>
<a id="L59"></a><span class="ln">    59</span>		switch {
<a id="L60"></a><span class="ln">    60</span>		case IsNaN(x):
<a id="L61"></a><span class="ln">    61</span>			return x
<a id="L62"></a><span class="ln">    62</span>		case IsInf(x, 0):
<a id="L63"></a><span class="ln">    63</span>			return 0
<a id="L64"></a><span class="ln">    64</span>		}
<a id="L65"></a><span class="ln">    65</span>		<span class="comment">// J(-n, x) = (-1)**n * J(n, x), J(n, -x) = (-1)**n * J(n, x)</span>
<a id="L66"></a><span class="ln">    66</span>		<span class="comment">// Thus, J(-n, x) = J(n, -x)</span>
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>		if n == 0 {
<a id="L69"></a><span class="ln">    69</span>			return J0(x)
<a id="L70"></a><span class="ln">    70</span>		}
<a id="L71"></a><span class="ln">    71</span>		if x == 0 {
<a id="L72"></a><span class="ln">    72</span>			return 0
<a id="L73"></a><span class="ln">    73</span>		}
<a id="L74"></a><span class="ln">    74</span>		if n &lt; 0 {
<a id="L75"></a><span class="ln">    75</span>			n, x = -n, -x
<a id="L76"></a><span class="ln">    76</span>		}
<a id="L77"></a><span class="ln">    77</span>		if n == 1 {
<a id="L78"></a><span class="ln">    78</span>			return J1(x)
<a id="L79"></a><span class="ln">    79</span>		}
<a id="L80"></a><span class="ln">    80</span>		sign := false
<a id="L81"></a><span class="ln">    81</span>		if x &lt; 0 {
<a id="L82"></a><span class="ln">    82</span>			x = -x
<a id="L83"></a><span class="ln">    83</span>			if n&amp;1 == 1 {
<a id="L84"></a><span class="ln">    84</span>				sign = true <span class="comment">// odd n and negative x</span>
<a id="L85"></a><span class="ln">    85</span>			}
<a id="L86"></a><span class="ln">    86</span>		}
<a id="L87"></a><span class="ln">    87</span>		var b float64
<a id="L88"></a><span class="ln">    88</span>		if float64(n) &lt;= x {
<a id="L89"></a><span class="ln">    89</span>			<span class="comment">// Safe to use J(n+1,x)=2n/x *J(n,x)-J(n-1,x)</span>
<a id="L90"></a><span class="ln">    90</span>			if x &gt;= Two302 { <span class="comment">// x &gt; 2**302</span>
<a id="L91"></a><span class="ln">    91</span>	
<a id="L92"></a><span class="ln">    92</span>				<span class="comment">// (x &gt;&gt; n**2)</span>
<a id="L93"></a><span class="ln">    93</span>				<span class="comment">//          Jn(x) = cos(x-(2n+1)*pi/4)*sqrt(2/x*pi)</span>
<a id="L94"></a><span class="ln">    94</span>				<span class="comment">//          Yn(x) = sin(x-(2n+1)*pi/4)*sqrt(2/x*pi)</span>
<a id="L95"></a><span class="ln">    95</span>				<span class="comment">//          Let s=sin(x), c=cos(x),</span>
<a id="L96"></a><span class="ln">    96</span>				<span class="comment">//              xn=x-(2n+1)*pi/4, sqt2 = sqrt(2),then</span>
<a id="L97"></a><span class="ln">    97</span>				<span class="comment">//</span>
<a id="L98"></a><span class="ln">    98</span>				<span class="comment">//                 n    sin(xn)*sqt2    cos(xn)*sqt2</span>
<a id="L99"></a><span class="ln">    99</span>				<span class="comment">//              ----------------------------------</span>
<a id="L100"></a><span class="ln">   100</span>				<span class="comment">//                 0     s-c             c+s</span>
<a id="L101"></a><span class="ln">   101</span>				<span class="comment">//                 1    -s-c            -c+s</span>
<a id="L102"></a><span class="ln">   102</span>				<span class="comment">//                 2    -s+c            -c-s</span>
<a id="L103"></a><span class="ln">   103</span>				<span class="comment">//                 3     s+c             c-s</span>
<a id="L104"></a><span class="ln">   104</span>	
<a id="L105"></a><span class="ln">   105</span>				var temp float64
<a id="L106"></a><span class="ln">   106</span>				switch n &amp; 3 {
<a id="L107"></a><span class="ln">   107</span>				case 0:
<a id="L108"></a><span class="ln">   108</span>					temp = Cos(x) + Sin(x)
<a id="L109"></a><span class="ln">   109</span>				case 1:
<a id="L110"></a><span class="ln">   110</span>					temp = -Cos(x) + Sin(x)
<a id="L111"></a><span class="ln">   111</span>				case 2:
<a id="L112"></a><span class="ln">   112</span>					temp = -Cos(x) - Sin(x)
<a id="L113"></a><span class="ln">   113</span>				case 3:
<a id="L114"></a><span class="ln">   114</span>					temp = Cos(x) - Sin(x)
<a id="L115"></a><span class="ln">   115</span>				}
<a id="L116"></a><span class="ln">   116</span>				b = (1 / SqrtPi) * temp / Sqrt(x)
<a id="L117"></a><span class="ln">   117</span>			} else {
<a id="L118"></a><span class="ln">   118</span>				b = J1(x)
<a id="L119"></a><span class="ln">   119</span>				for i, a := 1, J0(x); i &lt; n; i++ {
<a id="L120"></a><span class="ln">   120</span>					a, b = b, b*(float64(i+i)/x)-a <span class="comment">// avoid underflow</span>
<a id="L121"></a><span class="ln">   121</span>				}
<a id="L122"></a><span class="ln">   122</span>			}
<a id="L123"></a><span class="ln">   123</span>		} else {
<a id="L124"></a><span class="ln">   124</span>			if x &lt; TwoM29 { <span class="comment">// x &lt; 2**-29</span>
<a id="L125"></a><span class="ln">   125</span>				<span class="comment">// x is tiny, return the first Taylor expansion of J(n,x)</span>
<a id="L126"></a><span class="ln">   126</span>				<span class="comment">// J(n,x) = 1/n!*(x/2)**n  - ...</span>
<a id="L127"></a><span class="ln">   127</span>	
<a id="L128"></a><span class="ln">   128</span>				if n &gt; 33 { <span class="comment">// underflow</span>
<a id="L129"></a><span class="ln">   129</span>					b = 0
<a id="L130"></a><span class="ln">   130</span>				} else {
<a id="L131"></a><span class="ln">   131</span>					temp := x * 0.5
<a id="L132"></a><span class="ln">   132</span>					b = temp
<a id="L133"></a><span class="ln">   133</span>					a := 1.0
<a id="L134"></a><span class="ln">   134</span>					for i := 2; i &lt;= n; i++ {
<a id="L135"></a><span class="ln">   135</span>						a *= float64(i) <span class="comment">// a = n!</span>
<a id="L136"></a><span class="ln">   136</span>						b *= temp       <span class="comment">// b = (x/2)**n</span>
<a id="L137"></a><span class="ln">   137</span>					}
<a id="L138"></a><span class="ln">   138</span>					b /= a
<a id="L139"></a><span class="ln">   139</span>				}
<a id="L140"></a><span class="ln">   140</span>			} else {
<a id="L141"></a><span class="ln">   141</span>				<span class="comment">// use backward recurrence</span>
<a id="L142"></a><span class="ln">   142</span>				<span class="comment">//                      x      x**2      x**2</span>
<a id="L143"></a><span class="ln">   143</span>				<span class="comment">//  J(n,x)/J(n-1,x) =  ----   ------   ------   .....</span>
<a id="L144"></a><span class="ln">   144</span>				<span class="comment">//                      2n  - 2(n+1) - 2(n+2)</span>
<a id="L145"></a><span class="ln">   145</span>				<span class="comment">//</span>
<a id="L146"></a><span class="ln">   146</span>				<span class="comment">//                      1      1        1</span>
<a id="L147"></a><span class="ln">   147</span>				<span class="comment">//  (for large x)   =  ----  ------   ------   .....</span>
<a id="L148"></a><span class="ln">   148</span>				<span class="comment">//                      2n   2(n+1)   2(n+2)</span>
<a id="L149"></a><span class="ln">   149</span>				<span class="comment">//                      -- - ------ - ------ -</span>
<a id="L150"></a><span class="ln">   150</span>				<span class="comment">//                       x     x         x</span>
<a id="L151"></a><span class="ln">   151</span>				<span class="comment">//</span>
<a id="L152"></a><span class="ln">   152</span>				<span class="comment">// Let w = 2n/x and h=2/x, then the above quotient</span>
<a id="L153"></a><span class="ln">   153</span>				<span class="comment">// is equal to the continued fraction:</span>
<a id="L154"></a><span class="ln">   154</span>				<span class="comment">//                  1</span>
<a id="L155"></a><span class="ln">   155</span>				<span class="comment">//      = -----------------------</span>
<a id="L156"></a><span class="ln">   156</span>				<span class="comment">//                     1</span>
<a id="L157"></a><span class="ln">   157</span>				<span class="comment">//         w - -----------------</span>
<a id="L158"></a><span class="ln">   158</span>				<span class="comment">//                        1</span>
<a id="L159"></a><span class="ln">   159</span>				<span class="comment">//              w+h - ---------</span>
<a id="L160"></a><span class="ln">   160</span>				<span class="comment">//                     w+2h - ...</span>
<a id="L161"></a><span class="ln">   161</span>				<span class="comment">//</span>
<a id="L162"></a><span class="ln">   162</span>				<span class="comment">// To determine how many terms needed, let</span>
<a id="L163"></a><span class="ln">   163</span>				<span class="comment">// Q(0) = w, Q(1) = w(w+h) - 1,</span>
<a id="L164"></a><span class="ln">   164</span>				<span class="comment">// Q(k) = (w+k*h)*Q(k-1) - Q(k-2),</span>
<a id="L165"></a><span class="ln">   165</span>				<span class="comment">// When Q(k) &gt; 1e4	good for single</span>
<a id="L166"></a><span class="ln">   166</span>				<span class="comment">// When Q(k) &gt; 1e9	good for double</span>
<a id="L167"></a><span class="ln">   167</span>				<span class="comment">// When Q(k) &gt; 1e17	good for quadruple</span>
<a id="L168"></a><span class="ln">   168</span>	
<a id="L169"></a><span class="ln">   169</span>				<span class="comment">// determine k</span>
<a id="L170"></a><span class="ln">   170</span>				w := float64(n+n) / x
<a id="L171"></a><span class="ln">   171</span>				h := 2 / x
<a id="L172"></a><span class="ln">   172</span>				q0 := w
<a id="L173"></a><span class="ln">   173</span>				z := w + h
<a id="L174"></a><span class="ln">   174</span>				q1 := w*z - 1
<a id="L175"></a><span class="ln">   175</span>				k := 1
<a id="L176"></a><span class="ln">   176</span>				for q1 &lt; 1e9 {
<a id="L177"></a><span class="ln">   177</span>					k += 1
<a id="L178"></a><span class="ln">   178</span>					z += h
<a id="L179"></a><span class="ln">   179</span>					q0, q1 = q1, z*q1-q0
<a id="L180"></a><span class="ln">   180</span>				}
<a id="L181"></a><span class="ln">   181</span>				m := n + n
<a id="L182"></a><span class="ln">   182</span>				t := 0.0
<a id="L183"></a><span class="ln">   183</span>				for i := 2 * (n + k); i &gt;= m; i -= 2 {
<a id="L184"></a><span class="ln">   184</span>					t = 1 / (float64(i)/x - t)
<a id="L185"></a><span class="ln">   185</span>				}
<a id="L186"></a><span class="ln">   186</span>				a := t
<a id="L187"></a><span class="ln">   187</span>				b = 1
<a id="L188"></a><span class="ln">   188</span>				<span class="comment">//  estimate log((2/x)**n*n!) = n*log(2/x)+n*ln(n)</span>
<a id="L189"></a><span class="ln">   189</span>				<span class="comment">//  Hence, if n*(log(2n/x)) &gt; ...</span>
<a id="L190"></a><span class="ln">   190</span>				<span class="comment">//  single 8.8722839355e+01</span>
<a id="L191"></a><span class="ln">   191</span>				<span class="comment">//  double 7.09782712893383973096e+02</span>
<a id="L192"></a><span class="ln">   192</span>				<span class="comment">//  long double 1.1356523406294143949491931077970765006170e+04</span>
<a id="L193"></a><span class="ln">   193</span>				<span class="comment">//  then recurrent value may overflow and the result is</span>
<a id="L194"></a><span class="ln">   194</span>				<span class="comment">//  likely underflow to zero</span>
<a id="L195"></a><span class="ln">   195</span>	
<a id="L196"></a><span class="ln">   196</span>				tmp := float64(n)
<a id="L197"></a><span class="ln">   197</span>				v := 2 / x
<a id="L198"></a><span class="ln">   198</span>				tmp = tmp * Log(Abs(v*tmp))
<a id="L199"></a><span class="ln">   199</span>				if tmp &lt; 7.09782712893383973096e+02 {
<a id="L200"></a><span class="ln">   200</span>					for i := n - 1; i &gt; 0; i-- {
<a id="L201"></a><span class="ln">   201</span>						di := float64(i + i)
<a id="L202"></a><span class="ln">   202</span>						a, b = b, b*di/x-a
<a id="L203"></a><span class="ln">   203</span>						di -= 2
<a id="L204"></a><span class="ln">   204</span>					}
<a id="L205"></a><span class="ln">   205</span>				} else {
<a id="L206"></a><span class="ln">   206</span>					for i := n - 1; i &gt; 0; i-- {
<a id="L207"></a><span class="ln">   207</span>						di := float64(i + i)
<a id="L208"></a><span class="ln">   208</span>						a, b = b, b*di/x-a
<a id="L209"></a><span class="ln">   209</span>						di -= 2
<a id="L210"></a><span class="ln">   210</span>						<span class="comment">// scale b to avoid spurious overflow</span>
<a id="L211"></a><span class="ln">   211</span>						if b &gt; 1e100 {
<a id="L212"></a><span class="ln">   212</span>							a /= b
<a id="L213"></a><span class="ln">   213</span>							t /= b
<a id="L214"></a><span class="ln">   214</span>							b = 1
<a id="L215"></a><span class="ln">   215</span>						}
<a id="L216"></a><span class="ln">   216</span>					}
<a id="L217"></a><span class="ln">   217</span>				}
<a id="L218"></a><span class="ln">   218</span>				b = t * J0(x) / b
<a id="L219"></a><span class="ln">   219</span>			}
<a id="L220"></a><span class="ln">   220</span>		}
<a id="L221"></a><span class="ln">   221</span>		if sign {
<a id="L222"></a><span class="ln">   222</span>			return -b
<a id="L223"></a><span class="ln">   223</span>		}
<a id="L224"></a><span class="ln">   224</span>		return b
<a id="L225"></a><span class="ln">   225</span>	}
<a id="L226"></a><span class="ln">   226</span>	
<a id="L227"></a><span class="ln">   227</span>	<span class="comment">// Yn returns the order-n Bessel function of the second kind.</span>
<a id="L228"></a><span class="ln">   228</span>	<span class="comment">//</span>
<a id="L229"></a><span class="ln">   229</span>	<span class="comment">// Special cases are:</span>
<a id="L230"></a><span class="ln">   230</span>	<span class="comment">//	Yn(n, +Inf) = 0</span>
<a id="L231"></a><span class="ln">   231</span>	<span class="comment">//	Yn(n &gt; 0, 0) = -Inf</span>
<a id="L232"></a><span class="ln">   232</span>	<span class="comment">//	Yn(n &lt; 0, 0) = +Inf if n is odd, -Inf if n is even</span>
<a id="L233"></a><span class="ln">   233</span>	<span class="comment">//	Y1(n, x &lt; 0) = NaN</span>
<a id="L234"></a><span class="ln">   234</span>	<span class="comment">//	Y1(n, NaN) = NaN</span>
<a id="L235"></a><span class="ln">   235</span>	func Yn(n int, x float64) float64 {
<a id="L236"></a><span class="ln">   236</span>		const Two302 = 1 &lt;&lt; 302 <span class="comment">// 2**302 0x52D0000000000000</span>
<a id="L237"></a><span class="ln">   237</span>		<span class="comment">// special cases</span>
<a id="L238"></a><span class="ln">   238</span>		switch {
<a id="L239"></a><span class="ln">   239</span>		case x &lt; 0 || IsNaN(x):
<a id="L240"></a><span class="ln">   240</span>			return NaN()
<a id="L241"></a><span class="ln">   241</span>		case IsInf(x, 1):
<a id="L242"></a><span class="ln">   242</span>			return 0
<a id="L243"></a><span class="ln">   243</span>		}
<a id="L244"></a><span class="ln">   244</span>	
<a id="L245"></a><span class="ln">   245</span>		if n == 0 {
<a id="L246"></a><span class="ln">   246</span>			return Y0(x)
<a id="L247"></a><span class="ln">   247</span>		}
<a id="L248"></a><span class="ln">   248</span>		if x == 0 {
<a id="L249"></a><span class="ln">   249</span>			if n &lt; 0 &amp;&amp; n&amp;1 == 1 {
<a id="L250"></a><span class="ln">   250</span>				return Inf(1)
<a id="L251"></a><span class="ln">   251</span>			}
<a id="L252"></a><span class="ln">   252</span>			return Inf(-1)
<a id="L253"></a><span class="ln">   253</span>		}
<a id="L254"></a><span class="ln">   254</span>		sign := false
<a id="L255"></a><span class="ln">   255</span>		if n &lt; 0 {
<a id="L256"></a><span class="ln">   256</span>			n = -n
<a id="L257"></a><span class="ln">   257</span>			if n&amp;1 == 1 {
<a id="L258"></a><span class="ln">   258</span>				sign = true <span class="comment">// sign true if n &lt; 0 &amp;&amp; |n| odd</span>
<a id="L259"></a><span class="ln">   259</span>			}
<a id="L260"></a><span class="ln">   260</span>		}
<a id="L261"></a><span class="ln">   261</span>		if n == 1 {
<a id="L262"></a><span class="ln">   262</span>			if sign {
<a id="L263"></a><span class="ln">   263</span>				return -Y1(x)
<a id="L264"></a><span class="ln">   264</span>			}
<a id="L265"></a><span class="ln">   265</span>			return Y1(x)
<a id="L266"></a><span class="ln">   266</span>		}
<a id="L267"></a><span class="ln">   267</span>		var b float64
<a id="L268"></a><span class="ln">   268</span>		if x &gt;= Two302 { <span class="comment">// x &gt; 2**302</span>
<a id="L269"></a><span class="ln">   269</span>			<span class="comment">// (x &gt;&gt; n**2)</span>
<a id="L270"></a><span class="ln">   270</span>			<span class="comment">//	    Jn(x) = cos(x-(2n+1)*pi/4)*sqrt(2/x*pi)</span>
<a id="L271"></a><span class="ln">   271</span>			<span class="comment">//	    Yn(x) = sin(x-(2n+1)*pi/4)*sqrt(2/x*pi)</span>
<a id="L272"></a><span class="ln">   272</span>			<span class="comment">//	    Let s=sin(x), c=cos(x),</span>
<a id="L273"></a><span class="ln">   273</span>			<span class="comment">//		xn=x-(2n+1)*pi/4, sqt2 = sqrt(2),then</span>
<a id="L274"></a><span class="ln">   274</span>			<span class="comment">//</span>
<a id="L275"></a><span class="ln">   275</span>			<span class="comment">//		   n	sin(xn)*sqt2	cos(xn)*sqt2</span>
<a id="L276"></a><span class="ln">   276</span>			<span class="comment">//		----------------------------------</span>
<a id="L277"></a><span class="ln">   277</span>			<span class="comment">//		   0	 s-c		 c+s</span>
<a id="L278"></a><span class="ln">   278</span>			<span class="comment">//		   1	-s-c 		-c+s</span>
<a id="L279"></a><span class="ln">   279</span>			<span class="comment">//		   2	-s+c		-c-s</span>
<a id="L280"></a><span class="ln">   280</span>			<span class="comment">//		   3	 s+c		 c-s</span>
<a id="L281"></a><span class="ln">   281</span>	
<a id="L282"></a><span class="ln">   282</span>			var temp float64
<a id="L283"></a><span class="ln">   283</span>			switch n &amp; 3 {
<a id="L284"></a><span class="ln">   284</span>			case 0:
<a id="L285"></a><span class="ln">   285</span>				temp = Sin(x) - Cos(x)
<a id="L286"></a><span class="ln">   286</span>			case 1:
<a id="L287"></a><span class="ln">   287</span>				temp = -Sin(x) - Cos(x)
<a id="L288"></a><span class="ln">   288</span>			case 2:
<a id="L289"></a><span class="ln">   289</span>				temp = -Sin(x) + Cos(x)
<a id="L290"></a><span class="ln">   290</span>			case 3:
<a id="L291"></a><span class="ln">   291</span>				temp = Sin(x) + Cos(x)
<a id="L292"></a><span class="ln">   292</span>			}
<a id="L293"></a><span class="ln">   293</span>			b = (1 / SqrtPi) * temp / Sqrt(x)
<a id="L294"></a><span class="ln">   294</span>		} else {
<a id="L295"></a><span class="ln">   295</span>			a := Y0(x)
<a id="L296"></a><span class="ln">   296</span>			b = Y1(x)
<a id="L297"></a><span class="ln">   297</span>			<span class="comment">// quit if b is -inf</span>
<a id="L298"></a><span class="ln">   298</span>			for i := 1; i &lt; n &amp;&amp; !IsInf(b, -1); i++ {
<a id="L299"></a><span class="ln">   299</span>				a, b = b, (float64(i+i)/x)*b-a
<a id="L300"></a><span class="ln">   300</span>			}
<a id="L301"></a><span class="ln">   301</span>		}
<a id="L302"></a><span class="ln">   302</span>		if sign {
<a id="L303"></a><span class="ln">   303</span>			return -b
<a id="L304"></a><span class="ln">   304</span>		}
<a id="L305"></a><span class="ln">   305</span>		return b
<a id="L306"></a><span class="ln">   306</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

