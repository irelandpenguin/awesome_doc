<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/math/sincos.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/math/sincos.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package math
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// Coefficients _sin[] and _cos[] are found in pkg/math/sin.go.</span>
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// Sincos(x) returns Sin(x), Cos(x).</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">//</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// Special cases are:</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">//	Sincos(±0) = ±0, 1</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">//	Sincos(±Inf) = NaN, NaN</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">//	Sincos(NaN) = NaN, NaN</span>
<a id="L15"></a><span class="ln">    15</span>	func Sincos(x float64) (sin, cos float64)
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	func sincos(x float64) (sin, cos float64) {
<a id="L18"></a><span class="ln">    18</span>		const (
<a id="L19"></a><span class="ln">    19</span>			PI4A = 7.85398125648498535156E-1                             <span class="comment">// 0x3fe921fb40000000, Pi/4 split into three parts</span>
<a id="L20"></a><span class="ln">    20</span>			PI4B = 3.77489470793079817668E-8                             <span class="comment">// 0x3e64442d00000000,</span>
<a id="L21"></a><span class="ln">    21</span>			PI4C = 2.69515142907905952645E-15                            <span class="comment">// 0x3ce8469898cc5170,</span>
<a id="L22"></a><span class="ln">    22</span>			M4PI = 1.273239544735162542821171882678754627704620361328125 <span class="comment">// 4/pi</span>
<a id="L23"></a><span class="ln">    23</span>		)
<a id="L24"></a><span class="ln">    24</span>		<span class="comment">// special cases</span>
<a id="L25"></a><span class="ln">    25</span>		switch {
<a id="L26"></a><span class="ln">    26</span>		case x == 0:
<a id="L27"></a><span class="ln">    27</span>			return x, 1 <span class="comment">// return ±0.0, 1.0</span>
<a id="L28"></a><span class="ln">    28</span>		case IsNaN(x) || IsInf(x, 0):
<a id="L29"></a><span class="ln">    29</span>			return NaN(), NaN()
<a id="L30"></a><span class="ln">    30</span>		}
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>		<span class="comment">// make argument positive</span>
<a id="L33"></a><span class="ln">    33</span>		sinSign, cosSign := false, false
<a id="L34"></a><span class="ln">    34</span>		if x &lt; 0 {
<a id="L35"></a><span class="ln">    35</span>			x = -x
<a id="L36"></a><span class="ln">    36</span>			sinSign = true
<a id="L37"></a><span class="ln">    37</span>		}
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>		j := int64(x * M4PI) <span class="comment">// integer part of x/(Pi/4), as integer for tests on the phase angle</span>
<a id="L40"></a><span class="ln">    40</span>		y := float64(j)      <span class="comment">// integer part of x/(Pi/4), as float</span>
<a id="L41"></a><span class="ln">    41</span>	
<a id="L42"></a><span class="ln">    42</span>		if j&amp;1 == 1 { <span class="comment">// map zeros to origin</span>
<a id="L43"></a><span class="ln">    43</span>			j += 1
<a id="L44"></a><span class="ln">    44</span>			y += 1
<a id="L45"></a><span class="ln">    45</span>		}
<a id="L46"></a><span class="ln">    46</span>		j &amp;= 7     <span class="comment">// octant modulo 2Pi radians (360 degrees)</span>
<a id="L47"></a><span class="ln">    47</span>		if j &gt; 3 { <span class="comment">// reflect in x axis</span>
<a id="L48"></a><span class="ln">    48</span>			j -= 4
<a id="L49"></a><span class="ln">    49</span>			sinSign, cosSign = !sinSign, !cosSign
<a id="L50"></a><span class="ln">    50</span>		}
<a id="L51"></a><span class="ln">    51</span>		if j &gt; 1 {
<a id="L52"></a><span class="ln">    52</span>			cosSign = !cosSign
<a id="L53"></a><span class="ln">    53</span>		}
<a id="L54"></a><span class="ln">    54</span>	
<a id="L55"></a><span class="ln">    55</span>		z := ((x - y*PI4A) - y*PI4B) - y*PI4C <span class="comment">// Extended precision modular arithmetic</span>
<a id="L56"></a><span class="ln">    56</span>		zz := z * z
<a id="L57"></a><span class="ln">    57</span>		cos = 1.0 - 0.5*zz + zz*zz*((((((_cos[0]*zz)+_cos[1])*zz+_cos[2])*zz+_cos[3])*zz+_cos[4])*zz+_cos[5])
<a id="L58"></a><span class="ln">    58</span>		sin = z + z*zz*((((((_sin[0]*zz)+_sin[1])*zz+_sin[2])*zz+_sin[3])*zz+_sin[4])*zz+_sin[5])
<a id="L59"></a><span class="ln">    59</span>		if j == 1 || j == 2 {
<a id="L60"></a><span class="ln">    60</span>			sin, cos = cos, sin
<a id="L61"></a><span class="ln">    61</span>		}
<a id="L62"></a><span class="ln">    62</span>		if cosSign {
<a id="L63"></a><span class="ln">    63</span>			cos = -cos
<a id="L64"></a><span class="ln">    64</span>		}
<a id="L65"></a><span class="ln">    65</span>		if sinSign {
<a id="L66"></a><span class="ln">    66</span>			sin = -sin
<a id="L67"></a><span class="ln">    67</span>		}
<a id="L68"></a><span class="ln">    68</span>		return
<a id="L69"></a><span class="ln">    69</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

