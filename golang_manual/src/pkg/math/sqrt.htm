<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/math/sqrt.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/math/sqrt.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package math
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// Sqrt returns the square root of x.</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">//</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// Special cases are:</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">//	Sqrt(+Inf) = +Inf</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">//	Sqrt(±0) = ±0</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">//	Sqrt(x &lt; 0) = NaN</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">//	Sqrt(NaN) = NaN</span>
<a id="L14"></a><span class="ln">    14</span>	func Sqrt(x float64) float64
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// The original C code and the long comment below are</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// from FreeBSD&#39;s /usr/src/lib/msun/src/e_sqrt.c and</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// came with this notice.  The go code is a simplified</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// version of the original C.</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">//</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// ====================================================</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">//</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// Developed at SunPro, a Sun Microsystems, Inc. business.</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// Permission to use, copy, modify, and distribute this</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// software is freely granted, provided that this notice</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// is preserved.</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// ====================================================</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">//</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// __ieee754_sqrt(x)</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// Return correctly rounded sqrt.</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">//           -----------------------------------------</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">//           | Use the hardware sqrt if you have one |</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">//           -----------------------------------------</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// Method:</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//   Bit by bit method using integer arithmetic. (Slow, but portable)</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">//   1. Normalization</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//      Scale x to y in [1,4) with even powers of 2:</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">//      find an integer k such that  1 &lt;= (y=x*2**(2k)) &lt; 4, then</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">//              sqrt(x) = 2**k * sqrt(y)</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">//   2. Bit by bit computation</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">//      Let q  = sqrt(y) truncated to i bit after binary point (q = 1),</span>
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">//           i                                                   0</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">//                                     i+1         2</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">//          s  = 2*q , and      y  =  2   * ( y - q  ).          (1)</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">//           i      i            i                 i</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">//</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">//      To compute q    from q , one checks whether</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">//                  i+1       i</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">//</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">//                            -(i+1) 2</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">//                      (q + 2      )  &lt;= y.                     (2)</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">//                        i</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">//                                                            -(i+1)</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">//      If (2) is false, then q   = q ; otherwise q   = q  + 2      .</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">//                             i+1   i             i+1   i</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">//</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">//      With some algebraic manipulation, it is not difficult to see</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">//      that (2) is equivalent to</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">//                             -(i+1)</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">//                      s  +  2       &lt;= y                       (3)</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">//                       i                i</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">//</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">//      The advantage of (3) is that s  and y  can be computed by</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">//                                    i      i</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">//      the following recurrence formula:</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">//          if (3) is false</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">//</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">//          s     =  s  ,       y    = y   ;                     (4)</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">//           i+1      i          i+1    i</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">//</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">//      otherwise,</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">//                         -i                      -(i+1)</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">//          s     =  s  + 2  ,  y    = y  -  s  - 2              (5)</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">//           i+1      i          i+1    i     i</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">//</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">//      One may easily use induction to prove (4) and (5).</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">//      Note. Since the left hand side of (3) contain only i+2 bits,</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">//            it does not necessary to do a full (53-bit) comparison</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">//            in (3).</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">//   3. Final rounding</span>
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">//      After generating the 53 bits result, we compute one more bit.</span>
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">//      Together with the remainder, we can decide whether the</span>
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">//      result is exact, bigger than 1/2ulp, or less than 1/2ulp</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">//      (it will never equal to 1/2ulp).</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">//      The rounding mode can be detected by checking whether</span>
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">//      huge + tiny is equal to huge, and whether huge - tiny is</span>
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">//      equal to huge for some floating point number &#34;huge&#34; and &#34;tiny&#34;.</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">//</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">//</span>
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// Notes:  Rounding mode detection omitted.  The constants &#34;mask&#34;, &#34;shift&#34;,</span>
<a id="L92"></a><span class="ln">    92</span>	<span class="comment">// and &#34;bias&#34; are found in src/pkg/math/bits.go</span>
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// Sqrt returns the square root of x.</span>
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">//</span>
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">// Special cases are:</span>
<a id="L97"></a><span class="ln">    97</span>	<span class="comment">//	Sqrt(+Inf) = +Inf</span>
<a id="L98"></a><span class="ln">    98</span>	<span class="comment">//	Sqrt(±0) = ±0</span>
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">//	Sqrt(x &lt; 0) = NaN</span>
<a id="L100"></a><span class="ln">   100</span>	<span class="comment">//	Sqrt(NaN) = NaN</span>
<a id="L101"></a><span class="ln">   101</span>	func sqrt(x float64) float64 {
<a id="L102"></a><span class="ln">   102</span>		<span class="comment">// special cases</span>
<a id="L103"></a><span class="ln">   103</span>		switch {
<a id="L104"></a><span class="ln">   104</span>		case x == 0 || IsNaN(x) || IsInf(x, 1):
<a id="L105"></a><span class="ln">   105</span>			return x
<a id="L106"></a><span class="ln">   106</span>		case x &lt; 0:
<a id="L107"></a><span class="ln">   107</span>			return NaN()
<a id="L108"></a><span class="ln">   108</span>		}
<a id="L109"></a><span class="ln">   109</span>		ix := Float64bits(x)
<a id="L110"></a><span class="ln">   110</span>		<span class="comment">// normalize x</span>
<a id="L111"></a><span class="ln">   111</span>		exp := int((ix &gt;&gt; shift) &amp; mask)
<a id="L112"></a><span class="ln">   112</span>		if exp == 0 { <span class="comment">// subnormal x</span>
<a id="L113"></a><span class="ln">   113</span>			for ix&amp;1&lt;&lt;shift == 0 {
<a id="L114"></a><span class="ln">   114</span>				ix &lt;&lt;= 1
<a id="L115"></a><span class="ln">   115</span>				exp--
<a id="L116"></a><span class="ln">   116</span>			}
<a id="L117"></a><span class="ln">   117</span>			exp++
<a id="L118"></a><span class="ln">   118</span>		}
<a id="L119"></a><span class="ln">   119</span>		exp -= bias <span class="comment">// unbias exponent</span>
<a id="L120"></a><span class="ln">   120</span>		ix &amp;^= mask &lt;&lt; shift
<a id="L121"></a><span class="ln">   121</span>		ix |= 1 &lt;&lt; shift
<a id="L122"></a><span class="ln">   122</span>		if exp&amp;1 == 1 { <span class="comment">// odd exp, double x to make it even</span>
<a id="L123"></a><span class="ln">   123</span>			ix &lt;&lt;= 1
<a id="L124"></a><span class="ln">   124</span>		}
<a id="L125"></a><span class="ln">   125</span>		exp &gt;&gt;= 1 <span class="comment">// exp = exp/2, exponent of square root</span>
<a id="L126"></a><span class="ln">   126</span>		<span class="comment">// generate sqrt(x) bit by bit</span>
<a id="L127"></a><span class="ln">   127</span>		ix &lt;&lt;= 1
<a id="L128"></a><span class="ln">   128</span>		var q, s uint64               <span class="comment">// q = sqrt(x)</span>
<a id="L129"></a><span class="ln">   129</span>		r := uint64(1 &lt;&lt; (shift + 1)) <span class="comment">// r = moving bit from MSB to LSB</span>
<a id="L130"></a><span class="ln">   130</span>		for r != 0 {
<a id="L131"></a><span class="ln">   131</span>			t := s + r
<a id="L132"></a><span class="ln">   132</span>			if t &lt;= ix {
<a id="L133"></a><span class="ln">   133</span>				s = t + r
<a id="L134"></a><span class="ln">   134</span>				ix -= t
<a id="L135"></a><span class="ln">   135</span>				q += r
<a id="L136"></a><span class="ln">   136</span>			}
<a id="L137"></a><span class="ln">   137</span>			ix &lt;&lt;= 1
<a id="L138"></a><span class="ln">   138</span>			r &gt;&gt;= 1
<a id="L139"></a><span class="ln">   139</span>		}
<a id="L140"></a><span class="ln">   140</span>		<span class="comment">// final rounding</span>
<a id="L141"></a><span class="ln">   141</span>		if ix != 0 { <span class="comment">// remainder, result not exact</span>
<a id="L142"></a><span class="ln">   142</span>			q += q &amp; 1 <span class="comment">// round according to extra bit</span>
<a id="L143"></a><span class="ln">   143</span>		}
<a id="L144"></a><span class="ln">   144</span>		ix = q&gt;&gt;1 + uint64(exp-1+bias)&lt;&lt;shift <span class="comment">// significand + biased exponent</span>
<a id="L145"></a><span class="ln">   145</span>		return Float64frombits(ix)
<a id="L146"></a><span class="ln">   146</span>	}
<a id="L147"></a><span class="ln">   147</span>	
<a id="L148"></a><span class="ln">   148</span>	func sqrtC(f float64, r *float64) {
<a id="L149"></a><span class="ln">   149</span>		*r = sqrt(f)
<a id="L150"></a><span class="ln">   150</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

