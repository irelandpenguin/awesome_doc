<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/math/log.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/math/log.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package math
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">/*
</span><a id="L8"></a><span class="ln">     8</span>	<span class="comment">	Floating-point logarithm.
</span><a id="L9"></a><span class="ln">     9</span>	<span class="comment">*/</span>
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// The original C code, the long comment, and the constants</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// below are from FreeBSD&#39;s /usr/src/lib/msun/src/e_log.c</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// and came with this notice.  The go code is a simpler</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// version of the original C.</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">//</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// ====================================================</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">//</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// Developed at SunPro, a Sun Microsystems, Inc. business.</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// Permission to use, copy, modify, and distribute this</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// software is freely granted, provided that this notice</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// is preserved.</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// ====================================================</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// __ieee754_log(x)</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// Return the logarithm of x</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">//</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// Method :</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">//   1. Argument Reduction: find k and f such that</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">//			x = 2**k * (1+f),</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">//	   where  sqrt(2)/2 &lt; 1+f &lt; sqrt(2) .</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">//</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">//   2. Approximation of log(1+f).</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">//	Let s = f/(2+f) ; based on log(1+f) = log(1+s) - log(1-s)</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//		 = 2s + 2/3 s**3 + 2/5 s**5 + .....,</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//	     	 = 2s + s*R</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">//      We use a special Reme algorithm on [0,0.1716] to generate</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//	a polynomial of degree 14 to approximate R.  The maximum error</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">//	of this polynomial approximation is bounded by 2**-58.45. In</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">//	other words,</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">//		        2      4      6      8      10      12      14</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">//	    R(z) ~ L1*s +L2*s +L3*s +L4*s +L5*s  +L6*s  +L7*s</span>
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">//	(the values of L1 to L7 are listed in the program) and</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">//	    |      2          14          |     -58.45</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">//	    | L1*s +...+L7*s    -  R(z) | &lt;= 2</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">//	    |                             |</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">//	Note that 2s = f - s*f = f - hfsq + s*hfsq, where hfsq = f*f/2.</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">//	In order to guarantee error in log below 1ulp, we compute log by</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">//		log(1+f) = f - s*(f - R)		(if f is not too large)</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">//		log(1+f) = f - (hfsq - s*(hfsq+R)).	(better accuracy)</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">//</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">//	3. Finally,  log(x) = k*Ln2 + log(1+f).</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">//			    = k*Ln2_hi+(f-(hfsq-(s*(hfsq+R)+k*Ln2_lo)))</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">//	   Here Ln2 is split into two floating point number:</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">//			Ln2_hi + Ln2_lo,</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">//	   where n*Ln2_hi is always exact for |n| &lt; 2000.</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">//</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// Special cases:</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">//	log(x) is NaN with signal if x &lt; 0 (including -INF) ;</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">//	log(+INF) is +INF; log(0) is -INF with signal;</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">//	log(NaN) is that NaN with no signal.</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">//</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">// Accuracy:</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">//	according to an error analysis, the error is always less than</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">//	1 ulp (unit in the last place).</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">//</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// Constants:</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// The hexadecimal values are the intended ones for the following</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// constants. The decimal values may be used, provided that the</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// compiler will convert from decimal to binary accurately enough</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">// to produce the hexadecimal values shown.</span>
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// Log returns the natural logarithm of x.</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">//</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">// Special cases are:</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">//	Log(+Inf) = +Inf</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">//	Log(0) = -Inf</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">//	Log(x &lt; 0) = NaN</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">//	Log(NaN) = NaN</span>
<a id="L80"></a><span class="ln">    80</span>	func Log(x float64) float64
<a id="L81"></a><span class="ln">    81</span>	
<a id="L82"></a><span class="ln">    82</span>	func log(x float64) float64 {
<a id="L83"></a><span class="ln">    83</span>		const (
<a id="L84"></a><span class="ln">    84</span>			Ln2Hi = 6.93147180369123816490e-01 <span class="comment">/* 3fe62e42 fee00000 */</span>
<a id="L85"></a><span class="ln">    85</span>			Ln2Lo = 1.90821492927058770002e-10 <span class="comment">/* 3dea39ef 35793c76 */</span>
<a id="L86"></a><span class="ln">    86</span>			L1    = 6.666666666666735130e-01   <span class="comment">/* 3FE55555 55555593 */</span>
<a id="L87"></a><span class="ln">    87</span>			L2    = 3.999999999940941908e-01   <span class="comment">/* 3FD99999 9997FA04 */</span>
<a id="L88"></a><span class="ln">    88</span>			L3    = 2.857142874366239149e-01   <span class="comment">/* 3FD24924 94229359 */</span>
<a id="L89"></a><span class="ln">    89</span>			L4    = 2.222219843214978396e-01   <span class="comment">/* 3FCC71C5 1D8E78AF */</span>
<a id="L90"></a><span class="ln">    90</span>			L5    = 1.818357216161805012e-01   <span class="comment">/* 3FC74664 96CB03DE */</span>
<a id="L91"></a><span class="ln">    91</span>			L6    = 1.531383769920937332e-01   <span class="comment">/* 3FC39A09 D078C69F */</span>
<a id="L92"></a><span class="ln">    92</span>			L7    = 1.479819860511658591e-01   <span class="comment">/* 3FC2F112 DF3E5244 */</span>
<a id="L93"></a><span class="ln">    93</span>		)
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>		<span class="comment">// special cases</span>
<a id="L96"></a><span class="ln">    96</span>		switch {
<a id="L97"></a><span class="ln">    97</span>		case IsNaN(x) || IsInf(x, 1):
<a id="L98"></a><span class="ln">    98</span>			return x
<a id="L99"></a><span class="ln">    99</span>		case x &lt; 0:
<a id="L100"></a><span class="ln">   100</span>			return NaN()
<a id="L101"></a><span class="ln">   101</span>		case x == 0:
<a id="L102"></a><span class="ln">   102</span>			return Inf(-1)
<a id="L103"></a><span class="ln">   103</span>		}
<a id="L104"></a><span class="ln">   104</span>	
<a id="L105"></a><span class="ln">   105</span>		<span class="comment">// reduce</span>
<a id="L106"></a><span class="ln">   106</span>		f1, ki := Frexp(x)
<a id="L107"></a><span class="ln">   107</span>		if f1 &lt; Sqrt2/2 {
<a id="L108"></a><span class="ln">   108</span>			f1 *= 2
<a id="L109"></a><span class="ln">   109</span>			ki--
<a id="L110"></a><span class="ln">   110</span>		}
<a id="L111"></a><span class="ln">   111</span>		f := f1 - 1
<a id="L112"></a><span class="ln">   112</span>		k := float64(ki)
<a id="L113"></a><span class="ln">   113</span>	
<a id="L114"></a><span class="ln">   114</span>		<span class="comment">// compute</span>
<a id="L115"></a><span class="ln">   115</span>		s := f / (2 + f)
<a id="L116"></a><span class="ln">   116</span>		s2 := s * s
<a id="L117"></a><span class="ln">   117</span>		s4 := s2 * s2
<a id="L118"></a><span class="ln">   118</span>		t1 := s2 * (L1 + s4*(L3+s4*(L5+s4*L7)))
<a id="L119"></a><span class="ln">   119</span>		t2 := s4 * (L2 + s4*(L4+s4*L6))
<a id="L120"></a><span class="ln">   120</span>		R := t1 + t2
<a id="L121"></a><span class="ln">   121</span>		hfsq := 0.5 * f * f
<a id="L122"></a><span class="ln">   122</span>		return k*Ln2Hi - ((hfsq - (s*(hfsq+R) + k*Ln2Lo)) - f)
<a id="L123"></a><span class="ln">   123</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

