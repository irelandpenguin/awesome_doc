<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/math/sin.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/math/sin.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package math
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">/*
</span><a id="L8"></a><span class="ln">     8</span>	<span class="comment">	Floating-point sine and cosine.
</span><a id="L9"></a><span class="ln">     9</span>	<span class="comment">*/</span>
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// The original C code, the long comment, and the constants</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// below were from http://netlib.sandia.gov/cephes/cmath/sin.c,</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// available from http://www.netlib.org/cephes/cmath.tgz.</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// The go code is a simplified version of the original C.</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">//</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">//      sin.c</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">//</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">//      Circular sine</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">//</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// SYNOPSIS:</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">//</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// double x, y, sin();</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// y = sin( x );</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// DESCRIPTION:</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">//</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// Range reduction is into intervals of pi/4.  The reduction error is nearly</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// eliminated by contriving an extended precision modular arithmetic.</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">//</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// Two polynomial approximating functions are employed.</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// Between 0 and pi/4 the sine is approximated by</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">//      x  +  x**3 P(x**2).</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// Between pi/4 and pi/2 the cosine is represented as</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">//      1  -  x**2 Q(x**2).</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// ACCURACY:</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">//</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//                      Relative error:</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// arithmetic   domain      # trials      peak         rms</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">//    DEC       0, 10       150000       3.0e-17     7.8e-18</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">//    IEEE -1.07e9,+1.07e9  130000       2.1e-16     5.4e-17</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">//</span>
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">// Partial loss of accuracy begins to occur at x = 2**30 = 1.074e9.  The loss</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">// is not gradual, but jumps suddenly to about 1 part in 10e7.  Results may</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">// be meaningless for x &gt; 2**49 = 5.6e14.</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">//</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">//      cos.c</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">//</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">//      Circular cosine</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">//</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// SYNOPSIS:</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">//</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">// double x, y, cos();</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">// y = cos( x );</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">//</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// DESCRIPTION:</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">//</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// Range reduction is into intervals of pi/4.  The reduction error is nearly</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// eliminated by contriving an extended precision modular arithmetic.</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">//</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">// Two polynomial approximating functions are employed.</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">// Between 0 and pi/4 the cosine is approximated by</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">//      1  -  x**2 Q(x**2).</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// Between pi/4 and pi/2 the sine is represented as</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">//      x  +  x**3 P(x**2).</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">//</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// ACCURACY:</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">//</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">//                      Relative error:</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// arithmetic   domain      # trials      peak         rms</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">//    IEEE -1.07e9,+1.07e9  130000       2.1e-16     5.4e-17</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">//    DEC        0,+1.07e9   17000       3.0e-17     7.2e-18</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">//</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">// Cephes Math Library Release 2.8:  June, 2000</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">// Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">//</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// The readme file at http://netlib.sandia.gov/cephes/ says:</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">//    Some software in this archive may be from the book _Methods and</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// Programs for Mathematical Functions_ (Prentice-Hall or Simon &amp; Schuster</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// International, 1989) or from the Cephes Mathematical Library, a</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// commercial product. In either event, it is copyrighted by the author.</span>
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">// What you see here may be used freely but it comes with no support or</span>
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">// guarantee.</span>
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">//</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">//   The two known misprints in the book are repaired here in the</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// source listings for the gamma function and the incomplete beta</span>
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">// integral.</span>
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">//</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">//   Stephen L. Moshier</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">//   moshier@na-net.ornl.gov</span>
<a id="L91"></a><span class="ln">    91</span>	
<a id="L92"></a><span class="ln">    92</span>	<span class="comment">// sin coefficients</span>
<a id="L93"></a><span class="ln">    93</span>	var _sin = [...]float64{
<a id="L94"></a><span class="ln">    94</span>		1.58962301576546568060E-10, <span class="comment">// 0x3de5d8fd1fd19ccd</span>
<a id="L95"></a><span class="ln">    95</span>		-2.50507477628578072866E-8, <span class="comment">// 0xbe5ae5e5a9291f5d</span>
<a id="L96"></a><span class="ln">    96</span>		2.75573136213857245213E-6,  <span class="comment">// 0x3ec71de3567d48a1</span>
<a id="L97"></a><span class="ln">    97</span>		-1.98412698295895385996E-4, <span class="comment">// 0xbf2a01a019bfdf03</span>
<a id="L98"></a><span class="ln">    98</span>		8.33333333332211858878E-3,  <span class="comment">// 0x3f8111111110f7d0</span>
<a id="L99"></a><span class="ln">    99</span>		-1.66666666666666307295E-1, <span class="comment">// 0xbfc5555555555548</span>
<a id="L100"></a><span class="ln">   100</span>	}
<a id="L101"></a><span class="ln">   101</span>	
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">// cos coefficients</span>
<a id="L103"></a><span class="ln">   103</span>	var _cos = [...]float64{
<a id="L104"></a><span class="ln">   104</span>		-1.13585365213876817300E-11, <span class="comment">// 0xbda8fa49a0861a9b</span>
<a id="L105"></a><span class="ln">   105</span>		2.08757008419747316778E-9,   <span class="comment">// 0x3e21ee9d7b4e3f05</span>
<a id="L106"></a><span class="ln">   106</span>		-2.75573141792967388112E-7,  <span class="comment">// 0xbe927e4f7eac4bc6</span>
<a id="L107"></a><span class="ln">   107</span>		2.48015872888517045348E-5,   <span class="comment">// 0x3efa01a019c844f5</span>
<a id="L108"></a><span class="ln">   108</span>		-1.38888888888730564116E-3,  <span class="comment">// 0xbf56c16c16c14f91</span>
<a id="L109"></a><span class="ln">   109</span>		4.16666666666665929218E-2,   <span class="comment">// 0x3fa555555555554b</span>
<a id="L110"></a><span class="ln">   110</span>	}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>	<span class="comment">// Cos returns the cosine of x.</span>
<a id="L113"></a><span class="ln">   113</span>	<span class="comment">//</span>
<a id="L114"></a><span class="ln">   114</span>	<span class="comment">// Special cases are:</span>
<a id="L115"></a><span class="ln">   115</span>	<span class="comment">//	Cos(±Inf) = NaN</span>
<a id="L116"></a><span class="ln">   116</span>	<span class="comment">//	Cos(NaN) = NaN</span>
<a id="L117"></a><span class="ln">   117</span>	func Cos(x float64) float64
<a id="L118"></a><span class="ln">   118</span>	
<a id="L119"></a><span class="ln">   119</span>	func cos(x float64) float64 {
<a id="L120"></a><span class="ln">   120</span>		const (
<a id="L121"></a><span class="ln">   121</span>			PI4A = 7.85398125648498535156E-1                             <span class="comment">// 0x3fe921fb40000000, Pi/4 split into three parts</span>
<a id="L122"></a><span class="ln">   122</span>			PI4B = 3.77489470793079817668E-8                             <span class="comment">// 0x3e64442d00000000,</span>
<a id="L123"></a><span class="ln">   123</span>			PI4C = 2.69515142907905952645E-15                            <span class="comment">// 0x3ce8469898cc5170,</span>
<a id="L124"></a><span class="ln">   124</span>			M4PI = 1.273239544735162542821171882678754627704620361328125 <span class="comment">// 4/pi</span>
<a id="L125"></a><span class="ln">   125</span>		)
<a id="L126"></a><span class="ln">   126</span>		<span class="comment">// special cases</span>
<a id="L127"></a><span class="ln">   127</span>		switch {
<a id="L128"></a><span class="ln">   128</span>		case IsNaN(x) || IsInf(x, 0):
<a id="L129"></a><span class="ln">   129</span>			return NaN()
<a id="L130"></a><span class="ln">   130</span>		}
<a id="L131"></a><span class="ln">   131</span>	
<a id="L132"></a><span class="ln">   132</span>		<span class="comment">// make argument positive</span>
<a id="L133"></a><span class="ln">   133</span>		sign := false
<a id="L134"></a><span class="ln">   134</span>		if x &lt; 0 {
<a id="L135"></a><span class="ln">   135</span>			x = -x
<a id="L136"></a><span class="ln">   136</span>		}
<a id="L137"></a><span class="ln">   137</span>	
<a id="L138"></a><span class="ln">   138</span>		j := int64(x * M4PI) <span class="comment">// integer part of x/(Pi/4), as integer for tests on the phase angle</span>
<a id="L139"></a><span class="ln">   139</span>		y := float64(j)      <span class="comment">// integer part of x/(Pi/4), as float</span>
<a id="L140"></a><span class="ln">   140</span>	
<a id="L141"></a><span class="ln">   141</span>		<span class="comment">// map zeros to origin</span>
<a id="L142"></a><span class="ln">   142</span>		if j&amp;1 == 1 {
<a id="L143"></a><span class="ln">   143</span>			j += 1
<a id="L144"></a><span class="ln">   144</span>			y += 1
<a id="L145"></a><span class="ln">   145</span>		}
<a id="L146"></a><span class="ln">   146</span>		j &amp;= 7 <span class="comment">// octant modulo 2Pi radians (360 degrees)</span>
<a id="L147"></a><span class="ln">   147</span>		if j &gt; 3 {
<a id="L148"></a><span class="ln">   148</span>			j -= 4
<a id="L149"></a><span class="ln">   149</span>			sign = !sign
<a id="L150"></a><span class="ln">   150</span>		}
<a id="L151"></a><span class="ln">   151</span>		if j &gt; 1 {
<a id="L152"></a><span class="ln">   152</span>			sign = !sign
<a id="L153"></a><span class="ln">   153</span>		}
<a id="L154"></a><span class="ln">   154</span>	
<a id="L155"></a><span class="ln">   155</span>		z := ((x - y*PI4A) - y*PI4B) - y*PI4C <span class="comment">// Extended precision modular arithmetic</span>
<a id="L156"></a><span class="ln">   156</span>		zz := z * z
<a id="L157"></a><span class="ln">   157</span>		if j == 1 || j == 2 {
<a id="L158"></a><span class="ln">   158</span>			y = z + z*zz*((((((_sin[0]*zz)+_sin[1])*zz+_sin[2])*zz+_sin[3])*zz+_sin[4])*zz+_sin[5])
<a id="L159"></a><span class="ln">   159</span>		} else {
<a id="L160"></a><span class="ln">   160</span>			y = 1.0 - 0.5*zz + zz*zz*((((((_cos[0]*zz)+_cos[1])*zz+_cos[2])*zz+_cos[3])*zz+_cos[4])*zz+_cos[5])
<a id="L161"></a><span class="ln">   161</span>		}
<a id="L162"></a><span class="ln">   162</span>		if sign {
<a id="L163"></a><span class="ln">   163</span>			y = -y
<a id="L164"></a><span class="ln">   164</span>		}
<a id="L165"></a><span class="ln">   165</span>		return y
<a id="L166"></a><span class="ln">   166</span>	}
<a id="L167"></a><span class="ln">   167</span>	
<a id="L168"></a><span class="ln">   168</span>	<span class="comment">// Sin returns the sine of x.</span>
<a id="L169"></a><span class="ln">   169</span>	<span class="comment">//</span>
<a id="L170"></a><span class="ln">   170</span>	<span class="comment">// Special cases are:</span>
<a id="L171"></a><span class="ln">   171</span>	<span class="comment">//	Sin(±0) = ±0</span>
<a id="L172"></a><span class="ln">   172</span>	<span class="comment">//	Sin(±Inf) = NaN</span>
<a id="L173"></a><span class="ln">   173</span>	<span class="comment">//	Sin(NaN) = NaN</span>
<a id="L174"></a><span class="ln">   174</span>	func Sin(x float64) float64
<a id="L175"></a><span class="ln">   175</span>	
<a id="L176"></a><span class="ln">   176</span>	func sin(x float64) float64 {
<a id="L177"></a><span class="ln">   177</span>		const (
<a id="L178"></a><span class="ln">   178</span>			PI4A = 7.85398125648498535156E-1                             <span class="comment">// 0x3fe921fb40000000, Pi/4 split into three parts</span>
<a id="L179"></a><span class="ln">   179</span>			PI4B = 3.77489470793079817668E-8                             <span class="comment">// 0x3e64442d00000000,</span>
<a id="L180"></a><span class="ln">   180</span>			PI4C = 2.69515142907905952645E-15                            <span class="comment">// 0x3ce8469898cc5170,</span>
<a id="L181"></a><span class="ln">   181</span>			M4PI = 1.273239544735162542821171882678754627704620361328125 <span class="comment">// 4/pi</span>
<a id="L182"></a><span class="ln">   182</span>		)
<a id="L183"></a><span class="ln">   183</span>		<span class="comment">// special cases</span>
<a id="L184"></a><span class="ln">   184</span>		switch {
<a id="L185"></a><span class="ln">   185</span>		case x == 0 || IsNaN(x):
<a id="L186"></a><span class="ln">   186</span>			return x <span class="comment">// return ±0 || NaN()</span>
<a id="L187"></a><span class="ln">   187</span>		case IsInf(x, 0):
<a id="L188"></a><span class="ln">   188</span>			return NaN()
<a id="L189"></a><span class="ln">   189</span>		}
<a id="L190"></a><span class="ln">   190</span>	
<a id="L191"></a><span class="ln">   191</span>		<span class="comment">// make argument positive but save the sign</span>
<a id="L192"></a><span class="ln">   192</span>		sign := false
<a id="L193"></a><span class="ln">   193</span>		if x &lt; 0 {
<a id="L194"></a><span class="ln">   194</span>			x = -x
<a id="L195"></a><span class="ln">   195</span>			sign = true
<a id="L196"></a><span class="ln">   196</span>		}
<a id="L197"></a><span class="ln">   197</span>	
<a id="L198"></a><span class="ln">   198</span>		j := int64(x * M4PI) <span class="comment">// integer part of x/(Pi/4), as integer for tests on the phase angle</span>
<a id="L199"></a><span class="ln">   199</span>		y := float64(j)      <span class="comment">// integer part of x/(Pi/4), as float</span>
<a id="L200"></a><span class="ln">   200</span>	
<a id="L201"></a><span class="ln">   201</span>		<span class="comment">// map zeros to origin</span>
<a id="L202"></a><span class="ln">   202</span>		if j&amp;1 == 1 {
<a id="L203"></a><span class="ln">   203</span>			j += 1
<a id="L204"></a><span class="ln">   204</span>			y += 1
<a id="L205"></a><span class="ln">   205</span>		}
<a id="L206"></a><span class="ln">   206</span>		j &amp;= 7 <span class="comment">// octant modulo 2Pi radians (360 degrees)</span>
<a id="L207"></a><span class="ln">   207</span>		<span class="comment">// reflect in x axis</span>
<a id="L208"></a><span class="ln">   208</span>		if j &gt; 3 {
<a id="L209"></a><span class="ln">   209</span>			sign = !sign
<a id="L210"></a><span class="ln">   210</span>			j -= 4
<a id="L211"></a><span class="ln">   211</span>		}
<a id="L212"></a><span class="ln">   212</span>	
<a id="L213"></a><span class="ln">   213</span>		z := ((x - y*PI4A) - y*PI4B) - y*PI4C <span class="comment">// Extended precision modular arithmetic</span>
<a id="L214"></a><span class="ln">   214</span>		zz := z * z
<a id="L215"></a><span class="ln">   215</span>		if j == 1 || j == 2 {
<a id="L216"></a><span class="ln">   216</span>			y = 1.0 - 0.5*zz + zz*zz*((((((_cos[0]*zz)+_cos[1])*zz+_cos[2])*zz+_cos[3])*zz+_cos[4])*zz+_cos[5])
<a id="L217"></a><span class="ln">   217</span>		} else {
<a id="L218"></a><span class="ln">   218</span>			y = z + z*zz*((((((_sin[0]*zz)+_sin[1])*zz+_sin[2])*zz+_sin[3])*zz+_sin[4])*zz+_sin[5])
<a id="L219"></a><span class="ln">   219</span>		}
<a id="L220"></a><span class="ln">   220</span>		if sign {
<a id="L221"></a><span class="ln">   221</span>			y = -y
<a id="L222"></a><span class="ln">   222</span>		}
<a id="L223"></a><span class="ln">   223</span>		return y
<a id="L224"></a><span class="ln">   224</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

