<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/math/pow.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/math/pow.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package math
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	func isOddInt(x float64) bool {
<a id="L8"></a><span class="ln">     8</span>		xi, xf := Modf(x)
<a id="L9"></a><span class="ln">     9</span>		return xf == 0 &amp;&amp; int64(xi)&amp;1 == 1
<a id="L10"></a><span class="ln">    10</span>	}
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// Special cases taken from FreeBSD&#39;s /usr/src/lib/msun/src/e_pow.c</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// updated by IEEE Std. 754-2008 &#34;Section 9.2.1 Special values&#34;.</span>
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// Pow returns x**y, the base-x exponential of y.</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">//</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// Special cases are (in order):</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">//	Pow(x, ±0) = 1 for any x</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">//	Pow(1, y) = 1 for any y</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">//	Pow(x, 1) = x for any x</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">//	Pow(NaN, y) = NaN</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">//	Pow(x, NaN) = NaN</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">//	Pow(±0, y) = ±Inf for y an odd integer &lt; 0</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//	Pow(±0, -Inf) = +Inf</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">//	Pow(±0, +Inf) = +0</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">//	Pow(±0, y) = +Inf for finite y &lt; 0 and not an odd integer</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">//	Pow(±0, y) = ±0 for y an odd integer &gt; 0</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">//	Pow(±0, y) = +0 for finite y &gt; 0 and not an odd integer</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">//	Pow(-1, ±Inf) = 1</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">//	Pow(x, +Inf) = +Inf for |x| &gt; 1</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">//	Pow(x, -Inf) = +0 for |x| &gt; 1</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">//	Pow(x, +Inf) = +0 for |x| &lt; 1</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">//	Pow(x, -Inf) = +Inf for |x| &lt; 1</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">//	Pow(+Inf, y) = +Inf for y &gt; 0</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//	Pow(+Inf, y) = +0 for y &lt; 0</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//	Pow(-Inf, y) = Pow(-0, -y)</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">//	Pow(x, y) = NaN for finite x &lt; 0 and finite non-integer y</span>
<a id="L38"></a><span class="ln">    38</span>	func Pow(x, y float64) float64 {
<a id="L39"></a><span class="ln">    39</span>		switch {
<a id="L40"></a><span class="ln">    40</span>		case y == 0 || x == 1:
<a id="L41"></a><span class="ln">    41</span>			return 1
<a id="L42"></a><span class="ln">    42</span>		case y == 1:
<a id="L43"></a><span class="ln">    43</span>			return x
<a id="L44"></a><span class="ln">    44</span>		case y == 0.5:
<a id="L45"></a><span class="ln">    45</span>			return Sqrt(x)
<a id="L46"></a><span class="ln">    46</span>		case y == -0.5:
<a id="L47"></a><span class="ln">    47</span>			return 1 / Sqrt(x)
<a id="L48"></a><span class="ln">    48</span>		case IsNaN(x) || IsNaN(y):
<a id="L49"></a><span class="ln">    49</span>			return NaN()
<a id="L50"></a><span class="ln">    50</span>		case x == 0:
<a id="L51"></a><span class="ln">    51</span>			switch {
<a id="L52"></a><span class="ln">    52</span>			case y &lt; 0:
<a id="L53"></a><span class="ln">    53</span>				if isOddInt(y) {
<a id="L54"></a><span class="ln">    54</span>					return Copysign(Inf(1), x)
<a id="L55"></a><span class="ln">    55</span>				}
<a id="L56"></a><span class="ln">    56</span>				return Inf(1)
<a id="L57"></a><span class="ln">    57</span>			case y &gt; 0:
<a id="L58"></a><span class="ln">    58</span>				if isOddInt(y) {
<a id="L59"></a><span class="ln">    59</span>					return x
<a id="L60"></a><span class="ln">    60</span>				}
<a id="L61"></a><span class="ln">    61</span>				return 0
<a id="L62"></a><span class="ln">    62</span>			}
<a id="L63"></a><span class="ln">    63</span>		case IsInf(y, 0):
<a id="L64"></a><span class="ln">    64</span>			switch {
<a id="L65"></a><span class="ln">    65</span>			case x == -1:
<a id="L66"></a><span class="ln">    66</span>				return 1
<a id="L67"></a><span class="ln">    67</span>			case (Abs(x) &lt; 1) == IsInf(y, 1):
<a id="L68"></a><span class="ln">    68</span>				return 0
<a id="L69"></a><span class="ln">    69</span>			default:
<a id="L70"></a><span class="ln">    70</span>				return Inf(1)
<a id="L71"></a><span class="ln">    71</span>			}
<a id="L72"></a><span class="ln">    72</span>		case IsInf(x, 0):
<a id="L73"></a><span class="ln">    73</span>			if IsInf(x, -1) {
<a id="L74"></a><span class="ln">    74</span>				return Pow(1/x, -y) <span class="comment">// Pow(-0, -y)</span>
<a id="L75"></a><span class="ln">    75</span>			}
<a id="L76"></a><span class="ln">    76</span>			switch {
<a id="L77"></a><span class="ln">    77</span>			case y &lt; 0:
<a id="L78"></a><span class="ln">    78</span>				return 0
<a id="L79"></a><span class="ln">    79</span>			case y &gt; 0:
<a id="L80"></a><span class="ln">    80</span>				return Inf(1)
<a id="L81"></a><span class="ln">    81</span>			}
<a id="L82"></a><span class="ln">    82</span>		}
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>		absy := y
<a id="L85"></a><span class="ln">    85</span>		flip := false
<a id="L86"></a><span class="ln">    86</span>		if absy &lt; 0 {
<a id="L87"></a><span class="ln">    87</span>			absy = -absy
<a id="L88"></a><span class="ln">    88</span>			flip = true
<a id="L89"></a><span class="ln">    89</span>		}
<a id="L90"></a><span class="ln">    90</span>		yi, yf := Modf(absy)
<a id="L91"></a><span class="ln">    91</span>		if yf != 0 &amp;&amp; x &lt; 0 {
<a id="L92"></a><span class="ln">    92</span>			return NaN()
<a id="L93"></a><span class="ln">    93</span>		}
<a id="L94"></a><span class="ln">    94</span>		if yi &gt;= 1&lt;&lt;63 {
<a id="L95"></a><span class="ln">    95</span>			return Exp(y * Log(x))
<a id="L96"></a><span class="ln">    96</span>		}
<a id="L97"></a><span class="ln">    97</span>	
<a id="L98"></a><span class="ln">    98</span>		<span class="comment">// ans = a1 * 2**ae (= 1 for now).</span>
<a id="L99"></a><span class="ln">    99</span>		a1 := 1.0
<a id="L100"></a><span class="ln">   100</span>		ae := 0
<a id="L101"></a><span class="ln">   101</span>	
<a id="L102"></a><span class="ln">   102</span>		<span class="comment">// ans *= x**yf</span>
<a id="L103"></a><span class="ln">   103</span>		if yf != 0 {
<a id="L104"></a><span class="ln">   104</span>			if yf &gt; 0.5 {
<a id="L105"></a><span class="ln">   105</span>				yf--
<a id="L106"></a><span class="ln">   106</span>				yi++
<a id="L107"></a><span class="ln">   107</span>			}
<a id="L108"></a><span class="ln">   108</span>			a1 = Exp(yf * Log(x))
<a id="L109"></a><span class="ln">   109</span>		}
<a id="L110"></a><span class="ln">   110</span>	
<a id="L111"></a><span class="ln">   111</span>		<span class="comment">// ans *= x**yi</span>
<a id="L112"></a><span class="ln">   112</span>		<span class="comment">// by multiplying in successive squarings</span>
<a id="L113"></a><span class="ln">   113</span>		<span class="comment">// of x according to bits of yi.</span>
<a id="L114"></a><span class="ln">   114</span>		<span class="comment">// accumulate powers of two into exp.</span>
<a id="L115"></a><span class="ln">   115</span>		x1, xe := Frexp(x)
<a id="L116"></a><span class="ln">   116</span>		for i := int64(yi); i != 0; i &gt;&gt;= 1 {
<a id="L117"></a><span class="ln">   117</span>			if i&amp;1 == 1 {
<a id="L118"></a><span class="ln">   118</span>				a1 *= x1
<a id="L119"></a><span class="ln">   119</span>				ae += xe
<a id="L120"></a><span class="ln">   120</span>			}
<a id="L121"></a><span class="ln">   121</span>			x1 *= x1
<a id="L122"></a><span class="ln">   122</span>			xe &lt;&lt;= 1
<a id="L123"></a><span class="ln">   123</span>			if x1 &lt; .5 {
<a id="L124"></a><span class="ln">   124</span>				x1 += x1
<a id="L125"></a><span class="ln">   125</span>				xe--
<a id="L126"></a><span class="ln">   126</span>			}
<a id="L127"></a><span class="ln">   127</span>		}
<a id="L128"></a><span class="ln">   128</span>	
<a id="L129"></a><span class="ln">   129</span>		<span class="comment">// ans = a1*2**ae</span>
<a id="L130"></a><span class="ln">   130</span>		<span class="comment">// if flip { ans = 1 / ans }</span>
<a id="L131"></a><span class="ln">   131</span>		<span class="comment">// but in the opposite order</span>
<a id="L132"></a><span class="ln">   132</span>		if flip {
<a id="L133"></a><span class="ln">   133</span>			a1 = 1 / a1
<a id="L134"></a><span class="ln">   134</span>			ae = -ae
<a id="L135"></a><span class="ln">   135</span>		}
<a id="L136"></a><span class="ln">   136</span>		return Ldexp(a1, ae)
<a id="L137"></a><span class="ln">   137</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

