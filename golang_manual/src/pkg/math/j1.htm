<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/math/j1.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/math/j1.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package math
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">/*
</span><a id="L8"></a><span class="ln">     8</span>	<span class="comment">	Bessel function of the first and second kinds of order one.
</span><a id="L9"></a><span class="ln">     9</span>	<span class="comment">*/</span>
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// The original C code and the long comment below are</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// from FreeBSD&#39;s /usr/src/lib/msun/src/e_j1.c and</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// came with this notice.  The go code is a simplified</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// version of the original C.</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">//</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// ====================================================</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">//</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// Developed at SunPro, a Sun Microsystems, Inc. business.</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// Permission to use, copy, modify, and distribute this</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// software is freely granted, provided that this notice</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// is preserved.</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// ====================================================</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// __ieee754_j1(x), __ieee754_y1(x)</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// Bessel function of the first and second kinds of order one.</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// Method -- j1(x):</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">//      1. For tiny x, we use j1(x) = x/2 - x**3/16 + x**5/384 - ...</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">//      2. Reduce x to |x| since j1(x)=-j1(-x),  and</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">//         for x in (0,2)</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">//              j1(x) = x/2 + x*z*R0/S0,  where z = x*x;</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">//         (precision:  |j1/x - 1/2 - R0/S0 |&lt;2**-61.51 )</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">//         for x in (2,inf)</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">//              j1(x) = sqrt(2/(pi*x))*(p1(x)*cos(x1)-q1(x)*sin(x1))</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//              y1(x) = sqrt(2/(pi*x))*(p1(x)*sin(x1)+q1(x)*cos(x1))</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//         where x1 = x-3*pi/4. It is better to compute sin(x1),cos(x1)</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">//         as follow:</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//              cos(x1) =  cos(x)cos(3pi/4)+sin(x)sin(3pi/4)</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">//                      =  1/sqrt(2) * (sin(x) - cos(x))</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">//              sin(x1) =  sin(x)cos(3pi/4)-cos(x)sin(3pi/4)</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">//                      = -1/sqrt(2) * (sin(x) + cos(x))</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">//         (To avoid cancellation, use</span>
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">//              sin(x) +- cos(x) = -cos(2x)/(sin(x) -+ cos(x))</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">//         to compute the worse one.)</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">//</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">//      3 Special cases</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">//              j1(nan)= nan</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">//              j1(0) = 0</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">//              j1(inf) = 0</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">//</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// Method -- y1(x):</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">//      1. screen out x&lt;=0 cases: y1(0)=-inf, y1(x&lt;0)=NaN</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">//      2. For x&lt;2.</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">//         Since</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">//              y1(x) = 2/pi*(j1(x)*(ln(x/2)+Euler)-1/x-x/2+5/64*x**3-...)</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">//         therefore y1(x)-2/pi*j1(x)*ln(x)-1/x is an odd function.</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">//         We use the following function to approximate y1,</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">//              y1(x) = x*U(z)/V(z) + (2/pi)*(j1(x)*ln(x)-1/x), z= x**2</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">//         where for x in [0,2] (abs err less than 2**-65.89)</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">//              U(z) = U0[0] + U0[1]*z + ... + U0[4]*z**4</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">//              V(z) = 1  + v0[0]*z + ... + v0[4]*z**5</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">//         Note: For tiny x, 1/x dominate y1 and hence</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">//              y1(tiny) = -2/pi/tiny, (choose tiny&lt;2**-54)</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">//      3. For x&gt;=2.</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">//               y1(x) = sqrt(2/(pi*x))*(p1(x)*sin(x1)+q1(x)*cos(x1))</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">//         where x1 = x-3*pi/4. It is better to compute sin(x1),cos(x1)</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">//         by method mentioned above.</span>
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// J1 returns the order-one Bessel function of the first kind.</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">//</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">// Special cases are:</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">//	J1(Â±Inf) = 0</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">//	J1(NaN) = NaN</span>
<a id="L74"></a><span class="ln">    74</span>	func J1(x float64) float64 {
<a id="L75"></a><span class="ln">    75</span>		const (
<a id="L76"></a><span class="ln">    76</span>			TwoM27 = 1.0 / (1 &lt;&lt; 27) <span class="comment">// 2**-27 0x3e40000000000000</span>
<a id="L77"></a><span class="ln">    77</span>			Two129 = 1 &lt;&lt; 129        <span class="comment">// 2**129 0x4800000000000000</span>
<a id="L78"></a><span class="ln">    78</span>			<span class="comment">// R0/S0 on [0, 2]</span>
<a id="L79"></a><span class="ln">    79</span>			R00 = -6.25000000000000000000e-02 <span class="comment">// 0xBFB0000000000000</span>
<a id="L80"></a><span class="ln">    80</span>			R01 = 1.40705666955189706048e-03  <span class="comment">// 0x3F570D9F98472C61</span>
<a id="L81"></a><span class="ln">    81</span>			R02 = -1.59955631084035597520e-05 <span class="comment">// 0xBEF0C5C6BA169668</span>
<a id="L82"></a><span class="ln">    82</span>			R03 = 4.96727999609584448412e-08  <span class="comment">// 0x3E6AAAFA46CA0BD9</span>
<a id="L83"></a><span class="ln">    83</span>			S01 = 1.91537599538363460805e-02  <span class="comment">// 0x3F939D0B12637E53</span>
<a id="L84"></a><span class="ln">    84</span>			S02 = 1.85946785588630915560e-04  <span class="comment">// 0x3F285F56B9CDF664</span>
<a id="L85"></a><span class="ln">    85</span>			S03 = 1.17718464042623683263e-06  <span class="comment">// 0x3EB3BFF8333F8498</span>
<a id="L86"></a><span class="ln">    86</span>			S04 = 5.04636257076217042715e-09  <span class="comment">// 0x3E35AC88C97DFF2C</span>
<a id="L87"></a><span class="ln">    87</span>			S05 = 1.23542274426137913908e-11  <span class="comment">// 0x3DAB2ACFCFB97ED8</span>
<a id="L88"></a><span class="ln">    88</span>		)
<a id="L89"></a><span class="ln">    89</span>		<span class="comment">// special cases</span>
<a id="L90"></a><span class="ln">    90</span>		switch {
<a id="L91"></a><span class="ln">    91</span>		case IsNaN(x):
<a id="L92"></a><span class="ln">    92</span>			return x
<a id="L93"></a><span class="ln">    93</span>		case IsInf(x, 0) || x == 0:
<a id="L94"></a><span class="ln">    94</span>			return 0
<a id="L95"></a><span class="ln">    95</span>		}
<a id="L96"></a><span class="ln">    96</span>	
<a id="L97"></a><span class="ln">    97</span>		sign := false
<a id="L98"></a><span class="ln">    98</span>		if x &lt; 0 {
<a id="L99"></a><span class="ln">    99</span>			x = -x
<a id="L100"></a><span class="ln">   100</span>			sign = true
<a id="L101"></a><span class="ln">   101</span>		}
<a id="L102"></a><span class="ln">   102</span>		if x &gt;= 2 {
<a id="L103"></a><span class="ln">   103</span>			s, c := Sincos(x)
<a id="L104"></a><span class="ln">   104</span>			ss := -s - c
<a id="L105"></a><span class="ln">   105</span>			cc := s - c
<a id="L106"></a><span class="ln">   106</span>	
<a id="L107"></a><span class="ln">   107</span>			<span class="comment">// make sure x+x does not overflow</span>
<a id="L108"></a><span class="ln">   108</span>			if x &lt; MaxFloat64/2 {
<a id="L109"></a><span class="ln">   109</span>				z := Cos(x + x)
<a id="L110"></a><span class="ln">   110</span>				if s*c &gt; 0 {
<a id="L111"></a><span class="ln">   111</span>					cc = z / ss
<a id="L112"></a><span class="ln">   112</span>				} else {
<a id="L113"></a><span class="ln">   113</span>					ss = z / cc
<a id="L114"></a><span class="ln">   114</span>				}
<a id="L115"></a><span class="ln">   115</span>			}
<a id="L116"></a><span class="ln">   116</span>	
<a id="L117"></a><span class="ln">   117</span>			<span class="comment">// j1(x) = 1/sqrt(pi) * (P(1,x)*cc - Q(1,x)*ss) / sqrt(x)</span>
<a id="L118"></a><span class="ln">   118</span>			<span class="comment">// y1(x) = 1/sqrt(pi) * (P(1,x)*ss + Q(1,x)*cc) / sqrt(x)</span>
<a id="L119"></a><span class="ln">   119</span>	
<a id="L120"></a><span class="ln">   120</span>			var z float64
<a id="L121"></a><span class="ln">   121</span>			if x &gt; Two129 {
<a id="L122"></a><span class="ln">   122</span>				z = (1 / SqrtPi) * cc / Sqrt(x)
<a id="L123"></a><span class="ln">   123</span>			} else {
<a id="L124"></a><span class="ln">   124</span>				u := pone(x)
<a id="L125"></a><span class="ln">   125</span>				v := qone(x)
<a id="L126"></a><span class="ln">   126</span>				z = (1 / SqrtPi) * (u*cc - v*ss) / Sqrt(x)
<a id="L127"></a><span class="ln">   127</span>			}
<a id="L128"></a><span class="ln">   128</span>			if sign {
<a id="L129"></a><span class="ln">   129</span>				return -z
<a id="L130"></a><span class="ln">   130</span>			}
<a id="L131"></a><span class="ln">   131</span>			return z
<a id="L132"></a><span class="ln">   132</span>		}
<a id="L133"></a><span class="ln">   133</span>		if x &lt; TwoM27 { <span class="comment">// |x|&lt;2**-27</span>
<a id="L134"></a><span class="ln">   134</span>			return 0.5 * x <span class="comment">// inexact if x!=0 necessary</span>
<a id="L135"></a><span class="ln">   135</span>		}
<a id="L136"></a><span class="ln">   136</span>		z := x * x
<a id="L137"></a><span class="ln">   137</span>		r := z * (R00 + z*(R01+z*(R02+z*R03)))
<a id="L138"></a><span class="ln">   138</span>		s := 1.0 + z*(S01+z*(S02+z*(S03+z*(S04+z*S05))))
<a id="L139"></a><span class="ln">   139</span>		r *= x
<a id="L140"></a><span class="ln">   140</span>		z = 0.5*x + r/s
<a id="L141"></a><span class="ln">   141</span>		if sign {
<a id="L142"></a><span class="ln">   142</span>			return -z
<a id="L143"></a><span class="ln">   143</span>		}
<a id="L144"></a><span class="ln">   144</span>		return z
<a id="L145"></a><span class="ln">   145</span>	}
<a id="L146"></a><span class="ln">   146</span>	
<a id="L147"></a><span class="ln">   147</span>	<span class="comment">// Y1 returns the order-one Bessel function of the second kind.</span>
<a id="L148"></a><span class="ln">   148</span>	<span class="comment">//</span>
<a id="L149"></a><span class="ln">   149</span>	<span class="comment">// Special cases are:</span>
<a id="L150"></a><span class="ln">   150</span>	<span class="comment">//	Y1(+Inf) = 0</span>
<a id="L151"></a><span class="ln">   151</span>	<span class="comment">//	Y1(0) = -Inf</span>
<a id="L152"></a><span class="ln">   152</span>	<span class="comment">//	Y1(x &lt; 0) = NaN</span>
<a id="L153"></a><span class="ln">   153</span>	<span class="comment">//	Y1(NaN) = NaN</span>
<a id="L154"></a><span class="ln">   154</span>	func Y1(x float64) float64 {
<a id="L155"></a><span class="ln">   155</span>		const (
<a id="L156"></a><span class="ln">   156</span>			TwoM54 = 1.0 / (1 &lt;&lt; 54)             <span class="comment">// 2**-54 0x3c90000000000000</span>
<a id="L157"></a><span class="ln">   157</span>			Two129 = 1 &lt;&lt; 129                    <span class="comment">// 2**129 0x4800000000000000</span>
<a id="L158"></a><span class="ln">   158</span>			U00    = -1.96057090646238940668e-01 <span class="comment">// 0xBFC91866143CBC8A</span>
<a id="L159"></a><span class="ln">   159</span>			U01    = 5.04438716639811282616e-02  <span class="comment">// 0x3FA9D3C776292CD1</span>
<a id="L160"></a><span class="ln">   160</span>			U02    = -1.91256895875763547298e-03 <span class="comment">// 0xBF5F55E54844F50F</span>
<a id="L161"></a><span class="ln">   161</span>			U03    = 2.35252600561610495928e-05  <span class="comment">// 0x3EF8AB038FA6B88E</span>
<a id="L162"></a><span class="ln">   162</span>			U04    = -9.19099158039878874504e-08 <span class="comment">// 0xBE78AC00569105B8</span>
<a id="L163"></a><span class="ln">   163</span>			V00    = 1.99167318236649903973e-02  <span class="comment">// 0x3F94650D3F4DA9F0</span>
<a id="L164"></a><span class="ln">   164</span>			V01    = 2.02552581025135171496e-04  <span class="comment">// 0x3F2A8C896C257764</span>
<a id="L165"></a><span class="ln">   165</span>			V02    = 1.35608801097516229404e-06  <span class="comment">// 0x3EB6C05A894E8CA6</span>
<a id="L166"></a><span class="ln">   166</span>			V03    = 6.22741452364621501295e-09  <span class="comment">// 0x3E3ABF1D5BA69A86</span>
<a id="L167"></a><span class="ln">   167</span>			V04    = 1.66559246207992079114e-11  <span class="comment">// 0x3DB25039DACA772A</span>
<a id="L168"></a><span class="ln">   168</span>		)
<a id="L169"></a><span class="ln">   169</span>		<span class="comment">// special cases</span>
<a id="L170"></a><span class="ln">   170</span>		switch {
<a id="L171"></a><span class="ln">   171</span>		case x &lt; 0 || IsNaN(x):
<a id="L172"></a><span class="ln">   172</span>			return NaN()
<a id="L173"></a><span class="ln">   173</span>		case IsInf(x, 1):
<a id="L174"></a><span class="ln">   174</span>			return 0
<a id="L175"></a><span class="ln">   175</span>		case x == 0:
<a id="L176"></a><span class="ln">   176</span>			return Inf(-1)
<a id="L177"></a><span class="ln">   177</span>		}
<a id="L178"></a><span class="ln">   178</span>	
<a id="L179"></a><span class="ln">   179</span>		if x &gt;= 2 {
<a id="L180"></a><span class="ln">   180</span>			s, c := Sincos(x)
<a id="L181"></a><span class="ln">   181</span>			ss := -s - c
<a id="L182"></a><span class="ln">   182</span>			cc := s - c
<a id="L183"></a><span class="ln">   183</span>	
<a id="L184"></a><span class="ln">   184</span>			<span class="comment">// make sure x+x does not overflow</span>
<a id="L185"></a><span class="ln">   185</span>			if x &lt; MaxFloat64/2 {
<a id="L186"></a><span class="ln">   186</span>				z := Cos(x + x)
<a id="L187"></a><span class="ln">   187</span>				if s*c &gt; 0 {
<a id="L188"></a><span class="ln">   188</span>					cc = z / ss
<a id="L189"></a><span class="ln">   189</span>				} else {
<a id="L190"></a><span class="ln">   190</span>					ss = z / cc
<a id="L191"></a><span class="ln">   191</span>				}
<a id="L192"></a><span class="ln">   192</span>			}
<a id="L193"></a><span class="ln">   193</span>			<span class="comment">// y1(x) = sqrt(2/(pi*x))*(p1(x)*sin(x0)+q1(x)*cos(x0))</span>
<a id="L194"></a><span class="ln">   194</span>			<span class="comment">// where x0 = x-3pi/4</span>
<a id="L195"></a><span class="ln">   195</span>			<span class="comment">//     Better formula:</span>
<a id="L196"></a><span class="ln">   196</span>			<span class="comment">//         cos(x0) = cos(x)cos(3pi/4)+sin(x)sin(3pi/4)</span>
<a id="L197"></a><span class="ln">   197</span>			<span class="comment">//                 =  1/sqrt(2) * (sin(x) - cos(x))</span>
<a id="L198"></a><span class="ln">   198</span>			<span class="comment">//         sin(x0) = sin(x)cos(3pi/4)-cos(x)sin(3pi/4)</span>
<a id="L199"></a><span class="ln">   199</span>			<span class="comment">//                 = -1/sqrt(2) * (cos(x) + sin(x))</span>
<a id="L200"></a><span class="ln">   200</span>			<span class="comment">// To avoid cancellation, use</span>
<a id="L201"></a><span class="ln">   201</span>			<span class="comment">//     sin(x) +- cos(x) = -cos(2x)/(sin(x) -+ cos(x))</span>
<a id="L202"></a><span class="ln">   202</span>			<span class="comment">// to compute the worse one.</span>
<a id="L203"></a><span class="ln">   203</span>	
<a id="L204"></a><span class="ln">   204</span>			var z float64
<a id="L205"></a><span class="ln">   205</span>			if x &gt; Two129 {
<a id="L206"></a><span class="ln">   206</span>				z = (1 / SqrtPi) * ss / Sqrt(x)
<a id="L207"></a><span class="ln">   207</span>			} else {
<a id="L208"></a><span class="ln">   208</span>				u := pone(x)
<a id="L209"></a><span class="ln">   209</span>				v := qone(x)
<a id="L210"></a><span class="ln">   210</span>				z = (1 / SqrtPi) * (u*ss + v*cc) / Sqrt(x)
<a id="L211"></a><span class="ln">   211</span>			}
<a id="L212"></a><span class="ln">   212</span>			return z
<a id="L213"></a><span class="ln">   213</span>		}
<a id="L214"></a><span class="ln">   214</span>		if x &lt;= TwoM54 { <span class="comment">// x &lt; 2**-54</span>
<a id="L215"></a><span class="ln">   215</span>			return -(2 / Pi) / x
<a id="L216"></a><span class="ln">   216</span>		}
<a id="L217"></a><span class="ln">   217</span>		z := x * x
<a id="L218"></a><span class="ln">   218</span>		u := U00 + z*(U01+z*(U02+z*(U03+z*U04)))
<a id="L219"></a><span class="ln">   219</span>		v := 1 + z*(V00+z*(V01+z*(V02+z*(V03+z*V04))))
<a id="L220"></a><span class="ln">   220</span>		return x*(u/v) + (2/Pi)*(J1(x)*Log(x)-1/x)
<a id="L221"></a><span class="ln">   221</span>	}
<a id="L222"></a><span class="ln">   222</span>	
<a id="L223"></a><span class="ln">   223</span>	<span class="comment">// For x &gt;= 8, the asymptotic expansions of pone is</span>
<a id="L224"></a><span class="ln">   224</span>	<span class="comment">//      1 + 15/128 s**2 - 4725/2**15 s**4 - ..., where s = 1/x.</span>
<a id="L225"></a><span class="ln">   225</span>	<span class="comment">// We approximate pone by</span>
<a id="L226"></a><span class="ln">   226</span>	<span class="comment">//      pone(x) = 1 + (R/S)</span>
<a id="L227"></a><span class="ln">   227</span>	<span class="comment">// where R = pr0 + pr1*s**2 + pr2*s**4 + ... + pr5*s**10</span>
<a id="L228"></a><span class="ln">   228</span>	<span class="comment">//       S = 1 + ps0*s**2 + ... + ps4*s**10</span>
<a id="L229"></a><span class="ln">   229</span>	<span class="comment">// and</span>
<a id="L230"></a><span class="ln">   230</span>	<span class="comment">//      | pone(x)-1-R/S | &lt;= 2**(-60.06)</span>
<a id="L231"></a><span class="ln">   231</span>	
<a id="L232"></a><span class="ln">   232</span>	<span class="comment">// for x in [inf, 8]=1/[0,0.125]</span>
<a id="L233"></a><span class="ln">   233</span>	var p1R8 = [6]float64{
<a id="L234"></a><span class="ln">   234</span>		0.00000000000000000000e+00, <span class="comment">// 0x0000000000000000</span>
<a id="L235"></a><span class="ln">   235</span>		1.17187499999988647970e-01, <span class="comment">// 0x3FBDFFFFFFFFFCCE</span>
<a id="L236"></a><span class="ln">   236</span>		1.32394806593073575129e+01, <span class="comment">// 0x402A7A9D357F7FCE</span>
<a id="L237"></a><span class="ln">   237</span>		4.12051854307378562225e+02, <span class="comment">// 0x4079C0D4652EA590</span>
<a id="L238"></a><span class="ln">   238</span>		3.87474538913960532227e+03, <span class="comment">// 0x40AE457DA3A532CC</span>
<a id="L239"></a><span class="ln">   239</span>		7.91447954031891731574e+03, <span class="comment">// 0x40BEEA7AC32782DD</span>
<a id="L240"></a><span class="ln">   240</span>	}
<a id="L241"></a><span class="ln">   241</span>	var p1S8 = [5]float64{
<a id="L242"></a><span class="ln">   242</span>		1.14207370375678408436e+02, <span class="comment">// 0x405C8D458E656CAC</span>
<a id="L243"></a><span class="ln">   243</span>		3.65093083420853463394e+03, <span class="comment">// 0x40AC85DC964D274F</span>
<a id="L244"></a><span class="ln">   244</span>		3.69562060269033463555e+04, <span class="comment">// 0x40E20B8697C5BB7F</span>
<a id="L245"></a><span class="ln">   245</span>		9.76027935934950801311e+04, <span class="comment">// 0x40F7D42CB28F17BB</span>
<a id="L246"></a><span class="ln">   246</span>		3.08042720627888811578e+04, <span class="comment">// 0x40DE1511697A0B2D</span>
<a id="L247"></a><span class="ln">   247</span>	}
<a id="L248"></a><span class="ln">   248</span>	
<a id="L249"></a><span class="ln">   249</span>	<span class="comment">// for x in [8,4.5454] = 1/[0.125,0.22001]</span>
<a id="L250"></a><span class="ln">   250</span>	var p1R5 = [6]float64{
<a id="L251"></a><span class="ln">   251</span>		1.31990519556243522749e-11, <span class="comment">// 0x3DAD0667DAE1CA7D</span>
<a id="L252"></a><span class="ln">   252</span>		1.17187493190614097638e-01, <span class="comment">// 0x3FBDFFFFE2C10043</span>
<a id="L253"></a><span class="ln">   253</span>		6.80275127868432871736e+00, <span class="comment">// 0x401B36046E6315E3</span>
<a id="L254"></a><span class="ln">   254</span>		1.08308182990189109773e+02, <span class="comment">// 0x405B13B9452602ED</span>
<a id="L255"></a><span class="ln">   255</span>		5.17636139533199752805e+02, <span class="comment">// 0x40802D16D052D649</span>
<a id="L256"></a><span class="ln">   256</span>		5.28715201363337541807e+02, <span class="comment">// 0x408085B8BB7E0CB7</span>
<a id="L257"></a><span class="ln">   257</span>	}
<a id="L258"></a><span class="ln">   258</span>	var p1S5 = [5]float64{
<a id="L259"></a><span class="ln">   259</span>		5.92805987221131331921e+01, <span class="comment">// 0x404DA3EAA8AF633D</span>
<a id="L260"></a><span class="ln">   260</span>		9.91401418733614377743e+02, <span class="comment">// 0x408EFB361B066701</span>
<a id="L261"></a><span class="ln">   261</span>		5.35326695291487976647e+03, <span class="comment">// 0x40B4E9445706B6FB</span>
<a id="L262"></a><span class="ln">   262</span>		7.84469031749551231769e+03, <span class="comment">// 0x40BEA4B0B8A5BB15</span>
<a id="L263"></a><span class="ln">   263</span>		1.50404688810361062679e+03, <span class="comment">// 0x40978030036F5E51</span>
<a id="L264"></a><span class="ln">   264</span>	}
<a id="L265"></a><span class="ln">   265</span>	
<a id="L266"></a><span class="ln">   266</span>	<span class="comment">// for x in[4.5453,2.8571] = 1/[0.2199,0.35001]</span>
<a id="L267"></a><span class="ln">   267</span>	var p1R3 = [6]float64{
<a id="L268"></a><span class="ln">   268</span>		3.02503916137373618024e-09, <span class="comment">// 0x3E29FC21A7AD9EDD</span>
<a id="L269"></a><span class="ln">   269</span>		1.17186865567253592491e-01, <span class="comment">// 0x3FBDFFF55B21D17B</span>
<a id="L270"></a><span class="ln">   270</span>		3.93297750033315640650e+00, <span class="comment">// 0x400F76BCE85EAD8A</span>
<a id="L271"></a><span class="ln">   271</span>		3.51194035591636932736e+01, <span class="comment">// 0x40418F489DA6D129</span>
<a id="L272"></a><span class="ln">   272</span>		9.10550110750781271918e+01, <span class="comment">// 0x4056C3854D2C1837</span>
<a id="L273"></a><span class="ln">   273</span>		4.85590685197364919645e+01, <span class="comment">// 0x4048478F8EA83EE5</span>
<a id="L274"></a><span class="ln">   274</span>	}
<a id="L275"></a><span class="ln">   275</span>	var p1S3 = [5]float64{
<a id="L276"></a><span class="ln">   276</span>		3.47913095001251519989e+01, <span class="comment">// 0x40416549A134069C</span>
<a id="L277"></a><span class="ln">   277</span>		3.36762458747825746741e+02, <span class="comment">// 0x40750C3307F1A75F</span>
<a id="L278"></a><span class="ln">   278</span>		1.04687139975775130551e+03, <span class="comment">// 0x40905B7C5037D523</span>
<a id="L279"></a><span class="ln">   279</span>		8.90811346398256432622e+02, <span class="comment">// 0x408BD67DA32E31E9</span>
<a id="L280"></a><span class="ln">   280</span>		1.03787932439639277504e+02, <span class="comment">// 0x4059F26D7C2EED53</span>
<a id="L281"></a><span class="ln">   281</span>	}
<a id="L282"></a><span class="ln">   282</span>	
<a id="L283"></a><span class="ln">   283</span>	<span class="comment">// for x in [2.8570,2] = 1/[0.3499,0.5]</span>
<a id="L284"></a><span class="ln">   284</span>	var p1R2 = [6]float64{
<a id="L285"></a><span class="ln">   285</span>		1.07710830106873743082e-07, <span class="comment">// 0x3E7CE9D4F65544F4</span>
<a id="L286"></a><span class="ln">   286</span>		1.17176219462683348094e-01, <span class="comment">// 0x3FBDFF42BE760D83</span>
<a id="L287"></a><span class="ln">   287</span>		2.36851496667608785174e+00, <span class="comment">// 0x4002F2B7F98FAEC0</span>
<a id="L288"></a><span class="ln">   288</span>		1.22426109148261232917e+01, <span class="comment">// 0x40287C377F71A964</span>
<a id="L289"></a><span class="ln">   289</span>		1.76939711271687727390e+01, <span class="comment">// 0x4031B1A8177F8EE2</span>
<a id="L290"></a><span class="ln">   290</span>		5.07352312588818499250e+00, <span class="comment">// 0x40144B49A574C1FE</span>
<a id="L291"></a><span class="ln">   291</span>	}
<a id="L292"></a><span class="ln">   292</span>	var p1S2 = [5]float64{
<a id="L293"></a><span class="ln">   293</span>		2.14364859363821409488e+01, <span class="comment">// 0x40356FBD8AD5ECDC</span>
<a id="L294"></a><span class="ln">   294</span>		1.25290227168402751090e+02, <span class="comment">// 0x405F529314F92CD5</span>
<a id="L295"></a><span class="ln">   295</span>		2.32276469057162813669e+02, <span class="comment">// 0x406D08D8D5A2DBD9</span>
<a id="L296"></a><span class="ln">   296</span>		1.17679373287147100768e+02, <span class="comment">// 0x405D6B7ADA1884A9</span>
<a id="L297"></a><span class="ln">   297</span>		8.36463893371618283368e+00, <span class="comment">// 0x4020BAB1F44E5192</span>
<a id="L298"></a><span class="ln">   298</span>	}
<a id="L299"></a><span class="ln">   299</span>	
<a id="L300"></a><span class="ln">   300</span>	func pone(x float64) float64 {
<a id="L301"></a><span class="ln">   301</span>		var p [6]float64
<a id="L302"></a><span class="ln">   302</span>		var q [5]float64
<a id="L303"></a><span class="ln">   303</span>		if x &gt;= 8 {
<a id="L304"></a><span class="ln">   304</span>			p = p1R8
<a id="L305"></a><span class="ln">   305</span>			q = p1S8
<a id="L306"></a><span class="ln">   306</span>		} else if x &gt;= 4.5454 {
<a id="L307"></a><span class="ln">   307</span>			p = p1R5
<a id="L308"></a><span class="ln">   308</span>			q = p1S5
<a id="L309"></a><span class="ln">   309</span>		} else if x &gt;= 2.8571 {
<a id="L310"></a><span class="ln">   310</span>			p = p1R3
<a id="L311"></a><span class="ln">   311</span>			q = p1S3
<a id="L312"></a><span class="ln">   312</span>		} else if x &gt;= 2 {
<a id="L313"></a><span class="ln">   313</span>			p = p1R2
<a id="L314"></a><span class="ln">   314</span>			q = p1S2
<a id="L315"></a><span class="ln">   315</span>		}
<a id="L316"></a><span class="ln">   316</span>		z := 1 / (x * x)
<a id="L317"></a><span class="ln">   317</span>		r := p[0] + z*(p[1]+z*(p[2]+z*(p[3]+z*(p[4]+z*p[5]))))
<a id="L318"></a><span class="ln">   318</span>		s := 1.0 + z*(q[0]+z*(q[1]+z*(q[2]+z*(q[3]+z*q[4]))))
<a id="L319"></a><span class="ln">   319</span>		return 1 + r/s
<a id="L320"></a><span class="ln">   320</span>	}
<a id="L321"></a><span class="ln">   321</span>	
<a id="L322"></a><span class="ln">   322</span>	<span class="comment">// For x &gt;= 8, the asymptotic expansions of qone is</span>
<a id="L323"></a><span class="ln">   323</span>	<span class="comment">//      3/8 s - 105/1024 s**3 - ..., where s = 1/x.</span>
<a id="L324"></a><span class="ln">   324</span>	<span class="comment">// We approximate qone by</span>
<a id="L325"></a><span class="ln">   325</span>	<span class="comment">//      qone(x) = s*(0.375 + (R/S))</span>
<a id="L326"></a><span class="ln">   326</span>	<span class="comment">// where R = qr1*s**2 + qr2*s**4 + ... + qr5*s**10</span>
<a id="L327"></a><span class="ln">   327</span>	<span class="comment">//       S = 1 + qs1*s**2 + ... + qs6*s**12</span>
<a id="L328"></a><span class="ln">   328</span>	<span class="comment">// and</span>
<a id="L329"></a><span class="ln">   329</span>	<span class="comment">//      | qone(x)/s -0.375-R/S | &lt;= 2**(-61.13)</span>
<a id="L330"></a><span class="ln">   330</span>	
<a id="L331"></a><span class="ln">   331</span>	<span class="comment">// for x in [inf, 8] = 1/[0,0.125]</span>
<a id="L332"></a><span class="ln">   332</span>	var q1R8 = [6]float64{
<a id="L333"></a><span class="ln">   333</span>		0.00000000000000000000e+00,  <span class="comment">// 0x0000000000000000</span>
<a id="L334"></a><span class="ln">   334</span>		-1.02539062499992714161e-01, <span class="comment">// 0xBFBA3FFFFFFFFDF3</span>
<a id="L335"></a><span class="ln">   335</span>		-1.62717534544589987888e+01, <span class="comment">// 0xC0304591A26779F7</span>
<a id="L336"></a><span class="ln">   336</span>		-7.59601722513950107896e+02, <span class="comment">// 0xC087BCD053E4B576</span>
<a id="L337"></a><span class="ln">   337</span>		-1.18498066702429587167e+04, <span class="comment">// 0xC0C724E740F87415</span>
<a id="L338"></a><span class="ln">   338</span>		-4.84385124285750353010e+04, <span class="comment">// 0xC0E7A6D065D09C6A</span>
<a id="L339"></a><span class="ln">   339</span>	}
<a id="L340"></a><span class="ln">   340</span>	var q1S8 = [6]float64{
<a id="L341"></a><span class="ln">   341</span>		1.61395369700722909556e+02,  <span class="comment">// 0x40642CA6DE5BCDE5</span>
<a id="L342"></a><span class="ln">   342</span>		7.82538599923348465381e+03,  <span class="comment">// 0x40BE9162D0D88419</span>
<a id="L343"></a><span class="ln">   343</span>		1.33875336287249578163e+05,  <span class="comment">// 0x4100579AB0B75E98</span>
<a id="L344"></a><span class="ln">   344</span>		7.19657723683240939863e+05,  <span class="comment">// 0x4125F65372869C19</span>
<a id="L345"></a><span class="ln">   345</span>		6.66601232617776375264e+05,  <span class="comment">// 0x412457D27719AD5C</span>
<a id="L346"></a><span class="ln">   346</span>		-2.94490264303834643215e+05, <span class="comment">// 0xC111F9690EA5AA18</span>
<a id="L347"></a><span class="ln">   347</span>	}
<a id="L348"></a><span class="ln">   348</span>	
<a id="L349"></a><span class="ln">   349</span>	<span class="comment">// for x in [8,4.5454] = 1/[0.125,0.22001]</span>
<a id="L350"></a><span class="ln">   350</span>	var q1R5 = [6]float64{
<a id="L351"></a><span class="ln">   351</span>		-2.08979931141764104297e-11, <span class="comment">// 0xBDB6FA431AA1A098</span>
<a id="L352"></a><span class="ln">   352</span>		-1.02539050241375426231e-01, <span class="comment">// 0xBFBA3FFFCB597FEF</span>
<a id="L353"></a><span class="ln">   353</span>		-8.05644828123936029840e+00, <span class="comment">// 0xC0201CE6CA03AD4B</span>
<a id="L354"></a><span class="ln">   354</span>		-1.83669607474888380239e+02, <span class="comment">// 0xC066F56D6CA7B9B0</span>
<a id="L355"></a><span class="ln">   355</span>		-1.37319376065508163265e+03, <span class="comment">// 0xC09574C66931734F</span>
<a id="L356"></a><span class="ln">   356</span>		-2.61244440453215656817e+03, <span class="comment">// 0xC0A468E388FDA79D</span>
<a id="L357"></a><span class="ln">   357</span>	}
<a id="L358"></a><span class="ln">   358</span>	var q1S5 = [6]float64{
<a id="L359"></a><span class="ln">   359</span>		8.12765501384335777857e+01,  <span class="comment">// 0x405451B2FF5A11B2</span>
<a id="L360"></a><span class="ln">   360</span>		1.99179873460485964642e+03,  <span class="comment">// 0x409F1F31E77BF839</span>
<a id="L361"></a><span class="ln">   361</span>		1.74684851924908907677e+04,  <span class="comment">// 0x40D10F1F0D64CE29</span>
<a id="L362"></a><span class="ln">   362</span>		4.98514270910352279316e+04,  <span class="comment">// 0x40E8576DAABAD197</span>
<a id="L363"></a><span class="ln">   363</span>		2.79480751638918118260e+04,  <span class="comment">// 0x40DB4B04CF7C364B</span>
<a id="L364"></a><span class="ln">   364</span>		-4.71918354795128470869e+03, <span class="comment">// 0xC0B26F2EFCFFA004</span>
<a id="L365"></a><span class="ln">   365</span>	}
<a id="L366"></a><span class="ln">   366</span>	
<a id="L367"></a><span class="ln">   367</span>	<span class="comment">// for x in [4.5454,2.8571] = 1/[0.2199,0.35001] ???</span>
<a id="L368"></a><span class="ln">   368</span>	var q1R3 = [6]float64{
<a id="L369"></a><span class="ln">   369</span>		-5.07831226461766561369e-09, <span class="comment">// 0xBE35CFA9D38FC84F</span>
<a id="L370"></a><span class="ln">   370</span>		-1.02537829820837089745e-01, <span class="comment">// 0xBFBA3FEB51AEED54</span>
<a id="L371"></a><span class="ln">   371</span>		-4.61011581139473403113e+00, <span class="comment">// 0xC01270C23302D9FF</span>
<a id="L372"></a><span class="ln">   372</span>		-5.78472216562783643212e+01, <span class="comment">// 0xC04CEC71C25D16DA</span>
<a id="L373"></a><span class="ln">   373</span>		-2.28244540737631695038e+02, <span class="comment">// 0xC06C87D34718D55F</span>
<a id="L374"></a><span class="ln">   374</span>		-2.19210128478909325622e+02, <span class="comment">// 0xC06B66B95F5C1BF6</span>
<a id="L375"></a><span class="ln">   375</span>	}
<a id="L376"></a><span class="ln">   376</span>	var q1S3 = [6]float64{
<a id="L377"></a><span class="ln">   377</span>		4.76651550323729509273e+01,  <span class="comment">// 0x4047D523CCD367E4</span>
<a id="L378"></a><span class="ln">   378</span>		6.73865112676699709482e+02,  <span class="comment">// 0x40850EEBC031EE3E</span>
<a id="L379"></a><span class="ln">   379</span>		3.38015286679526343505e+03,  <span class="comment">// 0x40AA684E448E7C9A</span>
<a id="L380"></a><span class="ln">   380</span>		5.54772909720722782367e+03,  <span class="comment">// 0x40B5ABBAA61D54A6</span>
<a id="L381"></a><span class="ln">   381</span>		1.90311919338810798763e+03,  <span class="comment">// 0x409DBC7A0DD4DF4B</span>
<a id="L382"></a><span class="ln">   382</span>		-1.35201191444307340817e+02, <span class="comment">// 0xC060E670290A311F</span>
<a id="L383"></a><span class="ln">   383</span>	}
<a id="L384"></a><span class="ln">   384</span>	
<a id="L385"></a><span class="ln">   385</span>	<span class="comment">// for x in [2.8570,2] = 1/[0.3499,0.5]</span>
<a id="L386"></a><span class="ln">   386</span>	var q1R2 = [6]float64{
<a id="L387"></a><span class="ln">   387</span>		-1.78381727510958865572e-07, <span class="comment">// 0xBE87F12644C626D2</span>
<a id="L388"></a><span class="ln">   388</span>		-1.02517042607985553460e-01, <span class="comment">// 0xBFBA3E8E9148B010</span>
<a id="L389"></a><span class="ln">   389</span>		-2.75220568278187460720e+00, <span class="comment">// 0xC006048469BB4EDA</span>
<a id="L390"></a><span class="ln">   390</span>		-1.96636162643703720221e+01, <span class="comment">// 0xC033A9E2C168907F</span>
<a id="L391"></a><span class="ln">   391</span>		-4.23253133372830490089e+01, <span class="comment">// 0xC04529A3DE104AAA</span>
<a id="L392"></a><span class="ln">   392</span>		-2.13719211703704061733e+01, <span class="comment">// 0xC0355F3639CF6E52</span>
<a id="L393"></a><span class="ln">   393</span>	}
<a id="L394"></a><span class="ln">   394</span>	var q1S2 = [6]float64{
<a id="L395"></a><span class="ln">   395</span>		2.95333629060523854548e+01,  <span class="comment">// 0x403D888A78AE64FF</span>
<a id="L396"></a><span class="ln">   396</span>		2.52981549982190529136e+02,  <span class="comment">// 0x406F9F68DB821CBA</span>
<a id="L397"></a><span class="ln">   397</span>		7.57502834868645436472e+02,  <span class="comment">// 0x4087AC05CE49A0F7</span>
<a id="L398"></a><span class="ln">   398</span>		7.39393205320467245656e+02,  <span class="comment">// 0x40871B2548D4C029</span>
<a id="L399"></a><span class="ln">   399</span>		1.55949003336666123687e+02,  <span class="comment">// 0x40637E5E3C3ED8D4</span>
<a id="L400"></a><span class="ln">   400</span>		-4.95949898822628210127e+00, <span class="comment">// 0xC013D686E71BE86B</span>
<a id="L401"></a><span class="ln">   401</span>	}
<a id="L402"></a><span class="ln">   402</span>	
<a id="L403"></a><span class="ln">   403</span>	func qone(x float64) float64 {
<a id="L404"></a><span class="ln">   404</span>		var p, q [6]float64
<a id="L405"></a><span class="ln">   405</span>		if x &gt;= 8 {
<a id="L406"></a><span class="ln">   406</span>			p = q1R8
<a id="L407"></a><span class="ln">   407</span>			q = q1S8
<a id="L408"></a><span class="ln">   408</span>		} else if x &gt;= 4.5454 {
<a id="L409"></a><span class="ln">   409</span>			p = q1R5
<a id="L410"></a><span class="ln">   410</span>			q = q1S5
<a id="L411"></a><span class="ln">   411</span>		} else if x &gt;= 2.8571 {
<a id="L412"></a><span class="ln">   412</span>			p = q1R3
<a id="L413"></a><span class="ln">   413</span>			q = q1S3
<a id="L414"></a><span class="ln">   414</span>		} else if x &gt;= 2 {
<a id="L415"></a><span class="ln">   415</span>			p = q1R2
<a id="L416"></a><span class="ln">   416</span>			q = q1S2
<a id="L417"></a><span class="ln">   417</span>		}
<a id="L418"></a><span class="ln">   418</span>		z := 1 / (x * x)
<a id="L419"></a><span class="ln">   419</span>		r := p[0] + z*(p[1]+z*(p[2]+z*(p[3]+z*(p[4]+z*p[5]))))
<a id="L420"></a><span class="ln">   420</span>		s := 1 + z*(q[0]+z*(q[1]+z*(q[2]+z*(q[3]+z*(q[4]+z*q[5])))))
<a id="L421"></a><span class="ln">   421</span>		return (0.375 + r/s) / x
<a id="L422"></a><span class="ln">   422</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

