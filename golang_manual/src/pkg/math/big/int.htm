<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/math/big/int.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/math/big/int.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// This file implements signed multi-precision integers.</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package big
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;errors&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;fmt&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;io&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;math/rand&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;strings&#34;
<a id="L15"></a><span class="ln">    15</span>	)
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// An Int represents a signed multi-precision integer.</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// The zero value for an Int represents the value 0.</span>
<a id="L19"></a><span class="ln">    19</span>	type Int struct {
<a id="L20"></a><span class="ln">    20</span>		neg bool <span class="comment">// sign</span>
<a id="L21"></a><span class="ln">    21</span>		abs nat  <span class="comment">// absolute value of the integer</span>
<a id="L22"></a><span class="ln">    22</span>	}
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>	var intOne = &amp;Int{false, natOne}
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// Sign returns:</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">//</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">//	-1 if x &lt;  0</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">//	 0 if x == 0</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">//	+1 if x &gt;  0</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">//</span>
<a id="L32"></a><span class="ln">    32</span>	func (x *Int) Sign() int {
<a id="L33"></a><span class="ln">    33</span>		if len(x.abs) == 0 {
<a id="L34"></a><span class="ln">    34</span>			return 0
<a id="L35"></a><span class="ln">    35</span>		}
<a id="L36"></a><span class="ln">    36</span>		if x.neg {
<a id="L37"></a><span class="ln">    37</span>			return -1
<a id="L38"></a><span class="ln">    38</span>		}
<a id="L39"></a><span class="ln">    39</span>		return 1
<a id="L40"></a><span class="ln">    40</span>	}
<a id="L41"></a><span class="ln">    41</span>	
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">// SetInt64 sets z to x and returns z.</span>
<a id="L43"></a><span class="ln">    43</span>	func (z *Int) SetInt64(x int64) *Int {
<a id="L44"></a><span class="ln">    44</span>		neg := false
<a id="L45"></a><span class="ln">    45</span>		if x &lt; 0 {
<a id="L46"></a><span class="ln">    46</span>			neg = true
<a id="L47"></a><span class="ln">    47</span>			x = -x
<a id="L48"></a><span class="ln">    48</span>		}
<a id="L49"></a><span class="ln">    49</span>		z.abs = z.abs.setUint64(uint64(x))
<a id="L50"></a><span class="ln">    50</span>		z.neg = neg
<a id="L51"></a><span class="ln">    51</span>		return z
<a id="L52"></a><span class="ln">    52</span>	}
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">// NewInt allocates and returns a new Int set to x.</span>
<a id="L55"></a><span class="ln">    55</span>	func NewInt(x int64) *Int {
<a id="L56"></a><span class="ln">    56</span>		return new(Int).SetInt64(x)
<a id="L57"></a><span class="ln">    57</span>	}
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// Set sets z to x and returns z.</span>
<a id="L60"></a><span class="ln">    60</span>	func (z *Int) Set(x *Int) *Int {
<a id="L61"></a><span class="ln">    61</span>		if z != x {
<a id="L62"></a><span class="ln">    62</span>			z.abs = z.abs.set(x.abs)
<a id="L63"></a><span class="ln">    63</span>			z.neg = x.neg
<a id="L64"></a><span class="ln">    64</span>		}
<a id="L65"></a><span class="ln">    65</span>		return z
<a id="L66"></a><span class="ln">    66</span>	}
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// Bits provides raw (unchecked but fast) access to x by returning its</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// absolute value as a little-endian Word slice. The result and x share</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// the same underlying array.</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">// Bits is intended to support implementation of missing low-level Int</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">// functionality outside this package; it should be avoided otherwise.</span>
<a id="L73"></a><span class="ln">    73</span>	func (x *Int) Bits() []Word {
<a id="L74"></a><span class="ln">    74</span>		return x.abs
<a id="L75"></a><span class="ln">    75</span>	}
<a id="L76"></a><span class="ln">    76</span>	
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// SetBits provides raw (unchecked but fast) access to z by setting its</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// value to abs, interpreted as a little-endian Word slice, and returning</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// z. The result and abs share the same underlying array.</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// SetBits is intended to support implementation of missing low-level Int</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// functionality outside this package; it should be avoided otherwise.</span>
<a id="L82"></a><span class="ln">    82</span>	func (z *Int) SetBits(abs []Word) *Int {
<a id="L83"></a><span class="ln">    83</span>		z.abs = nat(abs).norm()
<a id="L84"></a><span class="ln">    84</span>		z.neg = false
<a id="L85"></a><span class="ln">    85</span>		return z
<a id="L86"></a><span class="ln">    86</span>	}
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// Abs sets z to |x| (the absolute value of x) and returns z.</span>
<a id="L89"></a><span class="ln">    89</span>	func (z *Int) Abs(x *Int) *Int {
<a id="L90"></a><span class="ln">    90</span>		z.Set(x)
<a id="L91"></a><span class="ln">    91</span>		z.neg = false
<a id="L92"></a><span class="ln">    92</span>		return z
<a id="L93"></a><span class="ln">    93</span>	}
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">// Neg sets z to -x and returns z.</span>
<a id="L96"></a><span class="ln">    96</span>	func (z *Int) Neg(x *Int) *Int {
<a id="L97"></a><span class="ln">    97</span>		z.Set(x)
<a id="L98"></a><span class="ln">    98</span>		z.neg = len(z.abs) &gt; 0 &amp;&amp; !z.neg <span class="comment">// 0 has no sign</span>
<a id="L99"></a><span class="ln">    99</span>		return z
<a id="L100"></a><span class="ln">   100</span>	}
<a id="L101"></a><span class="ln">   101</span>	
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">// Add sets z to the sum x+y and returns z.</span>
<a id="L103"></a><span class="ln">   103</span>	func (z *Int) Add(x, y *Int) *Int {
<a id="L104"></a><span class="ln">   104</span>		neg := x.neg
<a id="L105"></a><span class="ln">   105</span>		if x.neg == y.neg {
<a id="L106"></a><span class="ln">   106</span>			<span class="comment">// x + y == x + y</span>
<a id="L107"></a><span class="ln">   107</span>			<span class="comment">// (-x) + (-y) == -(x + y)</span>
<a id="L108"></a><span class="ln">   108</span>			z.abs = z.abs.add(x.abs, y.abs)
<a id="L109"></a><span class="ln">   109</span>		} else {
<a id="L110"></a><span class="ln">   110</span>			<span class="comment">// x + (-y) == x - y == -(y - x)</span>
<a id="L111"></a><span class="ln">   111</span>			<span class="comment">// (-x) + y == y - x == -(x - y)</span>
<a id="L112"></a><span class="ln">   112</span>			if x.abs.cmp(y.abs) &gt;= 0 {
<a id="L113"></a><span class="ln">   113</span>				z.abs = z.abs.sub(x.abs, y.abs)
<a id="L114"></a><span class="ln">   114</span>			} else {
<a id="L115"></a><span class="ln">   115</span>				neg = !neg
<a id="L116"></a><span class="ln">   116</span>				z.abs = z.abs.sub(y.abs, x.abs)
<a id="L117"></a><span class="ln">   117</span>			}
<a id="L118"></a><span class="ln">   118</span>		}
<a id="L119"></a><span class="ln">   119</span>		z.neg = len(z.abs) &gt; 0 &amp;&amp; neg <span class="comment">// 0 has no sign</span>
<a id="L120"></a><span class="ln">   120</span>		return z
<a id="L121"></a><span class="ln">   121</span>	}
<a id="L122"></a><span class="ln">   122</span>	
<a id="L123"></a><span class="ln">   123</span>	<span class="comment">// Sub sets z to the difference x-y and returns z.</span>
<a id="L124"></a><span class="ln">   124</span>	func (z *Int) Sub(x, y *Int) *Int {
<a id="L125"></a><span class="ln">   125</span>		neg := x.neg
<a id="L126"></a><span class="ln">   126</span>		if x.neg != y.neg {
<a id="L127"></a><span class="ln">   127</span>			<span class="comment">// x - (-y) == x + y</span>
<a id="L128"></a><span class="ln">   128</span>			<span class="comment">// (-x) - y == -(x + y)</span>
<a id="L129"></a><span class="ln">   129</span>			z.abs = z.abs.add(x.abs, y.abs)
<a id="L130"></a><span class="ln">   130</span>		} else {
<a id="L131"></a><span class="ln">   131</span>			<span class="comment">// x - y == x - y == -(y - x)</span>
<a id="L132"></a><span class="ln">   132</span>			<span class="comment">// (-x) - (-y) == y - x == -(x - y)</span>
<a id="L133"></a><span class="ln">   133</span>			if x.abs.cmp(y.abs) &gt;= 0 {
<a id="L134"></a><span class="ln">   134</span>				z.abs = z.abs.sub(x.abs, y.abs)
<a id="L135"></a><span class="ln">   135</span>			} else {
<a id="L136"></a><span class="ln">   136</span>				neg = !neg
<a id="L137"></a><span class="ln">   137</span>				z.abs = z.abs.sub(y.abs, x.abs)
<a id="L138"></a><span class="ln">   138</span>			}
<a id="L139"></a><span class="ln">   139</span>		}
<a id="L140"></a><span class="ln">   140</span>		z.neg = len(z.abs) &gt; 0 &amp;&amp; neg <span class="comment">// 0 has no sign</span>
<a id="L141"></a><span class="ln">   141</span>		return z
<a id="L142"></a><span class="ln">   142</span>	}
<a id="L143"></a><span class="ln">   143</span>	
<a id="L144"></a><span class="ln">   144</span>	<span class="comment">// Mul sets z to the product x*y and returns z.</span>
<a id="L145"></a><span class="ln">   145</span>	func (z *Int) Mul(x, y *Int) *Int {
<a id="L146"></a><span class="ln">   146</span>		<span class="comment">// x * y == x * y</span>
<a id="L147"></a><span class="ln">   147</span>		<span class="comment">// x * (-y) == -(x * y)</span>
<a id="L148"></a><span class="ln">   148</span>		<span class="comment">// (-x) * y == -(x * y)</span>
<a id="L149"></a><span class="ln">   149</span>		<span class="comment">// (-x) * (-y) == x * y</span>
<a id="L150"></a><span class="ln">   150</span>		z.abs = z.abs.mul(x.abs, y.abs)
<a id="L151"></a><span class="ln">   151</span>		z.neg = len(z.abs) &gt; 0 &amp;&amp; x.neg != y.neg <span class="comment">// 0 has no sign</span>
<a id="L152"></a><span class="ln">   152</span>		return z
<a id="L153"></a><span class="ln">   153</span>	}
<a id="L154"></a><span class="ln">   154</span>	
<a id="L155"></a><span class="ln">   155</span>	<span class="comment">// MulRange sets z to the product of all integers</span>
<a id="L156"></a><span class="ln">   156</span>	<span class="comment">// in the range [a, b] inclusively and returns z.</span>
<a id="L157"></a><span class="ln">   157</span>	<span class="comment">// If a &gt; b (empty range), the result is 1.</span>
<a id="L158"></a><span class="ln">   158</span>	func (z *Int) MulRange(a, b int64) *Int {
<a id="L159"></a><span class="ln">   159</span>		switch {
<a id="L160"></a><span class="ln">   160</span>		case a &gt; b:
<a id="L161"></a><span class="ln">   161</span>			return z.SetInt64(1) <span class="comment">// empty range</span>
<a id="L162"></a><span class="ln">   162</span>		case a &lt;= 0 &amp;&amp; b &gt;= 0:
<a id="L163"></a><span class="ln">   163</span>			return z.SetInt64(0) <span class="comment">// range includes 0</span>
<a id="L164"></a><span class="ln">   164</span>		}
<a id="L165"></a><span class="ln">   165</span>		<span class="comment">// a &lt;= b &amp;&amp; (b &lt; 0 || a &gt; 0)</span>
<a id="L166"></a><span class="ln">   166</span>	
<a id="L167"></a><span class="ln">   167</span>		neg := false
<a id="L168"></a><span class="ln">   168</span>		if a &lt; 0 {
<a id="L169"></a><span class="ln">   169</span>			neg = (b-a)&amp;1 == 0
<a id="L170"></a><span class="ln">   170</span>			a, b = -b, -a
<a id="L171"></a><span class="ln">   171</span>		}
<a id="L172"></a><span class="ln">   172</span>	
<a id="L173"></a><span class="ln">   173</span>		z.abs = z.abs.mulRange(uint64(a), uint64(b))
<a id="L174"></a><span class="ln">   174</span>		z.neg = neg
<a id="L175"></a><span class="ln">   175</span>		return z
<a id="L176"></a><span class="ln">   176</span>	}
<a id="L177"></a><span class="ln">   177</span>	
<a id="L178"></a><span class="ln">   178</span>	<span class="comment">// Binomial sets z to the binomial coefficient of (n, k) and returns z.</span>
<a id="L179"></a><span class="ln">   179</span>	func (z *Int) Binomial(n, k int64) *Int {
<a id="L180"></a><span class="ln">   180</span>		var a, b Int
<a id="L181"></a><span class="ln">   181</span>		a.MulRange(n-k+1, n)
<a id="L182"></a><span class="ln">   182</span>		b.MulRange(1, k)
<a id="L183"></a><span class="ln">   183</span>		return z.Quo(&amp;a, &amp;b)
<a id="L184"></a><span class="ln">   184</span>	}
<a id="L185"></a><span class="ln">   185</span>	
<a id="L186"></a><span class="ln">   186</span>	<span class="comment">// Quo sets z to the quotient x/y for y != 0 and returns z.</span>
<a id="L187"></a><span class="ln">   187</span>	<span class="comment">// If y == 0, a division-by-zero run-time panic occurs.</span>
<a id="L188"></a><span class="ln">   188</span>	<span class="comment">// Quo implements truncated division (like Go); see QuoRem for more details.</span>
<a id="L189"></a><span class="ln">   189</span>	func (z *Int) Quo(x, y *Int) *Int {
<a id="L190"></a><span class="ln">   190</span>		z.abs, _ = z.abs.div(nil, x.abs, y.abs)
<a id="L191"></a><span class="ln">   191</span>		z.neg = len(z.abs) &gt; 0 &amp;&amp; x.neg != y.neg <span class="comment">// 0 has no sign</span>
<a id="L192"></a><span class="ln">   192</span>		return z
<a id="L193"></a><span class="ln">   193</span>	}
<a id="L194"></a><span class="ln">   194</span>	
<a id="L195"></a><span class="ln">   195</span>	<span class="comment">// Rem sets z to the remainder x%y for y != 0 and returns z.</span>
<a id="L196"></a><span class="ln">   196</span>	<span class="comment">// If y == 0, a division-by-zero run-time panic occurs.</span>
<a id="L197"></a><span class="ln">   197</span>	<span class="comment">// Rem implements truncated modulus (like Go); see QuoRem for more details.</span>
<a id="L198"></a><span class="ln">   198</span>	func (z *Int) Rem(x, y *Int) *Int {
<a id="L199"></a><span class="ln">   199</span>		_, z.abs = nat(nil).div(z.abs, x.abs, y.abs)
<a id="L200"></a><span class="ln">   200</span>		z.neg = len(z.abs) &gt; 0 &amp;&amp; x.neg <span class="comment">// 0 has no sign</span>
<a id="L201"></a><span class="ln">   201</span>		return z
<a id="L202"></a><span class="ln">   202</span>	}
<a id="L203"></a><span class="ln">   203</span>	
<a id="L204"></a><span class="ln">   204</span>	<span class="comment">// QuoRem sets z to the quotient x/y and r to the remainder x%y</span>
<a id="L205"></a><span class="ln">   205</span>	<span class="comment">// and returns the pair (z, r) for y != 0.</span>
<a id="L206"></a><span class="ln">   206</span>	<span class="comment">// If y == 0, a division-by-zero run-time panic occurs.</span>
<a id="L207"></a><span class="ln">   207</span>	<span class="comment">//</span>
<a id="L208"></a><span class="ln">   208</span>	<span class="comment">// QuoRem implements T-division and modulus (like Go):</span>
<a id="L209"></a><span class="ln">   209</span>	<span class="comment">//</span>
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">//	q = x/y      with the result truncated to zero</span>
<a id="L211"></a><span class="ln">   211</span>	<span class="comment">//	r = x - y*q</span>
<a id="L212"></a><span class="ln">   212</span>	<span class="comment">//</span>
<a id="L213"></a><span class="ln">   213</span>	<span class="comment">// (See Daan Leijen, ``Division and Modulus for Computer Scientists&#39;&#39;.)</span>
<a id="L214"></a><span class="ln">   214</span>	<span class="comment">// See DivMod for Euclidean division and modulus (unlike Go).</span>
<a id="L215"></a><span class="ln">   215</span>	<span class="comment">//</span>
<a id="L216"></a><span class="ln">   216</span>	func (z *Int) QuoRem(x, y, r *Int) (*Int, *Int) {
<a id="L217"></a><span class="ln">   217</span>		z.abs, r.abs = z.abs.div(r.abs, x.abs, y.abs)
<a id="L218"></a><span class="ln">   218</span>		z.neg, r.neg = len(z.abs) &gt; 0 &amp;&amp; x.neg != y.neg, len(r.abs) &gt; 0 &amp;&amp; x.neg <span class="comment">// 0 has no sign</span>
<a id="L219"></a><span class="ln">   219</span>		return z, r
<a id="L220"></a><span class="ln">   220</span>	}
<a id="L221"></a><span class="ln">   221</span>	
<a id="L222"></a><span class="ln">   222</span>	<span class="comment">// Div sets z to the quotient x/y for y != 0 and returns z.</span>
<a id="L223"></a><span class="ln">   223</span>	<span class="comment">// If y == 0, a division-by-zero run-time panic occurs.</span>
<a id="L224"></a><span class="ln">   224</span>	<span class="comment">// Div implements Euclidean division (unlike Go); see DivMod for more details.</span>
<a id="L225"></a><span class="ln">   225</span>	func (z *Int) Div(x, y *Int) *Int {
<a id="L226"></a><span class="ln">   226</span>		y_neg := y.neg <span class="comment">// z may be an alias for y</span>
<a id="L227"></a><span class="ln">   227</span>		var r Int
<a id="L228"></a><span class="ln">   228</span>		z.QuoRem(x, y, &amp;r)
<a id="L229"></a><span class="ln">   229</span>		if r.neg {
<a id="L230"></a><span class="ln">   230</span>			if y_neg {
<a id="L231"></a><span class="ln">   231</span>				z.Add(z, intOne)
<a id="L232"></a><span class="ln">   232</span>			} else {
<a id="L233"></a><span class="ln">   233</span>				z.Sub(z, intOne)
<a id="L234"></a><span class="ln">   234</span>			}
<a id="L235"></a><span class="ln">   235</span>		}
<a id="L236"></a><span class="ln">   236</span>		return z
<a id="L237"></a><span class="ln">   237</span>	}
<a id="L238"></a><span class="ln">   238</span>	
<a id="L239"></a><span class="ln">   239</span>	<span class="comment">// Mod sets z to the modulus x%y for y != 0 and returns z.</span>
<a id="L240"></a><span class="ln">   240</span>	<span class="comment">// If y == 0, a division-by-zero run-time panic occurs.</span>
<a id="L241"></a><span class="ln">   241</span>	<span class="comment">// Mod implements Euclidean modulus (unlike Go); see DivMod for more details.</span>
<a id="L242"></a><span class="ln">   242</span>	func (z *Int) Mod(x, y *Int) *Int {
<a id="L243"></a><span class="ln">   243</span>		y0 := y <span class="comment">// save y</span>
<a id="L244"></a><span class="ln">   244</span>		if z == y || alias(z.abs, y.abs) {
<a id="L245"></a><span class="ln">   245</span>			y0 = new(Int).Set(y)
<a id="L246"></a><span class="ln">   246</span>		}
<a id="L247"></a><span class="ln">   247</span>		var q Int
<a id="L248"></a><span class="ln">   248</span>		q.QuoRem(x, y, z)
<a id="L249"></a><span class="ln">   249</span>		if z.neg {
<a id="L250"></a><span class="ln">   250</span>			if y0.neg {
<a id="L251"></a><span class="ln">   251</span>				z.Sub(z, y0)
<a id="L252"></a><span class="ln">   252</span>			} else {
<a id="L253"></a><span class="ln">   253</span>				z.Add(z, y0)
<a id="L254"></a><span class="ln">   254</span>			}
<a id="L255"></a><span class="ln">   255</span>		}
<a id="L256"></a><span class="ln">   256</span>		return z
<a id="L257"></a><span class="ln">   257</span>	}
<a id="L258"></a><span class="ln">   258</span>	
<a id="L259"></a><span class="ln">   259</span>	<span class="comment">// DivMod sets z to the quotient x div y and m to the modulus x mod y</span>
<a id="L260"></a><span class="ln">   260</span>	<span class="comment">// and returns the pair (z, m) for y != 0.</span>
<a id="L261"></a><span class="ln">   261</span>	<span class="comment">// If y == 0, a division-by-zero run-time panic occurs.</span>
<a id="L262"></a><span class="ln">   262</span>	<span class="comment">//</span>
<a id="L263"></a><span class="ln">   263</span>	<span class="comment">// DivMod implements Euclidean division and modulus (unlike Go):</span>
<a id="L264"></a><span class="ln">   264</span>	<span class="comment">//</span>
<a id="L265"></a><span class="ln">   265</span>	<span class="comment">//	q = x div y  such that</span>
<a id="L266"></a><span class="ln">   266</span>	<span class="comment">//	m = x - y*q  with 0 &lt;= m &lt; |q|</span>
<a id="L267"></a><span class="ln">   267</span>	<span class="comment">//</span>
<a id="L268"></a><span class="ln">   268</span>	<span class="comment">// (See Raymond T. Boute, ``The Euclidean definition of the functions</span>
<a id="L269"></a><span class="ln">   269</span>	<span class="comment">// div and mod&#39;&#39;. ACM Transactions on Programming Languages and</span>
<a id="L270"></a><span class="ln">   270</span>	<span class="comment">// Systems (TOPLAS), 14(2):127-144, New York, NY, USA, 4/1992.</span>
<a id="L271"></a><span class="ln">   271</span>	<span class="comment">// ACM press.)</span>
<a id="L272"></a><span class="ln">   272</span>	<span class="comment">// See QuoRem for T-division and modulus (like Go).</span>
<a id="L273"></a><span class="ln">   273</span>	<span class="comment">//</span>
<a id="L274"></a><span class="ln">   274</span>	func (z *Int) DivMod(x, y, m *Int) (*Int, *Int) {
<a id="L275"></a><span class="ln">   275</span>		y0 := y <span class="comment">// save y</span>
<a id="L276"></a><span class="ln">   276</span>		if z == y || alias(z.abs, y.abs) {
<a id="L277"></a><span class="ln">   277</span>			y0 = new(Int).Set(y)
<a id="L278"></a><span class="ln">   278</span>		}
<a id="L279"></a><span class="ln">   279</span>		z.QuoRem(x, y, m)
<a id="L280"></a><span class="ln">   280</span>		if m.neg {
<a id="L281"></a><span class="ln">   281</span>			if y0.neg {
<a id="L282"></a><span class="ln">   282</span>				z.Add(z, intOne)
<a id="L283"></a><span class="ln">   283</span>				m.Sub(m, y0)
<a id="L284"></a><span class="ln">   284</span>			} else {
<a id="L285"></a><span class="ln">   285</span>				z.Sub(z, intOne)
<a id="L286"></a><span class="ln">   286</span>				m.Add(m, y0)
<a id="L287"></a><span class="ln">   287</span>			}
<a id="L288"></a><span class="ln">   288</span>		}
<a id="L289"></a><span class="ln">   289</span>		return z, m
<a id="L290"></a><span class="ln">   290</span>	}
<a id="L291"></a><span class="ln">   291</span>	
<a id="L292"></a><span class="ln">   292</span>	<span class="comment">// Cmp compares x and y and returns:</span>
<a id="L293"></a><span class="ln">   293</span>	<span class="comment">//</span>
<a id="L294"></a><span class="ln">   294</span>	<span class="comment">//   -1 if x &lt;  y</span>
<a id="L295"></a><span class="ln">   295</span>	<span class="comment">//    0 if x == y</span>
<a id="L296"></a><span class="ln">   296</span>	<span class="comment">//   +1 if x &gt;  y</span>
<a id="L297"></a><span class="ln">   297</span>	<span class="comment">//</span>
<a id="L298"></a><span class="ln">   298</span>	func (x *Int) Cmp(y *Int) (r int) {
<a id="L299"></a><span class="ln">   299</span>		<span class="comment">// x cmp y == x cmp y</span>
<a id="L300"></a><span class="ln">   300</span>		<span class="comment">// x cmp (-y) == x</span>
<a id="L301"></a><span class="ln">   301</span>		<span class="comment">// (-x) cmp y == y</span>
<a id="L302"></a><span class="ln">   302</span>		<span class="comment">// (-x) cmp (-y) == -(x cmp y)</span>
<a id="L303"></a><span class="ln">   303</span>		switch {
<a id="L304"></a><span class="ln">   304</span>		case x.neg == y.neg:
<a id="L305"></a><span class="ln">   305</span>			r = x.abs.cmp(y.abs)
<a id="L306"></a><span class="ln">   306</span>			if x.neg {
<a id="L307"></a><span class="ln">   307</span>				r = -r
<a id="L308"></a><span class="ln">   308</span>			}
<a id="L309"></a><span class="ln">   309</span>		case x.neg:
<a id="L310"></a><span class="ln">   310</span>			r = -1
<a id="L311"></a><span class="ln">   311</span>		default:
<a id="L312"></a><span class="ln">   312</span>			r = 1
<a id="L313"></a><span class="ln">   313</span>		}
<a id="L314"></a><span class="ln">   314</span>		return
<a id="L315"></a><span class="ln">   315</span>	}
<a id="L316"></a><span class="ln">   316</span>	
<a id="L317"></a><span class="ln">   317</span>	func (x *Int) String() string {
<a id="L318"></a><span class="ln">   318</span>		switch {
<a id="L319"></a><span class="ln">   319</span>		case x == nil:
<a id="L320"></a><span class="ln">   320</span>			return &#34;&lt;nil&gt;&#34;
<a id="L321"></a><span class="ln">   321</span>		case x.neg:
<a id="L322"></a><span class="ln">   322</span>			return &#34;-&#34; + x.abs.decimalString()
<a id="L323"></a><span class="ln">   323</span>		}
<a id="L324"></a><span class="ln">   324</span>		return x.abs.decimalString()
<a id="L325"></a><span class="ln">   325</span>	}
<a id="L326"></a><span class="ln">   326</span>	
<a id="L327"></a><span class="ln">   327</span>	func charset(ch rune) string {
<a id="L328"></a><span class="ln">   328</span>		switch ch {
<a id="L329"></a><span class="ln">   329</span>		case &#39;b&#39;:
<a id="L330"></a><span class="ln">   330</span>			return lowercaseDigits[0:2]
<a id="L331"></a><span class="ln">   331</span>		case &#39;o&#39;:
<a id="L332"></a><span class="ln">   332</span>			return lowercaseDigits[0:8]
<a id="L333"></a><span class="ln">   333</span>		case &#39;d&#39;, &#39;s&#39;, &#39;v&#39;:
<a id="L334"></a><span class="ln">   334</span>			return lowercaseDigits[0:10]
<a id="L335"></a><span class="ln">   335</span>		case &#39;x&#39;:
<a id="L336"></a><span class="ln">   336</span>			return lowercaseDigits[0:16]
<a id="L337"></a><span class="ln">   337</span>		case &#39;X&#39;:
<a id="L338"></a><span class="ln">   338</span>			return uppercaseDigits[0:16]
<a id="L339"></a><span class="ln">   339</span>		}
<a id="L340"></a><span class="ln">   340</span>		return &#34;&#34; <span class="comment">// unknown format</span>
<a id="L341"></a><span class="ln">   341</span>	}
<a id="L342"></a><span class="ln">   342</span>	
<a id="L343"></a><span class="ln">   343</span>	<span class="comment">// write count copies of text to s</span>
<a id="L344"></a><span class="ln">   344</span>	func writeMultiple(s fmt.State, text string, count int) {
<a id="L345"></a><span class="ln">   345</span>		if len(text) &gt; 0 {
<a id="L346"></a><span class="ln">   346</span>			b := []byte(text)
<a id="L347"></a><span class="ln">   347</span>			for ; count &gt; 0; count-- {
<a id="L348"></a><span class="ln">   348</span>				s.Write(b)
<a id="L349"></a><span class="ln">   349</span>			}
<a id="L350"></a><span class="ln">   350</span>		}
<a id="L351"></a><span class="ln">   351</span>	}
<a id="L352"></a><span class="ln">   352</span>	
<a id="L353"></a><span class="ln">   353</span>	<span class="comment">// Format is a support routine for fmt.Formatter. It accepts</span>
<a id="L354"></a><span class="ln">   354</span>	<span class="comment">// the formats &#39;b&#39; (binary), &#39;o&#39; (octal), &#39;d&#39; (decimal), &#39;x&#39;</span>
<a id="L355"></a><span class="ln">   355</span>	<span class="comment">// (lowercase hexadecimal), and &#39;X&#39; (uppercase hexadecimal).</span>
<a id="L356"></a><span class="ln">   356</span>	<span class="comment">// Also supported are the full suite of package fmt&#39;s format</span>
<a id="L357"></a><span class="ln">   357</span>	<span class="comment">// verbs for integral types, including &#39;+&#39;, &#39;-&#39;, and &#39; &#39;</span>
<a id="L358"></a><span class="ln">   358</span>	<span class="comment">// for sign control, &#39;#&#39; for leading zero in octal and for</span>
<a id="L359"></a><span class="ln">   359</span>	<span class="comment">// hexadecimal, a leading &#34;0x&#34; or &#34;0X&#34; for &#34;%#x&#34; and &#34;%#X&#34;</span>
<a id="L360"></a><span class="ln">   360</span>	<span class="comment">// respectively, specification of minimum digits precision,</span>
<a id="L361"></a><span class="ln">   361</span>	<span class="comment">// output field width, space or zero padding, and left or</span>
<a id="L362"></a><span class="ln">   362</span>	<span class="comment">// right justification.</span>
<a id="L363"></a><span class="ln">   363</span>	<span class="comment">//</span>
<a id="L364"></a><span class="ln">   364</span>	func (x *Int) Format(s fmt.State, ch rune) {
<a id="L365"></a><span class="ln">   365</span>		cs := charset(ch)
<a id="L366"></a><span class="ln">   366</span>	
<a id="L367"></a><span class="ln">   367</span>		<span class="comment">// special cases</span>
<a id="L368"></a><span class="ln">   368</span>		switch {
<a id="L369"></a><span class="ln">   369</span>		case cs == &#34;&#34;:
<a id="L370"></a><span class="ln">   370</span>			<span class="comment">// unknown format</span>
<a id="L371"></a><span class="ln">   371</span>			fmt.Fprintf(s, &#34;%%!%c(big.Int=%s)&#34;, ch, x.String())
<a id="L372"></a><span class="ln">   372</span>			return
<a id="L373"></a><span class="ln">   373</span>		case x == nil:
<a id="L374"></a><span class="ln">   374</span>			fmt.Fprint(s, &#34;&lt;nil&gt;&#34;)
<a id="L375"></a><span class="ln">   375</span>			return
<a id="L376"></a><span class="ln">   376</span>		}
<a id="L377"></a><span class="ln">   377</span>	
<a id="L378"></a><span class="ln">   378</span>		<span class="comment">// determine sign character</span>
<a id="L379"></a><span class="ln">   379</span>		sign := &#34;&#34;
<a id="L380"></a><span class="ln">   380</span>		switch {
<a id="L381"></a><span class="ln">   381</span>		case x.neg:
<a id="L382"></a><span class="ln">   382</span>			sign = &#34;-&#34;
<a id="L383"></a><span class="ln">   383</span>		case s.Flag(&#39;+&#39;): <span class="comment">// supersedes &#39; &#39; when both specified</span>
<a id="L384"></a><span class="ln">   384</span>			sign = &#34;+&#34;
<a id="L385"></a><span class="ln">   385</span>		case s.Flag(&#39; &#39;):
<a id="L386"></a><span class="ln">   386</span>			sign = &#34; &#34;
<a id="L387"></a><span class="ln">   387</span>		}
<a id="L388"></a><span class="ln">   388</span>	
<a id="L389"></a><span class="ln">   389</span>		<span class="comment">// determine prefix characters for indicating output base</span>
<a id="L390"></a><span class="ln">   390</span>		prefix := &#34;&#34;
<a id="L391"></a><span class="ln">   391</span>		if s.Flag(&#39;#&#39;) {
<a id="L392"></a><span class="ln">   392</span>			switch ch {
<a id="L393"></a><span class="ln">   393</span>			case &#39;o&#39;: <span class="comment">// octal</span>
<a id="L394"></a><span class="ln">   394</span>				prefix = &#34;0&#34;
<a id="L395"></a><span class="ln">   395</span>			case &#39;x&#39;: <span class="comment">// hexadecimal</span>
<a id="L396"></a><span class="ln">   396</span>				prefix = &#34;0x&#34;
<a id="L397"></a><span class="ln">   397</span>			case &#39;X&#39;:
<a id="L398"></a><span class="ln">   398</span>				prefix = &#34;0X&#34;
<a id="L399"></a><span class="ln">   399</span>			}
<a id="L400"></a><span class="ln">   400</span>		}
<a id="L401"></a><span class="ln">   401</span>	
<a id="L402"></a><span class="ln">   402</span>		<span class="comment">// determine digits with base set by len(cs) and digit characters from cs</span>
<a id="L403"></a><span class="ln">   403</span>		digits := x.abs.string(cs)
<a id="L404"></a><span class="ln">   404</span>	
<a id="L405"></a><span class="ln">   405</span>		<span class="comment">// number of characters for the three classes of number padding</span>
<a id="L406"></a><span class="ln">   406</span>		var left int   <span class="comment">// space characters to left of digits for right justification (&#34;%8d&#34;)</span>
<a id="L407"></a><span class="ln">   407</span>		var zeroes int <span class="comment">// zero characters (actually cs[0]) as left-most digits (&#34;%.8d&#34;)</span>
<a id="L408"></a><span class="ln">   408</span>		var right int  <span class="comment">// space characters to right of digits for left justification (&#34;%-8d&#34;)</span>
<a id="L409"></a><span class="ln">   409</span>	
<a id="L410"></a><span class="ln">   410</span>		<span class="comment">// determine number padding from precision: the least number of digits to output</span>
<a id="L411"></a><span class="ln">   411</span>		precision, precisionSet := s.Precision()
<a id="L412"></a><span class="ln">   412</span>		if precisionSet {
<a id="L413"></a><span class="ln">   413</span>			switch {
<a id="L414"></a><span class="ln">   414</span>			case len(digits) &lt; precision:
<a id="L415"></a><span class="ln">   415</span>				zeroes = precision - len(digits) <span class="comment">// count of zero padding </span>
<a id="L416"></a><span class="ln">   416</span>			case digits == &#34;0&#34; &amp;&amp; precision == 0:
<a id="L417"></a><span class="ln">   417</span>				return <span class="comment">// print nothing if zero value (x == 0) and zero precision (&#34;.&#34; or &#34;.0&#34;)</span>
<a id="L418"></a><span class="ln">   418</span>			}
<a id="L419"></a><span class="ln">   419</span>		}
<a id="L420"></a><span class="ln">   420</span>	
<a id="L421"></a><span class="ln">   421</span>		<span class="comment">// determine field pad from width: the least number of characters to output</span>
<a id="L422"></a><span class="ln">   422</span>		length := len(sign) + len(prefix) + zeroes + len(digits)
<a id="L423"></a><span class="ln">   423</span>		if width, widthSet := s.Width(); widthSet &amp;&amp; length &lt; width { <span class="comment">// pad as specified</span>
<a id="L424"></a><span class="ln">   424</span>			switch d := width - length; {
<a id="L425"></a><span class="ln">   425</span>			case s.Flag(&#39;-&#39;):
<a id="L426"></a><span class="ln">   426</span>				<span class="comment">// pad on the right with spaces; supersedes &#39;0&#39; when both specified</span>
<a id="L427"></a><span class="ln">   427</span>				right = d
<a id="L428"></a><span class="ln">   428</span>			case s.Flag(&#39;0&#39;) &amp;&amp; !precisionSet:
<a id="L429"></a><span class="ln">   429</span>				<span class="comment">// pad with zeroes unless precision also specified</span>
<a id="L430"></a><span class="ln">   430</span>				zeroes = d
<a id="L431"></a><span class="ln">   431</span>			default:
<a id="L432"></a><span class="ln">   432</span>				<span class="comment">// pad on the left with spaces</span>
<a id="L433"></a><span class="ln">   433</span>				left = d
<a id="L434"></a><span class="ln">   434</span>			}
<a id="L435"></a><span class="ln">   435</span>		}
<a id="L436"></a><span class="ln">   436</span>	
<a id="L437"></a><span class="ln">   437</span>		<span class="comment">// print number as [left pad][sign][prefix][zero pad][digits][right pad]</span>
<a id="L438"></a><span class="ln">   438</span>		writeMultiple(s, &#34; &#34;, left)
<a id="L439"></a><span class="ln">   439</span>		writeMultiple(s, sign, 1)
<a id="L440"></a><span class="ln">   440</span>		writeMultiple(s, prefix, 1)
<a id="L441"></a><span class="ln">   441</span>		writeMultiple(s, &#34;0&#34;, zeroes)
<a id="L442"></a><span class="ln">   442</span>		writeMultiple(s, digits, 1)
<a id="L443"></a><span class="ln">   443</span>		writeMultiple(s, &#34; &#34;, right)
<a id="L444"></a><span class="ln">   444</span>	}
<a id="L445"></a><span class="ln">   445</span>	
<a id="L446"></a><span class="ln">   446</span>	<span class="comment">// scan sets z to the integer value corresponding to the longest possible prefix</span>
<a id="L447"></a><span class="ln">   447</span>	<span class="comment">// read from r representing a signed integer number in a given conversion base.</span>
<a id="L448"></a><span class="ln">   448</span>	<span class="comment">// It returns z, the actual conversion base used, and an error, if any. In the</span>
<a id="L449"></a><span class="ln">   449</span>	<span class="comment">// error case, the value of z is undefined but the returned value is nil. The</span>
<a id="L450"></a><span class="ln">   450</span>	<span class="comment">// syntax follows the syntax of integer literals in Go.</span>
<a id="L451"></a><span class="ln">   451</span>	<span class="comment">//</span>
<a id="L452"></a><span class="ln">   452</span>	<span class="comment">// The base argument must be 0 or a value from 2 through MaxBase. If the base</span>
<a id="L453"></a><span class="ln">   453</span>	<span class="comment">// is 0, the string prefix determines the actual conversion base. A prefix of</span>
<a id="L454"></a><span class="ln">   454</span>	<span class="comment">// ``0x&#39;&#39; or ``0X&#39;&#39; selects base 16; the ``0&#39;&#39; prefix selects base 8, and a</span>
<a id="L455"></a><span class="ln">   455</span>	<span class="comment">// ``0b&#39;&#39; or ``0B&#39;&#39; prefix selects base 2. Otherwise the selected base is 10.</span>
<a id="L456"></a><span class="ln">   456</span>	<span class="comment">//</span>
<a id="L457"></a><span class="ln">   457</span>	func (z *Int) scan(r io.RuneScanner, base int) (*Int, int, error) {
<a id="L458"></a><span class="ln">   458</span>		<span class="comment">// determine sign</span>
<a id="L459"></a><span class="ln">   459</span>		ch, _, err := r.ReadRune()
<a id="L460"></a><span class="ln">   460</span>		if err != nil {
<a id="L461"></a><span class="ln">   461</span>			return nil, 0, err
<a id="L462"></a><span class="ln">   462</span>		}
<a id="L463"></a><span class="ln">   463</span>		neg := false
<a id="L464"></a><span class="ln">   464</span>		switch ch {
<a id="L465"></a><span class="ln">   465</span>		case &#39;-&#39;:
<a id="L466"></a><span class="ln">   466</span>			neg = true
<a id="L467"></a><span class="ln">   467</span>		case &#39;+&#39;: <span class="comment">// nothing to do</span>
<a id="L468"></a><span class="ln">   468</span>		default:
<a id="L469"></a><span class="ln">   469</span>			r.UnreadRune()
<a id="L470"></a><span class="ln">   470</span>		}
<a id="L471"></a><span class="ln">   471</span>	
<a id="L472"></a><span class="ln">   472</span>		<span class="comment">// determine mantissa</span>
<a id="L473"></a><span class="ln">   473</span>		z.abs, base, err = z.abs.scan(r, base)
<a id="L474"></a><span class="ln">   474</span>		if err != nil {
<a id="L475"></a><span class="ln">   475</span>			return nil, base, err
<a id="L476"></a><span class="ln">   476</span>		}
<a id="L477"></a><span class="ln">   477</span>		z.neg = len(z.abs) &gt; 0 &amp;&amp; neg <span class="comment">// 0 has no sign</span>
<a id="L478"></a><span class="ln">   478</span>	
<a id="L479"></a><span class="ln">   479</span>		return z, base, nil
<a id="L480"></a><span class="ln">   480</span>	}
<a id="L481"></a><span class="ln">   481</span>	
<a id="L482"></a><span class="ln">   482</span>	<span class="comment">// Scan is a support routine for fmt.Scanner; it sets z to the value of</span>
<a id="L483"></a><span class="ln">   483</span>	<span class="comment">// the scanned number. It accepts the formats &#39;b&#39; (binary), &#39;o&#39; (octal),</span>
<a id="L484"></a><span class="ln">   484</span>	<span class="comment">// &#39;d&#39; (decimal), &#39;x&#39; (lowercase hexadecimal), and &#39;X&#39; (uppercase hexadecimal).</span>
<a id="L485"></a><span class="ln">   485</span>	func (z *Int) Scan(s fmt.ScanState, ch rune) error {
<a id="L486"></a><span class="ln">   486</span>		s.SkipSpace() <span class="comment">// skip leading space characters</span>
<a id="L487"></a><span class="ln">   487</span>		base := 0
<a id="L488"></a><span class="ln">   488</span>		switch ch {
<a id="L489"></a><span class="ln">   489</span>		case &#39;b&#39;:
<a id="L490"></a><span class="ln">   490</span>			base = 2
<a id="L491"></a><span class="ln">   491</span>		case &#39;o&#39;:
<a id="L492"></a><span class="ln">   492</span>			base = 8
<a id="L493"></a><span class="ln">   493</span>		case &#39;d&#39;:
<a id="L494"></a><span class="ln">   494</span>			base = 10
<a id="L495"></a><span class="ln">   495</span>		case &#39;x&#39;, &#39;X&#39;:
<a id="L496"></a><span class="ln">   496</span>			base = 16
<a id="L497"></a><span class="ln">   497</span>		case &#39;s&#39;, &#39;v&#39;:
<a id="L498"></a><span class="ln">   498</span>			<span class="comment">// let scan determine the base</span>
<a id="L499"></a><span class="ln">   499</span>		default:
<a id="L500"></a><span class="ln">   500</span>			return errors.New(&#34;Int.Scan: invalid verb&#34;)
<a id="L501"></a><span class="ln">   501</span>		}
<a id="L502"></a><span class="ln">   502</span>		_, _, err := z.scan(s, base)
<a id="L503"></a><span class="ln">   503</span>		return err
<a id="L504"></a><span class="ln">   504</span>	}
<a id="L505"></a><span class="ln">   505</span>	
<a id="L506"></a><span class="ln">   506</span>	<span class="comment">// Int64 returns the int64 representation of x.</span>
<a id="L507"></a><span class="ln">   507</span>	<span class="comment">// If x cannot be represented in an int64, the result is undefined.</span>
<a id="L508"></a><span class="ln">   508</span>	func (x *Int) Int64() int64 {
<a id="L509"></a><span class="ln">   509</span>		if len(x.abs) == 0 {
<a id="L510"></a><span class="ln">   510</span>			return 0
<a id="L511"></a><span class="ln">   511</span>		}
<a id="L512"></a><span class="ln">   512</span>		v := int64(x.abs[0])
<a id="L513"></a><span class="ln">   513</span>		if _W == 32 &amp;&amp; len(x.abs) &gt; 1 {
<a id="L514"></a><span class="ln">   514</span>			v |= int64(x.abs[1]) &lt;&lt; 32
<a id="L515"></a><span class="ln">   515</span>		}
<a id="L516"></a><span class="ln">   516</span>		if x.neg {
<a id="L517"></a><span class="ln">   517</span>			v = -v
<a id="L518"></a><span class="ln">   518</span>		}
<a id="L519"></a><span class="ln">   519</span>		return v
<a id="L520"></a><span class="ln">   520</span>	}
<a id="L521"></a><span class="ln">   521</span>	
<a id="L522"></a><span class="ln">   522</span>	<span class="comment">// SetString sets z to the value of s, interpreted in the given base,</span>
<a id="L523"></a><span class="ln">   523</span>	<span class="comment">// and returns z and a boolean indicating success. If SetString fails,</span>
<a id="L524"></a><span class="ln">   524</span>	<span class="comment">// the value of z is undefined but the returned value is nil.</span>
<a id="L525"></a><span class="ln">   525</span>	<span class="comment">//</span>
<a id="L526"></a><span class="ln">   526</span>	<span class="comment">// The base argument must be 0 or a value from 2 through MaxBase. If the base</span>
<a id="L527"></a><span class="ln">   527</span>	<span class="comment">// is 0, the string prefix determines the actual conversion base. A prefix of</span>
<a id="L528"></a><span class="ln">   528</span>	<span class="comment">// ``0x&#39;&#39; or ``0X&#39;&#39; selects base 16; the ``0&#39;&#39; prefix selects base 8, and a</span>
<a id="L529"></a><span class="ln">   529</span>	<span class="comment">// ``0b&#39;&#39; or ``0B&#39;&#39; prefix selects base 2. Otherwise the selected base is 10.</span>
<a id="L530"></a><span class="ln">   530</span>	<span class="comment">//</span>
<a id="L531"></a><span class="ln">   531</span>	func (z *Int) SetString(s string, base int) (*Int, bool) {
<a id="L532"></a><span class="ln">   532</span>		r := strings.NewReader(s)
<a id="L533"></a><span class="ln">   533</span>		_, _, err := z.scan(r, base)
<a id="L534"></a><span class="ln">   534</span>		if err != nil {
<a id="L535"></a><span class="ln">   535</span>			return nil, false
<a id="L536"></a><span class="ln">   536</span>		}
<a id="L537"></a><span class="ln">   537</span>		_, _, err = r.ReadRune()
<a id="L538"></a><span class="ln">   538</span>		if err != io.EOF {
<a id="L539"></a><span class="ln">   539</span>			return nil, false
<a id="L540"></a><span class="ln">   540</span>		}
<a id="L541"></a><span class="ln">   541</span>		return z, true <span class="comment">// err == io.EOF =&gt; scan consumed all of s</span>
<a id="L542"></a><span class="ln">   542</span>	}
<a id="L543"></a><span class="ln">   543</span>	
<a id="L544"></a><span class="ln">   544</span>	<span class="comment">// SetBytes interprets buf as the bytes of a big-endian unsigned</span>
<a id="L545"></a><span class="ln">   545</span>	<span class="comment">// integer, sets z to that value, and returns z.</span>
<a id="L546"></a><span class="ln">   546</span>	func (z *Int) SetBytes(buf []byte) *Int {
<a id="L547"></a><span class="ln">   547</span>		z.abs = z.abs.setBytes(buf)
<a id="L548"></a><span class="ln">   548</span>		z.neg = false
<a id="L549"></a><span class="ln">   549</span>		return z
<a id="L550"></a><span class="ln">   550</span>	}
<a id="L551"></a><span class="ln">   551</span>	
<a id="L552"></a><span class="ln">   552</span>	<span class="comment">// Bytes returns the absolute value of z as a big-endian byte slice.</span>
<a id="L553"></a><span class="ln">   553</span>	func (x *Int) Bytes() []byte {
<a id="L554"></a><span class="ln">   554</span>		buf := make([]byte, len(x.abs)*_S)
<a id="L555"></a><span class="ln">   555</span>		return buf[x.abs.bytes(buf):]
<a id="L556"></a><span class="ln">   556</span>	}
<a id="L557"></a><span class="ln">   557</span>	
<a id="L558"></a><span class="ln">   558</span>	<span class="comment">// BitLen returns the length of the absolute value of z in bits.</span>
<a id="L559"></a><span class="ln">   559</span>	<span class="comment">// The bit length of 0 is 0.</span>
<a id="L560"></a><span class="ln">   560</span>	func (x *Int) BitLen() int {
<a id="L561"></a><span class="ln">   561</span>		return x.abs.bitLen()
<a id="L562"></a><span class="ln">   562</span>	}
<a id="L563"></a><span class="ln">   563</span>	
<a id="L564"></a><span class="ln">   564</span>	<span class="comment">// Exp sets z = x**y mod m and returns z. If m is nil, z = x**y.</span>
<a id="L565"></a><span class="ln">   565</span>	<span class="comment">// See Knuth, volume 2, section 4.6.3.</span>
<a id="L566"></a><span class="ln">   566</span>	func (z *Int) Exp(x, y, m *Int) *Int {
<a id="L567"></a><span class="ln">   567</span>		if y.neg || len(y.abs) == 0 {
<a id="L568"></a><span class="ln">   568</span>			neg := x.neg
<a id="L569"></a><span class="ln">   569</span>			z.SetInt64(1)
<a id="L570"></a><span class="ln">   570</span>			z.neg = neg
<a id="L571"></a><span class="ln">   571</span>			return z
<a id="L572"></a><span class="ln">   572</span>		}
<a id="L573"></a><span class="ln">   573</span>	
<a id="L574"></a><span class="ln">   574</span>		var mWords nat
<a id="L575"></a><span class="ln">   575</span>		if m != nil {
<a id="L576"></a><span class="ln">   576</span>			mWords = m.abs
<a id="L577"></a><span class="ln">   577</span>		}
<a id="L578"></a><span class="ln">   578</span>	
<a id="L579"></a><span class="ln">   579</span>		z.abs = z.abs.expNN(x.abs, y.abs, mWords)
<a id="L580"></a><span class="ln">   580</span>		z.neg = len(z.abs) &gt; 0 &amp;&amp; x.neg &amp;&amp; y.abs[0]&amp;1 == 1 <span class="comment">// 0 has no sign</span>
<a id="L581"></a><span class="ln">   581</span>		return z
<a id="L582"></a><span class="ln">   582</span>	}
<a id="L583"></a><span class="ln">   583</span>	
<a id="L584"></a><span class="ln">   584</span>	<span class="comment">// GCD sets z to the greatest common divisor of a and b, which must be</span>
<a id="L585"></a><span class="ln">   585</span>	<span class="comment">// positive numbers, and returns z.</span>
<a id="L586"></a><span class="ln">   586</span>	<span class="comment">// If x and y are not nil, GCD sets x and y such that z = a*x + b*y.</span>
<a id="L587"></a><span class="ln">   587</span>	<span class="comment">// If either a or b is not positive, GCD sets z = x = y = 0.</span>
<a id="L588"></a><span class="ln">   588</span>	func (z *Int) GCD(x, y, a, b *Int) *Int {
<a id="L589"></a><span class="ln">   589</span>		if a.neg || b.neg {
<a id="L590"></a><span class="ln">   590</span>			z.SetInt64(0)
<a id="L591"></a><span class="ln">   591</span>			if x != nil {
<a id="L592"></a><span class="ln">   592</span>				x.SetInt64(0)
<a id="L593"></a><span class="ln">   593</span>			}
<a id="L594"></a><span class="ln">   594</span>			if y != nil {
<a id="L595"></a><span class="ln">   595</span>				y.SetInt64(0)
<a id="L596"></a><span class="ln">   596</span>			}
<a id="L597"></a><span class="ln">   597</span>			return z
<a id="L598"></a><span class="ln">   598</span>		}
<a id="L599"></a><span class="ln">   599</span>	
<a id="L600"></a><span class="ln">   600</span>		A := new(Int).Set(a)
<a id="L601"></a><span class="ln">   601</span>		B := new(Int).Set(b)
<a id="L602"></a><span class="ln">   602</span>	
<a id="L603"></a><span class="ln">   603</span>		X := new(Int)
<a id="L604"></a><span class="ln">   604</span>		Y := new(Int).SetInt64(1)
<a id="L605"></a><span class="ln">   605</span>	
<a id="L606"></a><span class="ln">   606</span>		lastX := new(Int).SetInt64(1)
<a id="L607"></a><span class="ln">   607</span>		lastY := new(Int)
<a id="L608"></a><span class="ln">   608</span>	
<a id="L609"></a><span class="ln">   609</span>		q := new(Int)
<a id="L610"></a><span class="ln">   610</span>		temp := new(Int)
<a id="L611"></a><span class="ln">   611</span>	
<a id="L612"></a><span class="ln">   612</span>		for len(B.abs) &gt; 0 {
<a id="L613"></a><span class="ln">   613</span>			r := new(Int)
<a id="L614"></a><span class="ln">   614</span>			q, r = q.QuoRem(A, B, r)
<a id="L615"></a><span class="ln">   615</span>	
<a id="L616"></a><span class="ln">   616</span>			A, B = B, r
<a id="L617"></a><span class="ln">   617</span>	
<a id="L618"></a><span class="ln">   618</span>			temp.Set(X)
<a id="L619"></a><span class="ln">   619</span>			X.Mul(X, q)
<a id="L620"></a><span class="ln">   620</span>			X.neg = !X.neg
<a id="L621"></a><span class="ln">   621</span>			X.Add(X, lastX)
<a id="L622"></a><span class="ln">   622</span>			lastX.Set(temp)
<a id="L623"></a><span class="ln">   623</span>	
<a id="L624"></a><span class="ln">   624</span>			temp.Set(Y)
<a id="L625"></a><span class="ln">   625</span>			Y.Mul(Y, q)
<a id="L626"></a><span class="ln">   626</span>			Y.neg = !Y.neg
<a id="L627"></a><span class="ln">   627</span>			Y.Add(Y, lastY)
<a id="L628"></a><span class="ln">   628</span>			lastY.Set(temp)
<a id="L629"></a><span class="ln">   629</span>		}
<a id="L630"></a><span class="ln">   630</span>	
<a id="L631"></a><span class="ln">   631</span>		if x != nil {
<a id="L632"></a><span class="ln">   632</span>			*x = *lastX
<a id="L633"></a><span class="ln">   633</span>		}
<a id="L634"></a><span class="ln">   634</span>	
<a id="L635"></a><span class="ln">   635</span>		if y != nil {
<a id="L636"></a><span class="ln">   636</span>			*y = *lastY
<a id="L637"></a><span class="ln">   637</span>		}
<a id="L638"></a><span class="ln">   638</span>	
<a id="L639"></a><span class="ln">   639</span>		*z = *A
<a id="L640"></a><span class="ln">   640</span>		return z
<a id="L641"></a><span class="ln">   641</span>	}
<a id="L642"></a><span class="ln">   642</span>	
<a id="L643"></a><span class="ln">   643</span>	<span class="comment">// ProbablyPrime performs n Miller-Rabin tests to check whether x is prime.</span>
<a id="L644"></a><span class="ln">   644</span>	<span class="comment">// If it returns true, x is prime with probability 1 - 1/4^n.</span>
<a id="L645"></a><span class="ln">   645</span>	<span class="comment">// If it returns false, x is not prime.</span>
<a id="L646"></a><span class="ln">   646</span>	func (x *Int) ProbablyPrime(n int) bool {
<a id="L647"></a><span class="ln">   647</span>		return !x.neg &amp;&amp; x.abs.probablyPrime(n)
<a id="L648"></a><span class="ln">   648</span>	}
<a id="L649"></a><span class="ln">   649</span>	
<a id="L650"></a><span class="ln">   650</span>	<span class="comment">// Rand sets z to a pseudo-random number in [0, n) and returns z.</span>
<a id="L651"></a><span class="ln">   651</span>	func (z *Int) Rand(rnd *rand.Rand, n *Int) *Int {
<a id="L652"></a><span class="ln">   652</span>		z.neg = false
<a id="L653"></a><span class="ln">   653</span>		if n.neg == true || len(n.abs) == 0 {
<a id="L654"></a><span class="ln">   654</span>			z.abs = nil
<a id="L655"></a><span class="ln">   655</span>			return z
<a id="L656"></a><span class="ln">   656</span>		}
<a id="L657"></a><span class="ln">   657</span>		z.abs = z.abs.random(rnd, n.abs, n.abs.bitLen())
<a id="L658"></a><span class="ln">   658</span>		return z
<a id="L659"></a><span class="ln">   659</span>	}
<a id="L660"></a><span class="ln">   660</span>	
<a id="L661"></a><span class="ln">   661</span>	<span class="comment">// ModInverse sets z to the multiplicative inverse of g in the group ℤ/pℤ (where</span>
<a id="L662"></a><span class="ln">   662</span>	<span class="comment">// p is a prime) and returns z.</span>
<a id="L663"></a><span class="ln">   663</span>	func (z *Int) ModInverse(g, p *Int) *Int {
<a id="L664"></a><span class="ln">   664</span>		var d Int
<a id="L665"></a><span class="ln">   665</span>		d.GCD(z, nil, g, p)
<a id="L666"></a><span class="ln">   666</span>		<span class="comment">// x and y are such that g*x + p*y = d. Since p is prime, d = 1. Taking</span>
<a id="L667"></a><span class="ln">   667</span>		<span class="comment">// that modulo p results in g*x = 1, therefore x is the inverse element.</span>
<a id="L668"></a><span class="ln">   668</span>		if z.neg {
<a id="L669"></a><span class="ln">   669</span>			z.Add(z, p)
<a id="L670"></a><span class="ln">   670</span>		}
<a id="L671"></a><span class="ln">   671</span>		return z
<a id="L672"></a><span class="ln">   672</span>	}
<a id="L673"></a><span class="ln">   673</span>	
<a id="L674"></a><span class="ln">   674</span>	<span class="comment">// Lsh sets z = x &lt;&lt; n and returns z.</span>
<a id="L675"></a><span class="ln">   675</span>	func (z *Int) Lsh(x *Int, n uint) *Int {
<a id="L676"></a><span class="ln">   676</span>		z.abs = z.abs.shl(x.abs, n)
<a id="L677"></a><span class="ln">   677</span>		z.neg = x.neg
<a id="L678"></a><span class="ln">   678</span>		return z
<a id="L679"></a><span class="ln">   679</span>	}
<a id="L680"></a><span class="ln">   680</span>	
<a id="L681"></a><span class="ln">   681</span>	<span class="comment">// Rsh sets z = x &gt;&gt; n and returns z.</span>
<a id="L682"></a><span class="ln">   682</span>	func (z *Int) Rsh(x *Int, n uint) *Int {
<a id="L683"></a><span class="ln">   683</span>		if x.neg {
<a id="L684"></a><span class="ln">   684</span>			<span class="comment">// (-x) &gt;&gt; s == ^(x-1) &gt;&gt; s == ^((x-1) &gt;&gt; s) == -(((x-1) &gt;&gt; s) + 1)</span>
<a id="L685"></a><span class="ln">   685</span>			t := z.abs.sub(x.abs, natOne) <span class="comment">// no underflow because |x| &gt; 0</span>
<a id="L686"></a><span class="ln">   686</span>			t = t.shr(t, n)
<a id="L687"></a><span class="ln">   687</span>			z.abs = t.add(t, natOne)
<a id="L688"></a><span class="ln">   688</span>			z.neg = true <span class="comment">// z cannot be zero if x is negative</span>
<a id="L689"></a><span class="ln">   689</span>			return z
<a id="L690"></a><span class="ln">   690</span>		}
<a id="L691"></a><span class="ln">   691</span>	
<a id="L692"></a><span class="ln">   692</span>		z.abs = z.abs.shr(x.abs, n)
<a id="L693"></a><span class="ln">   693</span>		z.neg = false
<a id="L694"></a><span class="ln">   694</span>		return z
<a id="L695"></a><span class="ln">   695</span>	}
<a id="L696"></a><span class="ln">   696</span>	
<a id="L697"></a><span class="ln">   697</span>	<span class="comment">// Bit returns the value of the i&#39;th bit of x. That is, it</span>
<a id="L698"></a><span class="ln">   698</span>	<span class="comment">// returns (x&gt;&gt;i)&amp;1. The bit index i must be &gt;= 0.</span>
<a id="L699"></a><span class="ln">   699</span>	func (x *Int) Bit(i int) uint {
<a id="L700"></a><span class="ln">   700</span>		if i &lt; 0 {
<a id="L701"></a><span class="ln">   701</span>			panic(&#34;negative bit index&#34;)
<a id="L702"></a><span class="ln">   702</span>		}
<a id="L703"></a><span class="ln">   703</span>		if x.neg {
<a id="L704"></a><span class="ln">   704</span>			t := nat(nil).sub(x.abs, natOne)
<a id="L705"></a><span class="ln">   705</span>			return t.bit(uint(i)) ^ 1
<a id="L706"></a><span class="ln">   706</span>		}
<a id="L707"></a><span class="ln">   707</span>	
<a id="L708"></a><span class="ln">   708</span>		return x.abs.bit(uint(i))
<a id="L709"></a><span class="ln">   709</span>	}
<a id="L710"></a><span class="ln">   710</span>	
<a id="L711"></a><span class="ln">   711</span>	<span class="comment">// SetBit sets z to x, with x&#39;s i&#39;th bit set to b (0 or 1).</span>
<a id="L712"></a><span class="ln">   712</span>	<span class="comment">// That is, if bit is 1 SetBit sets z = x | (1 &lt;&lt; i);</span>
<a id="L713"></a><span class="ln">   713</span>	<span class="comment">// if bit is 0 it sets z = x &amp;^ (1 &lt;&lt; i). If bit is not 0 or 1,</span>
<a id="L714"></a><span class="ln">   714</span>	<span class="comment">// SetBit will panic.</span>
<a id="L715"></a><span class="ln">   715</span>	func (z *Int) SetBit(x *Int, i int, b uint) *Int {
<a id="L716"></a><span class="ln">   716</span>		if i &lt; 0 {
<a id="L717"></a><span class="ln">   717</span>			panic(&#34;negative bit index&#34;)
<a id="L718"></a><span class="ln">   718</span>		}
<a id="L719"></a><span class="ln">   719</span>		if x.neg {
<a id="L720"></a><span class="ln">   720</span>			t := z.abs.sub(x.abs, natOne)
<a id="L721"></a><span class="ln">   721</span>			t = t.setBit(t, uint(i), b^1)
<a id="L722"></a><span class="ln">   722</span>			z.abs = t.add(t, natOne)
<a id="L723"></a><span class="ln">   723</span>			z.neg = len(z.abs) &gt; 0
<a id="L724"></a><span class="ln">   724</span>			return z
<a id="L725"></a><span class="ln">   725</span>		}
<a id="L726"></a><span class="ln">   726</span>		z.abs = z.abs.setBit(x.abs, uint(i), b)
<a id="L727"></a><span class="ln">   727</span>		z.neg = false
<a id="L728"></a><span class="ln">   728</span>		return z
<a id="L729"></a><span class="ln">   729</span>	}
<a id="L730"></a><span class="ln">   730</span>	
<a id="L731"></a><span class="ln">   731</span>	<span class="comment">// And sets z = x &amp; y and returns z.</span>
<a id="L732"></a><span class="ln">   732</span>	func (z *Int) And(x, y *Int) *Int {
<a id="L733"></a><span class="ln">   733</span>		if x.neg == y.neg {
<a id="L734"></a><span class="ln">   734</span>			if x.neg {
<a id="L735"></a><span class="ln">   735</span>				<span class="comment">// (-x) &amp; (-y) == ^(x-1) &amp; ^(y-1) == ^((x-1) | (y-1)) == -(((x-1) | (y-1)) + 1)</span>
<a id="L736"></a><span class="ln">   736</span>				x1 := nat(nil).sub(x.abs, natOne)
<a id="L737"></a><span class="ln">   737</span>				y1 := nat(nil).sub(y.abs, natOne)
<a id="L738"></a><span class="ln">   738</span>				z.abs = z.abs.add(z.abs.or(x1, y1), natOne)
<a id="L739"></a><span class="ln">   739</span>				z.neg = true <span class="comment">// z cannot be zero if x and y are negative</span>
<a id="L740"></a><span class="ln">   740</span>				return z
<a id="L741"></a><span class="ln">   741</span>			}
<a id="L742"></a><span class="ln">   742</span>	
<a id="L743"></a><span class="ln">   743</span>			<span class="comment">// x &amp; y == x &amp; y</span>
<a id="L744"></a><span class="ln">   744</span>			z.abs = z.abs.and(x.abs, y.abs)
<a id="L745"></a><span class="ln">   745</span>			z.neg = false
<a id="L746"></a><span class="ln">   746</span>			return z
<a id="L747"></a><span class="ln">   747</span>		}
<a id="L748"></a><span class="ln">   748</span>	
<a id="L749"></a><span class="ln">   749</span>		<span class="comment">// x.neg != y.neg</span>
<a id="L750"></a><span class="ln">   750</span>		if x.neg {
<a id="L751"></a><span class="ln">   751</span>			x, y = y, x <span class="comment">// &amp; is symmetric</span>
<a id="L752"></a><span class="ln">   752</span>		}
<a id="L753"></a><span class="ln">   753</span>	
<a id="L754"></a><span class="ln">   754</span>		<span class="comment">// x &amp; (-y) == x &amp; ^(y-1) == x &amp;^ (y-1)</span>
<a id="L755"></a><span class="ln">   755</span>		y1 := nat(nil).sub(y.abs, natOne)
<a id="L756"></a><span class="ln">   756</span>		z.abs = z.abs.andNot(x.abs, y1)
<a id="L757"></a><span class="ln">   757</span>		z.neg = false
<a id="L758"></a><span class="ln">   758</span>		return z
<a id="L759"></a><span class="ln">   759</span>	}
<a id="L760"></a><span class="ln">   760</span>	
<a id="L761"></a><span class="ln">   761</span>	<span class="comment">// AndNot sets z = x &amp;^ y and returns z.</span>
<a id="L762"></a><span class="ln">   762</span>	func (z *Int) AndNot(x, y *Int) *Int {
<a id="L763"></a><span class="ln">   763</span>		if x.neg == y.neg {
<a id="L764"></a><span class="ln">   764</span>			if x.neg {
<a id="L765"></a><span class="ln">   765</span>				<span class="comment">// (-x) &amp;^ (-y) == ^(x-1) &amp;^ ^(y-1) == ^(x-1) &amp; (y-1) == (y-1) &amp;^ (x-1)</span>
<a id="L766"></a><span class="ln">   766</span>				x1 := nat(nil).sub(x.abs, natOne)
<a id="L767"></a><span class="ln">   767</span>				y1 := nat(nil).sub(y.abs, natOne)
<a id="L768"></a><span class="ln">   768</span>				z.abs = z.abs.andNot(y1, x1)
<a id="L769"></a><span class="ln">   769</span>				z.neg = false
<a id="L770"></a><span class="ln">   770</span>				return z
<a id="L771"></a><span class="ln">   771</span>			}
<a id="L772"></a><span class="ln">   772</span>	
<a id="L773"></a><span class="ln">   773</span>			<span class="comment">// x &amp;^ y == x &amp;^ y</span>
<a id="L774"></a><span class="ln">   774</span>			z.abs = z.abs.andNot(x.abs, y.abs)
<a id="L775"></a><span class="ln">   775</span>			z.neg = false
<a id="L776"></a><span class="ln">   776</span>			return z
<a id="L777"></a><span class="ln">   777</span>		}
<a id="L778"></a><span class="ln">   778</span>	
<a id="L779"></a><span class="ln">   779</span>		if x.neg {
<a id="L780"></a><span class="ln">   780</span>			<span class="comment">// (-x) &amp;^ y == ^(x-1) &amp;^ y == ^(x-1) &amp; ^y == ^((x-1) | y) == -(((x-1) | y) + 1)</span>
<a id="L781"></a><span class="ln">   781</span>			x1 := nat(nil).sub(x.abs, natOne)
<a id="L782"></a><span class="ln">   782</span>			z.abs = z.abs.add(z.abs.or(x1, y.abs), natOne)
<a id="L783"></a><span class="ln">   783</span>			z.neg = true <span class="comment">// z cannot be zero if x is negative and y is positive</span>
<a id="L784"></a><span class="ln">   784</span>			return z
<a id="L785"></a><span class="ln">   785</span>		}
<a id="L786"></a><span class="ln">   786</span>	
<a id="L787"></a><span class="ln">   787</span>		<span class="comment">// x &amp;^ (-y) == x &amp;^ ^(y-1) == x &amp; (y-1)</span>
<a id="L788"></a><span class="ln">   788</span>		y1 := nat(nil).add(y.abs, natOne)
<a id="L789"></a><span class="ln">   789</span>		z.abs = z.abs.and(x.abs, y1)
<a id="L790"></a><span class="ln">   790</span>		z.neg = false
<a id="L791"></a><span class="ln">   791</span>		return z
<a id="L792"></a><span class="ln">   792</span>	}
<a id="L793"></a><span class="ln">   793</span>	
<a id="L794"></a><span class="ln">   794</span>	<span class="comment">// Or sets z = x | y and returns z.</span>
<a id="L795"></a><span class="ln">   795</span>	func (z *Int) Or(x, y *Int) *Int {
<a id="L796"></a><span class="ln">   796</span>		if x.neg == y.neg {
<a id="L797"></a><span class="ln">   797</span>			if x.neg {
<a id="L798"></a><span class="ln">   798</span>				<span class="comment">// (-x) | (-y) == ^(x-1) | ^(y-1) == ^((x-1) &amp; (y-1)) == -(((x-1) &amp; (y-1)) + 1)</span>
<a id="L799"></a><span class="ln">   799</span>				x1 := nat(nil).sub(x.abs, natOne)
<a id="L800"></a><span class="ln">   800</span>				y1 := nat(nil).sub(y.abs, natOne)
<a id="L801"></a><span class="ln">   801</span>				z.abs = z.abs.add(z.abs.and(x1, y1), natOne)
<a id="L802"></a><span class="ln">   802</span>				z.neg = true <span class="comment">// z cannot be zero if x and y are negative</span>
<a id="L803"></a><span class="ln">   803</span>				return z
<a id="L804"></a><span class="ln">   804</span>			}
<a id="L805"></a><span class="ln">   805</span>	
<a id="L806"></a><span class="ln">   806</span>			<span class="comment">// x | y == x | y</span>
<a id="L807"></a><span class="ln">   807</span>			z.abs = z.abs.or(x.abs, y.abs)
<a id="L808"></a><span class="ln">   808</span>			z.neg = false
<a id="L809"></a><span class="ln">   809</span>			return z
<a id="L810"></a><span class="ln">   810</span>		}
<a id="L811"></a><span class="ln">   811</span>	
<a id="L812"></a><span class="ln">   812</span>		<span class="comment">// x.neg != y.neg</span>
<a id="L813"></a><span class="ln">   813</span>		if x.neg {
<a id="L814"></a><span class="ln">   814</span>			x, y = y, x <span class="comment">// | is symmetric</span>
<a id="L815"></a><span class="ln">   815</span>		}
<a id="L816"></a><span class="ln">   816</span>	
<a id="L817"></a><span class="ln">   817</span>		<span class="comment">// x | (-y) == x | ^(y-1) == ^((y-1) &amp;^ x) == -(^((y-1) &amp;^ x) + 1)</span>
<a id="L818"></a><span class="ln">   818</span>		y1 := nat(nil).sub(y.abs, natOne)
<a id="L819"></a><span class="ln">   819</span>		z.abs = z.abs.add(z.abs.andNot(y1, x.abs), natOne)
<a id="L820"></a><span class="ln">   820</span>		z.neg = true <span class="comment">// z cannot be zero if one of x or y is negative</span>
<a id="L821"></a><span class="ln">   821</span>		return z
<a id="L822"></a><span class="ln">   822</span>	}
<a id="L823"></a><span class="ln">   823</span>	
<a id="L824"></a><span class="ln">   824</span>	<span class="comment">// Xor sets z = x ^ y and returns z.</span>
<a id="L825"></a><span class="ln">   825</span>	func (z *Int) Xor(x, y *Int) *Int {
<a id="L826"></a><span class="ln">   826</span>		if x.neg == y.neg {
<a id="L827"></a><span class="ln">   827</span>			if x.neg {
<a id="L828"></a><span class="ln">   828</span>				<span class="comment">// (-x) ^ (-y) == ^(x-1) ^ ^(y-1) == (x-1) ^ (y-1)</span>
<a id="L829"></a><span class="ln">   829</span>				x1 := nat(nil).sub(x.abs, natOne)
<a id="L830"></a><span class="ln">   830</span>				y1 := nat(nil).sub(y.abs, natOne)
<a id="L831"></a><span class="ln">   831</span>				z.abs = z.abs.xor(x1, y1)
<a id="L832"></a><span class="ln">   832</span>				z.neg = false
<a id="L833"></a><span class="ln">   833</span>				return z
<a id="L834"></a><span class="ln">   834</span>			}
<a id="L835"></a><span class="ln">   835</span>	
<a id="L836"></a><span class="ln">   836</span>			<span class="comment">// x ^ y == x ^ y</span>
<a id="L837"></a><span class="ln">   837</span>			z.abs = z.abs.xor(x.abs, y.abs)
<a id="L838"></a><span class="ln">   838</span>			z.neg = false
<a id="L839"></a><span class="ln">   839</span>			return z
<a id="L840"></a><span class="ln">   840</span>		}
<a id="L841"></a><span class="ln">   841</span>	
<a id="L842"></a><span class="ln">   842</span>		<span class="comment">// x.neg != y.neg</span>
<a id="L843"></a><span class="ln">   843</span>		if x.neg {
<a id="L844"></a><span class="ln">   844</span>			x, y = y, x <span class="comment">// ^ is symmetric</span>
<a id="L845"></a><span class="ln">   845</span>		}
<a id="L846"></a><span class="ln">   846</span>	
<a id="L847"></a><span class="ln">   847</span>		<span class="comment">// x ^ (-y) == x ^ ^(y-1) == ^(x ^ (y-1)) == -((x ^ (y-1)) + 1)</span>
<a id="L848"></a><span class="ln">   848</span>		y1 := nat(nil).sub(y.abs, natOne)
<a id="L849"></a><span class="ln">   849</span>		z.abs = z.abs.add(z.abs.xor(x.abs, y1), natOne)
<a id="L850"></a><span class="ln">   850</span>		z.neg = true <span class="comment">// z cannot be zero if only one of x or y is negative</span>
<a id="L851"></a><span class="ln">   851</span>		return z
<a id="L852"></a><span class="ln">   852</span>	}
<a id="L853"></a><span class="ln">   853</span>	
<a id="L854"></a><span class="ln">   854</span>	<span class="comment">// Not sets z = ^x and returns z.</span>
<a id="L855"></a><span class="ln">   855</span>	func (z *Int) Not(x *Int) *Int {
<a id="L856"></a><span class="ln">   856</span>		if x.neg {
<a id="L857"></a><span class="ln">   857</span>			<span class="comment">// ^(-x) == ^(^(x-1)) == x-1</span>
<a id="L858"></a><span class="ln">   858</span>			z.abs = z.abs.sub(x.abs, natOne)
<a id="L859"></a><span class="ln">   859</span>			z.neg = false
<a id="L860"></a><span class="ln">   860</span>			return z
<a id="L861"></a><span class="ln">   861</span>		}
<a id="L862"></a><span class="ln">   862</span>	
<a id="L863"></a><span class="ln">   863</span>		<span class="comment">// ^x == -x-1 == -(x+1)</span>
<a id="L864"></a><span class="ln">   864</span>		z.abs = z.abs.add(x.abs, natOne)
<a id="L865"></a><span class="ln">   865</span>		z.neg = true <span class="comment">// z cannot be zero if x is positive</span>
<a id="L866"></a><span class="ln">   866</span>		return z
<a id="L867"></a><span class="ln">   867</span>	}
<a id="L868"></a><span class="ln">   868</span>	
<a id="L869"></a><span class="ln">   869</span>	<span class="comment">// Gob codec version. Permits backward-compatible changes to the encoding.</span>
<a id="L870"></a><span class="ln">   870</span>	const intGobVersion byte = 1
<a id="L871"></a><span class="ln">   871</span>	
<a id="L872"></a><span class="ln">   872</span>	<span class="comment">// GobEncode implements the gob.GobEncoder interface.</span>
<a id="L873"></a><span class="ln">   873</span>	func (x *Int) GobEncode() ([]byte, error) {
<a id="L874"></a><span class="ln">   874</span>		buf := make([]byte, 1+len(x.abs)*_S) <span class="comment">// extra byte for version and sign bit</span>
<a id="L875"></a><span class="ln">   875</span>		i := x.abs.bytes(buf) - 1            <span class="comment">// i &gt;= 0</span>
<a id="L876"></a><span class="ln">   876</span>		b := intGobVersion &lt;&lt; 1              <span class="comment">// make space for sign bit</span>
<a id="L877"></a><span class="ln">   877</span>		if x.neg {
<a id="L878"></a><span class="ln">   878</span>			b |= 1
<a id="L879"></a><span class="ln">   879</span>		}
<a id="L880"></a><span class="ln">   880</span>		buf[i] = b
<a id="L881"></a><span class="ln">   881</span>		return buf[i:], nil
<a id="L882"></a><span class="ln">   882</span>	}
<a id="L883"></a><span class="ln">   883</span>	
<a id="L884"></a><span class="ln">   884</span>	<span class="comment">// GobDecode implements the gob.GobDecoder interface.</span>
<a id="L885"></a><span class="ln">   885</span>	func (z *Int) GobDecode(buf []byte) error {
<a id="L886"></a><span class="ln">   886</span>		if len(buf) == 0 {
<a id="L887"></a><span class="ln">   887</span>			return errors.New(&#34;Int.GobDecode: no data&#34;)
<a id="L888"></a><span class="ln">   888</span>		}
<a id="L889"></a><span class="ln">   889</span>		b := buf[0]
<a id="L890"></a><span class="ln">   890</span>		if b&gt;&gt;1 != intGobVersion {
<a id="L891"></a><span class="ln">   891</span>			return errors.New(fmt.Sprintf(&#34;Int.GobDecode: encoding version %d not supported&#34;, b&gt;&gt;1))
<a id="L892"></a><span class="ln">   892</span>		}
<a id="L893"></a><span class="ln">   893</span>		z.neg = b&amp;1 != 0
<a id="L894"></a><span class="ln">   894</span>		z.abs = z.abs.setBytes(buf[1:])
<a id="L895"></a><span class="ln">   895</span>		return nil
<a id="L896"></a><span class="ln">   896</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

