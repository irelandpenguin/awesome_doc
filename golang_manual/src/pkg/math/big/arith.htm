<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/math/big/arith.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/math/big/arith.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// This file provides Go implementations of elementary multi-precision</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// arithmetic operations on word vectors. Needed for platforms without</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// assembly implementations of these routines.</span>
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	package big
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// A Word represents a single digit of a multi-precision unsigned integer.</span>
<a id="L12"></a><span class="ln">    12</span>	type Word uintptr
<a id="L13"></a><span class="ln">    13</span>	
<a id="L14"></a><span class="ln">    14</span>	const (
<a id="L15"></a><span class="ln">    15</span>		<span class="comment">// Compute the size _S of a Word in bytes.</span>
<a id="L16"></a><span class="ln">    16</span>		_m    = ^Word(0)
<a id="L17"></a><span class="ln">    17</span>		_logS = _m&gt;&gt;8&amp;1 + _m&gt;&gt;16&amp;1 + _m&gt;&gt;32&amp;1
<a id="L18"></a><span class="ln">    18</span>		_S    = 1 &lt;&lt; _logS
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>		_W = _S &lt;&lt; 3 <span class="comment">// word size in bits</span>
<a id="L21"></a><span class="ln">    21</span>		_B = 1 &lt;&lt; _W <span class="comment">// digit base</span>
<a id="L22"></a><span class="ln">    22</span>		_M = _B - 1  <span class="comment">// digit mask</span>
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>		_W2 = _W / 2   <span class="comment">// half word size in bits</span>
<a id="L25"></a><span class="ln">    25</span>		_B2 = 1 &lt;&lt; _W2 <span class="comment">// half digit base</span>
<a id="L26"></a><span class="ln">    26</span>		_M2 = _B2 - 1  <span class="comment">// half digit mask</span>
<a id="L27"></a><span class="ln">    27</span>	)
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// ----------------------------------------------------------------------------</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// Elementary operations on words</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">//</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// These operations are used by the vector operations below.</span>
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// z1&lt;&lt;_W + z0 = x+y+c, with c == 0 or 1</span>
<a id="L35"></a><span class="ln">    35</span>	func addWW_g(x, y, c Word) (z1, z0 Word) {
<a id="L36"></a><span class="ln">    36</span>		yc := y + c
<a id="L37"></a><span class="ln">    37</span>		z0 = x + yc
<a id="L38"></a><span class="ln">    38</span>		if z0 &lt; x || yc &lt; y {
<a id="L39"></a><span class="ln">    39</span>			z1 = 1
<a id="L40"></a><span class="ln">    40</span>		}
<a id="L41"></a><span class="ln">    41</span>		return
<a id="L42"></a><span class="ln">    42</span>	}
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">// z1&lt;&lt;_W + z0 = x-y-c, with c == 0 or 1</span>
<a id="L45"></a><span class="ln">    45</span>	func subWW_g(x, y, c Word) (z1, z0 Word) {
<a id="L46"></a><span class="ln">    46</span>		yc := y + c
<a id="L47"></a><span class="ln">    47</span>		z0 = x - yc
<a id="L48"></a><span class="ln">    48</span>		if z0 &gt; x || yc &lt; y {
<a id="L49"></a><span class="ln">    49</span>			z1 = 1
<a id="L50"></a><span class="ln">    50</span>		}
<a id="L51"></a><span class="ln">    51</span>		return
<a id="L52"></a><span class="ln">    52</span>	}
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">// z1&lt;&lt;_W + z0 = x*y</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// Adapted from Warren, Hacker&#39;s Delight, p. 132.</span>
<a id="L56"></a><span class="ln">    56</span>	func mulWW_g(x, y Word) (z1, z0 Word) {
<a id="L57"></a><span class="ln">    57</span>		x0 := x &amp; _M2
<a id="L58"></a><span class="ln">    58</span>		x1 := x &gt;&gt; _W2
<a id="L59"></a><span class="ln">    59</span>		y0 := y &amp; _M2
<a id="L60"></a><span class="ln">    60</span>		y1 := y &gt;&gt; _W2
<a id="L61"></a><span class="ln">    61</span>		w0 := x0 * y0
<a id="L62"></a><span class="ln">    62</span>		t := x1*y0 + w0&gt;&gt;_W2
<a id="L63"></a><span class="ln">    63</span>		w1 := t &amp; _M2
<a id="L64"></a><span class="ln">    64</span>		w2 := t &gt;&gt; _W2
<a id="L65"></a><span class="ln">    65</span>		w1 += x0 * y1
<a id="L66"></a><span class="ln">    66</span>		z1 = x1*y1 + w2 + w1&gt;&gt;_W2
<a id="L67"></a><span class="ln">    67</span>		z0 = x * y
<a id="L68"></a><span class="ln">    68</span>		return
<a id="L69"></a><span class="ln">    69</span>	}
<a id="L70"></a><span class="ln">    70</span>	
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">// z1&lt;&lt;_W + z0 = x*y + c</span>
<a id="L72"></a><span class="ln">    72</span>	func mulAddWWW_g(x, y, c Word) (z1, z0 Word) {
<a id="L73"></a><span class="ln">    73</span>		z1, zz0 := mulWW(x, y)
<a id="L74"></a><span class="ln">    74</span>		if z0 = zz0 + c; z0 &lt; zz0 {
<a id="L75"></a><span class="ln">    75</span>			z1++
<a id="L76"></a><span class="ln">    76</span>		}
<a id="L77"></a><span class="ln">    77</span>		return
<a id="L78"></a><span class="ln">    78</span>	}
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// Length of x in bits.</span>
<a id="L81"></a><span class="ln">    81</span>	func bitLen_g(x Word) (n int) {
<a id="L82"></a><span class="ln">    82</span>		for ; x &gt;= 0x8000; x &gt;&gt;= 16 {
<a id="L83"></a><span class="ln">    83</span>			n += 16
<a id="L84"></a><span class="ln">    84</span>		}
<a id="L85"></a><span class="ln">    85</span>		if x &gt;= 0x80 {
<a id="L86"></a><span class="ln">    86</span>			x &gt;&gt;= 8
<a id="L87"></a><span class="ln">    87</span>			n += 8
<a id="L88"></a><span class="ln">    88</span>		}
<a id="L89"></a><span class="ln">    89</span>		if x &gt;= 0x8 {
<a id="L90"></a><span class="ln">    90</span>			x &gt;&gt;= 4
<a id="L91"></a><span class="ln">    91</span>			n += 4
<a id="L92"></a><span class="ln">    92</span>		}
<a id="L93"></a><span class="ln">    93</span>		if x &gt;= 0x2 {
<a id="L94"></a><span class="ln">    94</span>			x &gt;&gt;= 2
<a id="L95"></a><span class="ln">    95</span>			n += 2
<a id="L96"></a><span class="ln">    96</span>		}
<a id="L97"></a><span class="ln">    97</span>		if x &gt;= 0x1 {
<a id="L98"></a><span class="ln">    98</span>			n++
<a id="L99"></a><span class="ln">    99</span>		}
<a id="L100"></a><span class="ln">   100</span>		return
<a id="L101"></a><span class="ln">   101</span>	}
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>	<span class="comment">// log2 computes the integer binary logarithm of x.</span>
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">// The result is the integer n for which 2^n &lt;= x &lt; 2^(n+1).</span>
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// If x == 0, the result is -1.</span>
<a id="L106"></a><span class="ln">   106</span>	func log2(x Word) int {
<a id="L107"></a><span class="ln">   107</span>		return bitLen(x) - 1
<a id="L108"></a><span class="ln">   108</span>	}
<a id="L109"></a><span class="ln">   109</span>	
<a id="L110"></a><span class="ln">   110</span>	<span class="comment">// Number of leading zeros in x.</span>
<a id="L111"></a><span class="ln">   111</span>	func leadingZeros(x Word) uint {
<a id="L112"></a><span class="ln">   112</span>		return uint(_W - bitLen(x))
<a id="L113"></a><span class="ln">   113</span>	}
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>	<span class="comment">// q = (u1&lt;&lt;_W + u0 - r)/y</span>
<a id="L116"></a><span class="ln">   116</span>	<span class="comment">// Adapted from Warren, Hacker&#39;s Delight, p. 152.</span>
<a id="L117"></a><span class="ln">   117</span>	func divWW_g(u1, u0, v Word) (q, r Word) {
<a id="L118"></a><span class="ln">   118</span>		if u1 &gt;= v {
<a id="L119"></a><span class="ln">   119</span>			return 1&lt;&lt;_W - 1, 1&lt;&lt;_W - 1
<a id="L120"></a><span class="ln">   120</span>		}
<a id="L121"></a><span class="ln">   121</span>	
<a id="L122"></a><span class="ln">   122</span>		s := leadingZeros(v)
<a id="L123"></a><span class="ln">   123</span>		v &lt;&lt;= s
<a id="L124"></a><span class="ln">   124</span>	
<a id="L125"></a><span class="ln">   125</span>		vn1 := v &gt;&gt; _W2
<a id="L126"></a><span class="ln">   126</span>		vn0 := v &amp; _M2
<a id="L127"></a><span class="ln">   127</span>		un32 := u1&lt;&lt;s | u0&gt;&gt;(_W-s)
<a id="L128"></a><span class="ln">   128</span>		un10 := u0 &lt;&lt; s
<a id="L129"></a><span class="ln">   129</span>		un1 := un10 &gt;&gt; _W2
<a id="L130"></a><span class="ln">   130</span>		un0 := un10 &amp; _M2
<a id="L131"></a><span class="ln">   131</span>		q1 := un32 / vn1
<a id="L132"></a><span class="ln">   132</span>		rhat := un32 - q1*vn1
<a id="L133"></a><span class="ln">   133</span>	
<a id="L134"></a><span class="ln">   134</span>	again1:
<a id="L135"></a><span class="ln">   135</span>		if q1 &gt;= _B2 || q1*vn0 &gt; _B2*rhat+un1 {
<a id="L136"></a><span class="ln">   136</span>			q1--
<a id="L137"></a><span class="ln">   137</span>			rhat += vn1
<a id="L138"></a><span class="ln">   138</span>			if rhat &lt; _B2 {
<a id="L139"></a><span class="ln">   139</span>				goto again1
<a id="L140"></a><span class="ln">   140</span>			}
<a id="L141"></a><span class="ln">   141</span>		}
<a id="L142"></a><span class="ln">   142</span>	
<a id="L143"></a><span class="ln">   143</span>		un21 := un32*_B2 + un1 - q1*v
<a id="L144"></a><span class="ln">   144</span>		q0 := un21 / vn1
<a id="L145"></a><span class="ln">   145</span>		rhat = un21 - q0*vn1
<a id="L146"></a><span class="ln">   146</span>	
<a id="L147"></a><span class="ln">   147</span>	again2:
<a id="L148"></a><span class="ln">   148</span>		if q0 &gt;= _B2 || q0*vn0 &gt; _B2*rhat+un0 {
<a id="L149"></a><span class="ln">   149</span>			q0--
<a id="L150"></a><span class="ln">   150</span>			rhat += vn1
<a id="L151"></a><span class="ln">   151</span>			if rhat &lt; _B2 {
<a id="L152"></a><span class="ln">   152</span>				goto again2
<a id="L153"></a><span class="ln">   153</span>			}
<a id="L154"></a><span class="ln">   154</span>		}
<a id="L155"></a><span class="ln">   155</span>	
<a id="L156"></a><span class="ln">   156</span>		return q1*_B2 + q0, (un21*_B2 + un0 - q0*v) &gt;&gt; s
<a id="L157"></a><span class="ln">   157</span>	}
<a id="L158"></a><span class="ln">   158</span>	
<a id="L159"></a><span class="ln">   159</span>	func addVV_g(z, x, y []Word) (c Word) {
<a id="L160"></a><span class="ln">   160</span>		for i := range z {
<a id="L161"></a><span class="ln">   161</span>			c, z[i] = addWW_g(x[i], y[i], c)
<a id="L162"></a><span class="ln">   162</span>		}
<a id="L163"></a><span class="ln">   163</span>		return
<a id="L164"></a><span class="ln">   164</span>	}
<a id="L165"></a><span class="ln">   165</span>	
<a id="L166"></a><span class="ln">   166</span>	func subVV_g(z, x, y []Word) (c Word) {
<a id="L167"></a><span class="ln">   167</span>		for i := range z {
<a id="L168"></a><span class="ln">   168</span>			c, z[i] = subWW_g(x[i], y[i], c)
<a id="L169"></a><span class="ln">   169</span>		}
<a id="L170"></a><span class="ln">   170</span>		return
<a id="L171"></a><span class="ln">   171</span>	}
<a id="L172"></a><span class="ln">   172</span>	
<a id="L173"></a><span class="ln">   173</span>	func addVW_g(z, x []Word, y Word) (c Word) {
<a id="L174"></a><span class="ln">   174</span>		c = y
<a id="L175"></a><span class="ln">   175</span>		for i := range z {
<a id="L176"></a><span class="ln">   176</span>			c, z[i] = addWW_g(x[i], c, 0)
<a id="L177"></a><span class="ln">   177</span>		}
<a id="L178"></a><span class="ln">   178</span>		return
<a id="L179"></a><span class="ln">   179</span>	}
<a id="L180"></a><span class="ln">   180</span>	
<a id="L181"></a><span class="ln">   181</span>	func subVW_g(z, x []Word, y Word) (c Word) {
<a id="L182"></a><span class="ln">   182</span>		c = y
<a id="L183"></a><span class="ln">   183</span>		for i := range z {
<a id="L184"></a><span class="ln">   184</span>			c, z[i] = subWW_g(x[i], c, 0)
<a id="L185"></a><span class="ln">   185</span>		}
<a id="L186"></a><span class="ln">   186</span>		return
<a id="L187"></a><span class="ln">   187</span>	}
<a id="L188"></a><span class="ln">   188</span>	
<a id="L189"></a><span class="ln">   189</span>	func shlVU_g(z, x []Word, s uint) (c Word) {
<a id="L190"></a><span class="ln">   190</span>		if n := len(z); n &gt; 0 {
<a id="L191"></a><span class="ln">   191</span>			ŝ := _W - s
<a id="L192"></a><span class="ln">   192</span>			w1 := x[n-1]
<a id="L193"></a><span class="ln">   193</span>			c = w1 &gt;&gt; ŝ
<a id="L194"></a><span class="ln">   194</span>			for i := n - 1; i &gt; 0; i-- {
<a id="L195"></a><span class="ln">   195</span>				w := w1
<a id="L196"></a><span class="ln">   196</span>				w1 = x[i-1]
<a id="L197"></a><span class="ln">   197</span>				z[i] = w&lt;&lt;s | w1&gt;&gt;ŝ
<a id="L198"></a><span class="ln">   198</span>			}
<a id="L199"></a><span class="ln">   199</span>			z[0] = w1 &lt;&lt; s
<a id="L200"></a><span class="ln">   200</span>		}
<a id="L201"></a><span class="ln">   201</span>		return
<a id="L202"></a><span class="ln">   202</span>	}
<a id="L203"></a><span class="ln">   203</span>	
<a id="L204"></a><span class="ln">   204</span>	func shrVU_g(z, x []Word, s uint) (c Word) {
<a id="L205"></a><span class="ln">   205</span>		if n := len(z); n &gt; 0 {
<a id="L206"></a><span class="ln">   206</span>			ŝ := _W - s
<a id="L207"></a><span class="ln">   207</span>			w1 := x[0]
<a id="L208"></a><span class="ln">   208</span>			c = w1 &lt;&lt; ŝ
<a id="L209"></a><span class="ln">   209</span>			for i := 0; i &lt; n-1; i++ {
<a id="L210"></a><span class="ln">   210</span>				w := w1
<a id="L211"></a><span class="ln">   211</span>				w1 = x[i+1]
<a id="L212"></a><span class="ln">   212</span>				z[i] = w&gt;&gt;s | w1&lt;&lt;ŝ
<a id="L213"></a><span class="ln">   213</span>			}
<a id="L214"></a><span class="ln">   214</span>			z[n-1] = w1 &gt;&gt; s
<a id="L215"></a><span class="ln">   215</span>		}
<a id="L216"></a><span class="ln">   216</span>		return
<a id="L217"></a><span class="ln">   217</span>	}
<a id="L218"></a><span class="ln">   218</span>	
<a id="L219"></a><span class="ln">   219</span>	func mulAddVWW_g(z, x []Word, y, r Word) (c Word) {
<a id="L220"></a><span class="ln">   220</span>		c = r
<a id="L221"></a><span class="ln">   221</span>		for i := range z {
<a id="L222"></a><span class="ln">   222</span>			c, z[i] = mulAddWWW_g(x[i], y, c)
<a id="L223"></a><span class="ln">   223</span>		}
<a id="L224"></a><span class="ln">   224</span>		return
<a id="L225"></a><span class="ln">   225</span>	}
<a id="L226"></a><span class="ln">   226</span>	
<a id="L227"></a><span class="ln">   227</span>	func addMulVVW_g(z, x []Word, y Word) (c Word) {
<a id="L228"></a><span class="ln">   228</span>		for i := range z {
<a id="L229"></a><span class="ln">   229</span>			z1, z0 := mulAddWWW_g(x[i], y, z[i])
<a id="L230"></a><span class="ln">   230</span>			c, z[i] = addWW_g(z0, c, 0)
<a id="L231"></a><span class="ln">   231</span>			c += z1
<a id="L232"></a><span class="ln">   232</span>		}
<a id="L233"></a><span class="ln">   233</span>		return
<a id="L234"></a><span class="ln">   234</span>	}
<a id="L235"></a><span class="ln">   235</span>	
<a id="L236"></a><span class="ln">   236</span>	func divWVW_g(z []Word, xn Word, x []Word, y Word) (r Word) {
<a id="L237"></a><span class="ln">   237</span>		r = xn
<a id="L238"></a><span class="ln">   238</span>		for i := len(z) - 1; i &gt;= 0; i-- {
<a id="L239"></a><span class="ln">   239</span>			z[i], r = divWW_g(r, x[i], y)
<a id="L240"></a><span class="ln">   240</span>		}
<a id="L241"></a><span class="ln">   241</span>		return
<a id="L242"></a><span class="ln">   242</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

