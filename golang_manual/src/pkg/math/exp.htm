<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/math/exp.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/math/exp.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package math
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// Exp returns e**x, the base-e exponential of x.</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">//</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// Special cases are:</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">//	Exp(+Inf) = +Inf</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">//	Exp(NaN) = NaN</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// Very large values overflow to 0 or +Inf.</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// Very small values underflow to 1.</span>
<a id="L14"></a><span class="ln">    14</span>	func Exp(x float64) float64
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// The original C code, the long comment, and the constants</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// below are from FreeBSD&#39;s /usr/src/lib/msun/src/e_exp.c</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// and came with this notice.  The go code is a simplified</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// version of the original C.</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">//</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// ====================================================</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">//</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// Permission to use, copy, modify, and distribute this</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// software is freely granted, provided that this notice</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// is preserved.</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// ====================================================</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">//</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">//</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// exp(x)</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// Returns the exponential of x.</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">//</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// Method</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">//   1. Argument reduction:</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//      Reduce x to an r so that |r| &lt;= 0.5*ln2 ~ 0.34658.</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//      Given x, find r and integer k such that</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">//</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//               x = k*ln2 + r,  |r| &lt;= 0.5*ln2.</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">//</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">//      Here r will be represented as r = hi-lo for better</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">//      accuracy.</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">//</span>
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">//   2. Approximation of exp(r) by a special rational function on</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">//      the interval [0,0.34658]:</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">//      Write</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">//          R(r**2) = r*(exp(r)+1)/(exp(r)-1) = 2 + r*r/6 - r**4/360 + ...</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">//      We use a special Remes algorithm on [0,0.34658] to generate</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">//      a polynomial of degree 5 to approximate R. The maximum error</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">//      of this polynomial approximation is bounded by 2**-59. In</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">//      other words,</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">//          R(z) ~ 2.0 + P1*z + P2*z**2 + P3*z**3 + P4*z**4 + P5*z**5</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">//      (where z=r*r, and the values of P1 to P5 are listed below)</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">//      and</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">//          |                  5          |     -59</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">//          | 2.0+P1*z+...+P5*z   -  R(z) | &lt;= 2</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">//          |                             |</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">//      The computation of exp(r) thus becomes</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">//                             2*r</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">//              exp(r) = 1 + -------</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">//                            R - r</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">//                                 r*R1(r)</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">//                     = 1 + r + ----------- (for better accuracy)</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">//                                2 - R1(r)</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">//      where</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">//                               2       4             10</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">//              R1(r) = r - (P1*r  + P2*r  + ... + P5*r   ).</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">//</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">//   3. Scale back to obtain exp(x):</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">//      From step 1, we have</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">//         exp(x) = 2**k * exp(r)</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">//</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">// Special cases:</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">//      exp(INF) is INF, exp(NaN) is NaN;</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">//      exp(-INF) is 0, and</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">//      for finite argument, only exp(0)=1 is exact.</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">//</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// Accuracy:</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">//      according to an error analysis, the error is always less than</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">//      1 ulp (unit in the last place).</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">//</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// Misc. info.</span>
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">//      For IEEE double</span>
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">//          if x &gt;  7.09782712893383973096e+02 then exp(x) overflow</span>
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">//          if x &lt; -7.45133219101941108420e+02 then exp(x) underflow</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">//</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// Constants:</span>
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">// The hexadecimal values are the intended ones for the following</span>
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// constants. The decimal values may be used, provided that the</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">// compiler will convert from decimal to binary accurately enough</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// to produce the hexadecimal values shown.</span>
<a id="L91"></a><span class="ln">    91</span>	
<a id="L92"></a><span class="ln">    92</span>	func exp(x float64) float64 {
<a id="L93"></a><span class="ln">    93</span>		const (
<a id="L94"></a><span class="ln">    94</span>			Ln2Hi = 6.93147180369123816490e-01
<a id="L95"></a><span class="ln">    95</span>			Ln2Lo = 1.90821492927058770002e-10
<a id="L96"></a><span class="ln">    96</span>			Log2e = 1.44269504088896338700e+00
<a id="L97"></a><span class="ln">    97</span>	
<a id="L98"></a><span class="ln">    98</span>			Overflow  = 7.09782712893383973096e+02
<a id="L99"></a><span class="ln">    99</span>			Underflow = -7.45133219101941108420e+02
<a id="L100"></a><span class="ln">   100</span>			NearZero  = 1.0 / (1 &lt;&lt; 28) <span class="comment">// 2**-28</span>
<a id="L101"></a><span class="ln">   101</span>		)
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>		<span class="comment">// special cases</span>
<a id="L104"></a><span class="ln">   104</span>		switch {
<a id="L105"></a><span class="ln">   105</span>		case IsNaN(x) || IsInf(x, 1):
<a id="L106"></a><span class="ln">   106</span>			return x
<a id="L107"></a><span class="ln">   107</span>		case IsInf(x, -1):
<a id="L108"></a><span class="ln">   108</span>			return 0
<a id="L109"></a><span class="ln">   109</span>		case x &gt; Overflow:
<a id="L110"></a><span class="ln">   110</span>			return Inf(1)
<a id="L111"></a><span class="ln">   111</span>		case x &lt; Underflow:
<a id="L112"></a><span class="ln">   112</span>			return 0
<a id="L113"></a><span class="ln">   113</span>		case -NearZero &lt; x &amp;&amp; x &lt; NearZero:
<a id="L114"></a><span class="ln">   114</span>			return 1 + x
<a id="L115"></a><span class="ln">   115</span>		}
<a id="L116"></a><span class="ln">   116</span>	
<a id="L117"></a><span class="ln">   117</span>		<span class="comment">// reduce; computed as r = hi - lo for extra precision.</span>
<a id="L118"></a><span class="ln">   118</span>		var k int
<a id="L119"></a><span class="ln">   119</span>		switch {
<a id="L120"></a><span class="ln">   120</span>		case x &lt; 0:
<a id="L121"></a><span class="ln">   121</span>			k = int(Log2e*x - 0.5)
<a id="L122"></a><span class="ln">   122</span>		case x &gt; 0:
<a id="L123"></a><span class="ln">   123</span>			k = int(Log2e*x + 0.5)
<a id="L124"></a><span class="ln">   124</span>		}
<a id="L125"></a><span class="ln">   125</span>		hi := x - float64(k)*Ln2Hi
<a id="L126"></a><span class="ln">   126</span>		lo := float64(k) * Ln2Lo
<a id="L127"></a><span class="ln">   127</span>	
<a id="L128"></a><span class="ln">   128</span>		<span class="comment">// compute</span>
<a id="L129"></a><span class="ln">   129</span>		return expmulti(hi, lo, k)
<a id="L130"></a><span class="ln">   130</span>	}
<a id="L131"></a><span class="ln">   131</span>	
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">// Exp2 returns 2**x, the base-2 exponential of x.</span>
<a id="L133"></a><span class="ln">   133</span>	<span class="comment">//</span>
<a id="L134"></a><span class="ln">   134</span>	<span class="comment">// Special cases are the same as Exp.</span>
<a id="L135"></a><span class="ln">   135</span>	func Exp2(x float64) float64
<a id="L136"></a><span class="ln">   136</span>	
<a id="L137"></a><span class="ln">   137</span>	func exp2(x float64) float64 {
<a id="L138"></a><span class="ln">   138</span>		const (
<a id="L139"></a><span class="ln">   139</span>			Ln2Hi = 6.93147180369123816490e-01
<a id="L140"></a><span class="ln">   140</span>			Ln2Lo = 1.90821492927058770002e-10
<a id="L141"></a><span class="ln">   141</span>	
<a id="L142"></a><span class="ln">   142</span>			Overflow  = 1.0239999999999999e+03
<a id="L143"></a><span class="ln">   143</span>			Underflow = -1.0740e+03
<a id="L144"></a><span class="ln">   144</span>		)
<a id="L145"></a><span class="ln">   145</span>	
<a id="L146"></a><span class="ln">   146</span>		<span class="comment">// special cases</span>
<a id="L147"></a><span class="ln">   147</span>		switch {
<a id="L148"></a><span class="ln">   148</span>		case IsNaN(x) || IsInf(x, 1):
<a id="L149"></a><span class="ln">   149</span>			return x
<a id="L150"></a><span class="ln">   150</span>		case IsInf(x, -1):
<a id="L151"></a><span class="ln">   151</span>			return 0
<a id="L152"></a><span class="ln">   152</span>		case x &gt; Overflow:
<a id="L153"></a><span class="ln">   153</span>			return Inf(1)
<a id="L154"></a><span class="ln">   154</span>		case x &lt; Underflow:
<a id="L155"></a><span class="ln">   155</span>			return 0
<a id="L156"></a><span class="ln">   156</span>		}
<a id="L157"></a><span class="ln">   157</span>	
<a id="L158"></a><span class="ln">   158</span>		<span class="comment">// argument reduction; x = r×lg(e) + k with |r| ≤ ln(2)/2.</span>
<a id="L159"></a><span class="ln">   159</span>		<span class="comment">// computed as r = hi - lo for extra precision.</span>
<a id="L160"></a><span class="ln">   160</span>		var k int
<a id="L161"></a><span class="ln">   161</span>		switch {
<a id="L162"></a><span class="ln">   162</span>		case x &gt; 0:
<a id="L163"></a><span class="ln">   163</span>			k = int(x + 0.5)
<a id="L164"></a><span class="ln">   164</span>		case x &lt; 0:
<a id="L165"></a><span class="ln">   165</span>			k = int(x - 0.5)
<a id="L166"></a><span class="ln">   166</span>		}
<a id="L167"></a><span class="ln">   167</span>		t := x - float64(k)
<a id="L168"></a><span class="ln">   168</span>		hi := t * Ln2Hi
<a id="L169"></a><span class="ln">   169</span>		lo := -t * Ln2Lo
<a id="L170"></a><span class="ln">   170</span>	
<a id="L171"></a><span class="ln">   171</span>		<span class="comment">// compute</span>
<a id="L172"></a><span class="ln">   172</span>		return expmulti(hi, lo, k)
<a id="L173"></a><span class="ln">   173</span>	}
<a id="L174"></a><span class="ln">   174</span>	
<a id="L175"></a><span class="ln">   175</span>	<span class="comment">// exp1 returns e**r × 2**k where r = hi - lo and |r| ≤ ln(2)/2.</span>
<a id="L176"></a><span class="ln">   176</span>	func expmulti(hi, lo float64, k int) float64 {
<a id="L177"></a><span class="ln">   177</span>		const (
<a id="L178"></a><span class="ln">   178</span>			P1 = 1.66666666666666019037e-01  <span class="comment">/* 0x3FC55555; 0x5555553E */</span>
<a id="L179"></a><span class="ln">   179</span>			P2 = -2.77777777770155933842e-03 <span class="comment">/* 0xBF66C16C; 0x16BEBD93 */</span>
<a id="L180"></a><span class="ln">   180</span>			P3 = 6.61375632143793436117e-05  <span class="comment">/* 0x3F11566A; 0xAF25DE2C */</span>
<a id="L181"></a><span class="ln">   181</span>			P4 = -1.65339022054652515390e-06 <span class="comment">/* 0xBEBBBD41; 0xC5D26BF1 */</span>
<a id="L182"></a><span class="ln">   182</span>			P5 = 4.13813679705723846039e-08  <span class="comment">/* 0x3E663769; 0x72BEA4D0 */</span>
<a id="L183"></a><span class="ln">   183</span>		)
<a id="L184"></a><span class="ln">   184</span>	
<a id="L185"></a><span class="ln">   185</span>		r := hi - lo
<a id="L186"></a><span class="ln">   186</span>		t := r * r
<a id="L187"></a><span class="ln">   187</span>		c := r - t*(P1+t*(P2+t*(P3+t*(P4+t*P5))))
<a id="L188"></a><span class="ln">   188</span>		y := 1 - ((lo - (r*c)/(2-c)) - hi)
<a id="L189"></a><span class="ln">   189</span>		<span class="comment">// TODO(rsc): make sure Ldexp can handle boundary k</span>
<a id="L190"></a><span class="ln">   190</span>		return Ldexp(y, k)
<a id="L191"></a><span class="ln">   191</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

