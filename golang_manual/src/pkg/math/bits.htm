<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/math/bits.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/math/bits.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package math
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	const (
<a id="L8"></a><span class="ln">     8</span>		uvnan    = 0x7FF0000000000001
<a id="L9"></a><span class="ln">     9</span>		uvinf    = 0x7FF0000000000000
<a id="L10"></a><span class="ln">    10</span>		uvneginf = 0xFFF0000000000000
<a id="L11"></a><span class="ln">    11</span>		mask     = 0x7FF
<a id="L12"></a><span class="ln">    12</span>		shift    = 64 - 11 - 1
<a id="L13"></a><span class="ln">    13</span>		bias     = 1023
<a id="L14"></a><span class="ln">    14</span>	)
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// Inf returns positive infinity if sign &gt;= 0, negative infinity if sign &lt; 0.</span>
<a id="L17"></a><span class="ln">    17</span>	func Inf(sign int) float64 {
<a id="L18"></a><span class="ln">    18</span>		var v uint64
<a id="L19"></a><span class="ln">    19</span>		if sign &gt;= 0 {
<a id="L20"></a><span class="ln">    20</span>			v = uvinf
<a id="L21"></a><span class="ln">    21</span>		} else {
<a id="L22"></a><span class="ln">    22</span>			v = uvneginf
<a id="L23"></a><span class="ln">    23</span>		}
<a id="L24"></a><span class="ln">    24</span>		return Float64frombits(v)
<a id="L25"></a><span class="ln">    25</span>	}
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// NaN returns an IEEE 754 ``not-a-number&#39;&#39; value.</span>
<a id="L28"></a><span class="ln">    28</span>	func NaN() float64 { return Float64frombits(uvnan) }
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// IsNaN returns whether f is an IEEE 754 ``not-a-number&#39;&#39; value.</span>
<a id="L31"></a><span class="ln">    31</span>	func IsNaN(f float64) (is bool) {
<a id="L32"></a><span class="ln">    32</span>		<span class="comment">// IEEE 754 says that only NaNs satisfy f != f.</span>
<a id="L33"></a><span class="ln">    33</span>		<span class="comment">// To avoid the floating-point hardware, could use:</span>
<a id="L34"></a><span class="ln">    34</span>		<span class="comment">//	x := Float64bits(f);</span>
<a id="L35"></a><span class="ln">    35</span>		<span class="comment">//	return uint32(x&gt;&gt;shift)&amp;mask == mask &amp;&amp; x != uvinf &amp;&amp; x != uvneginf</span>
<a id="L36"></a><span class="ln">    36</span>		return f != f
<a id="L37"></a><span class="ln">    37</span>	}
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// IsInf returns whether f is an infinity, according to sign.</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// If sign &gt; 0, IsInf returns whether f is positive infinity.</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// If sign &lt; 0, IsInf returns whether f is negative infinity.</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">// If sign == 0, IsInf returns whether f is either infinity.</span>
<a id="L43"></a><span class="ln">    43</span>	func IsInf(f float64, sign int) bool {
<a id="L44"></a><span class="ln">    44</span>		<span class="comment">// Test for infinity by comparing against maximum float.</span>
<a id="L45"></a><span class="ln">    45</span>		<span class="comment">// To avoid the floating-point hardware, could use:</span>
<a id="L46"></a><span class="ln">    46</span>		<span class="comment">//	x := Float64bits(f);</span>
<a id="L47"></a><span class="ln">    47</span>		<span class="comment">//	return sign &gt;= 0 &amp;&amp; x == uvinf || sign &lt;= 0 &amp;&amp; x == uvneginf;</span>
<a id="L48"></a><span class="ln">    48</span>		return sign &gt;= 0 &amp;&amp; f &gt; MaxFloat64 || sign &lt;= 0 &amp;&amp; f &lt; -MaxFloat64
<a id="L49"></a><span class="ln">    49</span>	}
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// normalize returns a normal number y and exponent exp</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// satisfying x == y Ã— 2**exp. It assumes x is finite and non-zero.</span>
<a id="L53"></a><span class="ln">    53</span>	func normalize(x float64) (y float64, exp int) {
<a id="L54"></a><span class="ln">    54</span>		const SmallestNormal = 2.2250738585072014e-308 <span class="comment">// 2**-1022</span>
<a id="L55"></a><span class="ln">    55</span>		if Abs(x) &lt; SmallestNormal {
<a id="L56"></a><span class="ln">    56</span>			return x * (1 &lt;&lt; 52), -52
<a id="L57"></a><span class="ln">    57</span>		}
<a id="L58"></a><span class="ln">    58</span>		return x, 0
<a id="L59"></a><span class="ln">    59</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

