<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/math/log1p.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/math/log1p.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package math
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// The original C code, the long comment, and the constants</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// below are from FreeBSD&#39;s /usr/src/lib/msun/src/s_log1p.c</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// and came with this notice.  The go code is a simplified</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// version of the original C.</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">//</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// ====================================================</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">//</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// Developed at SunPro, a Sun Microsystems, Inc. business.</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// Permission to use, copy, modify, and distribute this</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// software is freely granted, provided that this notice</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// is preserved.</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// ====================================================</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">//</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">//</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// double log1p(double x)</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">//</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// Method :</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">//   1. Argument Reduction: find k and f such that</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">//                      1+x = 2**k * (1+f),</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">//         where  sqrt(2)/2 &lt; 1+f &lt; sqrt(2) .</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">//</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">//      Note. If k=0, then f=x is exact. However, if k!=0, then f</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">//      may not be representable exactly. In that case, a correction</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">//      term is need. Let u=1+x rounded. Let c = (1+x)-u, then</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">//      log(1+x) - log(u) ~ c/u. Thus, we proceed to compute log(u),</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">//      and add back the correction term c/u.</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">//      (Note: when x &gt; 2**53, one can simply return log(x))</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//   2. Approximation of log1p(f).</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">//      Let s = f/(2+f) ; based on log(1+f) = log(1+s) - log(1-s)</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//               = 2s + 2/3 s**3 + 2/5 s**5 + .....,</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">//               = 2s + s*R</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">//      We use a special Reme algorithm on [0,0.1716] to generate</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">//      a polynomial of degree 14 to approximate R The maximum error</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">//      of this polynomial approximation is bounded by 2**-58.45. In</span>
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">//      other words,</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">//                      2      4      6      8      10      12      14</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">//          R(z) ~ Lp1*s +Lp2*s +Lp3*s +Lp4*s +Lp5*s  +Lp6*s  +Lp7*s</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">//      (the values of Lp1 to Lp7 are listed in the program)</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">//      and</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">//          |      2          14          |     -58.45</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">//          | Lp1*s +...+Lp7*s    -  R(z) | &lt;= 2</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">//          |                             |</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">//      Note that 2s = f - s*f = f - hfsq + s*hfsq, where hfsq = f*f/2.</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">//      In order to guarantee error in log below 1ulp, we compute log</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">//      by</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">//              log1p(f) = f - (hfsq - s*(hfsq+R)).</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">//</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">//   3. Finally, log1p(x) = k*ln2 + log1p(f).</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">//                        = k*ln2_hi+(f-(hfsq-(s*(hfsq+R)+k*ln2_lo)))</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">//      Here ln2 is split into two floating point number:</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">//                   ln2_hi + ln2_lo,</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">//      where n*ln2_hi is always exact for |n| &lt; 2000.</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">//</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">// Special cases:</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">//      log1p(x) is NaN with signal if x &lt; -1 (including -INF) ;</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">//      log1p(+INF) is +INF; log1p(-1) is -INF with signal;</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">//      log1p(NaN) is that NaN with no signal.</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">//</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// Accuracy:</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">//      according to an error analysis, the error is always less than</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">//      1 ulp (unit in the last place).</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">//</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">// Constants:</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">// The hexadecimal values are the intended ones for the following</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// constants. The decimal values may be used, provided that the</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">// compiler will convert from decimal to binary accurately enough</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">// to produce the hexadecimal values shown.</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">//</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// Note: Assuming log() return accurate answer, the following</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">//       algorithm can be used to compute log1p(x) to within a few ULP:</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">//</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">//              u = 1+x;</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">//              if(u==1.0) return x ; else</span>
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">//                         return log(u)*(x/(u-1.0));</span>
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">//</span>
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">//       See HP-15C Advanced Functions Handbook, p.193.</span>
<a id="L85"></a><span class="ln">    85</span>	
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// Log1p returns the natural logarithm of 1 plus its argument x.</span>
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">// It is more accurate than Log(1 + x) when x is near zero.</span>
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">//</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">// Special cases are:</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">//	Log1p(+Inf) = +Inf</span>
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">//	Log1p(±0) = ±0</span>
<a id="L92"></a><span class="ln">    92</span>	<span class="comment">//	Log1p(-1) = -Inf</span>
<a id="L93"></a><span class="ln">    93</span>	<span class="comment">//	Log1p(x &lt; -1) = NaN</span>
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">//	Log1p(NaN) = NaN</span>
<a id="L95"></a><span class="ln">    95</span>	func Log1p(x float64) float64
<a id="L96"></a><span class="ln">    96</span>	
<a id="L97"></a><span class="ln">    97</span>	func log1p(x float64) float64 {
<a id="L98"></a><span class="ln">    98</span>		const (
<a id="L99"></a><span class="ln">    99</span>			Sqrt2M1     = 4.142135623730950488017e-01  <span class="comment">// Sqrt(2)-1 = 0x3fda827999fcef34</span>
<a id="L100"></a><span class="ln">   100</span>			Sqrt2HalfM1 = -2.928932188134524755992e-01 <span class="comment">// Sqrt(2)/2-1 = 0xbfd2bec333018866</span>
<a id="L101"></a><span class="ln">   101</span>			Small       = 1.0 / (1 &lt;&lt; 29)              <span class="comment">// 2**-29 = 0x3e20000000000000</span>
<a id="L102"></a><span class="ln">   102</span>			Tiny        = 1.0 / (1 &lt;&lt; 54)              <span class="comment">// 2**-54</span>
<a id="L103"></a><span class="ln">   103</span>			Two53       = 1 &lt;&lt; 53                      <span class="comment">// 2**53</span>
<a id="L104"></a><span class="ln">   104</span>			Ln2Hi       = 6.93147180369123816490e-01   <span class="comment">// 3fe62e42fee00000</span>
<a id="L105"></a><span class="ln">   105</span>			Ln2Lo       = 1.90821492927058770002e-10   <span class="comment">// 3dea39ef35793c76</span>
<a id="L106"></a><span class="ln">   106</span>			Lp1         = 6.666666666666735130e-01     <span class="comment">// 3FE5555555555593</span>
<a id="L107"></a><span class="ln">   107</span>			Lp2         = 3.999999999940941908e-01     <span class="comment">// 3FD999999997FA04</span>
<a id="L108"></a><span class="ln">   108</span>			Lp3         = 2.857142874366239149e-01     <span class="comment">// 3FD2492494229359</span>
<a id="L109"></a><span class="ln">   109</span>			Lp4         = 2.222219843214978396e-01     <span class="comment">// 3FCC71C51D8E78AF</span>
<a id="L110"></a><span class="ln">   110</span>			Lp5         = 1.818357216161805012e-01     <span class="comment">// 3FC7466496CB03DE</span>
<a id="L111"></a><span class="ln">   111</span>			Lp6         = 1.531383769920937332e-01     <span class="comment">// 3FC39A09D078C69F</span>
<a id="L112"></a><span class="ln">   112</span>			Lp7         = 1.479819860511658591e-01     <span class="comment">// 3FC2F112DF3E5244</span>
<a id="L113"></a><span class="ln">   113</span>		)
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>		<span class="comment">// special cases</span>
<a id="L116"></a><span class="ln">   116</span>		switch {
<a id="L117"></a><span class="ln">   117</span>		case x &lt; -1 || IsNaN(x): <span class="comment">// includes -Inf</span>
<a id="L118"></a><span class="ln">   118</span>			return NaN()
<a id="L119"></a><span class="ln">   119</span>		case x == -1:
<a id="L120"></a><span class="ln">   120</span>			return Inf(-1)
<a id="L121"></a><span class="ln">   121</span>		case IsInf(x, 1):
<a id="L122"></a><span class="ln">   122</span>			return Inf(1)
<a id="L123"></a><span class="ln">   123</span>		}
<a id="L124"></a><span class="ln">   124</span>	
<a id="L125"></a><span class="ln">   125</span>		absx := x
<a id="L126"></a><span class="ln">   126</span>		if absx &lt; 0 {
<a id="L127"></a><span class="ln">   127</span>			absx = -absx
<a id="L128"></a><span class="ln">   128</span>		}
<a id="L129"></a><span class="ln">   129</span>	
<a id="L130"></a><span class="ln">   130</span>		var f float64
<a id="L131"></a><span class="ln">   131</span>		var iu uint64
<a id="L132"></a><span class="ln">   132</span>		k := 1
<a id="L133"></a><span class="ln">   133</span>		if absx &lt; Sqrt2M1 { <span class="comment">//  |x| &lt; Sqrt(2)-1</span>
<a id="L134"></a><span class="ln">   134</span>			if absx &lt; Small { <span class="comment">// |x| &lt; 2**-29</span>
<a id="L135"></a><span class="ln">   135</span>				if absx &lt; Tiny { <span class="comment">// |x| &lt; 2**-54</span>
<a id="L136"></a><span class="ln">   136</span>					return x
<a id="L137"></a><span class="ln">   137</span>				}
<a id="L138"></a><span class="ln">   138</span>				return x - x*x*0.5
<a id="L139"></a><span class="ln">   139</span>			}
<a id="L140"></a><span class="ln">   140</span>			if x &gt; Sqrt2HalfM1 { <span class="comment">// Sqrt(2)/2-1 &lt; x</span>
<a id="L141"></a><span class="ln">   141</span>				<span class="comment">// (Sqrt(2)/2-1) &lt; x &lt; (Sqrt(2)-1)</span>
<a id="L142"></a><span class="ln">   142</span>				k = 0
<a id="L143"></a><span class="ln">   143</span>				f = x
<a id="L144"></a><span class="ln">   144</span>				iu = 1
<a id="L145"></a><span class="ln">   145</span>			}
<a id="L146"></a><span class="ln">   146</span>		}
<a id="L147"></a><span class="ln">   147</span>		var c float64
<a id="L148"></a><span class="ln">   148</span>		if k != 0 {
<a id="L149"></a><span class="ln">   149</span>			var u float64
<a id="L150"></a><span class="ln">   150</span>			if absx &lt; Two53 { <span class="comment">// 1&lt;&lt;53</span>
<a id="L151"></a><span class="ln">   151</span>				u = 1.0 + x
<a id="L152"></a><span class="ln">   152</span>				iu = Float64bits(u)
<a id="L153"></a><span class="ln">   153</span>				k = int((iu &gt;&gt; 52) - 1023)
<a id="L154"></a><span class="ln">   154</span>				if k &gt; 0 {
<a id="L155"></a><span class="ln">   155</span>					c = 1.0 - (u - x)
<a id="L156"></a><span class="ln">   156</span>				} else {
<a id="L157"></a><span class="ln">   157</span>					c = x - (u - 1.0) <span class="comment">// correction term</span>
<a id="L158"></a><span class="ln">   158</span>					c /= u
<a id="L159"></a><span class="ln">   159</span>				}
<a id="L160"></a><span class="ln">   160</span>			} else {
<a id="L161"></a><span class="ln">   161</span>				u = x
<a id="L162"></a><span class="ln">   162</span>				iu = Float64bits(u)
<a id="L163"></a><span class="ln">   163</span>				k = int((iu &gt;&gt; 52) - 1023)
<a id="L164"></a><span class="ln">   164</span>				c = 0
<a id="L165"></a><span class="ln">   165</span>			}
<a id="L166"></a><span class="ln">   166</span>			iu &amp;= 0x000fffffffffffff
<a id="L167"></a><span class="ln">   167</span>			if iu &lt; 0x0006a09e667f3bcd { <span class="comment">// mantissa of Sqrt(2)</span>
<a id="L168"></a><span class="ln">   168</span>				u = Float64frombits(iu | 0x3ff0000000000000) <span class="comment">// normalize u</span>
<a id="L169"></a><span class="ln">   169</span>			} else {
<a id="L170"></a><span class="ln">   170</span>				k += 1
<a id="L171"></a><span class="ln">   171</span>				u = Float64frombits(iu | 0x3fe0000000000000) <span class="comment">// normalize u/2</span>
<a id="L172"></a><span class="ln">   172</span>				iu = (0x0010000000000000 - iu) &gt;&gt; 2
<a id="L173"></a><span class="ln">   173</span>			}
<a id="L174"></a><span class="ln">   174</span>			f = u - 1.0 <span class="comment">// Sqrt(2)/2 &lt; u &lt; Sqrt(2)</span>
<a id="L175"></a><span class="ln">   175</span>		}
<a id="L176"></a><span class="ln">   176</span>		hfsq := 0.5 * f * f
<a id="L177"></a><span class="ln">   177</span>		var s, R, z float64
<a id="L178"></a><span class="ln">   178</span>		if iu == 0 { <span class="comment">// |f| &lt; 2**-20</span>
<a id="L179"></a><span class="ln">   179</span>			if f == 0 {
<a id="L180"></a><span class="ln">   180</span>				if k == 0 {
<a id="L181"></a><span class="ln">   181</span>					return 0
<a id="L182"></a><span class="ln">   182</span>				} else {
<a id="L183"></a><span class="ln">   183</span>					c += float64(k) * Ln2Lo
<a id="L184"></a><span class="ln">   184</span>					return float64(k)*Ln2Hi + c
<a id="L185"></a><span class="ln">   185</span>				}
<a id="L186"></a><span class="ln">   186</span>			}
<a id="L187"></a><span class="ln">   187</span>			R = hfsq * (1.0 - 0.66666666666666666*f) <span class="comment">// avoid division</span>
<a id="L188"></a><span class="ln">   188</span>			if k == 0 {
<a id="L189"></a><span class="ln">   189</span>				return f - R
<a id="L190"></a><span class="ln">   190</span>			}
<a id="L191"></a><span class="ln">   191</span>			return float64(k)*Ln2Hi - ((R - (float64(k)*Ln2Lo + c)) - f)
<a id="L192"></a><span class="ln">   192</span>		}
<a id="L193"></a><span class="ln">   193</span>		s = f / (2.0 + f)
<a id="L194"></a><span class="ln">   194</span>		z = s * s
<a id="L195"></a><span class="ln">   195</span>		R = z * (Lp1 + z*(Lp2+z*(Lp3+z*(Lp4+z*(Lp5+z*(Lp6+z*Lp7))))))
<a id="L196"></a><span class="ln">   196</span>		if k == 0 {
<a id="L197"></a><span class="ln">   197</span>			return f - (hfsq - s*(hfsq+R))
<a id="L198"></a><span class="ln">   198</span>		}
<a id="L199"></a><span class="ln">   199</span>		return float64(k)*Ln2Hi - ((hfsq - (s*(hfsq+R) + (float64(k)*Ln2Lo + c))) - f)
<a id="L200"></a><span class="ln">   200</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

