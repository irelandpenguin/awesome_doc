<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/math/erf.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/math/erf.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package math
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">/*
</span><a id="L8"></a><span class="ln">     8</span>	<span class="comment">	Floating-point error function and complementary error function.
</span><a id="L9"></a><span class="ln">     9</span>	<span class="comment">*/</span>
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// The original C code and the long comment below are</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// from FreeBSD&#39;s /usr/src/lib/msun/src/s_erf.c and</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// came with this notice.  The go code is a simplified</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// version of the original C.</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">//</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// ====================================================</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">//</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// Developed at SunPro, a Sun Microsystems, Inc. business.</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// Permission to use, copy, modify, and distribute this</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// software is freely granted, provided that this notice</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// is preserved.</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// ====================================================</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">//</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// double erf(double x)</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// double erfc(double x)</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">//                           x</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">//                    2      |\</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">//     erf(x)  =  ---------  | exp(-t*t)dt</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">//                 sqrt(pi) \|</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">//                           0</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">//</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">//     erfc(x) =  1-erf(x)</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//  Note that</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//              erf(-x) = -erf(x)</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">//              erfc(-x) = 2 - erfc(x)</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// Method:</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">//      1. For |x| in [0, 0.84375]</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">//          erf(x)  = x + x*R(x**2)</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">//          erfc(x) = 1 - erf(x)           if x in [-.84375,0.25]</span>
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">//                  = 0.5 + ((0.5-x)-x*R)  if x in [0.25,0.84375]</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">//         where R = P/Q where P is an odd poly of degree 8 and</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">//         Q is an odd poly of degree 10.</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">//                                               -57.90</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">//                      | R - (erf(x)-x)/x | &lt;= 2</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">//</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">//</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">//         Remark. The formula is derived by noting</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">//          erf(x) = (2/sqrt(pi))*(x - x**3/3 + x**5/10 - x**7/42 + ....)</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">//         and that</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">//          2/sqrt(pi) = 1.128379167095512573896158903121545171688</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">//         is close to one. The interval is chosen because the fix</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">//         point of erf(x) is near 0.6174 (i.e., erf(x)=x when x is</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">//         near 0.6174), and by some experiment, 0.84375 is chosen to</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">//         guarantee the error is less than one ulp for erf.</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">//</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">//      2. For |x| in [0.84375,1.25], let s = |x| - 1, and</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">//         c = 0.84506291151 rounded to single (24 bits)</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">//              erf(x)  = sign(x) * (c  + P1(s)/Q1(s))</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">//              erfc(x) = (1-c)  - P1(s)/Q1(s) if x &gt; 0</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">//                        1+(c+P1(s)/Q1(s))    if x &lt; 0</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">//              |P1/Q1 - (erf(|x|)-c)| &lt;= 2**-59.06</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">//         Remark: here we use the taylor series expansion at x=1.</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">//              erf(1+s) = erf(1) + s*Poly(s)</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">//                       = 0.845.. + P1(s)/Q1(s)</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">//         That is, we use rational approximation to approximate</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">//                      erf(1+s) - (c = (single)0.84506291151)</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">//         Note that |P1/Q1|&lt; 0.078 for x in [0.84375,1.25]</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">//         where</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">//              P1(s) = degree 6 poly in s</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">//              Q1(s) = degree 6 poly in s</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">//</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">//      3. For x in [1.25,1/0.35(~2.857143)],</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">//              erfc(x) = (1/x)*exp(-x*x-0.5625+R1/S1)</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">//              erf(x)  = 1 - erfc(x)</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">//         where</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">//              R1(z) = degree 7 poly in z, (z=1/x**2)</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">//              S1(z) = degree 8 poly in z</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">//</span>
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">//      4. For x in [1/0.35,28]</span>
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">//              erfc(x) = (1/x)*exp(-x*x-0.5625+R2/S2) if x &gt; 0</span>
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">//                      = 2.0 - (1/x)*exp(-x*x-0.5625+R2/S2) if -6&lt;x&lt;0</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">//                      = 2.0 - tiny            (if x &lt;= -6)</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">//              erf(x)  = sign(x)*(1.0 - erfc(x)) if x &lt; 6, else</span>
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">//              erf(x)  = sign(x)*(1.0 - tiny)</span>
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">//         where</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">//              R2(z) = degree 6 poly in z, (z=1/x**2)</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">//              S2(z) = degree 7 poly in z</span>
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">//</span>
<a id="L92"></a><span class="ln">    92</span>	<span class="comment">//      Note1:</span>
<a id="L93"></a><span class="ln">    93</span>	<span class="comment">//         To compute exp(-x*x-0.5625+R/S), let s be a single</span>
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">//         precision number and s := x; then</span>
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">//              -x*x = -s*s + (s-x)*(s+x)</span>
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">//              exp(-x*x-0.5626+R/S) =</span>
<a id="L97"></a><span class="ln">    97</span>	<span class="comment">//                      exp(-s*s-0.5625)*exp((s-x)*(s+x)+R/S);</span>
<a id="L98"></a><span class="ln">    98</span>	<span class="comment">//      Note2:</span>
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">//         Here 4 and 5 make use of the asymptotic series</span>
<a id="L100"></a><span class="ln">   100</span>	<span class="comment">//                        exp(-x*x)</span>
<a id="L101"></a><span class="ln">   101</span>	<span class="comment">//              erfc(x) ~ ---------- * ( 1 + Poly(1/x**2) )</span>
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">//                        x*sqrt(pi)</span>
<a id="L103"></a><span class="ln">   103</span>	<span class="comment">//         We use rational approximation to approximate</span>
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">//              g(s)=f(1/x**2) = log(erfc(x)*x) - x*x + 0.5625</span>
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">//         Here is the error bound for R1/S1 and R2/S2</span>
<a id="L106"></a><span class="ln">   106</span>	<span class="comment">//              |R1/S1 - f(x)|  &lt; 2**(-62.57)</span>
<a id="L107"></a><span class="ln">   107</span>	<span class="comment">//              |R2/S2 - f(x)|  &lt; 2**(-61.52)</span>
<a id="L108"></a><span class="ln">   108</span>	<span class="comment">//</span>
<a id="L109"></a><span class="ln">   109</span>	<span class="comment">//      5. For inf &gt; x &gt;= 28</span>
<a id="L110"></a><span class="ln">   110</span>	<span class="comment">//              erf(x)  = sign(x) *(1 - tiny)  (raise inexact)</span>
<a id="L111"></a><span class="ln">   111</span>	<span class="comment">//              erfc(x) = tiny*tiny (raise underflow) if x &gt; 0</span>
<a id="L112"></a><span class="ln">   112</span>	<span class="comment">//                      = 2 - tiny if x&lt;0</span>
<a id="L113"></a><span class="ln">   113</span>	<span class="comment">//</span>
<a id="L114"></a><span class="ln">   114</span>	<span class="comment">//      7. Special case:</span>
<a id="L115"></a><span class="ln">   115</span>	<span class="comment">//              erf(0)  = 0, erf(inf)  = 1, erf(-inf) = -1,</span>
<a id="L116"></a><span class="ln">   116</span>	<span class="comment">//              erfc(0) = 1, erfc(inf) = 0, erfc(-inf) = 2,</span>
<a id="L117"></a><span class="ln">   117</span>	<span class="comment">//              erfc/erf(NaN) is NaN</span>
<a id="L118"></a><span class="ln">   118</span>	
<a id="L119"></a><span class="ln">   119</span>	const (
<a id="L120"></a><span class="ln">   120</span>		erx = 8.45062911510467529297e-01 <span class="comment">// 0x3FEB0AC160000000</span>
<a id="L121"></a><span class="ln">   121</span>		<span class="comment">// Coefficients for approximation to  erf in [0, 0.84375]</span>
<a id="L122"></a><span class="ln">   122</span>		efx  = 1.28379167095512586316e-01  <span class="comment">// 0x3FC06EBA8214DB69</span>
<a id="L123"></a><span class="ln">   123</span>		efx8 = 1.02703333676410069053e+00  <span class="comment">// 0x3FF06EBA8214DB69</span>
<a id="L124"></a><span class="ln">   124</span>		pp0  = 1.28379167095512558561e-01  <span class="comment">// 0x3FC06EBA8214DB68</span>
<a id="L125"></a><span class="ln">   125</span>		pp1  = -3.25042107247001499370e-01 <span class="comment">// 0xBFD4CD7D691CB913</span>
<a id="L126"></a><span class="ln">   126</span>		pp2  = -2.84817495755985104766e-02 <span class="comment">// 0xBF9D2A51DBD7194F</span>
<a id="L127"></a><span class="ln">   127</span>		pp3  = -5.77027029648944159157e-03 <span class="comment">// 0xBF77A291236668E4</span>
<a id="L128"></a><span class="ln">   128</span>		pp4  = -2.37630166566501626084e-05 <span class="comment">// 0xBEF8EAD6120016AC</span>
<a id="L129"></a><span class="ln">   129</span>		qq1  = 3.97917223959155352819e-01  <span class="comment">// 0x3FD97779CDDADC09</span>
<a id="L130"></a><span class="ln">   130</span>		qq2  = 6.50222499887672944485e-02  <span class="comment">// 0x3FB0A54C5536CEBA</span>
<a id="L131"></a><span class="ln">   131</span>		qq3  = 5.08130628187576562776e-03  <span class="comment">// 0x3F74D022C4D36B0F</span>
<a id="L132"></a><span class="ln">   132</span>		qq4  = 1.32494738004321644526e-04  <span class="comment">// 0x3F215DC9221C1A10</span>
<a id="L133"></a><span class="ln">   133</span>		qq5  = -3.96022827877536812320e-06 <span class="comment">// 0xBED09C4342A26120</span>
<a id="L134"></a><span class="ln">   134</span>		<span class="comment">// Coefficients for approximation to  erf  in [0.84375, 1.25]</span>
<a id="L135"></a><span class="ln">   135</span>		pa0 = -2.36211856075265944077e-03 <span class="comment">// 0xBF6359B8BEF77538</span>
<a id="L136"></a><span class="ln">   136</span>		pa1 = 4.14856118683748331666e-01  <span class="comment">// 0x3FDA8D00AD92B34D</span>
<a id="L137"></a><span class="ln">   137</span>		pa2 = -3.72207876035701323847e-01 <span class="comment">// 0xBFD7D240FBB8C3F1</span>
<a id="L138"></a><span class="ln">   138</span>		pa3 = 3.18346619901161753674e-01  <span class="comment">// 0x3FD45FCA805120E4</span>
<a id="L139"></a><span class="ln">   139</span>		pa4 = -1.10894694282396677476e-01 <span class="comment">// 0xBFBC63983D3E28EC</span>
<a id="L140"></a><span class="ln">   140</span>		pa5 = 3.54783043256182359371e-02  <span class="comment">// 0x3FA22A36599795EB</span>
<a id="L141"></a><span class="ln">   141</span>		pa6 = -2.16637559486879084300e-03 <span class="comment">// 0xBF61BF380A96073F</span>
<a id="L142"></a><span class="ln">   142</span>		qa1 = 1.06420880400844228286e-01  <span class="comment">// 0x3FBB3E6618EEE323</span>
<a id="L143"></a><span class="ln">   143</span>		qa2 = 5.40397917702171048937e-01  <span class="comment">// 0x3FE14AF092EB6F33</span>
<a id="L144"></a><span class="ln">   144</span>		qa3 = 7.18286544141962662868e-02  <span class="comment">// 0x3FB2635CD99FE9A7</span>
<a id="L145"></a><span class="ln">   145</span>		qa4 = 1.26171219808761642112e-01  <span class="comment">// 0x3FC02660E763351F</span>
<a id="L146"></a><span class="ln">   146</span>		qa5 = 1.36370839120290507362e-02  <span class="comment">// 0x3F8BEDC26B51DD1C</span>
<a id="L147"></a><span class="ln">   147</span>		qa6 = 1.19844998467991074170e-02  <span class="comment">// 0x3F888B545735151D</span>
<a id="L148"></a><span class="ln">   148</span>		<span class="comment">// Coefficients for approximation to  erfc in [1.25, 1/0.35]</span>
<a id="L149"></a><span class="ln">   149</span>		ra0 = -9.86494403484714822705e-03 <span class="comment">// 0xBF843412600D6435</span>
<a id="L150"></a><span class="ln">   150</span>		ra1 = -6.93858572707181764372e-01 <span class="comment">// 0xBFE63416E4BA7360</span>
<a id="L151"></a><span class="ln">   151</span>		ra2 = -1.05586262253232909814e+01 <span class="comment">// 0xC0251E0441B0E726</span>
<a id="L152"></a><span class="ln">   152</span>		ra3 = -6.23753324503260060396e+01 <span class="comment">// 0xC04F300AE4CBA38D</span>
<a id="L153"></a><span class="ln">   153</span>		ra4 = -1.62396669462573470355e+02 <span class="comment">// 0xC0644CB184282266</span>
<a id="L154"></a><span class="ln">   154</span>		ra5 = -1.84605092906711035994e+02 <span class="comment">// 0xC067135CEBCCABB2</span>
<a id="L155"></a><span class="ln">   155</span>		ra6 = -8.12874355063065934246e+01 <span class="comment">// 0xC054526557E4D2F2</span>
<a id="L156"></a><span class="ln">   156</span>		ra7 = -9.81432934416914548592e+00 <span class="comment">// 0xC023A0EFC69AC25C</span>
<a id="L157"></a><span class="ln">   157</span>		sa1 = 1.96512716674392571292e+01  <span class="comment">// 0x4033A6B9BD707687</span>
<a id="L158"></a><span class="ln">   158</span>		sa2 = 1.37657754143519042600e+02  <span class="comment">// 0x4061350C526AE721</span>
<a id="L159"></a><span class="ln">   159</span>		sa3 = 4.34565877475229228821e+02  <span class="comment">// 0x407B290DD58A1A71</span>
<a id="L160"></a><span class="ln">   160</span>		sa4 = 6.45387271733267880336e+02  <span class="comment">// 0x40842B1921EC2868</span>
<a id="L161"></a><span class="ln">   161</span>		sa5 = 4.29008140027567833386e+02  <span class="comment">// 0x407AD02157700314</span>
<a id="L162"></a><span class="ln">   162</span>		sa6 = 1.08635005541779435134e+02  <span class="comment">// 0x405B28A3EE48AE2C</span>
<a id="L163"></a><span class="ln">   163</span>		sa7 = 6.57024977031928170135e+00  <span class="comment">// 0x401A47EF8E484A93</span>
<a id="L164"></a><span class="ln">   164</span>		sa8 = -6.04244152148580987438e-02 <span class="comment">// 0xBFAEEFF2EE749A62</span>
<a id="L165"></a><span class="ln">   165</span>		<span class="comment">// Coefficients for approximation to  erfc in [1/.35, 28]</span>
<a id="L166"></a><span class="ln">   166</span>		rb0 = -9.86494292470009928597e-03 <span class="comment">// 0xBF84341239E86F4A</span>
<a id="L167"></a><span class="ln">   167</span>		rb1 = -7.99283237680523006574e-01 <span class="comment">// 0xBFE993BA70C285DE</span>
<a id="L168"></a><span class="ln">   168</span>		rb2 = -1.77579549177547519889e+01 <span class="comment">// 0xC031C209555F995A</span>
<a id="L169"></a><span class="ln">   169</span>		rb3 = -1.60636384855821916062e+02 <span class="comment">// 0xC064145D43C5ED98</span>
<a id="L170"></a><span class="ln">   170</span>		rb4 = -6.37566443368389627722e+02 <span class="comment">// 0xC083EC881375F228</span>
<a id="L171"></a><span class="ln">   171</span>		rb5 = -1.02509513161107724954e+03 <span class="comment">// 0xC09004616A2E5992</span>
<a id="L172"></a><span class="ln">   172</span>		rb6 = -4.83519191608651397019e+02 <span class="comment">// 0xC07E384E9BDC383F</span>
<a id="L173"></a><span class="ln">   173</span>		sb1 = 3.03380607434824582924e+01  <span class="comment">// 0x403E568B261D5190</span>
<a id="L174"></a><span class="ln">   174</span>		sb2 = 3.25792512996573918826e+02  <span class="comment">// 0x40745CAE221B9F0A</span>
<a id="L175"></a><span class="ln">   175</span>		sb3 = 1.53672958608443695994e+03  <span class="comment">// 0x409802EB189D5118</span>
<a id="L176"></a><span class="ln">   176</span>		sb4 = 3.19985821950859553908e+03  <span class="comment">// 0x40A8FFB7688C246A</span>
<a id="L177"></a><span class="ln">   177</span>		sb5 = 2.55305040643316442583e+03  <span class="comment">// 0x40A3F219CEDF3BE6</span>
<a id="L178"></a><span class="ln">   178</span>		sb6 = 4.74528541206955367215e+02  <span class="comment">// 0x407DA874E79FE763</span>
<a id="L179"></a><span class="ln">   179</span>		sb7 = -2.24409524465858183362e+01 <span class="comment">// 0xC03670E242712D62</span>
<a id="L180"></a><span class="ln">   180</span>	)
<a id="L181"></a><span class="ln">   181</span>	
<a id="L182"></a><span class="ln">   182</span>	<span class="comment">// Erf(x) returns the error function of x.</span>
<a id="L183"></a><span class="ln">   183</span>	<span class="comment">//</span>
<a id="L184"></a><span class="ln">   184</span>	<span class="comment">// Special cases are:</span>
<a id="L185"></a><span class="ln">   185</span>	<span class="comment">//	Erf(+Inf) = 1</span>
<a id="L186"></a><span class="ln">   186</span>	<span class="comment">//	Erf(-Inf) = -1</span>
<a id="L187"></a><span class="ln">   187</span>	<span class="comment">//	Erf(NaN) = NaN</span>
<a id="L188"></a><span class="ln">   188</span>	func Erf(x float64) float64 {
<a id="L189"></a><span class="ln">   189</span>		const (
<a id="L190"></a><span class="ln">   190</span>			VeryTiny = 2.848094538889218e-306 <span class="comment">// 0x0080000000000000</span>
<a id="L191"></a><span class="ln">   191</span>			Small    = 1.0 / (1 &lt;&lt; 28)        <span class="comment">// 2**-28</span>
<a id="L192"></a><span class="ln">   192</span>		)
<a id="L193"></a><span class="ln">   193</span>		<span class="comment">// special cases</span>
<a id="L194"></a><span class="ln">   194</span>		switch {
<a id="L195"></a><span class="ln">   195</span>		case IsNaN(x):
<a id="L196"></a><span class="ln">   196</span>			return NaN()
<a id="L197"></a><span class="ln">   197</span>		case IsInf(x, 1):
<a id="L198"></a><span class="ln">   198</span>			return 1
<a id="L199"></a><span class="ln">   199</span>		case IsInf(x, -1):
<a id="L200"></a><span class="ln">   200</span>			return -1
<a id="L201"></a><span class="ln">   201</span>		}
<a id="L202"></a><span class="ln">   202</span>		sign := false
<a id="L203"></a><span class="ln">   203</span>		if x &lt; 0 {
<a id="L204"></a><span class="ln">   204</span>			x = -x
<a id="L205"></a><span class="ln">   205</span>			sign = true
<a id="L206"></a><span class="ln">   206</span>		}
<a id="L207"></a><span class="ln">   207</span>		if x &lt; 0.84375 { <span class="comment">// |x| &lt; 0.84375</span>
<a id="L208"></a><span class="ln">   208</span>			var temp float64
<a id="L209"></a><span class="ln">   209</span>			if x &lt; Small { <span class="comment">// |x| &lt; 2**-28</span>
<a id="L210"></a><span class="ln">   210</span>				if x &lt; VeryTiny {
<a id="L211"></a><span class="ln">   211</span>					temp = 0.125 * (8.0*x + efx8*x) <span class="comment">// avoid underflow</span>
<a id="L212"></a><span class="ln">   212</span>				} else {
<a id="L213"></a><span class="ln">   213</span>					temp = x + efx*x
<a id="L214"></a><span class="ln">   214</span>				}
<a id="L215"></a><span class="ln">   215</span>			} else {
<a id="L216"></a><span class="ln">   216</span>				z := x * x
<a id="L217"></a><span class="ln">   217</span>				r := pp0 + z*(pp1+z*(pp2+z*(pp3+z*pp4)))
<a id="L218"></a><span class="ln">   218</span>				s := 1 + z*(qq1+z*(qq2+z*(qq3+z*(qq4+z*qq5))))
<a id="L219"></a><span class="ln">   219</span>				y := r / s
<a id="L220"></a><span class="ln">   220</span>				temp = x + x*y
<a id="L221"></a><span class="ln">   221</span>			}
<a id="L222"></a><span class="ln">   222</span>			if sign {
<a id="L223"></a><span class="ln">   223</span>				return -temp
<a id="L224"></a><span class="ln">   224</span>			}
<a id="L225"></a><span class="ln">   225</span>			return temp
<a id="L226"></a><span class="ln">   226</span>		}
<a id="L227"></a><span class="ln">   227</span>		if x &lt; 1.25 { <span class="comment">// 0.84375 &lt;= |x| &lt; 1.25</span>
<a id="L228"></a><span class="ln">   228</span>			s := x - 1
<a id="L229"></a><span class="ln">   229</span>			P := pa0 + s*(pa1+s*(pa2+s*(pa3+s*(pa4+s*(pa5+s*pa6)))))
<a id="L230"></a><span class="ln">   230</span>			Q := 1 + s*(qa1+s*(qa2+s*(qa3+s*(qa4+s*(qa5+s*qa6)))))
<a id="L231"></a><span class="ln">   231</span>			if sign {
<a id="L232"></a><span class="ln">   232</span>				return -erx - P/Q
<a id="L233"></a><span class="ln">   233</span>			}
<a id="L234"></a><span class="ln">   234</span>			return erx + P/Q
<a id="L235"></a><span class="ln">   235</span>		}
<a id="L236"></a><span class="ln">   236</span>		if x &gt;= 6 { <span class="comment">// inf &gt; |x| &gt;= 6</span>
<a id="L237"></a><span class="ln">   237</span>			if sign {
<a id="L238"></a><span class="ln">   238</span>				return -1
<a id="L239"></a><span class="ln">   239</span>			}
<a id="L240"></a><span class="ln">   240</span>			return 1
<a id="L241"></a><span class="ln">   241</span>		}
<a id="L242"></a><span class="ln">   242</span>		s := 1 / (x * x)
<a id="L243"></a><span class="ln">   243</span>		var R, S float64
<a id="L244"></a><span class="ln">   244</span>		if x &lt; 1/0.35 { <span class="comment">// |x| &lt; 1 / 0.35  ~ 2.857143</span>
<a id="L245"></a><span class="ln">   245</span>			R = ra0 + s*(ra1+s*(ra2+s*(ra3+s*(ra4+s*(ra5+s*(ra6+s*ra7))))))
<a id="L246"></a><span class="ln">   246</span>			S = 1 + s*(sa1+s*(sa2+s*(sa3+s*(sa4+s*(sa5+s*(sa6+s*(sa7+s*sa8)))))))
<a id="L247"></a><span class="ln">   247</span>		} else { <span class="comment">// |x| &gt;= 1 / 0.35  ~ 2.857143</span>
<a id="L248"></a><span class="ln">   248</span>			R = rb0 + s*(rb1+s*(rb2+s*(rb3+s*(rb4+s*(rb5+s*rb6)))))
<a id="L249"></a><span class="ln">   249</span>			S = 1 + s*(sb1+s*(sb2+s*(sb3+s*(sb4+s*(sb5+s*(sb6+s*sb7))))))
<a id="L250"></a><span class="ln">   250</span>		}
<a id="L251"></a><span class="ln">   251</span>		z := Float64frombits(Float64bits(x) &amp; 0xffffffff00000000) <span class="comment">// pseudo-single (20-bit) precision x</span>
<a id="L252"></a><span class="ln">   252</span>		r := Exp(-z*z-0.5625) * Exp((z-x)*(z+x)+R/S)
<a id="L253"></a><span class="ln">   253</span>		if sign {
<a id="L254"></a><span class="ln">   254</span>			return r/x - 1
<a id="L255"></a><span class="ln">   255</span>		}
<a id="L256"></a><span class="ln">   256</span>		return 1 - r/x
<a id="L257"></a><span class="ln">   257</span>	}
<a id="L258"></a><span class="ln">   258</span>	
<a id="L259"></a><span class="ln">   259</span>	<span class="comment">// Erfc(x) returns the complementary error function of x.</span>
<a id="L260"></a><span class="ln">   260</span>	<span class="comment">//</span>
<a id="L261"></a><span class="ln">   261</span>	<span class="comment">// Special cases are:</span>
<a id="L262"></a><span class="ln">   262</span>	<span class="comment">//	Erfc(+Inf) = 0</span>
<a id="L263"></a><span class="ln">   263</span>	<span class="comment">//	Erfc(-Inf) = 2</span>
<a id="L264"></a><span class="ln">   264</span>	<span class="comment">//	Erfc(NaN) = NaN</span>
<a id="L265"></a><span class="ln">   265</span>	func Erfc(x float64) float64 {
<a id="L266"></a><span class="ln">   266</span>		const Tiny = 1.0 / (1 &lt;&lt; 56) <span class="comment">// 2**-56</span>
<a id="L267"></a><span class="ln">   267</span>		<span class="comment">// special cases</span>
<a id="L268"></a><span class="ln">   268</span>		switch {
<a id="L269"></a><span class="ln">   269</span>		case IsNaN(x):
<a id="L270"></a><span class="ln">   270</span>			return NaN()
<a id="L271"></a><span class="ln">   271</span>		case IsInf(x, 1):
<a id="L272"></a><span class="ln">   272</span>			return 0
<a id="L273"></a><span class="ln">   273</span>		case IsInf(x, -1):
<a id="L274"></a><span class="ln">   274</span>			return 2
<a id="L275"></a><span class="ln">   275</span>		}
<a id="L276"></a><span class="ln">   276</span>		sign := false
<a id="L277"></a><span class="ln">   277</span>		if x &lt; 0 {
<a id="L278"></a><span class="ln">   278</span>			x = -x
<a id="L279"></a><span class="ln">   279</span>			sign = true
<a id="L280"></a><span class="ln">   280</span>		}
<a id="L281"></a><span class="ln">   281</span>		if x &lt; 0.84375 { <span class="comment">// |x| &lt; 0.84375</span>
<a id="L282"></a><span class="ln">   282</span>			var temp float64
<a id="L283"></a><span class="ln">   283</span>			if x &lt; Tiny { <span class="comment">// |x| &lt; 2**-56</span>
<a id="L284"></a><span class="ln">   284</span>				temp = x
<a id="L285"></a><span class="ln">   285</span>			} else {
<a id="L286"></a><span class="ln">   286</span>				z := x * x
<a id="L287"></a><span class="ln">   287</span>				r := pp0 + z*(pp1+z*(pp2+z*(pp3+z*pp4)))
<a id="L288"></a><span class="ln">   288</span>				s := 1 + z*(qq1+z*(qq2+z*(qq3+z*(qq4+z*qq5))))
<a id="L289"></a><span class="ln">   289</span>				y := r / s
<a id="L290"></a><span class="ln">   290</span>				if x &lt; 0.25 { <span class="comment">// |x| &lt; 1/4</span>
<a id="L291"></a><span class="ln">   291</span>					temp = x + x*y
<a id="L292"></a><span class="ln">   292</span>				} else {
<a id="L293"></a><span class="ln">   293</span>					temp = 0.5 + (x*y + (x - 0.5))
<a id="L294"></a><span class="ln">   294</span>				}
<a id="L295"></a><span class="ln">   295</span>			}
<a id="L296"></a><span class="ln">   296</span>			if sign {
<a id="L297"></a><span class="ln">   297</span>				return 1 + temp
<a id="L298"></a><span class="ln">   298</span>			}
<a id="L299"></a><span class="ln">   299</span>			return 1 - temp
<a id="L300"></a><span class="ln">   300</span>		}
<a id="L301"></a><span class="ln">   301</span>		if x &lt; 1.25 { <span class="comment">// 0.84375 &lt;= |x| &lt; 1.25</span>
<a id="L302"></a><span class="ln">   302</span>			s := x - 1
<a id="L303"></a><span class="ln">   303</span>			P := pa0 + s*(pa1+s*(pa2+s*(pa3+s*(pa4+s*(pa5+s*pa6)))))
<a id="L304"></a><span class="ln">   304</span>			Q := 1 + s*(qa1+s*(qa2+s*(qa3+s*(qa4+s*(qa5+s*qa6)))))
<a id="L305"></a><span class="ln">   305</span>			if sign {
<a id="L306"></a><span class="ln">   306</span>				return 1 + erx + P/Q
<a id="L307"></a><span class="ln">   307</span>			}
<a id="L308"></a><span class="ln">   308</span>			return 1 - erx - P/Q
<a id="L309"></a><span class="ln">   309</span>	
<a id="L310"></a><span class="ln">   310</span>		}
<a id="L311"></a><span class="ln">   311</span>		if x &lt; 28 { <span class="comment">// |x| &lt; 28</span>
<a id="L312"></a><span class="ln">   312</span>			s := 1 / (x * x)
<a id="L313"></a><span class="ln">   313</span>			var R, S float64
<a id="L314"></a><span class="ln">   314</span>			if x &lt; 1/0.35 { <span class="comment">// |x| &lt; 1 / 0.35 ~ 2.857143</span>
<a id="L315"></a><span class="ln">   315</span>				R = ra0 + s*(ra1+s*(ra2+s*(ra3+s*(ra4+s*(ra5+s*(ra6+s*ra7))))))
<a id="L316"></a><span class="ln">   316</span>				S = 1 + s*(sa1+s*(sa2+s*(sa3+s*(sa4+s*(sa5+s*(sa6+s*(sa7+s*sa8)))))))
<a id="L317"></a><span class="ln">   317</span>			} else { <span class="comment">// |x| &gt;= 1 / 0.35 ~ 2.857143</span>
<a id="L318"></a><span class="ln">   318</span>				if sign &amp;&amp; x &gt; 6 {
<a id="L319"></a><span class="ln">   319</span>					return 2 <span class="comment">// x &lt; -6</span>
<a id="L320"></a><span class="ln">   320</span>				}
<a id="L321"></a><span class="ln">   321</span>				R = rb0 + s*(rb1+s*(rb2+s*(rb3+s*(rb4+s*(rb5+s*rb6)))))
<a id="L322"></a><span class="ln">   322</span>				S = 1 + s*(sb1+s*(sb2+s*(sb3+s*(sb4+s*(sb5+s*(sb6+s*sb7))))))
<a id="L323"></a><span class="ln">   323</span>			}
<a id="L324"></a><span class="ln">   324</span>			z := Float64frombits(Float64bits(x) &amp; 0xffffffff00000000) <span class="comment">// pseudo-single (20-bit) precision x</span>
<a id="L325"></a><span class="ln">   325</span>			r := Exp(-z*z-0.5625) * Exp((z-x)*(z+x)+R/S)
<a id="L326"></a><span class="ln">   326</span>			if sign {
<a id="L327"></a><span class="ln">   327</span>				return 2 - r/x
<a id="L328"></a><span class="ln">   328</span>			}
<a id="L329"></a><span class="ln">   329</span>			return r / x
<a id="L330"></a><span class="ln">   330</span>		}
<a id="L331"></a><span class="ln">   331</span>		if sign {
<a id="L332"></a><span class="ln">   332</span>			return 2
<a id="L333"></a><span class="ln">   333</span>		}
<a id="L334"></a><span class="ln">   334</span>		return 0
<a id="L335"></a><span class="ln">   335</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

