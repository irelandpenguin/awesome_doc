<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/go/parser/interface.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/go/parser/interface.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// This file contains the exported entry points for invoking the parser.</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package parser
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;bytes&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;errors&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;go/ast&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;go/token&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;io&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;io/ioutil&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;os&#34;
<a id="L17"></a><span class="ln">    17</span>		&#34;path/filepath&#34;
<a id="L18"></a><span class="ln">    18</span>	)
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// If src != nil, readSource converts src to a []byte if possible;</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// otherwise it returns an error. If src == nil, readSource returns</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// the result of reading the file specified by filename.</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">//</span>
<a id="L24"></a><span class="ln">    24</span>	func readSource(filename string, src interface{}) ([]byte, error) {
<a id="L25"></a><span class="ln">    25</span>		if src != nil {
<a id="L26"></a><span class="ln">    26</span>			switch s := src.(type) {
<a id="L27"></a><span class="ln">    27</span>			case string:
<a id="L28"></a><span class="ln">    28</span>				return []byte(s), nil
<a id="L29"></a><span class="ln">    29</span>			case []byte:
<a id="L30"></a><span class="ln">    30</span>				return s, nil
<a id="L31"></a><span class="ln">    31</span>			case *bytes.Buffer:
<a id="L32"></a><span class="ln">    32</span>				<span class="comment">// is io.Reader, but src is already available in []byte form</span>
<a id="L33"></a><span class="ln">    33</span>				if s != nil {
<a id="L34"></a><span class="ln">    34</span>					return s.Bytes(), nil
<a id="L35"></a><span class="ln">    35</span>				}
<a id="L36"></a><span class="ln">    36</span>			case io.Reader:
<a id="L37"></a><span class="ln">    37</span>				var buf bytes.Buffer
<a id="L38"></a><span class="ln">    38</span>				if _, err := io.Copy(&amp;buf, s); err != nil {
<a id="L39"></a><span class="ln">    39</span>					return nil, err
<a id="L40"></a><span class="ln">    40</span>				}
<a id="L41"></a><span class="ln">    41</span>				return buf.Bytes(), nil
<a id="L42"></a><span class="ln">    42</span>			}
<a id="L43"></a><span class="ln">    43</span>			return nil, errors.New(&#34;invalid source&#34;)
<a id="L44"></a><span class="ln">    44</span>		}
<a id="L45"></a><span class="ln">    45</span>		return ioutil.ReadFile(filename)
<a id="L46"></a><span class="ln">    46</span>	}
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">// A Mode value is a set of flags (or 0).</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">// They control the amount of source code parsed and other optional</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// parser functionality.</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">//</span>
<a id="L52"></a><span class="ln">    52</span>	type Mode uint
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>	const (
<a id="L55"></a><span class="ln">    55</span>		PackageClauseOnly Mode = 1 &lt;&lt; iota <span class="comment">// parsing stops after package clause</span>
<a id="L56"></a><span class="ln">    56</span>		ImportsOnly                        <span class="comment">// parsing stops after import declarations</span>
<a id="L57"></a><span class="ln">    57</span>		ParseComments                      <span class="comment">// parse comments and add them to AST</span>
<a id="L58"></a><span class="ln">    58</span>		Trace                              <span class="comment">// print a trace of parsed productions</span>
<a id="L59"></a><span class="ln">    59</span>		DeclarationErrors                  <span class="comment">// report declaration errors</span>
<a id="L60"></a><span class="ln">    60</span>		SpuriousErrors                     <span class="comment">// report all (not just the first) errors per line</span>
<a id="L61"></a><span class="ln">    61</span>	)
<a id="L62"></a><span class="ln">    62</span>	
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">// ParseFile parses the source code of a single Go source file and returns</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// the corresponding ast.File node. The source code may be provided via</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// the filename of the source file, or via the src parameter.</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">//</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// If src != nil, ParseFile parses the source from src and the filename is</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// only used when recording position information. The type of the argument</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// for the src parameter must be string, []byte, or io.Reader.</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// If src == nil, ParseFile parses the file specified by filename.</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">//</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">// The mode parameter controls the amount of source text parsed and other</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// optional parser functionality. Position information is recorded in the</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">// file set fset.</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">//</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">// If the source couldn&#39;t be read, the returned AST is nil and the error</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// indicates the specific failure. If the source was read but syntax</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// errors were found, the result is a partial AST (with ast.Bad* nodes</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// representing the fragments of erroneous source code). Multiple errors</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// are returned via a scanner.ErrorList which is sorted by file position.</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">//</span>
<a id="L82"></a><span class="ln">    82</span>	func ParseFile(fset *token.FileSet, filename string, src interface{}, mode Mode) (*ast.File, error) {
<a id="L83"></a><span class="ln">    83</span>		<span class="comment">// get source</span>
<a id="L84"></a><span class="ln">    84</span>		text, err := readSource(filename, src)
<a id="L85"></a><span class="ln">    85</span>		if err != nil {
<a id="L86"></a><span class="ln">    86</span>			return nil, err
<a id="L87"></a><span class="ln">    87</span>		}
<a id="L88"></a><span class="ln">    88</span>	
<a id="L89"></a><span class="ln">    89</span>		<span class="comment">// parse source</span>
<a id="L90"></a><span class="ln">    90</span>		var p parser
<a id="L91"></a><span class="ln">    91</span>		p.init(fset, filename, text, mode)
<a id="L92"></a><span class="ln">    92</span>		f := p.parseFile()
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>		<span class="comment">// sort errors</span>
<a id="L95"></a><span class="ln">    95</span>		if p.mode&amp;SpuriousErrors == 0 {
<a id="L96"></a><span class="ln">    96</span>			p.errors.RemoveMultiples()
<a id="L97"></a><span class="ln">    97</span>		} else {
<a id="L98"></a><span class="ln">    98</span>			p.errors.Sort()
<a id="L99"></a><span class="ln">    99</span>		}
<a id="L100"></a><span class="ln">   100</span>	
<a id="L101"></a><span class="ln">   101</span>		return f, p.errors.Err()
<a id="L102"></a><span class="ln">   102</span>	}
<a id="L103"></a><span class="ln">   103</span>	
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">// ParseDir calls ParseFile for the files in the directory specified by path and</span>
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// returns a map of package name -&gt; package AST with all the packages found. If</span>
<a id="L106"></a><span class="ln">   106</span>	<span class="comment">// filter != nil, only the files with os.FileInfo entries passing through the filter</span>
<a id="L107"></a><span class="ln">   107</span>	<span class="comment">// are considered. The mode bits are passed to ParseFile unchanged. Position</span>
<a id="L108"></a><span class="ln">   108</span>	<span class="comment">// information is recorded in the file set fset.</span>
<a id="L109"></a><span class="ln">   109</span>	<span class="comment">//</span>
<a id="L110"></a><span class="ln">   110</span>	<span class="comment">// If the directory couldn&#39;t be read, a nil map and the respective error are</span>
<a id="L111"></a><span class="ln">   111</span>	<span class="comment">// returned. If a parse error occurred, a non-nil but incomplete map and the</span>
<a id="L112"></a><span class="ln">   112</span>	<span class="comment">// first error encountered are returned.</span>
<a id="L113"></a><span class="ln">   113</span>	<span class="comment">//</span>
<a id="L114"></a><span class="ln">   114</span>	func ParseDir(fset *token.FileSet, path string, filter func(os.FileInfo) bool, mode Mode) (pkgs map[string]*ast.Package, first error) {
<a id="L115"></a><span class="ln">   115</span>		fd, err := os.Open(path)
<a id="L116"></a><span class="ln">   116</span>		if err != nil {
<a id="L117"></a><span class="ln">   117</span>			return nil, err
<a id="L118"></a><span class="ln">   118</span>		}
<a id="L119"></a><span class="ln">   119</span>		defer fd.Close()
<a id="L120"></a><span class="ln">   120</span>	
<a id="L121"></a><span class="ln">   121</span>		list, err := fd.Readdir(-1)
<a id="L122"></a><span class="ln">   122</span>		if err != nil {
<a id="L123"></a><span class="ln">   123</span>			return nil, err
<a id="L124"></a><span class="ln">   124</span>		}
<a id="L125"></a><span class="ln">   125</span>	
<a id="L126"></a><span class="ln">   126</span>		pkgs = make(map[string]*ast.Package)
<a id="L127"></a><span class="ln">   127</span>		for _, d := range list {
<a id="L128"></a><span class="ln">   128</span>			if filter == nil || filter(d) {
<a id="L129"></a><span class="ln">   129</span>				filename := filepath.Join(path, d.Name())
<a id="L130"></a><span class="ln">   130</span>				if src, err := ParseFile(fset, filename, nil, mode); err == nil {
<a id="L131"></a><span class="ln">   131</span>					name := src.Name.Name
<a id="L132"></a><span class="ln">   132</span>					pkg, found := pkgs[name]
<a id="L133"></a><span class="ln">   133</span>					if !found {
<a id="L134"></a><span class="ln">   134</span>						pkg = &amp;ast.Package{
<a id="L135"></a><span class="ln">   135</span>							Name:  name,
<a id="L136"></a><span class="ln">   136</span>							Files: make(map[string]*ast.File),
<a id="L137"></a><span class="ln">   137</span>						}
<a id="L138"></a><span class="ln">   138</span>						pkgs[name] = pkg
<a id="L139"></a><span class="ln">   139</span>					}
<a id="L140"></a><span class="ln">   140</span>					pkg.Files[filename] = src
<a id="L141"></a><span class="ln">   141</span>				} else if first == nil {
<a id="L142"></a><span class="ln">   142</span>					first = err
<a id="L143"></a><span class="ln">   143</span>				}
<a id="L144"></a><span class="ln">   144</span>			}
<a id="L145"></a><span class="ln">   145</span>		}
<a id="L146"></a><span class="ln">   146</span>	
<a id="L147"></a><span class="ln">   147</span>		return
<a id="L148"></a><span class="ln">   148</span>	}
<a id="L149"></a><span class="ln">   149</span>	
<a id="L150"></a><span class="ln">   150</span>	<span class="comment">// ParseExpr is a convenience function for obtaining the AST of an expression x.</span>
<a id="L151"></a><span class="ln">   151</span>	<span class="comment">// The position information recorded in the AST is undefined.</span>
<a id="L152"></a><span class="ln">   152</span>	<span class="comment">// </span>
<a id="L153"></a><span class="ln">   153</span>	func ParseExpr(x string) (ast.Expr, error) {
<a id="L154"></a><span class="ln">   154</span>		<span class="comment">// parse x within the context of a complete package for correct scopes;</span>
<a id="L155"></a><span class="ln">   155</span>		<span class="comment">// use //line directive for correct positions in error messages and put</span>
<a id="L156"></a><span class="ln">   156</span>		<span class="comment">// x alone on a separate line (handles line comments), followed by a &#39;;&#39;</span>
<a id="L157"></a><span class="ln">   157</span>		<span class="comment">// to force an error if the expression is incomplete</span>
<a id="L158"></a><span class="ln">   158</span>		file, err := ParseFile(token.NewFileSet(), &#34;&#34;, &#34;package p;func _(){_=\n//line :1\n&#34;+x+&#34;\n;}&#34;, 0)
<a id="L159"></a><span class="ln">   159</span>		if err != nil {
<a id="L160"></a><span class="ln">   160</span>			return nil, err
<a id="L161"></a><span class="ln">   161</span>		}
<a id="L162"></a><span class="ln">   162</span>		return file.Decls[0].(*ast.FuncDecl).Body.List[0].(*ast.AssignStmt).Rhs[0], nil
<a id="L163"></a><span class="ln">   163</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

