<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/go/build/build.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/go/build/build.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package build
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bytes&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;errors&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;fmt&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;go/ast&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;go/doc&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;go/parser&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;go/token&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;io&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;io/ioutil&#34;
<a id="L17"></a><span class="ln">    17</span>		&#34;log&#34;
<a id="L18"></a><span class="ln">    18</span>		&#34;os&#34;
<a id="L19"></a><span class="ln">    19</span>		pathpkg &#34;path&#34;
<a id="L20"></a><span class="ln">    20</span>		&#34;path/filepath&#34;
<a id="L21"></a><span class="ln">    21</span>		&#34;runtime&#34;
<a id="L22"></a><span class="ln">    22</span>		&#34;sort&#34;
<a id="L23"></a><span class="ln">    23</span>		&#34;strconv&#34;
<a id="L24"></a><span class="ln">    24</span>		&#34;strings&#34;
<a id="L25"></a><span class="ln">    25</span>		&#34;unicode&#34;
<a id="L26"></a><span class="ln">    26</span>	)
<a id="L27"></a><span class="ln">    27</span>	
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// A Context specifies the supporting context for a build.</span>
<a id="L29"></a><span class="ln">    29</span>	type Context struct {
<a id="L30"></a><span class="ln">    30</span>		GOARCH      string   <span class="comment">// target architecture</span>
<a id="L31"></a><span class="ln">    31</span>		GOOS        string   <span class="comment">// target operating system</span>
<a id="L32"></a><span class="ln">    32</span>		GOROOT      string   <span class="comment">// Go root</span>
<a id="L33"></a><span class="ln">    33</span>		GOPATH      string   <span class="comment">// Go path</span>
<a id="L34"></a><span class="ln">    34</span>		CgoEnabled  bool     <span class="comment">// whether cgo can be used</span>
<a id="L35"></a><span class="ln">    35</span>		BuildTags   []string <span class="comment">// additional tags to recognize in +build lines</span>
<a id="L36"></a><span class="ln">    36</span>		UseAllFiles bool     <span class="comment">// use files regardless of +build lines, file names</span>
<a id="L37"></a><span class="ln">    37</span>		Compiler    string   <span class="comment">// compiler to assume when computing target paths</span>
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>		<span class="comment">// By default, Import uses the operating system&#39;s file system calls</span>
<a id="L40"></a><span class="ln">    40</span>		<span class="comment">// to read directories and files.  To read from other sources,</span>
<a id="L41"></a><span class="ln">    41</span>		<span class="comment">// callers can set the following functions.  They all have default</span>
<a id="L42"></a><span class="ln">    42</span>		<span class="comment">// behaviors that use the local file system, so clients need only set</span>
<a id="L43"></a><span class="ln">    43</span>		<span class="comment">// the functions whose behaviors they wish to change.</span>
<a id="L44"></a><span class="ln">    44</span>	
<a id="L45"></a><span class="ln">    45</span>		<span class="comment">// JoinPath joins the sequence of path fragments into a single path.</span>
<a id="L46"></a><span class="ln">    46</span>		<span class="comment">// If JoinPath is nil, Import uses filepath.Join.</span>
<a id="L47"></a><span class="ln">    47</span>		JoinPath func(elem ...string) string
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>		<span class="comment">// SplitPathList splits the path list into a slice of individual paths.</span>
<a id="L50"></a><span class="ln">    50</span>		<span class="comment">// If SplitPathList is nil, Import uses filepath.SplitList.</span>
<a id="L51"></a><span class="ln">    51</span>		SplitPathList func(list string) []string
<a id="L52"></a><span class="ln">    52</span>	
<a id="L53"></a><span class="ln">    53</span>		<span class="comment">// IsAbsPath reports whether path is an absolute path.</span>
<a id="L54"></a><span class="ln">    54</span>		<span class="comment">// If IsAbsPath is nil, Import uses filepath.IsAbs.</span>
<a id="L55"></a><span class="ln">    55</span>		IsAbsPath func(path string) bool
<a id="L56"></a><span class="ln">    56</span>	
<a id="L57"></a><span class="ln">    57</span>		<span class="comment">// IsDir reports whether the path names a directory.</span>
<a id="L58"></a><span class="ln">    58</span>		<span class="comment">// If IsDir is nil, Import calls os.Stat and uses the result&#39;s IsDir method.</span>
<a id="L59"></a><span class="ln">    59</span>		IsDir func(path string) bool
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>		<span class="comment">// HasSubdir reports whether dir is a subdirectory of</span>
<a id="L62"></a><span class="ln">    62</span>		<span class="comment">// (perhaps multiple levels below) root.</span>
<a id="L63"></a><span class="ln">    63</span>		<span class="comment">// If so, HasSubdir sets rel to a slash-separated path that</span>
<a id="L64"></a><span class="ln">    64</span>		<span class="comment">// can be joined to root to produce a path equivalent to dir.</span>
<a id="L65"></a><span class="ln">    65</span>		<span class="comment">// If HasSubdir is nil, Import uses an implementation built on</span>
<a id="L66"></a><span class="ln">    66</span>		<span class="comment">// filepath.EvalSymlinks.</span>
<a id="L67"></a><span class="ln">    67</span>		HasSubdir func(root, dir string) (rel string, ok bool)
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>		<span class="comment">// ReadDir returns a slice of os.FileInfo, sorted by Name,</span>
<a id="L70"></a><span class="ln">    70</span>		<span class="comment">// describing the content of the named directory.</span>
<a id="L71"></a><span class="ln">    71</span>		<span class="comment">// If ReadDir is nil, Import uses io.ReadDir.</span>
<a id="L72"></a><span class="ln">    72</span>		ReadDir func(dir string) (fi []os.FileInfo, err error)
<a id="L73"></a><span class="ln">    73</span>	
<a id="L74"></a><span class="ln">    74</span>		<span class="comment">// OpenFile opens a file (not a directory) for reading.</span>
<a id="L75"></a><span class="ln">    75</span>		<span class="comment">// If OpenFile is nil, Import uses os.Open.</span>
<a id="L76"></a><span class="ln">    76</span>		OpenFile func(path string) (r io.ReadCloser, err error)
<a id="L77"></a><span class="ln">    77</span>	}
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// joinPath calls ctxt.JoinPath (if not nil) or else filepath.Join.</span>
<a id="L80"></a><span class="ln">    80</span>	func (ctxt *Context) joinPath(elem ...string) string {
<a id="L81"></a><span class="ln">    81</span>		if f := ctxt.JoinPath; f != nil {
<a id="L82"></a><span class="ln">    82</span>			return f(elem...)
<a id="L83"></a><span class="ln">    83</span>		}
<a id="L84"></a><span class="ln">    84</span>		return filepath.Join(elem...)
<a id="L85"></a><span class="ln">    85</span>	}
<a id="L86"></a><span class="ln">    86</span>	
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">// splitPathList calls ctxt.SplitPathList (if not nil) or else filepath.SplitList.</span>
<a id="L88"></a><span class="ln">    88</span>	func (ctxt *Context) splitPathList(s string) []string {
<a id="L89"></a><span class="ln">    89</span>		if f := ctxt.SplitPathList; f != nil {
<a id="L90"></a><span class="ln">    90</span>			return f(s)
<a id="L91"></a><span class="ln">    91</span>		}
<a id="L92"></a><span class="ln">    92</span>		return filepath.SplitList(s)
<a id="L93"></a><span class="ln">    93</span>	}
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">// isAbsPath calls ctxt.IsAbsSPath (if not nil) or else filepath.IsAbs.</span>
<a id="L96"></a><span class="ln">    96</span>	func (ctxt *Context) isAbsPath(path string) bool {
<a id="L97"></a><span class="ln">    97</span>		if f := ctxt.IsAbsPath; f != nil {
<a id="L98"></a><span class="ln">    98</span>			return f(path)
<a id="L99"></a><span class="ln">    99</span>		}
<a id="L100"></a><span class="ln">   100</span>		return filepath.IsAbs(path)
<a id="L101"></a><span class="ln">   101</span>	}
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>	<span class="comment">// isDir calls ctxt.IsDir (if not nil) or else uses os.Stat.</span>
<a id="L104"></a><span class="ln">   104</span>	func (ctxt *Context) isDir(path string) bool {
<a id="L105"></a><span class="ln">   105</span>		if f := ctxt.IsDir; f != nil {
<a id="L106"></a><span class="ln">   106</span>			return f(path)
<a id="L107"></a><span class="ln">   107</span>		}
<a id="L108"></a><span class="ln">   108</span>		fi, err := os.Stat(path)
<a id="L109"></a><span class="ln">   109</span>		return err == nil &amp;&amp; fi.IsDir()
<a id="L110"></a><span class="ln">   110</span>	}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>	<span class="comment">// hasSubdir calls ctxt.HasSubdir (if not nil) or else uses</span>
<a id="L113"></a><span class="ln">   113</span>	<span class="comment">// the local file system to answer the question.</span>
<a id="L114"></a><span class="ln">   114</span>	func (ctxt *Context) hasSubdir(root, dir string) (rel string, ok bool) {
<a id="L115"></a><span class="ln">   115</span>		if f := ctxt.HasSubdir; f != nil {
<a id="L116"></a><span class="ln">   116</span>			return f(root, dir)
<a id="L117"></a><span class="ln">   117</span>		}
<a id="L118"></a><span class="ln">   118</span>	
<a id="L119"></a><span class="ln">   119</span>		if p, err := filepath.EvalSymlinks(root); err == nil {
<a id="L120"></a><span class="ln">   120</span>			root = p
<a id="L121"></a><span class="ln">   121</span>		}
<a id="L122"></a><span class="ln">   122</span>		if p, err := filepath.EvalSymlinks(dir); err == nil {
<a id="L123"></a><span class="ln">   123</span>			dir = p
<a id="L124"></a><span class="ln">   124</span>		}
<a id="L125"></a><span class="ln">   125</span>		const sep = string(filepath.Separator)
<a id="L126"></a><span class="ln">   126</span>		root = filepath.Clean(root)
<a id="L127"></a><span class="ln">   127</span>		if !strings.HasSuffix(root, sep) {
<a id="L128"></a><span class="ln">   128</span>			root += sep
<a id="L129"></a><span class="ln">   129</span>		}
<a id="L130"></a><span class="ln">   130</span>		dir = filepath.Clean(dir)
<a id="L131"></a><span class="ln">   131</span>		if !strings.HasPrefix(dir, root) {
<a id="L132"></a><span class="ln">   132</span>			return &#34;&#34;, false
<a id="L133"></a><span class="ln">   133</span>		}
<a id="L134"></a><span class="ln">   134</span>		return filepath.ToSlash(dir[len(root):]), true
<a id="L135"></a><span class="ln">   135</span>	}
<a id="L136"></a><span class="ln">   136</span>	
<a id="L137"></a><span class="ln">   137</span>	<span class="comment">// readDir calls ctxt.ReadDir (if not nil) or else ioutil.ReadDir.</span>
<a id="L138"></a><span class="ln">   138</span>	func (ctxt *Context) readDir(path string) ([]os.FileInfo, error) {
<a id="L139"></a><span class="ln">   139</span>		if f := ctxt.ReadDir; f != nil {
<a id="L140"></a><span class="ln">   140</span>			return f(path)
<a id="L141"></a><span class="ln">   141</span>		}
<a id="L142"></a><span class="ln">   142</span>		return ioutil.ReadDir(path)
<a id="L143"></a><span class="ln">   143</span>	}
<a id="L144"></a><span class="ln">   144</span>	
<a id="L145"></a><span class="ln">   145</span>	<span class="comment">// openFile calls ctxt.OpenFile (if not nil) or else os.Open.</span>
<a id="L146"></a><span class="ln">   146</span>	func (ctxt *Context) openFile(path string) (io.ReadCloser, error) {
<a id="L147"></a><span class="ln">   147</span>		if fn := ctxt.OpenFile; fn != nil {
<a id="L148"></a><span class="ln">   148</span>			return fn(path)
<a id="L149"></a><span class="ln">   149</span>		}
<a id="L150"></a><span class="ln">   150</span>	
<a id="L151"></a><span class="ln">   151</span>		f, err := os.Open(path)
<a id="L152"></a><span class="ln">   152</span>		if err != nil {
<a id="L153"></a><span class="ln">   153</span>			return nil, err <span class="comment">// nil interface</span>
<a id="L154"></a><span class="ln">   154</span>		}
<a id="L155"></a><span class="ln">   155</span>		return f, nil
<a id="L156"></a><span class="ln">   156</span>	}
<a id="L157"></a><span class="ln">   157</span>	
<a id="L158"></a><span class="ln">   158</span>	<span class="comment">// isFile determines whether path is a file by trying to open it.</span>
<a id="L159"></a><span class="ln">   159</span>	<span class="comment">// It reuses openFile instead of adding another function to the</span>
<a id="L160"></a><span class="ln">   160</span>	<span class="comment">// list in Context.</span>
<a id="L161"></a><span class="ln">   161</span>	func (ctxt *Context) isFile(path string) bool {
<a id="L162"></a><span class="ln">   162</span>		f, err := ctxt.openFile(path)
<a id="L163"></a><span class="ln">   163</span>		if err != nil {
<a id="L164"></a><span class="ln">   164</span>			return false
<a id="L165"></a><span class="ln">   165</span>		}
<a id="L166"></a><span class="ln">   166</span>		f.Close()
<a id="L167"></a><span class="ln">   167</span>		return true
<a id="L168"></a><span class="ln">   168</span>	}
<a id="L169"></a><span class="ln">   169</span>	
<a id="L170"></a><span class="ln">   170</span>	<span class="comment">// gopath returns the list of Go path directories.</span>
<a id="L171"></a><span class="ln">   171</span>	func (ctxt *Context) gopath() []string {
<a id="L172"></a><span class="ln">   172</span>		var all []string
<a id="L173"></a><span class="ln">   173</span>		for _, p := range ctxt.splitPathList(ctxt.GOPATH) {
<a id="L174"></a><span class="ln">   174</span>			if p == &#34;&#34; || p == ctxt.GOROOT {
<a id="L175"></a><span class="ln">   175</span>				<span class="comment">// Empty paths are uninteresting.</span>
<a id="L176"></a><span class="ln">   176</span>				<span class="comment">// If the path is the GOROOT, ignore it.</span>
<a id="L177"></a><span class="ln">   177</span>				<span class="comment">// People sometimes set GOPATH=$GOROOT, which is useless</span>
<a id="L178"></a><span class="ln">   178</span>				<span class="comment">// but would cause us to find packages with import paths</span>
<a id="L179"></a><span class="ln">   179</span>				<span class="comment">// like &#34;pkg/math&#34;.</span>
<a id="L180"></a><span class="ln">   180</span>				<span class="comment">// Do not get confused by this common mistake.</span>
<a id="L181"></a><span class="ln">   181</span>				continue
<a id="L182"></a><span class="ln">   182</span>			}
<a id="L183"></a><span class="ln">   183</span>			all = append(all, p)
<a id="L184"></a><span class="ln">   184</span>		}
<a id="L185"></a><span class="ln">   185</span>		return all
<a id="L186"></a><span class="ln">   186</span>	}
<a id="L187"></a><span class="ln">   187</span>	
<a id="L188"></a><span class="ln">   188</span>	<span class="comment">// SrcDirs returns a list of package source root directories.</span>
<a id="L189"></a><span class="ln">   189</span>	<span class="comment">// It draws from the current Go root and Go path but omits directories</span>
<a id="L190"></a><span class="ln">   190</span>	<span class="comment">// that do not exist.</span>
<a id="L191"></a><span class="ln">   191</span>	func (ctxt *Context) SrcDirs() []string {
<a id="L192"></a><span class="ln">   192</span>		var all []string
<a id="L193"></a><span class="ln">   193</span>		if ctxt.GOROOT != &#34;&#34; {
<a id="L194"></a><span class="ln">   194</span>			dir := ctxt.joinPath(ctxt.GOROOT, &#34;src&#34;, &#34;pkg&#34;)
<a id="L195"></a><span class="ln">   195</span>			if ctxt.isDir(dir) {
<a id="L196"></a><span class="ln">   196</span>				all = append(all, dir)
<a id="L197"></a><span class="ln">   197</span>			}
<a id="L198"></a><span class="ln">   198</span>		}
<a id="L199"></a><span class="ln">   199</span>		for _, p := range ctxt.gopath() {
<a id="L200"></a><span class="ln">   200</span>			dir := ctxt.joinPath(p, &#34;src&#34;)
<a id="L201"></a><span class="ln">   201</span>			if ctxt.isDir(dir) {
<a id="L202"></a><span class="ln">   202</span>				all = append(all, dir)
<a id="L203"></a><span class="ln">   203</span>			}
<a id="L204"></a><span class="ln">   204</span>		}
<a id="L205"></a><span class="ln">   205</span>		return all
<a id="L206"></a><span class="ln">   206</span>	}
<a id="L207"></a><span class="ln">   207</span>	
<a id="L208"></a><span class="ln">   208</span>	<span class="comment">// Default is the default Context for builds.</span>
<a id="L209"></a><span class="ln">   209</span>	<span class="comment">// It uses the GOARCH, GOOS, GOROOT, and GOPATH environment variables</span>
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// if set, or else the compiled code&#39;s GOARCH, GOOS, and GOROOT.</span>
<a id="L211"></a><span class="ln">   211</span>	var Default Context = defaultContext()
<a id="L212"></a><span class="ln">   212</span>	
<a id="L213"></a><span class="ln">   213</span>	var cgoEnabled = map[string]bool{
<a id="L214"></a><span class="ln">   214</span>		&#34;darwin/386&#34;:    true,
<a id="L215"></a><span class="ln">   215</span>		&#34;darwin/amd64&#34;:  true,
<a id="L216"></a><span class="ln">   216</span>		&#34;linux/386&#34;:     true,
<a id="L217"></a><span class="ln">   217</span>		&#34;linux/amd64&#34;:   true,
<a id="L218"></a><span class="ln">   218</span>		&#34;freebsd/386&#34;:   true,
<a id="L219"></a><span class="ln">   219</span>		&#34;freebsd/amd64&#34;: true,
<a id="L220"></a><span class="ln">   220</span>		&#34;windows/386&#34;:   true,
<a id="L221"></a><span class="ln">   221</span>		&#34;windows/amd64&#34;: true,
<a id="L222"></a><span class="ln">   222</span>	}
<a id="L223"></a><span class="ln">   223</span>	
<a id="L224"></a><span class="ln">   224</span>	func defaultContext() Context {
<a id="L225"></a><span class="ln">   225</span>		var c Context
<a id="L226"></a><span class="ln">   226</span>	
<a id="L227"></a><span class="ln">   227</span>		c.GOARCH = envOr(&#34;GOARCH&#34;, runtime.GOARCH)
<a id="L228"></a><span class="ln">   228</span>		c.GOOS = envOr(&#34;GOOS&#34;, runtime.GOOS)
<a id="L229"></a><span class="ln">   229</span>		c.GOROOT = runtime.GOROOT()
<a id="L230"></a><span class="ln">   230</span>		c.GOPATH = envOr(&#34;GOPATH&#34;, &#34;&#34;)
<a id="L231"></a><span class="ln">   231</span>		c.Compiler = runtime.Compiler
<a id="L232"></a><span class="ln">   232</span>	
<a id="L233"></a><span class="ln">   233</span>		switch os.Getenv(&#34;CGO_ENABLED&#34;) {
<a id="L234"></a><span class="ln">   234</span>		case &#34;1&#34;:
<a id="L235"></a><span class="ln">   235</span>			c.CgoEnabled = true
<a id="L236"></a><span class="ln">   236</span>		case &#34;0&#34;:
<a id="L237"></a><span class="ln">   237</span>			c.CgoEnabled = false
<a id="L238"></a><span class="ln">   238</span>		default:
<a id="L239"></a><span class="ln">   239</span>			c.CgoEnabled = cgoEnabled[c.GOOS+&#34;/&#34;+c.GOARCH]
<a id="L240"></a><span class="ln">   240</span>		}
<a id="L241"></a><span class="ln">   241</span>	
<a id="L242"></a><span class="ln">   242</span>		return c
<a id="L243"></a><span class="ln">   243</span>	}
<a id="L244"></a><span class="ln">   244</span>	
<a id="L245"></a><span class="ln">   245</span>	func envOr(name, def string) string {
<a id="L246"></a><span class="ln">   246</span>		s := os.Getenv(name)
<a id="L247"></a><span class="ln">   247</span>		if s == &#34;&#34; {
<a id="L248"></a><span class="ln">   248</span>			return def
<a id="L249"></a><span class="ln">   249</span>		}
<a id="L250"></a><span class="ln">   250</span>		return s
<a id="L251"></a><span class="ln">   251</span>	}
<a id="L252"></a><span class="ln">   252</span>	
<a id="L253"></a><span class="ln">   253</span>	<span class="comment">// An ImportMode controls the behavior of the Import method.</span>
<a id="L254"></a><span class="ln">   254</span>	type ImportMode uint
<a id="L255"></a><span class="ln">   255</span>	
<a id="L256"></a><span class="ln">   256</span>	const (
<a id="L257"></a><span class="ln">   257</span>		<span class="comment">// If FindOnly is set, Import stops after locating the directory</span>
<a id="L258"></a><span class="ln">   258</span>		<span class="comment">// that should contain the sources for a package.  It does not</span>
<a id="L259"></a><span class="ln">   259</span>		<span class="comment">// read any files in the directory.</span>
<a id="L260"></a><span class="ln">   260</span>		FindOnly ImportMode = 1 &lt;&lt; iota
<a id="L261"></a><span class="ln">   261</span>	
<a id="L262"></a><span class="ln">   262</span>		<span class="comment">// If AllowBinary is set, Import can be satisfied by a compiled</span>
<a id="L263"></a><span class="ln">   263</span>		<span class="comment">// package object without corresponding sources.</span>
<a id="L264"></a><span class="ln">   264</span>		AllowBinary
<a id="L265"></a><span class="ln">   265</span>	)
<a id="L266"></a><span class="ln">   266</span>	
<a id="L267"></a><span class="ln">   267</span>	<span class="comment">// A Package describes the Go package found in a directory.</span>
<a id="L268"></a><span class="ln">   268</span>	type Package struct {
<a id="L269"></a><span class="ln">   269</span>		Dir        string <span class="comment">// directory containing package sources</span>
<a id="L270"></a><span class="ln">   270</span>		Name       string <span class="comment">// package name</span>
<a id="L271"></a><span class="ln">   271</span>		Doc        string <span class="comment">// documentation synopsis</span>
<a id="L272"></a><span class="ln">   272</span>		ImportPath string <span class="comment">// import path of package (&#34;&#34; if unknown)</span>
<a id="L273"></a><span class="ln">   273</span>		Root       string <span class="comment">// root of Go tree where this package lives</span>
<a id="L274"></a><span class="ln">   274</span>		SrcRoot    string <span class="comment">// package source root directory (&#34;&#34; if unknown)</span>
<a id="L275"></a><span class="ln">   275</span>		PkgRoot    string <span class="comment">// package install root directory (&#34;&#34; if unknown)</span>
<a id="L276"></a><span class="ln">   276</span>		BinDir     string <span class="comment">// command install directory (&#34;&#34; if unknown)</span>
<a id="L277"></a><span class="ln">   277</span>		Goroot     bool   <span class="comment">// package found in Go root</span>
<a id="L278"></a><span class="ln">   278</span>		PkgObj     string <span class="comment">// installed .a file</span>
<a id="L279"></a><span class="ln">   279</span>	
<a id="L280"></a><span class="ln">   280</span>		<span class="comment">// Source files</span>
<a id="L281"></a><span class="ln">   281</span>		GoFiles   []string <span class="comment">// .go source files (excluding CgoFiles, TestGoFiles, XTestGoFiles)</span>
<a id="L282"></a><span class="ln">   282</span>		CgoFiles  []string <span class="comment">// .go source files that import &#34;C&#34;</span>
<a id="L283"></a><span class="ln">   283</span>		CFiles    []string <span class="comment">// .c source files</span>
<a id="L284"></a><span class="ln">   284</span>		HFiles    []string <span class="comment">// .h source files</span>
<a id="L285"></a><span class="ln">   285</span>		SFiles    []string <span class="comment">// .s source files</span>
<a id="L286"></a><span class="ln">   286</span>		SysoFiles []string <span class="comment">// .syso system object files to add to archive</span>
<a id="L287"></a><span class="ln">   287</span>	
<a id="L288"></a><span class="ln">   288</span>		<span class="comment">// Cgo directives</span>
<a id="L289"></a><span class="ln">   289</span>		CgoPkgConfig []string <span class="comment">// Cgo pkg-config directives</span>
<a id="L290"></a><span class="ln">   290</span>		CgoCFLAGS    []string <span class="comment">// Cgo CFLAGS directives</span>
<a id="L291"></a><span class="ln">   291</span>		CgoLDFLAGS   []string <span class="comment">// Cgo LDFLAGS directives</span>
<a id="L292"></a><span class="ln">   292</span>	
<a id="L293"></a><span class="ln">   293</span>		<span class="comment">// Dependency information</span>
<a id="L294"></a><span class="ln">   294</span>		Imports   []string                    <span class="comment">// imports from GoFiles, CgoFiles</span>
<a id="L295"></a><span class="ln">   295</span>		ImportPos map[string][]token.Position <span class="comment">// line information for Imports</span>
<a id="L296"></a><span class="ln">   296</span>	
<a id="L297"></a><span class="ln">   297</span>		<span class="comment">// Test information</span>
<a id="L298"></a><span class="ln">   298</span>		TestGoFiles    []string                    <span class="comment">// _test.go files in package</span>
<a id="L299"></a><span class="ln">   299</span>		TestImports    []string                    <span class="comment">// imports from TestGoFiles</span>
<a id="L300"></a><span class="ln">   300</span>		TestImportPos  map[string][]token.Position <span class="comment">// line information for TestImports</span>
<a id="L301"></a><span class="ln">   301</span>		XTestGoFiles   []string                    <span class="comment">// _test.go files outside package</span>
<a id="L302"></a><span class="ln">   302</span>		XTestImports   []string                    <span class="comment">// imports from XTestGoFiles</span>
<a id="L303"></a><span class="ln">   303</span>		XTestImportPos map[string][]token.Position <span class="comment">// line information for XTestImports</span>
<a id="L304"></a><span class="ln">   304</span>	}
<a id="L305"></a><span class="ln">   305</span>	
<a id="L306"></a><span class="ln">   306</span>	<span class="comment">// IsCommand reports whether the package is considered a</span>
<a id="L307"></a><span class="ln">   307</span>	<span class="comment">// command to be installed (not just a library).</span>
<a id="L308"></a><span class="ln">   308</span>	<span class="comment">// Packages named &#34;main&#34; are treated as commands.</span>
<a id="L309"></a><span class="ln">   309</span>	func (p *Package) IsCommand() bool {
<a id="L310"></a><span class="ln">   310</span>		return p.Name == &#34;main&#34;
<a id="L311"></a><span class="ln">   311</span>	}
<a id="L312"></a><span class="ln">   312</span>	
<a id="L313"></a><span class="ln">   313</span>	<span class="comment">// ImportDir is like Import but processes the Go package found in</span>
<a id="L314"></a><span class="ln">   314</span>	<span class="comment">// the named directory.</span>
<a id="L315"></a><span class="ln">   315</span>	func (ctxt *Context) ImportDir(dir string, mode ImportMode) (*Package, error) {
<a id="L316"></a><span class="ln">   316</span>		return ctxt.Import(&#34;.&#34;, dir, mode)
<a id="L317"></a><span class="ln">   317</span>	}
<a id="L318"></a><span class="ln">   318</span>	
<a id="L319"></a><span class="ln">   319</span>	<span class="comment">// NoGoError is the error used by Import to describe a directory</span>
<a id="L320"></a><span class="ln">   320</span>	<span class="comment">// containing no Go source files.</span>
<a id="L321"></a><span class="ln">   321</span>	type NoGoError struct {
<a id="L322"></a><span class="ln">   322</span>		Dir string
<a id="L323"></a><span class="ln">   323</span>	}
<a id="L324"></a><span class="ln">   324</span>	
<a id="L325"></a><span class="ln">   325</span>	func (e *NoGoError) Error() string {
<a id="L326"></a><span class="ln">   326</span>		return &#34;no Go source files in &#34; + e.Dir
<a id="L327"></a><span class="ln">   327</span>	}
<a id="L328"></a><span class="ln">   328</span>	
<a id="L329"></a><span class="ln">   329</span>	<span class="comment">// Import returns details about the Go package named by the import path,</span>
<a id="L330"></a><span class="ln">   330</span>	<span class="comment">// interpreting local import paths relative to the srcDir directory.</span>
<a id="L331"></a><span class="ln">   331</span>	<span class="comment">// If the path is a local import path naming a package that can be imported</span>
<a id="L332"></a><span class="ln">   332</span>	<span class="comment">// using a standard import path, the returned package will set p.ImportPath</span>
<a id="L333"></a><span class="ln">   333</span>	<span class="comment">// to that path.</span>
<a id="L334"></a><span class="ln">   334</span>	<span class="comment">//</span>
<a id="L335"></a><span class="ln">   335</span>	<span class="comment">// In the directory containing the package, .go, .c, .h, and .s files are</span>
<a id="L336"></a><span class="ln">   336</span>	<span class="comment">// considered part of the package except for:</span>
<a id="L337"></a><span class="ln">   337</span>	<span class="comment">//</span>
<a id="L338"></a><span class="ln">   338</span>	<span class="comment">//	- .go files in package documentation</span>
<a id="L339"></a><span class="ln">   339</span>	<span class="comment">//	- files starting with _ or . (likely editor temporary files)</span>
<a id="L340"></a><span class="ln">   340</span>	<span class="comment">//	- files with build constraints not satisfied by the context</span>
<a id="L341"></a><span class="ln">   341</span>	<span class="comment">//</span>
<a id="L342"></a><span class="ln">   342</span>	<span class="comment">// If an error occurs, Import returns a non-nil error also returns a non-nil</span>
<a id="L343"></a><span class="ln">   343</span>	<span class="comment">// *Package containing partial information.</span>
<a id="L344"></a><span class="ln">   344</span>	<span class="comment">//</span>
<a id="L345"></a><span class="ln">   345</span>	func (ctxt *Context) Import(path string, srcDir string, mode ImportMode) (*Package, error) {
<a id="L346"></a><span class="ln">   346</span>		p := &amp;Package{
<a id="L347"></a><span class="ln">   347</span>			ImportPath: path,
<a id="L348"></a><span class="ln">   348</span>		}
<a id="L349"></a><span class="ln">   349</span>	
<a id="L350"></a><span class="ln">   350</span>		var pkga string
<a id="L351"></a><span class="ln">   351</span>		var pkgerr error
<a id="L352"></a><span class="ln">   352</span>		switch ctxt.Compiler {
<a id="L353"></a><span class="ln">   353</span>		case &#34;gccgo&#34;:
<a id="L354"></a><span class="ln">   354</span>			dir, elem := pathpkg.Split(p.ImportPath)
<a id="L355"></a><span class="ln">   355</span>			pkga = &#34;pkg/gccgo/&#34; + dir + &#34;lib&#34; + elem + &#34;.a&#34;
<a id="L356"></a><span class="ln">   356</span>		case &#34;gc&#34;:
<a id="L357"></a><span class="ln">   357</span>			pkga = &#34;pkg/&#34; + ctxt.GOOS + &#34;_&#34; + ctxt.GOARCH + &#34;/&#34; + p.ImportPath + &#34;.a&#34;
<a id="L358"></a><span class="ln">   358</span>		default:
<a id="L359"></a><span class="ln">   359</span>			<span class="comment">// Save error for end of function.</span>
<a id="L360"></a><span class="ln">   360</span>			pkgerr = fmt.Errorf(&#34;import %q: unknown compiler %q&#34;, path, ctxt.Compiler)
<a id="L361"></a><span class="ln">   361</span>		}
<a id="L362"></a><span class="ln">   362</span>	
<a id="L363"></a><span class="ln">   363</span>		binaryOnly := false
<a id="L364"></a><span class="ln">   364</span>		if IsLocalImport(path) {
<a id="L365"></a><span class="ln">   365</span>			pkga = &#34;&#34; <span class="comment">// local imports have no installed path</span>
<a id="L366"></a><span class="ln">   366</span>			if srcDir == &#34;&#34; {
<a id="L367"></a><span class="ln">   367</span>				return p, fmt.Errorf(&#34;import %q: import relative to unknown directory&#34;, path)
<a id="L368"></a><span class="ln">   368</span>			}
<a id="L369"></a><span class="ln">   369</span>			if !ctxt.isAbsPath(path) {
<a id="L370"></a><span class="ln">   370</span>				p.Dir = ctxt.joinPath(srcDir, path)
<a id="L371"></a><span class="ln">   371</span>			}
<a id="L372"></a><span class="ln">   372</span>			<span class="comment">// Determine canonical import path, if any.</span>
<a id="L373"></a><span class="ln">   373</span>			if ctxt.GOROOT != &#34;&#34; {
<a id="L374"></a><span class="ln">   374</span>				root := ctxt.joinPath(ctxt.GOROOT, &#34;src&#34;, &#34;pkg&#34;)
<a id="L375"></a><span class="ln">   375</span>				if sub, ok := ctxt.hasSubdir(root, p.Dir); ok {
<a id="L376"></a><span class="ln">   376</span>					p.Goroot = true
<a id="L377"></a><span class="ln">   377</span>					p.ImportPath = sub
<a id="L378"></a><span class="ln">   378</span>					p.Root = ctxt.GOROOT
<a id="L379"></a><span class="ln">   379</span>					goto Found
<a id="L380"></a><span class="ln">   380</span>				}
<a id="L381"></a><span class="ln">   381</span>			}
<a id="L382"></a><span class="ln">   382</span>			all := ctxt.gopath()
<a id="L383"></a><span class="ln">   383</span>			for i, root := range all {
<a id="L384"></a><span class="ln">   384</span>				rootsrc := ctxt.joinPath(root, &#34;src&#34;)
<a id="L385"></a><span class="ln">   385</span>				if sub, ok := ctxt.hasSubdir(rootsrc, p.Dir); ok {
<a id="L386"></a><span class="ln">   386</span>					<span class="comment">// We found a potential import path for dir,</span>
<a id="L387"></a><span class="ln">   387</span>					<span class="comment">// but check that using it wouldn&#39;t find something</span>
<a id="L388"></a><span class="ln">   388</span>					<span class="comment">// else first.</span>
<a id="L389"></a><span class="ln">   389</span>					if ctxt.GOROOT != &#34;&#34; {
<a id="L390"></a><span class="ln">   390</span>						if dir := ctxt.joinPath(ctxt.GOROOT, &#34;src&#34;, &#34;pkg&#34;, sub); ctxt.isDir(dir) {
<a id="L391"></a><span class="ln">   391</span>							goto Found
<a id="L392"></a><span class="ln">   392</span>						}
<a id="L393"></a><span class="ln">   393</span>					}
<a id="L394"></a><span class="ln">   394</span>					for _, earlyRoot := range all[:i] {
<a id="L395"></a><span class="ln">   395</span>						if dir := ctxt.joinPath(earlyRoot, &#34;src&#34;, sub); ctxt.isDir(dir) {
<a id="L396"></a><span class="ln">   396</span>							goto Found
<a id="L397"></a><span class="ln">   397</span>						}
<a id="L398"></a><span class="ln">   398</span>					}
<a id="L399"></a><span class="ln">   399</span>	
<a id="L400"></a><span class="ln">   400</span>					<span class="comment">// sub would not name some other directory instead of this one.</span>
<a id="L401"></a><span class="ln">   401</span>					<span class="comment">// Record it.</span>
<a id="L402"></a><span class="ln">   402</span>					p.ImportPath = sub
<a id="L403"></a><span class="ln">   403</span>					p.Root = root
<a id="L404"></a><span class="ln">   404</span>					goto Found
<a id="L405"></a><span class="ln">   405</span>				}
<a id="L406"></a><span class="ln">   406</span>			}
<a id="L407"></a><span class="ln">   407</span>			<span class="comment">// It&#39;s okay that we didn&#39;t find a root containing dir.</span>
<a id="L408"></a><span class="ln">   408</span>			<span class="comment">// Keep going with the information we have.</span>
<a id="L409"></a><span class="ln">   409</span>		} else {
<a id="L410"></a><span class="ln">   410</span>			if strings.HasPrefix(path, &#34;/&#34;) {
<a id="L411"></a><span class="ln">   411</span>				return p, fmt.Errorf(&#34;import %q: cannot import absolute path&#34;, path)
<a id="L412"></a><span class="ln">   412</span>			}
<a id="L413"></a><span class="ln">   413</span>			<span class="comment">// Determine directory from import path.</span>
<a id="L414"></a><span class="ln">   414</span>			if ctxt.GOROOT != &#34;&#34; {
<a id="L415"></a><span class="ln">   415</span>				dir := ctxt.joinPath(ctxt.GOROOT, &#34;src&#34;, &#34;pkg&#34;, path)
<a id="L416"></a><span class="ln">   416</span>				isDir := ctxt.isDir(dir)
<a id="L417"></a><span class="ln">   417</span>				binaryOnly = !isDir &amp;&amp; mode&amp;AllowBinary != 0 &amp;&amp; pkga != &#34;&#34; &amp;&amp; ctxt.isFile(ctxt.joinPath(ctxt.GOROOT, pkga))
<a id="L418"></a><span class="ln">   418</span>				if isDir || binaryOnly {
<a id="L419"></a><span class="ln">   419</span>					p.Dir = dir
<a id="L420"></a><span class="ln">   420</span>					p.Goroot = true
<a id="L421"></a><span class="ln">   421</span>					p.Root = ctxt.GOROOT
<a id="L422"></a><span class="ln">   422</span>					goto Found
<a id="L423"></a><span class="ln">   423</span>				}
<a id="L424"></a><span class="ln">   424</span>			}
<a id="L425"></a><span class="ln">   425</span>			for _, root := range ctxt.gopath() {
<a id="L426"></a><span class="ln">   426</span>				dir := ctxt.joinPath(root, &#34;src&#34;, path)
<a id="L427"></a><span class="ln">   427</span>				isDir := ctxt.isDir(dir)
<a id="L428"></a><span class="ln">   428</span>				binaryOnly = !isDir &amp;&amp; mode&amp;AllowBinary != 0 &amp;&amp; pkga != &#34;&#34; &amp;&amp; ctxt.isFile(ctxt.joinPath(root, pkga))
<a id="L429"></a><span class="ln">   429</span>				if isDir || binaryOnly {
<a id="L430"></a><span class="ln">   430</span>					p.Dir = dir
<a id="L431"></a><span class="ln">   431</span>					p.Root = root
<a id="L432"></a><span class="ln">   432</span>					goto Found
<a id="L433"></a><span class="ln">   433</span>				}
<a id="L434"></a><span class="ln">   434</span>			}
<a id="L435"></a><span class="ln">   435</span>			return p, fmt.Errorf(&#34;import %q: cannot find package&#34;, path)
<a id="L436"></a><span class="ln">   436</span>		}
<a id="L437"></a><span class="ln">   437</span>	
<a id="L438"></a><span class="ln">   438</span>	Found:
<a id="L439"></a><span class="ln">   439</span>		if p.Root != &#34;&#34; {
<a id="L440"></a><span class="ln">   440</span>			if p.Goroot {
<a id="L441"></a><span class="ln">   441</span>				p.SrcRoot = ctxt.joinPath(p.Root, &#34;src&#34;, &#34;pkg&#34;)
<a id="L442"></a><span class="ln">   442</span>			} else {
<a id="L443"></a><span class="ln">   443</span>				p.SrcRoot = ctxt.joinPath(p.Root, &#34;src&#34;)
<a id="L444"></a><span class="ln">   444</span>			}
<a id="L445"></a><span class="ln">   445</span>			p.PkgRoot = ctxt.joinPath(p.Root, &#34;pkg&#34;)
<a id="L446"></a><span class="ln">   446</span>			p.BinDir = ctxt.joinPath(p.Root, &#34;bin&#34;)
<a id="L447"></a><span class="ln">   447</span>			if pkga != &#34;&#34; {
<a id="L448"></a><span class="ln">   448</span>				p.PkgObj = ctxt.joinPath(p.Root, pkga)
<a id="L449"></a><span class="ln">   449</span>			}
<a id="L450"></a><span class="ln">   450</span>		}
<a id="L451"></a><span class="ln">   451</span>	
<a id="L452"></a><span class="ln">   452</span>		if mode&amp;FindOnly != 0 {
<a id="L453"></a><span class="ln">   453</span>			return p, pkgerr
<a id="L454"></a><span class="ln">   454</span>		}
<a id="L455"></a><span class="ln">   455</span>		if binaryOnly &amp;&amp; (mode&amp;AllowBinary) != 0 {
<a id="L456"></a><span class="ln">   456</span>			return p, pkgerr
<a id="L457"></a><span class="ln">   457</span>		}
<a id="L458"></a><span class="ln">   458</span>	
<a id="L459"></a><span class="ln">   459</span>		dirs, err := ctxt.readDir(p.Dir)
<a id="L460"></a><span class="ln">   460</span>		if err != nil {
<a id="L461"></a><span class="ln">   461</span>			return p, err
<a id="L462"></a><span class="ln">   462</span>		}
<a id="L463"></a><span class="ln">   463</span>	
<a id="L464"></a><span class="ln">   464</span>		var Sfiles []string <span class="comment">// files with &#34;.S&#34; (capital S)</span>
<a id="L465"></a><span class="ln">   465</span>		var firstFile string
<a id="L466"></a><span class="ln">   466</span>		imported := make(map[string][]token.Position)
<a id="L467"></a><span class="ln">   467</span>		testImported := make(map[string][]token.Position)
<a id="L468"></a><span class="ln">   468</span>		xTestImported := make(map[string][]token.Position)
<a id="L469"></a><span class="ln">   469</span>		fset := token.NewFileSet()
<a id="L470"></a><span class="ln">   470</span>		for _, d := range dirs {
<a id="L471"></a><span class="ln">   471</span>			if d.IsDir() {
<a id="L472"></a><span class="ln">   472</span>				continue
<a id="L473"></a><span class="ln">   473</span>			}
<a id="L474"></a><span class="ln">   474</span>			name := d.Name()
<a id="L475"></a><span class="ln">   475</span>			if strings.HasPrefix(name, &#34;_&#34;) ||
<a id="L476"></a><span class="ln">   476</span>				strings.HasPrefix(name, &#34;.&#34;) {
<a id="L477"></a><span class="ln">   477</span>				continue
<a id="L478"></a><span class="ln">   478</span>			}
<a id="L479"></a><span class="ln">   479</span>			if !ctxt.UseAllFiles &amp;&amp; !ctxt.goodOSArchFile(name) {
<a id="L480"></a><span class="ln">   480</span>				continue
<a id="L481"></a><span class="ln">   481</span>			}
<a id="L482"></a><span class="ln">   482</span>	
<a id="L483"></a><span class="ln">   483</span>			i := strings.LastIndex(name, &#34;.&#34;)
<a id="L484"></a><span class="ln">   484</span>			if i &lt; 0 {
<a id="L485"></a><span class="ln">   485</span>				i = len(name)
<a id="L486"></a><span class="ln">   486</span>			}
<a id="L487"></a><span class="ln">   487</span>			ext := name[i:]
<a id="L488"></a><span class="ln">   488</span>			switch ext {
<a id="L489"></a><span class="ln">   489</span>			case &#34;.go&#34;, &#34;.c&#34;, &#34;.s&#34;, &#34;.h&#34;, &#34;.S&#34;:
<a id="L490"></a><span class="ln">   490</span>				<span class="comment">// tentatively okay - read to make sure</span>
<a id="L491"></a><span class="ln">   491</span>			case &#34;.syso&#34;:
<a id="L492"></a><span class="ln">   492</span>				<span class="comment">// binary objects to add to package archive</span>
<a id="L493"></a><span class="ln">   493</span>				<span class="comment">// Likely of the form foo_windows.syso, but</span>
<a id="L494"></a><span class="ln">   494</span>				<span class="comment">// the name was vetted above with goodOSArchFile.</span>
<a id="L495"></a><span class="ln">   495</span>				p.SysoFiles = append(p.SysoFiles, name)
<a id="L496"></a><span class="ln">   496</span>				continue
<a id="L497"></a><span class="ln">   497</span>			default:
<a id="L498"></a><span class="ln">   498</span>				<span class="comment">// skip</span>
<a id="L499"></a><span class="ln">   499</span>				continue
<a id="L500"></a><span class="ln">   500</span>			}
<a id="L501"></a><span class="ln">   501</span>	
<a id="L502"></a><span class="ln">   502</span>			filename := ctxt.joinPath(p.Dir, name)
<a id="L503"></a><span class="ln">   503</span>			f, err := ctxt.openFile(filename)
<a id="L504"></a><span class="ln">   504</span>			if err != nil {
<a id="L505"></a><span class="ln">   505</span>				return p, err
<a id="L506"></a><span class="ln">   506</span>			}
<a id="L507"></a><span class="ln">   507</span>			data, err := ioutil.ReadAll(f)
<a id="L508"></a><span class="ln">   508</span>			f.Close()
<a id="L509"></a><span class="ln">   509</span>			if err != nil {
<a id="L510"></a><span class="ln">   510</span>				return p, fmt.Errorf(&#34;read %s: %v&#34;, filename, err)
<a id="L511"></a><span class="ln">   511</span>			}
<a id="L512"></a><span class="ln">   512</span>	
<a id="L513"></a><span class="ln">   513</span>			<span class="comment">// Look for +build comments to accept or reject the file.</span>
<a id="L514"></a><span class="ln">   514</span>			if !ctxt.UseAllFiles &amp;&amp; !ctxt.shouldBuild(data) {
<a id="L515"></a><span class="ln">   515</span>				continue
<a id="L516"></a><span class="ln">   516</span>			}
<a id="L517"></a><span class="ln">   517</span>	
<a id="L518"></a><span class="ln">   518</span>			<span class="comment">// Going to save the file.  For non-Go files, can stop here.</span>
<a id="L519"></a><span class="ln">   519</span>			switch ext {
<a id="L520"></a><span class="ln">   520</span>			case &#34;.c&#34;:
<a id="L521"></a><span class="ln">   521</span>				p.CFiles = append(p.CFiles, name)
<a id="L522"></a><span class="ln">   522</span>				continue
<a id="L523"></a><span class="ln">   523</span>			case &#34;.h&#34;:
<a id="L524"></a><span class="ln">   524</span>				p.HFiles = append(p.HFiles, name)
<a id="L525"></a><span class="ln">   525</span>				continue
<a id="L526"></a><span class="ln">   526</span>			case &#34;.s&#34;:
<a id="L527"></a><span class="ln">   527</span>				p.SFiles = append(p.SFiles, name)
<a id="L528"></a><span class="ln">   528</span>				continue
<a id="L529"></a><span class="ln">   529</span>			case &#34;.S&#34;:
<a id="L530"></a><span class="ln">   530</span>				Sfiles = append(Sfiles, name)
<a id="L531"></a><span class="ln">   531</span>				continue
<a id="L532"></a><span class="ln">   532</span>			}
<a id="L533"></a><span class="ln">   533</span>	
<a id="L534"></a><span class="ln">   534</span>			pf, err := parser.ParseFile(fset, filename, data, parser.ImportsOnly|parser.ParseComments)
<a id="L535"></a><span class="ln">   535</span>			if err != nil {
<a id="L536"></a><span class="ln">   536</span>				return p, err
<a id="L537"></a><span class="ln">   537</span>			}
<a id="L538"></a><span class="ln">   538</span>	
<a id="L539"></a><span class="ln">   539</span>			pkg := string(pf.Name.Name)
<a id="L540"></a><span class="ln">   540</span>			if pkg == &#34;documentation&#34; {
<a id="L541"></a><span class="ln">   541</span>				continue
<a id="L542"></a><span class="ln">   542</span>			}
<a id="L543"></a><span class="ln">   543</span>	
<a id="L544"></a><span class="ln">   544</span>			isTest := strings.HasSuffix(name, &#34;_test.go&#34;)
<a id="L545"></a><span class="ln">   545</span>			isXTest := false
<a id="L546"></a><span class="ln">   546</span>			if isTest &amp;&amp; strings.HasSuffix(pkg, &#34;_test&#34;) {
<a id="L547"></a><span class="ln">   547</span>				isXTest = true
<a id="L548"></a><span class="ln">   548</span>				pkg = pkg[:len(pkg)-len(&#34;_test&#34;)]
<a id="L549"></a><span class="ln">   549</span>			}
<a id="L550"></a><span class="ln">   550</span>	
<a id="L551"></a><span class="ln">   551</span>			if p.Name == &#34;&#34; {
<a id="L552"></a><span class="ln">   552</span>				p.Name = pkg
<a id="L553"></a><span class="ln">   553</span>				firstFile = name
<a id="L554"></a><span class="ln">   554</span>			} else if pkg != p.Name {
<a id="L555"></a><span class="ln">   555</span>				return p, fmt.Errorf(&#34;found packages %s (%s) and %s (%s) in %s&#34;, p.Name, firstFile, pkg, name, p.Dir)
<a id="L556"></a><span class="ln">   556</span>			}
<a id="L557"></a><span class="ln">   557</span>			if pf.Doc != nil &amp;&amp; p.Doc == &#34;&#34; {
<a id="L558"></a><span class="ln">   558</span>				p.Doc = doc.Synopsis(pf.Doc.Text())
<a id="L559"></a><span class="ln">   559</span>			}
<a id="L560"></a><span class="ln">   560</span>	
<a id="L561"></a><span class="ln">   561</span>			<span class="comment">// Record imports and information about cgo.</span>
<a id="L562"></a><span class="ln">   562</span>			isCgo := false
<a id="L563"></a><span class="ln">   563</span>			for _, decl := range pf.Decls {
<a id="L564"></a><span class="ln">   564</span>				d, ok := decl.(*ast.GenDecl)
<a id="L565"></a><span class="ln">   565</span>				if !ok {
<a id="L566"></a><span class="ln">   566</span>					continue
<a id="L567"></a><span class="ln">   567</span>				}
<a id="L568"></a><span class="ln">   568</span>				for _, dspec := range d.Specs {
<a id="L569"></a><span class="ln">   569</span>					spec, ok := dspec.(*ast.ImportSpec)
<a id="L570"></a><span class="ln">   570</span>					if !ok {
<a id="L571"></a><span class="ln">   571</span>						continue
<a id="L572"></a><span class="ln">   572</span>					}
<a id="L573"></a><span class="ln">   573</span>					quoted := string(spec.Path.Value)
<a id="L574"></a><span class="ln">   574</span>					path, err := strconv.Unquote(quoted)
<a id="L575"></a><span class="ln">   575</span>					if err != nil {
<a id="L576"></a><span class="ln">   576</span>						log.Panicf(&#34;%s: parser returned invalid quoted string: &lt;%s&gt;&#34;, filename, quoted)
<a id="L577"></a><span class="ln">   577</span>					}
<a id="L578"></a><span class="ln">   578</span>					if isXTest {
<a id="L579"></a><span class="ln">   579</span>						xTestImported[path] = append(xTestImported[path], fset.Position(spec.Pos()))
<a id="L580"></a><span class="ln">   580</span>					} else if isTest {
<a id="L581"></a><span class="ln">   581</span>						testImported[path] = append(testImported[path], fset.Position(spec.Pos()))
<a id="L582"></a><span class="ln">   582</span>					} else {
<a id="L583"></a><span class="ln">   583</span>						imported[path] = append(imported[path], fset.Position(spec.Pos()))
<a id="L584"></a><span class="ln">   584</span>					}
<a id="L585"></a><span class="ln">   585</span>					if path == &#34;C&#34; {
<a id="L586"></a><span class="ln">   586</span>						if isTest {
<a id="L587"></a><span class="ln">   587</span>							return p, fmt.Errorf(&#34;use of cgo in test %s not supported&#34;, filename)
<a id="L588"></a><span class="ln">   588</span>						}
<a id="L589"></a><span class="ln">   589</span>						cg := spec.Doc
<a id="L590"></a><span class="ln">   590</span>						if cg == nil &amp;&amp; len(d.Specs) == 1 {
<a id="L591"></a><span class="ln">   591</span>							cg = d.Doc
<a id="L592"></a><span class="ln">   592</span>						}
<a id="L593"></a><span class="ln">   593</span>						if cg != nil {
<a id="L594"></a><span class="ln">   594</span>							if err := ctxt.saveCgo(filename, p, cg); err != nil {
<a id="L595"></a><span class="ln">   595</span>								return p, err
<a id="L596"></a><span class="ln">   596</span>							}
<a id="L597"></a><span class="ln">   597</span>						}
<a id="L598"></a><span class="ln">   598</span>						isCgo = true
<a id="L599"></a><span class="ln">   599</span>					}
<a id="L600"></a><span class="ln">   600</span>				}
<a id="L601"></a><span class="ln">   601</span>			}
<a id="L602"></a><span class="ln">   602</span>			if isCgo {
<a id="L603"></a><span class="ln">   603</span>				if ctxt.CgoEnabled {
<a id="L604"></a><span class="ln">   604</span>					p.CgoFiles = append(p.CgoFiles, name)
<a id="L605"></a><span class="ln">   605</span>				}
<a id="L606"></a><span class="ln">   606</span>			} else if isXTest {
<a id="L607"></a><span class="ln">   607</span>				p.XTestGoFiles = append(p.XTestGoFiles, name)
<a id="L608"></a><span class="ln">   608</span>			} else if isTest {
<a id="L609"></a><span class="ln">   609</span>				p.TestGoFiles = append(p.TestGoFiles, name)
<a id="L610"></a><span class="ln">   610</span>			} else {
<a id="L611"></a><span class="ln">   611</span>				p.GoFiles = append(p.GoFiles, name)
<a id="L612"></a><span class="ln">   612</span>			}
<a id="L613"></a><span class="ln">   613</span>		}
<a id="L614"></a><span class="ln">   614</span>		if p.Name == &#34;&#34; {
<a id="L615"></a><span class="ln">   615</span>			return p, &amp;NoGoError{p.Dir}
<a id="L616"></a><span class="ln">   616</span>		}
<a id="L617"></a><span class="ln">   617</span>	
<a id="L618"></a><span class="ln">   618</span>		p.Imports, p.ImportPos = cleanImports(imported)
<a id="L619"></a><span class="ln">   619</span>		p.TestImports, p.TestImportPos = cleanImports(testImported)
<a id="L620"></a><span class="ln">   620</span>		p.XTestImports, p.XTestImportPos = cleanImports(xTestImported)
<a id="L621"></a><span class="ln">   621</span>	
<a id="L622"></a><span class="ln">   622</span>		<span class="comment">// add the .S files only if we are using cgo</span>
<a id="L623"></a><span class="ln">   623</span>		<span class="comment">// (which means gcc will compile them).</span>
<a id="L624"></a><span class="ln">   624</span>		<span class="comment">// The standard assemblers expect .s files.</span>
<a id="L625"></a><span class="ln">   625</span>		if len(p.CgoFiles) &gt; 0 {
<a id="L626"></a><span class="ln">   626</span>			p.SFiles = append(p.SFiles, Sfiles...)
<a id="L627"></a><span class="ln">   627</span>			sort.Strings(p.SFiles)
<a id="L628"></a><span class="ln">   628</span>		}
<a id="L629"></a><span class="ln">   629</span>	
<a id="L630"></a><span class="ln">   630</span>		return p, pkgerr
<a id="L631"></a><span class="ln">   631</span>	}
<a id="L632"></a><span class="ln">   632</span>	
<a id="L633"></a><span class="ln">   633</span>	func cleanImports(m map[string][]token.Position) ([]string, map[string][]token.Position) {
<a id="L634"></a><span class="ln">   634</span>		all := make([]string, 0, len(m))
<a id="L635"></a><span class="ln">   635</span>		for path := range m {
<a id="L636"></a><span class="ln">   636</span>			all = append(all, path)
<a id="L637"></a><span class="ln">   637</span>		}
<a id="L638"></a><span class="ln">   638</span>		sort.Strings(all)
<a id="L639"></a><span class="ln">   639</span>		return all, m
<a id="L640"></a><span class="ln">   640</span>	}
<a id="L641"></a><span class="ln">   641</span>	
<a id="L642"></a><span class="ln">   642</span>	<span class="comment">// Import is shorthand for Default.Import.</span>
<a id="L643"></a><span class="ln">   643</span>	func Import(path, srcDir string, mode ImportMode) (*Package, error) {
<a id="L644"></a><span class="ln">   644</span>		return Default.Import(path, srcDir, mode)
<a id="L645"></a><span class="ln">   645</span>	}
<a id="L646"></a><span class="ln">   646</span>	
<a id="L647"></a><span class="ln">   647</span>	<span class="comment">// ImportDir is shorthand for Default.ImportDir.</span>
<a id="L648"></a><span class="ln">   648</span>	func ImportDir(dir string, mode ImportMode) (*Package, error) {
<a id="L649"></a><span class="ln">   649</span>		return Default.ImportDir(dir, mode)
<a id="L650"></a><span class="ln">   650</span>	}
<a id="L651"></a><span class="ln">   651</span>	
<a id="L652"></a><span class="ln">   652</span>	var slashslash = []byte(&#34;//&#34;)
<a id="L653"></a><span class="ln">   653</span>	
<a id="L654"></a><span class="ln">   654</span>	<span class="comment">// shouldBuild reports whether it is okay to use this file,</span>
<a id="L655"></a><span class="ln">   655</span>	<span class="comment">// The rule is that in the file&#39;s leading run of // comments</span>
<a id="L656"></a><span class="ln">   656</span>	<span class="comment">// and blank lines, which must be followed by a blank line</span>
<a id="L657"></a><span class="ln">   657</span>	<span class="comment">// (to avoid including a Go package clause doc comment),</span>
<a id="L658"></a><span class="ln">   658</span>	<span class="comment">// lines beginning with &#39;// +build&#39; are taken as build directives.</span>
<a id="L659"></a><span class="ln">   659</span>	<span class="comment">//</span>
<a id="L660"></a><span class="ln">   660</span>	<span class="comment">// The file is accepted only if each such line lists something</span>
<a id="L661"></a><span class="ln">   661</span>	<span class="comment">// matching the file.  For example:</span>
<a id="L662"></a><span class="ln">   662</span>	<span class="comment">//</span>
<a id="L663"></a><span class="ln">   663</span>	<span class="comment">//	// +build windows linux</span>
<a id="L664"></a><span class="ln">   664</span>	<span class="comment">//</span>
<a id="L665"></a><span class="ln">   665</span>	<span class="comment">// marks the file as applicable only on Windows and Linux.</span>
<a id="L666"></a><span class="ln">   666</span>	<span class="comment">//</span>
<a id="L667"></a><span class="ln">   667</span>	func (ctxt *Context) shouldBuild(content []byte) bool {
<a id="L668"></a><span class="ln">   668</span>		<span class="comment">// Pass 1. Identify leading run of // comments and blank lines,</span>
<a id="L669"></a><span class="ln">   669</span>		<span class="comment">// which must be followed by a blank line.</span>
<a id="L670"></a><span class="ln">   670</span>		end := 0
<a id="L671"></a><span class="ln">   671</span>		p := content
<a id="L672"></a><span class="ln">   672</span>		for len(p) &gt; 0 {
<a id="L673"></a><span class="ln">   673</span>			line := p
<a id="L674"></a><span class="ln">   674</span>			if i := bytes.IndexByte(line, &#39;\n&#39;); i &gt;= 0 {
<a id="L675"></a><span class="ln">   675</span>				line, p = line[:i], p[i+1:]
<a id="L676"></a><span class="ln">   676</span>			} else {
<a id="L677"></a><span class="ln">   677</span>				p = p[len(p):]
<a id="L678"></a><span class="ln">   678</span>			}
<a id="L679"></a><span class="ln">   679</span>			line = bytes.TrimSpace(line)
<a id="L680"></a><span class="ln">   680</span>			if len(line) == 0 { <span class="comment">// Blank line</span>
<a id="L681"></a><span class="ln">   681</span>				end = cap(content) - cap(line) <span class="comment">// &amp;line[0] - &amp;content[0]</span>
<a id="L682"></a><span class="ln">   682</span>				continue
<a id="L683"></a><span class="ln">   683</span>			}
<a id="L684"></a><span class="ln">   684</span>			if !bytes.HasPrefix(line, slashslash) { <span class="comment">// Not comment line</span>
<a id="L685"></a><span class="ln">   685</span>				break
<a id="L686"></a><span class="ln">   686</span>			}
<a id="L687"></a><span class="ln">   687</span>		}
<a id="L688"></a><span class="ln">   688</span>		content = content[:end]
<a id="L689"></a><span class="ln">   689</span>	
<a id="L690"></a><span class="ln">   690</span>		<span class="comment">// Pass 2.  Process each line in the run.</span>
<a id="L691"></a><span class="ln">   691</span>		p = content
<a id="L692"></a><span class="ln">   692</span>		for len(p) &gt; 0 {
<a id="L693"></a><span class="ln">   693</span>			line := p
<a id="L694"></a><span class="ln">   694</span>			if i := bytes.IndexByte(line, &#39;\n&#39;); i &gt;= 0 {
<a id="L695"></a><span class="ln">   695</span>				line, p = line[:i], p[i+1:]
<a id="L696"></a><span class="ln">   696</span>			} else {
<a id="L697"></a><span class="ln">   697</span>				p = p[len(p):]
<a id="L698"></a><span class="ln">   698</span>			}
<a id="L699"></a><span class="ln">   699</span>			line = bytes.TrimSpace(line)
<a id="L700"></a><span class="ln">   700</span>			if bytes.HasPrefix(line, slashslash) {
<a id="L701"></a><span class="ln">   701</span>				line = bytes.TrimSpace(line[len(slashslash):])
<a id="L702"></a><span class="ln">   702</span>				if len(line) &gt; 0 &amp;&amp; line[0] == &#39;+&#39; {
<a id="L703"></a><span class="ln">   703</span>					<span class="comment">// Looks like a comment +line.</span>
<a id="L704"></a><span class="ln">   704</span>					f := strings.Fields(string(line))
<a id="L705"></a><span class="ln">   705</span>					if f[0] == &#34;+build&#34; {
<a id="L706"></a><span class="ln">   706</span>						ok := false
<a id="L707"></a><span class="ln">   707</span>						for _, tok := range f[1:] {
<a id="L708"></a><span class="ln">   708</span>							if ctxt.match(tok) {
<a id="L709"></a><span class="ln">   709</span>								ok = true
<a id="L710"></a><span class="ln">   710</span>								break
<a id="L711"></a><span class="ln">   711</span>							}
<a id="L712"></a><span class="ln">   712</span>						}
<a id="L713"></a><span class="ln">   713</span>						if !ok {
<a id="L714"></a><span class="ln">   714</span>							return false <span class="comment">// this one doesn&#39;t match</span>
<a id="L715"></a><span class="ln">   715</span>						}
<a id="L716"></a><span class="ln">   716</span>					}
<a id="L717"></a><span class="ln">   717</span>				}
<a id="L718"></a><span class="ln">   718</span>			}
<a id="L719"></a><span class="ln">   719</span>		}
<a id="L720"></a><span class="ln">   720</span>		return true <span class="comment">// everything matches</span>
<a id="L721"></a><span class="ln">   721</span>	}
<a id="L722"></a><span class="ln">   722</span>	
<a id="L723"></a><span class="ln">   723</span>	<span class="comment">// saveCgo saves the information from the #cgo lines in the import &#34;C&#34; comment.</span>
<a id="L724"></a><span class="ln">   724</span>	<span class="comment">// These lines set CFLAGS and LDFLAGS and pkg-config directives that affect</span>
<a id="L725"></a><span class="ln">   725</span>	<span class="comment">// the way cgo&#39;s C code is built.</span>
<a id="L726"></a><span class="ln">   726</span>	<span class="comment">//</span>
<a id="L727"></a><span class="ln">   727</span>	<span class="comment">// TODO(rsc): This duplicates code in cgo.</span>
<a id="L728"></a><span class="ln">   728</span>	<span class="comment">// Once the dust settles, remove this code from cgo.</span>
<a id="L729"></a><span class="ln">   729</span>	func (ctxt *Context) saveCgo(filename string, di *Package, cg *ast.CommentGroup) error {
<a id="L730"></a><span class="ln">   730</span>		text := cg.Text()
<a id="L731"></a><span class="ln">   731</span>		for _, line := range strings.Split(text, &#34;\n&#34;) {
<a id="L732"></a><span class="ln">   732</span>			orig := line
<a id="L733"></a><span class="ln">   733</span>	
<a id="L734"></a><span class="ln">   734</span>			<span class="comment">// Line is</span>
<a id="L735"></a><span class="ln">   735</span>			<span class="comment">//	#cgo [GOOS/GOARCH...] LDFLAGS: stuff</span>
<a id="L736"></a><span class="ln">   736</span>			<span class="comment">//</span>
<a id="L737"></a><span class="ln">   737</span>			line = strings.TrimSpace(line)
<a id="L738"></a><span class="ln">   738</span>			if len(line) &lt; 5 || line[:4] != &#34;#cgo&#34; || (line[4] != &#39; &#39; &amp;&amp; line[4] != &#39;\t&#39;) {
<a id="L739"></a><span class="ln">   739</span>				continue
<a id="L740"></a><span class="ln">   740</span>			}
<a id="L741"></a><span class="ln">   741</span>	
<a id="L742"></a><span class="ln">   742</span>			<span class="comment">// Split at colon.</span>
<a id="L743"></a><span class="ln">   743</span>			line = strings.TrimSpace(line[4:])
<a id="L744"></a><span class="ln">   744</span>			i := strings.Index(line, &#34;:&#34;)
<a id="L745"></a><span class="ln">   745</span>			if i &lt; 0 {
<a id="L746"></a><span class="ln">   746</span>				return fmt.Errorf(&#34;%s: invalid #cgo line: %s&#34;, filename, orig)
<a id="L747"></a><span class="ln">   747</span>			}
<a id="L748"></a><span class="ln">   748</span>			line, argstr := line[:i], line[i+1:]
<a id="L749"></a><span class="ln">   749</span>	
<a id="L750"></a><span class="ln">   750</span>			<span class="comment">// Parse GOOS/GOARCH stuff.</span>
<a id="L751"></a><span class="ln">   751</span>			f := strings.Fields(line)
<a id="L752"></a><span class="ln">   752</span>			if len(f) &lt; 1 {
<a id="L753"></a><span class="ln">   753</span>				return fmt.Errorf(&#34;%s: invalid #cgo line: %s&#34;, filename, orig)
<a id="L754"></a><span class="ln">   754</span>			}
<a id="L755"></a><span class="ln">   755</span>	
<a id="L756"></a><span class="ln">   756</span>			cond, verb := f[:len(f)-1], f[len(f)-1]
<a id="L757"></a><span class="ln">   757</span>			if len(cond) &gt; 0 {
<a id="L758"></a><span class="ln">   758</span>				ok := false
<a id="L759"></a><span class="ln">   759</span>				for _, c := range cond {
<a id="L760"></a><span class="ln">   760</span>					if ctxt.match(c) {
<a id="L761"></a><span class="ln">   761</span>						ok = true
<a id="L762"></a><span class="ln">   762</span>						break
<a id="L763"></a><span class="ln">   763</span>					}
<a id="L764"></a><span class="ln">   764</span>				}
<a id="L765"></a><span class="ln">   765</span>				if !ok {
<a id="L766"></a><span class="ln">   766</span>					continue
<a id="L767"></a><span class="ln">   767</span>				}
<a id="L768"></a><span class="ln">   768</span>			}
<a id="L769"></a><span class="ln">   769</span>	
<a id="L770"></a><span class="ln">   770</span>			args, err := splitQuoted(argstr)
<a id="L771"></a><span class="ln">   771</span>			if err != nil {
<a id="L772"></a><span class="ln">   772</span>				return fmt.Errorf(&#34;%s: invalid #cgo line: %s&#34;, filename, orig)
<a id="L773"></a><span class="ln">   773</span>			}
<a id="L774"></a><span class="ln">   774</span>			for _, arg := range args {
<a id="L775"></a><span class="ln">   775</span>				if !safeName(arg) {
<a id="L776"></a><span class="ln">   776</span>					return fmt.Errorf(&#34;%s: malformed #cgo argument: %s&#34;, filename, arg)
<a id="L777"></a><span class="ln">   777</span>				}
<a id="L778"></a><span class="ln">   778</span>			}
<a id="L779"></a><span class="ln">   779</span>	
<a id="L780"></a><span class="ln">   780</span>			switch verb {
<a id="L781"></a><span class="ln">   781</span>			case &#34;CFLAGS&#34;:
<a id="L782"></a><span class="ln">   782</span>				di.CgoCFLAGS = append(di.CgoCFLAGS, args...)
<a id="L783"></a><span class="ln">   783</span>			case &#34;LDFLAGS&#34;:
<a id="L784"></a><span class="ln">   784</span>				di.CgoLDFLAGS = append(di.CgoLDFLAGS, args...)
<a id="L785"></a><span class="ln">   785</span>			case &#34;pkg-config&#34;:
<a id="L786"></a><span class="ln">   786</span>				di.CgoPkgConfig = append(di.CgoPkgConfig, args...)
<a id="L787"></a><span class="ln">   787</span>			default:
<a id="L788"></a><span class="ln">   788</span>				return fmt.Errorf(&#34;%s: invalid #cgo verb: %s&#34;, filename, orig)
<a id="L789"></a><span class="ln">   789</span>			}
<a id="L790"></a><span class="ln">   790</span>		}
<a id="L791"></a><span class="ln">   791</span>		return nil
<a id="L792"></a><span class="ln">   792</span>	}
<a id="L793"></a><span class="ln">   793</span>	
<a id="L794"></a><span class="ln">   794</span>	var safeBytes = []byte(&#34;+-.,/0123456789=ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz:&#34;)
<a id="L795"></a><span class="ln">   795</span>	
<a id="L796"></a><span class="ln">   796</span>	func safeName(s string) bool {
<a id="L797"></a><span class="ln">   797</span>		if s == &#34;&#34; {
<a id="L798"></a><span class="ln">   798</span>			return false
<a id="L799"></a><span class="ln">   799</span>		}
<a id="L800"></a><span class="ln">   800</span>		for i := 0; i &lt; len(s); i++ {
<a id="L801"></a><span class="ln">   801</span>			if c := s[i]; c &lt; 0x80 &amp;&amp; bytes.IndexByte(safeBytes, c) &lt; 0 {
<a id="L802"></a><span class="ln">   802</span>				return false
<a id="L803"></a><span class="ln">   803</span>			}
<a id="L804"></a><span class="ln">   804</span>		}
<a id="L805"></a><span class="ln">   805</span>		return true
<a id="L806"></a><span class="ln">   806</span>	}
<a id="L807"></a><span class="ln">   807</span>	
<a id="L808"></a><span class="ln">   808</span>	<span class="comment">// splitQuoted splits the string s around each instance of one or more consecutive</span>
<a id="L809"></a><span class="ln">   809</span>	<span class="comment">// white space characters while taking into account quotes and escaping, and</span>
<a id="L810"></a><span class="ln">   810</span>	<span class="comment">// returns an array of substrings of s or an empty list if s contains only white space.</span>
<a id="L811"></a><span class="ln">   811</span>	<span class="comment">// Single quotes and double quotes are recognized to prevent splitting within the</span>
<a id="L812"></a><span class="ln">   812</span>	<span class="comment">// quoted region, and are removed from the resulting substrings. If a quote in s</span>
<a id="L813"></a><span class="ln">   813</span>	<span class="comment">// isn&#39;t closed err will be set and r will have the unclosed argument as the</span>
<a id="L814"></a><span class="ln">   814</span>	<span class="comment">// last element.  The backslash is used for escaping.</span>
<a id="L815"></a><span class="ln">   815</span>	<span class="comment">//</span>
<a id="L816"></a><span class="ln">   816</span>	<span class="comment">// For example, the following string:</span>
<a id="L817"></a><span class="ln">   817</span>	<span class="comment">//</span>
<a id="L818"></a><span class="ln">   818</span>	<span class="comment">//     a b:&#34;c d&#34; &#39;e&#39;&#39;f&#39;  &#34;g\&#34;&#34;</span>
<a id="L819"></a><span class="ln">   819</span>	<span class="comment">//</span>
<a id="L820"></a><span class="ln">   820</span>	<span class="comment">// Would be parsed as:</span>
<a id="L821"></a><span class="ln">   821</span>	<span class="comment">//</span>
<a id="L822"></a><span class="ln">   822</span>	<span class="comment">//     []string{&#34;a&#34;, &#34;b:c d&#34;, &#34;ef&#34;, `g&#34;`}</span>
<a id="L823"></a><span class="ln">   823</span>	<span class="comment">//</span>
<a id="L824"></a><span class="ln">   824</span>	func splitQuoted(s string) (r []string, err error) {
<a id="L825"></a><span class="ln">   825</span>		var args []string
<a id="L826"></a><span class="ln">   826</span>		arg := make([]rune, len(s))
<a id="L827"></a><span class="ln">   827</span>		escaped := false
<a id="L828"></a><span class="ln">   828</span>		quoted := false
<a id="L829"></a><span class="ln">   829</span>		quote := &#39;\x00&#39;
<a id="L830"></a><span class="ln">   830</span>		i := 0
<a id="L831"></a><span class="ln">   831</span>		for _, rune := range s {
<a id="L832"></a><span class="ln">   832</span>			switch {
<a id="L833"></a><span class="ln">   833</span>			case escaped:
<a id="L834"></a><span class="ln">   834</span>				escaped = false
<a id="L835"></a><span class="ln">   835</span>			case rune == &#39;\\&#39;:
<a id="L836"></a><span class="ln">   836</span>				escaped = true
<a id="L837"></a><span class="ln">   837</span>				continue
<a id="L838"></a><span class="ln">   838</span>			case quote != &#39;\x00&#39;:
<a id="L839"></a><span class="ln">   839</span>				if rune == quote {
<a id="L840"></a><span class="ln">   840</span>					quote = &#39;\x00&#39;
<a id="L841"></a><span class="ln">   841</span>					continue
<a id="L842"></a><span class="ln">   842</span>				}
<a id="L843"></a><span class="ln">   843</span>			case rune == &#39;&#34;&#39; || rune == &#39;\&#39;&#39;:
<a id="L844"></a><span class="ln">   844</span>				quoted = true
<a id="L845"></a><span class="ln">   845</span>				quote = rune
<a id="L846"></a><span class="ln">   846</span>				continue
<a id="L847"></a><span class="ln">   847</span>			case unicode.IsSpace(rune):
<a id="L848"></a><span class="ln">   848</span>				if quoted || i &gt; 0 {
<a id="L849"></a><span class="ln">   849</span>					quoted = false
<a id="L850"></a><span class="ln">   850</span>					args = append(args, string(arg[:i]))
<a id="L851"></a><span class="ln">   851</span>					i = 0
<a id="L852"></a><span class="ln">   852</span>				}
<a id="L853"></a><span class="ln">   853</span>				continue
<a id="L854"></a><span class="ln">   854</span>			}
<a id="L855"></a><span class="ln">   855</span>			arg[i] = rune
<a id="L856"></a><span class="ln">   856</span>			i++
<a id="L857"></a><span class="ln">   857</span>		}
<a id="L858"></a><span class="ln">   858</span>		if quoted || i &gt; 0 {
<a id="L859"></a><span class="ln">   859</span>			args = append(args, string(arg[:i]))
<a id="L860"></a><span class="ln">   860</span>		}
<a id="L861"></a><span class="ln">   861</span>		if quote != 0 {
<a id="L862"></a><span class="ln">   862</span>			err = errors.New(&#34;unclosed quote&#34;)
<a id="L863"></a><span class="ln">   863</span>		} else if escaped {
<a id="L864"></a><span class="ln">   864</span>			err = errors.New(&#34;unfinished escaping&#34;)
<a id="L865"></a><span class="ln">   865</span>		}
<a id="L866"></a><span class="ln">   866</span>		return args, err
<a id="L867"></a><span class="ln">   867</span>	}
<a id="L868"></a><span class="ln">   868</span>	
<a id="L869"></a><span class="ln">   869</span>	<span class="comment">// match returns true if the name is one of:</span>
<a id="L870"></a><span class="ln">   870</span>	<span class="comment">//</span>
<a id="L871"></a><span class="ln">   871</span>	<span class="comment">//	$GOOS</span>
<a id="L872"></a><span class="ln">   872</span>	<span class="comment">//	$GOARCH</span>
<a id="L873"></a><span class="ln">   873</span>	<span class="comment">//	cgo (if cgo is enabled)</span>
<a id="L874"></a><span class="ln">   874</span>	<span class="comment">//	!cgo (if cgo is disabled)</span>
<a id="L875"></a><span class="ln">   875</span>	<span class="comment">//	tag (if tag is listed in ctxt.BuildTags)</span>
<a id="L876"></a><span class="ln">   876</span>	<span class="comment">//	!tag (if tag is not listed in ctxt.BuildTags)</span>
<a id="L877"></a><span class="ln">   877</span>	<span class="comment">//	a comma-separated list of any of these</span>
<a id="L878"></a><span class="ln">   878</span>	<span class="comment">//</span>
<a id="L879"></a><span class="ln">   879</span>	func (ctxt *Context) match(name string) bool {
<a id="L880"></a><span class="ln">   880</span>		if name == &#34;&#34; {
<a id="L881"></a><span class="ln">   881</span>			return false
<a id="L882"></a><span class="ln">   882</span>		}
<a id="L883"></a><span class="ln">   883</span>		if i := strings.Index(name, &#34;,&#34;); i &gt;= 0 {
<a id="L884"></a><span class="ln">   884</span>			<span class="comment">// comma-separated list</span>
<a id="L885"></a><span class="ln">   885</span>			return ctxt.match(name[:i]) &amp;&amp; ctxt.match(name[i+1:])
<a id="L886"></a><span class="ln">   886</span>		}
<a id="L887"></a><span class="ln">   887</span>		if strings.HasPrefix(name, &#34;!!&#34;) { <span class="comment">// bad syntax, reject always</span>
<a id="L888"></a><span class="ln">   888</span>			return false
<a id="L889"></a><span class="ln">   889</span>		}
<a id="L890"></a><span class="ln">   890</span>		if strings.HasPrefix(name, &#34;!&#34;) { <span class="comment">// negation</span>
<a id="L891"></a><span class="ln">   891</span>			return len(name) &gt; 1 &amp;&amp; !ctxt.match(name[1:])
<a id="L892"></a><span class="ln">   892</span>		}
<a id="L893"></a><span class="ln">   893</span>	
<a id="L894"></a><span class="ln">   894</span>		<span class="comment">// Tags must be letters, digits, underscores.</span>
<a id="L895"></a><span class="ln">   895</span>		<span class="comment">// Unlike in Go identifiers, all digits are fine (e.g., &#34;386&#34;).</span>
<a id="L896"></a><span class="ln">   896</span>		for _, c := range name {
<a id="L897"></a><span class="ln">   897</span>			if !unicode.IsLetter(c) &amp;&amp; !unicode.IsDigit(c) &amp;&amp; c != &#39;_&#39; {
<a id="L898"></a><span class="ln">   898</span>				return false
<a id="L899"></a><span class="ln">   899</span>			}
<a id="L900"></a><span class="ln">   900</span>		}
<a id="L901"></a><span class="ln">   901</span>	
<a id="L902"></a><span class="ln">   902</span>		<span class="comment">// special tags</span>
<a id="L903"></a><span class="ln">   903</span>		if ctxt.CgoEnabled &amp;&amp; name == &#34;cgo&#34; {
<a id="L904"></a><span class="ln">   904</span>			return true
<a id="L905"></a><span class="ln">   905</span>		}
<a id="L906"></a><span class="ln">   906</span>		if name == ctxt.GOOS || name == ctxt.GOARCH {
<a id="L907"></a><span class="ln">   907</span>			return true
<a id="L908"></a><span class="ln">   908</span>		}
<a id="L909"></a><span class="ln">   909</span>	
<a id="L910"></a><span class="ln">   910</span>		<span class="comment">// other tags</span>
<a id="L911"></a><span class="ln">   911</span>		for _, tag := range ctxt.BuildTags {
<a id="L912"></a><span class="ln">   912</span>			if tag == name {
<a id="L913"></a><span class="ln">   913</span>				return true
<a id="L914"></a><span class="ln">   914</span>			}
<a id="L915"></a><span class="ln">   915</span>		}
<a id="L916"></a><span class="ln">   916</span>	
<a id="L917"></a><span class="ln">   917</span>		return false
<a id="L918"></a><span class="ln">   918</span>	}
<a id="L919"></a><span class="ln">   919</span>	
<a id="L920"></a><span class="ln">   920</span>	<span class="comment">// goodOSArchFile returns false if the name contains a $GOOS or $GOARCH</span>
<a id="L921"></a><span class="ln">   921</span>	<span class="comment">// suffix which does not match the current system.</span>
<a id="L922"></a><span class="ln">   922</span>	<span class="comment">// The recognized name formats are:</span>
<a id="L923"></a><span class="ln">   923</span>	<span class="comment">//</span>
<a id="L924"></a><span class="ln">   924</span>	<span class="comment">//     name_$(GOOS).*</span>
<a id="L925"></a><span class="ln">   925</span>	<span class="comment">//     name_$(GOARCH).*</span>
<a id="L926"></a><span class="ln">   926</span>	<span class="comment">//     name_$(GOOS)_$(GOARCH).*</span>
<a id="L927"></a><span class="ln">   927</span>	<span class="comment">//     name_$(GOOS)_test.*</span>
<a id="L928"></a><span class="ln">   928</span>	<span class="comment">//     name_$(GOARCH)_test.*</span>
<a id="L929"></a><span class="ln">   929</span>	<span class="comment">//     name_$(GOOS)_$(GOARCH)_test.*</span>
<a id="L930"></a><span class="ln">   930</span>	<span class="comment">//</span>
<a id="L931"></a><span class="ln">   931</span>	func (ctxt *Context) goodOSArchFile(name string) bool {
<a id="L932"></a><span class="ln">   932</span>		if dot := strings.Index(name, &#34;.&#34;); dot != -1 {
<a id="L933"></a><span class="ln">   933</span>			name = name[:dot]
<a id="L934"></a><span class="ln">   934</span>		}
<a id="L935"></a><span class="ln">   935</span>		l := strings.Split(name, &#34;_&#34;)
<a id="L936"></a><span class="ln">   936</span>		if n := len(l); n &gt; 0 &amp;&amp; l[n-1] == &#34;test&#34; {
<a id="L937"></a><span class="ln">   937</span>			l = l[:n-1]
<a id="L938"></a><span class="ln">   938</span>		}
<a id="L939"></a><span class="ln">   939</span>		n := len(l)
<a id="L940"></a><span class="ln">   940</span>		if n &gt;= 2 &amp;&amp; knownOS[l[n-2]] &amp;&amp; knownArch[l[n-1]] {
<a id="L941"></a><span class="ln">   941</span>			return l[n-2] == ctxt.GOOS &amp;&amp; l[n-1] == ctxt.GOARCH
<a id="L942"></a><span class="ln">   942</span>		}
<a id="L943"></a><span class="ln">   943</span>		if n &gt;= 1 &amp;&amp; knownOS[l[n-1]] {
<a id="L944"></a><span class="ln">   944</span>			return l[n-1] == ctxt.GOOS
<a id="L945"></a><span class="ln">   945</span>		}
<a id="L946"></a><span class="ln">   946</span>		if n &gt;= 1 &amp;&amp; knownArch[l[n-1]] {
<a id="L947"></a><span class="ln">   947</span>			return l[n-1] == ctxt.GOARCH
<a id="L948"></a><span class="ln">   948</span>		}
<a id="L949"></a><span class="ln">   949</span>		return true
<a id="L950"></a><span class="ln">   950</span>	}
<a id="L951"></a><span class="ln">   951</span>	
<a id="L952"></a><span class="ln">   952</span>	var knownOS = make(map[string]bool)
<a id="L953"></a><span class="ln">   953</span>	var knownArch = make(map[string]bool)
<a id="L954"></a><span class="ln">   954</span>	
<a id="L955"></a><span class="ln">   955</span>	func init() {
<a id="L956"></a><span class="ln">   956</span>		for _, v := range strings.Fields(goosList) {
<a id="L957"></a><span class="ln">   957</span>			knownOS[v] = true
<a id="L958"></a><span class="ln">   958</span>		}
<a id="L959"></a><span class="ln">   959</span>		for _, v := range strings.Fields(goarchList) {
<a id="L960"></a><span class="ln">   960</span>			knownArch[v] = true
<a id="L961"></a><span class="ln">   961</span>		}
<a id="L962"></a><span class="ln">   962</span>	}
<a id="L963"></a><span class="ln">   963</span>	
<a id="L964"></a><span class="ln">   964</span>	<span class="comment">// ToolDir is the directory containing build tools.</span>
<a id="L965"></a><span class="ln">   965</span>	var ToolDir = filepath.Join(runtime.GOROOT(), &#34;pkg/tool/&#34;+runtime.GOOS+&#34;_&#34;+runtime.GOARCH)
<a id="L966"></a><span class="ln">   966</span>	
<a id="L967"></a><span class="ln">   967</span>	<span class="comment">// IsLocalImport reports whether the import path is</span>
<a id="L968"></a><span class="ln">   968</span>	<span class="comment">// a local import path, like &#34;.&#34;, &#34;..&#34;, &#34;./foo&#34;, or &#34;../foo&#34;.</span>
<a id="L969"></a><span class="ln">   969</span>	func IsLocalImport(path string) bool {
<a id="L970"></a><span class="ln">   970</span>		return path == &#34;.&#34; || path == &#34;..&#34; ||
<a id="L971"></a><span class="ln">   971</span>			strings.HasPrefix(path, &#34;./&#34;) || strings.HasPrefix(path, &#34;../&#34;)
<a id="L972"></a><span class="ln">   972</span>	}
<a id="L973"></a><span class="ln">   973</span>	
<a id="L974"></a><span class="ln">   974</span>	<span class="comment">// ArchChar returns the architecture character for the given goarch.</span>
<a id="L975"></a><span class="ln">   975</span>	<span class="comment">// For example, ArchChar(&#34;amd64&#34;) returns &#34;6&#34;.</span>
<a id="L976"></a><span class="ln">   976</span>	func ArchChar(goarch string) (string, error) {
<a id="L977"></a><span class="ln">   977</span>		switch goarch {
<a id="L978"></a><span class="ln">   978</span>		case &#34;386&#34;:
<a id="L979"></a><span class="ln">   979</span>			return &#34;8&#34;, nil
<a id="L980"></a><span class="ln">   980</span>		case &#34;amd64&#34;:
<a id="L981"></a><span class="ln">   981</span>			return &#34;6&#34;, nil
<a id="L982"></a><span class="ln">   982</span>		case &#34;arm&#34;:
<a id="L983"></a><span class="ln">   983</span>			return &#34;5&#34;, nil
<a id="L984"></a><span class="ln">   984</span>		}
<a id="L985"></a><span class="ln">   985</span>		return &#34;&#34;, errors.New(&#34;unsupported GOARCH &#34; + goarch)
<a id="L986"></a><span class="ln">   986</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

