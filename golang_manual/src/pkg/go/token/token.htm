<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/go/token/token.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/go/token/token.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package token defines constants representing the lexical tokens of the Go</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// programming language and basic operations on tokens (printing, predicates).</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">//</span>
<a id="L8"></a><span class="ln">     8</span>	package token
<a id="L9"></a><span class="ln">     9</span>	
<a id="L10"></a><span class="ln">    10</span>	import &#34;strconv&#34;
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// Token is the set of lexical tokens of the Go programming language.</span>
<a id="L13"></a><span class="ln">    13</span>	type Token int
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// The list of tokens.</span>
<a id="L16"></a><span class="ln">    16</span>	const (
<a id="L17"></a><span class="ln">    17</span>		<span class="comment">// Special tokens</span>
<a id="L18"></a><span class="ln">    18</span>		ILLEGAL Token = iota
<a id="L19"></a><span class="ln">    19</span>		EOF
<a id="L20"></a><span class="ln">    20</span>		COMMENT
<a id="L21"></a><span class="ln">    21</span>	
<a id="L22"></a><span class="ln">    22</span>		literal_beg
<a id="L23"></a><span class="ln">    23</span>		<span class="comment">// Identifiers and basic type literals</span>
<a id="L24"></a><span class="ln">    24</span>		<span class="comment">// (these tokens stand for classes of literals)</span>
<a id="L25"></a><span class="ln">    25</span>		IDENT  <span class="comment">// main</span>
<a id="L26"></a><span class="ln">    26</span>		INT    <span class="comment">// 12345</span>
<a id="L27"></a><span class="ln">    27</span>		FLOAT  <span class="comment">// 123.45</span>
<a id="L28"></a><span class="ln">    28</span>		IMAG   <span class="comment">// 123.45i</span>
<a id="L29"></a><span class="ln">    29</span>		CHAR   <span class="comment">// &#39;a&#39;</span>
<a id="L30"></a><span class="ln">    30</span>		STRING <span class="comment">// &#34;abc&#34;</span>
<a id="L31"></a><span class="ln">    31</span>		literal_end
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>		operator_beg
<a id="L34"></a><span class="ln">    34</span>		<span class="comment">// Operators and delimiters</span>
<a id="L35"></a><span class="ln">    35</span>		ADD <span class="comment">// +</span>
<a id="L36"></a><span class="ln">    36</span>		SUB <span class="comment">// -</span>
<a id="L37"></a><span class="ln">    37</span>		MUL <span class="comment">// *</span>
<a id="L38"></a><span class="ln">    38</span>		QUO <span class="comment">// /</span>
<a id="L39"></a><span class="ln">    39</span>		REM <span class="comment">// %</span>
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>		AND     <span class="comment">// &amp;</span>
<a id="L42"></a><span class="ln">    42</span>		OR      <span class="comment">// |</span>
<a id="L43"></a><span class="ln">    43</span>		XOR     <span class="comment">// ^</span>
<a id="L44"></a><span class="ln">    44</span>		SHL     <span class="comment">// &lt;&lt;</span>
<a id="L45"></a><span class="ln">    45</span>		SHR     <span class="comment">// &gt;&gt;</span>
<a id="L46"></a><span class="ln">    46</span>		AND_NOT <span class="comment">// &amp;^</span>
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>		ADD_ASSIGN <span class="comment">// +=</span>
<a id="L49"></a><span class="ln">    49</span>		SUB_ASSIGN <span class="comment">// -=</span>
<a id="L50"></a><span class="ln">    50</span>		MUL_ASSIGN <span class="comment">// *=</span>
<a id="L51"></a><span class="ln">    51</span>		QUO_ASSIGN <span class="comment">// /=</span>
<a id="L52"></a><span class="ln">    52</span>		REM_ASSIGN <span class="comment">// %=</span>
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>		AND_ASSIGN     <span class="comment">// &amp;=</span>
<a id="L55"></a><span class="ln">    55</span>		OR_ASSIGN      <span class="comment">// |=</span>
<a id="L56"></a><span class="ln">    56</span>		XOR_ASSIGN     <span class="comment">// ^=</span>
<a id="L57"></a><span class="ln">    57</span>		SHL_ASSIGN     <span class="comment">// &lt;&lt;=</span>
<a id="L58"></a><span class="ln">    58</span>		SHR_ASSIGN     <span class="comment">// &gt;&gt;=</span>
<a id="L59"></a><span class="ln">    59</span>		AND_NOT_ASSIGN <span class="comment">// &amp;^=</span>
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>		LAND  <span class="comment">// &amp;&amp;</span>
<a id="L62"></a><span class="ln">    62</span>		LOR   <span class="comment">// ||</span>
<a id="L63"></a><span class="ln">    63</span>		ARROW <span class="comment">// &lt;-</span>
<a id="L64"></a><span class="ln">    64</span>		INC   <span class="comment">// ++</span>
<a id="L65"></a><span class="ln">    65</span>		DEC   <span class="comment">// --</span>
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>		EQL    <span class="comment">// ==</span>
<a id="L68"></a><span class="ln">    68</span>		LSS    <span class="comment">// &lt;</span>
<a id="L69"></a><span class="ln">    69</span>		GTR    <span class="comment">// &gt;</span>
<a id="L70"></a><span class="ln">    70</span>		ASSIGN <span class="comment">// =</span>
<a id="L71"></a><span class="ln">    71</span>		NOT    <span class="comment">// !</span>
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>		NEQ      <span class="comment">// !=</span>
<a id="L74"></a><span class="ln">    74</span>		LEQ      <span class="comment">// &lt;=</span>
<a id="L75"></a><span class="ln">    75</span>		GEQ      <span class="comment">// &gt;=</span>
<a id="L76"></a><span class="ln">    76</span>		DEFINE   <span class="comment">// :=</span>
<a id="L77"></a><span class="ln">    77</span>		ELLIPSIS <span class="comment">// ...</span>
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>		LPAREN <span class="comment">// (</span>
<a id="L80"></a><span class="ln">    80</span>		LBRACK <span class="comment">// [</span>
<a id="L81"></a><span class="ln">    81</span>		LBRACE <span class="comment">// {</span>
<a id="L82"></a><span class="ln">    82</span>		COMMA  <span class="comment">// ,</span>
<a id="L83"></a><span class="ln">    83</span>		PERIOD <span class="comment">// .</span>
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>		RPAREN    <span class="comment">// )</span>
<a id="L86"></a><span class="ln">    86</span>		RBRACK    <span class="comment">// ]</span>
<a id="L87"></a><span class="ln">    87</span>		RBRACE    <span class="comment">// }</span>
<a id="L88"></a><span class="ln">    88</span>		SEMICOLON <span class="comment">// ;</span>
<a id="L89"></a><span class="ln">    89</span>		COLON     <span class="comment">// :</span>
<a id="L90"></a><span class="ln">    90</span>		operator_end
<a id="L91"></a><span class="ln">    91</span>	
<a id="L92"></a><span class="ln">    92</span>		keyword_beg
<a id="L93"></a><span class="ln">    93</span>		<span class="comment">// Keywords</span>
<a id="L94"></a><span class="ln">    94</span>		BREAK
<a id="L95"></a><span class="ln">    95</span>		CASE
<a id="L96"></a><span class="ln">    96</span>		CHAN
<a id="L97"></a><span class="ln">    97</span>		CONST
<a id="L98"></a><span class="ln">    98</span>		CONTINUE
<a id="L99"></a><span class="ln">    99</span>	
<a id="L100"></a><span class="ln">   100</span>		DEFAULT
<a id="L101"></a><span class="ln">   101</span>		DEFER
<a id="L102"></a><span class="ln">   102</span>		ELSE
<a id="L103"></a><span class="ln">   103</span>		FALLTHROUGH
<a id="L104"></a><span class="ln">   104</span>		FOR
<a id="L105"></a><span class="ln">   105</span>	
<a id="L106"></a><span class="ln">   106</span>		FUNC
<a id="L107"></a><span class="ln">   107</span>		GO
<a id="L108"></a><span class="ln">   108</span>		GOTO
<a id="L109"></a><span class="ln">   109</span>		IF
<a id="L110"></a><span class="ln">   110</span>		IMPORT
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>		INTERFACE
<a id="L113"></a><span class="ln">   113</span>		MAP
<a id="L114"></a><span class="ln">   114</span>		PACKAGE
<a id="L115"></a><span class="ln">   115</span>		RANGE
<a id="L116"></a><span class="ln">   116</span>		RETURN
<a id="L117"></a><span class="ln">   117</span>	
<a id="L118"></a><span class="ln">   118</span>		SELECT
<a id="L119"></a><span class="ln">   119</span>		STRUCT
<a id="L120"></a><span class="ln">   120</span>		SWITCH
<a id="L121"></a><span class="ln">   121</span>		TYPE
<a id="L122"></a><span class="ln">   122</span>		VAR
<a id="L123"></a><span class="ln">   123</span>		keyword_end
<a id="L124"></a><span class="ln">   124</span>	)
<a id="L125"></a><span class="ln">   125</span>	
<a id="L126"></a><span class="ln">   126</span>	var tokens = [...]string{
<a id="L127"></a><span class="ln">   127</span>		ILLEGAL: &#34;ILLEGAL&#34;,
<a id="L128"></a><span class="ln">   128</span>	
<a id="L129"></a><span class="ln">   129</span>		EOF:     &#34;EOF&#34;,
<a id="L130"></a><span class="ln">   130</span>		COMMENT: &#34;COMMENT&#34;,
<a id="L131"></a><span class="ln">   131</span>	
<a id="L132"></a><span class="ln">   132</span>		IDENT:  &#34;IDENT&#34;,
<a id="L133"></a><span class="ln">   133</span>		INT:    &#34;INT&#34;,
<a id="L134"></a><span class="ln">   134</span>		FLOAT:  &#34;FLOAT&#34;,
<a id="L135"></a><span class="ln">   135</span>		IMAG:   &#34;IMAG&#34;,
<a id="L136"></a><span class="ln">   136</span>		CHAR:   &#34;CHAR&#34;,
<a id="L137"></a><span class="ln">   137</span>		STRING: &#34;STRING&#34;,
<a id="L138"></a><span class="ln">   138</span>	
<a id="L139"></a><span class="ln">   139</span>		ADD: &#34;+&#34;,
<a id="L140"></a><span class="ln">   140</span>		SUB: &#34;-&#34;,
<a id="L141"></a><span class="ln">   141</span>		MUL: &#34;*&#34;,
<a id="L142"></a><span class="ln">   142</span>		QUO: &#34;/&#34;,
<a id="L143"></a><span class="ln">   143</span>		REM: &#34;%&#34;,
<a id="L144"></a><span class="ln">   144</span>	
<a id="L145"></a><span class="ln">   145</span>		AND:     &#34;&amp;&#34;,
<a id="L146"></a><span class="ln">   146</span>		OR:      &#34;|&#34;,
<a id="L147"></a><span class="ln">   147</span>		XOR:     &#34;^&#34;,
<a id="L148"></a><span class="ln">   148</span>		SHL:     &#34;&lt;&lt;&#34;,
<a id="L149"></a><span class="ln">   149</span>		SHR:     &#34;&gt;&gt;&#34;,
<a id="L150"></a><span class="ln">   150</span>		AND_NOT: &#34;&amp;^&#34;,
<a id="L151"></a><span class="ln">   151</span>	
<a id="L152"></a><span class="ln">   152</span>		ADD_ASSIGN: &#34;+=&#34;,
<a id="L153"></a><span class="ln">   153</span>		SUB_ASSIGN: &#34;-=&#34;,
<a id="L154"></a><span class="ln">   154</span>		MUL_ASSIGN: &#34;*=&#34;,
<a id="L155"></a><span class="ln">   155</span>		QUO_ASSIGN: &#34;/=&#34;,
<a id="L156"></a><span class="ln">   156</span>		REM_ASSIGN: &#34;%=&#34;,
<a id="L157"></a><span class="ln">   157</span>	
<a id="L158"></a><span class="ln">   158</span>		AND_ASSIGN:     &#34;&amp;=&#34;,
<a id="L159"></a><span class="ln">   159</span>		OR_ASSIGN:      &#34;|=&#34;,
<a id="L160"></a><span class="ln">   160</span>		XOR_ASSIGN:     &#34;^=&#34;,
<a id="L161"></a><span class="ln">   161</span>		SHL_ASSIGN:     &#34;&lt;&lt;=&#34;,
<a id="L162"></a><span class="ln">   162</span>		SHR_ASSIGN:     &#34;&gt;&gt;=&#34;,
<a id="L163"></a><span class="ln">   163</span>		AND_NOT_ASSIGN: &#34;&amp;^=&#34;,
<a id="L164"></a><span class="ln">   164</span>	
<a id="L165"></a><span class="ln">   165</span>		LAND:  &#34;&amp;&amp;&#34;,
<a id="L166"></a><span class="ln">   166</span>		LOR:   &#34;||&#34;,
<a id="L167"></a><span class="ln">   167</span>		ARROW: &#34;&lt;-&#34;,
<a id="L168"></a><span class="ln">   168</span>		INC:   &#34;++&#34;,
<a id="L169"></a><span class="ln">   169</span>		DEC:   &#34;--&#34;,
<a id="L170"></a><span class="ln">   170</span>	
<a id="L171"></a><span class="ln">   171</span>		EQL:    &#34;==&#34;,
<a id="L172"></a><span class="ln">   172</span>		LSS:    &#34;&lt;&#34;,
<a id="L173"></a><span class="ln">   173</span>		GTR:    &#34;&gt;&#34;,
<a id="L174"></a><span class="ln">   174</span>		ASSIGN: &#34;=&#34;,
<a id="L175"></a><span class="ln">   175</span>		NOT:    &#34;!&#34;,
<a id="L176"></a><span class="ln">   176</span>	
<a id="L177"></a><span class="ln">   177</span>		NEQ:      &#34;!=&#34;,
<a id="L178"></a><span class="ln">   178</span>		LEQ:      &#34;&lt;=&#34;,
<a id="L179"></a><span class="ln">   179</span>		GEQ:      &#34;&gt;=&#34;,
<a id="L180"></a><span class="ln">   180</span>		DEFINE:   &#34;:=&#34;,
<a id="L181"></a><span class="ln">   181</span>		ELLIPSIS: &#34;...&#34;,
<a id="L182"></a><span class="ln">   182</span>	
<a id="L183"></a><span class="ln">   183</span>		LPAREN: &#34;(&#34;,
<a id="L184"></a><span class="ln">   184</span>		LBRACK: &#34;[&#34;,
<a id="L185"></a><span class="ln">   185</span>		LBRACE: &#34;{&#34;,
<a id="L186"></a><span class="ln">   186</span>		COMMA:  &#34;,&#34;,
<a id="L187"></a><span class="ln">   187</span>		PERIOD: &#34;.&#34;,
<a id="L188"></a><span class="ln">   188</span>	
<a id="L189"></a><span class="ln">   189</span>		RPAREN:    &#34;)&#34;,
<a id="L190"></a><span class="ln">   190</span>		RBRACK:    &#34;]&#34;,
<a id="L191"></a><span class="ln">   191</span>		RBRACE:    &#34;}&#34;,
<a id="L192"></a><span class="ln">   192</span>		SEMICOLON: &#34;;&#34;,
<a id="L193"></a><span class="ln">   193</span>		COLON:     &#34;:&#34;,
<a id="L194"></a><span class="ln">   194</span>	
<a id="L195"></a><span class="ln">   195</span>		BREAK:    &#34;break&#34;,
<a id="L196"></a><span class="ln">   196</span>		CASE:     &#34;case&#34;,
<a id="L197"></a><span class="ln">   197</span>		CHAN:     &#34;chan&#34;,
<a id="L198"></a><span class="ln">   198</span>		CONST:    &#34;const&#34;,
<a id="L199"></a><span class="ln">   199</span>		CONTINUE: &#34;continue&#34;,
<a id="L200"></a><span class="ln">   200</span>	
<a id="L201"></a><span class="ln">   201</span>		DEFAULT:     &#34;default&#34;,
<a id="L202"></a><span class="ln">   202</span>		DEFER:       &#34;defer&#34;,
<a id="L203"></a><span class="ln">   203</span>		ELSE:        &#34;else&#34;,
<a id="L204"></a><span class="ln">   204</span>		FALLTHROUGH: &#34;fallthrough&#34;,
<a id="L205"></a><span class="ln">   205</span>		FOR:         &#34;for&#34;,
<a id="L206"></a><span class="ln">   206</span>	
<a id="L207"></a><span class="ln">   207</span>		FUNC:   &#34;func&#34;,
<a id="L208"></a><span class="ln">   208</span>		GO:     &#34;go&#34;,
<a id="L209"></a><span class="ln">   209</span>		GOTO:   &#34;goto&#34;,
<a id="L210"></a><span class="ln">   210</span>		IF:     &#34;if&#34;,
<a id="L211"></a><span class="ln">   211</span>		IMPORT: &#34;import&#34;,
<a id="L212"></a><span class="ln">   212</span>	
<a id="L213"></a><span class="ln">   213</span>		INTERFACE: &#34;interface&#34;,
<a id="L214"></a><span class="ln">   214</span>		MAP:       &#34;map&#34;,
<a id="L215"></a><span class="ln">   215</span>		PACKAGE:   &#34;package&#34;,
<a id="L216"></a><span class="ln">   216</span>		RANGE:     &#34;range&#34;,
<a id="L217"></a><span class="ln">   217</span>		RETURN:    &#34;return&#34;,
<a id="L218"></a><span class="ln">   218</span>	
<a id="L219"></a><span class="ln">   219</span>		SELECT: &#34;select&#34;,
<a id="L220"></a><span class="ln">   220</span>		STRUCT: &#34;struct&#34;,
<a id="L221"></a><span class="ln">   221</span>		SWITCH: &#34;switch&#34;,
<a id="L222"></a><span class="ln">   222</span>		TYPE:   &#34;type&#34;,
<a id="L223"></a><span class="ln">   223</span>		VAR:    &#34;var&#34;,
<a id="L224"></a><span class="ln">   224</span>	}
<a id="L225"></a><span class="ln">   225</span>	
<a id="L226"></a><span class="ln">   226</span>	<span class="comment">// String returns the string corresponding to the token tok.</span>
<a id="L227"></a><span class="ln">   227</span>	<span class="comment">// For operators, delimiters, and keywords the string is the actual</span>
<a id="L228"></a><span class="ln">   228</span>	<span class="comment">// token character sequence (e.g., for the token ADD, the string is</span>
<a id="L229"></a><span class="ln">   229</span>	<span class="comment">// &#34;+&#34;). For all other tokens the string corresponds to the token</span>
<a id="L230"></a><span class="ln">   230</span>	<span class="comment">// constant name (e.g. for the token IDENT, the string is &#34;IDENT&#34;).</span>
<a id="L231"></a><span class="ln">   231</span>	<span class="comment">//</span>
<a id="L232"></a><span class="ln">   232</span>	func (tok Token) String() string {
<a id="L233"></a><span class="ln">   233</span>		s := &#34;&#34;
<a id="L234"></a><span class="ln">   234</span>		if 0 &lt;= tok &amp;&amp; tok &lt; Token(len(tokens)) {
<a id="L235"></a><span class="ln">   235</span>			s = tokens[tok]
<a id="L236"></a><span class="ln">   236</span>		}
<a id="L237"></a><span class="ln">   237</span>		if s == &#34;&#34; {
<a id="L238"></a><span class="ln">   238</span>			s = &#34;token(&#34; + strconv.Itoa(int(tok)) + &#34;)&#34;
<a id="L239"></a><span class="ln">   239</span>		}
<a id="L240"></a><span class="ln">   240</span>		return s
<a id="L241"></a><span class="ln">   241</span>	}
<a id="L242"></a><span class="ln">   242</span>	
<a id="L243"></a><span class="ln">   243</span>	<span class="comment">// A set of constants for precedence-based expression parsing.</span>
<a id="L244"></a><span class="ln">   244</span>	<span class="comment">// Non-operators have lowest precedence, followed by operators</span>
<a id="L245"></a><span class="ln">   245</span>	<span class="comment">// starting with precedence 1 up to unary operators. The highest</span>
<a id="L246"></a><span class="ln">   246</span>	<span class="comment">// precedence corresponds serves as &#34;catch-all&#34; precedence for</span>
<a id="L247"></a><span class="ln">   247</span>	<span class="comment">// selector, indexing, and other operator and delimiter tokens.</span>
<a id="L248"></a><span class="ln">   248</span>	<span class="comment">//</span>
<a id="L249"></a><span class="ln">   249</span>	const (
<a id="L250"></a><span class="ln">   250</span>		LowestPrec  = 0 <span class="comment">// non-operators</span>
<a id="L251"></a><span class="ln">   251</span>		UnaryPrec   = 6
<a id="L252"></a><span class="ln">   252</span>		HighestPrec = 7
<a id="L253"></a><span class="ln">   253</span>	)
<a id="L254"></a><span class="ln">   254</span>	
<a id="L255"></a><span class="ln">   255</span>	<span class="comment">// Precedence returns the operator precedence of the binary</span>
<a id="L256"></a><span class="ln">   256</span>	<span class="comment">// operator op. If op is not a binary operator, the result</span>
<a id="L257"></a><span class="ln">   257</span>	<span class="comment">// is LowestPrecedence.</span>
<a id="L258"></a><span class="ln">   258</span>	<span class="comment">//</span>
<a id="L259"></a><span class="ln">   259</span>	func (op Token) Precedence() int {
<a id="L260"></a><span class="ln">   260</span>		switch op {
<a id="L261"></a><span class="ln">   261</span>		case LOR:
<a id="L262"></a><span class="ln">   262</span>			return 1
<a id="L263"></a><span class="ln">   263</span>		case LAND:
<a id="L264"></a><span class="ln">   264</span>			return 2
<a id="L265"></a><span class="ln">   265</span>		case EQL, NEQ, LSS, LEQ, GTR, GEQ:
<a id="L266"></a><span class="ln">   266</span>			return 3
<a id="L267"></a><span class="ln">   267</span>		case ADD, SUB, OR, XOR:
<a id="L268"></a><span class="ln">   268</span>			return 4
<a id="L269"></a><span class="ln">   269</span>		case MUL, QUO, REM, SHL, SHR, AND, AND_NOT:
<a id="L270"></a><span class="ln">   270</span>			return 5
<a id="L271"></a><span class="ln">   271</span>		}
<a id="L272"></a><span class="ln">   272</span>		return LowestPrec
<a id="L273"></a><span class="ln">   273</span>	}
<a id="L274"></a><span class="ln">   274</span>	
<a id="L275"></a><span class="ln">   275</span>	var keywords map[string]Token
<a id="L276"></a><span class="ln">   276</span>	
<a id="L277"></a><span class="ln">   277</span>	func init() {
<a id="L278"></a><span class="ln">   278</span>		keywords = make(map[string]Token)
<a id="L279"></a><span class="ln">   279</span>		for i := keyword_beg + 1; i &lt; keyword_end; i++ {
<a id="L280"></a><span class="ln">   280</span>			keywords[tokens[i]] = i
<a id="L281"></a><span class="ln">   281</span>		}
<a id="L282"></a><span class="ln">   282</span>	}
<a id="L283"></a><span class="ln">   283</span>	
<a id="L284"></a><span class="ln">   284</span>	<span class="comment">// Lookup maps an identifier to its keyword token or IDENT (if not a keyword).</span>
<a id="L285"></a><span class="ln">   285</span>	<span class="comment">//</span>
<a id="L286"></a><span class="ln">   286</span>	func Lookup(ident string) Token {
<a id="L287"></a><span class="ln">   287</span>		if tok, is_keyword := keywords[ident]; is_keyword {
<a id="L288"></a><span class="ln">   288</span>			return tok
<a id="L289"></a><span class="ln">   289</span>		}
<a id="L290"></a><span class="ln">   290</span>		return IDENT
<a id="L291"></a><span class="ln">   291</span>	}
<a id="L292"></a><span class="ln">   292</span>	
<a id="L293"></a><span class="ln">   293</span>	<span class="comment">// Predicates</span>
<a id="L294"></a><span class="ln">   294</span>	
<a id="L295"></a><span class="ln">   295</span>	<span class="comment">// IsLiteral returns true for tokens corresponding to identifiers</span>
<a id="L296"></a><span class="ln">   296</span>	<span class="comment">// and basic type literals; it returns false otherwise.</span>
<a id="L297"></a><span class="ln">   297</span>	<span class="comment">//</span>
<a id="L298"></a><span class="ln">   298</span>	func (tok Token) IsLiteral() bool { return literal_beg &lt; tok &amp;&amp; tok &lt; literal_end }
<a id="L299"></a><span class="ln">   299</span>	
<a id="L300"></a><span class="ln">   300</span>	<span class="comment">// IsOperator returns true for tokens corresponding to operators and</span>
<a id="L301"></a><span class="ln">   301</span>	<span class="comment">// delimiters; it returns false otherwise.</span>
<a id="L302"></a><span class="ln">   302</span>	<span class="comment">//</span>
<a id="L303"></a><span class="ln">   303</span>	func (tok Token) IsOperator() bool { return operator_beg &lt; tok &amp;&amp; tok &lt; operator_end }
<a id="L304"></a><span class="ln">   304</span>	
<a id="L305"></a><span class="ln">   305</span>	<span class="comment">// IsKeyword returns true for tokens corresponding to keywords;</span>
<a id="L306"></a><span class="ln">   306</span>	<span class="comment">// it returns false otherwise.</span>
<a id="L307"></a><span class="ln">   307</span>	<span class="comment">//</span>
<a id="L308"></a><span class="ln">   308</span>	func (tok Token) IsKeyword() bool { return keyword_beg &lt; tok &amp;&amp; tok &lt; keyword_end }
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

