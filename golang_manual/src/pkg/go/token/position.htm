<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/go/token/position.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/go/token/position.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// TODO(gri) consider making this a separate package outside the go directory.</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package token
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;fmt&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;sort&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;sync&#34;
<a id="L13"></a><span class="ln">    13</span>	)
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// -----------------------------------------------------------------------------</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// Positions</span>
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// Position describes an arbitrary source position</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// including the file, line, and column location.</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// A Position is valid if the line number is &gt; 0.</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">//</span>
<a id="L22"></a><span class="ln">    22</span>	type Position struct {
<a id="L23"></a><span class="ln">    23</span>		Filename string <span class="comment">// filename, if any</span>
<a id="L24"></a><span class="ln">    24</span>		Offset   int    <span class="comment">// offset, starting at 0</span>
<a id="L25"></a><span class="ln">    25</span>		Line     int    <span class="comment">// line number, starting at 1</span>
<a id="L26"></a><span class="ln">    26</span>		Column   int    <span class="comment">// column number, starting at 1 (character count)</span>
<a id="L27"></a><span class="ln">    27</span>	}
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// IsValid returns true if the position is valid.</span>
<a id="L30"></a><span class="ln">    30</span>	func (pos *Position) IsValid() bool { return pos.Line &gt; 0 }
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// String returns a string in one of several forms:</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">//</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">//	file:line:column    valid position with file name</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//	line:column         valid position without file name</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//	file                invalid position with file name</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">//	-                   invalid position without file name</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//</span>
<a id="L39"></a><span class="ln">    39</span>	func (pos Position) String() string {
<a id="L40"></a><span class="ln">    40</span>		s := pos.Filename
<a id="L41"></a><span class="ln">    41</span>		if pos.IsValid() {
<a id="L42"></a><span class="ln">    42</span>			if s != &#34;&#34; {
<a id="L43"></a><span class="ln">    43</span>				s += &#34;:&#34;
<a id="L44"></a><span class="ln">    44</span>			}
<a id="L45"></a><span class="ln">    45</span>			s += fmt.Sprintf(&#34;%d:%d&#34;, pos.Line, pos.Column)
<a id="L46"></a><span class="ln">    46</span>		}
<a id="L47"></a><span class="ln">    47</span>		if s == &#34;&#34; {
<a id="L48"></a><span class="ln">    48</span>			s = &#34;-&#34;
<a id="L49"></a><span class="ln">    49</span>		}
<a id="L50"></a><span class="ln">    50</span>		return s
<a id="L51"></a><span class="ln">    51</span>	}
<a id="L52"></a><span class="ln">    52</span>	
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">// Pos is a compact encoding of a source position within a file set.</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">// It can be converted into a Position for a more convenient, but much</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// larger, representation.</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">//</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">// The Pos value for a given file is a number in the range [base, base+size],</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// where base and size are specified when adding the file to the file set via</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// AddFile.</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">//</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">// To create the Pos value for a specific source offset, first add</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">// the respective file to the current file set (via FileSet.AddFile)</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">// and then call File.Pos(offset) for that file. Given a Pos value p</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// for a specific file set fset, the corresponding Position value is</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// obtained by calling fset.Position(p).</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">//</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// Pos values can be compared directly with the usual comparison operators:</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// If two Pos values p and q are in the same file, comparing p and q is</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// equivalent to comparing the respective source file offsets. If p and q</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// are in different files, p &lt; q is true if the file implied by p was added</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">// to the respective file set before the file implied by q.</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">//</span>
<a id="L73"></a><span class="ln">    73</span>	type Pos int
<a id="L74"></a><span class="ln">    74</span>	
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">// The zero value for Pos is NoPos; there is no file and line information</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">// associated with it, and NoPos().IsValid() is false. NoPos is always</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// smaller than any other Pos value. The corresponding Position value</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// for NoPos is the zero value for Position.</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// </span>
<a id="L80"></a><span class="ln">    80</span>	const NoPos Pos = 0
<a id="L81"></a><span class="ln">    81</span>	
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">// IsValid returns true if the position is valid.</span>
<a id="L83"></a><span class="ln">    83</span>	func (p Pos) IsValid() bool {
<a id="L84"></a><span class="ln">    84</span>		return p != NoPos
<a id="L85"></a><span class="ln">    85</span>	}
<a id="L86"></a><span class="ln">    86</span>	
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">// -----------------------------------------------------------------------------</span>
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// File</span>
<a id="L89"></a><span class="ln">    89</span>	
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// A File is a handle for a file belonging to a FileSet.</span>
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// A File has a name, size, and line offset table.</span>
<a id="L92"></a><span class="ln">    92</span>	<span class="comment">//</span>
<a id="L93"></a><span class="ln">    93</span>	type File struct {
<a id="L94"></a><span class="ln">    94</span>		set  *FileSet
<a id="L95"></a><span class="ln">    95</span>		name string <span class="comment">// file name as provided to AddFile</span>
<a id="L96"></a><span class="ln">    96</span>		base int    <span class="comment">// Pos value range for this file is [base...base+size]</span>
<a id="L97"></a><span class="ln">    97</span>		size int    <span class="comment">// file size as provided to AddFile</span>
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>		<span class="comment">// lines and infos are protected by set.mutex</span>
<a id="L100"></a><span class="ln">   100</span>		lines []int
<a id="L101"></a><span class="ln">   101</span>		infos []lineInfo
<a id="L102"></a><span class="ln">   102</span>	}
<a id="L103"></a><span class="ln">   103</span>	
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">// Name returns the file name of file f as registered with AddFile.</span>
<a id="L105"></a><span class="ln">   105</span>	func (f *File) Name() string {
<a id="L106"></a><span class="ln">   106</span>		return f.name
<a id="L107"></a><span class="ln">   107</span>	}
<a id="L108"></a><span class="ln">   108</span>	
<a id="L109"></a><span class="ln">   109</span>	<span class="comment">// Base returns the base offset of file f as registered with AddFile.</span>
<a id="L110"></a><span class="ln">   110</span>	func (f *File) Base() int {
<a id="L111"></a><span class="ln">   111</span>		return f.base
<a id="L112"></a><span class="ln">   112</span>	}
<a id="L113"></a><span class="ln">   113</span>	
<a id="L114"></a><span class="ln">   114</span>	<span class="comment">// Size returns the size of file f as registered with AddFile.</span>
<a id="L115"></a><span class="ln">   115</span>	func (f *File) Size() int {
<a id="L116"></a><span class="ln">   116</span>		return f.size
<a id="L117"></a><span class="ln">   117</span>	}
<a id="L118"></a><span class="ln">   118</span>	
<a id="L119"></a><span class="ln">   119</span>	<span class="comment">// LineCount returns the number of lines in file f.</span>
<a id="L120"></a><span class="ln">   120</span>	func (f *File) LineCount() int {
<a id="L121"></a><span class="ln">   121</span>		f.set.mutex.RLock()
<a id="L122"></a><span class="ln">   122</span>		n := len(f.lines)
<a id="L123"></a><span class="ln">   123</span>		f.set.mutex.RUnlock()
<a id="L124"></a><span class="ln">   124</span>		return n
<a id="L125"></a><span class="ln">   125</span>	}
<a id="L126"></a><span class="ln">   126</span>	
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// AddLine adds the line offset for a new line.</span>
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// The line offset must be larger than the offset for the previous line</span>
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// and smaller than the file size; otherwise the line offset is ignored.</span>
<a id="L130"></a><span class="ln">   130</span>	<span class="comment">//</span>
<a id="L131"></a><span class="ln">   131</span>	func (f *File) AddLine(offset int) {
<a id="L132"></a><span class="ln">   132</span>		f.set.mutex.Lock()
<a id="L133"></a><span class="ln">   133</span>		if i := len(f.lines); (i == 0 || f.lines[i-1] &lt; offset) &amp;&amp; offset &lt; f.size {
<a id="L134"></a><span class="ln">   134</span>			f.lines = append(f.lines, offset)
<a id="L135"></a><span class="ln">   135</span>		}
<a id="L136"></a><span class="ln">   136</span>		f.set.mutex.Unlock()
<a id="L137"></a><span class="ln">   137</span>	}
<a id="L138"></a><span class="ln">   138</span>	
<a id="L139"></a><span class="ln">   139</span>	<span class="comment">// SetLines sets the line offsets for a file and returns true if successful.</span>
<a id="L140"></a><span class="ln">   140</span>	<span class="comment">// The line offsets are the offsets of the first character of each line;</span>
<a id="L141"></a><span class="ln">   141</span>	<span class="comment">// for instance for the content &#34;ab\nc\n&#34; the line offsets are {0, 3}.</span>
<a id="L142"></a><span class="ln">   142</span>	<span class="comment">// An empty file has an empty line offset table.</span>
<a id="L143"></a><span class="ln">   143</span>	<span class="comment">// Each line offset must be larger than the offset for the previous line</span>
<a id="L144"></a><span class="ln">   144</span>	<span class="comment">// and smaller than the file size; otherwise SetLines fails and returns</span>
<a id="L145"></a><span class="ln">   145</span>	<span class="comment">// false.</span>
<a id="L146"></a><span class="ln">   146</span>	<span class="comment">//</span>
<a id="L147"></a><span class="ln">   147</span>	func (f *File) SetLines(lines []int) bool {
<a id="L148"></a><span class="ln">   148</span>		<span class="comment">// verify validity of lines table</span>
<a id="L149"></a><span class="ln">   149</span>		size := f.size
<a id="L150"></a><span class="ln">   150</span>		for i, offset := range lines {
<a id="L151"></a><span class="ln">   151</span>			if i &gt; 0 &amp;&amp; offset &lt;= lines[i-1] || size &lt;= offset {
<a id="L152"></a><span class="ln">   152</span>				return false
<a id="L153"></a><span class="ln">   153</span>			}
<a id="L154"></a><span class="ln">   154</span>		}
<a id="L155"></a><span class="ln">   155</span>	
<a id="L156"></a><span class="ln">   156</span>		<span class="comment">// set lines table</span>
<a id="L157"></a><span class="ln">   157</span>		f.set.mutex.Lock()
<a id="L158"></a><span class="ln">   158</span>		f.lines = lines
<a id="L159"></a><span class="ln">   159</span>		f.set.mutex.Unlock()
<a id="L160"></a><span class="ln">   160</span>		return true
<a id="L161"></a><span class="ln">   161</span>	}
<a id="L162"></a><span class="ln">   162</span>	
<a id="L163"></a><span class="ln">   163</span>	<span class="comment">// SetLinesForContent sets the line offsets for the given file content.</span>
<a id="L164"></a><span class="ln">   164</span>	func (f *File) SetLinesForContent(content []byte) {
<a id="L165"></a><span class="ln">   165</span>		var lines []int
<a id="L166"></a><span class="ln">   166</span>		line := 0
<a id="L167"></a><span class="ln">   167</span>		for offset, b := range content {
<a id="L168"></a><span class="ln">   168</span>			if line &gt;= 0 {
<a id="L169"></a><span class="ln">   169</span>				lines = append(lines, line)
<a id="L170"></a><span class="ln">   170</span>			}
<a id="L171"></a><span class="ln">   171</span>			line = -1
<a id="L172"></a><span class="ln">   172</span>			if b == &#39;\n&#39; {
<a id="L173"></a><span class="ln">   173</span>				line = offset + 1
<a id="L174"></a><span class="ln">   174</span>			}
<a id="L175"></a><span class="ln">   175</span>		}
<a id="L176"></a><span class="ln">   176</span>	
<a id="L177"></a><span class="ln">   177</span>		<span class="comment">// set lines table</span>
<a id="L178"></a><span class="ln">   178</span>		f.set.mutex.Lock()
<a id="L179"></a><span class="ln">   179</span>		f.lines = lines
<a id="L180"></a><span class="ln">   180</span>		f.set.mutex.Unlock()
<a id="L181"></a><span class="ln">   181</span>	}
<a id="L182"></a><span class="ln">   182</span>	
<a id="L183"></a><span class="ln">   183</span>	<span class="comment">// A lineInfo object describes alternative file and line number</span>
<a id="L184"></a><span class="ln">   184</span>	<span class="comment">// information (such as provided via a //line comment in a .go</span>
<a id="L185"></a><span class="ln">   185</span>	<span class="comment">// file) for a given file offset.</span>
<a id="L186"></a><span class="ln">   186</span>	type lineInfo struct {
<a id="L187"></a><span class="ln">   187</span>		<span class="comment">// fields are exported to make them accessible to gob</span>
<a id="L188"></a><span class="ln">   188</span>		Offset   int
<a id="L189"></a><span class="ln">   189</span>		Filename string
<a id="L190"></a><span class="ln">   190</span>		Line     int
<a id="L191"></a><span class="ln">   191</span>	}
<a id="L192"></a><span class="ln">   192</span>	
<a id="L193"></a><span class="ln">   193</span>	<span class="comment">// AddLineInfo adds alternative file and line number information for</span>
<a id="L194"></a><span class="ln">   194</span>	<span class="comment">// a given file offset. The offset must be larger than the offset for</span>
<a id="L195"></a><span class="ln">   195</span>	<span class="comment">// the previously added alternative line info and smaller than the</span>
<a id="L196"></a><span class="ln">   196</span>	<span class="comment">// file size; otherwise the information is ignored.</span>
<a id="L197"></a><span class="ln">   197</span>	<span class="comment">//</span>
<a id="L198"></a><span class="ln">   198</span>	<span class="comment">// AddLineInfo is typically used to register alternative position</span>
<a id="L199"></a><span class="ln">   199</span>	<span class="comment">// information for //line filename:line comments in source files.</span>
<a id="L200"></a><span class="ln">   200</span>	<span class="comment">//</span>
<a id="L201"></a><span class="ln">   201</span>	func (f *File) AddLineInfo(offset int, filename string, line int) {
<a id="L202"></a><span class="ln">   202</span>		f.set.mutex.Lock()
<a id="L203"></a><span class="ln">   203</span>		if i := len(f.infos); i == 0 || f.infos[i-1].Offset &lt; offset &amp;&amp; offset &lt; f.size {
<a id="L204"></a><span class="ln">   204</span>			f.infos = append(f.infos, lineInfo{offset, filename, line})
<a id="L205"></a><span class="ln">   205</span>		}
<a id="L206"></a><span class="ln">   206</span>		f.set.mutex.Unlock()
<a id="L207"></a><span class="ln">   207</span>	}
<a id="L208"></a><span class="ln">   208</span>	
<a id="L209"></a><span class="ln">   209</span>	<span class="comment">// Pos returns the Pos value for the given file offset;</span>
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// the offset must be &lt;= f.Size().</span>
<a id="L211"></a><span class="ln">   211</span>	<span class="comment">// f.Pos(f.Offset(p)) == p.</span>
<a id="L212"></a><span class="ln">   212</span>	<span class="comment">//</span>
<a id="L213"></a><span class="ln">   213</span>	func (f *File) Pos(offset int) Pos {
<a id="L214"></a><span class="ln">   214</span>		if offset &gt; f.size {
<a id="L215"></a><span class="ln">   215</span>			panic(&#34;illegal file offset&#34;)
<a id="L216"></a><span class="ln">   216</span>		}
<a id="L217"></a><span class="ln">   217</span>		return Pos(f.base + offset)
<a id="L218"></a><span class="ln">   218</span>	}
<a id="L219"></a><span class="ln">   219</span>	
<a id="L220"></a><span class="ln">   220</span>	<span class="comment">// Offset returns the offset for the given file position p;</span>
<a id="L221"></a><span class="ln">   221</span>	<span class="comment">// p must be a valid Pos value in that file.</span>
<a id="L222"></a><span class="ln">   222</span>	<span class="comment">// f.Offset(f.Pos(offset)) == offset.</span>
<a id="L223"></a><span class="ln">   223</span>	<span class="comment">//</span>
<a id="L224"></a><span class="ln">   224</span>	func (f *File) Offset(p Pos) int {
<a id="L225"></a><span class="ln">   225</span>		if int(p) &lt; f.base || int(p) &gt; f.base+f.size {
<a id="L226"></a><span class="ln">   226</span>			panic(&#34;illegal Pos value&#34;)
<a id="L227"></a><span class="ln">   227</span>		}
<a id="L228"></a><span class="ln">   228</span>		return int(p) - f.base
<a id="L229"></a><span class="ln">   229</span>	}
<a id="L230"></a><span class="ln">   230</span>	
<a id="L231"></a><span class="ln">   231</span>	<span class="comment">// Line returns the line number for the given file position p;</span>
<a id="L232"></a><span class="ln">   232</span>	<span class="comment">// p must be a Pos value in that file or NoPos.</span>
<a id="L233"></a><span class="ln">   233</span>	<span class="comment">//</span>
<a id="L234"></a><span class="ln">   234</span>	func (f *File) Line(p Pos) int {
<a id="L235"></a><span class="ln">   235</span>		<span class="comment">// TODO(gri) this can be implemented much more efficiently</span>
<a id="L236"></a><span class="ln">   236</span>		return f.Position(p).Line
<a id="L237"></a><span class="ln">   237</span>	}
<a id="L238"></a><span class="ln">   238</span>	
<a id="L239"></a><span class="ln">   239</span>	func searchLineInfos(a []lineInfo, x int) int {
<a id="L240"></a><span class="ln">   240</span>		return sort.Search(len(a), func(i int) bool { return a[i].Offset &gt; x }) - 1
<a id="L241"></a><span class="ln">   241</span>	}
<a id="L242"></a><span class="ln">   242</span>	
<a id="L243"></a><span class="ln">   243</span>	<span class="comment">// info returns the file name, line, and column number for a file offset.</span>
<a id="L244"></a><span class="ln">   244</span>	func (f *File) info(offset int) (filename string, line, column int) {
<a id="L245"></a><span class="ln">   245</span>		filename = f.name
<a id="L246"></a><span class="ln">   246</span>		if i := searchInts(f.lines, offset); i &gt;= 0 {
<a id="L247"></a><span class="ln">   247</span>			line, column = i+1, offset-f.lines[i]+1
<a id="L248"></a><span class="ln">   248</span>		}
<a id="L249"></a><span class="ln">   249</span>		if len(f.infos) &gt; 0 {
<a id="L250"></a><span class="ln">   250</span>			<span class="comment">// almost no files have extra line infos</span>
<a id="L251"></a><span class="ln">   251</span>			if i := searchLineInfos(f.infos, offset); i &gt;= 0 {
<a id="L252"></a><span class="ln">   252</span>				alt := &amp;f.infos[i]
<a id="L253"></a><span class="ln">   253</span>				filename = alt.Filename
<a id="L254"></a><span class="ln">   254</span>				if i := searchInts(f.lines, alt.Offset); i &gt;= 0 {
<a id="L255"></a><span class="ln">   255</span>					line += alt.Line - i - 1
<a id="L256"></a><span class="ln">   256</span>				}
<a id="L257"></a><span class="ln">   257</span>			}
<a id="L258"></a><span class="ln">   258</span>		}
<a id="L259"></a><span class="ln">   259</span>		return
<a id="L260"></a><span class="ln">   260</span>	}
<a id="L261"></a><span class="ln">   261</span>	
<a id="L262"></a><span class="ln">   262</span>	func (f *File) position(p Pos) (pos Position) {
<a id="L263"></a><span class="ln">   263</span>		offset := int(p) - f.base
<a id="L264"></a><span class="ln">   264</span>		pos.Offset = offset
<a id="L265"></a><span class="ln">   265</span>		pos.Filename, pos.Line, pos.Column = f.info(offset)
<a id="L266"></a><span class="ln">   266</span>		return
<a id="L267"></a><span class="ln">   267</span>	}
<a id="L268"></a><span class="ln">   268</span>	
<a id="L269"></a><span class="ln">   269</span>	<span class="comment">// Position returns the Position value for the given file position p;</span>
<a id="L270"></a><span class="ln">   270</span>	<span class="comment">// p must be a Pos value in that file or NoPos.</span>
<a id="L271"></a><span class="ln">   271</span>	<span class="comment">//</span>
<a id="L272"></a><span class="ln">   272</span>	func (f *File) Position(p Pos) (pos Position) {
<a id="L273"></a><span class="ln">   273</span>		if p != NoPos {
<a id="L274"></a><span class="ln">   274</span>			if int(p) &lt; f.base || int(p) &gt; f.base+f.size {
<a id="L275"></a><span class="ln">   275</span>				panic(&#34;illegal Pos value&#34;)
<a id="L276"></a><span class="ln">   276</span>			}
<a id="L277"></a><span class="ln">   277</span>			pos = f.position(p)
<a id="L278"></a><span class="ln">   278</span>		}
<a id="L279"></a><span class="ln">   279</span>		return
<a id="L280"></a><span class="ln">   280</span>	}
<a id="L281"></a><span class="ln">   281</span>	
<a id="L282"></a><span class="ln">   282</span>	<span class="comment">// -----------------------------------------------------------------------------</span>
<a id="L283"></a><span class="ln">   283</span>	<span class="comment">// FileSet</span>
<a id="L284"></a><span class="ln">   284</span>	
<a id="L285"></a><span class="ln">   285</span>	<span class="comment">// A FileSet represents a set of source files.</span>
<a id="L286"></a><span class="ln">   286</span>	<span class="comment">// Methods of file sets are synchronized; multiple goroutines</span>
<a id="L287"></a><span class="ln">   287</span>	<span class="comment">// may invoke them concurrently.</span>
<a id="L288"></a><span class="ln">   288</span>	<span class="comment">//</span>
<a id="L289"></a><span class="ln">   289</span>	type FileSet struct {
<a id="L290"></a><span class="ln">   290</span>		mutex sync.RWMutex <span class="comment">// protects the file set</span>
<a id="L291"></a><span class="ln">   291</span>		base  int          <span class="comment">// base offset for the next file</span>
<a id="L292"></a><span class="ln">   292</span>		files []*File      <span class="comment">// list of files in the order added to the set</span>
<a id="L293"></a><span class="ln">   293</span>		last  *File        <span class="comment">// cache of last file looked up</span>
<a id="L294"></a><span class="ln">   294</span>	}
<a id="L295"></a><span class="ln">   295</span>	
<a id="L296"></a><span class="ln">   296</span>	<span class="comment">// NewFileSet creates a new file set.</span>
<a id="L297"></a><span class="ln">   297</span>	func NewFileSet() *FileSet {
<a id="L298"></a><span class="ln">   298</span>		s := new(FileSet)
<a id="L299"></a><span class="ln">   299</span>		s.base = 1 <span class="comment">// 0 == NoPos</span>
<a id="L300"></a><span class="ln">   300</span>		return s
<a id="L301"></a><span class="ln">   301</span>	}
<a id="L302"></a><span class="ln">   302</span>	
<a id="L303"></a><span class="ln">   303</span>	<span class="comment">// Base returns the minimum base offset that must be provided to</span>
<a id="L304"></a><span class="ln">   304</span>	<span class="comment">// AddFile when adding the next file.</span>
<a id="L305"></a><span class="ln">   305</span>	<span class="comment">//</span>
<a id="L306"></a><span class="ln">   306</span>	func (s *FileSet) Base() int {
<a id="L307"></a><span class="ln">   307</span>		s.mutex.RLock()
<a id="L308"></a><span class="ln">   308</span>		b := s.base
<a id="L309"></a><span class="ln">   309</span>		s.mutex.RUnlock()
<a id="L310"></a><span class="ln">   310</span>		return b
<a id="L311"></a><span class="ln">   311</span>	
<a id="L312"></a><span class="ln">   312</span>	}
<a id="L313"></a><span class="ln">   313</span>	
<a id="L314"></a><span class="ln">   314</span>	<span class="comment">// AddFile adds a new file with a given filename, base offset, and file size</span>
<a id="L315"></a><span class="ln">   315</span>	<span class="comment">// to the file set s and returns the file. Multiple files may have the same</span>
<a id="L316"></a><span class="ln">   316</span>	<span class="comment">// name. The base offset must not be smaller than the FileSet&#39;s Base(), and</span>
<a id="L317"></a><span class="ln">   317</span>	<span class="comment">// size must not be negative.</span>
<a id="L318"></a><span class="ln">   318</span>	<span class="comment">//</span>
<a id="L319"></a><span class="ln">   319</span>	<span class="comment">// Adding the file will set the file set&#39;s Base() value to base + size + 1</span>
<a id="L320"></a><span class="ln">   320</span>	<span class="comment">// as the minimum base value for the next file. The following relationship</span>
<a id="L321"></a><span class="ln">   321</span>	<span class="comment">// exists between a Pos value p for a given file offset offs:</span>
<a id="L322"></a><span class="ln">   322</span>	<span class="comment">//</span>
<a id="L323"></a><span class="ln">   323</span>	<span class="comment">//	int(p) = base + offs</span>
<a id="L324"></a><span class="ln">   324</span>	<span class="comment">//</span>
<a id="L325"></a><span class="ln">   325</span>	<span class="comment">// with offs in the range [0, size] and thus p in the range [base, base+size].</span>
<a id="L326"></a><span class="ln">   326</span>	<span class="comment">// For convenience, File.Pos may be used to create file-specific position</span>
<a id="L327"></a><span class="ln">   327</span>	<span class="comment">// values from a file offset.</span>
<a id="L328"></a><span class="ln">   328</span>	<span class="comment">//</span>
<a id="L329"></a><span class="ln">   329</span>	func (s *FileSet) AddFile(filename string, base, size int) *File {
<a id="L330"></a><span class="ln">   330</span>		s.mutex.Lock()
<a id="L331"></a><span class="ln">   331</span>		defer s.mutex.Unlock()
<a id="L332"></a><span class="ln">   332</span>		if base &lt; s.base || size &lt; 0 {
<a id="L333"></a><span class="ln">   333</span>			panic(&#34;illegal base or size&#34;)
<a id="L334"></a><span class="ln">   334</span>		}
<a id="L335"></a><span class="ln">   335</span>		<span class="comment">// base &gt;= s.base &amp;&amp; size &gt;= 0</span>
<a id="L336"></a><span class="ln">   336</span>		f := &amp;File{s, filename, base, size, []int{0}, nil}
<a id="L337"></a><span class="ln">   337</span>		base += size + 1 <span class="comment">// +1 because EOF also has a position</span>
<a id="L338"></a><span class="ln">   338</span>		if base &lt; 0 {
<a id="L339"></a><span class="ln">   339</span>			panic(&#34;token.Pos offset overflow (&gt; 2G of source code in file set)&#34;)
<a id="L340"></a><span class="ln">   340</span>		}
<a id="L341"></a><span class="ln">   341</span>		<span class="comment">// add the file to the file set</span>
<a id="L342"></a><span class="ln">   342</span>		s.base = base
<a id="L343"></a><span class="ln">   343</span>		s.files = append(s.files, f)
<a id="L344"></a><span class="ln">   344</span>		s.last = f
<a id="L345"></a><span class="ln">   345</span>		return f
<a id="L346"></a><span class="ln">   346</span>	}
<a id="L347"></a><span class="ln">   347</span>	
<a id="L348"></a><span class="ln">   348</span>	<span class="comment">// Iterate calls f for the files in the file set in the order they were added</span>
<a id="L349"></a><span class="ln">   349</span>	<span class="comment">// until f returns false.</span>
<a id="L350"></a><span class="ln">   350</span>	<span class="comment">// </span>
<a id="L351"></a><span class="ln">   351</span>	func (s *FileSet) Iterate(f func(*File) bool) {
<a id="L352"></a><span class="ln">   352</span>		for i := 0; ; i++ {
<a id="L353"></a><span class="ln">   353</span>			var file *File
<a id="L354"></a><span class="ln">   354</span>			s.mutex.RLock()
<a id="L355"></a><span class="ln">   355</span>			if i &lt; len(s.files) {
<a id="L356"></a><span class="ln">   356</span>				file = s.files[i]
<a id="L357"></a><span class="ln">   357</span>			}
<a id="L358"></a><span class="ln">   358</span>			s.mutex.RUnlock()
<a id="L359"></a><span class="ln">   359</span>			if file == nil || !f(file) {
<a id="L360"></a><span class="ln">   360</span>				break
<a id="L361"></a><span class="ln">   361</span>			}
<a id="L362"></a><span class="ln">   362</span>		}
<a id="L363"></a><span class="ln">   363</span>	}
<a id="L364"></a><span class="ln">   364</span>	
<a id="L365"></a><span class="ln">   365</span>	func searchFiles(a []*File, x int) int {
<a id="L366"></a><span class="ln">   366</span>		return sort.Search(len(a), func(i int) bool { return a[i].base &gt; x }) - 1
<a id="L367"></a><span class="ln">   367</span>	}
<a id="L368"></a><span class="ln">   368</span>	
<a id="L369"></a><span class="ln">   369</span>	func (s *FileSet) file(p Pos) *File {
<a id="L370"></a><span class="ln">   370</span>		<span class="comment">// common case: p is in last file</span>
<a id="L371"></a><span class="ln">   371</span>		if f := s.last; f != nil &amp;&amp; f.base &lt;= int(p) &amp;&amp; int(p) &lt;= f.base+f.size {
<a id="L372"></a><span class="ln">   372</span>			return f
<a id="L373"></a><span class="ln">   373</span>		}
<a id="L374"></a><span class="ln">   374</span>		<span class="comment">// p is not in last file - search all files</span>
<a id="L375"></a><span class="ln">   375</span>		if i := searchFiles(s.files, int(p)); i &gt;= 0 {
<a id="L376"></a><span class="ln">   376</span>			f := s.files[i]
<a id="L377"></a><span class="ln">   377</span>			<span class="comment">// f.base &lt;= int(p) by definition of searchFiles</span>
<a id="L378"></a><span class="ln">   378</span>			if int(p) &lt;= f.base+f.size {
<a id="L379"></a><span class="ln">   379</span>				s.last = f
<a id="L380"></a><span class="ln">   380</span>				return f
<a id="L381"></a><span class="ln">   381</span>			}
<a id="L382"></a><span class="ln">   382</span>		}
<a id="L383"></a><span class="ln">   383</span>		return nil
<a id="L384"></a><span class="ln">   384</span>	}
<a id="L385"></a><span class="ln">   385</span>	
<a id="L386"></a><span class="ln">   386</span>	<span class="comment">// File returns the file that contains the position p.</span>
<a id="L387"></a><span class="ln">   387</span>	<span class="comment">// If no such file is found (for instance for p == NoPos),</span>
<a id="L388"></a><span class="ln">   388</span>	<span class="comment">// the result is nil.</span>
<a id="L389"></a><span class="ln">   389</span>	<span class="comment">//</span>
<a id="L390"></a><span class="ln">   390</span>	func (s *FileSet) File(p Pos) (f *File) {
<a id="L391"></a><span class="ln">   391</span>		if p != NoPos {
<a id="L392"></a><span class="ln">   392</span>			s.mutex.RLock()
<a id="L393"></a><span class="ln">   393</span>			f = s.file(p)
<a id="L394"></a><span class="ln">   394</span>			s.mutex.RUnlock()
<a id="L395"></a><span class="ln">   395</span>		}
<a id="L396"></a><span class="ln">   396</span>		return
<a id="L397"></a><span class="ln">   397</span>	}
<a id="L398"></a><span class="ln">   398</span>	
<a id="L399"></a><span class="ln">   399</span>	<span class="comment">// Position converts a Pos in the fileset into a general Position.</span>
<a id="L400"></a><span class="ln">   400</span>	func (s *FileSet) Position(p Pos) (pos Position) {
<a id="L401"></a><span class="ln">   401</span>		if p != NoPos {
<a id="L402"></a><span class="ln">   402</span>			s.mutex.RLock()
<a id="L403"></a><span class="ln">   403</span>			if f := s.file(p); f != nil {
<a id="L404"></a><span class="ln">   404</span>				pos = f.position(p)
<a id="L405"></a><span class="ln">   405</span>			}
<a id="L406"></a><span class="ln">   406</span>			s.mutex.RUnlock()
<a id="L407"></a><span class="ln">   407</span>		}
<a id="L408"></a><span class="ln">   408</span>		return
<a id="L409"></a><span class="ln">   409</span>	}
<a id="L410"></a><span class="ln">   410</span>	
<a id="L411"></a><span class="ln">   411</span>	<span class="comment">// -----------------------------------------------------------------------------</span>
<a id="L412"></a><span class="ln">   412</span>	<span class="comment">// Helper functions</span>
<a id="L413"></a><span class="ln">   413</span>	
<a id="L414"></a><span class="ln">   414</span>	func searchInts(a []int, x int) int {
<a id="L415"></a><span class="ln">   415</span>		<span class="comment">// This function body is a manually inlined version of:</span>
<a id="L416"></a><span class="ln">   416</span>		<span class="comment">//</span>
<a id="L417"></a><span class="ln">   417</span>		<span class="comment">//   return sort.Search(len(a), func(i int) bool { return a[i] &gt; x }) - 1</span>
<a id="L418"></a><span class="ln">   418</span>		<span class="comment">//</span>
<a id="L419"></a><span class="ln">   419</span>		<span class="comment">// With better compiler optimizations, this may not be needed in the</span>
<a id="L420"></a><span class="ln">   420</span>		<span class="comment">// future, but at the moment this change improves the go/printer</span>
<a id="L421"></a><span class="ln">   421</span>		<span class="comment">// benchmark performance by ~30%. This has a direct impact on the</span>
<a id="L422"></a><span class="ln">   422</span>		<span class="comment">// speed of gofmt and thus seems worthwhile (2011-04-29).</span>
<a id="L423"></a><span class="ln">   423</span>		<span class="comment">// TODO(gri): Remove this when compilers have caught up.</span>
<a id="L424"></a><span class="ln">   424</span>		i, j := 0, len(a)
<a id="L425"></a><span class="ln">   425</span>		for i &lt; j {
<a id="L426"></a><span class="ln">   426</span>			h := i + (j-i)/2 <span class="comment">// avoid overflow when computing h</span>
<a id="L427"></a><span class="ln">   427</span>			<span class="comment">// i ≤ h &lt; j</span>
<a id="L428"></a><span class="ln">   428</span>			if a[h] &lt;= x {
<a id="L429"></a><span class="ln">   429</span>				i = h + 1
<a id="L430"></a><span class="ln">   430</span>			} else {
<a id="L431"></a><span class="ln">   431</span>				j = h
<a id="L432"></a><span class="ln">   432</span>			}
<a id="L433"></a><span class="ln">   433</span>		}
<a id="L434"></a><span class="ln">   434</span>		return i - 1
<a id="L435"></a><span class="ln">   435</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

