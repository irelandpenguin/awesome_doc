<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/go/ast/import.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/go/ast/import.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package ast
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;go/token&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;sort&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;strconv&#34;
<a id="L11"></a><span class="ln">    11</span>	)
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// SortImports sorts runs of consecutive import lines in import blocks in f.</span>
<a id="L14"></a><span class="ln">    14</span>	func SortImports(fset *token.FileSet, f *File) {
<a id="L15"></a><span class="ln">    15</span>		for _, d := range f.Decls {
<a id="L16"></a><span class="ln">    16</span>			d, ok := d.(*GenDecl)
<a id="L17"></a><span class="ln">    17</span>			if !ok || d.Tok != token.IMPORT {
<a id="L18"></a><span class="ln">    18</span>				<span class="comment">// Not an import declaration, so we&#39;re done.</span>
<a id="L19"></a><span class="ln">    19</span>				<span class="comment">// Imports are always first.</span>
<a id="L20"></a><span class="ln">    20</span>				break
<a id="L21"></a><span class="ln">    21</span>			}
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>			if d.Lparen == token.NoPos {
<a id="L24"></a><span class="ln">    24</span>				<span class="comment">// Not a block: sorted by default.</span>
<a id="L25"></a><span class="ln">    25</span>				continue
<a id="L26"></a><span class="ln">    26</span>			}
<a id="L27"></a><span class="ln">    27</span>	
<a id="L28"></a><span class="ln">    28</span>			<span class="comment">// Identify and sort runs of specs on successive lines.</span>
<a id="L29"></a><span class="ln">    29</span>			i := 0
<a id="L30"></a><span class="ln">    30</span>			for j, s := range d.Specs {
<a id="L31"></a><span class="ln">    31</span>				if j &gt; i &amp;&amp; fset.Position(s.Pos()).Line &gt; 1+fset.Position(d.Specs[j-1].End()).Line {
<a id="L32"></a><span class="ln">    32</span>					<span class="comment">// j begins a new run.  End this one.</span>
<a id="L33"></a><span class="ln">    33</span>					sortSpecs(fset, f, d.Specs[i:j])
<a id="L34"></a><span class="ln">    34</span>					i = j
<a id="L35"></a><span class="ln">    35</span>				}
<a id="L36"></a><span class="ln">    36</span>			}
<a id="L37"></a><span class="ln">    37</span>			sortSpecs(fset, f, d.Specs[i:])
<a id="L38"></a><span class="ln">    38</span>		}
<a id="L39"></a><span class="ln">    39</span>	}
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>	func importPath(s Spec) string {
<a id="L42"></a><span class="ln">    42</span>		t, err := strconv.Unquote(s.(*ImportSpec).Path.Value)
<a id="L43"></a><span class="ln">    43</span>		if err == nil {
<a id="L44"></a><span class="ln">    44</span>			return t
<a id="L45"></a><span class="ln">    45</span>		}
<a id="L46"></a><span class="ln">    46</span>		return &#34;&#34;
<a id="L47"></a><span class="ln">    47</span>	}
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>	type posSpan struct {
<a id="L50"></a><span class="ln">    50</span>		Start token.Pos
<a id="L51"></a><span class="ln">    51</span>		End   token.Pos
<a id="L52"></a><span class="ln">    52</span>	}
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>	func sortSpecs(fset *token.FileSet, f *File, specs []Spec) {
<a id="L55"></a><span class="ln">    55</span>		<span class="comment">// Avoid work if already sorted (also catches &lt; 2 entries).</span>
<a id="L56"></a><span class="ln">    56</span>		sorted := true
<a id="L57"></a><span class="ln">    57</span>		for i, s := range specs {
<a id="L58"></a><span class="ln">    58</span>			if i &gt; 0 &amp;&amp; importPath(specs[i-1]) &gt; importPath(s) {
<a id="L59"></a><span class="ln">    59</span>				sorted = false
<a id="L60"></a><span class="ln">    60</span>				break
<a id="L61"></a><span class="ln">    61</span>			}
<a id="L62"></a><span class="ln">    62</span>		}
<a id="L63"></a><span class="ln">    63</span>		if sorted {
<a id="L64"></a><span class="ln">    64</span>			return
<a id="L65"></a><span class="ln">    65</span>		}
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>		<span class="comment">// Record positions for specs.</span>
<a id="L68"></a><span class="ln">    68</span>		pos := make([]posSpan, len(specs))
<a id="L69"></a><span class="ln">    69</span>		for i, s := range specs {
<a id="L70"></a><span class="ln">    70</span>			pos[i] = posSpan{s.Pos(), s.End()}
<a id="L71"></a><span class="ln">    71</span>		}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>		<span class="comment">// Identify comments in this range.</span>
<a id="L74"></a><span class="ln">    74</span>		<span class="comment">// Any comment from pos[0].Start to the final line counts.</span>
<a id="L75"></a><span class="ln">    75</span>		lastLine := fset.Position(pos[len(pos)-1].End).Line
<a id="L76"></a><span class="ln">    76</span>		cstart := len(f.Comments)
<a id="L77"></a><span class="ln">    77</span>		cend := len(f.Comments)
<a id="L78"></a><span class="ln">    78</span>		for i, g := range f.Comments {
<a id="L79"></a><span class="ln">    79</span>			if g.Pos() &lt; pos[0].Start {
<a id="L80"></a><span class="ln">    80</span>				continue
<a id="L81"></a><span class="ln">    81</span>			}
<a id="L82"></a><span class="ln">    82</span>			if i &lt; cstart {
<a id="L83"></a><span class="ln">    83</span>				cstart = i
<a id="L84"></a><span class="ln">    84</span>			}
<a id="L85"></a><span class="ln">    85</span>			if fset.Position(g.End()).Line &gt; lastLine {
<a id="L86"></a><span class="ln">    86</span>				cend = i
<a id="L87"></a><span class="ln">    87</span>				break
<a id="L88"></a><span class="ln">    88</span>			}
<a id="L89"></a><span class="ln">    89</span>		}
<a id="L90"></a><span class="ln">    90</span>		comments := f.Comments[cstart:cend]
<a id="L91"></a><span class="ln">    91</span>	
<a id="L92"></a><span class="ln">    92</span>		<span class="comment">// Assign each comment to the import spec preceding it.</span>
<a id="L93"></a><span class="ln">    93</span>		importComment := map[*ImportSpec][]*CommentGroup{}
<a id="L94"></a><span class="ln">    94</span>		specIndex := 0
<a id="L95"></a><span class="ln">    95</span>		for _, g := range comments {
<a id="L96"></a><span class="ln">    96</span>			for specIndex+1 &lt; len(specs) &amp;&amp; pos[specIndex+1].Start &lt;= g.Pos() {
<a id="L97"></a><span class="ln">    97</span>				specIndex++
<a id="L98"></a><span class="ln">    98</span>			}
<a id="L99"></a><span class="ln">    99</span>			s := specs[specIndex].(*ImportSpec)
<a id="L100"></a><span class="ln">   100</span>			importComment[s] = append(importComment[s], g)
<a id="L101"></a><span class="ln">   101</span>		}
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>		<span class="comment">// Sort the import specs by import path.</span>
<a id="L104"></a><span class="ln">   104</span>		<span class="comment">// Reassign the import paths to have the same position sequence.</span>
<a id="L105"></a><span class="ln">   105</span>		<span class="comment">// Reassign each comment to abut the end of its spec.</span>
<a id="L106"></a><span class="ln">   106</span>		<span class="comment">// Sort the comments by new position.</span>
<a id="L107"></a><span class="ln">   107</span>		sort.Sort(byImportPath(specs))
<a id="L108"></a><span class="ln">   108</span>		for i, s := range specs {
<a id="L109"></a><span class="ln">   109</span>			s := s.(*ImportSpec)
<a id="L110"></a><span class="ln">   110</span>			if s.Name != nil {
<a id="L111"></a><span class="ln">   111</span>				s.Name.NamePos = pos[i].Start
<a id="L112"></a><span class="ln">   112</span>			}
<a id="L113"></a><span class="ln">   113</span>			s.Path.ValuePos = pos[i].Start
<a id="L114"></a><span class="ln">   114</span>			s.EndPos = pos[i].End
<a id="L115"></a><span class="ln">   115</span>			for _, g := range importComment[s] {
<a id="L116"></a><span class="ln">   116</span>				for _, c := range g.List {
<a id="L117"></a><span class="ln">   117</span>					c.Slash = pos[i].End
<a id="L118"></a><span class="ln">   118</span>				}
<a id="L119"></a><span class="ln">   119</span>			}
<a id="L120"></a><span class="ln">   120</span>		}
<a id="L121"></a><span class="ln">   121</span>		sort.Sort(byCommentPos(comments))
<a id="L122"></a><span class="ln">   122</span>	}
<a id="L123"></a><span class="ln">   123</span>	
<a id="L124"></a><span class="ln">   124</span>	type byImportPath []Spec <span class="comment">// slice of *ImportSpec</span>
<a id="L125"></a><span class="ln">   125</span>	
<a id="L126"></a><span class="ln">   126</span>	func (x byImportPath) Len() int           { return len(x) }
<a id="L127"></a><span class="ln">   127</span>	func (x byImportPath) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }
<a id="L128"></a><span class="ln">   128</span>	func (x byImportPath) Less(i, j int) bool { return importPath(x[i]) &lt; importPath(x[j]) }
<a id="L129"></a><span class="ln">   129</span>	
<a id="L130"></a><span class="ln">   130</span>	type byCommentPos []*CommentGroup
<a id="L131"></a><span class="ln">   131</span>	
<a id="L132"></a><span class="ln">   132</span>	func (x byCommentPos) Len() int           { return len(x) }
<a id="L133"></a><span class="ln">   133</span>	func (x byCommentPos) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }
<a id="L134"></a><span class="ln">   134</span>	func (x byCommentPos) Less(i, j int) bool { return x[i].Pos() &lt; x[j].Pos() }
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

