<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/go/ast/resolve.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/go/ast/resolve.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// This file implements NewPackage.</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package ast
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;fmt&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;go/scanner&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;go/token&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;strconv&#34;
<a id="L14"></a><span class="ln">    14</span>	)
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	type pkgBuilder struct {
<a id="L17"></a><span class="ln">    17</span>		fset   *token.FileSet
<a id="L18"></a><span class="ln">    18</span>		errors scanner.ErrorList
<a id="L19"></a><span class="ln">    19</span>	}
<a id="L20"></a><span class="ln">    20</span>	
<a id="L21"></a><span class="ln">    21</span>	func (p *pkgBuilder) error(pos token.Pos, msg string) {
<a id="L22"></a><span class="ln">    22</span>		p.errors.Add(p.fset.Position(pos), msg)
<a id="L23"></a><span class="ln">    23</span>	}
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	func (p *pkgBuilder) errorf(pos token.Pos, format string, args ...interface{}) {
<a id="L26"></a><span class="ln">    26</span>		p.error(pos, fmt.Sprintf(format, args...))
<a id="L27"></a><span class="ln">    27</span>	}
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>	func (p *pkgBuilder) declare(scope, altScope *Scope, obj *Object) {
<a id="L30"></a><span class="ln">    30</span>		alt := scope.Insert(obj)
<a id="L31"></a><span class="ln">    31</span>		if alt == nil &amp;&amp; altScope != nil {
<a id="L32"></a><span class="ln">    32</span>			<span class="comment">// see if there is a conflicting declaration in altScope</span>
<a id="L33"></a><span class="ln">    33</span>			alt = altScope.Lookup(obj.Name)
<a id="L34"></a><span class="ln">    34</span>		}
<a id="L35"></a><span class="ln">    35</span>		if alt != nil {
<a id="L36"></a><span class="ln">    36</span>			prevDecl := &#34;&#34;
<a id="L37"></a><span class="ln">    37</span>			if pos := alt.Pos(); pos.IsValid() {
<a id="L38"></a><span class="ln">    38</span>				prevDecl = fmt.Sprintf(&#34;\n\tprevious declaration at %s&#34;, p.fset.Position(pos))
<a id="L39"></a><span class="ln">    39</span>			}
<a id="L40"></a><span class="ln">    40</span>			p.error(obj.Pos(), fmt.Sprintf(&#34;%s redeclared in this block%s&#34;, obj.Name, prevDecl))
<a id="L41"></a><span class="ln">    41</span>		}
<a id="L42"></a><span class="ln">    42</span>	}
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	func resolve(scope *Scope, ident *Ident) bool {
<a id="L45"></a><span class="ln">    45</span>		for ; scope != nil; scope = scope.Outer {
<a id="L46"></a><span class="ln">    46</span>			if obj := scope.Lookup(ident.Name); obj != nil {
<a id="L47"></a><span class="ln">    47</span>				ident.Obj = obj
<a id="L48"></a><span class="ln">    48</span>				return true
<a id="L49"></a><span class="ln">    49</span>			}
<a id="L50"></a><span class="ln">    50</span>		}
<a id="L51"></a><span class="ln">    51</span>		return false
<a id="L52"></a><span class="ln">    52</span>	}
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">// An Importer resolves import paths to package Objects.</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// The imports map records the packages already imported,</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// indexed by package id (canonical import path).</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">// An Importer must determine the canonical import path and</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// check the map to see if it is already present in the imports map.</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// If so, the Importer can return the map entry.  Otherwise, the</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// Importer should load the package data for the given path into </span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">// a new *Object (pkg), record pkg in the imports map, and then</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">// return pkg.</span>
<a id="L63"></a><span class="ln">    63</span>	type Importer func(imports map[string]*Object, path string) (pkg *Object, err error)
<a id="L64"></a><span class="ln">    64</span>	
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// NewPackage creates a new Package node from a set of File nodes. It resolves</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">// unresolved identifiers across files and updates each file&#39;s Unresolved list</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// accordingly. If a non-nil importer and universe scope are provided, they are</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// used to resolve identifiers not declared in any of the package files. Any</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// remaining unresolved identifiers are reported as undeclared. If the files</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// belong to different packages, one package name is selected and files with</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">// different package names are reported and then ignored.</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">// The result is a package node and a scanner.ErrorList if there were errors.</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">//</span>
<a id="L74"></a><span class="ln">    74</span>	func NewPackage(fset *token.FileSet, files map[string]*File, importer Importer, universe *Scope) (*Package, error) {
<a id="L75"></a><span class="ln">    75</span>		var p pkgBuilder
<a id="L76"></a><span class="ln">    76</span>		p.fset = fset
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>		<span class="comment">// complete package scope</span>
<a id="L79"></a><span class="ln">    79</span>		pkgName := &#34;&#34;
<a id="L80"></a><span class="ln">    80</span>		pkgScope := NewScope(universe)
<a id="L81"></a><span class="ln">    81</span>		for _, file := range files {
<a id="L82"></a><span class="ln">    82</span>			<span class="comment">// package names must match</span>
<a id="L83"></a><span class="ln">    83</span>			switch name := file.Name.Name; {
<a id="L84"></a><span class="ln">    84</span>			case pkgName == &#34;&#34;:
<a id="L85"></a><span class="ln">    85</span>				pkgName = name
<a id="L86"></a><span class="ln">    86</span>			case name != pkgName:
<a id="L87"></a><span class="ln">    87</span>				p.errorf(file.Package, &#34;package %s; expected %s&#34;, name, pkgName)
<a id="L88"></a><span class="ln">    88</span>				continue <span class="comment">// ignore this file</span>
<a id="L89"></a><span class="ln">    89</span>			}
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>			<span class="comment">// collect top-level file objects in package scope</span>
<a id="L92"></a><span class="ln">    92</span>			for _, obj := range file.Scope.Objects {
<a id="L93"></a><span class="ln">    93</span>				p.declare(pkgScope, nil, obj)
<a id="L94"></a><span class="ln">    94</span>			}
<a id="L95"></a><span class="ln">    95</span>		}
<a id="L96"></a><span class="ln">    96</span>	
<a id="L97"></a><span class="ln">    97</span>		<span class="comment">// package global mapping of imported package ids to package objects</span>
<a id="L98"></a><span class="ln">    98</span>		imports := make(map[string]*Object)
<a id="L99"></a><span class="ln">    99</span>	
<a id="L100"></a><span class="ln">   100</span>		<span class="comment">// complete file scopes with imports and resolve identifiers</span>
<a id="L101"></a><span class="ln">   101</span>		for _, file := range files {
<a id="L102"></a><span class="ln">   102</span>			<span class="comment">// ignore file if it belongs to a different package</span>
<a id="L103"></a><span class="ln">   103</span>			<span class="comment">// (error has already been reported)</span>
<a id="L104"></a><span class="ln">   104</span>			if file.Name.Name != pkgName {
<a id="L105"></a><span class="ln">   105</span>				continue
<a id="L106"></a><span class="ln">   106</span>			}
<a id="L107"></a><span class="ln">   107</span>	
<a id="L108"></a><span class="ln">   108</span>			<span class="comment">// build file scope by processing all imports</span>
<a id="L109"></a><span class="ln">   109</span>			importErrors := false
<a id="L110"></a><span class="ln">   110</span>			fileScope := NewScope(pkgScope)
<a id="L111"></a><span class="ln">   111</span>			for _, spec := range file.Imports {
<a id="L112"></a><span class="ln">   112</span>				if importer == nil {
<a id="L113"></a><span class="ln">   113</span>					importErrors = true
<a id="L114"></a><span class="ln">   114</span>					continue
<a id="L115"></a><span class="ln">   115</span>				}
<a id="L116"></a><span class="ln">   116</span>				path, _ := strconv.Unquote(spec.Path.Value)
<a id="L117"></a><span class="ln">   117</span>				pkg, err := importer(imports, path)
<a id="L118"></a><span class="ln">   118</span>				if err != nil {
<a id="L119"></a><span class="ln">   119</span>					p.errorf(spec.Path.Pos(), &#34;could not import %s (%s)&#34;, path, err)
<a id="L120"></a><span class="ln">   120</span>					importErrors = true
<a id="L121"></a><span class="ln">   121</span>					continue
<a id="L122"></a><span class="ln">   122</span>				}
<a id="L123"></a><span class="ln">   123</span>				<span class="comment">// TODO(gri) If a local package name != &#34;.&#34; is provided,</span>
<a id="L124"></a><span class="ln">   124</span>				<span class="comment">// global identifier resolution could proceed even if the</span>
<a id="L125"></a><span class="ln">   125</span>				<span class="comment">// import failed. Consider adjusting the logic here a bit.</span>
<a id="L126"></a><span class="ln">   126</span>	
<a id="L127"></a><span class="ln">   127</span>				<span class="comment">// local name overrides imported package name</span>
<a id="L128"></a><span class="ln">   128</span>				name := pkg.Name
<a id="L129"></a><span class="ln">   129</span>				if spec.Name != nil {
<a id="L130"></a><span class="ln">   130</span>					name = spec.Name.Name
<a id="L131"></a><span class="ln">   131</span>				}
<a id="L132"></a><span class="ln">   132</span>	
<a id="L133"></a><span class="ln">   133</span>				<span class="comment">// add import to file scope</span>
<a id="L134"></a><span class="ln">   134</span>				if name == &#34;.&#34; {
<a id="L135"></a><span class="ln">   135</span>					<span class="comment">// merge imported scope with file scope</span>
<a id="L136"></a><span class="ln">   136</span>					for _, obj := range pkg.Data.(*Scope).Objects {
<a id="L137"></a><span class="ln">   137</span>						p.declare(fileScope, pkgScope, obj)
<a id="L138"></a><span class="ln">   138</span>					}
<a id="L139"></a><span class="ln">   139</span>				} else {
<a id="L140"></a><span class="ln">   140</span>					<span class="comment">// declare imported package object in file scope</span>
<a id="L141"></a><span class="ln">   141</span>					<span class="comment">// (do not re-use pkg in the file scope but create</span>
<a id="L142"></a><span class="ln">   142</span>					<span class="comment">// a new object instead; the Decl field is different</span>
<a id="L143"></a><span class="ln">   143</span>					<span class="comment">// for different files)</span>
<a id="L144"></a><span class="ln">   144</span>					obj := NewObj(Pkg, name)
<a id="L145"></a><span class="ln">   145</span>					obj.Decl = spec
<a id="L146"></a><span class="ln">   146</span>					obj.Data = pkg.Data
<a id="L147"></a><span class="ln">   147</span>					p.declare(fileScope, pkgScope, obj)
<a id="L148"></a><span class="ln">   148</span>				}
<a id="L149"></a><span class="ln">   149</span>			}
<a id="L150"></a><span class="ln">   150</span>	
<a id="L151"></a><span class="ln">   151</span>			<span class="comment">// resolve identifiers</span>
<a id="L152"></a><span class="ln">   152</span>			if importErrors {
<a id="L153"></a><span class="ln">   153</span>				<span class="comment">// don&#39;t use the universe scope without correct imports</span>
<a id="L154"></a><span class="ln">   154</span>				<span class="comment">// (objects in the universe may be shadowed by imports;</span>
<a id="L155"></a><span class="ln">   155</span>				<span class="comment">// with missing imports, identifiers might get resolved</span>
<a id="L156"></a><span class="ln">   156</span>				<span class="comment">// incorrectly to universe objects)</span>
<a id="L157"></a><span class="ln">   157</span>				pkgScope.Outer = nil
<a id="L158"></a><span class="ln">   158</span>			}
<a id="L159"></a><span class="ln">   159</span>			i := 0
<a id="L160"></a><span class="ln">   160</span>			for _, ident := range file.Unresolved {
<a id="L161"></a><span class="ln">   161</span>				if !resolve(fileScope, ident) {
<a id="L162"></a><span class="ln">   162</span>					p.errorf(ident.Pos(), &#34;undeclared name: %s&#34;, ident.Name)
<a id="L163"></a><span class="ln">   163</span>					file.Unresolved[i] = ident
<a id="L164"></a><span class="ln">   164</span>					i++
<a id="L165"></a><span class="ln">   165</span>				}
<a id="L166"></a><span class="ln">   166</span>	
<a id="L167"></a><span class="ln">   167</span>			}
<a id="L168"></a><span class="ln">   168</span>			file.Unresolved = file.Unresolved[0:i]
<a id="L169"></a><span class="ln">   169</span>			pkgScope.Outer = universe <span class="comment">// reset universe scope</span>
<a id="L170"></a><span class="ln">   170</span>		}
<a id="L171"></a><span class="ln">   171</span>	
<a id="L172"></a><span class="ln">   172</span>		p.errors.Sort()
<a id="L173"></a><span class="ln">   173</span>		return &amp;Package{pkgName, pkgScope, imports, files}, p.errors.Err()
<a id="L174"></a><span class="ln">   174</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

