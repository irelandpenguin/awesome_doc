<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/go/ast/print.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/go/ast/print.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// This file contains printing support for ASTs.</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package ast
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;fmt&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;go/token&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;io&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;os&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;reflect&#34;
<a id="L15"></a><span class="ln">    15</span>	)
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// A FieldFilter may be provided to Fprint to control the output.</span>
<a id="L18"></a><span class="ln">    18</span>	type FieldFilter func(name string, value reflect.Value) bool
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// NotNilFilter returns true for field values that are not nil;</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// it returns false otherwise.</span>
<a id="L22"></a><span class="ln">    22</span>	func NotNilFilter(_ string, v reflect.Value) bool {
<a id="L23"></a><span class="ln">    23</span>		switch v.Kind() {
<a id="L24"></a><span class="ln">    24</span>		case reflect.Chan, reflect.Func, reflect.Interface, reflect.Map, reflect.Ptr, reflect.Slice:
<a id="L25"></a><span class="ln">    25</span>			return !v.IsNil()
<a id="L26"></a><span class="ln">    26</span>		}
<a id="L27"></a><span class="ln">    27</span>		return true
<a id="L28"></a><span class="ln">    28</span>	}
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// Fprint prints the (sub-)tree starting at AST node x to w.</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// If fset != nil, position information is interpreted relative</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// to that file set. Otherwise positions are printed as integer</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// values (file set specific offsets).</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">//</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// A non-nil FieldFilter f may be provided to control the output:</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// struct fields for which f(fieldname, fieldvalue) is true are</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// are printed; all others are filtered from the output.</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//</span>
<a id="L39"></a><span class="ln">    39</span>	func Fprint(w io.Writer, fset *token.FileSet, x interface{}, f FieldFilter) (err error) {
<a id="L40"></a><span class="ln">    40</span>		<span class="comment">// setup printer</span>
<a id="L41"></a><span class="ln">    41</span>		p := printer{
<a id="L42"></a><span class="ln">    42</span>			output: w,
<a id="L43"></a><span class="ln">    43</span>			fset:   fset,
<a id="L44"></a><span class="ln">    44</span>			filter: f,
<a id="L45"></a><span class="ln">    45</span>			ptrmap: make(map[interface{}]int),
<a id="L46"></a><span class="ln">    46</span>			last:   &#39;\n&#39;, <span class="comment">// force printing of line number on first line</span>
<a id="L47"></a><span class="ln">    47</span>		}
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>		<span class="comment">// install error handler</span>
<a id="L50"></a><span class="ln">    50</span>		defer func() {
<a id="L51"></a><span class="ln">    51</span>			if e := recover(); e != nil {
<a id="L52"></a><span class="ln">    52</span>				err = e.(localError).err <span class="comment">// re-panics if it&#39;s not a localError</span>
<a id="L53"></a><span class="ln">    53</span>			}
<a id="L54"></a><span class="ln">    54</span>		}()
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>		<span class="comment">// print x</span>
<a id="L57"></a><span class="ln">    57</span>		if x == nil {
<a id="L58"></a><span class="ln">    58</span>			p.printf(&#34;nil\n&#34;)
<a id="L59"></a><span class="ln">    59</span>			return
<a id="L60"></a><span class="ln">    60</span>		}
<a id="L61"></a><span class="ln">    61</span>		p.print(reflect.ValueOf(x))
<a id="L62"></a><span class="ln">    62</span>		p.printf(&#34;\n&#34;)
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>		return
<a id="L65"></a><span class="ln">    65</span>	}
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// Print prints x to standard output, skipping nil fields.</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// Print(fset, x) is the same as Fprint(os.Stdout, fset, x, NotNilFilter).</span>
<a id="L69"></a><span class="ln">    69</span>	func Print(fset *token.FileSet, x interface{}) error {
<a id="L70"></a><span class="ln">    70</span>		return Fprint(os.Stdout, fset, x, NotNilFilter)
<a id="L71"></a><span class="ln">    71</span>	}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>	type printer struct {
<a id="L74"></a><span class="ln">    74</span>		output io.Writer
<a id="L75"></a><span class="ln">    75</span>		fset   *token.FileSet
<a id="L76"></a><span class="ln">    76</span>		filter FieldFilter
<a id="L77"></a><span class="ln">    77</span>		ptrmap map[interface{}]int <span class="comment">// *T -&gt; line number</span>
<a id="L78"></a><span class="ln">    78</span>		indent int                 <span class="comment">// current indentation level</span>
<a id="L79"></a><span class="ln">    79</span>		last   byte                <span class="comment">// the last byte processed by Write</span>
<a id="L80"></a><span class="ln">    80</span>		line   int                 <span class="comment">// current line number</span>
<a id="L81"></a><span class="ln">    81</span>	}
<a id="L82"></a><span class="ln">    82</span>	
<a id="L83"></a><span class="ln">    83</span>	var indent = []byte(&#34;.  &#34;)
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>	func (p *printer) Write(data []byte) (n int, err error) {
<a id="L86"></a><span class="ln">    86</span>		var m int
<a id="L87"></a><span class="ln">    87</span>		for i, b := range data {
<a id="L88"></a><span class="ln">    88</span>			<span class="comment">// invariant: data[0:n] has been written</span>
<a id="L89"></a><span class="ln">    89</span>			if b == &#39;\n&#39; {
<a id="L90"></a><span class="ln">    90</span>				m, err = p.output.Write(data[n : i+1])
<a id="L91"></a><span class="ln">    91</span>				n += m
<a id="L92"></a><span class="ln">    92</span>				if err != nil {
<a id="L93"></a><span class="ln">    93</span>					return
<a id="L94"></a><span class="ln">    94</span>				}
<a id="L95"></a><span class="ln">    95</span>				p.line++
<a id="L96"></a><span class="ln">    96</span>			} else if p.last == &#39;\n&#39; {
<a id="L97"></a><span class="ln">    97</span>				_, err = fmt.Fprintf(p.output, &#34;%6d  &#34;, p.line)
<a id="L98"></a><span class="ln">    98</span>				if err != nil {
<a id="L99"></a><span class="ln">    99</span>					return
<a id="L100"></a><span class="ln">   100</span>				}
<a id="L101"></a><span class="ln">   101</span>				for j := p.indent; j &gt; 0; j-- {
<a id="L102"></a><span class="ln">   102</span>					_, err = p.output.Write(indent)
<a id="L103"></a><span class="ln">   103</span>					if err != nil {
<a id="L104"></a><span class="ln">   104</span>						return
<a id="L105"></a><span class="ln">   105</span>					}
<a id="L106"></a><span class="ln">   106</span>				}
<a id="L107"></a><span class="ln">   107</span>			}
<a id="L108"></a><span class="ln">   108</span>			p.last = b
<a id="L109"></a><span class="ln">   109</span>		}
<a id="L110"></a><span class="ln">   110</span>		m, err = p.output.Write(data[n:])
<a id="L111"></a><span class="ln">   111</span>		n += m
<a id="L112"></a><span class="ln">   112</span>		return
<a id="L113"></a><span class="ln">   113</span>	}
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>	<span class="comment">// localError wraps locally caught errors so we can distinguish</span>
<a id="L116"></a><span class="ln">   116</span>	<span class="comment">// them from genuine panics which we don&#39;t want to return as errors.</span>
<a id="L117"></a><span class="ln">   117</span>	type localError struct {
<a id="L118"></a><span class="ln">   118</span>		err error
<a id="L119"></a><span class="ln">   119</span>	}
<a id="L120"></a><span class="ln">   120</span>	
<a id="L121"></a><span class="ln">   121</span>	<span class="comment">// printf is a convenience wrapper that takes care of print errors.</span>
<a id="L122"></a><span class="ln">   122</span>	func (p *printer) printf(format string, args ...interface{}) {
<a id="L123"></a><span class="ln">   123</span>		if _, err := fmt.Fprintf(p, format, args...); err != nil {
<a id="L124"></a><span class="ln">   124</span>			panic(localError{err})
<a id="L125"></a><span class="ln">   125</span>		}
<a id="L126"></a><span class="ln">   126</span>	}
<a id="L127"></a><span class="ln">   127</span>	
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// Implementation note: Print is written for AST nodes but could be</span>
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// used to print arbitrary data structures; such a version should</span>
<a id="L130"></a><span class="ln">   130</span>	<span class="comment">// probably be in a different package.</span>
<a id="L131"></a><span class="ln">   131</span>	<span class="comment">//</span>
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">// Note: This code detects (some) cycles created via pointers but</span>
<a id="L133"></a><span class="ln">   133</span>	<span class="comment">// not cycles that are created via slices or maps containing the</span>
<a id="L134"></a><span class="ln">   134</span>	<span class="comment">// same slice or map. Code for general data structures probably</span>
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">// should catch those as well.</span>
<a id="L136"></a><span class="ln">   136</span>	
<a id="L137"></a><span class="ln">   137</span>	func (p *printer) print(x reflect.Value) {
<a id="L138"></a><span class="ln">   138</span>		if !NotNilFilter(&#34;&#34;, x) {
<a id="L139"></a><span class="ln">   139</span>			p.printf(&#34;nil&#34;)
<a id="L140"></a><span class="ln">   140</span>			return
<a id="L141"></a><span class="ln">   141</span>		}
<a id="L142"></a><span class="ln">   142</span>	
<a id="L143"></a><span class="ln">   143</span>		switch x.Kind() {
<a id="L144"></a><span class="ln">   144</span>		case reflect.Interface:
<a id="L145"></a><span class="ln">   145</span>			p.print(x.Elem())
<a id="L146"></a><span class="ln">   146</span>	
<a id="L147"></a><span class="ln">   147</span>		case reflect.Map:
<a id="L148"></a><span class="ln">   148</span>			p.printf(&#34;%s (len = %d) {\n&#34;, x.Type(), x.Len())
<a id="L149"></a><span class="ln">   149</span>			p.indent++
<a id="L150"></a><span class="ln">   150</span>			for _, key := range x.MapKeys() {
<a id="L151"></a><span class="ln">   151</span>				p.print(key)
<a id="L152"></a><span class="ln">   152</span>				p.printf(&#34;: &#34;)
<a id="L153"></a><span class="ln">   153</span>				p.print(x.MapIndex(key))
<a id="L154"></a><span class="ln">   154</span>				p.printf(&#34;\n&#34;)
<a id="L155"></a><span class="ln">   155</span>			}
<a id="L156"></a><span class="ln">   156</span>			p.indent--
<a id="L157"></a><span class="ln">   157</span>			p.printf(&#34;}&#34;)
<a id="L158"></a><span class="ln">   158</span>	
<a id="L159"></a><span class="ln">   159</span>		case reflect.Ptr:
<a id="L160"></a><span class="ln">   160</span>			p.printf(&#34;*&#34;)
<a id="L161"></a><span class="ln">   161</span>			<span class="comment">// type-checked ASTs may contain cycles - use ptrmap</span>
<a id="L162"></a><span class="ln">   162</span>			<span class="comment">// to keep track of objects that have been printed</span>
<a id="L163"></a><span class="ln">   163</span>			<span class="comment">// already and print the respective line number instead</span>
<a id="L164"></a><span class="ln">   164</span>			ptr := x.Interface()
<a id="L165"></a><span class="ln">   165</span>			if line, exists := p.ptrmap[ptr]; exists {
<a id="L166"></a><span class="ln">   166</span>				p.printf(&#34;(obj @ %d)&#34;, line)
<a id="L167"></a><span class="ln">   167</span>			} else {
<a id="L168"></a><span class="ln">   168</span>				p.ptrmap[ptr] = p.line
<a id="L169"></a><span class="ln">   169</span>				p.print(x.Elem())
<a id="L170"></a><span class="ln">   170</span>			}
<a id="L171"></a><span class="ln">   171</span>	
<a id="L172"></a><span class="ln">   172</span>		case reflect.Slice:
<a id="L173"></a><span class="ln">   173</span>			if s, ok := x.Interface().([]byte); ok {
<a id="L174"></a><span class="ln">   174</span>				p.printf(&#34;%#q&#34;, s)
<a id="L175"></a><span class="ln">   175</span>				return
<a id="L176"></a><span class="ln">   176</span>			}
<a id="L177"></a><span class="ln">   177</span>			p.printf(&#34;%s (len = %d) {\n&#34;, x.Type(), x.Len())
<a id="L178"></a><span class="ln">   178</span>			p.indent++
<a id="L179"></a><span class="ln">   179</span>			for i, n := 0, x.Len(); i &lt; n; i++ {
<a id="L180"></a><span class="ln">   180</span>				p.printf(&#34;%d: &#34;, i)
<a id="L181"></a><span class="ln">   181</span>				p.print(x.Index(i))
<a id="L182"></a><span class="ln">   182</span>				p.printf(&#34;\n&#34;)
<a id="L183"></a><span class="ln">   183</span>			}
<a id="L184"></a><span class="ln">   184</span>			p.indent--
<a id="L185"></a><span class="ln">   185</span>			p.printf(&#34;}&#34;)
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>		case reflect.Struct:
<a id="L188"></a><span class="ln">   188</span>			p.printf(&#34;%s {\n&#34;, x.Type())
<a id="L189"></a><span class="ln">   189</span>			p.indent++
<a id="L190"></a><span class="ln">   190</span>			t := x.Type()
<a id="L191"></a><span class="ln">   191</span>			for i, n := 0, t.NumField(); i &lt; n; i++ {
<a id="L192"></a><span class="ln">   192</span>				name := t.Field(i).Name
<a id="L193"></a><span class="ln">   193</span>				value := x.Field(i)
<a id="L194"></a><span class="ln">   194</span>				if p.filter == nil || p.filter(name, value) {
<a id="L195"></a><span class="ln">   195</span>					p.printf(&#34;%s: &#34;, name)
<a id="L196"></a><span class="ln">   196</span>					p.print(value)
<a id="L197"></a><span class="ln">   197</span>					p.printf(&#34;\n&#34;)
<a id="L198"></a><span class="ln">   198</span>				}
<a id="L199"></a><span class="ln">   199</span>			}
<a id="L200"></a><span class="ln">   200</span>			p.indent--
<a id="L201"></a><span class="ln">   201</span>			p.printf(&#34;}&#34;)
<a id="L202"></a><span class="ln">   202</span>	
<a id="L203"></a><span class="ln">   203</span>		default:
<a id="L204"></a><span class="ln">   204</span>			v := x.Interface()
<a id="L205"></a><span class="ln">   205</span>			switch v := v.(type) {
<a id="L206"></a><span class="ln">   206</span>			case string:
<a id="L207"></a><span class="ln">   207</span>				<span class="comment">// print strings in quotes</span>
<a id="L208"></a><span class="ln">   208</span>				p.printf(&#34;%q&#34;, v)
<a id="L209"></a><span class="ln">   209</span>				return
<a id="L210"></a><span class="ln">   210</span>			case token.Pos:
<a id="L211"></a><span class="ln">   211</span>				<span class="comment">// position values can be printed nicely if we have a file set</span>
<a id="L212"></a><span class="ln">   212</span>				if p.fset != nil {
<a id="L213"></a><span class="ln">   213</span>					p.printf(&#34;%s&#34;, p.fset.Position(v))
<a id="L214"></a><span class="ln">   214</span>					return
<a id="L215"></a><span class="ln">   215</span>				}
<a id="L216"></a><span class="ln">   216</span>			}
<a id="L217"></a><span class="ln">   217</span>			<span class="comment">// default</span>
<a id="L218"></a><span class="ln">   218</span>			p.printf(&#34;%v&#34;, v)
<a id="L219"></a><span class="ln">   219</span>		}
<a id="L220"></a><span class="ln">   220</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

