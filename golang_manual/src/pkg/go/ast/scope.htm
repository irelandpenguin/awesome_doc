<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/go/ast/scope.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/go/ast/scope.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// This file implements scopes and the objects they contain.</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package ast
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;bytes&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;fmt&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;go/token&#34;
<a id="L13"></a><span class="ln">    13</span>	)
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// A Scope maintains the set of named language entities declared</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// in the scope and a link to the immediately surrounding (outer)</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// scope.</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">//</span>
<a id="L19"></a><span class="ln">    19</span>	type Scope struct {
<a id="L20"></a><span class="ln">    20</span>		Outer   *Scope
<a id="L21"></a><span class="ln">    21</span>		Objects map[string]*Object
<a id="L22"></a><span class="ln">    22</span>	}
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// NewScope creates a new scope nested in the outer scope.</span>
<a id="L25"></a><span class="ln">    25</span>	func NewScope(outer *Scope) *Scope {
<a id="L26"></a><span class="ln">    26</span>		const n = 4 <span class="comment">// initial scope capacity</span>
<a id="L27"></a><span class="ln">    27</span>		return &amp;Scope{outer, make(map[string]*Object, n)}
<a id="L28"></a><span class="ln">    28</span>	}
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// Lookup returns the object with the given name if it is</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// found in scope s, otherwise it returns nil. Outer scopes</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// are ignored.</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">//</span>
<a id="L34"></a><span class="ln">    34</span>	func (s *Scope) Lookup(name string) *Object {
<a id="L35"></a><span class="ln">    35</span>		return s.Objects[name]
<a id="L36"></a><span class="ln">    36</span>	}
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// Insert attempts to insert a named object obj into the scope s.</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// If the scope already contains an object alt with the same name,</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// Insert leaves the scope unchanged and returns alt. Otherwise</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// it inserts obj and returns nil.&#34;</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">//</span>
<a id="L43"></a><span class="ln">    43</span>	func (s *Scope) Insert(obj *Object) (alt *Object) {
<a id="L44"></a><span class="ln">    44</span>		if alt = s.Objects[obj.Name]; alt == nil {
<a id="L45"></a><span class="ln">    45</span>			s.Objects[obj.Name] = obj
<a id="L46"></a><span class="ln">    46</span>		}
<a id="L47"></a><span class="ln">    47</span>		return
<a id="L48"></a><span class="ln">    48</span>	}
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// Debugging support</span>
<a id="L51"></a><span class="ln">    51</span>	func (s *Scope) String() string {
<a id="L52"></a><span class="ln">    52</span>		var buf bytes.Buffer
<a id="L53"></a><span class="ln">    53</span>		fmt.Fprintf(&amp;buf, &#34;scope %p {&#34;, s)
<a id="L54"></a><span class="ln">    54</span>		if s != nil &amp;&amp; len(s.Objects) &gt; 0 {
<a id="L55"></a><span class="ln">    55</span>			fmt.Fprintln(&amp;buf)
<a id="L56"></a><span class="ln">    56</span>			for _, obj := range s.Objects {
<a id="L57"></a><span class="ln">    57</span>				fmt.Fprintf(&amp;buf, &#34;\t%s %s\n&#34;, obj.Kind, obj.Name)
<a id="L58"></a><span class="ln">    58</span>			}
<a id="L59"></a><span class="ln">    59</span>		}
<a id="L60"></a><span class="ln">    60</span>		fmt.Fprintf(&amp;buf, &#34;}\n&#34;)
<a id="L61"></a><span class="ln">    61</span>		return buf.String()
<a id="L62"></a><span class="ln">    62</span>	}
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// ----------------------------------------------------------------------------</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// Objects</span>
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// TODO(gri) Consider replacing the Object struct with an interface</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">//           and a corresponding set of object implementations.</span>
<a id="L69"></a><span class="ln">    69</span>	
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// An Object describes a named language entity such as a package,</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">// constant, type, variable, function (incl. methods), or label.</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">//</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// The Data fields contains object-specific data:</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">//</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">//	Kind    Data type    Data value</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">//	Pkg	*Scope       package scope</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">//	Con     int          iota for the respective declaration</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">//	Con     != nil       constant value</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">//</span>
<a id="L80"></a><span class="ln">    80</span>	type Object struct {
<a id="L81"></a><span class="ln">    81</span>		Kind ObjKind
<a id="L82"></a><span class="ln">    82</span>		Name string      <span class="comment">// declared name</span>
<a id="L83"></a><span class="ln">    83</span>		Decl interface{} <span class="comment">// corresponding Field, XxxSpec, FuncDecl, LabeledStmt, AssignStmt, Scope; or nil</span>
<a id="L84"></a><span class="ln">    84</span>		Data interface{} <span class="comment">// object-specific data; or nil</span>
<a id="L85"></a><span class="ln">    85</span>		Type interface{} <span class="comment">// place holder for type information; may be nil</span>
<a id="L86"></a><span class="ln">    86</span>	}
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// NewObj creates a new object of a given kind and name.</span>
<a id="L89"></a><span class="ln">    89</span>	func NewObj(kind ObjKind, name string) *Object {
<a id="L90"></a><span class="ln">    90</span>		return &amp;Object{Kind: kind, Name: name}
<a id="L91"></a><span class="ln">    91</span>	}
<a id="L92"></a><span class="ln">    92</span>	
<a id="L93"></a><span class="ln">    93</span>	<span class="comment">// Pos computes the source position of the declaration of an object name.</span>
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// The result may be an invalid position if it cannot be computed</span>
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">// (obj.Decl may be nil or not correct).</span>
<a id="L96"></a><span class="ln">    96</span>	func (obj *Object) Pos() token.Pos {
<a id="L97"></a><span class="ln">    97</span>		name := obj.Name
<a id="L98"></a><span class="ln">    98</span>		switch d := obj.Decl.(type) {
<a id="L99"></a><span class="ln">    99</span>		case *Field:
<a id="L100"></a><span class="ln">   100</span>			for _, n := range d.Names {
<a id="L101"></a><span class="ln">   101</span>				if n.Name == name {
<a id="L102"></a><span class="ln">   102</span>					return n.Pos()
<a id="L103"></a><span class="ln">   103</span>				}
<a id="L104"></a><span class="ln">   104</span>			}
<a id="L105"></a><span class="ln">   105</span>		case *ImportSpec:
<a id="L106"></a><span class="ln">   106</span>			if d.Name != nil &amp;&amp; d.Name.Name == name {
<a id="L107"></a><span class="ln">   107</span>				return d.Name.Pos()
<a id="L108"></a><span class="ln">   108</span>			}
<a id="L109"></a><span class="ln">   109</span>			return d.Path.Pos()
<a id="L110"></a><span class="ln">   110</span>		case *ValueSpec:
<a id="L111"></a><span class="ln">   111</span>			for _, n := range d.Names {
<a id="L112"></a><span class="ln">   112</span>				if n.Name == name {
<a id="L113"></a><span class="ln">   113</span>					return n.Pos()
<a id="L114"></a><span class="ln">   114</span>				}
<a id="L115"></a><span class="ln">   115</span>			}
<a id="L116"></a><span class="ln">   116</span>		case *TypeSpec:
<a id="L117"></a><span class="ln">   117</span>			if d.Name.Name == name {
<a id="L118"></a><span class="ln">   118</span>				return d.Name.Pos()
<a id="L119"></a><span class="ln">   119</span>			}
<a id="L120"></a><span class="ln">   120</span>		case *FuncDecl:
<a id="L121"></a><span class="ln">   121</span>			if d.Name.Name == name {
<a id="L122"></a><span class="ln">   122</span>				return d.Name.Pos()
<a id="L123"></a><span class="ln">   123</span>			}
<a id="L124"></a><span class="ln">   124</span>		case *LabeledStmt:
<a id="L125"></a><span class="ln">   125</span>			if d.Label.Name == name {
<a id="L126"></a><span class="ln">   126</span>				return d.Label.Pos()
<a id="L127"></a><span class="ln">   127</span>			}
<a id="L128"></a><span class="ln">   128</span>		case *AssignStmt:
<a id="L129"></a><span class="ln">   129</span>			for _, x := range d.Lhs {
<a id="L130"></a><span class="ln">   130</span>				if ident, isIdent := x.(*Ident); isIdent &amp;&amp; ident.Name == name {
<a id="L131"></a><span class="ln">   131</span>					return ident.Pos()
<a id="L132"></a><span class="ln">   132</span>				}
<a id="L133"></a><span class="ln">   133</span>			}
<a id="L134"></a><span class="ln">   134</span>		case *Scope:
<a id="L135"></a><span class="ln">   135</span>			<span class="comment">// predeclared object - nothing to do for now</span>
<a id="L136"></a><span class="ln">   136</span>		}
<a id="L137"></a><span class="ln">   137</span>		return token.NoPos
<a id="L138"></a><span class="ln">   138</span>	}
<a id="L139"></a><span class="ln">   139</span>	
<a id="L140"></a><span class="ln">   140</span>	<span class="comment">// ObKind describes what an object represents.</span>
<a id="L141"></a><span class="ln">   141</span>	type ObjKind int
<a id="L142"></a><span class="ln">   142</span>	
<a id="L143"></a><span class="ln">   143</span>	<span class="comment">// The list of possible Object kinds.</span>
<a id="L144"></a><span class="ln">   144</span>	const (
<a id="L145"></a><span class="ln">   145</span>		Bad ObjKind = iota <span class="comment">// for error handling</span>
<a id="L146"></a><span class="ln">   146</span>		Pkg                <span class="comment">// package</span>
<a id="L147"></a><span class="ln">   147</span>		Con                <span class="comment">// constant</span>
<a id="L148"></a><span class="ln">   148</span>		Typ                <span class="comment">// type</span>
<a id="L149"></a><span class="ln">   149</span>		Var                <span class="comment">// variable</span>
<a id="L150"></a><span class="ln">   150</span>		Fun                <span class="comment">// function or method</span>
<a id="L151"></a><span class="ln">   151</span>		Lbl                <span class="comment">// label</span>
<a id="L152"></a><span class="ln">   152</span>	)
<a id="L153"></a><span class="ln">   153</span>	
<a id="L154"></a><span class="ln">   154</span>	var objKindStrings = [...]string{
<a id="L155"></a><span class="ln">   155</span>		Bad: &#34;bad&#34;,
<a id="L156"></a><span class="ln">   156</span>		Pkg: &#34;package&#34;,
<a id="L157"></a><span class="ln">   157</span>		Con: &#34;const&#34;,
<a id="L158"></a><span class="ln">   158</span>		Typ: &#34;type&#34;,
<a id="L159"></a><span class="ln">   159</span>		Var: &#34;var&#34;,
<a id="L160"></a><span class="ln">   160</span>		Fun: &#34;func&#34;,
<a id="L161"></a><span class="ln">   161</span>		Lbl: &#34;label&#34;,
<a id="L162"></a><span class="ln">   162</span>	}
<a id="L163"></a><span class="ln">   163</span>	
<a id="L164"></a><span class="ln">   164</span>	func (kind ObjKind) String() string { return objKindStrings[kind] }
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

