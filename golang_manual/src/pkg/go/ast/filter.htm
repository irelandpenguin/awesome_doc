<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/go/ast/filter.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/go/ast/filter.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package ast
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;go/token&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;sort&#34;
<a id="L10"></a><span class="ln">    10</span>	)
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// ----------------------------------------------------------------------------</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// Export filtering</span>
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// exportFilter is a special filter function to extract exported nodes.</span>
<a id="L16"></a><span class="ln">    16</span>	func exportFilter(name string) bool {
<a id="L17"></a><span class="ln">    17</span>		return IsExported(name)
<a id="L18"></a><span class="ln">    18</span>	}
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// FileExports trims the AST for a Go source file in place such that</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// only exported nodes remain: all top-level identifiers which are not exported</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// and their associated information (such as type, initial value, or function</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// body) are removed. Non-exported fields and methods of exported types are</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// stripped. The File.Comments list is not changed.</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">//</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// FileExports returns true if there are exported declarations;</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// it returns false otherwise.</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">//</span>
<a id="L29"></a><span class="ln">    29</span>	func FileExports(src *File) bool {
<a id="L30"></a><span class="ln">    30</span>		return filterFile(src, exportFilter, true)
<a id="L31"></a><span class="ln">    31</span>	}
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// PackageExports trims the AST for a Go package in place such that</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// only exported nodes remain. The pkg.Files list is not changed, so that</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// file names and top-level package comments don&#39;t get lost.</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// PackageExports returns true if there are exported declarations;</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// it returns false otherwise.</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">//</span>
<a id="L40"></a><span class="ln">    40</span>	func PackageExports(pkg *Package) bool {
<a id="L41"></a><span class="ln">    41</span>		return filterPackage(pkg, exportFilter, true)
<a id="L42"></a><span class="ln">    42</span>	}
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">// ----------------------------------------------------------------------------</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">// General filtering</span>
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>	type Filter func(string) bool
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>	func filterIdentList(list []*Ident, f Filter) []*Ident {
<a id="L50"></a><span class="ln">    50</span>		j := 0
<a id="L51"></a><span class="ln">    51</span>		for _, x := range list {
<a id="L52"></a><span class="ln">    52</span>			if f(x.Name) {
<a id="L53"></a><span class="ln">    53</span>				list[j] = x
<a id="L54"></a><span class="ln">    54</span>				j++
<a id="L55"></a><span class="ln">    55</span>			}
<a id="L56"></a><span class="ln">    56</span>		}
<a id="L57"></a><span class="ln">    57</span>		return list[0:j]
<a id="L58"></a><span class="ln">    58</span>	}
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// fieldName assumes that x is the type of an anonymous field and</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">// returns the corresponding field name. If x is not an acceptable</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">// anonymous field, the result is nil.</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">//</span>
<a id="L64"></a><span class="ln">    64</span>	func fieldName(x Expr) *Ident {
<a id="L65"></a><span class="ln">    65</span>		switch t := x.(type) {
<a id="L66"></a><span class="ln">    66</span>		case *Ident:
<a id="L67"></a><span class="ln">    67</span>			return t
<a id="L68"></a><span class="ln">    68</span>		case *SelectorExpr:
<a id="L69"></a><span class="ln">    69</span>			if _, ok := t.X.(*Ident); ok {
<a id="L70"></a><span class="ln">    70</span>				return t.Sel
<a id="L71"></a><span class="ln">    71</span>			}
<a id="L72"></a><span class="ln">    72</span>		case *StarExpr:
<a id="L73"></a><span class="ln">    73</span>			return fieldName(t.X)
<a id="L74"></a><span class="ln">    74</span>		}
<a id="L75"></a><span class="ln">    75</span>		return nil
<a id="L76"></a><span class="ln">    76</span>	}
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>	func filterFieldList(fields *FieldList, filter Filter, export bool) (removedFields bool) {
<a id="L79"></a><span class="ln">    79</span>		if fields == nil {
<a id="L80"></a><span class="ln">    80</span>			return false
<a id="L81"></a><span class="ln">    81</span>		}
<a id="L82"></a><span class="ln">    82</span>		list := fields.List
<a id="L83"></a><span class="ln">    83</span>		j := 0
<a id="L84"></a><span class="ln">    84</span>		for _, f := range list {
<a id="L85"></a><span class="ln">    85</span>			keepField := false
<a id="L86"></a><span class="ln">    86</span>			if len(f.Names) == 0 {
<a id="L87"></a><span class="ln">    87</span>				<span class="comment">// anonymous field</span>
<a id="L88"></a><span class="ln">    88</span>				name := fieldName(f.Type)
<a id="L89"></a><span class="ln">    89</span>				keepField = name != nil &amp;&amp; filter(name.Name)
<a id="L90"></a><span class="ln">    90</span>			} else {
<a id="L91"></a><span class="ln">    91</span>				n := len(f.Names)
<a id="L92"></a><span class="ln">    92</span>				f.Names = filterIdentList(f.Names, filter)
<a id="L93"></a><span class="ln">    93</span>				if len(f.Names) &lt; n {
<a id="L94"></a><span class="ln">    94</span>					removedFields = true
<a id="L95"></a><span class="ln">    95</span>				}
<a id="L96"></a><span class="ln">    96</span>				keepField = len(f.Names) &gt; 0
<a id="L97"></a><span class="ln">    97</span>			}
<a id="L98"></a><span class="ln">    98</span>			if keepField {
<a id="L99"></a><span class="ln">    99</span>				if export {
<a id="L100"></a><span class="ln">   100</span>					filterType(f.Type, filter, export)
<a id="L101"></a><span class="ln">   101</span>				}
<a id="L102"></a><span class="ln">   102</span>				list[j] = f
<a id="L103"></a><span class="ln">   103</span>				j++
<a id="L104"></a><span class="ln">   104</span>			}
<a id="L105"></a><span class="ln">   105</span>		}
<a id="L106"></a><span class="ln">   106</span>		if j &lt; len(list) {
<a id="L107"></a><span class="ln">   107</span>			removedFields = true
<a id="L108"></a><span class="ln">   108</span>		}
<a id="L109"></a><span class="ln">   109</span>		fields.List = list[0:j]
<a id="L110"></a><span class="ln">   110</span>		return
<a id="L111"></a><span class="ln">   111</span>	}
<a id="L112"></a><span class="ln">   112</span>	
<a id="L113"></a><span class="ln">   113</span>	func filterParamList(fields *FieldList, filter Filter, export bool) bool {
<a id="L114"></a><span class="ln">   114</span>		if fields == nil {
<a id="L115"></a><span class="ln">   115</span>			return false
<a id="L116"></a><span class="ln">   116</span>		}
<a id="L117"></a><span class="ln">   117</span>		var b bool
<a id="L118"></a><span class="ln">   118</span>		for _, f := range fields.List {
<a id="L119"></a><span class="ln">   119</span>			if filterType(f.Type, filter, export) {
<a id="L120"></a><span class="ln">   120</span>				b = true
<a id="L121"></a><span class="ln">   121</span>			}
<a id="L122"></a><span class="ln">   122</span>		}
<a id="L123"></a><span class="ln">   123</span>		return b
<a id="L124"></a><span class="ln">   124</span>	}
<a id="L125"></a><span class="ln">   125</span>	
<a id="L126"></a><span class="ln">   126</span>	func filterType(typ Expr, f Filter, export bool) bool {
<a id="L127"></a><span class="ln">   127</span>		switch t := typ.(type) {
<a id="L128"></a><span class="ln">   128</span>		case *Ident:
<a id="L129"></a><span class="ln">   129</span>			return f(t.Name)
<a id="L130"></a><span class="ln">   130</span>		case *ParenExpr:
<a id="L131"></a><span class="ln">   131</span>			return filterType(t.X, f, export)
<a id="L132"></a><span class="ln">   132</span>		case *ArrayType:
<a id="L133"></a><span class="ln">   133</span>			return filterType(t.Elt, f, export)
<a id="L134"></a><span class="ln">   134</span>		case *StructType:
<a id="L135"></a><span class="ln">   135</span>			if filterFieldList(t.Fields, f, export) {
<a id="L136"></a><span class="ln">   136</span>				t.Incomplete = true
<a id="L137"></a><span class="ln">   137</span>			}
<a id="L138"></a><span class="ln">   138</span>			return len(t.Fields.List) &gt; 0
<a id="L139"></a><span class="ln">   139</span>		case *FuncType:
<a id="L140"></a><span class="ln">   140</span>			b1 := filterParamList(t.Params, f, export)
<a id="L141"></a><span class="ln">   141</span>			b2 := filterParamList(t.Results, f, export)
<a id="L142"></a><span class="ln">   142</span>			return b1 || b2
<a id="L143"></a><span class="ln">   143</span>		case *InterfaceType:
<a id="L144"></a><span class="ln">   144</span>			if filterFieldList(t.Methods, f, export) {
<a id="L145"></a><span class="ln">   145</span>				t.Incomplete = true
<a id="L146"></a><span class="ln">   146</span>			}
<a id="L147"></a><span class="ln">   147</span>			return len(t.Methods.List) &gt; 0
<a id="L148"></a><span class="ln">   148</span>		case *MapType:
<a id="L149"></a><span class="ln">   149</span>			b1 := filterType(t.Key, f, export)
<a id="L150"></a><span class="ln">   150</span>			b2 := filterType(t.Value, f, export)
<a id="L151"></a><span class="ln">   151</span>			return b1 || b2
<a id="L152"></a><span class="ln">   152</span>		case *ChanType:
<a id="L153"></a><span class="ln">   153</span>			return filterType(t.Value, f, export)
<a id="L154"></a><span class="ln">   154</span>		}
<a id="L155"></a><span class="ln">   155</span>		return false
<a id="L156"></a><span class="ln">   156</span>	}
<a id="L157"></a><span class="ln">   157</span>	
<a id="L158"></a><span class="ln">   158</span>	func filterSpec(spec Spec, f Filter, export bool) bool {
<a id="L159"></a><span class="ln">   159</span>		switch s := spec.(type) {
<a id="L160"></a><span class="ln">   160</span>		case *ValueSpec:
<a id="L161"></a><span class="ln">   161</span>			s.Names = filterIdentList(s.Names, f)
<a id="L162"></a><span class="ln">   162</span>			if len(s.Names) &gt; 0 {
<a id="L163"></a><span class="ln">   163</span>				if export {
<a id="L164"></a><span class="ln">   164</span>					filterType(s.Type, f, export)
<a id="L165"></a><span class="ln">   165</span>				}
<a id="L166"></a><span class="ln">   166</span>				return true
<a id="L167"></a><span class="ln">   167</span>			}
<a id="L168"></a><span class="ln">   168</span>		case *TypeSpec:
<a id="L169"></a><span class="ln">   169</span>			if f(s.Name.Name) {
<a id="L170"></a><span class="ln">   170</span>				if export {
<a id="L171"></a><span class="ln">   171</span>					filterType(s.Type, f, export)
<a id="L172"></a><span class="ln">   172</span>				}
<a id="L173"></a><span class="ln">   173</span>				return true
<a id="L174"></a><span class="ln">   174</span>			}
<a id="L175"></a><span class="ln">   175</span>			if !export {
<a id="L176"></a><span class="ln">   176</span>				<span class="comment">// For general filtering (not just exports),</span>
<a id="L177"></a><span class="ln">   177</span>				<span class="comment">// filter type even if name is not filtered</span>
<a id="L178"></a><span class="ln">   178</span>				<span class="comment">// out.</span>
<a id="L179"></a><span class="ln">   179</span>				<span class="comment">// If the type contains filtered elements,</span>
<a id="L180"></a><span class="ln">   180</span>				<span class="comment">// keep the declaration.</span>
<a id="L181"></a><span class="ln">   181</span>				return filterType(s.Type, f, export)
<a id="L182"></a><span class="ln">   182</span>			}
<a id="L183"></a><span class="ln">   183</span>		}
<a id="L184"></a><span class="ln">   184</span>		return false
<a id="L185"></a><span class="ln">   185</span>	}
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>	func filterSpecList(list []Spec, f Filter, export bool) []Spec {
<a id="L188"></a><span class="ln">   188</span>		j := 0
<a id="L189"></a><span class="ln">   189</span>		for _, s := range list {
<a id="L190"></a><span class="ln">   190</span>			if filterSpec(s, f, export) {
<a id="L191"></a><span class="ln">   191</span>				list[j] = s
<a id="L192"></a><span class="ln">   192</span>				j++
<a id="L193"></a><span class="ln">   193</span>			}
<a id="L194"></a><span class="ln">   194</span>		}
<a id="L195"></a><span class="ln">   195</span>		return list[0:j]
<a id="L196"></a><span class="ln">   196</span>	}
<a id="L197"></a><span class="ln">   197</span>	
<a id="L198"></a><span class="ln">   198</span>	<span class="comment">// FilterDecl trims the AST for a Go declaration in place by removing</span>
<a id="L199"></a><span class="ln">   199</span>	<span class="comment">// all names (including struct field and interface method names, but</span>
<a id="L200"></a><span class="ln">   200</span>	<span class="comment">// not from parameter lists) that don&#39;t pass through the filter f.</span>
<a id="L201"></a><span class="ln">   201</span>	<span class="comment">//</span>
<a id="L202"></a><span class="ln">   202</span>	<span class="comment">// FilterDecl returns true if there are any declared names left after</span>
<a id="L203"></a><span class="ln">   203</span>	<span class="comment">// filtering; it returns false otherwise.</span>
<a id="L204"></a><span class="ln">   204</span>	<span class="comment">//</span>
<a id="L205"></a><span class="ln">   205</span>	func FilterDecl(decl Decl, f Filter) bool {
<a id="L206"></a><span class="ln">   206</span>		return filterDecl(decl, f, false)
<a id="L207"></a><span class="ln">   207</span>	}
<a id="L208"></a><span class="ln">   208</span>	
<a id="L209"></a><span class="ln">   209</span>	func filterDecl(decl Decl, f Filter, export bool) bool {
<a id="L210"></a><span class="ln">   210</span>		switch d := decl.(type) {
<a id="L211"></a><span class="ln">   211</span>		case *GenDecl:
<a id="L212"></a><span class="ln">   212</span>			d.Specs = filterSpecList(d.Specs, f, export)
<a id="L213"></a><span class="ln">   213</span>			return len(d.Specs) &gt; 0
<a id="L214"></a><span class="ln">   214</span>		case *FuncDecl:
<a id="L215"></a><span class="ln">   215</span>			return f(d.Name.Name)
<a id="L216"></a><span class="ln">   216</span>		}
<a id="L217"></a><span class="ln">   217</span>		return false
<a id="L218"></a><span class="ln">   218</span>	}
<a id="L219"></a><span class="ln">   219</span>	
<a id="L220"></a><span class="ln">   220</span>	<span class="comment">// FilterFile trims the AST for a Go file in place by removing all</span>
<a id="L221"></a><span class="ln">   221</span>	<span class="comment">// names from top-level declarations (including struct field and</span>
<a id="L222"></a><span class="ln">   222</span>	<span class="comment">// interface method names, but not from parameter lists) that don&#39;t</span>
<a id="L223"></a><span class="ln">   223</span>	<span class="comment">// pass through the filter f. If the declaration is empty afterwards,</span>
<a id="L224"></a><span class="ln">   224</span>	<span class="comment">// the declaration is removed from the AST. The File.Comments list</span>
<a id="L225"></a><span class="ln">   225</span>	<span class="comment">// is not changed.</span>
<a id="L226"></a><span class="ln">   226</span>	<span class="comment">//</span>
<a id="L227"></a><span class="ln">   227</span>	<span class="comment">// FilterFile returns true if there are any top-level declarations</span>
<a id="L228"></a><span class="ln">   228</span>	<span class="comment">// left after filtering; it returns false otherwise.</span>
<a id="L229"></a><span class="ln">   229</span>	<span class="comment">//</span>
<a id="L230"></a><span class="ln">   230</span>	func FilterFile(src *File, f Filter) bool {
<a id="L231"></a><span class="ln">   231</span>		return filterFile(src, f, false)
<a id="L232"></a><span class="ln">   232</span>	}
<a id="L233"></a><span class="ln">   233</span>	
<a id="L234"></a><span class="ln">   234</span>	func filterFile(src *File, f Filter, export bool) bool {
<a id="L235"></a><span class="ln">   235</span>		j := 0
<a id="L236"></a><span class="ln">   236</span>		for _, d := range src.Decls {
<a id="L237"></a><span class="ln">   237</span>			if filterDecl(d, f, export) {
<a id="L238"></a><span class="ln">   238</span>				src.Decls[j] = d
<a id="L239"></a><span class="ln">   239</span>				j++
<a id="L240"></a><span class="ln">   240</span>			}
<a id="L241"></a><span class="ln">   241</span>		}
<a id="L242"></a><span class="ln">   242</span>		src.Decls = src.Decls[0:j]
<a id="L243"></a><span class="ln">   243</span>		return j &gt; 0
<a id="L244"></a><span class="ln">   244</span>	}
<a id="L245"></a><span class="ln">   245</span>	
<a id="L246"></a><span class="ln">   246</span>	<span class="comment">// FilterPackage trims the AST for a Go package in place by removing</span>
<a id="L247"></a><span class="ln">   247</span>	<span class="comment">// all names from top-level declarations (including struct field and</span>
<a id="L248"></a><span class="ln">   248</span>	<span class="comment">// interface method names, but not from parameter lists) that don&#39;t</span>
<a id="L249"></a><span class="ln">   249</span>	<span class="comment">// pass through the filter f. If the declaration is empty afterwards,</span>
<a id="L250"></a><span class="ln">   250</span>	<span class="comment">// the declaration is removed from the AST. The pkg.Files list is not</span>
<a id="L251"></a><span class="ln">   251</span>	<span class="comment">// changed, so that file names and top-level package comments don&#39;t get</span>
<a id="L252"></a><span class="ln">   252</span>	<span class="comment">// lost.</span>
<a id="L253"></a><span class="ln">   253</span>	<span class="comment">//</span>
<a id="L254"></a><span class="ln">   254</span>	<span class="comment">// FilterPackage returns true if there are any top-level declarations</span>
<a id="L255"></a><span class="ln">   255</span>	<span class="comment">// left after filtering; it returns false otherwise.</span>
<a id="L256"></a><span class="ln">   256</span>	<span class="comment">//</span>
<a id="L257"></a><span class="ln">   257</span>	func FilterPackage(pkg *Package, f Filter) bool {
<a id="L258"></a><span class="ln">   258</span>		return filterPackage(pkg, f, false)
<a id="L259"></a><span class="ln">   259</span>	}
<a id="L260"></a><span class="ln">   260</span>	
<a id="L261"></a><span class="ln">   261</span>	func filterPackage(pkg *Package, f Filter, export bool) bool {
<a id="L262"></a><span class="ln">   262</span>		hasDecls := false
<a id="L263"></a><span class="ln">   263</span>		for _, src := range pkg.Files {
<a id="L264"></a><span class="ln">   264</span>			if filterFile(src, f, export) {
<a id="L265"></a><span class="ln">   265</span>				hasDecls = true
<a id="L266"></a><span class="ln">   266</span>			}
<a id="L267"></a><span class="ln">   267</span>		}
<a id="L268"></a><span class="ln">   268</span>		return hasDecls
<a id="L269"></a><span class="ln">   269</span>	}
<a id="L270"></a><span class="ln">   270</span>	
<a id="L271"></a><span class="ln">   271</span>	<span class="comment">// ----------------------------------------------------------------------------</span>
<a id="L272"></a><span class="ln">   272</span>	<span class="comment">// Merging of package files</span>
<a id="L273"></a><span class="ln">   273</span>	
<a id="L274"></a><span class="ln">   274</span>	<span class="comment">// The MergeMode flags control the behavior of MergePackageFiles.</span>
<a id="L275"></a><span class="ln">   275</span>	type MergeMode uint
<a id="L276"></a><span class="ln">   276</span>	
<a id="L277"></a><span class="ln">   277</span>	const (
<a id="L278"></a><span class="ln">   278</span>		<span class="comment">// If set, duplicate function declarations are excluded.</span>
<a id="L279"></a><span class="ln">   279</span>		FilterFuncDuplicates MergeMode = 1 &lt;&lt; iota
<a id="L280"></a><span class="ln">   280</span>		<span class="comment">// If set, comments that are not associated with a specific</span>
<a id="L281"></a><span class="ln">   281</span>		<span class="comment">// AST node (as Doc or Comment) are excluded.</span>
<a id="L282"></a><span class="ln">   282</span>		FilterUnassociatedComments
<a id="L283"></a><span class="ln">   283</span>		<span class="comment">// If set, duplicate import declarations are excluded.</span>
<a id="L284"></a><span class="ln">   284</span>		FilterImportDuplicates
<a id="L285"></a><span class="ln">   285</span>	)
<a id="L286"></a><span class="ln">   286</span>	
<a id="L287"></a><span class="ln">   287</span>	<span class="comment">// separator is an empty //-style comment that is interspersed between</span>
<a id="L288"></a><span class="ln">   288</span>	<span class="comment">// different comment groups when they are concatenated into a single group</span>
<a id="L289"></a><span class="ln">   289</span>	<span class="comment">//</span>
<a id="L290"></a><span class="ln">   290</span>	var separator = &amp;Comment{noPos, &#34;//&#34;}
<a id="L291"></a><span class="ln">   291</span>	
<a id="L292"></a><span class="ln">   292</span>	<span class="comment">// MergePackageFiles creates a file AST by merging the ASTs of the</span>
<a id="L293"></a><span class="ln">   293</span>	<span class="comment">// files belonging to a package. The mode flags control merging behavior.</span>
<a id="L294"></a><span class="ln">   294</span>	<span class="comment">//</span>
<a id="L295"></a><span class="ln">   295</span>	func MergePackageFiles(pkg *Package, mode MergeMode) *File {
<a id="L296"></a><span class="ln">   296</span>		<span class="comment">// Count the number of package docs, comments and declarations across</span>
<a id="L297"></a><span class="ln">   297</span>		<span class="comment">// all package files. Also, compute sorted list of filenames, so that</span>
<a id="L298"></a><span class="ln">   298</span>		<span class="comment">// subsequent iterations can always iterate in the same order.</span>
<a id="L299"></a><span class="ln">   299</span>		ndocs := 0
<a id="L300"></a><span class="ln">   300</span>		ncomments := 0
<a id="L301"></a><span class="ln">   301</span>		ndecls := 0
<a id="L302"></a><span class="ln">   302</span>		filenames := make([]string, len(pkg.Files))
<a id="L303"></a><span class="ln">   303</span>		i := 0
<a id="L304"></a><span class="ln">   304</span>		for filename, f := range pkg.Files {
<a id="L305"></a><span class="ln">   305</span>			filenames[i] = filename
<a id="L306"></a><span class="ln">   306</span>			i++
<a id="L307"></a><span class="ln">   307</span>			if f.Doc != nil {
<a id="L308"></a><span class="ln">   308</span>				ndocs += len(f.Doc.List) + 1 <span class="comment">// +1 for separator</span>
<a id="L309"></a><span class="ln">   309</span>			}
<a id="L310"></a><span class="ln">   310</span>			ncomments += len(f.Comments)
<a id="L311"></a><span class="ln">   311</span>			ndecls += len(f.Decls)
<a id="L312"></a><span class="ln">   312</span>		}
<a id="L313"></a><span class="ln">   313</span>		sort.Strings(filenames)
<a id="L314"></a><span class="ln">   314</span>	
<a id="L315"></a><span class="ln">   315</span>		<span class="comment">// Collect package comments from all package files into a single</span>
<a id="L316"></a><span class="ln">   316</span>		<span class="comment">// CommentGroup - the collected package documentation. In general</span>
<a id="L317"></a><span class="ln">   317</span>		<span class="comment">// there should be only one file with a package comment; but it&#39;s</span>
<a id="L318"></a><span class="ln">   318</span>		<span class="comment">// better to collect extra comments than drop them on the floor.</span>
<a id="L319"></a><span class="ln">   319</span>		var doc *CommentGroup
<a id="L320"></a><span class="ln">   320</span>		var pos token.Pos
<a id="L321"></a><span class="ln">   321</span>		if ndocs &gt; 0 {
<a id="L322"></a><span class="ln">   322</span>			list := make([]*Comment, ndocs-1) <span class="comment">// -1: no separator before first group</span>
<a id="L323"></a><span class="ln">   323</span>			i := 0
<a id="L324"></a><span class="ln">   324</span>			for _, filename := range filenames {
<a id="L325"></a><span class="ln">   325</span>				f := pkg.Files[filename]
<a id="L326"></a><span class="ln">   326</span>				if f.Doc != nil {
<a id="L327"></a><span class="ln">   327</span>					if i &gt; 0 {
<a id="L328"></a><span class="ln">   328</span>						<span class="comment">// not the first group - add separator</span>
<a id="L329"></a><span class="ln">   329</span>						list[i] = separator
<a id="L330"></a><span class="ln">   330</span>						i++
<a id="L331"></a><span class="ln">   331</span>					}
<a id="L332"></a><span class="ln">   332</span>					for _, c := range f.Doc.List {
<a id="L333"></a><span class="ln">   333</span>						list[i] = c
<a id="L334"></a><span class="ln">   334</span>						i++
<a id="L335"></a><span class="ln">   335</span>					}
<a id="L336"></a><span class="ln">   336</span>					if f.Package &gt; pos {
<a id="L337"></a><span class="ln">   337</span>						<span class="comment">// Keep the maximum package clause position as</span>
<a id="L338"></a><span class="ln">   338</span>						<span class="comment">// position for the package clause of the merged</span>
<a id="L339"></a><span class="ln">   339</span>						<span class="comment">// files.</span>
<a id="L340"></a><span class="ln">   340</span>						pos = f.Package
<a id="L341"></a><span class="ln">   341</span>					}
<a id="L342"></a><span class="ln">   342</span>				}
<a id="L343"></a><span class="ln">   343</span>			}
<a id="L344"></a><span class="ln">   344</span>			doc = &amp;CommentGroup{list}
<a id="L345"></a><span class="ln">   345</span>		}
<a id="L346"></a><span class="ln">   346</span>	
<a id="L347"></a><span class="ln">   347</span>		<span class="comment">// Collect declarations from all package files.</span>
<a id="L348"></a><span class="ln">   348</span>		var decls []Decl
<a id="L349"></a><span class="ln">   349</span>		if ndecls &gt; 0 {
<a id="L350"></a><span class="ln">   350</span>			decls = make([]Decl, ndecls)
<a id="L351"></a><span class="ln">   351</span>			funcs := make(map[string]int) <span class="comment">// map of global function name -&gt; decls index</span>
<a id="L352"></a><span class="ln">   352</span>			i := 0                        <span class="comment">// current index</span>
<a id="L353"></a><span class="ln">   353</span>			n := 0                        <span class="comment">// number of filtered entries</span>
<a id="L354"></a><span class="ln">   354</span>			for _, filename := range filenames {
<a id="L355"></a><span class="ln">   355</span>				f := pkg.Files[filename]
<a id="L356"></a><span class="ln">   356</span>				for _, d := range f.Decls {
<a id="L357"></a><span class="ln">   357</span>					if mode&amp;FilterFuncDuplicates != 0 {
<a id="L358"></a><span class="ln">   358</span>						<span class="comment">// A language entity may be declared multiple</span>
<a id="L359"></a><span class="ln">   359</span>						<span class="comment">// times in different package files; only at</span>
<a id="L360"></a><span class="ln">   360</span>						<span class="comment">// build time declarations must be unique.</span>
<a id="L361"></a><span class="ln">   361</span>						<span class="comment">// For now, exclude multiple declarations of</span>
<a id="L362"></a><span class="ln">   362</span>						<span class="comment">// functions - keep the one with documentation.</span>
<a id="L363"></a><span class="ln">   363</span>						<span class="comment">//</span>
<a id="L364"></a><span class="ln">   364</span>						<span class="comment">// TODO(gri): Expand this filtering to other</span>
<a id="L365"></a><span class="ln">   365</span>						<span class="comment">//            entities (const, type, vars) if</span>
<a id="L366"></a><span class="ln">   366</span>						<span class="comment">//            multiple declarations are common.</span>
<a id="L367"></a><span class="ln">   367</span>						if f, isFun := d.(*FuncDecl); isFun {
<a id="L368"></a><span class="ln">   368</span>							name := f.Name.Name
<a id="L369"></a><span class="ln">   369</span>							if j, exists := funcs[name]; exists {
<a id="L370"></a><span class="ln">   370</span>								<span class="comment">// function declared already</span>
<a id="L371"></a><span class="ln">   371</span>								if decls[j] != nil &amp;&amp; decls[j].(*FuncDecl).Doc == nil {
<a id="L372"></a><span class="ln">   372</span>									<span class="comment">// existing declaration has no documentation;</span>
<a id="L373"></a><span class="ln">   373</span>									<span class="comment">// ignore the existing declaration</span>
<a id="L374"></a><span class="ln">   374</span>									decls[j] = nil
<a id="L375"></a><span class="ln">   375</span>								} else {
<a id="L376"></a><span class="ln">   376</span>									<span class="comment">// ignore the new declaration</span>
<a id="L377"></a><span class="ln">   377</span>									d = nil
<a id="L378"></a><span class="ln">   378</span>								}
<a id="L379"></a><span class="ln">   379</span>								n++ <span class="comment">// filtered an entry</span>
<a id="L380"></a><span class="ln">   380</span>							} else {
<a id="L381"></a><span class="ln">   381</span>								funcs[name] = i
<a id="L382"></a><span class="ln">   382</span>							}
<a id="L383"></a><span class="ln">   383</span>						}
<a id="L384"></a><span class="ln">   384</span>					}
<a id="L385"></a><span class="ln">   385</span>					decls[i] = d
<a id="L386"></a><span class="ln">   386</span>					i++
<a id="L387"></a><span class="ln">   387</span>				}
<a id="L388"></a><span class="ln">   388</span>			}
<a id="L389"></a><span class="ln">   389</span>	
<a id="L390"></a><span class="ln">   390</span>			<span class="comment">// Eliminate nil entries from the decls list if entries were</span>
<a id="L391"></a><span class="ln">   391</span>			<span class="comment">// filtered. We do this using a 2nd pass in order to not disturb</span>
<a id="L392"></a><span class="ln">   392</span>			<span class="comment">// the original declaration order in the source (otherwise, this</span>
<a id="L393"></a><span class="ln">   393</span>			<span class="comment">// would also invalidate the monotonically increasing position</span>
<a id="L394"></a><span class="ln">   394</span>			<span class="comment">// info within a single file).</span>
<a id="L395"></a><span class="ln">   395</span>			if n &gt; 0 {
<a id="L396"></a><span class="ln">   396</span>				i = 0
<a id="L397"></a><span class="ln">   397</span>				for _, d := range decls {
<a id="L398"></a><span class="ln">   398</span>					if d != nil {
<a id="L399"></a><span class="ln">   399</span>						decls[i] = d
<a id="L400"></a><span class="ln">   400</span>						i++
<a id="L401"></a><span class="ln">   401</span>					}
<a id="L402"></a><span class="ln">   402</span>				}
<a id="L403"></a><span class="ln">   403</span>				decls = decls[0:i]
<a id="L404"></a><span class="ln">   404</span>			}
<a id="L405"></a><span class="ln">   405</span>		}
<a id="L406"></a><span class="ln">   406</span>	
<a id="L407"></a><span class="ln">   407</span>		<span class="comment">// Collect import specs from all package files.</span>
<a id="L408"></a><span class="ln">   408</span>		var imports []*ImportSpec
<a id="L409"></a><span class="ln">   409</span>		if mode&amp;FilterImportDuplicates != 0 {
<a id="L410"></a><span class="ln">   410</span>			seen := make(map[string]bool)
<a id="L411"></a><span class="ln">   411</span>			for _, filename := range filenames {
<a id="L412"></a><span class="ln">   412</span>				f := pkg.Files[filename]
<a id="L413"></a><span class="ln">   413</span>				for _, imp := range f.Imports {
<a id="L414"></a><span class="ln">   414</span>					if path := imp.Path.Value; !seen[path] {
<a id="L415"></a><span class="ln">   415</span>						<span class="comment">// TODO: consider handling cases where:</span>
<a id="L416"></a><span class="ln">   416</span>						<span class="comment">// - 2 imports exist with the same import path but</span>
<a id="L417"></a><span class="ln">   417</span>						<span class="comment">//   have different local names (one should probably </span>
<a id="L418"></a><span class="ln">   418</span>						<span class="comment">//   keep both of them)</span>
<a id="L419"></a><span class="ln">   419</span>						<span class="comment">// - 2 imports exist but only one has a comment</span>
<a id="L420"></a><span class="ln">   420</span>						<span class="comment">// - 2 imports exist and they both have (possibly</span>
<a id="L421"></a><span class="ln">   421</span>						<span class="comment">//   different) comments</span>
<a id="L422"></a><span class="ln">   422</span>						imports = append(imports, imp)
<a id="L423"></a><span class="ln">   423</span>						seen[path] = true
<a id="L424"></a><span class="ln">   424</span>					}
<a id="L425"></a><span class="ln">   425</span>				}
<a id="L426"></a><span class="ln">   426</span>			}
<a id="L427"></a><span class="ln">   427</span>		} else {
<a id="L428"></a><span class="ln">   428</span>			for _, f := range pkg.Files {
<a id="L429"></a><span class="ln">   429</span>				imports = append(imports, f.Imports...)
<a id="L430"></a><span class="ln">   430</span>			}
<a id="L431"></a><span class="ln">   431</span>		}
<a id="L432"></a><span class="ln">   432</span>	
<a id="L433"></a><span class="ln">   433</span>		<span class="comment">// Collect comments from all package files.</span>
<a id="L434"></a><span class="ln">   434</span>		var comments []*CommentGroup
<a id="L435"></a><span class="ln">   435</span>		if mode&amp;FilterUnassociatedComments == 0 {
<a id="L436"></a><span class="ln">   436</span>			comments = make([]*CommentGroup, ncomments)
<a id="L437"></a><span class="ln">   437</span>			i := 0
<a id="L438"></a><span class="ln">   438</span>			for _, f := range pkg.Files {
<a id="L439"></a><span class="ln">   439</span>				i += copy(comments[i:], f.Comments)
<a id="L440"></a><span class="ln">   440</span>			}
<a id="L441"></a><span class="ln">   441</span>		}
<a id="L442"></a><span class="ln">   442</span>	
<a id="L443"></a><span class="ln">   443</span>		<span class="comment">// TODO(gri) need to compute unresolved identifiers!</span>
<a id="L444"></a><span class="ln">   444</span>		return &amp;File{doc, pos, NewIdent(pkg.Name), decls, pkg.Scope, imports, nil, comments}
<a id="L445"></a><span class="ln">   445</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

