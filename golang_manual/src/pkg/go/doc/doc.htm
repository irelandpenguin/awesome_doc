<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/go/doc/doc.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/go/doc/doc.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package doc extracts source code documentation from a Go AST.</span>
<a id="L6"></a><span class="ln">     6</span>	package doc
<a id="L7"></a><span class="ln">     7</span>	
<a id="L8"></a><span class="ln">     8</span>	import (
<a id="L9"></a><span class="ln">     9</span>		&#34;go/ast&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;go/token&#34;
<a id="L11"></a><span class="ln">    11</span>	)
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// Package is the documentation for an entire package.</span>
<a id="L14"></a><span class="ln">    14</span>	type Package struct {
<a id="L15"></a><span class="ln">    15</span>		Doc        string
<a id="L16"></a><span class="ln">    16</span>		Name       string
<a id="L17"></a><span class="ln">    17</span>		ImportPath string
<a id="L18"></a><span class="ln">    18</span>		Imports    []string
<a id="L19"></a><span class="ln">    19</span>		Filenames  []string
<a id="L20"></a><span class="ln">    20</span>		Bugs       []string
<a id="L21"></a><span class="ln">    21</span>	
<a id="L22"></a><span class="ln">    22</span>		<span class="comment">// declarations</span>
<a id="L23"></a><span class="ln">    23</span>		Consts []*Value
<a id="L24"></a><span class="ln">    24</span>		Types  []*Type
<a id="L25"></a><span class="ln">    25</span>		Vars   []*Value
<a id="L26"></a><span class="ln">    26</span>		Funcs  []*Func
<a id="L27"></a><span class="ln">    27</span>	}
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// Value is the documentation for a (possibly grouped) var or const declaration.</span>
<a id="L30"></a><span class="ln">    30</span>	type Value struct {
<a id="L31"></a><span class="ln">    31</span>		Doc   string
<a id="L32"></a><span class="ln">    32</span>		Names []string <span class="comment">// var or const names in declaration order</span>
<a id="L33"></a><span class="ln">    33</span>		Decl  *ast.GenDecl
<a id="L34"></a><span class="ln">    34</span>	
<a id="L35"></a><span class="ln">    35</span>		order int
<a id="L36"></a><span class="ln">    36</span>	}
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// Type is the documentation for a type declaration.</span>
<a id="L39"></a><span class="ln">    39</span>	type Type struct {
<a id="L40"></a><span class="ln">    40</span>		Doc  string
<a id="L41"></a><span class="ln">    41</span>		Name string
<a id="L42"></a><span class="ln">    42</span>		Decl *ast.GenDecl
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>		<span class="comment">// associated declarations</span>
<a id="L45"></a><span class="ln">    45</span>		Consts  []*Value <span class="comment">// sorted list of constants of (mostly) this type</span>
<a id="L46"></a><span class="ln">    46</span>		Vars    []*Value <span class="comment">// sorted list of variables of (mostly) this type</span>
<a id="L47"></a><span class="ln">    47</span>		Funcs   []*Func  <span class="comment">// sorted list of functions returning this type</span>
<a id="L48"></a><span class="ln">    48</span>		Methods []*Func  <span class="comment">// sorted list of methods (including embedded ones) of this type</span>
<a id="L49"></a><span class="ln">    49</span>	}
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// Func is the documentation for a func declaration.</span>
<a id="L52"></a><span class="ln">    52</span>	type Func struct {
<a id="L53"></a><span class="ln">    53</span>		Doc  string
<a id="L54"></a><span class="ln">    54</span>		Name string
<a id="L55"></a><span class="ln">    55</span>		Decl *ast.FuncDecl
<a id="L56"></a><span class="ln">    56</span>	
<a id="L57"></a><span class="ln">    57</span>		<span class="comment">// methods</span>
<a id="L58"></a><span class="ln">    58</span>		<span class="comment">// (for functions, these fields have the respective zero value)</span>
<a id="L59"></a><span class="ln">    59</span>		Recv  string <span class="comment">// actual   receiver &#34;T&#34; or &#34;*T&#34;</span>
<a id="L60"></a><span class="ln">    60</span>		Orig  string <span class="comment">// original receiver &#34;T&#34; or &#34;*T&#34;</span>
<a id="L61"></a><span class="ln">    61</span>		Level int    <span class="comment">// embedding level; 0 means not embedded</span>
<a id="L62"></a><span class="ln">    62</span>	}
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// Mode values control the operation of New.</span>
<a id="L65"></a><span class="ln">    65</span>	type Mode int
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>	const (
<a id="L68"></a><span class="ln">    68</span>		<span class="comment">// extract documentation for all package-level declarations,</span>
<a id="L69"></a><span class="ln">    69</span>		<span class="comment">// not just exported ones</span>
<a id="L70"></a><span class="ln">    70</span>		AllDecls Mode = 1 &lt;&lt; iota
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>		<span class="comment">// show all embedded methods, not just the ones of</span>
<a id="L73"></a><span class="ln">    73</span>		<span class="comment">// invisible (unexported) anonymous fields</span>
<a id="L74"></a><span class="ln">    74</span>		AllMethods
<a id="L75"></a><span class="ln">    75</span>	)
<a id="L76"></a><span class="ln">    76</span>	
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// New computes the package documentation for the given package AST.</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// New takes ownership of the AST pkg and may edit or overwrite it.</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">//</span>
<a id="L80"></a><span class="ln">    80</span>	func New(pkg *ast.Package, importPath string, mode Mode) *Package {
<a id="L81"></a><span class="ln">    81</span>		var r reader
<a id="L82"></a><span class="ln">    82</span>		r.readPackage(pkg, mode)
<a id="L83"></a><span class="ln">    83</span>		r.computeMethodSets()
<a id="L84"></a><span class="ln">    84</span>		r.cleanupTypes()
<a id="L85"></a><span class="ln">    85</span>		return &amp;Package{
<a id="L86"></a><span class="ln">    86</span>			Doc:        r.doc,
<a id="L87"></a><span class="ln">    87</span>			Name:       pkg.Name,
<a id="L88"></a><span class="ln">    88</span>			ImportPath: importPath,
<a id="L89"></a><span class="ln">    89</span>			Imports:    sortedKeys(r.imports),
<a id="L90"></a><span class="ln">    90</span>			Filenames:  r.filenames,
<a id="L91"></a><span class="ln">    91</span>			Bugs:       r.bugs,
<a id="L92"></a><span class="ln">    92</span>			Consts:     sortedValues(r.values, token.CONST),
<a id="L93"></a><span class="ln">    93</span>			Types:      sortedTypes(r.types, mode&amp;AllMethods != 0),
<a id="L94"></a><span class="ln">    94</span>			Vars:       sortedValues(r.values, token.VAR),
<a id="L95"></a><span class="ln">    95</span>			Funcs:      sortedFuncs(r.funcs, true),
<a id="L96"></a><span class="ln">    96</span>		}
<a id="L97"></a><span class="ln">    97</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

