<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/go/doc/reader.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/go/doc/reader.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package doc
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;go/ast&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;go/token&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;regexp&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;sort&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;strconv&#34;
<a id="L13"></a><span class="ln">    13</span>	)
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// ----------------------------------------------------------------------------</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// function/method sets</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">//</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// Internally, we treat functions like methods and collect them in method sets.</span>
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// A methodSet describes a set of methods. Entries where Decl == nil are conflict</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// entries (more then one method with the same name at the same embedding level).</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">//</span>
<a id="L23"></a><span class="ln">    23</span>	type methodSet map[string]*Func
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// recvString returns a string representation of recv of the</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// form &#34;T&#34;, &#34;*T&#34;, or &#34;BADRECV&#34; (if not a proper receiver type).</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">//</span>
<a id="L28"></a><span class="ln">    28</span>	func recvString(recv ast.Expr) string {
<a id="L29"></a><span class="ln">    29</span>		switch t := recv.(type) {
<a id="L30"></a><span class="ln">    30</span>		case *ast.Ident:
<a id="L31"></a><span class="ln">    31</span>			return t.Name
<a id="L32"></a><span class="ln">    32</span>		case *ast.StarExpr:
<a id="L33"></a><span class="ln">    33</span>			return &#34;*&#34; + recvString(t.X)
<a id="L34"></a><span class="ln">    34</span>		}
<a id="L35"></a><span class="ln">    35</span>		return &#34;BADRECV&#34;
<a id="L36"></a><span class="ln">    36</span>	}
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// set creates the corresponding Func for f and adds it to mset.</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// If there are multiple f&#39;s with the same name, set keeps the first</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// one with documentation; conflicts are ignored.</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">//</span>
<a id="L42"></a><span class="ln">    42</span>	func (mset methodSet) set(f *ast.FuncDecl) {
<a id="L43"></a><span class="ln">    43</span>		name := f.Name.Name
<a id="L44"></a><span class="ln">    44</span>		if g := mset[name]; g != nil &amp;&amp; g.Doc != &#34;&#34; {
<a id="L45"></a><span class="ln">    45</span>			<span class="comment">// A function with the same name has already been registered;</span>
<a id="L46"></a><span class="ln">    46</span>			<span class="comment">// since it has documentation, assume f is simply another</span>
<a id="L47"></a><span class="ln">    47</span>			<span class="comment">// implementation and ignore it. This does not happen if the</span>
<a id="L48"></a><span class="ln">    48</span>			<span class="comment">// caller is using go/build.ScanDir to determine the list of</span>
<a id="L49"></a><span class="ln">    49</span>			<span class="comment">// files implementing a package. </span>
<a id="L50"></a><span class="ln">    50</span>			return
<a id="L51"></a><span class="ln">    51</span>		}
<a id="L52"></a><span class="ln">    52</span>		<span class="comment">// function doesn&#39;t exist or has no documentation; use f</span>
<a id="L53"></a><span class="ln">    53</span>		recv := &#34;&#34;
<a id="L54"></a><span class="ln">    54</span>		if f.Recv != nil {
<a id="L55"></a><span class="ln">    55</span>			var typ ast.Expr
<a id="L56"></a><span class="ln">    56</span>			<span class="comment">// be careful in case of incorrect ASTs</span>
<a id="L57"></a><span class="ln">    57</span>			if list := f.Recv.List; len(list) == 1 {
<a id="L58"></a><span class="ln">    58</span>				typ = list[0].Type
<a id="L59"></a><span class="ln">    59</span>			}
<a id="L60"></a><span class="ln">    60</span>			recv = recvString(typ)
<a id="L61"></a><span class="ln">    61</span>		}
<a id="L62"></a><span class="ln">    62</span>		mset[name] = &amp;Func{
<a id="L63"></a><span class="ln">    63</span>			Doc:  f.Doc.Text(),
<a id="L64"></a><span class="ln">    64</span>			Name: name,
<a id="L65"></a><span class="ln">    65</span>			Decl: f,
<a id="L66"></a><span class="ln">    66</span>			Recv: recv,
<a id="L67"></a><span class="ln">    67</span>			Orig: recv,
<a id="L68"></a><span class="ln">    68</span>		}
<a id="L69"></a><span class="ln">    69</span>		f.Doc = nil <span class="comment">// doc consumed - remove from AST</span>
<a id="L70"></a><span class="ln">    70</span>	}
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">// add adds method m to the method set; m is ignored if the method set</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// already contains a method with the same name at the same or a higher</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">// level then m.</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">//</span>
<a id="L76"></a><span class="ln">    76</span>	func (mset methodSet) add(m *Func) {
<a id="L77"></a><span class="ln">    77</span>		old := mset[m.Name]
<a id="L78"></a><span class="ln">    78</span>		if old == nil || m.Level &lt; old.Level {
<a id="L79"></a><span class="ln">    79</span>			mset[m.Name] = m
<a id="L80"></a><span class="ln">    80</span>			return
<a id="L81"></a><span class="ln">    81</span>		}
<a id="L82"></a><span class="ln">    82</span>		if old != nil &amp;&amp; m.Level == old.Level {
<a id="L83"></a><span class="ln">    83</span>			<span class="comment">// conflict - mark it using a method with nil Decl</span>
<a id="L84"></a><span class="ln">    84</span>			mset[m.Name] = &amp;Func{
<a id="L85"></a><span class="ln">    85</span>				Name:  m.Name,
<a id="L86"></a><span class="ln">    86</span>				Level: m.Level,
<a id="L87"></a><span class="ln">    87</span>			}
<a id="L88"></a><span class="ln">    88</span>		}
<a id="L89"></a><span class="ln">    89</span>	}
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// ----------------------------------------------------------------------------</span>
<a id="L92"></a><span class="ln">    92</span>	<span class="comment">// Named types</span>
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// baseTypeName returns the name of the base type of x (or &#34;&#34;)</span>
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">// and whether the type is imported or not.</span>
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">//</span>
<a id="L97"></a><span class="ln">    97</span>	func baseTypeName(x ast.Expr) (name string, imported bool) {
<a id="L98"></a><span class="ln">    98</span>		switch t := x.(type) {
<a id="L99"></a><span class="ln">    99</span>		case *ast.Ident:
<a id="L100"></a><span class="ln">   100</span>			return t.Name, false
<a id="L101"></a><span class="ln">   101</span>		case *ast.SelectorExpr:
<a id="L102"></a><span class="ln">   102</span>			if _, ok := t.X.(*ast.Ident); ok {
<a id="L103"></a><span class="ln">   103</span>				<span class="comment">// only possible for qualified type names;</span>
<a id="L104"></a><span class="ln">   104</span>				<span class="comment">// assume type is imported</span>
<a id="L105"></a><span class="ln">   105</span>				return t.Sel.Name, true
<a id="L106"></a><span class="ln">   106</span>			}
<a id="L107"></a><span class="ln">   107</span>		case *ast.StarExpr:
<a id="L108"></a><span class="ln">   108</span>			return baseTypeName(t.X)
<a id="L109"></a><span class="ln">   109</span>		}
<a id="L110"></a><span class="ln">   110</span>		return
<a id="L111"></a><span class="ln">   111</span>	}
<a id="L112"></a><span class="ln">   112</span>	
<a id="L113"></a><span class="ln">   113</span>	<span class="comment">// An embeddedSet describes a set of embedded types.</span>
<a id="L114"></a><span class="ln">   114</span>	type embeddedSet map[*namedType]bool
<a id="L115"></a><span class="ln">   115</span>	
<a id="L116"></a><span class="ln">   116</span>	<span class="comment">// A namedType represents a named unqualified (package local, or possibly</span>
<a id="L117"></a><span class="ln">   117</span>	<span class="comment">// predeclared) type. The namedType for a type name is always found via</span>
<a id="L118"></a><span class="ln">   118</span>	<span class="comment">// reader.lookupType.</span>
<a id="L119"></a><span class="ln">   119</span>	<span class="comment">//</span>
<a id="L120"></a><span class="ln">   120</span>	type namedType struct {
<a id="L121"></a><span class="ln">   121</span>		doc  string       <span class="comment">// doc comment for type</span>
<a id="L122"></a><span class="ln">   122</span>		name string       <span class="comment">// type name</span>
<a id="L123"></a><span class="ln">   123</span>		decl *ast.GenDecl <span class="comment">// nil if declaration hasn&#39;t been seen yet</span>
<a id="L124"></a><span class="ln">   124</span>	
<a id="L125"></a><span class="ln">   125</span>		isEmbedded bool        <span class="comment">// true if this type is embedded</span>
<a id="L126"></a><span class="ln">   126</span>		isStruct   bool        <span class="comment">// true if this type is a struct</span>
<a id="L127"></a><span class="ln">   127</span>		embedded   embeddedSet <span class="comment">// true if the embedded type is a pointer</span>
<a id="L128"></a><span class="ln">   128</span>	
<a id="L129"></a><span class="ln">   129</span>		<span class="comment">// associated declarations</span>
<a id="L130"></a><span class="ln">   130</span>		values  []*Value <span class="comment">// consts and vars</span>
<a id="L131"></a><span class="ln">   131</span>		funcs   methodSet
<a id="L132"></a><span class="ln">   132</span>		methods methodSet
<a id="L133"></a><span class="ln">   133</span>	}
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">// ----------------------------------------------------------------------------</span>
<a id="L136"></a><span class="ln">   136</span>	<span class="comment">// AST reader</span>
<a id="L137"></a><span class="ln">   137</span>	
<a id="L138"></a><span class="ln">   138</span>	<span class="comment">// reader accumulates documentation for a single package.</span>
<a id="L139"></a><span class="ln">   139</span>	<span class="comment">// It modifies the AST: Comments (declaration documentation)</span>
<a id="L140"></a><span class="ln">   140</span>	<span class="comment">// that have been collected by the reader are set to nil</span>
<a id="L141"></a><span class="ln">   141</span>	<span class="comment">// in the respective AST nodes so that they are not printed</span>
<a id="L142"></a><span class="ln">   142</span>	<span class="comment">// twice (once when printing the documentation and once when</span>
<a id="L143"></a><span class="ln">   143</span>	<span class="comment">// printing the corresponding AST node).</span>
<a id="L144"></a><span class="ln">   144</span>	<span class="comment">//</span>
<a id="L145"></a><span class="ln">   145</span>	type reader struct {
<a id="L146"></a><span class="ln">   146</span>		mode Mode
<a id="L147"></a><span class="ln">   147</span>	
<a id="L148"></a><span class="ln">   148</span>		<span class="comment">// package properties</span>
<a id="L149"></a><span class="ln">   149</span>		doc       string <span class="comment">// package documentation, if any</span>
<a id="L150"></a><span class="ln">   150</span>		filenames []string
<a id="L151"></a><span class="ln">   151</span>		bugs      []string
<a id="L152"></a><span class="ln">   152</span>	
<a id="L153"></a><span class="ln">   153</span>		<span class="comment">// declarations</span>
<a id="L154"></a><span class="ln">   154</span>		imports map[string]int
<a id="L155"></a><span class="ln">   155</span>		values  []*Value <span class="comment">// consts and vars</span>
<a id="L156"></a><span class="ln">   156</span>		types   map[string]*namedType
<a id="L157"></a><span class="ln">   157</span>		funcs   methodSet
<a id="L158"></a><span class="ln">   158</span>	
<a id="L159"></a><span class="ln">   159</span>		<span class="comment">// support for package-local error type declarations</span>
<a id="L160"></a><span class="ln">   160</span>		errorDecl bool                 <span class="comment">// if set, type &#34;error&#34; was declared locally</span>
<a id="L161"></a><span class="ln">   161</span>		fixlist   []*ast.InterfaceType <span class="comment">// list of interfaces containing anonymous field &#34;error&#34;</span>
<a id="L162"></a><span class="ln">   162</span>	}
<a id="L163"></a><span class="ln">   163</span>	
<a id="L164"></a><span class="ln">   164</span>	func (r *reader) isVisible(name string) bool {
<a id="L165"></a><span class="ln">   165</span>		return r.mode&amp;AllDecls != 0 || ast.IsExported(name)
<a id="L166"></a><span class="ln">   166</span>	}
<a id="L167"></a><span class="ln">   167</span>	
<a id="L168"></a><span class="ln">   168</span>	<span class="comment">// lookupType returns the base type with the given name.</span>
<a id="L169"></a><span class="ln">   169</span>	<span class="comment">// If the base type has not been encountered yet, a new</span>
<a id="L170"></a><span class="ln">   170</span>	<span class="comment">// type with the given name but no associated declaration</span>
<a id="L171"></a><span class="ln">   171</span>	<span class="comment">// is added to the type map.</span>
<a id="L172"></a><span class="ln">   172</span>	<span class="comment">//</span>
<a id="L173"></a><span class="ln">   173</span>	func (r *reader) lookupType(name string) *namedType {
<a id="L174"></a><span class="ln">   174</span>		if name == &#34;&#34; || name == &#34;_&#34; {
<a id="L175"></a><span class="ln">   175</span>			return nil <span class="comment">// no type docs for anonymous types</span>
<a id="L176"></a><span class="ln">   176</span>		}
<a id="L177"></a><span class="ln">   177</span>		if typ, found := r.types[name]; found {
<a id="L178"></a><span class="ln">   178</span>			return typ
<a id="L179"></a><span class="ln">   179</span>		}
<a id="L180"></a><span class="ln">   180</span>		<span class="comment">// type not found - add one without declaration</span>
<a id="L181"></a><span class="ln">   181</span>		typ := &amp;namedType{
<a id="L182"></a><span class="ln">   182</span>			name:     name,
<a id="L183"></a><span class="ln">   183</span>			embedded: make(embeddedSet),
<a id="L184"></a><span class="ln">   184</span>			funcs:    make(methodSet),
<a id="L185"></a><span class="ln">   185</span>			methods:  make(methodSet),
<a id="L186"></a><span class="ln">   186</span>		}
<a id="L187"></a><span class="ln">   187</span>		r.types[name] = typ
<a id="L188"></a><span class="ln">   188</span>		return typ
<a id="L189"></a><span class="ln">   189</span>	}
<a id="L190"></a><span class="ln">   190</span>	
<a id="L191"></a><span class="ln">   191</span>	<span class="comment">// recordAnonymousField registers fieldType as the type of an</span>
<a id="L192"></a><span class="ln">   192</span>	<span class="comment">// anonymous field in the parent type. If the field is imported</span>
<a id="L193"></a><span class="ln">   193</span>	<span class="comment">// (qualified name) or the parent is nil, the field is ignored.</span>
<a id="L194"></a><span class="ln">   194</span>	<span class="comment">// The function returns the field name.</span>
<a id="L195"></a><span class="ln">   195</span>	<span class="comment">//</span>
<a id="L196"></a><span class="ln">   196</span>	func (r *reader) recordAnonymousField(parent *namedType, fieldType ast.Expr) (fname string) {
<a id="L197"></a><span class="ln">   197</span>		fname, imp := baseTypeName(fieldType)
<a id="L198"></a><span class="ln">   198</span>		if parent == nil || imp {
<a id="L199"></a><span class="ln">   199</span>			return
<a id="L200"></a><span class="ln">   200</span>		}
<a id="L201"></a><span class="ln">   201</span>		if ftype := r.lookupType(fname); ftype != nil {
<a id="L202"></a><span class="ln">   202</span>			ftype.isEmbedded = true
<a id="L203"></a><span class="ln">   203</span>			_, ptr := fieldType.(*ast.StarExpr)
<a id="L204"></a><span class="ln">   204</span>			parent.embedded[ftype] = ptr
<a id="L205"></a><span class="ln">   205</span>		}
<a id="L206"></a><span class="ln">   206</span>		return
<a id="L207"></a><span class="ln">   207</span>	}
<a id="L208"></a><span class="ln">   208</span>	
<a id="L209"></a><span class="ln">   209</span>	func (r *reader) readDoc(comment *ast.CommentGroup) {
<a id="L210"></a><span class="ln">   210</span>		<span class="comment">// By convention there should be only one package comment</span>
<a id="L211"></a><span class="ln">   211</span>		<span class="comment">// but collect all of them if there are more then one.</span>
<a id="L212"></a><span class="ln">   212</span>		text := comment.Text()
<a id="L213"></a><span class="ln">   213</span>		if r.doc == &#34;&#34; {
<a id="L214"></a><span class="ln">   214</span>			r.doc = text
<a id="L215"></a><span class="ln">   215</span>			return
<a id="L216"></a><span class="ln">   216</span>		}
<a id="L217"></a><span class="ln">   217</span>		r.doc += &#34;\n&#34; + text
<a id="L218"></a><span class="ln">   218</span>	}
<a id="L219"></a><span class="ln">   219</span>	
<a id="L220"></a><span class="ln">   220</span>	func (r *reader) remember(typ *ast.InterfaceType) {
<a id="L221"></a><span class="ln">   221</span>		r.fixlist = append(r.fixlist, typ)
<a id="L222"></a><span class="ln">   222</span>	}
<a id="L223"></a><span class="ln">   223</span>	
<a id="L224"></a><span class="ln">   224</span>	func specNames(specs []ast.Spec) []string {
<a id="L225"></a><span class="ln">   225</span>		names := make([]string, 0, len(specs)) <span class="comment">// reasonable estimate</span>
<a id="L226"></a><span class="ln">   226</span>		for _, s := range specs {
<a id="L227"></a><span class="ln">   227</span>			<span class="comment">// s guaranteed to be an *ast.ValueSpec by readValue</span>
<a id="L228"></a><span class="ln">   228</span>			for _, ident := range s.(*ast.ValueSpec).Names {
<a id="L229"></a><span class="ln">   229</span>				names = append(names, ident.Name)
<a id="L230"></a><span class="ln">   230</span>			}
<a id="L231"></a><span class="ln">   231</span>		}
<a id="L232"></a><span class="ln">   232</span>		return names
<a id="L233"></a><span class="ln">   233</span>	}
<a id="L234"></a><span class="ln">   234</span>	
<a id="L235"></a><span class="ln">   235</span>	<span class="comment">// readValue processes a const or var declaration.</span>
<a id="L236"></a><span class="ln">   236</span>	<span class="comment">//</span>
<a id="L237"></a><span class="ln">   237</span>	func (r *reader) readValue(decl *ast.GenDecl) {
<a id="L238"></a><span class="ln">   238</span>		<span class="comment">// determine if decl should be associated with a type</span>
<a id="L239"></a><span class="ln">   239</span>		<span class="comment">// Heuristic: For each typed entry, determine the type name, if any.</span>
<a id="L240"></a><span class="ln">   240</span>		<span class="comment">//            If there is exactly one type name that is sufficiently</span>
<a id="L241"></a><span class="ln">   241</span>		<span class="comment">//            frequent, associate the decl with the respective type.</span>
<a id="L242"></a><span class="ln">   242</span>		domName := &#34;&#34;
<a id="L243"></a><span class="ln">   243</span>		domFreq := 0
<a id="L244"></a><span class="ln">   244</span>		prev := &#34;&#34;
<a id="L245"></a><span class="ln">   245</span>		n := 0
<a id="L246"></a><span class="ln">   246</span>		for _, spec := range decl.Specs {
<a id="L247"></a><span class="ln">   247</span>			s, ok := spec.(*ast.ValueSpec)
<a id="L248"></a><span class="ln">   248</span>			if !ok {
<a id="L249"></a><span class="ln">   249</span>				continue <span class="comment">// should not happen, but be conservative</span>
<a id="L250"></a><span class="ln">   250</span>			}
<a id="L251"></a><span class="ln">   251</span>			name := &#34;&#34;
<a id="L252"></a><span class="ln">   252</span>			switch {
<a id="L253"></a><span class="ln">   253</span>			case s.Type != nil:
<a id="L254"></a><span class="ln">   254</span>				<span class="comment">// a type is present; determine its name</span>
<a id="L255"></a><span class="ln">   255</span>				if n, imp := baseTypeName(s.Type); !imp {
<a id="L256"></a><span class="ln">   256</span>					name = n
<a id="L257"></a><span class="ln">   257</span>				}
<a id="L258"></a><span class="ln">   258</span>			case decl.Tok == token.CONST:
<a id="L259"></a><span class="ln">   259</span>				<span class="comment">// no type is present but we have a constant declaration;</span>
<a id="L260"></a><span class="ln">   260</span>				<span class="comment">// use the previous type name (w/o more type information</span>
<a id="L261"></a><span class="ln">   261</span>				<span class="comment">// we cannot handle the case of unnamed variables with</span>
<a id="L262"></a><span class="ln">   262</span>				<span class="comment">// initializer expressions except for some trivial cases)</span>
<a id="L263"></a><span class="ln">   263</span>				name = prev
<a id="L264"></a><span class="ln">   264</span>			}
<a id="L265"></a><span class="ln">   265</span>			if name != &#34;&#34; {
<a id="L266"></a><span class="ln">   266</span>				<span class="comment">// entry has a named type</span>
<a id="L267"></a><span class="ln">   267</span>				if domName != &#34;&#34; &amp;&amp; domName != name {
<a id="L268"></a><span class="ln">   268</span>					<span class="comment">// more than one type name - do not associate</span>
<a id="L269"></a><span class="ln">   269</span>					<span class="comment">// with any type</span>
<a id="L270"></a><span class="ln">   270</span>					domName = &#34;&#34;
<a id="L271"></a><span class="ln">   271</span>					break
<a id="L272"></a><span class="ln">   272</span>				}
<a id="L273"></a><span class="ln">   273</span>				domName = name
<a id="L274"></a><span class="ln">   274</span>				domFreq++
<a id="L275"></a><span class="ln">   275</span>			}
<a id="L276"></a><span class="ln">   276</span>			prev = name
<a id="L277"></a><span class="ln">   277</span>			n++
<a id="L278"></a><span class="ln">   278</span>		}
<a id="L279"></a><span class="ln">   279</span>	
<a id="L280"></a><span class="ln">   280</span>		<span class="comment">// nothing to do w/o a legal declaration</span>
<a id="L281"></a><span class="ln">   281</span>		if n == 0 {
<a id="L282"></a><span class="ln">   282</span>			return
<a id="L283"></a><span class="ln">   283</span>		}
<a id="L284"></a><span class="ln">   284</span>	
<a id="L285"></a><span class="ln">   285</span>		<span class="comment">// determine values list with which to associate the Value for this decl</span>
<a id="L286"></a><span class="ln">   286</span>		values := &amp;r.values
<a id="L287"></a><span class="ln">   287</span>		const threshold = 0.75
<a id="L288"></a><span class="ln">   288</span>		if domName != &#34;&#34; &amp;&amp; r.isVisible(domName) &amp;&amp; domFreq &gt;= int(float64(len(decl.Specs))*threshold) {
<a id="L289"></a><span class="ln">   289</span>			<span class="comment">// typed entries are sufficiently frequent</span>
<a id="L290"></a><span class="ln">   290</span>			if typ := r.lookupType(domName); typ != nil {
<a id="L291"></a><span class="ln">   291</span>				values = &amp;typ.values <span class="comment">// associate with that type</span>
<a id="L292"></a><span class="ln">   292</span>			}
<a id="L293"></a><span class="ln">   293</span>		}
<a id="L294"></a><span class="ln">   294</span>	
<a id="L295"></a><span class="ln">   295</span>		*values = append(*values, &amp;Value{
<a id="L296"></a><span class="ln">   296</span>			Doc:   decl.Doc.Text(),
<a id="L297"></a><span class="ln">   297</span>			Names: specNames(decl.Specs),
<a id="L298"></a><span class="ln">   298</span>			Decl:  decl,
<a id="L299"></a><span class="ln">   299</span>			order: len(*values),
<a id="L300"></a><span class="ln">   300</span>		})
<a id="L301"></a><span class="ln">   301</span>		decl.Doc = nil <span class="comment">// doc consumed - remove from AST</span>
<a id="L302"></a><span class="ln">   302</span>	}
<a id="L303"></a><span class="ln">   303</span>	
<a id="L304"></a><span class="ln">   304</span>	<span class="comment">// fields returns a struct&#39;s fields or an interface&#39;s methods.</span>
<a id="L305"></a><span class="ln">   305</span>	<span class="comment">//</span>
<a id="L306"></a><span class="ln">   306</span>	func fields(typ ast.Expr) (list []*ast.Field, isStruct bool) {
<a id="L307"></a><span class="ln">   307</span>		var fields *ast.FieldList
<a id="L308"></a><span class="ln">   308</span>		switch t := typ.(type) {
<a id="L309"></a><span class="ln">   309</span>		case *ast.StructType:
<a id="L310"></a><span class="ln">   310</span>			fields = t.Fields
<a id="L311"></a><span class="ln">   311</span>			isStruct = true
<a id="L312"></a><span class="ln">   312</span>		case *ast.InterfaceType:
<a id="L313"></a><span class="ln">   313</span>			fields = t.Methods
<a id="L314"></a><span class="ln">   314</span>		}
<a id="L315"></a><span class="ln">   315</span>		if fields != nil {
<a id="L316"></a><span class="ln">   316</span>			list = fields.List
<a id="L317"></a><span class="ln">   317</span>		}
<a id="L318"></a><span class="ln">   318</span>		return
<a id="L319"></a><span class="ln">   319</span>	}
<a id="L320"></a><span class="ln">   320</span>	
<a id="L321"></a><span class="ln">   321</span>	<span class="comment">// readType processes a type declaration.</span>
<a id="L322"></a><span class="ln">   322</span>	<span class="comment">//</span>
<a id="L323"></a><span class="ln">   323</span>	func (r *reader) readType(decl *ast.GenDecl, spec *ast.TypeSpec) {
<a id="L324"></a><span class="ln">   324</span>		typ := r.lookupType(spec.Name.Name)
<a id="L325"></a><span class="ln">   325</span>		if typ == nil {
<a id="L326"></a><span class="ln">   326</span>			return <span class="comment">// no name or blank name - ignore the type</span>
<a id="L327"></a><span class="ln">   327</span>		}
<a id="L328"></a><span class="ln">   328</span>	
<a id="L329"></a><span class="ln">   329</span>		<span class="comment">// A type should be added at most once, so typ.decl</span>
<a id="L330"></a><span class="ln">   330</span>		<span class="comment">// should be nil - if it is not, simply overwrite it.</span>
<a id="L331"></a><span class="ln">   331</span>		typ.decl = decl
<a id="L332"></a><span class="ln">   332</span>	
<a id="L333"></a><span class="ln">   333</span>		<span class="comment">// compute documentation</span>
<a id="L334"></a><span class="ln">   334</span>		doc := spec.Doc
<a id="L335"></a><span class="ln">   335</span>		spec.Doc = nil <span class="comment">// doc consumed - remove from AST</span>
<a id="L336"></a><span class="ln">   336</span>		if doc == nil {
<a id="L337"></a><span class="ln">   337</span>			<span class="comment">// no doc associated with the spec, use the declaration doc, if any</span>
<a id="L338"></a><span class="ln">   338</span>			doc = decl.Doc
<a id="L339"></a><span class="ln">   339</span>		}
<a id="L340"></a><span class="ln">   340</span>		decl.Doc = nil <span class="comment">// doc consumed - remove from AST</span>
<a id="L341"></a><span class="ln">   341</span>		typ.doc = doc.Text()
<a id="L342"></a><span class="ln">   342</span>	
<a id="L343"></a><span class="ln">   343</span>		<span class="comment">// record anonymous fields (they may contribute methods)</span>
<a id="L344"></a><span class="ln">   344</span>		<span class="comment">// (some fields may have been recorded already when filtering</span>
<a id="L345"></a><span class="ln">   345</span>		<span class="comment">// exports, but that&#39;s ok)</span>
<a id="L346"></a><span class="ln">   346</span>		var list []*ast.Field
<a id="L347"></a><span class="ln">   347</span>		list, typ.isStruct = fields(spec.Type)
<a id="L348"></a><span class="ln">   348</span>		for _, field := range list {
<a id="L349"></a><span class="ln">   349</span>			if len(field.Names) == 0 {
<a id="L350"></a><span class="ln">   350</span>				r.recordAnonymousField(typ, field.Type)
<a id="L351"></a><span class="ln">   351</span>			}
<a id="L352"></a><span class="ln">   352</span>		}
<a id="L353"></a><span class="ln">   353</span>	}
<a id="L354"></a><span class="ln">   354</span>	
<a id="L355"></a><span class="ln">   355</span>	<span class="comment">// readFunc processes a func or method declaration.</span>
<a id="L356"></a><span class="ln">   356</span>	<span class="comment">//</span>
<a id="L357"></a><span class="ln">   357</span>	func (r *reader) readFunc(fun *ast.FuncDecl) {
<a id="L358"></a><span class="ln">   358</span>		<span class="comment">// strip function body</span>
<a id="L359"></a><span class="ln">   359</span>		fun.Body = nil
<a id="L360"></a><span class="ln">   360</span>	
<a id="L361"></a><span class="ln">   361</span>		<span class="comment">// associate methods with the receiver type, if any</span>
<a id="L362"></a><span class="ln">   362</span>		if fun.Recv != nil {
<a id="L363"></a><span class="ln">   363</span>			<span class="comment">// method</span>
<a id="L364"></a><span class="ln">   364</span>			recvTypeName, imp := baseTypeName(fun.Recv.List[0].Type)
<a id="L365"></a><span class="ln">   365</span>			if imp {
<a id="L366"></a><span class="ln">   366</span>				<span class="comment">// should not happen (incorrect AST);</span>
<a id="L367"></a><span class="ln">   367</span>				<span class="comment">// don&#39;t show this method</span>
<a id="L368"></a><span class="ln">   368</span>				return
<a id="L369"></a><span class="ln">   369</span>			}
<a id="L370"></a><span class="ln">   370</span>			if typ := r.lookupType(recvTypeName); typ != nil {
<a id="L371"></a><span class="ln">   371</span>				typ.methods.set(fun)
<a id="L372"></a><span class="ln">   372</span>			}
<a id="L373"></a><span class="ln">   373</span>			<span class="comment">// otherwise ignore the method</span>
<a id="L374"></a><span class="ln">   374</span>			<span class="comment">// TODO(gri): There may be exported methods of non-exported types</span>
<a id="L375"></a><span class="ln">   375</span>			<span class="comment">// that can be called because of exported values (consts, vars, or</span>
<a id="L376"></a><span class="ln">   376</span>			<span class="comment">// function results) of that type. Could determine if that is the</span>
<a id="L377"></a><span class="ln">   377</span>			<span class="comment">// case and then show those methods in an appropriate section.</span>
<a id="L378"></a><span class="ln">   378</span>			return
<a id="L379"></a><span class="ln">   379</span>		}
<a id="L380"></a><span class="ln">   380</span>	
<a id="L381"></a><span class="ln">   381</span>		<span class="comment">// associate factory functions with the first visible result type, if any</span>
<a id="L382"></a><span class="ln">   382</span>		if fun.Type.Results.NumFields() &gt;= 1 {
<a id="L383"></a><span class="ln">   383</span>			res := fun.Type.Results.List[0]
<a id="L384"></a><span class="ln">   384</span>			if len(res.Names) &lt;= 1 {
<a id="L385"></a><span class="ln">   385</span>				<span class="comment">// exactly one (named or anonymous) result associated</span>
<a id="L386"></a><span class="ln">   386</span>				<span class="comment">// with the first type in result signature (there may</span>
<a id="L387"></a><span class="ln">   387</span>				<span class="comment">// be more than one result)</span>
<a id="L388"></a><span class="ln">   388</span>				if n, imp := baseTypeName(res.Type); !imp &amp;&amp; r.isVisible(n) {
<a id="L389"></a><span class="ln">   389</span>					if typ := r.lookupType(n); typ != nil {
<a id="L390"></a><span class="ln">   390</span>						<span class="comment">// associate function with typ</span>
<a id="L391"></a><span class="ln">   391</span>						typ.funcs.set(fun)
<a id="L392"></a><span class="ln">   392</span>						return
<a id="L393"></a><span class="ln">   393</span>					}
<a id="L394"></a><span class="ln">   394</span>				}
<a id="L395"></a><span class="ln">   395</span>			}
<a id="L396"></a><span class="ln">   396</span>		}
<a id="L397"></a><span class="ln">   397</span>	
<a id="L398"></a><span class="ln">   398</span>		<span class="comment">// just an ordinary function</span>
<a id="L399"></a><span class="ln">   399</span>		r.funcs.set(fun)
<a id="L400"></a><span class="ln">   400</span>	}
<a id="L401"></a><span class="ln">   401</span>	
<a id="L402"></a><span class="ln">   402</span>	var (
<a id="L403"></a><span class="ln">   403</span>		bug_markers = regexp.MustCompile(&#34;^/[/*][ \t]*BUG\\(.*\\):[ \t]*&#34;) <span class="comment">// BUG(uid):</span>
<a id="L404"></a><span class="ln">   404</span>		bug_content = regexp.MustCompile(&#34;[^ \n\r\t]+&#34;)                    <span class="comment">// at least one non-whitespace char</span>
<a id="L405"></a><span class="ln">   405</span>	)
<a id="L406"></a><span class="ln">   406</span>	
<a id="L407"></a><span class="ln">   407</span>	<span class="comment">// readFile adds the AST for a source file to the reader.</span>
<a id="L408"></a><span class="ln">   408</span>	<span class="comment">//</span>
<a id="L409"></a><span class="ln">   409</span>	func (r *reader) readFile(src *ast.File) {
<a id="L410"></a><span class="ln">   410</span>		<span class="comment">// add package documentation</span>
<a id="L411"></a><span class="ln">   411</span>		if src.Doc != nil {
<a id="L412"></a><span class="ln">   412</span>			r.readDoc(src.Doc)
<a id="L413"></a><span class="ln">   413</span>			src.Doc = nil <span class="comment">// doc consumed - remove from AST</span>
<a id="L414"></a><span class="ln">   414</span>		}
<a id="L415"></a><span class="ln">   415</span>	
<a id="L416"></a><span class="ln">   416</span>		<span class="comment">// add all declarations</span>
<a id="L417"></a><span class="ln">   417</span>		for _, decl := range src.Decls {
<a id="L418"></a><span class="ln">   418</span>			switch d := decl.(type) {
<a id="L419"></a><span class="ln">   419</span>			case *ast.GenDecl:
<a id="L420"></a><span class="ln">   420</span>				switch d.Tok {
<a id="L421"></a><span class="ln">   421</span>				case token.IMPORT:
<a id="L422"></a><span class="ln">   422</span>					<span class="comment">// imports are handled individually</span>
<a id="L423"></a><span class="ln">   423</span>					for _, spec := range d.Specs {
<a id="L424"></a><span class="ln">   424</span>						if s, ok := spec.(*ast.ImportSpec); ok {
<a id="L425"></a><span class="ln">   425</span>							if import_, err := strconv.Unquote(s.Path.Value); err == nil {
<a id="L426"></a><span class="ln">   426</span>								r.imports[import_] = 1
<a id="L427"></a><span class="ln">   427</span>							}
<a id="L428"></a><span class="ln">   428</span>						}
<a id="L429"></a><span class="ln">   429</span>					}
<a id="L430"></a><span class="ln">   430</span>				case token.CONST, token.VAR:
<a id="L431"></a><span class="ln">   431</span>					<span class="comment">// constants and variables are always handled as a group</span>
<a id="L432"></a><span class="ln">   432</span>					r.readValue(d)
<a id="L433"></a><span class="ln">   433</span>				case token.TYPE:
<a id="L434"></a><span class="ln">   434</span>					<span class="comment">// types are handled individually</span>
<a id="L435"></a><span class="ln">   435</span>					if len(d.Specs) == 1 &amp;&amp; !d.Lparen.IsValid() {
<a id="L436"></a><span class="ln">   436</span>						<span class="comment">// common case: single declaration w/o parentheses</span>
<a id="L437"></a><span class="ln">   437</span>						<span class="comment">// (if a single declaration is parenthesized,</span>
<a id="L438"></a><span class="ln">   438</span>						<span class="comment">// create a new fake declaration below, so that</span>
<a id="L439"></a><span class="ln">   439</span>						<span class="comment">// go/doc type declarations always appear w/o</span>
<a id="L440"></a><span class="ln">   440</span>						<span class="comment">// parentheses)</span>
<a id="L441"></a><span class="ln">   441</span>						if s, ok := d.Specs[0].(*ast.TypeSpec); ok {
<a id="L442"></a><span class="ln">   442</span>							r.readType(d, s)
<a id="L443"></a><span class="ln">   443</span>						}
<a id="L444"></a><span class="ln">   444</span>						break
<a id="L445"></a><span class="ln">   445</span>					}
<a id="L446"></a><span class="ln">   446</span>					for _, spec := range d.Specs {
<a id="L447"></a><span class="ln">   447</span>						if s, ok := spec.(*ast.TypeSpec); ok {
<a id="L448"></a><span class="ln">   448</span>							<span class="comment">// use an individual (possibly fake) declaration</span>
<a id="L449"></a><span class="ln">   449</span>							<span class="comment">// for each type; this also ensures that each type</span>
<a id="L450"></a><span class="ln">   450</span>							<span class="comment">// gets to (re-)use the declaration documentation</span>
<a id="L451"></a><span class="ln">   451</span>							<span class="comment">// if there&#39;s none associated with the spec itself</span>
<a id="L452"></a><span class="ln">   452</span>							fake := &amp;ast.GenDecl{
<a id="L453"></a><span class="ln">   453</span>								Doc: d.Doc,
<a id="L454"></a><span class="ln">   454</span>								<span class="comment">// don&#39;t use the existing TokPos because it</span>
<a id="L455"></a><span class="ln">   455</span>								<span class="comment">// will lead to the wrong selection range for</span>
<a id="L456"></a><span class="ln">   456</span>								<span class="comment">// the fake declaration if there are more</span>
<a id="L457"></a><span class="ln">   457</span>								<span class="comment">// than one type in the group (this affects</span>
<a id="L458"></a><span class="ln">   458</span>								<span class="comment">// src/cmd/godoc/godoc.go&#39;s posLink_urlFunc)</span>
<a id="L459"></a><span class="ln">   459</span>								TokPos: s.Pos(),
<a id="L460"></a><span class="ln">   460</span>								Tok:    token.TYPE,
<a id="L461"></a><span class="ln">   461</span>								Specs:  []ast.Spec{s},
<a id="L462"></a><span class="ln">   462</span>							}
<a id="L463"></a><span class="ln">   463</span>							r.readType(fake, s)
<a id="L464"></a><span class="ln">   464</span>						}
<a id="L465"></a><span class="ln">   465</span>					}
<a id="L466"></a><span class="ln">   466</span>				}
<a id="L467"></a><span class="ln">   467</span>			case *ast.FuncDecl:
<a id="L468"></a><span class="ln">   468</span>				r.readFunc(d)
<a id="L469"></a><span class="ln">   469</span>			}
<a id="L470"></a><span class="ln">   470</span>		}
<a id="L471"></a><span class="ln">   471</span>	
<a id="L472"></a><span class="ln">   472</span>		<span class="comment">// collect BUG(...) comments</span>
<a id="L473"></a><span class="ln">   473</span>		for _, c := range src.Comments {
<a id="L474"></a><span class="ln">   474</span>			text := c.List[0].Text
<a id="L475"></a><span class="ln">   475</span>			if m := bug_markers.FindStringIndex(text); m != nil {
<a id="L476"></a><span class="ln">   476</span>				<span class="comment">// found a BUG comment; maybe empty</span>
<a id="L477"></a><span class="ln">   477</span>				if btxt := text[m[1]:]; bug_content.MatchString(btxt) {
<a id="L478"></a><span class="ln">   478</span>					<span class="comment">// non-empty BUG comment; collect comment without BUG prefix</span>
<a id="L479"></a><span class="ln">   479</span>					list := append([]*ast.Comment(nil), c.List...) <span class="comment">// make a copy</span>
<a id="L480"></a><span class="ln">   480</span>					list[0].Text = text[m[1]:]
<a id="L481"></a><span class="ln">   481</span>					r.bugs = append(r.bugs, (&amp;ast.CommentGroup{List: list}).Text())
<a id="L482"></a><span class="ln">   482</span>				}
<a id="L483"></a><span class="ln">   483</span>			}
<a id="L484"></a><span class="ln">   484</span>		}
<a id="L485"></a><span class="ln">   485</span>		src.Comments = nil <span class="comment">// consumed unassociated comments - remove from AST</span>
<a id="L486"></a><span class="ln">   486</span>	}
<a id="L487"></a><span class="ln">   487</span>	
<a id="L488"></a><span class="ln">   488</span>	func (r *reader) readPackage(pkg *ast.Package, mode Mode) {
<a id="L489"></a><span class="ln">   489</span>		<span class="comment">// initialize reader</span>
<a id="L490"></a><span class="ln">   490</span>		r.filenames = make([]string, len(pkg.Files))
<a id="L491"></a><span class="ln">   491</span>		r.imports = make(map[string]int)
<a id="L492"></a><span class="ln">   492</span>		r.mode = mode
<a id="L493"></a><span class="ln">   493</span>		r.types = make(map[string]*namedType)
<a id="L494"></a><span class="ln">   494</span>		r.funcs = make(methodSet)
<a id="L495"></a><span class="ln">   495</span>	
<a id="L496"></a><span class="ln">   496</span>		<span class="comment">// sort package files before reading them so that the</span>
<a id="L497"></a><span class="ln">   497</span>		<span class="comment">// result result does not depend on map iteration order</span>
<a id="L498"></a><span class="ln">   498</span>		i := 0
<a id="L499"></a><span class="ln">   499</span>		for filename := range pkg.Files {
<a id="L500"></a><span class="ln">   500</span>			r.filenames[i] = filename
<a id="L501"></a><span class="ln">   501</span>			i++
<a id="L502"></a><span class="ln">   502</span>		}
<a id="L503"></a><span class="ln">   503</span>		sort.Strings(r.filenames)
<a id="L504"></a><span class="ln">   504</span>	
<a id="L505"></a><span class="ln">   505</span>		<span class="comment">// process files in sorted order</span>
<a id="L506"></a><span class="ln">   506</span>		for _, filename := range r.filenames {
<a id="L507"></a><span class="ln">   507</span>			f := pkg.Files[filename]
<a id="L508"></a><span class="ln">   508</span>			if mode&amp;AllDecls == 0 {
<a id="L509"></a><span class="ln">   509</span>				r.fileExports(f)
<a id="L510"></a><span class="ln">   510</span>			}
<a id="L511"></a><span class="ln">   511</span>			r.readFile(f)
<a id="L512"></a><span class="ln">   512</span>		}
<a id="L513"></a><span class="ln">   513</span>	}
<a id="L514"></a><span class="ln">   514</span>	
<a id="L515"></a><span class="ln">   515</span>	<span class="comment">// ----------------------------------------------------------------------------</span>
<a id="L516"></a><span class="ln">   516</span>	<span class="comment">// Types</span>
<a id="L517"></a><span class="ln">   517</span>	
<a id="L518"></a><span class="ln">   518</span>	var predeclaredTypes = map[string]bool{
<a id="L519"></a><span class="ln">   519</span>		&#34;bool&#34;:       true,
<a id="L520"></a><span class="ln">   520</span>		&#34;byte&#34;:       true,
<a id="L521"></a><span class="ln">   521</span>		&#34;complex64&#34;:  true,
<a id="L522"></a><span class="ln">   522</span>		&#34;complex128&#34;: true,
<a id="L523"></a><span class="ln">   523</span>		&#34;error&#34;:      true,
<a id="L524"></a><span class="ln">   524</span>		&#34;float32&#34;:    true,
<a id="L525"></a><span class="ln">   525</span>		&#34;float64&#34;:    true,
<a id="L526"></a><span class="ln">   526</span>		&#34;int&#34;:        true,
<a id="L527"></a><span class="ln">   527</span>		&#34;int8&#34;:       true,
<a id="L528"></a><span class="ln">   528</span>		&#34;int16&#34;:      true,
<a id="L529"></a><span class="ln">   529</span>		&#34;int32&#34;:      true,
<a id="L530"></a><span class="ln">   530</span>		&#34;int64&#34;:      true,
<a id="L531"></a><span class="ln">   531</span>		&#34;rune&#34;:       true,
<a id="L532"></a><span class="ln">   532</span>		&#34;string&#34;:     true,
<a id="L533"></a><span class="ln">   533</span>		&#34;uint&#34;:       true,
<a id="L534"></a><span class="ln">   534</span>		&#34;uint8&#34;:      true,
<a id="L535"></a><span class="ln">   535</span>		&#34;uint16&#34;:     true,
<a id="L536"></a><span class="ln">   536</span>		&#34;uint32&#34;:     true,
<a id="L537"></a><span class="ln">   537</span>		&#34;uint64&#34;:     true,
<a id="L538"></a><span class="ln">   538</span>		&#34;uintptr&#34;:    true,
<a id="L539"></a><span class="ln">   539</span>	}
<a id="L540"></a><span class="ln">   540</span>	
<a id="L541"></a><span class="ln">   541</span>	func customizeRecv(f *Func, recvTypeName string, embeddedIsPtr bool, level int) *Func {
<a id="L542"></a><span class="ln">   542</span>		if f == nil || f.Decl == nil || f.Decl.Recv == nil || len(f.Decl.Recv.List) != 1 {
<a id="L543"></a><span class="ln">   543</span>			return f <span class="comment">// shouldn&#39;t happen, but be safe</span>
<a id="L544"></a><span class="ln">   544</span>		}
<a id="L545"></a><span class="ln">   545</span>	
<a id="L546"></a><span class="ln">   546</span>		<span class="comment">// copy existing receiver field and set new type</span>
<a id="L547"></a><span class="ln">   547</span>		newField := *f.Decl.Recv.List[0]
<a id="L548"></a><span class="ln">   548</span>		_, origRecvIsPtr := newField.Type.(*ast.StarExpr)
<a id="L549"></a><span class="ln">   549</span>		var typ ast.Expr = ast.NewIdent(recvTypeName)
<a id="L550"></a><span class="ln">   550</span>		if !embeddedIsPtr &amp;&amp; origRecvIsPtr {
<a id="L551"></a><span class="ln">   551</span>			typ = &amp;ast.StarExpr{X: typ}
<a id="L552"></a><span class="ln">   552</span>		}
<a id="L553"></a><span class="ln">   553</span>		newField.Type = typ
<a id="L554"></a><span class="ln">   554</span>	
<a id="L555"></a><span class="ln">   555</span>		<span class="comment">// copy existing receiver field list and set new receiver field</span>
<a id="L556"></a><span class="ln">   556</span>		newFieldList := *f.Decl.Recv
<a id="L557"></a><span class="ln">   557</span>		newFieldList.List = []*ast.Field{&amp;newField}
<a id="L558"></a><span class="ln">   558</span>	
<a id="L559"></a><span class="ln">   559</span>		<span class="comment">// copy existing function declaration and set new receiver field list</span>
<a id="L560"></a><span class="ln">   560</span>		newFuncDecl := *f.Decl
<a id="L561"></a><span class="ln">   561</span>		newFuncDecl.Recv = &amp;newFieldList
<a id="L562"></a><span class="ln">   562</span>	
<a id="L563"></a><span class="ln">   563</span>		<span class="comment">// copy existing function documentation and set new declaration</span>
<a id="L564"></a><span class="ln">   564</span>		newF := *f
<a id="L565"></a><span class="ln">   565</span>		newF.Decl = &amp;newFuncDecl
<a id="L566"></a><span class="ln">   566</span>		newF.Recv = recvString(typ)
<a id="L567"></a><span class="ln">   567</span>		<span class="comment">// the Orig field never changes</span>
<a id="L568"></a><span class="ln">   568</span>		newF.Level = level
<a id="L569"></a><span class="ln">   569</span>	
<a id="L570"></a><span class="ln">   570</span>		return &amp;newF
<a id="L571"></a><span class="ln">   571</span>	}
<a id="L572"></a><span class="ln">   572</span>	
<a id="L573"></a><span class="ln">   573</span>	<span class="comment">// collectEmbeddedMethods collects the embedded methods of typ in mset.</span>
<a id="L574"></a><span class="ln">   574</span>	<span class="comment">//</span>
<a id="L575"></a><span class="ln">   575</span>	func (r *reader) collectEmbeddedMethods(mset methodSet, typ *namedType, recvTypeName string, embeddedIsPtr bool, level int, visited embeddedSet) {
<a id="L576"></a><span class="ln">   576</span>		visited[typ] = true
<a id="L577"></a><span class="ln">   577</span>		for embedded, isPtr := range typ.embedded {
<a id="L578"></a><span class="ln">   578</span>			<span class="comment">// Once an embedded type is embedded as a pointer type</span>
<a id="L579"></a><span class="ln">   579</span>			<span class="comment">// all embedded types in those types are treated like</span>
<a id="L580"></a><span class="ln">   580</span>			<span class="comment">// pointer types for the purpose of the receiver type</span>
<a id="L581"></a><span class="ln">   581</span>			<span class="comment">// computation; i.e., embeddedIsPtr is sticky for this</span>
<a id="L582"></a><span class="ln">   582</span>			<span class="comment">// embedding hierarchy.</span>
<a id="L583"></a><span class="ln">   583</span>			thisEmbeddedIsPtr := embeddedIsPtr || isPtr
<a id="L584"></a><span class="ln">   584</span>			for _, m := range embedded.methods {
<a id="L585"></a><span class="ln">   585</span>				<span class="comment">// only top-level methods are embedded</span>
<a id="L586"></a><span class="ln">   586</span>				if m.Level == 0 {
<a id="L587"></a><span class="ln">   587</span>					mset.add(customizeRecv(m, recvTypeName, thisEmbeddedIsPtr, level))
<a id="L588"></a><span class="ln">   588</span>				}
<a id="L589"></a><span class="ln">   589</span>			}
<a id="L590"></a><span class="ln">   590</span>			if !visited[embedded] {
<a id="L591"></a><span class="ln">   591</span>				r.collectEmbeddedMethods(mset, embedded, recvTypeName, thisEmbeddedIsPtr, level+1, visited)
<a id="L592"></a><span class="ln">   592</span>			}
<a id="L593"></a><span class="ln">   593</span>		}
<a id="L594"></a><span class="ln">   594</span>		delete(visited, typ)
<a id="L595"></a><span class="ln">   595</span>	}
<a id="L596"></a><span class="ln">   596</span>	
<a id="L597"></a><span class="ln">   597</span>	<span class="comment">// computeMethodSets determines the actual method sets for each type encountered.</span>
<a id="L598"></a><span class="ln">   598</span>	<span class="comment">//</span>
<a id="L599"></a><span class="ln">   599</span>	func (r *reader) computeMethodSets() {
<a id="L600"></a><span class="ln">   600</span>		for _, t := range r.types {
<a id="L601"></a><span class="ln">   601</span>			<span class="comment">// collect embedded methods for t</span>
<a id="L602"></a><span class="ln">   602</span>			if t.isStruct {
<a id="L603"></a><span class="ln">   603</span>				<span class="comment">// struct</span>
<a id="L604"></a><span class="ln">   604</span>				r.collectEmbeddedMethods(t.methods, t, t.name, false, 1, make(embeddedSet))
<a id="L605"></a><span class="ln">   605</span>			} else {
<a id="L606"></a><span class="ln">   606</span>				<span class="comment">// interface</span>
<a id="L607"></a><span class="ln">   607</span>				<span class="comment">// TODO(gri) fix this</span>
<a id="L608"></a><span class="ln">   608</span>			}
<a id="L609"></a><span class="ln">   609</span>		}
<a id="L610"></a><span class="ln">   610</span>	
<a id="L611"></a><span class="ln">   611</span>		<span class="comment">// if error was declared locally, don&#39;t treat it as exported field anymore</span>
<a id="L612"></a><span class="ln">   612</span>		if r.errorDecl {
<a id="L613"></a><span class="ln">   613</span>			for _, ityp := range r.fixlist {
<a id="L614"></a><span class="ln">   614</span>				removeErrorField(ityp)
<a id="L615"></a><span class="ln">   615</span>			}
<a id="L616"></a><span class="ln">   616</span>		}
<a id="L617"></a><span class="ln">   617</span>	}
<a id="L618"></a><span class="ln">   618</span>	
<a id="L619"></a><span class="ln">   619</span>	<span class="comment">// cleanupTypes removes the association of functions and methods with</span>
<a id="L620"></a><span class="ln">   620</span>	<span class="comment">// types that have no declaration. Instead, these functions and methods</span>
<a id="L621"></a><span class="ln">   621</span>	<span class="comment">// are shown at the package level. It also removes types with missing</span>
<a id="L622"></a><span class="ln">   622</span>	<span class="comment">// declarations or which are not visible.</span>
<a id="L623"></a><span class="ln">   623</span>	<span class="comment">// </span>
<a id="L624"></a><span class="ln">   624</span>	func (r *reader) cleanupTypes() {
<a id="L625"></a><span class="ln">   625</span>		for _, t := range r.types {
<a id="L626"></a><span class="ln">   626</span>			visible := r.isVisible(t.name)
<a id="L627"></a><span class="ln">   627</span>			if t.decl == nil &amp;&amp; (predeclaredTypes[t.name] || t.isEmbedded &amp;&amp; visible) {
<a id="L628"></a><span class="ln">   628</span>				<span class="comment">// t.name is a predeclared type (and was not redeclared in this package),</span>
<a id="L629"></a><span class="ln">   629</span>				<span class="comment">// or it was embedded somewhere but its declaration is missing (because</span>
<a id="L630"></a><span class="ln">   630</span>				<span class="comment">// the AST is incomplete): move any associated values, funcs, and methods</span>
<a id="L631"></a><span class="ln">   631</span>				<span class="comment">// back to the top-level so that they are not lost.</span>
<a id="L632"></a><span class="ln">   632</span>				<span class="comment">// 1) move values</span>
<a id="L633"></a><span class="ln">   633</span>				r.values = append(r.values, t.values...)
<a id="L634"></a><span class="ln">   634</span>				<span class="comment">// 2) move factory functions</span>
<a id="L635"></a><span class="ln">   635</span>				for name, f := range t.funcs {
<a id="L636"></a><span class="ln">   636</span>					<span class="comment">// in a correct AST, package-level function names</span>
<a id="L637"></a><span class="ln">   637</span>					<span class="comment">// are all different - no need to check for conflicts</span>
<a id="L638"></a><span class="ln">   638</span>					r.funcs[name] = f
<a id="L639"></a><span class="ln">   639</span>				}
<a id="L640"></a><span class="ln">   640</span>				<span class="comment">// 3) move methods</span>
<a id="L641"></a><span class="ln">   641</span>				for name, m := range t.methods {
<a id="L642"></a><span class="ln">   642</span>					<span class="comment">// don&#39;t overwrite functions with the same name - drop them</span>
<a id="L643"></a><span class="ln">   643</span>					if _, found := r.funcs[name]; !found {
<a id="L644"></a><span class="ln">   644</span>						r.funcs[name] = m
<a id="L645"></a><span class="ln">   645</span>					}
<a id="L646"></a><span class="ln">   646</span>				}
<a id="L647"></a><span class="ln">   647</span>			}
<a id="L648"></a><span class="ln">   648</span>			<span class="comment">// remove types w/o declaration or which are not visible</span>
<a id="L649"></a><span class="ln">   649</span>			if t.decl == nil || !visible {
<a id="L650"></a><span class="ln">   650</span>				delete(r.types, t.name)
<a id="L651"></a><span class="ln">   651</span>			}
<a id="L652"></a><span class="ln">   652</span>		}
<a id="L653"></a><span class="ln">   653</span>	}
<a id="L654"></a><span class="ln">   654</span>	
<a id="L655"></a><span class="ln">   655</span>	<span class="comment">// ----------------------------------------------------------------------------</span>
<a id="L656"></a><span class="ln">   656</span>	<span class="comment">// Sorting</span>
<a id="L657"></a><span class="ln">   657</span>	
<a id="L658"></a><span class="ln">   658</span>	type data struct {
<a id="L659"></a><span class="ln">   659</span>		n    int
<a id="L660"></a><span class="ln">   660</span>		swap func(i, j int)
<a id="L661"></a><span class="ln">   661</span>		less func(i, j int) bool
<a id="L662"></a><span class="ln">   662</span>	}
<a id="L663"></a><span class="ln">   663</span>	
<a id="L664"></a><span class="ln">   664</span>	func (d *data) Len() int           { return d.n }
<a id="L665"></a><span class="ln">   665</span>	func (d *data) Swap(i, j int)      { d.swap(i, j) }
<a id="L666"></a><span class="ln">   666</span>	func (d *data) Less(i, j int) bool { return d.less(i, j) }
<a id="L667"></a><span class="ln">   667</span>	
<a id="L668"></a><span class="ln">   668</span>	<span class="comment">// sortBy is a helper function for sorting</span>
<a id="L669"></a><span class="ln">   669</span>	func sortBy(less func(i, j int) bool, swap func(i, j int), n int) {
<a id="L670"></a><span class="ln">   670</span>		sort.Sort(&amp;data{n, swap, less})
<a id="L671"></a><span class="ln">   671</span>	}
<a id="L672"></a><span class="ln">   672</span>	
<a id="L673"></a><span class="ln">   673</span>	func sortedKeys(m map[string]int) []string {
<a id="L674"></a><span class="ln">   674</span>		list := make([]string, len(m))
<a id="L675"></a><span class="ln">   675</span>		i := 0
<a id="L676"></a><span class="ln">   676</span>		for key := range m {
<a id="L677"></a><span class="ln">   677</span>			list[i] = key
<a id="L678"></a><span class="ln">   678</span>			i++
<a id="L679"></a><span class="ln">   679</span>		}
<a id="L680"></a><span class="ln">   680</span>		sort.Strings(list)
<a id="L681"></a><span class="ln">   681</span>		return list
<a id="L682"></a><span class="ln">   682</span>	}
<a id="L683"></a><span class="ln">   683</span>	
<a id="L684"></a><span class="ln">   684</span>	<span class="comment">// sortingName returns the name to use when sorting d into place.</span>
<a id="L685"></a><span class="ln">   685</span>	<span class="comment">//</span>
<a id="L686"></a><span class="ln">   686</span>	func sortingName(d *ast.GenDecl) string {
<a id="L687"></a><span class="ln">   687</span>		if len(d.Specs) == 1 {
<a id="L688"></a><span class="ln">   688</span>			if s, ok := d.Specs[0].(*ast.ValueSpec); ok {
<a id="L689"></a><span class="ln">   689</span>				return s.Names[0].Name
<a id="L690"></a><span class="ln">   690</span>			}
<a id="L691"></a><span class="ln">   691</span>		}
<a id="L692"></a><span class="ln">   692</span>		return &#34;&#34;
<a id="L693"></a><span class="ln">   693</span>	}
<a id="L694"></a><span class="ln">   694</span>	
<a id="L695"></a><span class="ln">   695</span>	func sortedValues(m []*Value, tok token.Token) []*Value {
<a id="L696"></a><span class="ln">   696</span>		list := make([]*Value, len(m)) <span class="comment">// big enough in any case</span>
<a id="L697"></a><span class="ln">   697</span>		i := 0
<a id="L698"></a><span class="ln">   698</span>		for _, val := range m {
<a id="L699"></a><span class="ln">   699</span>			if val.Decl.Tok == tok {
<a id="L700"></a><span class="ln">   700</span>				list[i] = val
<a id="L701"></a><span class="ln">   701</span>				i++
<a id="L702"></a><span class="ln">   702</span>			}
<a id="L703"></a><span class="ln">   703</span>		}
<a id="L704"></a><span class="ln">   704</span>		list = list[0:i]
<a id="L705"></a><span class="ln">   705</span>	
<a id="L706"></a><span class="ln">   706</span>		sortBy(
<a id="L707"></a><span class="ln">   707</span>			func(i, j int) bool {
<a id="L708"></a><span class="ln">   708</span>				if ni, nj := sortingName(list[i].Decl), sortingName(list[j].Decl); ni != nj {
<a id="L709"></a><span class="ln">   709</span>					return ni &lt; nj
<a id="L710"></a><span class="ln">   710</span>				}
<a id="L711"></a><span class="ln">   711</span>				return list[i].order &lt; list[j].order
<a id="L712"></a><span class="ln">   712</span>			},
<a id="L713"></a><span class="ln">   713</span>			func(i, j int) { list[i], list[j] = list[j], list[i] },
<a id="L714"></a><span class="ln">   714</span>			len(list),
<a id="L715"></a><span class="ln">   715</span>		)
<a id="L716"></a><span class="ln">   716</span>	
<a id="L717"></a><span class="ln">   717</span>		return list
<a id="L718"></a><span class="ln">   718</span>	}
<a id="L719"></a><span class="ln">   719</span>	
<a id="L720"></a><span class="ln">   720</span>	func sortedTypes(m map[string]*namedType, allMethods bool) []*Type {
<a id="L721"></a><span class="ln">   721</span>		list := make([]*Type, len(m))
<a id="L722"></a><span class="ln">   722</span>		i := 0
<a id="L723"></a><span class="ln">   723</span>		for _, t := range m {
<a id="L724"></a><span class="ln">   724</span>			list[i] = &amp;Type{
<a id="L725"></a><span class="ln">   725</span>				Doc:     t.doc,
<a id="L726"></a><span class="ln">   726</span>				Name:    t.name,
<a id="L727"></a><span class="ln">   727</span>				Decl:    t.decl,
<a id="L728"></a><span class="ln">   728</span>				Consts:  sortedValues(t.values, token.CONST),
<a id="L729"></a><span class="ln">   729</span>				Vars:    sortedValues(t.values, token.VAR),
<a id="L730"></a><span class="ln">   730</span>				Funcs:   sortedFuncs(t.funcs, true),
<a id="L731"></a><span class="ln">   731</span>				Methods: sortedFuncs(t.methods, allMethods),
<a id="L732"></a><span class="ln">   732</span>			}
<a id="L733"></a><span class="ln">   733</span>			i++
<a id="L734"></a><span class="ln">   734</span>		}
<a id="L735"></a><span class="ln">   735</span>	
<a id="L736"></a><span class="ln">   736</span>		sortBy(
<a id="L737"></a><span class="ln">   737</span>			func(i, j int) bool { return list[i].Name &lt; list[j].Name },
<a id="L738"></a><span class="ln">   738</span>			func(i, j int) { list[i], list[j] = list[j], list[i] },
<a id="L739"></a><span class="ln">   739</span>			len(list),
<a id="L740"></a><span class="ln">   740</span>		)
<a id="L741"></a><span class="ln">   741</span>	
<a id="L742"></a><span class="ln">   742</span>		return list
<a id="L743"></a><span class="ln">   743</span>	}
<a id="L744"></a><span class="ln">   744</span>	
<a id="L745"></a><span class="ln">   745</span>	func removeStar(s string) string {
<a id="L746"></a><span class="ln">   746</span>		if len(s) &gt; 0 &amp;&amp; s[0] == &#39;*&#39; {
<a id="L747"></a><span class="ln">   747</span>			return s[1:]
<a id="L748"></a><span class="ln">   748</span>		}
<a id="L749"></a><span class="ln">   749</span>		return s
<a id="L750"></a><span class="ln">   750</span>	}
<a id="L751"></a><span class="ln">   751</span>	
<a id="L752"></a><span class="ln">   752</span>	func sortedFuncs(m methodSet, allMethods bool) []*Func {
<a id="L753"></a><span class="ln">   753</span>		list := make([]*Func, len(m))
<a id="L754"></a><span class="ln">   754</span>		i := 0
<a id="L755"></a><span class="ln">   755</span>		for _, m := range m {
<a id="L756"></a><span class="ln">   756</span>			<span class="comment">// determine which methods to include</span>
<a id="L757"></a><span class="ln">   757</span>			switch {
<a id="L758"></a><span class="ln">   758</span>			case m.Decl == nil:
<a id="L759"></a><span class="ln">   759</span>				<span class="comment">// exclude conflict entry</span>
<a id="L760"></a><span class="ln">   760</span>			case allMethods, m.Level == 0, !ast.IsExported(removeStar(m.Orig)):
<a id="L761"></a><span class="ln">   761</span>				<span class="comment">// forced inclusion, method not embedded, or method</span>
<a id="L762"></a><span class="ln">   762</span>				<span class="comment">// embedded but original receiver type not exported</span>
<a id="L763"></a><span class="ln">   763</span>				list[i] = m
<a id="L764"></a><span class="ln">   764</span>				i++
<a id="L765"></a><span class="ln">   765</span>			}
<a id="L766"></a><span class="ln">   766</span>		}
<a id="L767"></a><span class="ln">   767</span>		list = list[0:i]
<a id="L768"></a><span class="ln">   768</span>		sortBy(
<a id="L769"></a><span class="ln">   769</span>			func(i, j int) bool { return list[i].Name &lt; list[j].Name },
<a id="L770"></a><span class="ln">   770</span>			func(i, j int) { list[i], list[j] = list[j], list[i] },
<a id="L771"></a><span class="ln">   771</span>			len(list),
<a id="L772"></a><span class="ln">   772</span>		)
<a id="L773"></a><span class="ln">   773</span>		return list
<a id="L774"></a><span class="ln">   774</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

