<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/go/doc/comment.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/go/doc/comment.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Godoc comment extraction and comment -&gt; HTML formatting.</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package doc
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;io&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;regexp&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;strings&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;text/template&#34; <span class="comment">// for HTMLEscape</span>
<a id="L14"></a><span class="ln">    14</span>		&#34;unicode&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;unicode/utf8&#34;
<a id="L16"></a><span class="ln">    16</span>	)
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	var (
<a id="L19"></a><span class="ln">    19</span>		ldquo = []byte(&#34;&amp;ldquo;&#34;)
<a id="L20"></a><span class="ln">    20</span>		rdquo = []byte(&#34;&amp;rdquo;&#34;)
<a id="L21"></a><span class="ln">    21</span>	)
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// Escape comment text for HTML. If nice is set,</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// also turn `` into &amp;ldquo; and &#39;&#39; into &amp;rdquo;.</span>
<a id="L25"></a><span class="ln">    25</span>	func commentEscape(w io.Writer, text string, nice bool) {
<a id="L26"></a><span class="ln">    26</span>		last := 0
<a id="L27"></a><span class="ln">    27</span>		if nice {
<a id="L28"></a><span class="ln">    28</span>			for i := 0; i &lt; len(text)-1; i++ {
<a id="L29"></a><span class="ln">    29</span>				ch := text[i]
<a id="L30"></a><span class="ln">    30</span>				if ch == text[i+1] &amp;&amp; (ch == &#39;`&#39; || ch == &#39;\&#39;&#39;) {
<a id="L31"></a><span class="ln">    31</span>					template.HTMLEscape(w, []byte(text[last:i]))
<a id="L32"></a><span class="ln">    32</span>					last = i + 2
<a id="L33"></a><span class="ln">    33</span>					switch ch {
<a id="L34"></a><span class="ln">    34</span>					case &#39;`&#39;:
<a id="L35"></a><span class="ln">    35</span>						w.Write(ldquo)
<a id="L36"></a><span class="ln">    36</span>					case &#39;\&#39;&#39;:
<a id="L37"></a><span class="ln">    37</span>						w.Write(rdquo)
<a id="L38"></a><span class="ln">    38</span>					}
<a id="L39"></a><span class="ln">    39</span>					i++ <span class="comment">// loop will add one more</span>
<a id="L40"></a><span class="ln">    40</span>				}
<a id="L41"></a><span class="ln">    41</span>			}
<a id="L42"></a><span class="ln">    42</span>		}
<a id="L43"></a><span class="ln">    43</span>		template.HTMLEscape(w, []byte(text[last:]))
<a id="L44"></a><span class="ln">    44</span>	}
<a id="L45"></a><span class="ln">    45</span>	
<a id="L46"></a><span class="ln">    46</span>	const (
<a id="L47"></a><span class="ln">    47</span>		<span class="comment">// Regexp for Go identifiers</span>
<a id="L48"></a><span class="ln">    48</span>		identRx = `[a-zA-Z_][a-zA-Z_0-9]*` <span class="comment">// TODO(gri) ASCII only for now - fix this</span>
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>		<span class="comment">// Regexp for URLs</span>
<a id="L51"></a><span class="ln">    51</span>		protocol = `(https?|ftp|file|gopher|mailto|news|nntp|telnet|wais|prospero):`
<a id="L52"></a><span class="ln">    52</span>		hostPart = `[a-zA-Z0-9_@\-]+`
<a id="L53"></a><span class="ln">    53</span>		filePart = `[a-zA-Z0-9_?%#~&amp;/\-+=]+`
<a id="L54"></a><span class="ln">    54</span>		urlRx    = protocol + `//` + <span class="comment">// http://</span>
<a id="L55"></a><span class="ln">    55</span>			hostPart + `([.:]` + hostPart + `)*/?` + <span class="comment">// //www.google.com:8080/</span>
<a id="L56"></a><span class="ln">    56</span>			filePart + `([:.,]` + filePart + `)*`
<a id="L57"></a><span class="ln">    57</span>	)
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>	var matchRx = regexp.MustCompile(`(` + urlRx + `)|(` + identRx + `)`)
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>	var (
<a id="L62"></a><span class="ln">    62</span>		html_a      = []byte(`&lt;a href=&#34;`)
<a id="L63"></a><span class="ln">    63</span>		html_aq     = []byte(`&#34;&gt;`)
<a id="L64"></a><span class="ln">    64</span>		html_enda   = []byte(&#34;&lt;/a&gt;&#34;)
<a id="L65"></a><span class="ln">    65</span>		html_i      = []byte(&#34;&lt;i&gt;&#34;)
<a id="L66"></a><span class="ln">    66</span>		html_endi   = []byte(&#34;&lt;/i&gt;&#34;)
<a id="L67"></a><span class="ln">    67</span>		html_p      = []byte(&#34;&lt;p&gt;\n&#34;)
<a id="L68"></a><span class="ln">    68</span>		html_endp   = []byte(&#34;&lt;/p&gt;\n&#34;)
<a id="L69"></a><span class="ln">    69</span>		html_pre    = []byte(&#34;&lt;pre&gt;&#34;)
<a id="L70"></a><span class="ln">    70</span>		html_endpre = []byte(&#34;&lt;/pre&gt;\n&#34;)
<a id="L71"></a><span class="ln">    71</span>		html_h      = []byte(`&lt;h3 id=&#34;`)
<a id="L72"></a><span class="ln">    72</span>		html_hq     = []byte(`&#34;&gt;`)
<a id="L73"></a><span class="ln">    73</span>		html_endh   = []byte(&#34;&lt;/h3&gt;\n&#34;)
<a id="L74"></a><span class="ln">    74</span>	)
<a id="L75"></a><span class="ln">    75</span>	
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">// Emphasize and escape a line of text for HTML. URLs are converted into links;</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// if the URL also appears in the words map, the link is taken from the map (if</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// the corresponding map value is the empty string, the URL is not converted</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// into a link). Go identifiers that appear in the words map are italicized; if</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// the corresponding map value is not the empty string, it is considered a URL</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// and the word is converted into a link. If nice is set, the remaining text&#39;s</span>
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">// appearance is improved where it makes sense (e.g., `` is turned into &amp;ldquo;</span>
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">// and &#39;&#39; into &amp;rdquo;).</span>
<a id="L84"></a><span class="ln">    84</span>	func emphasize(w io.Writer, line string, words map[string]string, nice bool) {
<a id="L85"></a><span class="ln">    85</span>		for {
<a id="L86"></a><span class="ln">    86</span>			m := matchRx.FindStringSubmatchIndex(line)
<a id="L87"></a><span class="ln">    87</span>			if m == nil {
<a id="L88"></a><span class="ln">    88</span>				break
<a id="L89"></a><span class="ln">    89</span>			}
<a id="L90"></a><span class="ln">    90</span>			<span class="comment">// m &gt;= 6 (two parenthesized sub-regexps in matchRx, 1st one is urlRx)</span>
<a id="L91"></a><span class="ln">    91</span>	
<a id="L92"></a><span class="ln">    92</span>			<span class="comment">// write text before match</span>
<a id="L93"></a><span class="ln">    93</span>			commentEscape(w, line[0:m[0]], nice)
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>			<span class="comment">// analyze match</span>
<a id="L96"></a><span class="ln">    96</span>			match := line[m[0]:m[1]]
<a id="L97"></a><span class="ln">    97</span>			url := &#34;&#34;
<a id="L98"></a><span class="ln">    98</span>			italics := false
<a id="L99"></a><span class="ln">    99</span>			if words != nil {
<a id="L100"></a><span class="ln">   100</span>				url, italics = words[string(match)]
<a id="L101"></a><span class="ln">   101</span>			}
<a id="L102"></a><span class="ln">   102</span>			if m[2] &gt;= 0 {
<a id="L103"></a><span class="ln">   103</span>				<span class="comment">// match against first parenthesized sub-regexp; must be match against urlRx</span>
<a id="L104"></a><span class="ln">   104</span>				if !italics {
<a id="L105"></a><span class="ln">   105</span>					<span class="comment">// no alternative URL in words list, use match instead</span>
<a id="L106"></a><span class="ln">   106</span>					url = string(match)
<a id="L107"></a><span class="ln">   107</span>				}
<a id="L108"></a><span class="ln">   108</span>				italics = false <span class="comment">// don&#39;t italicize URLs</span>
<a id="L109"></a><span class="ln">   109</span>			}
<a id="L110"></a><span class="ln">   110</span>	
<a id="L111"></a><span class="ln">   111</span>			<span class="comment">// write match</span>
<a id="L112"></a><span class="ln">   112</span>			if len(url) &gt; 0 {
<a id="L113"></a><span class="ln">   113</span>				w.Write(html_a)
<a id="L114"></a><span class="ln">   114</span>				template.HTMLEscape(w, []byte(url))
<a id="L115"></a><span class="ln">   115</span>				w.Write(html_aq)
<a id="L116"></a><span class="ln">   116</span>			}
<a id="L117"></a><span class="ln">   117</span>			if italics {
<a id="L118"></a><span class="ln">   118</span>				w.Write(html_i)
<a id="L119"></a><span class="ln">   119</span>			}
<a id="L120"></a><span class="ln">   120</span>			commentEscape(w, match, nice)
<a id="L121"></a><span class="ln">   121</span>			if italics {
<a id="L122"></a><span class="ln">   122</span>				w.Write(html_endi)
<a id="L123"></a><span class="ln">   123</span>			}
<a id="L124"></a><span class="ln">   124</span>			if len(url) &gt; 0 {
<a id="L125"></a><span class="ln">   125</span>				w.Write(html_enda)
<a id="L126"></a><span class="ln">   126</span>			}
<a id="L127"></a><span class="ln">   127</span>	
<a id="L128"></a><span class="ln">   128</span>			<span class="comment">// advance</span>
<a id="L129"></a><span class="ln">   129</span>			line = line[m[1]:]
<a id="L130"></a><span class="ln">   130</span>		}
<a id="L131"></a><span class="ln">   131</span>		commentEscape(w, line, nice)
<a id="L132"></a><span class="ln">   132</span>	}
<a id="L133"></a><span class="ln">   133</span>	
<a id="L134"></a><span class="ln">   134</span>	func indentLen(s string) int {
<a id="L135"></a><span class="ln">   135</span>		i := 0
<a id="L136"></a><span class="ln">   136</span>		for i &lt; len(s) &amp;&amp; (s[i] == &#39; &#39; || s[i] == &#39;\t&#39;) {
<a id="L137"></a><span class="ln">   137</span>			i++
<a id="L138"></a><span class="ln">   138</span>		}
<a id="L139"></a><span class="ln">   139</span>		return i
<a id="L140"></a><span class="ln">   140</span>	}
<a id="L141"></a><span class="ln">   141</span>	
<a id="L142"></a><span class="ln">   142</span>	func isBlank(s string) bool {
<a id="L143"></a><span class="ln">   143</span>		return len(s) == 0 || (len(s) == 1 &amp;&amp; s[0] == &#39;\n&#39;)
<a id="L144"></a><span class="ln">   144</span>	}
<a id="L145"></a><span class="ln">   145</span>	
<a id="L146"></a><span class="ln">   146</span>	func commonPrefix(a, b string) string {
<a id="L147"></a><span class="ln">   147</span>		i := 0
<a id="L148"></a><span class="ln">   148</span>		for i &lt; len(a) &amp;&amp; i &lt; len(b) &amp;&amp; a[i] == b[i] {
<a id="L149"></a><span class="ln">   149</span>			i++
<a id="L150"></a><span class="ln">   150</span>		}
<a id="L151"></a><span class="ln">   151</span>		return a[0:i]
<a id="L152"></a><span class="ln">   152</span>	}
<a id="L153"></a><span class="ln">   153</span>	
<a id="L154"></a><span class="ln">   154</span>	func unindent(block []string) {
<a id="L155"></a><span class="ln">   155</span>		if len(block) == 0 {
<a id="L156"></a><span class="ln">   156</span>			return
<a id="L157"></a><span class="ln">   157</span>		}
<a id="L158"></a><span class="ln">   158</span>	
<a id="L159"></a><span class="ln">   159</span>		<span class="comment">// compute maximum common white prefix</span>
<a id="L160"></a><span class="ln">   160</span>		prefix := block[0][0:indentLen(block[0])]
<a id="L161"></a><span class="ln">   161</span>		for _, line := range block {
<a id="L162"></a><span class="ln">   162</span>			if !isBlank(line) {
<a id="L163"></a><span class="ln">   163</span>				prefix = commonPrefix(prefix, line[0:indentLen(line)])
<a id="L164"></a><span class="ln">   164</span>			}
<a id="L165"></a><span class="ln">   165</span>		}
<a id="L166"></a><span class="ln">   166</span>		n := len(prefix)
<a id="L167"></a><span class="ln">   167</span>	
<a id="L168"></a><span class="ln">   168</span>		<span class="comment">// remove</span>
<a id="L169"></a><span class="ln">   169</span>		for i, line := range block {
<a id="L170"></a><span class="ln">   170</span>			if !isBlank(line) {
<a id="L171"></a><span class="ln">   171</span>				block[i] = line[n:]
<a id="L172"></a><span class="ln">   172</span>			}
<a id="L173"></a><span class="ln">   173</span>		}
<a id="L174"></a><span class="ln">   174</span>	}
<a id="L175"></a><span class="ln">   175</span>	
<a id="L176"></a><span class="ln">   176</span>	<span class="comment">// heading returns the trimmed line if it passes as a section heading;</span>
<a id="L177"></a><span class="ln">   177</span>	<span class="comment">// otherwise it returns the empty string. </span>
<a id="L178"></a><span class="ln">   178</span>	func heading(line string) string {
<a id="L179"></a><span class="ln">   179</span>		line = strings.TrimSpace(line)
<a id="L180"></a><span class="ln">   180</span>		if len(line) == 0 {
<a id="L181"></a><span class="ln">   181</span>			return &#34;&#34;
<a id="L182"></a><span class="ln">   182</span>		}
<a id="L183"></a><span class="ln">   183</span>	
<a id="L184"></a><span class="ln">   184</span>		<span class="comment">// a heading must start with an uppercase letter</span>
<a id="L185"></a><span class="ln">   185</span>		r, _ := utf8.DecodeRuneInString(line)
<a id="L186"></a><span class="ln">   186</span>		if !unicode.IsLetter(r) || !unicode.IsUpper(r) {
<a id="L187"></a><span class="ln">   187</span>			return &#34;&#34;
<a id="L188"></a><span class="ln">   188</span>		}
<a id="L189"></a><span class="ln">   189</span>	
<a id="L190"></a><span class="ln">   190</span>		<span class="comment">// it must end in a letter or digit:</span>
<a id="L191"></a><span class="ln">   191</span>		r, _ = utf8.DecodeLastRuneInString(line)
<a id="L192"></a><span class="ln">   192</span>		if !unicode.IsLetter(r) &amp;&amp; !unicode.IsDigit(r) {
<a id="L193"></a><span class="ln">   193</span>			return &#34;&#34;
<a id="L194"></a><span class="ln">   194</span>		}
<a id="L195"></a><span class="ln">   195</span>	
<a id="L196"></a><span class="ln">   196</span>		<span class="comment">// exclude lines with illegal characters</span>
<a id="L197"></a><span class="ln">   197</span>		if strings.IndexAny(line, &#34;,.;:!?+*/=()[]{}_^°&amp;§~%#@&lt;\&#34;&gt;\\&#34;) &gt;= 0 {
<a id="L198"></a><span class="ln">   198</span>			return &#34;&#34;
<a id="L199"></a><span class="ln">   199</span>		}
<a id="L200"></a><span class="ln">   200</span>	
<a id="L201"></a><span class="ln">   201</span>		<span class="comment">// allow &#34;&#39;&#34; for possessive &#34;&#39;s&#34; only</span>
<a id="L202"></a><span class="ln">   202</span>		for b := line; ; {
<a id="L203"></a><span class="ln">   203</span>			i := strings.IndexRune(b, &#39;\&#39;&#39;)
<a id="L204"></a><span class="ln">   204</span>			if i &lt; 0 {
<a id="L205"></a><span class="ln">   205</span>				break
<a id="L206"></a><span class="ln">   206</span>			}
<a id="L207"></a><span class="ln">   207</span>			if i+1 &gt;= len(b) || b[i+1] != &#39;s&#39; || (i+2 &lt; len(b) &amp;&amp; b[i+2] != &#39; &#39;) {
<a id="L208"></a><span class="ln">   208</span>				return &#34;&#34; <span class="comment">// not followed by &#34;s &#34;</span>
<a id="L209"></a><span class="ln">   209</span>			}
<a id="L210"></a><span class="ln">   210</span>			b = b[i+2:]
<a id="L211"></a><span class="ln">   211</span>		}
<a id="L212"></a><span class="ln">   212</span>	
<a id="L213"></a><span class="ln">   213</span>		return line
<a id="L214"></a><span class="ln">   214</span>	}
<a id="L215"></a><span class="ln">   215</span>	
<a id="L216"></a><span class="ln">   216</span>	type op int
<a id="L217"></a><span class="ln">   217</span>	
<a id="L218"></a><span class="ln">   218</span>	const (
<a id="L219"></a><span class="ln">   219</span>		opPara op = iota
<a id="L220"></a><span class="ln">   220</span>		opHead
<a id="L221"></a><span class="ln">   221</span>		opPre
<a id="L222"></a><span class="ln">   222</span>	)
<a id="L223"></a><span class="ln">   223</span>	
<a id="L224"></a><span class="ln">   224</span>	type block struct {
<a id="L225"></a><span class="ln">   225</span>		op    op
<a id="L226"></a><span class="ln">   226</span>		lines []string
<a id="L227"></a><span class="ln">   227</span>	}
<a id="L228"></a><span class="ln">   228</span>	
<a id="L229"></a><span class="ln">   229</span>	var nonAlphaNumRx = regexp.MustCompile(`[^a-zA-Z0-9]`)
<a id="L230"></a><span class="ln">   230</span>	
<a id="L231"></a><span class="ln">   231</span>	func anchorID(line string) string {
<a id="L232"></a><span class="ln">   232</span>		return nonAlphaNumRx.ReplaceAllString(line, &#34;_&#34;)
<a id="L233"></a><span class="ln">   233</span>	}
<a id="L234"></a><span class="ln">   234</span>	
<a id="L235"></a><span class="ln">   235</span>	<span class="comment">// ToHTML converts comment text to formatted HTML.</span>
<a id="L236"></a><span class="ln">   236</span>	<span class="comment">// The comment was prepared by DocReader,</span>
<a id="L237"></a><span class="ln">   237</span>	<span class="comment">// so it is known not to have leading, trailing blank lines</span>
<a id="L238"></a><span class="ln">   238</span>	<span class="comment">// nor to have trailing spaces at the end of lines.</span>
<a id="L239"></a><span class="ln">   239</span>	<span class="comment">// The comment markers have already been removed.</span>
<a id="L240"></a><span class="ln">   240</span>	<span class="comment">//</span>
<a id="L241"></a><span class="ln">   241</span>	<span class="comment">// Turn each run of multiple \n into &lt;/p&gt;&lt;p&gt;.</span>
<a id="L242"></a><span class="ln">   242</span>	<span class="comment">// Turn each run of indented lines into a &lt;pre&gt; block without indent.</span>
<a id="L243"></a><span class="ln">   243</span>	<span class="comment">// Enclose headings with header tags.</span>
<a id="L244"></a><span class="ln">   244</span>	<span class="comment">//</span>
<a id="L245"></a><span class="ln">   245</span>	<span class="comment">// URLs in the comment text are converted into links; if the URL also appears</span>
<a id="L246"></a><span class="ln">   246</span>	<span class="comment">// in the words map, the link is taken from the map (if the corresponding map</span>
<a id="L247"></a><span class="ln">   247</span>	<span class="comment">// value is the empty string, the URL is not converted into a link).</span>
<a id="L248"></a><span class="ln">   248</span>	<span class="comment">//</span>
<a id="L249"></a><span class="ln">   249</span>	<span class="comment">// Go identifiers that appear in the words map are italicized; if the corresponding</span>
<a id="L250"></a><span class="ln">   250</span>	<span class="comment">// map value is not the empty string, it is considered a URL and the word is converted</span>
<a id="L251"></a><span class="ln">   251</span>	<span class="comment">// into a link.</span>
<a id="L252"></a><span class="ln">   252</span>	func ToHTML(w io.Writer, text string, words map[string]string) {
<a id="L253"></a><span class="ln">   253</span>		for _, b := range blocks(text) {
<a id="L254"></a><span class="ln">   254</span>			switch b.op {
<a id="L255"></a><span class="ln">   255</span>			case opPara:
<a id="L256"></a><span class="ln">   256</span>				w.Write(html_p)
<a id="L257"></a><span class="ln">   257</span>				for _, line := range b.lines {
<a id="L258"></a><span class="ln">   258</span>					emphasize(w, line, words, true)
<a id="L259"></a><span class="ln">   259</span>				}
<a id="L260"></a><span class="ln">   260</span>				w.Write(html_endp)
<a id="L261"></a><span class="ln">   261</span>			case opHead:
<a id="L262"></a><span class="ln">   262</span>				w.Write(html_h)
<a id="L263"></a><span class="ln">   263</span>				id := &#34;&#34;
<a id="L264"></a><span class="ln">   264</span>				for _, line := range b.lines {
<a id="L265"></a><span class="ln">   265</span>					if id == &#34;&#34; {
<a id="L266"></a><span class="ln">   266</span>						id = anchorID(line)
<a id="L267"></a><span class="ln">   267</span>						w.Write([]byte(id))
<a id="L268"></a><span class="ln">   268</span>						w.Write(html_hq)
<a id="L269"></a><span class="ln">   269</span>					}
<a id="L270"></a><span class="ln">   270</span>					commentEscape(w, line, true)
<a id="L271"></a><span class="ln">   271</span>				}
<a id="L272"></a><span class="ln">   272</span>				if id == &#34;&#34; {
<a id="L273"></a><span class="ln">   273</span>					w.Write(html_hq)
<a id="L274"></a><span class="ln">   274</span>				}
<a id="L275"></a><span class="ln">   275</span>				w.Write(html_endh)
<a id="L276"></a><span class="ln">   276</span>			case opPre:
<a id="L277"></a><span class="ln">   277</span>				w.Write(html_pre)
<a id="L278"></a><span class="ln">   278</span>				for _, line := range b.lines {
<a id="L279"></a><span class="ln">   279</span>					emphasize(w, line, nil, false)
<a id="L280"></a><span class="ln">   280</span>				}
<a id="L281"></a><span class="ln">   281</span>				w.Write(html_endpre)
<a id="L282"></a><span class="ln">   282</span>			}
<a id="L283"></a><span class="ln">   283</span>		}
<a id="L284"></a><span class="ln">   284</span>	}
<a id="L285"></a><span class="ln">   285</span>	
<a id="L286"></a><span class="ln">   286</span>	func blocks(text string) []block {
<a id="L287"></a><span class="ln">   287</span>		var (
<a id="L288"></a><span class="ln">   288</span>			out  []block
<a id="L289"></a><span class="ln">   289</span>			para []string
<a id="L290"></a><span class="ln">   290</span>	
<a id="L291"></a><span class="ln">   291</span>			lastWasBlank   = false
<a id="L292"></a><span class="ln">   292</span>			lastWasHeading = false
<a id="L293"></a><span class="ln">   293</span>		)
<a id="L294"></a><span class="ln">   294</span>	
<a id="L295"></a><span class="ln">   295</span>		close := func() {
<a id="L296"></a><span class="ln">   296</span>			if para != nil {
<a id="L297"></a><span class="ln">   297</span>				out = append(out, block{opPara, para})
<a id="L298"></a><span class="ln">   298</span>				para = nil
<a id="L299"></a><span class="ln">   299</span>			}
<a id="L300"></a><span class="ln">   300</span>		}
<a id="L301"></a><span class="ln">   301</span>	
<a id="L302"></a><span class="ln">   302</span>		lines := strings.SplitAfter(text, &#34;\n&#34;)
<a id="L303"></a><span class="ln">   303</span>		unindent(lines)
<a id="L304"></a><span class="ln">   304</span>		for i := 0; i &lt; len(lines); {
<a id="L305"></a><span class="ln">   305</span>			line := lines[i]
<a id="L306"></a><span class="ln">   306</span>			if isBlank(line) {
<a id="L307"></a><span class="ln">   307</span>				<span class="comment">// close paragraph</span>
<a id="L308"></a><span class="ln">   308</span>				close()
<a id="L309"></a><span class="ln">   309</span>				i++
<a id="L310"></a><span class="ln">   310</span>				lastWasBlank = true
<a id="L311"></a><span class="ln">   311</span>				continue
<a id="L312"></a><span class="ln">   312</span>			}
<a id="L313"></a><span class="ln">   313</span>			if indentLen(line) &gt; 0 {
<a id="L314"></a><span class="ln">   314</span>				<span class="comment">// close paragraph</span>
<a id="L315"></a><span class="ln">   315</span>				close()
<a id="L316"></a><span class="ln">   316</span>	
<a id="L317"></a><span class="ln">   317</span>				<span class="comment">// count indented or blank lines</span>
<a id="L318"></a><span class="ln">   318</span>				j := i + 1
<a id="L319"></a><span class="ln">   319</span>				for j &lt; len(lines) &amp;&amp; (isBlank(lines[j]) || indentLen(lines[j]) &gt; 0) {
<a id="L320"></a><span class="ln">   320</span>					j++
<a id="L321"></a><span class="ln">   321</span>				}
<a id="L322"></a><span class="ln">   322</span>				<span class="comment">// but not trailing blank lines</span>
<a id="L323"></a><span class="ln">   323</span>				for j &gt; i &amp;&amp; isBlank(lines[j-1]) {
<a id="L324"></a><span class="ln">   324</span>					j--
<a id="L325"></a><span class="ln">   325</span>				}
<a id="L326"></a><span class="ln">   326</span>				pre := lines[i:j]
<a id="L327"></a><span class="ln">   327</span>				i = j
<a id="L328"></a><span class="ln">   328</span>	
<a id="L329"></a><span class="ln">   329</span>				unindent(pre)
<a id="L330"></a><span class="ln">   330</span>	
<a id="L331"></a><span class="ln">   331</span>				<span class="comment">// put those lines in a pre block</span>
<a id="L332"></a><span class="ln">   332</span>				out = append(out, block{opPre, pre})
<a id="L333"></a><span class="ln">   333</span>				lastWasHeading = false
<a id="L334"></a><span class="ln">   334</span>				continue
<a id="L335"></a><span class="ln">   335</span>			}
<a id="L336"></a><span class="ln">   336</span>	
<a id="L337"></a><span class="ln">   337</span>			if lastWasBlank &amp;&amp; !lastWasHeading &amp;&amp; i+2 &lt; len(lines) &amp;&amp;
<a id="L338"></a><span class="ln">   338</span>				isBlank(lines[i+1]) &amp;&amp; !isBlank(lines[i+2]) &amp;&amp; indentLen(lines[i+2]) == 0 {
<a id="L339"></a><span class="ln">   339</span>				<span class="comment">// current line is non-blank, surrounded by blank lines</span>
<a id="L340"></a><span class="ln">   340</span>				<span class="comment">// and the next non-blank line is not indented: this</span>
<a id="L341"></a><span class="ln">   341</span>				<span class="comment">// might be a heading.</span>
<a id="L342"></a><span class="ln">   342</span>				if head := heading(line); head != &#34;&#34; {
<a id="L343"></a><span class="ln">   343</span>					close()
<a id="L344"></a><span class="ln">   344</span>					out = append(out, block{opHead, []string{head}})
<a id="L345"></a><span class="ln">   345</span>					i += 2
<a id="L346"></a><span class="ln">   346</span>					lastWasHeading = true
<a id="L347"></a><span class="ln">   347</span>					continue
<a id="L348"></a><span class="ln">   348</span>				}
<a id="L349"></a><span class="ln">   349</span>			}
<a id="L350"></a><span class="ln">   350</span>	
<a id="L351"></a><span class="ln">   351</span>			<span class="comment">// open paragraph</span>
<a id="L352"></a><span class="ln">   352</span>			lastWasBlank = false
<a id="L353"></a><span class="ln">   353</span>			lastWasHeading = false
<a id="L354"></a><span class="ln">   354</span>			para = append(para, lines[i])
<a id="L355"></a><span class="ln">   355</span>			i++
<a id="L356"></a><span class="ln">   356</span>		}
<a id="L357"></a><span class="ln">   357</span>		close()
<a id="L358"></a><span class="ln">   358</span>	
<a id="L359"></a><span class="ln">   359</span>		return out
<a id="L360"></a><span class="ln">   360</span>	}
<a id="L361"></a><span class="ln">   361</span>	
<a id="L362"></a><span class="ln">   362</span>	<span class="comment">// ToText prepares comment text for presentation in textual output.</span>
<a id="L363"></a><span class="ln">   363</span>	<span class="comment">// It wraps paragraphs of text to width or fewer Unicode code points</span>
<a id="L364"></a><span class="ln">   364</span>	<span class="comment">// and then prefixes each line with the indent.  In preformatted sections</span>
<a id="L365"></a><span class="ln">   365</span>	<span class="comment">// (such as program text), it prefixes each non-blank line with preIndent.</span>
<a id="L366"></a><span class="ln">   366</span>	func ToText(w io.Writer, text string, indent, preIndent string, width int) {
<a id="L367"></a><span class="ln">   367</span>		l := lineWrapper{
<a id="L368"></a><span class="ln">   368</span>			out:    w,
<a id="L369"></a><span class="ln">   369</span>			width:  width,
<a id="L370"></a><span class="ln">   370</span>			indent: indent,
<a id="L371"></a><span class="ln">   371</span>		}
<a id="L372"></a><span class="ln">   372</span>		for _, b := range blocks(text) {
<a id="L373"></a><span class="ln">   373</span>			switch b.op {
<a id="L374"></a><span class="ln">   374</span>			case opPara:
<a id="L375"></a><span class="ln">   375</span>				<span class="comment">// l.write will add leading newline if required</span>
<a id="L376"></a><span class="ln">   376</span>				for _, line := range b.lines {
<a id="L377"></a><span class="ln">   377</span>					l.write(line)
<a id="L378"></a><span class="ln">   378</span>				}
<a id="L379"></a><span class="ln">   379</span>				l.flush()
<a id="L380"></a><span class="ln">   380</span>			case opHead:
<a id="L381"></a><span class="ln">   381</span>				w.Write(nl)
<a id="L382"></a><span class="ln">   382</span>				for _, line := range b.lines {
<a id="L383"></a><span class="ln">   383</span>					l.write(line + &#34;\n&#34;)
<a id="L384"></a><span class="ln">   384</span>				}
<a id="L385"></a><span class="ln">   385</span>				l.flush()
<a id="L386"></a><span class="ln">   386</span>			case opPre:
<a id="L387"></a><span class="ln">   387</span>				w.Write(nl)
<a id="L388"></a><span class="ln">   388</span>				for _, line := range b.lines {
<a id="L389"></a><span class="ln">   389</span>					if !isBlank(line) {
<a id="L390"></a><span class="ln">   390</span>						w.Write([]byte(preIndent))
<a id="L391"></a><span class="ln">   391</span>						w.Write([]byte(line))
<a id="L392"></a><span class="ln">   392</span>					}
<a id="L393"></a><span class="ln">   393</span>				}
<a id="L394"></a><span class="ln">   394</span>			}
<a id="L395"></a><span class="ln">   395</span>		}
<a id="L396"></a><span class="ln">   396</span>	}
<a id="L397"></a><span class="ln">   397</span>	
<a id="L398"></a><span class="ln">   398</span>	type lineWrapper struct {
<a id="L399"></a><span class="ln">   399</span>		out       io.Writer
<a id="L400"></a><span class="ln">   400</span>		printed   bool
<a id="L401"></a><span class="ln">   401</span>		width     int
<a id="L402"></a><span class="ln">   402</span>		indent    string
<a id="L403"></a><span class="ln">   403</span>		n         int
<a id="L404"></a><span class="ln">   404</span>		pendSpace int
<a id="L405"></a><span class="ln">   405</span>	}
<a id="L406"></a><span class="ln">   406</span>	
<a id="L407"></a><span class="ln">   407</span>	var nl = []byte(&#34;\n&#34;)
<a id="L408"></a><span class="ln">   408</span>	var space = []byte(&#34; &#34;)
<a id="L409"></a><span class="ln">   409</span>	
<a id="L410"></a><span class="ln">   410</span>	func (l *lineWrapper) write(text string) {
<a id="L411"></a><span class="ln">   411</span>		if l.n == 0 &amp;&amp; l.printed {
<a id="L412"></a><span class="ln">   412</span>			l.out.Write(nl) <span class="comment">// blank line before new paragraph</span>
<a id="L413"></a><span class="ln">   413</span>		}
<a id="L414"></a><span class="ln">   414</span>		l.printed = true
<a id="L415"></a><span class="ln">   415</span>	
<a id="L416"></a><span class="ln">   416</span>		for _, f := range strings.Fields(text) {
<a id="L417"></a><span class="ln">   417</span>			w := utf8.RuneCountInString(f)
<a id="L418"></a><span class="ln">   418</span>			<span class="comment">// wrap if line is too long</span>
<a id="L419"></a><span class="ln">   419</span>			if l.n &gt; 0 &amp;&amp; l.n+l.pendSpace+w &gt; l.width {
<a id="L420"></a><span class="ln">   420</span>				l.out.Write(nl)
<a id="L421"></a><span class="ln">   421</span>				l.n = 0
<a id="L422"></a><span class="ln">   422</span>				l.pendSpace = 0
<a id="L423"></a><span class="ln">   423</span>			}
<a id="L424"></a><span class="ln">   424</span>			if l.n == 0 {
<a id="L425"></a><span class="ln">   425</span>				l.out.Write([]byte(l.indent))
<a id="L426"></a><span class="ln">   426</span>			}
<a id="L427"></a><span class="ln">   427</span>			l.out.Write(space[:l.pendSpace])
<a id="L428"></a><span class="ln">   428</span>			l.out.Write([]byte(f))
<a id="L429"></a><span class="ln">   429</span>			l.n += l.pendSpace + w
<a id="L430"></a><span class="ln">   430</span>			l.pendSpace = 1
<a id="L431"></a><span class="ln">   431</span>		}
<a id="L432"></a><span class="ln">   432</span>	}
<a id="L433"></a><span class="ln">   433</span>	
<a id="L434"></a><span class="ln">   434</span>	func (l *lineWrapper) flush() {
<a id="L435"></a><span class="ln">   435</span>		if l.n == 0 {
<a id="L436"></a><span class="ln">   436</span>			return
<a id="L437"></a><span class="ln">   437</span>		}
<a id="L438"></a><span class="ln">   438</span>		l.out.Write(nl)
<a id="L439"></a><span class="ln">   439</span>		l.pendSpace = 0
<a id="L440"></a><span class="ln">   440</span>		l.n = 0
<a id="L441"></a><span class="ln">   441</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

