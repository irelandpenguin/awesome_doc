<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/fmt/print.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/fmt/print.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package fmt
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;errors&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;io&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;os&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;reflect&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;sync&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;unicode/utf8&#34;
<a id="L14"></a><span class="ln">    14</span>	)
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// Some constants in the form of bytes, to avoid string overhead.</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// Needlessly fastidious, I suppose.</span>
<a id="L18"></a><span class="ln">    18</span>	var (
<a id="L19"></a><span class="ln">    19</span>		commaSpaceBytes = []byte(&#34;, &#34;)
<a id="L20"></a><span class="ln">    20</span>		nilAngleBytes   = []byte(&#34;&lt;nil&gt;&#34;)
<a id="L21"></a><span class="ln">    21</span>		nilParenBytes   = []byte(&#34;(nil)&#34;)
<a id="L22"></a><span class="ln">    22</span>		nilBytes        = []byte(&#34;nil&#34;)
<a id="L23"></a><span class="ln">    23</span>		mapBytes        = []byte(&#34;map[&#34;)
<a id="L24"></a><span class="ln">    24</span>		missingBytes    = []byte(&#34;(MISSING)&#34;)
<a id="L25"></a><span class="ln">    25</span>		panicBytes      = []byte(&#34;(PANIC=&#34;)
<a id="L26"></a><span class="ln">    26</span>		extraBytes      = []byte(&#34;%!(EXTRA &#34;)
<a id="L27"></a><span class="ln">    27</span>		irparenBytes    = []byte(&#34;i)&#34;)
<a id="L28"></a><span class="ln">    28</span>		bytesBytes      = []byte(&#34;[]byte{&#34;)
<a id="L29"></a><span class="ln">    29</span>		widthBytes      = []byte(&#34;%!(BADWIDTH)&#34;)
<a id="L30"></a><span class="ln">    30</span>		precBytes       = []byte(&#34;%!(BADPREC)&#34;)
<a id="L31"></a><span class="ln">    31</span>		noVerbBytes     = []byte(&#34;%!(NOVERB)&#34;)
<a id="L32"></a><span class="ln">    32</span>	)
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// State represents the printer state passed to custom formatters.</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// It provides access to the io.Writer interface plus information about</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// the flags and options for the operand&#39;s format specifier.</span>
<a id="L37"></a><span class="ln">    37</span>	type State interface {
<a id="L38"></a><span class="ln">    38</span>		<span class="comment">// Write is the function to call to emit formatted output to be printed.</span>
<a id="L39"></a><span class="ln">    39</span>		Write(b []byte) (ret int, err error)
<a id="L40"></a><span class="ln">    40</span>		<span class="comment">// Width returns the value of the width option and whether it has been set.</span>
<a id="L41"></a><span class="ln">    41</span>		Width() (wid int, ok bool)
<a id="L42"></a><span class="ln">    42</span>		<span class="comment">// Precision returns the value of the precision option and whether it has been set.</span>
<a id="L43"></a><span class="ln">    43</span>		Precision() (prec int, ok bool)
<a id="L44"></a><span class="ln">    44</span>	
<a id="L45"></a><span class="ln">    45</span>		<span class="comment">// Flag returns whether the flag c, a character, has been set.</span>
<a id="L46"></a><span class="ln">    46</span>		Flag(c int) bool
<a id="L47"></a><span class="ln">    47</span>	}
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">// Formatter is the interface implemented by values with a custom formatter.</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// The implementation of Format may call Sprintf or Fprintf(f) etc.</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// to generate its output.</span>
<a id="L52"></a><span class="ln">    52</span>	type Formatter interface {
<a id="L53"></a><span class="ln">    53</span>		Format(f State, c rune)
<a id="L54"></a><span class="ln">    54</span>	}
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// Stringer is implemented by any value that has a String method,</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">// which defines the ``native&#39;&#39; format for that value.</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// The String method is used to print values passed as an operand</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// to a %s or %v format or to an unformatted printer such as Print.</span>
<a id="L60"></a><span class="ln">    60</span>	type Stringer interface {
<a id="L61"></a><span class="ln">    61</span>		String() string
<a id="L62"></a><span class="ln">    62</span>	}
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// GoStringer is implemented by any value that has a GoString method,</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// which defines the Go syntax for that value.</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">// The GoString method is used to print values passed as an operand</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// to a %#v format.</span>
<a id="L68"></a><span class="ln">    68</span>	type GoStringer interface {
<a id="L69"></a><span class="ln">    69</span>		GoString() string
<a id="L70"></a><span class="ln">    70</span>	}
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">// Use simple []byte instead of bytes.Buffer to avoid large dependency.</span>
<a id="L73"></a><span class="ln">    73</span>	type buffer []byte
<a id="L74"></a><span class="ln">    74</span>	
<a id="L75"></a><span class="ln">    75</span>	func (b *buffer) Write(p []byte) (n int, err error) {
<a id="L76"></a><span class="ln">    76</span>		*b = append(*b, p...)
<a id="L77"></a><span class="ln">    77</span>		return len(p), nil
<a id="L78"></a><span class="ln">    78</span>	}
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>	func (b *buffer) WriteString(s string) (n int, err error) {
<a id="L81"></a><span class="ln">    81</span>		*b = append(*b, s...)
<a id="L82"></a><span class="ln">    82</span>		return len(s), nil
<a id="L83"></a><span class="ln">    83</span>	}
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>	func (b *buffer) WriteByte(c byte) error {
<a id="L86"></a><span class="ln">    86</span>		*b = append(*b, c)
<a id="L87"></a><span class="ln">    87</span>		return nil
<a id="L88"></a><span class="ln">    88</span>	}
<a id="L89"></a><span class="ln">    89</span>	
<a id="L90"></a><span class="ln">    90</span>	func (bp *buffer) WriteRune(r rune) error {
<a id="L91"></a><span class="ln">    91</span>		if r &lt; utf8.RuneSelf {
<a id="L92"></a><span class="ln">    92</span>			*bp = append(*bp, byte(r))
<a id="L93"></a><span class="ln">    93</span>			return nil
<a id="L94"></a><span class="ln">    94</span>		}
<a id="L95"></a><span class="ln">    95</span>	
<a id="L96"></a><span class="ln">    96</span>		b := *bp
<a id="L97"></a><span class="ln">    97</span>		n := len(b)
<a id="L98"></a><span class="ln">    98</span>		for n+utf8.UTFMax &gt; cap(b) {
<a id="L99"></a><span class="ln">    99</span>			b = append(b, 0)
<a id="L100"></a><span class="ln">   100</span>		}
<a id="L101"></a><span class="ln">   101</span>		w := utf8.EncodeRune(b[n:n+utf8.UTFMax], r)
<a id="L102"></a><span class="ln">   102</span>		*bp = b[:n+w]
<a id="L103"></a><span class="ln">   103</span>		return nil
<a id="L104"></a><span class="ln">   104</span>	}
<a id="L105"></a><span class="ln">   105</span>	
<a id="L106"></a><span class="ln">   106</span>	type pp struct {
<a id="L107"></a><span class="ln">   107</span>		n         int
<a id="L108"></a><span class="ln">   108</span>		panicking bool
<a id="L109"></a><span class="ln">   109</span>		erroring  bool <span class="comment">// printing an error condition</span>
<a id="L110"></a><span class="ln">   110</span>		buf       buffer
<a id="L111"></a><span class="ln">   111</span>		<span class="comment">// field holds the current item, as an interface{}.</span>
<a id="L112"></a><span class="ln">   112</span>		field interface{}
<a id="L113"></a><span class="ln">   113</span>		<span class="comment">// value holds the current item, as a reflect.Value, and will be</span>
<a id="L114"></a><span class="ln">   114</span>		<span class="comment">// the zero Value if the item has not been reflected.</span>
<a id="L115"></a><span class="ln">   115</span>		value   reflect.Value
<a id="L116"></a><span class="ln">   116</span>		runeBuf [utf8.UTFMax]byte
<a id="L117"></a><span class="ln">   117</span>		fmt     fmt
<a id="L118"></a><span class="ln">   118</span>	}
<a id="L119"></a><span class="ln">   119</span>	
<a id="L120"></a><span class="ln">   120</span>	<span class="comment">// A cache holds a set of reusable objects.</span>
<a id="L121"></a><span class="ln">   121</span>	<span class="comment">// The slice is a stack (LIFO).</span>
<a id="L122"></a><span class="ln">   122</span>	<span class="comment">// If more are needed, the cache creates them by calling new.</span>
<a id="L123"></a><span class="ln">   123</span>	type cache struct {
<a id="L124"></a><span class="ln">   124</span>		mu    sync.Mutex
<a id="L125"></a><span class="ln">   125</span>		saved []interface{}
<a id="L126"></a><span class="ln">   126</span>		new   func() interface{}
<a id="L127"></a><span class="ln">   127</span>	}
<a id="L128"></a><span class="ln">   128</span>	
<a id="L129"></a><span class="ln">   129</span>	func (c *cache) put(x interface{}) {
<a id="L130"></a><span class="ln">   130</span>		c.mu.Lock()
<a id="L131"></a><span class="ln">   131</span>		if len(c.saved) &lt; cap(c.saved) {
<a id="L132"></a><span class="ln">   132</span>			c.saved = append(c.saved, x)
<a id="L133"></a><span class="ln">   133</span>		}
<a id="L134"></a><span class="ln">   134</span>		c.mu.Unlock()
<a id="L135"></a><span class="ln">   135</span>	}
<a id="L136"></a><span class="ln">   136</span>	
<a id="L137"></a><span class="ln">   137</span>	func (c *cache) get() interface{} {
<a id="L138"></a><span class="ln">   138</span>		c.mu.Lock()
<a id="L139"></a><span class="ln">   139</span>		n := len(c.saved)
<a id="L140"></a><span class="ln">   140</span>		if n == 0 {
<a id="L141"></a><span class="ln">   141</span>			c.mu.Unlock()
<a id="L142"></a><span class="ln">   142</span>			return c.new()
<a id="L143"></a><span class="ln">   143</span>		}
<a id="L144"></a><span class="ln">   144</span>		x := c.saved[n-1]
<a id="L145"></a><span class="ln">   145</span>		c.saved = c.saved[0 : n-1]
<a id="L146"></a><span class="ln">   146</span>		c.mu.Unlock()
<a id="L147"></a><span class="ln">   147</span>		return x
<a id="L148"></a><span class="ln">   148</span>	}
<a id="L149"></a><span class="ln">   149</span>	
<a id="L150"></a><span class="ln">   150</span>	func newCache(f func() interface{}) *cache {
<a id="L151"></a><span class="ln">   151</span>		return &amp;cache{saved: make([]interface{}, 0, 100), new: f}
<a id="L152"></a><span class="ln">   152</span>	}
<a id="L153"></a><span class="ln">   153</span>	
<a id="L154"></a><span class="ln">   154</span>	var ppFree = newCache(func() interface{} { return new(pp) })
<a id="L155"></a><span class="ln">   155</span>	
<a id="L156"></a><span class="ln">   156</span>	<span class="comment">// Allocate a new pp struct or grab a cached one.</span>
<a id="L157"></a><span class="ln">   157</span>	func newPrinter() *pp {
<a id="L158"></a><span class="ln">   158</span>		p := ppFree.get().(*pp)
<a id="L159"></a><span class="ln">   159</span>		p.panicking = false
<a id="L160"></a><span class="ln">   160</span>		p.erroring = false
<a id="L161"></a><span class="ln">   161</span>		p.fmt.init(&amp;p.buf)
<a id="L162"></a><span class="ln">   162</span>		return p
<a id="L163"></a><span class="ln">   163</span>	}
<a id="L164"></a><span class="ln">   164</span>	
<a id="L165"></a><span class="ln">   165</span>	<span class="comment">// Save used pp structs in ppFree; avoids an allocation per invocation.</span>
<a id="L166"></a><span class="ln">   166</span>	func (p *pp) free() {
<a id="L167"></a><span class="ln">   167</span>		<span class="comment">// Don&#39;t hold on to pp structs with large buffers.</span>
<a id="L168"></a><span class="ln">   168</span>		if cap(p.buf) &gt; 1024 {
<a id="L169"></a><span class="ln">   169</span>			return
<a id="L170"></a><span class="ln">   170</span>		}
<a id="L171"></a><span class="ln">   171</span>		p.buf = p.buf[:0]
<a id="L172"></a><span class="ln">   172</span>		p.field = nil
<a id="L173"></a><span class="ln">   173</span>		p.value = reflect.Value{}
<a id="L174"></a><span class="ln">   174</span>		ppFree.put(p)
<a id="L175"></a><span class="ln">   175</span>	}
<a id="L176"></a><span class="ln">   176</span>	
<a id="L177"></a><span class="ln">   177</span>	func (p *pp) Width() (wid int, ok bool) { return p.fmt.wid, p.fmt.widPresent }
<a id="L178"></a><span class="ln">   178</span>	
<a id="L179"></a><span class="ln">   179</span>	func (p *pp) Precision() (prec int, ok bool) { return p.fmt.prec, p.fmt.precPresent }
<a id="L180"></a><span class="ln">   180</span>	
<a id="L181"></a><span class="ln">   181</span>	func (p *pp) Flag(b int) bool {
<a id="L182"></a><span class="ln">   182</span>		switch b {
<a id="L183"></a><span class="ln">   183</span>		case &#39;-&#39;:
<a id="L184"></a><span class="ln">   184</span>			return p.fmt.minus
<a id="L185"></a><span class="ln">   185</span>		case &#39;+&#39;:
<a id="L186"></a><span class="ln">   186</span>			return p.fmt.plus
<a id="L187"></a><span class="ln">   187</span>		case &#39;#&#39;:
<a id="L188"></a><span class="ln">   188</span>			return p.fmt.sharp
<a id="L189"></a><span class="ln">   189</span>		case &#39; &#39;:
<a id="L190"></a><span class="ln">   190</span>			return p.fmt.space
<a id="L191"></a><span class="ln">   191</span>		case &#39;0&#39;:
<a id="L192"></a><span class="ln">   192</span>			return p.fmt.zero
<a id="L193"></a><span class="ln">   193</span>		}
<a id="L194"></a><span class="ln">   194</span>		return false
<a id="L195"></a><span class="ln">   195</span>	}
<a id="L196"></a><span class="ln">   196</span>	
<a id="L197"></a><span class="ln">   197</span>	func (p *pp) add(c rune) {
<a id="L198"></a><span class="ln">   198</span>		p.buf.WriteRune(c)
<a id="L199"></a><span class="ln">   199</span>	}
<a id="L200"></a><span class="ln">   200</span>	
<a id="L201"></a><span class="ln">   201</span>	<span class="comment">// Implement Write so we can call Fprintf on a pp (through State), for</span>
<a id="L202"></a><span class="ln">   202</span>	<span class="comment">// recursive use in custom verbs.</span>
<a id="L203"></a><span class="ln">   203</span>	func (p *pp) Write(b []byte) (ret int, err error) {
<a id="L204"></a><span class="ln">   204</span>		return p.buf.Write(b)
<a id="L205"></a><span class="ln">   205</span>	}
<a id="L206"></a><span class="ln">   206</span>	
<a id="L207"></a><span class="ln">   207</span>	<span class="comment">// These routines end in &#39;f&#39; and take a format string.</span>
<a id="L208"></a><span class="ln">   208</span>	
<a id="L209"></a><span class="ln">   209</span>	<span class="comment">// Fprintf formats according to a format specifier and writes to w.</span>
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// It returns the number of bytes written and any write error encountered.</span>
<a id="L211"></a><span class="ln">   211</span>	func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error) {
<a id="L212"></a><span class="ln">   212</span>		p := newPrinter()
<a id="L213"></a><span class="ln">   213</span>		p.doPrintf(format, a)
<a id="L214"></a><span class="ln">   214</span>		n64, err := w.Write(p.buf)
<a id="L215"></a><span class="ln">   215</span>		p.free()
<a id="L216"></a><span class="ln">   216</span>		return int(n64), err
<a id="L217"></a><span class="ln">   217</span>	}
<a id="L218"></a><span class="ln">   218</span>	
<a id="L219"></a><span class="ln">   219</span>	<span class="comment">// Printf formats according to a format specifier and writes to standard output.</span>
<a id="L220"></a><span class="ln">   220</span>	<span class="comment">// It returns the number of bytes written and any write error encountered.</span>
<a id="L221"></a><span class="ln">   221</span>	func Printf(format string, a ...interface{}) (n int, err error) {
<a id="L222"></a><span class="ln">   222</span>		return Fprintf(os.Stdout, format, a...)
<a id="L223"></a><span class="ln">   223</span>	}
<a id="L224"></a><span class="ln">   224</span>	
<a id="L225"></a><span class="ln">   225</span>	<span class="comment">// Sprintf formats according to a format specifier and returns the resulting string.</span>
<a id="L226"></a><span class="ln">   226</span>	func Sprintf(format string, a ...interface{}) string {
<a id="L227"></a><span class="ln">   227</span>		p := newPrinter()
<a id="L228"></a><span class="ln">   228</span>		p.doPrintf(format, a)
<a id="L229"></a><span class="ln">   229</span>		s := string(p.buf)
<a id="L230"></a><span class="ln">   230</span>		p.free()
<a id="L231"></a><span class="ln">   231</span>		return s
<a id="L232"></a><span class="ln">   232</span>	}
<a id="L233"></a><span class="ln">   233</span>	
<a id="L234"></a><span class="ln">   234</span>	<span class="comment">// Errorf formats according to a format specifier and returns the string </span>
<a id="L235"></a><span class="ln">   235</span>	<span class="comment">// as a value that satisfies error.</span>
<a id="L236"></a><span class="ln">   236</span>	func Errorf(format string, a ...interface{}) error {
<a id="L237"></a><span class="ln">   237</span>		return errors.New(Sprintf(format, a...))
<a id="L238"></a><span class="ln">   238</span>	}
<a id="L239"></a><span class="ln">   239</span>	
<a id="L240"></a><span class="ln">   240</span>	<span class="comment">// These routines do not take a format string</span>
<a id="L241"></a><span class="ln">   241</span>	
<a id="L242"></a><span class="ln">   242</span>	<span class="comment">// Fprint formats using the default formats for its operands and writes to w.</span>
<a id="L243"></a><span class="ln">   243</span>	<span class="comment">// Spaces are added between operands when neither is a string.</span>
<a id="L244"></a><span class="ln">   244</span>	<span class="comment">// It returns the number of bytes written and any write error encountered.</span>
<a id="L245"></a><span class="ln">   245</span>	func Fprint(w io.Writer, a ...interface{}) (n int, err error) {
<a id="L246"></a><span class="ln">   246</span>		p := newPrinter()
<a id="L247"></a><span class="ln">   247</span>		p.doPrint(a, false, false)
<a id="L248"></a><span class="ln">   248</span>		n64, err := w.Write(p.buf)
<a id="L249"></a><span class="ln">   249</span>		p.free()
<a id="L250"></a><span class="ln">   250</span>		return int(n64), err
<a id="L251"></a><span class="ln">   251</span>	}
<a id="L252"></a><span class="ln">   252</span>	
<a id="L253"></a><span class="ln">   253</span>	<span class="comment">// Print formats using the default formats for its operands and writes to standard output.</span>
<a id="L254"></a><span class="ln">   254</span>	<span class="comment">// Spaces are added between operands when neither is a string.</span>
<a id="L255"></a><span class="ln">   255</span>	<span class="comment">// It returns the number of bytes written and any write error encountered.</span>
<a id="L256"></a><span class="ln">   256</span>	func Print(a ...interface{}) (n int, err error) {
<a id="L257"></a><span class="ln">   257</span>		return Fprint(os.Stdout, a...)
<a id="L258"></a><span class="ln">   258</span>	}
<a id="L259"></a><span class="ln">   259</span>	
<a id="L260"></a><span class="ln">   260</span>	<span class="comment">// Sprint formats using the default formats for its operands and returns the resulting string.</span>
<a id="L261"></a><span class="ln">   261</span>	<span class="comment">// Spaces are added between operands when neither is a string.</span>
<a id="L262"></a><span class="ln">   262</span>	func Sprint(a ...interface{}) string {
<a id="L263"></a><span class="ln">   263</span>		p := newPrinter()
<a id="L264"></a><span class="ln">   264</span>		p.doPrint(a, false, false)
<a id="L265"></a><span class="ln">   265</span>		s := string(p.buf)
<a id="L266"></a><span class="ln">   266</span>		p.free()
<a id="L267"></a><span class="ln">   267</span>		return s
<a id="L268"></a><span class="ln">   268</span>	}
<a id="L269"></a><span class="ln">   269</span>	
<a id="L270"></a><span class="ln">   270</span>	<span class="comment">// These routines end in &#39;ln&#39;, do not take a format string,</span>
<a id="L271"></a><span class="ln">   271</span>	<span class="comment">// always add spaces between operands, and add a newline</span>
<a id="L272"></a><span class="ln">   272</span>	<span class="comment">// after the last operand.</span>
<a id="L273"></a><span class="ln">   273</span>	
<a id="L274"></a><span class="ln">   274</span>	<span class="comment">// Fprintln formats using the default formats for its operands and writes to w.</span>
<a id="L275"></a><span class="ln">   275</span>	<span class="comment">// Spaces are always added between operands and a newline is appended.</span>
<a id="L276"></a><span class="ln">   276</span>	<span class="comment">// It returns the number of bytes written and any write error encountered.</span>
<a id="L277"></a><span class="ln">   277</span>	func Fprintln(w io.Writer, a ...interface{}) (n int, err error) {
<a id="L278"></a><span class="ln">   278</span>		p := newPrinter()
<a id="L279"></a><span class="ln">   279</span>		p.doPrint(a, true, true)
<a id="L280"></a><span class="ln">   280</span>		n64, err := w.Write(p.buf)
<a id="L281"></a><span class="ln">   281</span>		p.free()
<a id="L282"></a><span class="ln">   282</span>		return int(n64), err
<a id="L283"></a><span class="ln">   283</span>	}
<a id="L284"></a><span class="ln">   284</span>	
<a id="L285"></a><span class="ln">   285</span>	<span class="comment">// Println formats using the default formats for its operands and writes to standard output.</span>
<a id="L286"></a><span class="ln">   286</span>	<span class="comment">// Spaces are always added between operands and a newline is appended.</span>
<a id="L287"></a><span class="ln">   287</span>	<span class="comment">// It returns the number of bytes written and any write error encountered.</span>
<a id="L288"></a><span class="ln">   288</span>	func Println(a ...interface{}) (n int, err error) {
<a id="L289"></a><span class="ln">   289</span>		return Fprintln(os.Stdout, a...)
<a id="L290"></a><span class="ln">   290</span>	}
<a id="L291"></a><span class="ln">   291</span>	
<a id="L292"></a><span class="ln">   292</span>	<span class="comment">// Sprintln formats using the default formats for its operands and returns the resulting string.</span>
<a id="L293"></a><span class="ln">   293</span>	<span class="comment">// Spaces are always added between operands and a newline is appended.</span>
<a id="L294"></a><span class="ln">   294</span>	func Sprintln(a ...interface{}) string {
<a id="L295"></a><span class="ln">   295</span>		p := newPrinter()
<a id="L296"></a><span class="ln">   296</span>		p.doPrint(a, true, true)
<a id="L297"></a><span class="ln">   297</span>		s := string(p.buf)
<a id="L298"></a><span class="ln">   298</span>		p.free()
<a id="L299"></a><span class="ln">   299</span>		return s
<a id="L300"></a><span class="ln">   300</span>	}
<a id="L301"></a><span class="ln">   301</span>	
<a id="L302"></a><span class="ln">   302</span>	<span class="comment">// Get the i&#39;th arg of the struct value.</span>
<a id="L303"></a><span class="ln">   303</span>	<span class="comment">// If the arg itself is an interface, return a value for</span>
<a id="L304"></a><span class="ln">   304</span>	<span class="comment">// the thing inside the interface, not the interface itself.</span>
<a id="L305"></a><span class="ln">   305</span>	func getField(v reflect.Value, i int) reflect.Value {
<a id="L306"></a><span class="ln">   306</span>		val := v.Field(i)
<a id="L307"></a><span class="ln">   307</span>		if val.Kind() == reflect.Interface &amp;&amp; !val.IsNil() {
<a id="L308"></a><span class="ln">   308</span>			val = val.Elem()
<a id="L309"></a><span class="ln">   309</span>		}
<a id="L310"></a><span class="ln">   310</span>		return val
<a id="L311"></a><span class="ln">   311</span>	}
<a id="L312"></a><span class="ln">   312</span>	
<a id="L313"></a><span class="ln">   313</span>	<span class="comment">// Convert ASCII to integer.  n is 0 (and got is false) if no number present.</span>
<a id="L314"></a><span class="ln">   314</span>	func parsenum(s string, start, end int) (num int, isnum bool, newi int) {
<a id="L315"></a><span class="ln">   315</span>		if start &gt;= end {
<a id="L316"></a><span class="ln">   316</span>			return 0, false, end
<a id="L317"></a><span class="ln">   317</span>		}
<a id="L318"></a><span class="ln">   318</span>		for newi = start; newi &lt; end &amp;&amp; &#39;0&#39; &lt;= s[newi] &amp;&amp; s[newi] &lt;= &#39;9&#39;; newi++ {
<a id="L319"></a><span class="ln">   319</span>			num = num*10 + int(s[newi]-&#39;0&#39;)
<a id="L320"></a><span class="ln">   320</span>			isnum = true
<a id="L321"></a><span class="ln">   321</span>		}
<a id="L322"></a><span class="ln">   322</span>		return
<a id="L323"></a><span class="ln">   323</span>	}
<a id="L324"></a><span class="ln">   324</span>	
<a id="L325"></a><span class="ln">   325</span>	func (p *pp) unknownType(v interface{}) {
<a id="L326"></a><span class="ln">   326</span>		if v == nil {
<a id="L327"></a><span class="ln">   327</span>			p.buf.Write(nilAngleBytes)
<a id="L328"></a><span class="ln">   328</span>			return
<a id="L329"></a><span class="ln">   329</span>		}
<a id="L330"></a><span class="ln">   330</span>		p.buf.WriteByte(&#39;?&#39;)
<a id="L331"></a><span class="ln">   331</span>		p.buf.WriteString(reflect.TypeOf(v).String())
<a id="L332"></a><span class="ln">   332</span>		p.buf.WriteByte(&#39;?&#39;)
<a id="L333"></a><span class="ln">   333</span>	}
<a id="L334"></a><span class="ln">   334</span>	
<a id="L335"></a><span class="ln">   335</span>	func (p *pp) badVerb(verb rune) {
<a id="L336"></a><span class="ln">   336</span>		p.erroring = true
<a id="L337"></a><span class="ln">   337</span>		p.add(&#39;%&#39;)
<a id="L338"></a><span class="ln">   338</span>		p.add(&#39;!&#39;)
<a id="L339"></a><span class="ln">   339</span>		p.add(verb)
<a id="L340"></a><span class="ln">   340</span>		p.add(&#39;(&#39;)
<a id="L341"></a><span class="ln">   341</span>		switch {
<a id="L342"></a><span class="ln">   342</span>		case p.field != nil:
<a id="L343"></a><span class="ln">   343</span>			p.buf.WriteString(reflect.TypeOf(p.field).String())
<a id="L344"></a><span class="ln">   344</span>			p.add(&#39;=&#39;)
<a id="L345"></a><span class="ln">   345</span>			p.printField(p.field, &#39;v&#39;, false, false, 0)
<a id="L346"></a><span class="ln">   346</span>		case p.value.IsValid():
<a id="L347"></a><span class="ln">   347</span>			p.buf.WriteString(p.value.Type().String())
<a id="L348"></a><span class="ln">   348</span>			p.add(&#39;=&#39;)
<a id="L349"></a><span class="ln">   349</span>			p.printValue(p.value, &#39;v&#39;, false, false, 0)
<a id="L350"></a><span class="ln">   350</span>		default:
<a id="L351"></a><span class="ln">   351</span>			p.buf.Write(nilAngleBytes)
<a id="L352"></a><span class="ln">   352</span>		}
<a id="L353"></a><span class="ln">   353</span>		p.add(&#39;)&#39;)
<a id="L354"></a><span class="ln">   354</span>		p.erroring = false
<a id="L355"></a><span class="ln">   355</span>	}
<a id="L356"></a><span class="ln">   356</span>	
<a id="L357"></a><span class="ln">   357</span>	func (p *pp) fmtBool(v bool, verb rune) {
<a id="L358"></a><span class="ln">   358</span>		switch verb {
<a id="L359"></a><span class="ln">   359</span>		case &#39;t&#39;, &#39;v&#39;:
<a id="L360"></a><span class="ln">   360</span>			p.fmt.fmt_boolean(v)
<a id="L361"></a><span class="ln">   361</span>		default:
<a id="L362"></a><span class="ln">   362</span>			p.badVerb(verb)
<a id="L363"></a><span class="ln">   363</span>		}
<a id="L364"></a><span class="ln">   364</span>	}
<a id="L365"></a><span class="ln">   365</span>	
<a id="L366"></a><span class="ln">   366</span>	<span class="comment">// fmtC formats a rune for the &#39;c&#39; format.</span>
<a id="L367"></a><span class="ln">   367</span>	func (p *pp) fmtC(c int64) {
<a id="L368"></a><span class="ln">   368</span>		r := rune(c) <span class="comment">// Check for overflow.</span>
<a id="L369"></a><span class="ln">   369</span>		if int64(r) != c {
<a id="L370"></a><span class="ln">   370</span>			r = utf8.RuneError
<a id="L371"></a><span class="ln">   371</span>		}
<a id="L372"></a><span class="ln">   372</span>		w := utf8.EncodeRune(p.runeBuf[0:utf8.UTFMax], r)
<a id="L373"></a><span class="ln">   373</span>		p.fmt.pad(p.runeBuf[0:w])
<a id="L374"></a><span class="ln">   374</span>	}
<a id="L375"></a><span class="ln">   375</span>	
<a id="L376"></a><span class="ln">   376</span>	func (p *pp) fmtInt64(v int64, verb rune) {
<a id="L377"></a><span class="ln">   377</span>		switch verb {
<a id="L378"></a><span class="ln">   378</span>		case &#39;b&#39;:
<a id="L379"></a><span class="ln">   379</span>			p.fmt.integer(v, 2, signed, ldigits)
<a id="L380"></a><span class="ln">   380</span>		case &#39;c&#39;:
<a id="L381"></a><span class="ln">   381</span>			p.fmtC(v)
<a id="L382"></a><span class="ln">   382</span>		case &#39;d&#39;, &#39;v&#39;:
<a id="L383"></a><span class="ln">   383</span>			p.fmt.integer(v, 10, signed, ldigits)
<a id="L384"></a><span class="ln">   384</span>		case &#39;o&#39;:
<a id="L385"></a><span class="ln">   385</span>			p.fmt.integer(v, 8, signed, ldigits)
<a id="L386"></a><span class="ln">   386</span>		case &#39;q&#39;:
<a id="L387"></a><span class="ln">   387</span>			if 0 &lt;= v &amp;&amp; v &lt;= utf8.MaxRune {
<a id="L388"></a><span class="ln">   388</span>				p.fmt.fmt_qc(v)
<a id="L389"></a><span class="ln">   389</span>			} else {
<a id="L390"></a><span class="ln">   390</span>				p.badVerb(verb)
<a id="L391"></a><span class="ln">   391</span>			}
<a id="L392"></a><span class="ln">   392</span>		case &#39;x&#39;:
<a id="L393"></a><span class="ln">   393</span>			p.fmt.integer(v, 16, signed, ldigits)
<a id="L394"></a><span class="ln">   394</span>		case &#39;U&#39;:
<a id="L395"></a><span class="ln">   395</span>			p.fmtUnicode(v)
<a id="L396"></a><span class="ln">   396</span>		case &#39;X&#39;:
<a id="L397"></a><span class="ln">   397</span>			p.fmt.integer(v, 16, signed, udigits)
<a id="L398"></a><span class="ln">   398</span>		default:
<a id="L399"></a><span class="ln">   399</span>			p.badVerb(verb)
<a id="L400"></a><span class="ln">   400</span>		}
<a id="L401"></a><span class="ln">   401</span>	}
<a id="L402"></a><span class="ln">   402</span>	
<a id="L403"></a><span class="ln">   403</span>	<span class="comment">// fmt0x64 formats a uint64 in hexadecimal and prefixes it with 0x or</span>
<a id="L404"></a><span class="ln">   404</span>	<span class="comment">// not, as requested, by temporarily setting the sharp flag.</span>
<a id="L405"></a><span class="ln">   405</span>	func (p *pp) fmt0x64(v uint64, leading0x bool) {
<a id="L406"></a><span class="ln">   406</span>		sharp := p.fmt.sharp
<a id="L407"></a><span class="ln">   407</span>		p.fmt.sharp = leading0x
<a id="L408"></a><span class="ln">   408</span>		p.fmt.integer(int64(v), 16, unsigned, ldigits)
<a id="L409"></a><span class="ln">   409</span>		p.fmt.sharp = sharp
<a id="L410"></a><span class="ln">   410</span>	}
<a id="L411"></a><span class="ln">   411</span>	
<a id="L412"></a><span class="ln">   412</span>	<span class="comment">// fmtUnicode formats a uint64 in U+1234 form by</span>
<a id="L413"></a><span class="ln">   413</span>	<span class="comment">// temporarily turning on the unicode flag and tweaking the precision.</span>
<a id="L414"></a><span class="ln">   414</span>	func (p *pp) fmtUnicode(v int64) {
<a id="L415"></a><span class="ln">   415</span>		precPresent := p.fmt.precPresent
<a id="L416"></a><span class="ln">   416</span>		sharp := p.fmt.sharp
<a id="L417"></a><span class="ln">   417</span>		p.fmt.sharp = false
<a id="L418"></a><span class="ln">   418</span>		prec := p.fmt.prec
<a id="L419"></a><span class="ln">   419</span>		if !precPresent {
<a id="L420"></a><span class="ln">   420</span>			<span class="comment">// If prec is already set, leave it alone; otherwise 4 is minimum.</span>
<a id="L421"></a><span class="ln">   421</span>			p.fmt.prec = 4
<a id="L422"></a><span class="ln">   422</span>			p.fmt.precPresent = true
<a id="L423"></a><span class="ln">   423</span>		}
<a id="L424"></a><span class="ln">   424</span>		p.fmt.unicode = true <span class="comment">// turn on U+</span>
<a id="L425"></a><span class="ln">   425</span>		p.fmt.uniQuote = sharp
<a id="L426"></a><span class="ln">   426</span>		p.fmt.integer(int64(v), 16, unsigned, udigits)
<a id="L427"></a><span class="ln">   427</span>		p.fmt.unicode = false
<a id="L428"></a><span class="ln">   428</span>		p.fmt.uniQuote = false
<a id="L429"></a><span class="ln">   429</span>		p.fmt.prec = prec
<a id="L430"></a><span class="ln">   430</span>		p.fmt.precPresent = precPresent
<a id="L431"></a><span class="ln">   431</span>		p.fmt.sharp = sharp
<a id="L432"></a><span class="ln">   432</span>	}
<a id="L433"></a><span class="ln">   433</span>	
<a id="L434"></a><span class="ln">   434</span>	func (p *pp) fmtUint64(v uint64, verb rune, goSyntax bool) {
<a id="L435"></a><span class="ln">   435</span>		switch verb {
<a id="L436"></a><span class="ln">   436</span>		case &#39;b&#39;:
<a id="L437"></a><span class="ln">   437</span>			p.fmt.integer(int64(v), 2, unsigned, ldigits)
<a id="L438"></a><span class="ln">   438</span>		case &#39;c&#39;:
<a id="L439"></a><span class="ln">   439</span>			p.fmtC(int64(v))
<a id="L440"></a><span class="ln">   440</span>		case &#39;d&#39;:
<a id="L441"></a><span class="ln">   441</span>			p.fmt.integer(int64(v), 10, unsigned, ldigits)
<a id="L442"></a><span class="ln">   442</span>		case &#39;v&#39;:
<a id="L443"></a><span class="ln">   443</span>			if goSyntax {
<a id="L444"></a><span class="ln">   444</span>				p.fmt0x64(v, true)
<a id="L445"></a><span class="ln">   445</span>			} else {
<a id="L446"></a><span class="ln">   446</span>				p.fmt.integer(int64(v), 10, unsigned, ldigits)
<a id="L447"></a><span class="ln">   447</span>			}
<a id="L448"></a><span class="ln">   448</span>		case &#39;o&#39;:
<a id="L449"></a><span class="ln">   449</span>			p.fmt.integer(int64(v), 8, unsigned, ldigits)
<a id="L450"></a><span class="ln">   450</span>		case &#39;q&#39;:
<a id="L451"></a><span class="ln">   451</span>			if 0 &lt;= v &amp;&amp; v &lt;= utf8.MaxRune {
<a id="L452"></a><span class="ln">   452</span>				p.fmt.fmt_qc(int64(v))
<a id="L453"></a><span class="ln">   453</span>			} else {
<a id="L454"></a><span class="ln">   454</span>				p.badVerb(verb)
<a id="L455"></a><span class="ln">   455</span>			}
<a id="L456"></a><span class="ln">   456</span>		case &#39;x&#39;:
<a id="L457"></a><span class="ln">   457</span>			p.fmt.integer(int64(v), 16, unsigned, ldigits)
<a id="L458"></a><span class="ln">   458</span>		case &#39;X&#39;:
<a id="L459"></a><span class="ln">   459</span>			p.fmt.integer(int64(v), 16, unsigned, udigits)
<a id="L460"></a><span class="ln">   460</span>		case &#39;U&#39;:
<a id="L461"></a><span class="ln">   461</span>			p.fmtUnicode(int64(v))
<a id="L462"></a><span class="ln">   462</span>		default:
<a id="L463"></a><span class="ln">   463</span>			p.badVerb(verb)
<a id="L464"></a><span class="ln">   464</span>		}
<a id="L465"></a><span class="ln">   465</span>	}
<a id="L466"></a><span class="ln">   466</span>	
<a id="L467"></a><span class="ln">   467</span>	func (p *pp) fmtFloat32(v float32, verb rune) {
<a id="L468"></a><span class="ln">   468</span>		switch verb {
<a id="L469"></a><span class="ln">   469</span>		case &#39;b&#39;:
<a id="L470"></a><span class="ln">   470</span>			p.fmt.fmt_fb32(v)
<a id="L471"></a><span class="ln">   471</span>		case &#39;e&#39;:
<a id="L472"></a><span class="ln">   472</span>			p.fmt.fmt_e32(v)
<a id="L473"></a><span class="ln">   473</span>		case &#39;E&#39;:
<a id="L474"></a><span class="ln">   474</span>			p.fmt.fmt_E32(v)
<a id="L475"></a><span class="ln">   475</span>		case &#39;f&#39;:
<a id="L476"></a><span class="ln">   476</span>			p.fmt.fmt_f32(v)
<a id="L477"></a><span class="ln">   477</span>		case &#39;g&#39;, &#39;v&#39;:
<a id="L478"></a><span class="ln">   478</span>			p.fmt.fmt_g32(v)
<a id="L479"></a><span class="ln">   479</span>		case &#39;G&#39;:
<a id="L480"></a><span class="ln">   480</span>			p.fmt.fmt_G32(v)
<a id="L481"></a><span class="ln">   481</span>		default:
<a id="L482"></a><span class="ln">   482</span>			p.badVerb(verb)
<a id="L483"></a><span class="ln">   483</span>		}
<a id="L484"></a><span class="ln">   484</span>	}
<a id="L485"></a><span class="ln">   485</span>	
<a id="L486"></a><span class="ln">   486</span>	func (p *pp) fmtFloat64(v float64, verb rune) {
<a id="L487"></a><span class="ln">   487</span>		switch verb {
<a id="L488"></a><span class="ln">   488</span>		case &#39;b&#39;:
<a id="L489"></a><span class="ln">   489</span>			p.fmt.fmt_fb64(v)
<a id="L490"></a><span class="ln">   490</span>		case &#39;e&#39;:
<a id="L491"></a><span class="ln">   491</span>			p.fmt.fmt_e64(v)
<a id="L492"></a><span class="ln">   492</span>		case &#39;E&#39;:
<a id="L493"></a><span class="ln">   493</span>			p.fmt.fmt_E64(v)
<a id="L494"></a><span class="ln">   494</span>		case &#39;f&#39;:
<a id="L495"></a><span class="ln">   495</span>			p.fmt.fmt_f64(v)
<a id="L496"></a><span class="ln">   496</span>		case &#39;g&#39;, &#39;v&#39;:
<a id="L497"></a><span class="ln">   497</span>			p.fmt.fmt_g64(v)
<a id="L498"></a><span class="ln">   498</span>		case &#39;G&#39;:
<a id="L499"></a><span class="ln">   499</span>			p.fmt.fmt_G64(v)
<a id="L500"></a><span class="ln">   500</span>		default:
<a id="L501"></a><span class="ln">   501</span>			p.badVerb(verb)
<a id="L502"></a><span class="ln">   502</span>		}
<a id="L503"></a><span class="ln">   503</span>	}
<a id="L504"></a><span class="ln">   504</span>	
<a id="L505"></a><span class="ln">   505</span>	func (p *pp) fmtComplex64(v complex64, verb rune) {
<a id="L506"></a><span class="ln">   506</span>		switch verb {
<a id="L507"></a><span class="ln">   507</span>		case &#39;e&#39;, &#39;E&#39;, &#39;f&#39;, &#39;F&#39;, &#39;g&#39;, &#39;G&#39;:
<a id="L508"></a><span class="ln">   508</span>			p.fmt.fmt_c64(v, verb)
<a id="L509"></a><span class="ln">   509</span>		case &#39;v&#39;:
<a id="L510"></a><span class="ln">   510</span>			p.fmt.fmt_c64(v, &#39;g&#39;)
<a id="L511"></a><span class="ln">   511</span>		default:
<a id="L512"></a><span class="ln">   512</span>			p.badVerb(verb)
<a id="L513"></a><span class="ln">   513</span>		}
<a id="L514"></a><span class="ln">   514</span>	}
<a id="L515"></a><span class="ln">   515</span>	
<a id="L516"></a><span class="ln">   516</span>	func (p *pp) fmtComplex128(v complex128, verb rune) {
<a id="L517"></a><span class="ln">   517</span>		switch verb {
<a id="L518"></a><span class="ln">   518</span>		case &#39;e&#39;, &#39;E&#39;, &#39;f&#39;, &#39;F&#39;, &#39;g&#39;, &#39;G&#39;:
<a id="L519"></a><span class="ln">   519</span>			p.fmt.fmt_c128(v, verb)
<a id="L520"></a><span class="ln">   520</span>		case &#39;v&#39;:
<a id="L521"></a><span class="ln">   521</span>			p.fmt.fmt_c128(v, &#39;g&#39;)
<a id="L522"></a><span class="ln">   522</span>		default:
<a id="L523"></a><span class="ln">   523</span>			p.badVerb(verb)
<a id="L524"></a><span class="ln">   524</span>		}
<a id="L525"></a><span class="ln">   525</span>	}
<a id="L526"></a><span class="ln">   526</span>	
<a id="L527"></a><span class="ln">   527</span>	func (p *pp) fmtString(v string, verb rune, goSyntax bool) {
<a id="L528"></a><span class="ln">   528</span>		switch verb {
<a id="L529"></a><span class="ln">   529</span>		case &#39;v&#39;:
<a id="L530"></a><span class="ln">   530</span>			if goSyntax {
<a id="L531"></a><span class="ln">   531</span>				p.fmt.fmt_q(v)
<a id="L532"></a><span class="ln">   532</span>			} else {
<a id="L533"></a><span class="ln">   533</span>				p.fmt.fmt_s(v)
<a id="L534"></a><span class="ln">   534</span>			}
<a id="L535"></a><span class="ln">   535</span>		case &#39;s&#39;:
<a id="L536"></a><span class="ln">   536</span>			p.fmt.fmt_s(v)
<a id="L537"></a><span class="ln">   537</span>		case &#39;x&#39;:
<a id="L538"></a><span class="ln">   538</span>			p.fmt.fmt_sx(v, ldigits)
<a id="L539"></a><span class="ln">   539</span>		case &#39;X&#39;:
<a id="L540"></a><span class="ln">   540</span>			p.fmt.fmt_sx(v, udigits)
<a id="L541"></a><span class="ln">   541</span>		case &#39;q&#39;:
<a id="L542"></a><span class="ln">   542</span>			p.fmt.fmt_q(v)
<a id="L543"></a><span class="ln">   543</span>		default:
<a id="L544"></a><span class="ln">   544</span>			p.badVerb(verb)
<a id="L545"></a><span class="ln">   545</span>		}
<a id="L546"></a><span class="ln">   546</span>	}
<a id="L547"></a><span class="ln">   547</span>	
<a id="L548"></a><span class="ln">   548</span>	func (p *pp) fmtBytes(v []byte, verb rune, goSyntax bool, depth int) {
<a id="L549"></a><span class="ln">   549</span>		if verb == &#39;v&#39; || verb == &#39;d&#39; {
<a id="L550"></a><span class="ln">   550</span>			if goSyntax {
<a id="L551"></a><span class="ln">   551</span>				p.buf.Write(bytesBytes)
<a id="L552"></a><span class="ln">   552</span>			} else {
<a id="L553"></a><span class="ln">   553</span>				p.buf.WriteByte(&#39;[&#39;)
<a id="L554"></a><span class="ln">   554</span>			}
<a id="L555"></a><span class="ln">   555</span>			for i, c := range v {
<a id="L556"></a><span class="ln">   556</span>				if i &gt; 0 {
<a id="L557"></a><span class="ln">   557</span>					if goSyntax {
<a id="L558"></a><span class="ln">   558</span>						p.buf.Write(commaSpaceBytes)
<a id="L559"></a><span class="ln">   559</span>					} else {
<a id="L560"></a><span class="ln">   560</span>						p.buf.WriteByte(&#39; &#39;)
<a id="L561"></a><span class="ln">   561</span>					}
<a id="L562"></a><span class="ln">   562</span>				}
<a id="L563"></a><span class="ln">   563</span>				p.printField(c, &#39;v&#39;, p.fmt.plus, goSyntax, depth+1)
<a id="L564"></a><span class="ln">   564</span>			}
<a id="L565"></a><span class="ln">   565</span>			if goSyntax {
<a id="L566"></a><span class="ln">   566</span>				p.buf.WriteByte(&#39;}&#39;)
<a id="L567"></a><span class="ln">   567</span>			} else {
<a id="L568"></a><span class="ln">   568</span>				p.buf.WriteByte(&#39;]&#39;)
<a id="L569"></a><span class="ln">   569</span>			}
<a id="L570"></a><span class="ln">   570</span>			return
<a id="L571"></a><span class="ln">   571</span>		}
<a id="L572"></a><span class="ln">   572</span>		s := string(v)
<a id="L573"></a><span class="ln">   573</span>		switch verb {
<a id="L574"></a><span class="ln">   574</span>		case &#39;s&#39;:
<a id="L575"></a><span class="ln">   575</span>			p.fmt.fmt_s(s)
<a id="L576"></a><span class="ln">   576</span>		case &#39;x&#39;:
<a id="L577"></a><span class="ln">   577</span>			p.fmt.fmt_sx(s, ldigits)
<a id="L578"></a><span class="ln">   578</span>		case &#39;X&#39;:
<a id="L579"></a><span class="ln">   579</span>			p.fmt.fmt_sx(s, udigits)
<a id="L580"></a><span class="ln">   580</span>		case &#39;q&#39;:
<a id="L581"></a><span class="ln">   581</span>			p.fmt.fmt_q(s)
<a id="L582"></a><span class="ln">   582</span>		default:
<a id="L583"></a><span class="ln">   583</span>			p.badVerb(verb)
<a id="L584"></a><span class="ln">   584</span>		}
<a id="L585"></a><span class="ln">   585</span>	}
<a id="L586"></a><span class="ln">   586</span>	
<a id="L587"></a><span class="ln">   587</span>	func (p *pp) fmtPointer(value reflect.Value, verb rune, goSyntax bool) {
<a id="L588"></a><span class="ln">   588</span>		switch verb {
<a id="L589"></a><span class="ln">   589</span>		case &#39;p&#39;, &#39;v&#39;, &#39;b&#39;, &#39;d&#39;, &#39;o&#39;, &#39;x&#39;, &#39;X&#39;:
<a id="L590"></a><span class="ln">   590</span>			<span class="comment">// ok</span>
<a id="L591"></a><span class="ln">   591</span>		default:
<a id="L592"></a><span class="ln">   592</span>			p.badVerb(verb)
<a id="L593"></a><span class="ln">   593</span>			return
<a id="L594"></a><span class="ln">   594</span>		}
<a id="L595"></a><span class="ln">   595</span>	
<a id="L596"></a><span class="ln">   596</span>		var u uintptr
<a id="L597"></a><span class="ln">   597</span>		switch value.Kind() {
<a id="L598"></a><span class="ln">   598</span>		case reflect.Chan, reflect.Func, reflect.Map, reflect.Ptr, reflect.Slice, reflect.UnsafePointer:
<a id="L599"></a><span class="ln">   599</span>			u = value.Pointer()
<a id="L600"></a><span class="ln">   600</span>		default:
<a id="L601"></a><span class="ln">   601</span>			p.badVerb(verb)
<a id="L602"></a><span class="ln">   602</span>			return
<a id="L603"></a><span class="ln">   603</span>		}
<a id="L604"></a><span class="ln">   604</span>	
<a id="L605"></a><span class="ln">   605</span>		if goSyntax {
<a id="L606"></a><span class="ln">   606</span>			p.add(&#39;(&#39;)
<a id="L607"></a><span class="ln">   607</span>			p.buf.WriteString(value.Type().String())
<a id="L608"></a><span class="ln">   608</span>			p.add(&#39;)&#39;)
<a id="L609"></a><span class="ln">   609</span>			p.add(&#39;(&#39;)
<a id="L610"></a><span class="ln">   610</span>			if u == 0 {
<a id="L611"></a><span class="ln">   611</span>				p.buf.Write(nilBytes)
<a id="L612"></a><span class="ln">   612</span>			} else {
<a id="L613"></a><span class="ln">   613</span>				p.fmt0x64(uint64(u), true)
<a id="L614"></a><span class="ln">   614</span>			}
<a id="L615"></a><span class="ln">   615</span>			p.add(&#39;)&#39;)
<a id="L616"></a><span class="ln">   616</span>		} else if verb == &#39;v&#39; &amp;&amp; u == 0 {
<a id="L617"></a><span class="ln">   617</span>			p.buf.Write(nilAngleBytes)
<a id="L618"></a><span class="ln">   618</span>		} else {
<a id="L619"></a><span class="ln">   619</span>			p.fmt0x64(uint64(u), !p.fmt.sharp)
<a id="L620"></a><span class="ln">   620</span>		}
<a id="L621"></a><span class="ln">   621</span>	}
<a id="L622"></a><span class="ln">   622</span>	
<a id="L623"></a><span class="ln">   623</span>	var (
<a id="L624"></a><span class="ln">   624</span>		intBits     = reflect.TypeOf(0).Bits()
<a id="L625"></a><span class="ln">   625</span>		floatBits   = reflect.TypeOf(0.0).Bits()
<a id="L626"></a><span class="ln">   626</span>		complexBits = reflect.TypeOf(1i).Bits()
<a id="L627"></a><span class="ln">   627</span>		uintptrBits = reflect.TypeOf(uintptr(0)).Bits()
<a id="L628"></a><span class="ln">   628</span>	)
<a id="L629"></a><span class="ln">   629</span>	
<a id="L630"></a><span class="ln">   630</span>	func (p *pp) catchPanic(field interface{}, verb rune) {
<a id="L631"></a><span class="ln">   631</span>		if err := recover(); err != nil {
<a id="L632"></a><span class="ln">   632</span>			<span class="comment">// If it&#39;s a nil pointer, just say &#34;&lt;nil&gt;&#34;. The likeliest causes are a</span>
<a id="L633"></a><span class="ln">   633</span>			<span class="comment">// Stringer that fails to guard against nil or a nil pointer for a</span>
<a id="L634"></a><span class="ln">   634</span>			<span class="comment">// value receiver, and in either case, &#34;&lt;nil&gt;&#34; is a nice result.</span>
<a id="L635"></a><span class="ln">   635</span>			if v := reflect.ValueOf(field); v.Kind() == reflect.Ptr &amp;&amp; v.IsNil() {
<a id="L636"></a><span class="ln">   636</span>				p.buf.Write(nilAngleBytes)
<a id="L637"></a><span class="ln">   637</span>				return
<a id="L638"></a><span class="ln">   638</span>			}
<a id="L639"></a><span class="ln">   639</span>			<span class="comment">// Otherwise print a concise panic message. Most of the time the panic</span>
<a id="L640"></a><span class="ln">   640</span>			<span class="comment">// value will print itself nicely.</span>
<a id="L641"></a><span class="ln">   641</span>			if p.panicking {
<a id="L642"></a><span class="ln">   642</span>				<span class="comment">// Nested panics; the recursion in printField cannot succeed.</span>
<a id="L643"></a><span class="ln">   643</span>				panic(err)
<a id="L644"></a><span class="ln">   644</span>			}
<a id="L645"></a><span class="ln">   645</span>			p.buf.WriteByte(&#39;%&#39;)
<a id="L646"></a><span class="ln">   646</span>			p.add(verb)
<a id="L647"></a><span class="ln">   647</span>			p.buf.Write(panicBytes)
<a id="L648"></a><span class="ln">   648</span>			p.panicking = true
<a id="L649"></a><span class="ln">   649</span>			p.printField(err, &#39;v&#39;, false, false, 0)
<a id="L650"></a><span class="ln">   650</span>			p.panicking = false
<a id="L651"></a><span class="ln">   651</span>			p.buf.WriteByte(&#39;)&#39;)
<a id="L652"></a><span class="ln">   652</span>		}
<a id="L653"></a><span class="ln">   653</span>	}
<a id="L654"></a><span class="ln">   654</span>	
<a id="L655"></a><span class="ln">   655</span>	func (p *pp) handleMethods(verb rune, plus, goSyntax bool, depth int) (wasString, handled bool) {
<a id="L656"></a><span class="ln">   656</span>		if p.erroring {
<a id="L657"></a><span class="ln">   657</span>			return
<a id="L658"></a><span class="ln">   658</span>		}
<a id="L659"></a><span class="ln">   659</span>		<span class="comment">// Is it a Formatter?</span>
<a id="L660"></a><span class="ln">   660</span>		if formatter, ok := p.field.(Formatter); ok {
<a id="L661"></a><span class="ln">   661</span>			handled = true
<a id="L662"></a><span class="ln">   662</span>			wasString = false
<a id="L663"></a><span class="ln">   663</span>			defer p.catchPanic(p.field, verb)
<a id="L664"></a><span class="ln">   664</span>			formatter.Format(p, verb)
<a id="L665"></a><span class="ln">   665</span>			return
<a id="L666"></a><span class="ln">   666</span>		}
<a id="L667"></a><span class="ln">   667</span>		<span class="comment">// Must not touch flags before Formatter looks at them.</span>
<a id="L668"></a><span class="ln">   668</span>		if plus {
<a id="L669"></a><span class="ln">   669</span>			p.fmt.plus = false
<a id="L670"></a><span class="ln">   670</span>		}
<a id="L671"></a><span class="ln">   671</span>	
<a id="L672"></a><span class="ln">   672</span>		<span class="comment">// If we&#39;re doing Go syntax and the field knows how to supply it, take care of it now.</span>
<a id="L673"></a><span class="ln">   673</span>		if goSyntax {
<a id="L674"></a><span class="ln">   674</span>			p.fmt.sharp = false
<a id="L675"></a><span class="ln">   675</span>			if stringer, ok := p.field.(GoStringer); ok {
<a id="L676"></a><span class="ln">   676</span>				wasString = false
<a id="L677"></a><span class="ln">   677</span>				handled = true
<a id="L678"></a><span class="ln">   678</span>				defer p.catchPanic(p.field, verb)
<a id="L679"></a><span class="ln">   679</span>				<span class="comment">// Print the result of GoString unadorned.</span>
<a id="L680"></a><span class="ln">   680</span>				p.fmtString(stringer.GoString(), &#39;s&#39;, false)
<a id="L681"></a><span class="ln">   681</span>				return
<a id="L682"></a><span class="ln">   682</span>			}
<a id="L683"></a><span class="ln">   683</span>		} else {
<a id="L684"></a><span class="ln">   684</span>			<span class="comment">// If a string is acceptable according to the format, see if</span>
<a id="L685"></a><span class="ln">   685</span>			<span class="comment">// the value satisfies one of the string-valued interfaces.</span>
<a id="L686"></a><span class="ln">   686</span>			<span class="comment">// Println etc. set verb to %v, which is &#34;stringable&#34;.</span>
<a id="L687"></a><span class="ln">   687</span>			switch verb {
<a id="L688"></a><span class="ln">   688</span>			case &#39;v&#39;, &#39;s&#39;, &#39;x&#39;, &#39;X&#39;, &#39;q&#39;:
<a id="L689"></a><span class="ln">   689</span>				<span class="comment">// Is it an error or Stringer?</span>
<a id="L690"></a><span class="ln">   690</span>				<span class="comment">// The duplication in the bodies is necessary:</span>
<a id="L691"></a><span class="ln">   691</span>				<span class="comment">// setting wasString and handled, and deferring catchPanic,</span>
<a id="L692"></a><span class="ln">   692</span>				<span class="comment">// must happen before calling the method.</span>
<a id="L693"></a><span class="ln">   693</span>				switch v := p.field.(type) {
<a id="L694"></a><span class="ln">   694</span>				case error:
<a id="L695"></a><span class="ln">   695</span>					wasString = false
<a id="L696"></a><span class="ln">   696</span>					handled = true
<a id="L697"></a><span class="ln">   697</span>					defer p.catchPanic(p.field, verb)
<a id="L698"></a><span class="ln">   698</span>					p.printField(v.Error(), verb, plus, false, depth)
<a id="L699"></a><span class="ln">   699</span>					return
<a id="L700"></a><span class="ln">   700</span>	
<a id="L701"></a><span class="ln">   701</span>				case Stringer:
<a id="L702"></a><span class="ln">   702</span>					wasString = false
<a id="L703"></a><span class="ln">   703</span>					handled = true
<a id="L704"></a><span class="ln">   704</span>					defer p.catchPanic(p.field, verb)
<a id="L705"></a><span class="ln">   705</span>					p.printField(v.String(), verb, plus, false, depth)
<a id="L706"></a><span class="ln">   706</span>					return
<a id="L707"></a><span class="ln">   707</span>				}
<a id="L708"></a><span class="ln">   708</span>			}
<a id="L709"></a><span class="ln">   709</span>		}
<a id="L710"></a><span class="ln">   710</span>		handled = false
<a id="L711"></a><span class="ln">   711</span>		return
<a id="L712"></a><span class="ln">   712</span>	}
<a id="L713"></a><span class="ln">   713</span>	
<a id="L714"></a><span class="ln">   714</span>	func (p *pp) printField(field interface{}, verb rune, plus, goSyntax bool, depth int) (wasString bool) {
<a id="L715"></a><span class="ln">   715</span>		if field == nil {
<a id="L716"></a><span class="ln">   716</span>			if verb == &#39;T&#39; || verb == &#39;v&#39; {
<a id="L717"></a><span class="ln">   717</span>				p.buf.Write(nilAngleBytes)
<a id="L718"></a><span class="ln">   718</span>			} else {
<a id="L719"></a><span class="ln">   719</span>				p.badVerb(verb)
<a id="L720"></a><span class="ln">   720</span>			}
<a id="L721"></a><span class="ln">   721</span>			return false
<a id="L722"></a><span class="ln">   722</span>		}
<a id="L723"></a><span class="ln">   723</span>	
<a id="L724"></a><span class="ln">   724</span>		p.field = field
<a id="L725"></a><span class="ln">   725</span>		p.value = reflect.Value{}
<a id="L726"></a><span class="ln">   726</span>		<span class="comment">// Special processing considerations.</span>
<a id="L727"></a><span class="ln">   727</span>		<span class="comment">// %T (the value&#39;s type) and %p (its address) are special; we always do them first.</span>
<a id="L728"></a><span class="ln">   728</span>		switch verb {
<a id="L729"></a><span class="ln">   729</span>		case &#39;T&#39;:
<a id="L730"></a><span class="ln">   730</span>			p.printField(reflect.TypeOf(field).String(), &#39;s&#39;, false, false, 0)
<a id="L731"></a><span class="ln">   731</span>			return false
<a id="L732"></a><span class="ln">   732</span>		case &#39;p&#39;:
<a id="L733"></a><span class="ln">   733</span>			p.fmtPointer(reflect.ValueOf(field), verb, goSyntax)
<a id="L734"></a><span class="ln">   734</span>			return false
<a id="L735"></a><span class="ln">   735</span>		}
<a id="L736"></a><span class="ln">   736</span>	
<a id="L737"></a><span class="ln">   737</span>		if wasString, handled := p.handleMethods(verb, plus, goSyntax, depth); handled {
<a id="L738"></a><span class="ln">   738</span>			return wasString
<a id="L739"></a><span class="ln">   739</span>		}
<a id="L740"></a><span class="ln">   740</span>	
<a id="L741"></a><span class="ln">   741</span>		<span class="comment">// Some types can be done without reflection.</span>
<a id="L742"></a><span class="ln">   742</span>		switch f := field.(type) {
<a id="L743"></a><span class="ln">   743</span>		case bool:
<a id="L744"></a><span class="ln">   744</span>			p.fmtBool(f, verb)
<a id="L745"></a><span class="ln">   745</span>		case float32:
<a id="L746"></a><span class="ln">   746</span>			p.fmtFloat32(f, verb)
<a id="L747"></a><span class="ln">   747</span>		case float64:
<a id="L748"></a><span class="ln">   748</span>			p.fmtFloat64(f, verb)
<a id="L749"></a><span class="ln">   749</span>		case complex64:
<a id="L750"></a><span class="ln">   750</span>			p.fmtComplex64(complex64(f), verb)
<a id="L751"></a><span class="ln">   751</span>		case complex128:
<a id="L752"></a><span class="ln">   752</span>			p.fmtComplex128(f, verb)
<a id="L753"></a><span class="ln">   753</span>		case int:
<a id="L754"></a><span class="ln">   754</span>			p.fmtInt64(int64(f), verb)
<a id="L755"></a><span class="ln">   755</span>		case int8:
<a id="L756"></a><span class="ln">   756</span>			p.fmtInt64(int64(f), verb)
<a id="L757"></a><span class="ln">   757</span>		case int16:
<a id="L758"></a><span class="ln">   758</span>			p.fmtInt64(int64(f), verb)
<a id="L759"></a><span class="ln">   759</span>		case int32:
<a id="L760"></a><span class="ln">   760</span>			p.fmtInt64(int64(f), verb)
<a id="L761"></a><span class="ln">   761</span>		case int64:
<a id="L762"></a><span class="ln">   762</span>			p.fmtInt64(f, verb)
<a id="L763"></a><span class="ln">   763</span>		case uint:
<a id="L764"></a><span class="ln">   764</span>			p.fmtUint64(uint64(f), verb, goSyntax)
<a id="L765"></a><span class="ln">   765</span>		case uint8:
<a id="L766"></a><span class="ln">   766</span>			p.fmtUint64(uint64(f), verb, goSyntax)
<a id="L767"></a><span class="ln">   767</span>		case uint16:
<a id="L768"></a><span class="ln">   768</span>			p.fmtUint64(uint64(f), verb, goSyntax)
<a id="L769"></a><span class="ln">   769</span>		case uint32:
<a id="L770"></a><span class="ln">   770</span>			p.fmtUint64(uint64(f), verb, goSyntax)
<a id="L771"></a><span class="ln">   771</span>		case uint64:
<a id="L772"></a><span class="ln">   772</span>			p.fmtUint64(f, verb, goSyntax)
<a id="L773"></a><span class="ln">   773</span>		case uintptr:
<a id="L774"></a><span class="ln">   774</span>			p.fmtUint64(uint64(f), verb, goSyntax)
<a id="L775"></a><span class="ln">   775</span>		case string:
<a id="L776"></a><span class="ln">   776</span>			p.fmtString(f, verb, goSyntax)
<a id="L777"></a><span class="ln">   777</span>			wasString = verb == &#39;s&#39; || verb == &#39;v&#39;
<a id="L778"></a><span class="ln">   778</span>		case []byte:
<a id="L779"></a><span class="ln">   779</span>			p.fmtBytes(f, verb, goSyntax, depth)
<a id="L780"></a><span class="ln">   780</span>			wasString = verb == &#39;s&#39;
<a id="L781"></a><span class="ln">   781</span>		default:
<a id="L782"></a><span class="ln">   782</span>			<span class="comment">// Need to use reflection</span>
<a id="L783"></a><span class="ln">   783</span>			return p.printReflectValue(reflect.ValueOf(field), verb, plus, goSyntax, depth)
<a id="L784"></a><span class="ln">   784</span>		}
<a id="L785"></a><span class="ln">   785</span>		p.field = nil
<a id="L786"></a><span class="ln">   786</span>		return
<a id="L787"></a><span class="ln">   787</span>	}
<a id="L788"></a><span class="ln">   788</span>	
<a id="L789"></a><span class="ln">   789</span>	<span class="comment">// printValue is like printField but starts with a reflect value, not an interface{} value.</span>
<a id="L790"></a><span class="ln">   790</span>	func (p *pp) printValue(value reflect.Value, verb rune, plus, goSyntax bool, depth int) (wasString bool) {
<a id="L791"></a><span class="ln">   791</span>		if !value.IsValid() {
<a id="L792"></a><span class="ln">   792</span>			if verb == &#39;T&#39; || verb == &#39;v&#39; {
<a id="L793"></a><span class="ln">   793</span>				p.buf.Write(nilAngleBytes)
<a id="L794"></a><span class="ln">   794</span>			} else {
<a id="L795"></a><span class="ln">   795</span>				p.badVerb(verb)
<a id="L796"></a><span class="ln">   796</span>			}
<a id="L797"></a><span class="ln">   797</span>			return false
<a id="L798"></a><span class="ln">   798</span>		}
<a id="L799"></a><span class="ln">   799</span>	
<a id="L800"></a><span class="ln">   800</span>		<span class="comment">// Special processing considerations.</span>
<a id="L801"></a><span class="ln">   801</span>		<span class="comment">// %T (the value&#39;s type) and %p (its address) are special; we always do them first.</span>
<a id="L802"></a><span class="ln">   802</span>		switch verb {
<a id="L803"></a><span class="ln">   803</span>		case &#39;T&#39;:
<a id="L804"></a><span class="ln">   804</span>			p.printField(value.Type().String(), &#39;s&#39;, false, false, 0)
<a id="L805"></a><span class="ln">   805</span>			return false
<a id="L806"></a><span class="ln">   806</span>		case &#39;p&#39;:
<a id="L807"></a><span class="ln">   807</span>			p.fmtPointer(value, verb, goSyntax)
<a id="L808"></a><span class="ln">   808</span>			return false
<a id="L809"></a><span class="ln">   809</span>		}
<a id="L810"></a><span class="ln">   810</span>	
<a id="L811"></a><span class="ln">   811</span>		<span class="comment">// Handle values with special methods.</span>
<a id="L812"></a><span class="ln">   812</span>		<span class="comment">// Call always, even when field == nil, because handleMethods clears p.fmt.plus for us.</span>
<a id="L813"></a><span class="ln">   813</span>		p.field = nil <span class="comment">// Make sure it&#39;s cleared, for safety.</span>
<a id="L814"></a><span class="ln">   814</span>		if value.CanInterface() {
<a id="L815"></a><span class="ln">   815</span>			p.field = value.Interface()
<a id="L816"></a><span class="ln">   816</span>		}
<a id="L817"></a><span class="ln">   817</span>		if wasString, handled := p.handleMethods(verb, plus, goSyntax, depth); handled {
<a id="L818"></a><span class="ln">   818</span>			return wasString
<a id="L819"></a><span class="ln">   819</span>		}
<a id="L820"></a><span class="ln">   820</span>	
<a id="L821"></a><span class="ln">   821</span>		return p.printReflectValue(value, verb, plus, goSyntax, depth)
<a id="L822"></a><span class="ln">   822</span>	}
<a id="L823"></a><span class="ln">   823</span>	
<a id="L824"></a><span class="ln">   824</span>	<span class="comment">// printReflectValue is the fallback for both printField and printValue.</span>
<a id="L825"></a><span class="ln">   825</span>	<span class="comment">// It uses reflect to print the value.</span>
<a id="L826"></a><span class="ln">   826</span>	func (p *pp) printReflectValue(value reflect.Value, verb rune, plus, goSyntax bool, depth int) (wasString bool) {
<a id="L827"></a><span class="ln">   827</span>		oldValue := p.value
<a id="L828"></a><span class="ln">   828</span>		p.value = value
<a id="L829"></a><span class="ln">   829</span>	BigSwitch:
<a id="L830"></a><span class="ln">   830</span>		switch f := value; f.Kind() {
<a id="L831"></a><span class="ln">   831</span>		case reflect.Bool:
<a id="L832"></a><span class="ln">   832</span>			p.fmtBool(f.Bool(), verb)
<a id="L833"></a><span class="ln">   833</span>		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<a id="L834"></a><span class="ln">   834</span>			p.fmtInt64(f.Int(), verb)
<a id="L835"></a><span class="ln">   835</span>		case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<a id="L836"></a><span class="ln">   836</span>			p.fmtUint64(uint64(f.Uint()), verb, goSyntax)
<a id="L837"></a><span class="ln">   837</span>		case reflect.Float32, reflect.Float64:
<a id="L838"></a><span class="ln">   838</span>			if f.Type().Size() == 4 {
<a id="L839"></a><span class="ln">   839</span>				p.fmtFloat32(float32(f.Float()), verb)
<a id="L840"></a><span class="ln">   840</span>			} else {
<a id="L841"></a><span class="ln">   841</span>				p.fmtFloat64(float64(f.Float()), verb)
<a id="L842"></a><span class="ln">   842</span>			}
<a id="L843"></a><span class="ln">   843</span>		case reflect.Complex64, reflect.Complex128:
<a id="L844"></a><span class="ln">   844</span>			if f.Type().Size() == 8 {
<a id="L845"></a><span class="ln">   845</span>				p.fmtComplex64(complex64(f.Complex()), verb)
<a id="L846"></a><span class="ln">   846</span>			} else {
<a id="L847"></a><span class="ln">   847</span>				p.fmtComplex128(complex128(f.Complex()), verb)
<a id="L848"></a><span class="ln">   848</span>			}
<a id="L849"></a><span class="ln">   849</span>		case reflect.String:
<a id="L850"></a><span class="ln">   850</span>			p.fmtString(f.String(), verb, goSyntax)
<a id="L851"></a><span class="ln">   851</span>		case reflect.Map:
<a id="L852"></a><span class="ln">   852</span>			if goSyntax {
<a id="L853"></a><span class="ln">   853</span>				p.buf.WriteString(f.Type().String())
<a id="L854"></a><span class="ln">   854</span>				if f.IsNil() {
<a id="L855"></a><span class="ln">   855</span>					p.buf.WriteString(&#34;(nil)&#34;)
<a id="L856"></a><span class="ln">   856</span>					break
<a id="L857"></a><span class="ln">   857</span>				}
<a id="L858"></a><span class="ln">   858</span>				p.buf.WriteByte(&#39;{&#39;)
<a id="L859"></a><span class="ln">   859</span>			} else {
<a id="L860"></a><span class="ln">   860</span>				p.buf.Write(mapBytes)
<a id="L861"></a><span class="ln">   861</span>			}
<a id="L862"></a><span class="ln">   862</span>			keys := f.MapKeys()
<a id="L863"></a><span class="ln">   863</span>			for i, key := range keys {
<a id="L864"></a><span class="ln">   864</span>				if i &gt; 0 {
<a id="L865"></a><span class="ln">   865</span>					if goSyntax {
<a id="L866"></a><span class="ln">   866</span>						p.buf.Write(commaSpaceBytes)
<a id="L867"></a><span class="ln">   867</span>					} else {
<a id="L868"></a><span class="ln">   868</span>						p.buf.WriteByte(&#39; &#39;)
<a id="L869"></a><span class="ln">   869</span>					}
<a id="L870"></a><span class="ln">   870</span>				}
<a id="L871"></a><span class="ln">   871</span>				p.printValue(key, verb, plus, goSyntax, depth+1)
<a id="L872"></a><span class="ln">   872</span>				p.buf.WriteByte(&#39;:&#39;)
<a id="L873"></a><span class="ln">   873</span>				p.printValue(f.MapIndex(key), verb, plus, goSyntax, depth+1)
<a id="L874"></a><span class="ln">   874</span>			}
<a id="L875"></a><span class="ln">   875</span>			if goSyntax {
<a id="L876"></a><span class="ln">   876</span>				p.buf.WriteByte(&#39;}&#39;)
<a id="L877"></a><span class="ln">   877</span>			} else {
<a id="L878"></a><span class="ln">   878</span>				p.buf.WriteByte(&#39;]&#39;)
<a id="L879"></a><span class="ln">   879</span>			}
<a id="L880"></a><span class="ln">   880</span>		case reflect.Struct:
<a id="L881"></a><span class="ln">   881</span>			if goSyntax {
<a id="L882"></a><span class="ln">   882</span>				p.buf.WriteString(value.Type().String())
<a id="L883"></a><span class="ln">   883</span>			}
<a id="L884"></a><span class="ln">   884</span>			p.add(&#39;{&#39;)
<a id="L885"></a><span class="ln">   885</span>			v := f
<a id="L886"></a><span class="ln">   886</span>			t := v.Type()
<a id="L887"></a><span class="ln">   887</span>			for i := 0; i &lt; v.NumField(); i++ {
<a id="L888"></a><span class="ln">   888</span>				if i &gt; 0 {
<a id="L889"></a><span class="ln">   889</span>					if goSyntax {
<a id="L890"></a><span class="ln">   890</span>						p.buf.Write(commaSpaceBytes)
<a id="L891"></a><span class="ln">   891</span>					} else {
<a id="L892"></a><span class="ln">   892</span>						p.buf.WriteByte(&#39; &#39;)
<a id="L893"></a><span class="ln">   893</span>					}
<a id="L894"></a><span class="ln">   894</span>				}
<a id="L895"></a><span class="ln">   895</span>				if plus || goSyntax {
<a id="L896"></a><span class="ln">   896</span>					if f := t.Field(i); f.Name != &#34;&#34; {
<a id="L897"></a><span class="ln">   897</span>						p.buf.WriteString(f.Name)
<a id="L898"></a><span class="ln">   898</span>						p.buf.WriteByte(&#39;:&#39;)
<a id="L899"></a><span class="ln">   899</span>					}
<a id="L900"></a><span class="ln">   900</span>				}
<a id="L901"></a><span class="ln">   901</span>				p.printValue(getField(v, i), verb, plus, goSyntax, depth+1)
<a id="L902"></a><span class="ln">   902</span>			}
<a id="L903"></a><span class="ln">   903</span>			p.buf.WriteByte(&#39;}&#39;)
<a id="L904"></a><span class="ln">   904</span>		case reflect.Interface:
<a id="L905"></a><span class="ln">   905</span>			value := f.Elem()
<a id="L906"></a><span class="ln">   906</span>			if !value.IsValid() {
<a id="L907"></a><span class="ln">   907</span>				if goSyntax {
<a id="L908"></a><span class="ln">   908</span>					p.buf.WriteString(f.Type().String())
<a id="L909"></a><span class="ln">   909</span>					p.buf.Write(nilParenBytes)
<a id="L910"></a><span class="ln">   910</span>				} else {
<a id="L911"></a><span class="ln">   911</span>					p.buf.Write(nilAngleBytes)
<a id="L912"></a><span class="ln">   912</span>				}
<a id="L913"></a><span class="ln">   913</span>			} else {
<a id="L914"></a><span class="ln">   914</span>				wasString = p.printValue(value, verb, plus, goSyntax, depth+1)
<a id="L915"></a><span class="ln">   915</span>			}
<a id="L916"></a><span class="ln">   916</span>		case reflect.Array, reflect.Slice:
<a id="L917"></a><span class="ln">   917</span>			<span class="comment">// Byte slices are special.</span>
<a id="L918"></a><span class="ln">   918</span>			if f.Type().Elem().Kind() == reflect.Uint8 {
<a id="L919"></a><span class="ln">   919</span>				<span class="comment">// We know it&#39;s a slice of bytes, but we also know it does not have static type</span>
<a id="L920"></a><span class="ln">   920</span>				<span class="comment">// []byte, or it would have been caught above.  Therefore we cannot convert</span>
<a id="L921"></a><span class="ln">   921</span>				<span class="comment">// it directly in the (slightly) obvious way: f.Interface().([]byte); it doesn&#39;t have</span>
<a id="L922"></a><span class="ln">   922</span>				<span class="comment">// that type, and we can&#39;t write an expression of the right type and do a</span>
<a id="L923"></a><span class="ln">   923</span>				<span class="comment">// conversion because we don&#39;t have a static way to write the right type.</span>
<a id="L924"></a><span class="ln">   924</span>				<span class="comment">// So we build a slice by hand.  This is a rare case but it would be nice</span>
<a id="L925"></a><span class="ln">   925</span>				<span class="comment">// if reflection could help a little more.</span>
<a id="L926"></a><span class="ln">   926</span>				bytes := make([]byte, f.Len())
<a id="L927"></a><span class="ln">   927</span>				for i := range bytes {
<a id="L928"></a><span class="ln">   928</span>					bytes[i] = byte(f.Index(i).Uint())
<a id="L929"></a><span class="ln">   929</span>				}
<a id="L930"></a><span class="ln">   930</span>				p.fmtBytes(bytes, verb, goSyntax, depth)
<a id="L931"></a><span class="ln">   931</span>				wasString = verb == &#39;s&#39;
<a id="L932"></a><span class="ln">   932</span>				break
<a id="L933"></a><span class="ln">   933</span>			}
<a id="L934"></a><span class="ln">   934</span>			if goSyntax {
<a id="L935"></a><span class="ln">   935</span>				p.buf.WriteString(value.Type().String())
<a id="L936"></a><span class="ln">   936</span>				if f.Kind() == reflect.Slice &amp;&amp; f.IsNil() {
<a id="L937"></a><span class="ln">   937</span>					p.buf.WriteString(&#34;(nil)&#34;)
<a id="L938"></a><span class="ln">   938</span>					break
<a id="L939"></a><span class="ln">   939</span>				}
<a id="L940"></a><span class="ln">   940</span>				p.buf.WriteByte(&#39;{&#39;)
<a id="L941"></a><span class="ln">   941</span>			} else {
<a id="L942"></a><span class="ln">   942</span>				p.buf.WriteByte(&#39;[&#39;)
<a id="L943"></a><span class="ln">   943</span>			}
<a id="L944"></a><span class="ln">   944</span>			for i := 0; i &lt; f.Len(); i++ {
<a id="L945"></a><span class="ln">   945</span>				if i &gt; 0 {
<a id="L946"></a><span class="ln">   946</span>					if goSyntax {
<a id="L947"></a><span class="ln">   947</span>						p.buf.Write(commaSpaceBytes)
<a id="L948"></a><span class="ln">   948</span>					} else {
<a id="L949"></a><span class="ln">   949</span>						p.buf.WriteByte(&#39; &#39;)
<a id="L950"></a><span class="ln">   950</span>					}
<a id="L951"></a><span class="ln">   951</span>				}
<a id="L952"></a><span class="ln">   952</span>				p.printValue(f.Index(i), verb, plus, goSyntax, depth+1)
<a id="L953"></a><span class="ln">   953</span>			}
<a id="L954"></a><span class="ln">   954</span>			if goSyntax {
<a id="L955"></a><span class="ln">   955</span>				p.buf.WriteByte(&#39;}&#39;)
<a id="L956"></a><span class="ln">   956</span>			} else {
<a id="L957"></a><span class="ln">   957</span>				p.buf.WriteByte(&#39;]&#39;)
<a id="L958"></a><span class="ln">   958</span>			}
<a id="L959"></a><span class="ln">   959</span>		case reflect.Ptr:
<a id="L960"></a><span class="ln">   960</span>			v := f.Pointer()
<a id="L961"></a><span class="ln">   961</span>			<span class="comment">// pointer to array or slice or struct?  ok at top level</span>
<a id="L962"></a><span class="ln">   962</span>			<span class="comment">// but not embedded (avoid loops)</span>
<a id="L963"></a><span class="ln">   963</span>			if v != 0 &amp;&amp; depth == 0 {
<a id="L964"></a><span class="ln">   964</span>				switch a := f.Elem(); a.Kind() {
<a id="L965"></a><span class="ln">   965</span>				case reflect.Array, reflect.Slice:
<a id="L966"></a><span class="ln">   966</span>					p.buf.WriteByte(&#39;&amp;&#39;)
<a id="L967"></a><span class="ln">   967</span>					p.printValue(a, verb, plus, goSyntax, depth+1)
<a id="L968"></a><span class="ln">   968</span>					break BigSwitch
<a id="L969"></a><span class="ln">   969</span>				case reflect.Struct:
<a id="L970"></a><span class="ln">   970</span>					p.buf.WriteByte(&#39;&amp;&#39;)
<a id="L971"></a><span class="ln">   971</span>					p.printValue(a, verb, plus, goSyntax, depth+1)
<a id="L972"></a><span class="ln">   972</span>					break BigSwitch
<a id="L973"></a><span class="ln">   973</span>				}
<a id="L974"></a><span class="ln">   974</span>			}
<a id="L975"></a><span class="ln">   975</span>			fallthrough
<a id="L976"></a><span class="ln">   976</span>		case reflect.Chan, reflect.Func, reflect.UnsafePointer:
<a id="L977"></a><span class="ln">   977</span>			p.fmtPointer(value, verb, goSyntax)
<a id="L978"></a><span class="ln">   978</span>		default:
<a id="L979"></a><span class="ln">   979</span>			p.unknownType(f)
<a id="L980"></a><span class="ln">   980</span>		}
<a id="L981"></a><span class="ln">   981</span>		p.value = oldValue
<a id="L982"></a><span class="ln">   982</span>		return wasString
<a id="L983"></a><span class="ln">   983</span>	}
<a id="L984"></a><span class="ln">   984</span>	
<a id="L985"></a><span class="ln">   985</span>	<span class="comment">// intFromArg gets the fieldnumth element of a. On return, isInt reports whether the argument has type int.</span>
<a id="L986"></a><span class="ln">   986</span>	func intFromArg(a []interface{}, end, i, fieldnum int) (num int, isInt bool, newi, newfieldnum int) {
<a id="L987"></a><span class="ln">   987</span>		newi, newfieldnum = end, fieldnum
<a id="L988"></a><span class="ln">   988</span>		if i &lt; end &amp;&amp; fieldnum &lt; len(a) {
<a id="L989"></a><span class="ln">   989</span>			num, isInt = a[fieldnum].(int)
<a id="L990"></a><span class="ln">   990</span>			newi, newfieldnum = i+1, fieldnum+1
<a id="L991"></a><span class="ln">   991</span>		}
<a id="L992"></a><span class="ln">   992</span>		return
<a id="L993"></a><span class="ln">   993</span>	}
<a id="L994"></a><span class="ln">   994</span>	
<a id="L995"></a><span class="ln">   995</span>	func (p *pp) doPrintf(format string, a []interface{}) {
<a id="L996"></a><span class="ln">   996</span>		end := len(format)
<a id="L997"></a><span class="ln">   997</span>		fieldnum := 0 <span class="comment">// we process one field per non-trivial format</span>
<a id="L998"></a><span class="ln">   998</span>		for i := 0; i &lt; end; {
<a id="L999"></a><span class="ln">   999</span>			lasti := i
<a id="L1000"></a><span class="ln">  1000</span>			for i &lt; end &amp;&amp; format[i] != &#39;%&#39; {
<a id="L1001"></a><span class="ln">  1001</span>				i++
<a id="L1002"></a><span class="ln">  1002</span>			}
<a id="L1003"></a><span class="ln">  1003</span>			if i &gt; lasti {
<a id="L1004"></a><span class="ln">  1004</span>				p.buf.WriteString(format[lasti:i])
<a id="L1005"></a><span class="ln">  1005</span>			}
<a id="L1006"></a><span class="ln">  1006</span>			if i &gt;= end {
<a id="L1007"></a><span class="ln">  1007</span>				<span class="comment">// done processing format string</span>
<a id="L1008"></a><span class="ln">  1008</span>				break
<a id="L1009"></a><span class="ln">  1009</span>			}
<a id="L1010"></a><span class="ln">  1010</span>	
<a id="L1011"></a><span class="ln">  1011</span>			<span class="comment">// Process one verb</span>
<a id="L1012"></a><span class="ln">  1012</span>			i++
<a id="L1013"></a><span class="ln">  1013</span>			<span class="comment">// flags and widths</span>
<a id="L1014"></a><span class="ln">  1014</span>			p.fmt.clearflags()
<a id="L1015"></a><span class="ln">  1015</span>		F:
<a id="L1016"></a><span class="ln">  1016</span>			for ; i &lt; end; i++ {
<a id="L1017"></a><span class="ln">  1017</span>				switch format[i] {
<a id="L1018"></a><span class="ln">  1018</span>				case &#39;#&#39;:
<a id="L1019"></a><span class="ln">  1019</span>					p.fmt.sharp = true
<a id="L1020"></a><span class="ln">  1020</span>				case &#39;0&#39;:
<a id="L1021"></a><span class="ln">  1021</span>					p.fmt.zero = true
<a id="L1022"></a><span class="ln">  1022</span>				case &#39;+&#39;:
<a id="L1023"></a><span class="ln">  1023</span>					p.fmt.plus = true
<a id="L1024"></a><span class="ln">  1024</span>				case &#39;-&#39;:
<a id="L1025"></a><span class="ln">  1025</span>					p.fmt.minus = true
<a id="L1026"></a><span class="ln">  1026</span>				case &#39; &#39;:
<a id="L1027"></a><span class="ln">  1027</span>					p.fmt.space = true
<a id="L1028"></a><span class="ln">  1028</span>				default:
<a id="L1029"></a><span class="ln">  1029</span>					break F
<a id="L1030"></a><span class="ln">  1030</span>				}
<a id="L1031"></a><span class="ln">  1031</span>			}
<a id="L1032"></a><span class="ln">  1032</span>			<span class="comment">// do we have width?</span>
<a id="L1033"></a><span class="ln">  1033</span>			if i &lt; end &amp;&amp; format[i] == &#39;*&#39; {
<a id="L1034"></a><span class="ln">  1034</span>				p.fmt.wid, p.fmt.widPresent, i, fieldnum = intFromArg(a, end, i, fieldnum)
<a id="L1035"></a><span class="ln">  1035</span>				if !p.fmt.widPresent {
<a id="L1036"></a><span class="ln">  1036</span>					p.buf.Write(widthBytes)
<a id="L1037"></a><span class="ln">  1037</span>				}
<a id="L1038"></a><span class="ln">  1038</span>			} else {
<a id="L1039"></a><span class="ln">  1039</span>				p.fmt.wid, p.fmt.widPresent, i = parsenum(format, i, end)
<a id="L1040"></a><span class="ln">  1040</span>			}
<a id="L1041"></a><span class="ln">  1041</span>			<span class="comment">// do we have precision?</span>
<a id="L1042"></a><span class="ln">  1042</span>			if i &lt; end &amp;&amp; format[i] == &#39;.&#39; {
<a id="L1043"></a><span class="ln">  1043</span>				if format[i+1] == &#39;*&#39; {
<a id="L1044"></a><span class="ln">  1044</span>					p.fmt.prec, p.fmt.precPresent, i, fieldnum = intFromArg(a, end, i+1, fieldnum)
<a id="L1045"></a><span class="ln">  1045</span>					if !p.fmt.precPresent {
<a id="L1046"></a><span class="ln">  1046</span>						p.buf.Write(precBytes)
<a id="L1047"></a><span class="ln">  1047</span>					}
<a id="L1048"></a><span class="ln">  1048</span>				} else {
<a id="L1049"></a><span class="ln">  1049</span>					p.fmt.prec, p.fmt.precPresent, i = parsenum(format, i+1, end)
<a id="L1050"></a><span class="ln">  1050</span>					if !p.fmt.precPresent {
<a id="L1051"></a><span class="ln">  1051</span>						p.fmt.prec = 0
<a id="L1052"></a><span class="ln">  1052</span>						p.fmt.precPresent = true
<a id="L1053"></a><span class="ln">  1053</span>					}
<a id="L1054"></a><span class="ln">  1054</span>				}
<a id="L1055"></a><span class="ln">  1055</span>			}
<a id="L1056"></a><span class="ln">  1056</span>			if i &gt;= end {
<a id="L1057"></a><span class="ln">  1057</span>				p.buf.Write(noVerbBytes)
<a id="L1058"></a><span class="ln">  1058</span>				continue
<a id="L1059"></a><span class="ln">  1059</span>			}
<a id="L1060"></a><span class="ln">  1060</span>			c, w := utf8.DecodeRuneInString(format[i:])
<a id="L1061"></a><span class="ln">  1061</span>			i += w
<a id="L1062"></a><span class="ln">  1062</span>			<span class="comment">// percent is special - absorbs no operand</span>
<a id="L1063"></a><span class="ln">  1063</span>			if c == &#39;%&#39; {
<a id="L1064"></a><span class="ln">  1064</span>				p.buf.WriteByte(&#39;%&#39;) <span class="comment">// We ignore width and prec.</span>
<a id="L1065"></a><span class="ln">  1065</span>				continue
<a id="L1066"></a><span class="ln">  1066</span>			}
<a id="L1067"></a><span class="ln">  1067</span>			if fieldnum &gt;= len(a) { <span class="comment">// out of operands</span>
<a id="L1068"></a><span class="ln">  1068</span>				p.buf.WriteByte(&#39;%&#39;)
<a id="L1069"></a><span class="ln">  1069</span>				p.add(c)
<a id="L1070"></a><span class="ln">  1070</span>				p.buf.Write(missingBytes)
<a id="L1071"></a><span class="ln">  1071</span>				continue
<a id="L1072"></a><span class="ln">  1072</span>			}
<a id="L1073"></a><span class="ln">  1073</span>			field := a[fieldnum]
<a id="L1074"></a><span class="ln">  1074</span>			fieldnum++
<a id="L1075"></a><span class="ln">  1075</span>	
<a id="L1076"></a><span class="ln">  1076</span>			goSyntax := c == &#39;v&#39; &amp;&amp; p.fmt.sharp
<a id="L1077"></a><span class="ln">  1077</span>			plus := c == &#39;v&#39; &amp;&amp; p.fmt.plus
<a id="L1078"></a><span class="ln">  1078</span>			p.printField(field, c, plus, goSyntax, 0)
<a id="L1079"></a><span class="ln">  1079</span>		}
<a id="L1080"></a><span class="ln">  1080</span>	
<a id="L1081"></a><span class="ln">  1081</span>		if fieldnum &lt; len(a) {
<a id="L1082"></a><span class="ln">  1082</span>			p.buf.Write(extraBytes)
<a id="L1083"></a><span class="ln">  1083</span>			for ; fieldnum &lt; len(a); fieldnum++ {
<a id="L1084"></a><span class="ln">  1084</span>				field := a[fieldnum]
<a id="L1085"></a><span class="ln">  1085</span>				if field != nil {
<a id="L1086"></a><span class="ln">  1086</span>					p.buf.WriteString(reflect.TypeOf(field).String())
<a id="L1087"></a><span class="ln">  1087</span>					p.buf.WriteByte(&#39;=&#39;)
<a id="L1088"></a><span class="ln">  1088</span>				}
<a id="L1089"></a><span class="ln">  1089</span>				p.printField(field, &#39;v&#39;, false, false, 0)
<a id="L1090"></a><span class="ln">  1090</span>				if fieldnum+1 &lt; len(a) {
<a id="L1091"></a><span class="ln">  1091</span>					p.buf.Write(commaSpaceBytes)
<a id="L1092"></a><span class="ln">  1092</span>				}
<a id="L1093"></a><span class="ln">  1093</span>			}
<a id="L1094"></a><span class="ln">  1094</span>			p.buf.WriteByte(&#39;)&#39;)
<a id="L1095"></a><span class="ln">  1095</span>		}
<a id="L1096"></a><span class="ln">  1096</span>	}
<a id="L1097"></a><span class="ln">  1097</span>	
<a id="L1098"></a><span class="ln">  1098</span>	func (p *pp) doPrint(a []interface{}, addspace, addnewline bool) {
<a id="L1099"></a><span class="ln">  1099</span>		prevString := false
<a id="L1100"></a><span class="ln">  1100</span>		for fieldnum := 0; fieldnum &lt; len(a); fieldnum++ {
<a id="L1101"></a><span class="ln">  1101</span>			p.fmt.clearflags()
<a id="L1102"></a><span class="ln">  1102</span>			<span class="comment">// always add spaces if we&#39;re doing println</span>
<a id="L1103"></a><span class="ln">  1103</span>			field := a[fieldnum]
<a id="L1104"></a><span class="ln">  1104</span>			if fieldnum &gt; 0 {
<a id="L1105"></a><span class="ln">  1105</span>				isString := field != nil &amp;&amp; reflect.TypeOf(field).Kind() == reflect.String
<a id="L1106"></a><span class="ln">  1106</span>				if addspace || !isString &amp;&amp; !prevString {
<a id="L1107"></a><span class="ln">  1107</span>					p.buf.WriteByte(&#39; &#39;)
<a id="L1108"></a><span class="ln">  1108</span>				}
<a id="L1109"></a><span class="ln">  1109</span>			}
<a id="L1110"></a><span class="ln">  1110</span>			prevString = p.printField(field, &#39;v&#39;, false, false, 0)
<a id="L1111"></a><span class="ln">  1111</span>		}
<a id="L1112"></a><span class="ln">  1112</span>		if addnewline {
<a id="L1113"></a><span class="ln">  1113</span>			p.buf.WriteByte(&#39;\n&#39;)
<a id="L1114"></a><span class="ln">  1114</span>		}
<a id="L1115"></a><span class="ln">  1115</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

