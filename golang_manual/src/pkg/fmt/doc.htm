<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/fmt/doc.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/fmt/doc.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">/*
</span><a id="L6"></a><span class="ln">     6</span>	<span class="comment">	Package fmt implements formatted I/O with functions analogous
</span><a id="L7"></a><span class="ln">     7</span>	<span class="comment">	to C&#39;s printf and scanf.  The format &#39;verbs&#39; are derived from C&#39;s but
</span><a id="L8"></a><span class="ln">     8</span>	<span class="comment">	are simpler.
</span><a id="L9"></a><span class="ln">     9</span>	<span class="comment">
</span><a id="L10"></a><span class="ln">    10</span>	<span class="comment">
</span><a id="L11"></a><span class="ln">    11</span>	<span class="comment">	Printing
</span><a id="L12"></a><span class="ln">    12</span>	<span class="comment">
</span><a id="L13"></a><span class="ln">    13</span>	<span class="comment">	The verbs:
</span><a id="L14"></a><span class="ln">    14</span>	<span class="comment">
</span><a id="L15"></a><span class="ln">    15</span>	<span class="comment">	General:
</span><a id="L16"></a><span class="ln">    16</span>	<span class="comment">		%v	the value in a default format.
</span><a id="L17"></a><span class="ln">    17</span>	<span class="comment">			when printing structs, the plus flag (%+v) adds field names
</span><a id="L18"></a><span class="ln">    18</span>	<span class="comment">		%#v	a Go-syntax representation of the value
</span><a id="L19"></a><span class="ln">    19</span>	<span class="comment">		%T	a Go-syntax representation of the type of the value
</span><a id="L20"></a><span class="ln">    20</span>	<span class="comment">		%%	a literal percent sign; consumes no value
</span><a id="L21"></a><span class="ln">    21</span>	<span class="comment">
</span><a id="L22"></a><span class="ln">    22</span>	<span class="comment">	Boolean:
</span><a id="L23"></a><span class="ln">    23</span>	<span class="comment">		%t	the word true or false
</span><a id="L24"></a><span class="ln">    24</span>	<span class="comment">	Integer:
</span><a id="L25"></a><span class="ln">    25</span>	<span class="comment">		%b	base 2
</span><a id="L26"></a><span class="ln">    26</span>	<span class="comment">		%c	the character represented by the corresponding Unicode code point
</span><a id="L27"></a><span class="ln">    27</span>	<span class="comment">		%d	base 10
</span><a id="L28"></a><span class="ln">    28</span>	<span class="comment">		%o	base 8
</span><a id="L29"></a><span class="ln">    29</span>	<span class="comment">		%q	a single-quoted character literal safely escaped with Go syntax.
</span><a id="L30"></a><span class="ln">    30</span>	<span class="comment">		%x	base 16, with lower-case letters for a-f
</span><a id="L31"></a><span class="ln">    31</span>	<span class="comment">		%X	base 16, with upper-case letters for A-F
</span><a id="L32"></a><span class="ln">    32</span>	<span class="comment">		%U	Unicode format: U+1234; same as &#34;U+%04X&#34;
</span><a id="L33"></a><span class="ln">    33</span>	<span class="comment">	Floating-point and complex constituents:
</span><a id="L34"></a><span class="ln">    34</span>	<span class="comment">		%b	decimalless scientific notation with exponent a power of two, 
</span><a id="L35"></a><span class="ln">    35</span>	<span class="comment">			in the manner of strconv.FormatFloat with the &#39;b&#39; format, 
</span><a id="L36"></a><span class="ln">    36</span>	<span class="comment">			e.g. -123456p-78
</span><a id="L37"></a><span class="ln">    37</span>	<span class="comment">		%e	scientific notation, e.g. -1234.456e+78
</span><a id="L38"></a><span class="ln">    38</span>	<span class="comment">		%E	scientific notation, e.g. -1234.456E+78
</span><a id="L39"></a><span class="ln">    39</span>	<span class="comment">		%f	decimal point but no exponent, e.g. 123.456
</span><a id="L40"></a><span class="ln">    40</span>	<span class="comment">		%g	whichever of %e or %f produces more compact output
</span><a id="L41"></a><span class="ln">    41</span>	<span class="comment">		%G	whichever of %E or %f produces more compact output
</span><a id="L42"></a><span class="ln">    42</span>	<span class="comment">	String and slice of bytes:
</span><a id="L43"></a><span class="ln">    43</span>	<span class="comment">		%s	the uninterpreted bytes of the string or slice
</span><a id="L44"></a><span class="ln">    44</span>	<span class="comment">		%q	a double-quoted string safely escaped with Go syntax
</span><a id="L45"></a><span class="ln">    45</span>	<span class="comment">		%x	base 16, lower-case, two characters per byte
</span><a id="L46"></a><span class="ln">    46</span>	<span class="comment">		%X	base 16, upper-case, two characters per byte
</span><a id="L47"></a><span class="ln">    47</span>	<span class="comment">	Pointer:
</span><a id="L48"></a><span class="ln">    48</span>	<span class="comment">		%p	base 16 notation, with leading 0x
</span><a id="L49"></a><span class="ln">    49</span>	<span class="comment">
</span><a id="L50"></a><span class="ln">    50</span>	<span class="comment">	There is no &#39;u&#39; flag.  Integers are printed unsigned if they have unsigned type.
</span><a id="L51"></a><span class="ln">    51</span>	<span class="comment">	Similarly, there is no need to specify the size of the operand (int8, int64).
</span><a id="L52"></a><span class="ln">    52</span>	<span class="comment">
</span><a id="L53"></a><span class="ln">    53</span>	<span class="comment">	The width and precision control formatting and are in units of Unicode
</span><a id="L54"></a><span class="ln">    54</span>	<span class="comment">	code points.  (This differs from C&#39;s printf where the units are numbers
</span><a id="L55"></a><span class="ln">    55</span>	<span class="comment">	of bytes.) Either or both of the flags may be replaced with the
</span><a id="L56"></a><span class="ln">    56</span>	<span class="comment">	character &#39;*&#39;, causing their values to be obtained from the next
</span><a id="L57"></a><span class="ln">    57</span>	<span class="comment">	operand, which must be of type int.
</span><a id="L58"></a><span class="ln">    58</span>	<span class="comment">
</span><a id="L59"></a><span class="ln">    59</span>	<span class="comment">	For numeric values, width sets the width of the field and precision
</span><a id="L60"></a><span class="ln">    60</span>	<span class="comment">	sets the number of places after the decimal, if appropriate.  For
</span><a id="L61"></a><span class="ln">    61</span>	<span class="comment">	example, the format %6.2f prints 123.45.
</span><a id="L62"></a><span class="ln">    62</span>	<span class="comment">
</span><a id="L63"></a><span class="ln">    63</span>	<span class="comment">	For strings, width is the minimum number of characters to output,
</span><a id="L64"></a><span class="ln">    64</span>	<span class="comment">	padding with spaces if necessary, and precision is the maximum
</span><a id="L65"></a><span class="ln">    65</span>	<span class="comment">	number of characters to output, truncating if necessary.
</span><a id="L66"></a><span class="ln">    66</span>	<span class="comment">
</span><a id="L67"></a><span class="ln">    67</span>	<span class="comment">	Other flags:
</span><a id="L68"></a><span class="ln">    68</span>	<span class="comment">		+	always print a sign for numeric values;
</span><a id="L69"></a><span class="ln">    69</span>	<span class="comment">			guarantee ASCII-only output for %q (%+q)
</span><a id="L70"></a><span class="ln">    70</span>	<span class="comment">		-	pad with spaces on the right rather than the left (left-justify the field)
</span><a id="L71"></a><span class="ln">    71</span>	<span class="comment">		#	alternate format: add leading 0 for octal (%#o), 0x for hex (%#x);
</span><a id="L72"></a><span class="ln">    72</span>	<span class="comment">			0X for hex (%#X); suppress 0x for %p (%#p);
</span><a id="L73"></a><span class="ln">    73</span>	<span class="comment">			print a raw (backquoted) string if possible for %q (%#q);
</span><a id="L74"></a><span class="ln">    74</span>	<span class="comment">			write e.g. U+0078 &#39;x&#39; if the character is printable for %U (%#U).
</span><a id="L75"></a><span class="ln">    75</span>	<span class="comment">		&#39; &#39;	(space) leave a space for elided sign in numbers (% d);
</span><a id="L76"></a><span class="ln">    76</span>	<span class="comment">			put spaces between bytes printing strings or slices in hex (% x, % X)
</span><a id="L77"></a><span class="ln">    77</span>	<span class="comment">		0	pad with leading zeros rather than spaces
</span><a id="L78"></a><span class="ln">    78</span>	<span class="comment">
</span><a id="L79"></a><span class="ln">    79</span>	<span class="comment">	For each Printf-like function, there is also a Print function
</span><a id="L80"></a><span class="ln">    80</span>	<span class="comment">	that takes no format and is equivalent to saying %v for every
</span><a id="L81"></a><span class="ln">    81</span>	<span class="comment">	operand.  Another variant Println inserts blanks between
</span><a id="L82"></a><span class="ln">    82</span>	<span class="comment">	operands and appends a newline.
</span><a id="L83"></a><span class="ln">    83</span>	<span class="comment">
</span><a id="L84"></a><span class="ln">    84</span>	<span class="comment">	Regardless of the verb, if an operand is an interface value,
</span><a id="L85"></a><span class="ln">    85</span>	<span class="comment">	the internal concrete value is used, not the interface itself.
</span><a id="L86"></a><span class="ln">    86</span>	<span class="comment">	Thus:
</span><a id="L87"></a><span class="ln">    87</span>	<span class="comment">		var i interface{} = 23
</span><a id="L88"></a><span class="ln">    88</span>	<span class="comment">		fmt.Printf(&#34;%v\n&#34;, i)
</span><a id="L89"></a><span class="ln">    89</span>	<span class="comment">	will print 23.
</span><a id="L90"></a><span class="ln">    90</span>	<span class="comment">
</span><a id="L91"></a><span class="ln">    91</span>	<span class="comment">	If an operand implements interface Formatter, that interface
</span><a id="L92"></a><span class="ln">    92</span>	<span class="comment">	can be used for fine control of formatting.
</span><a id="L93"></a><span class="ln">    93</span>	<span class="comment">
</span><a id="L94"></a><span class="ln">    94</span>	<span class="comment">	If the format (which is implicitly %v for Println etc.) is valid
</span><a id="L95"></a><span class="ln">    95</span>	<span class="comment">	for a string (%s %q %v %x %X), the following two rules also apply:
</span><a id="L96"></a><span class="ln">    96</span>	<span class="comment">
</span><a id="L97"></a><span class="ln">    97</span>	<span class="comment">	1. If an operand implements the error interface, the Error method
</span><a id="L98"></a><span class="ln">    98</span>	<span class="comment">	will be used to convert the object to a string, which will then
</span><a id="L99"></a><span class="ln">    99</span>	<span class="comment">	be formatted as required by the verb (if any).
</span><a id="L100"></a><span class="ln">   100</span>	<span class="comment">
</span><a id="L101"></a><span class="ln">   101</span>	<span class="comment">	2. If an operand implements method String() string, that method
</span><a id="L102"></a><span class="ln">   102</span>	<span class="comment">	will be used to convert the object to a string, which will then
</span><a id="L103"></a><span class="ln">   103</span>	<span class="comment">	be formatted as required by the verb (if any).
</span><a id="L104"></a><span class="ln">   104</span>	<span class="comment">
</span><a id="L105"></a><span class="ln">   105</span>	<span class="comment">	To avoid recursion in cases such as
</span><a id="L106"></a><span class="ln">   106</span>	<span class="comment">		type X string
</span><a id="L107"></a><span class="ln">   107</span>	<span class="comment">		func (x X) String() string { return Sprintf(&#34;&lt;%s&gt;&#34;, x) }
</span><a id="L108"></a><span class="ln">   108</span>	<span class="comment">	convert the value before recurring:
</span><a id="L109"></a><span class="ln">   109</span>	<span class="comment">		func (x X) String() string { return Sprintf(&#34;&lt;%s&gt;&#34;, string(x)) }
</span><a id="L110"></a><span class="ln">   110</span>	<span class="comment">
</span><a id="L111"></a><span class="ln">   111</span>	<span class="comment">	Format errors:
</span><a id="L112"></a><span class="ln">   112</span>	<span class="comment">
</span><a id="L113"></a><span class="ln">   113</span>	<span class="comment">	If an invalid argument is given for a verb, such as providing
</span><a id="L114"></a><span class="ln">   114</span>	<span class="comment">	a string to %d, the generated string will contain a
</span><a id="L115"></a><span class="ln">   115</span>	<span class="comment">	description of the problem, as in these examples:
</span><a id="L116"></a><span class="ln">   116</span>	<span class="comment">
</span><a id="L117"></a><span class="ln">   117</span>	<span class="comment">		Wrong type or unknown verb: %!verb(type=value)
</span><a id="L118"></a><span class="ln">   118</span>	<span class="comment">			Printf(&#34;%d&#34;, hi):          %!d(string=hi)
</span><a id="L119"></a><span class="ln">   119</span>	<span class="comment">		Too many arguments: %!(EXTRA type=value)
</span><a id="L120"></a><span class="ln">   120</span>	<span class="comment">			Printf(&#34;hi&#34;, &#34;guys&#34;):      hi%!(EXTRA string=guys)
</span><a id="L121"></a><span class="ln">   121</span>	<span class="comment">		Too few arguments: %!verb(MISSING)
</span><a id="L122"></a><span class="ln">   122</span>	<span class="comment">			Printf(&#34;hi%d&#34;):            hi %!d(MISSING)
</span><a id="L123"></a><span class="ln">   123</span>	<span class="comment">		Non-int for width or precision: %!(BADWIDTH) or %!(BADPREC)
</span><a id="L124"></a><span class="ln">   124</span>	<span class="comment">			Printf(&#34;%*s&#34;, 4.5, &#34;hi&#34;):  %!(BADWIDTH)hi
</span><a id="L125"></a><span class="ln">   125</span>	<span class="comment">			Printf(&#34;%.*s&#34;, 4.5, &#34;hi&#34;): %!(BADPREC)hi
</span><a id="L126"></a><span class="ln">   126</span>	<span class="comment">
</span><a id="L127"></a><span class="ln">   127</span>	<span class="comment">	All errors begin with the string &#34;%!&#34; followed sometimes
</span><a id="L128"></a><span class="ln">   128</span>	<span class="comment">	by a single character (the verb) and end with a parenthesized
</span><a id="L129"></a><span class="ln">   129</span>	<span class="comment">	description.
</span><a id="L130"></a><span class="ln">   130</span>	<span class="comment">
</span><a id="L131"></a><span class="ln">   131</span>	<span class="comment">
</span><a id="L132"></a><span class="ln">   132</span>	<span class="comment">	Scanning
</span><a id="L133"></a><span class="ln">   133</span>	<span class="comment">
</span><a id="L134"></a><span class="ln">   134</span>	<span class="comment">	An analogous set of functions scans formatted text to yield
</span><a id="L135"></a><span class="ln">   135</span>	<span class="comment">	values.  Scan, Scanf and Scanln read from os.Stdin; Fscan,
</span><a id="L136"></a><span class="ln">   136</span>	<span class="comment">	Fscanf and Fscanln read from a specified io.Reader; Sscan,
</span><a id="L137"></a><span class="ln">   137</span>	<span class="comment">	Sscanf and Sscanln read from an argument string.  Scanln,
</span><a id="L138"></a><span class="ln">   138</span>	<span class="comment">	Fscanln and Sscanln stop scanning at a newline and require that
</span><a id="L139"></a><span class="ln">   139</span>	<span class="comment">	the items be followed by one; Sscanf, Fscanf and Sscanf require
</span><a id="L140"></a><span class="ln">   140</span>	<span class="comment">	newlines in the input to match newlines in the format; the other
</span><a id="L141"></a><span class="ln">   141</span>	<span class="comment">	routines treat newlines as spaces.
</span><a id="L142"></a><span class="ln">   142</span>	<span class="comment">
</span><a id="L143"></a><span class="ln">   143</span>	<span class="comment">	Scanf, Fscanf, and Sscanf parse the arguments according to a
</span><a id="L144"></a><span class="ln">   144</span>	<span class="comment">	format string, analogous to that of Printf.  For example, %x
</span><a id="L145"></a><span class="ln">   145</span>	<span class="comment">	will scan an integer as a hexadecimal number, and %v will scan
</span><a id="L146"></a><span class="ln">   146</span>	<span class="comment">	the default representation format for the value.
</span><a id="L147"></a><span class="ln">   147</span>	<span class="comment">
</span><a id="L148"></a><span class="ln">   148</span>	<span class="comment">	The formats behave analogously to those of Printf with the
</span><a id="L149"></a><span class="ln">   149</span>	<span class="comment">	following exceptions:
</span><a id="L150"></a><span class="ln">   150</span>	<span class="comment">
</span><a id="L151"></a><span class="ln">   151</span>	<span class="comment">		%p is not implemented
</span><a id="L152"></a><span class="ln">   152</span>	<span class="comment">		%T is not implemented
</span><a id="L153"></a><span class="ln">   153</span>	<span class="comment">		%e %E %f %F %g %G are all equivalent and scan any floating point or complex value
</span><a id="L154"></a><span class="ln">   154</span>	<span class="comment">		%s and %v on strings scan a space-delimited token
</span><a id="L155"></a><span class="ln">   155</span>	<span class="comment">
</span><a id="L156"></a><span class="ln">   156</span>	<span class="comment">	The familiar base-setting prefixes 0 (octal) and 0x
</span><a id="L157"></a><span class="ln">   157</span>	<span class="comment">	(hexadecimal) are accepted when scanning integers without a
</span><a id="L158"></a><span class="ln">   158</span>	<span class="comment">	format or with the %v verb.
</span><a id="L159"></a><span class="ln">   159</span>	<span class="comment">
</span><a id="L160"></a><span class="ln">   160</span>	<span class="comment">	Width is interpreted in the input text (%5s means at most
</span><a id="L161"></a><span class="ln">   161</span>	<span class="comment">	five runes of input will be read to scan a string) but there
</span><a id="L162"></a><span class="ln">   162</span>	<span class="comment">	is no syntax for scanning with a precision (no %5.2f, just
</span><a id="L163"></a><span class="ln">   163</span>	<span class="comment">	%5f).
</span><a id="L164"></a><span class="ln">   164</span>	<span class="comment">
</span><a id="L165"></a><span class="ln">   165</span>	<span class="comment">	When scanning with a format, all non-empty runs of space
</span><a id="L166"></a><span class="ln">   166</span>	<span class="comment">	characters (except newline) are equivalent to a single
</span><a id="L167"></a><span class="ln">   167</span>	<span class="comment">	space in both the format and the input.  With that proviso,
</span><a id="L168"></a><span class="ln">   168</span>	<span class="comment">	text in the format string must match the input text; scanning
</span><a id="L169"></a><span class="ln">   169</span>	<span class="comment">	stops if it does not, with the return value of the function
</span><a id="L170"></a><span class="ln">   170</span>	<span class="comment">	indicating the number of arguments scanned.
</span><a id="L171"></a><span class="ln">   171</span>	<span class="comment">
</span><a id="L172"></a><span class="ln">   172</span>	<span class="comment">	In all the scanning functions, if an operand implements method
</span><a id="L173"></a><span class="ln">   173</span>	<span class="comment">	Scan (that is, it implements the Scanner interface) that
</span><a id="L174"></a><span class="ln">   174</span>	<span class="comment">	method will be used to scan the text for that operand.  Also,
</span><a id="L175"></a><span class="ln">   175</span>	<span class="comment">	if the number of arguments scanned is less than the number of
</span><a id="L176"></a><span class="ln">   176</span>	<span class="comment">	arguments provided, an error is returned.
</span><a id="L177"></a><span class="ln">   177</span>	<span class="comment">
</span><a id="L178"></a><span class="ln">   178</span>	<span class="comment">	All arguments to be scanned must be either pointers to basic
</span><a id="L179"></a><span class="ln">   179</span>	<span class="comment">	types or implementations of the Scanner interface.
</span><a id="L180"></a><span class="ln">   180</span>	<span class="comment">
</span><a id="L181"></a><span class="ln">   181</span>	<span class="comment">	Note: Fscan etc. can read one character (rune) past the input
</span><a id="L182"></a><span class="ln">   182</span>	<span class="comment">	they return, which means that a loop calling a scan routine
</span><a id="L183"></a><span class="ln">   183</span>	<span class="comment">	may skip some of the input.  This is usually a problem only
</span><a id="L184"></a><span class="ln">   184</span>	<span class="comment">	when there is no space between input values.  If the reader
</span><a id="L185"></a><span class="ln">   185</span>	<span class="comment">	provided to Fscan implements ReadRune, that method will be used
</span><a id="L186"></a><span class="ln">   186</span>	<span class="comment">	to read characters.  If the reader also implements UnreadRune,
</span><a id="L187"></a><span class="ln">   187</span>	<span class="comment">	that method will be used to save the character and successive
</span><a id="L188"></a><span class="ln">   188</span>	<span class="comment">	calls will not lose data.  To attach ReadRune and UnreadRune
</span><a id="L189"></a><span class="ln">   189</span>	<span class="comment">	methods to a reader without that capability, use
</span><a id="L190"></a><span class="ln">   190</span>	<span class="comment">	bufio.NewReader.
</span><a id="L191"></a><span class="ln">   191</span>	<span class="comment">*/</span>
<a id="L192"></a><span class="ln">   192</span>	package fmt
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

