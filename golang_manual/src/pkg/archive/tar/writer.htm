<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/archive/tar/writer.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/archive/tar/writer.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package tar
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// TODO(dsymonds):</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// - catch more errors (no first header, etc.)</span>
<a id="L9"></a><span class="ln">     9</span>	
<a id="L10"></a><span class="ln">    10</span>	import (
<a id="L11"></a><span class="ln">    11</span>		&#34;errors&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;fmt&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;io&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;strconv&#34;
<a id="L15"></a><span class="ln">    15</span>	)
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	var (
<a id="L18"></a><span class="ln">    18</span>		ErrWriteTooLong    = errors.New(&#34;archive/tar: write too long&#34;)
<a id="L19"></a><span class="ln">    19</span>		ErrFieldTooLong    = errors.New(&#34;archive/tar: header field too long&#34;)
<a id="L20"></a><span class="ln">    20</span>		ErrWriteAfterClose = errors.New(&#34;archive/tar: write after close&#34;)
<a id="L21"></a><span class="ln">    21</span>	)
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// A Writer provides sequential writing of a tar archive in POSIX.1 format.</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// A tar archive consists of a sequence of files.</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// Call WriteHeader to begin a new file, and then call Write to supply that file&#39;s data,</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// writing at most hdr.Size bytes in total.</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">//</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// Example:</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">//	tw := tar.NewWriter(w)</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">//	hdr := new(Header)</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">//	hdr.Size = length of data in bytes</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">//	// populate other hdr fields as desired</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">//	if err := tw.WriteHeader(hdr); err != nil {</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">//		// handle error</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//	}</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//	io.Copy(tw, data)</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">//	tw.Close()</span>
<a id="L38"></a><span class="ln">    38</span>	type Writer struct {
<a id="L39"></a><span class="ln">    39</span>		w          io.Writer
<a id="L40"></a><span class="ln">    40</span>		err        error
<a id="L41"></a><span class="ln">    41</span>		nb         int64 <span class="comment">// number of unwritten bytes for current file entry</span>
<a id="L42"></a><span class="ln">    42</span>		pad        int64 <span class="comment">// amount of padding to write after current file entry</span>
<a id="L43"></a><span class="ln">    43</span>		closed     bool
<a id="L44"></a><span class="ln">    44</span>		usedBinary bool <span class="comment">// whether the binary numeric field extension was used</span>
<a id="L45"></a><span class="ln">    45</span>	}
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">// NewWriter creates a new Writer writing to w.</span>
<a id="L48"></a><span class="ln">    48</span>	func NewWriter(w io.Writer) *Writer { return &amp;Writer{w: w} }
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// Flush finishes writing the current file (optional).</span>
<a id="L51"></a><span class="ln">    51</span>	func (tw *Writer) Flush() error {
<a id="L52"></a><span class="ln">    52</span>		if tw.nb &gt; 0 {
<a id="L53"></a><span class="ln">    53</span>			tw.err = fmt.Errorf(&#34;archive/tar: missed writing %d bytes&#34;, tw.nb)
<a id="L54"></a><span class="ln">    54</span>			return tw.err
<a id="L55"></a><span class="ln">    55</span>		}
<a id="L56"></a><span class="ln">    56</span>	
<a id="L57"></a><span class="ln">    57</span>		n := tw.nb + tw.pad
<a id="L58"></a><span class="ln">    58</span>		for n &gt; 0 &amp;&amp; tw.err == nil {
<a id="L59"></a><span class="ln">    59</span>			nr := n
<a id="L60"></a><span class="ln">    60</span>			if nr &gt; blockSize {
<a id="L61"></a><span class="ln">    61</span>				nr = blockSize
<a id="L62"></a><span class="ln">    62</span>			}
<a id="L63"></a><span class="ln">    63</span>			var nw int
<a id="L64"></a><span class="ln">    64</span>			nw, tw.err = tw.w.Write(zeroBlock[0:nr])
<a id="L65"></a><span class="ln">    65</span>			n -= int64(nw)
<a id="L66"></a><span class="ln">    66</span>		}
<a id="L67"></a><span class="ln">    67</span>		tw.nb = 0
<a id="L68"></a><span class="ln">    68</span>		tw.pad = 0
<a id="L69"></a><span class="ln">    69</span>		return tw.err
<a id="L70"></a><span class="ln">    70</span>	}
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">// Write s into b, terminating it with a NUL if there is room.</span>
<a id="L73"></a><span class="ln">    73</span>	func (tw *Writer) cString(b []byte, s string) {
<a id="L74"></a><span class="ln">    74</span>		if len(s) &gt; len(b) {
<a id="L75"></a><span class="ln">    75</span>			if tw.err == nil {
<a id="L76"></a><span class="ln">    76</span>				tw.err = ErrFieldTooLong
<a id="L77"></a><span class="ln">    77</span>			}
<a id="L78"></a><span class="ln">    78</span>			return
<a id="L79"></a><span class="ln">    79</span>		}
<a id="L80"></a><span class="ln">    80</span>		copy(b, s)
<a id="L81"></a><span class="ln">    81</span>		if len(s) &lt; len(b) {
<a id="L82"></a><span class="ln">    82</span>			b[len(s)] = 0
<a id="L83"></a><span class="ln">    83</span>		}
<a id="L84"></a><span class="ln">    84</span>	}
<a id="L85"></a><span class="ln">    85</span>	
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// Encode x as an octal ASCII string and write it into b with leading zeros.</span>
<a id="L87"></a><span class="ln">    87</span>	func (tw *Writer) octal(b []byte, x int64) {
<a id="L88"></a><span class="ln">    88</span>		s := strconv.FormatInt(x, 8)
<a id="L89"></a><span class="ln">    89</span>		<span class="comment">// leading zeros, but leave room for a NUL.</span>
<a id="L90"></a><span class="ln">    90</span>		for len(s)+1 &lt; len(b) {
<a id="L91"></a><span class="ln">    91</span>			s = &#34;0&#34; + s
<a id="L92"></a><span class="ln">    92</span>		}
<a id="L93"></a><span class="ln">    93</span>		tw.cString(b, s)
<a id="L94"></a><span class="ln">    94</span>	}
<a id="L95"></a><span class="ln">    95</span>	
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">// Write x into b, either as octal or as binary (GNUtar/star extension).</span>
<a id="L97"></a><span class="ln">    97</span>	func (tw *Writer) numeric(b []byte, x int64) {
<a id="L98"></a><span class="ln">    98</span>		<span class="comment">// Try octal first.</span>
<a id="L99"></a><span class="ln">    99</span>		s := strconv.FormatInt(x, 8)
<a id="L100"></a><span class="ln">   100</span>		if len(s) &lt; len(b) {
<a id="L101"></a><span class="ln">   101</span>			tw.octal(b, x)
<a id="L102"></a><span class="ln">   102</span>			return
<a id="L103"></a><span class="ln">   103</span>		}
<a id="L104"></a><span class="ln">   104</span>		<span class="comment">// Too big: use binary (big-endian).</span>
<a id="L105"></a><span class="ln">   105</span>		tw.usedBinary = true
<a id="L106"></a><span class="ln">   106</span>		for i := len(b) - 1; x &gt; 0 &amp;&amp; i &gt;= 0; i-- {
<a id="L107"></a><span class="ln">   107</span>			b[i] = byte(x)
<a id="L108"></a><span class="ln">   108</span>			x &gt;&gt;= 8
<a id="L109"></a><span class="ln">   109</span>		}
<a id="L110"></a><span class="ln">   110</span>		b[0] |= 0x80 <span class="comment">// highest bit indicates binary format</span>
<a id="L111"></a><span class="ln">   111</span>	}
<a id="L112"></a><span class="ln">   112</span>	
<a id="L113"></a><span class="ln">   113</span>	<span class="comment">// WriteHeader writes hdr and prepares to accept the file&#39;s contents.</span>
<a id="L114"></a><span class="ln">   114</span>	<span class="comment">// WriteHeader calls Flush if it is not the first header.</span>
<a id="L115"></a><span class="ln">   115</span>	<span class="comment">// Calling after a Close will return ErrWriteAfterClose.</span>
<a id="L116"></a><span class="ln">   116</span>	func (tw *Writer) WriteHeader(hdr *Header) error {
<a id="L117"></a><span class="ln">   117</span>		if tw.closed {
<a id="L118"></a><span class="ln">   118</span>			return ErrWriteAfterClose
<a id="L119"></a><span class="ln">   119</span>		}
<a id="L120"></a><span class="ln">   120</span>		if tw.err == nil {
<a id="L121"></a><span class="ln">   121</span>			tw.Flush()
<a id="L122"></a><span class="ln">   122</span>		}
<a id="L123"></a><span class="ln">   123</span>		if tw.err != nil {
<a id="L124"></a><span class="ln">   124</span>			return tw.err
<a id="L125"></a><span class="ln">   125</span>		}
<a id="L126"></a><span class="ln">   126</span>	
<a id="L127"></a><span class="ln">   127</span>		tw.nb = int64(hdr.Size)
<a id="L128"></a><span class="ln">   128</span>		tw.pad = -tw.nb &amp; (blockSize - 1) <span class="comment">// blockSize is a power of two</span>
<a id="L129"></a><span class="ln">   129</span>	
<a id="L130"></a><span class="ln">   130</span>		header := make([]byte, blockSize)
<a id="L131"></a><span class="ln">   131</span>		s := slicer(header)
<a id="L132"></a><span class="ln">   132</span>	
<a id="L133"></a><span class="ln">   133</span>		<span class="comment">// TODO(dsymonds): handle names longer than 100 chars</span>
<a id="L134"></a><span class="ln">   134</span>		copy(s.next(100), []byte(hdr.Name))
<a id="L135"></a><span class="ln">   135</span>	
<a id="L136"></a><span class="ln">   136</span>		tw.octal(s.next(8), hdr.Mode)              <span class="comment">// 100:108</span>
<a id="L137"></a><span class="ln">   137</span>		tw.numeric(s.next(8), int64(hdr.Uid))      <span class="comment">// 108:116</span>
<a id="L138"></a><span class="ln">   138</span>		tw.numeric(s.next(8), int64(hdr.Gid))      <span class="comment">// 116:124</span>
<a id="L139"></a><span class="ln">   139</span>		tw.numeric(s.next(12), hdr.Size)           <span class="comment">// 124:136</span>
<a id="L140"></a><span class="ln">   140</span>		tw.numeric(s.next(12), hdr.ModTime.Unix()) <span class="comment">// 136:148</span>
<a id="L141"></a><span class="ln">   141</span>		s.next(8)                                  <span class="comment">// chksum (148:156)</span>
<a id="L142"></a><span class="ln">   142</span>		s.next(1)[0] = hdr.Typeflag                <span class="comment">// 156:157</span>
<a id="L143"></a><span class="ln">   143</span>		tw.cString(s.next(100), hdr.Linkname)      <span class="comment">// linkname (157:257)</span>
<a id="L144"></a><span class="ln">   144</span>		copy(s.next(8), []byte(&#34;ustar\x0000&#34;))     <span class="comment">// 257:265</span>
<a id="L145"></a><span class="ln">   145</span>		tw.cString(s.next(32), hdr.Uname)          <span class="comment">// 265:297</span>
<a id="L146"></a><span class="ln">   146</span>		tw.cString(s.next(32), hdr.Gname)          <span class="comment">// 297:329</span>
<a id="L147"></a><span class="ln">   147</span>		tw.numeric(s.next(8), hdr.Devmajor)        <span class="comment">// 329:337</span>
<a id="L148"></a><span class="ln">   148</span>		tw.numeric(s.next(8), hdr.Devminor)        <span class="comment">// 337:345</span>
<a id="L149"></a><span class="ln">   149</span>	
<a id="L150"></a><span class="ln">   150</span>		<span class="comment">// Use the GNU magic instead of POSIX magic if we used any GNU extensions.</span>
<a id="L151"></a><span class="ln">   151</span>		if tw.usedBinary {
<a id="L152"></a><span class="ln">   152</span>			copy(header[257:265], []byte(&#34;ustar  \x00&#34;))
<a id="L153"></a><span class="ln">   153</span>		}
<a id="L154"></a><span class="ln">   154</span>	
<a id="L155"></a><span class="ln">   155</span>		<span class="comment">// The chksum field is terminated by a NUL and a space.</span>
<a id="L156"></a><span class="ln">   156</span>		<span class="comment">// This is different from the other octal fields.</span>
<a id="L157"></a><span class="ln">   157</span>		chksum, _ := checksum(header)
<a id="L158"></a><span class="ln">   158</span>		tw.octal(header[148:155], chksum)
<a id="L159"></a><span class="ln">   159</span>		header[155] = &#39; &#39;
<a id="L160"></a><span class="ln">   160</span>	
<a id="L161"></a><span class="ln">   161</span>		if tw.err != nil {
<a id="L162"></a><span class="ln">   162</span>			<span class="comment">// problem with header; probably integer too big for a field.</span>
<a id="L163"></a><span class="ln">   163</span>			return tw.err
<a id="L164"></a><span class="ln">   164</span>		}
<a id="L165"></a><span class="ln">   165</span>	
<a id="L166"></a><span class="ln">   166</span>		_, tw.err = tw.w.Write(header)
<a id="L167"></a><span class="ln">   167</span>	
<a id="L168"></a><span class="ln">   168</span>		return tw.err
<a id="L169"></a><span class="ln">   169</span>	}
<a id="L170"></a><span class="ln">   170</span>	
<a id="L171"></a><span class="ln">   171</span>	<span class="comment">// Write writes to the current entry in the tar archive.</span>
<a id="L172"></a><span class="ln">   172</span>	<span class="comment">// Write returns the error ErrWriteTooLong if more than</span>
<a id="L173"></a><span class="ln">   173</span>	<span class="comment">// hdr.Size bytes are written after WriteHeader.</span>
<a id="L174"></a><span class="ln">   174</span>	func (tw *Writer) Write(b []byte) (n int, err error) {
<a id="L175"></a><span class="ln">   175</span>		if tw.closed {
<a id="L176"></a><span class="ln">   176</span>			err = ErrWriteTooLong
<a id="L177"></a><span class="ln">   177</span>			return
<a id="L178"></a><span class="ln">   178</span>		}
<a id="L179"></a><span class="ln">   179</span>		overwrite := false
<a id="L180"></a><span class="ln">   180</span>		if int64(len(b)) &gt; tw.nb {
<a id="L181"></a><span class="ln">   181</span>			b = b[0:tw.nb]
<a id="L182"></a><span class="ln">   182</span>			overwrite = true
<a id="L183"></a><span class="ln">   183</span>		}
<a id="L184"></a><span class="ln">   184</span>		n, err = tw.w.Write(b)
<a id="L185"></a><span class="ln">   185</span>		tw.nb -= int64(n)
<a id="L186"></a><span class="ln">   186</span>		if err == nil &amp;&amp; overwrite {
<a id="L187"></a><span class="ln">   187</span>			err = ErrWriteTooLong
<a id="L188"></a><span class="ln">   188</span>			return
<a id="L189"></a><span class="ln">   189</span>		}
<a id="L190"></a><span class="ln">   190</span>		tw.err = err
<a id="L191"></a><span class="ln">   191</span>		return
<a id="L192"></a><span class="ln">   192</span>	}
<a id="L193"></a><span class="ln">   193</span>	
<a id="L194"></a><span class="ln">   194</span>	<span class="comment">// Close closes the tar archive, flushing any unwritten</span>
<a id="L195"></a><span class="ln">   195</span>	<span class="comment">// data to the underlying writer.</span>
<a id="L196"></a><span class="ln">   196</span>	func (tw *Writer) Close() error {
<a id="L197"></a><span class="ln">   197</span>		if tw.err != nil || tw.closed {
<a id="L198"></a><span class="ln">   198</span>			return tw.err
<a id="L199"></a><span class="ln">   199</span>		}
<a id="L200"></a><span class="ln">   200</span>		tw.Flush()
<a id="L201"></a><span class="ln">   201</span>		tw.closed = true
<a id="L202"></a><span class="ln">   202</span>		if tw.err != nil {
<a id="L203"></a><span class="ln">   203</span>			return tw.err
<a id="L204"></a><span class="ln">   204</span>		}
<a id="L205"></a><span class="ln">   205</span>	
<a id="L206"></a><span class="ln">   206</span>		<span class="comment">// trailer: two zero blocks</span>
<a id="L207"></a><span class="ln">   207</span>		for i := 0; i &lt; 2; i++ {
<a id="L208"></a><span class="ln">   208</span>			_, tw.err = tw.w.Write(zeroBlock)
<a id="L209"></a><span class="ln">   209</span>			if tw.err != nil {
<a id="L210"></a><span class="ln">   210</span>				break
<a id="L211"></a><span class="ln">   211</span>			}
<a id="L212"></a><span class="ln">   212</span>		}
<a id="L213"></a><span class="ln">   213</span>		return tw.err
<a id="L214"></a><span class="ln">   214</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

