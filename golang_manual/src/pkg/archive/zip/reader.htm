<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/archive/zip/reader.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/archive/zip/reader.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package zip
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bufio&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;compress/flate&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;encoding/binary&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;errors&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;hash&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;hash/crc32&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;io&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;io/ioutil&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;os&#34;
<a id="L17"></a><span class="ln">    17</span>	)
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	var (
<a id="L20"></a><span class="ln">    20</span>		ErrFormat    = errors.New(&#34;zip: not a valid zip file&#34;)
<a id="L21"></a><span class="ln">    21</span>		ErrAlgorithm = errors.New(&#34;zip: unsupported compression algorithm&#34;)
<a id="L22"></a><span class="ln">    22</span>		ErrChecksum  = errors.New(&#34;zip: checksum error&#34;)
<a id="L23"></a><span class="ln">    23</span>	)
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	type Reader struct {
<a id="L26"></a><span class="ln">    26</span>		r       io.ReaderAt
<a id="L27"></a><span class="ln">    27</span>		File    []*File
<a id="L28"></a><span class="ln">    28</span>		Comment string
<a id="L29"></a><span class="ln">    29</span>	}
<a id="L30"></a><span class="ln">    30</span>	
<a id="L31"></a><span class="ln">    31</span>	type ReadCloser struct {
<a id="L32"></a><span class="ln">    32</span>		f *os.File
<a id="L33"></a><span class="ln">    33</span>		Reader
<a id="L34"></a><span class="ln">    34</span>	}
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>	type File struct {
<a id="L37"></a><span class="ln">    37</span>		FileHeader
<a id="L38"></a><span class="ln">    38</span>		zipr         io.ReaderAt
<a id="L39"></a><span class="ln">    39</span>		zipsize      int64
<a id="L40"></a><span class="ln">    40</span>		headerOffset int64
<a id="L41"></a><span class="ln">    41</span>	}
<a id="L42"></a><span class="ln">    42</span>	
<a id="L43"></a><span class="ln">    43</span>	func (f *File) hasDataDescriptor() bool {
<a id="L44"></a><span class="ln">    44</span>		return f.Flags&amp;0x8 != 0
<a id="L45"></a><span class="ln">    45</span>	}
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">// OpenReader will open the Zip file specified by name and return a ReadCloser.</span>
<a id="L48"></a><span class="ln">    48</span>	func OpenReader(name string) (*ReadCloser, error) {
<a id="L49"></a><span class="ln">    49</span>		f, err := os.Open(name)
<a id="L50"></a><span class="ln">    50</span>		if err != nil {
<a id="L51"></a><span class="ln">    51</span>			return nil, err
<a id="L52"></a><span class="ln">    52</span>		}
<a id="L53"></a><span class="ln">    53</span>		fi, err := f.Stat()
<a id="L54"></a><span class="ln">    54</span>		if err != nil {
<a id="L55"></a><span class="ln">    55</span>			f.Close()
<a id="L56"></a><span class="ln">    56</span>			return nil, err
<a id="L57"></a><span class="ln">    57</span>		}
<a id="L58"></a><span class="ln">    58</span>		r := new(ReadCloser)
<a id="L59"></a><span class="ln">    59</span>		if err := r.init(f, fi.Size()); err != nil {
<a id="L60"></a><span class="ln">    60</span>			f.Close()
<a id="L61"></a><span class="ln">    61</span>			return nil, err
<a id="L62"></a><span class="ln">    62</span>		}
<a id="L63"></a><span class="ln">    63</span>		r.f = f
<a id="L64"></a><span class="ln">    64</span>		return r, nil
<a id="L65"></a><span class="ln">    65</span>	}
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// NewReader returns a new Reader reading from r, which is assumed to</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// have the given size in bytes.</span>
<a id="L69"></a><span class="ln">    69</span>	func NewReader(r io.ReaderAt, size int64) (*Reader, error) {
<a id="L70"></a><span class="ln">    70</span>		zr := new(Reader)
<a id="L71"></a><span class="ln">    71</span>		if err := zr.init(r, size); err != nil {
<a id="L72"></a><span class="ln">    72</span>			return nil, err
<a id="L73"></a><span class="ln">    73</span>		}
<a id="L74"></a><span class="ln">    74</span>		return zr, nil
<a id="L75"></a><span class="ln">    75</span>	}
<a id="L76"></a><span class="ln">    76</span>	
<a id="L77"></a><span class="ln">    77</span>	func (z *Reader) init(r io.ReaderAt, size int64) error {
<a id="L78"></a><span class="ln">    78</span>		end, err := readDirectoryEnd(r, size)
<a id="L79"></a><span class="ln">    79</span>		if err != nil {
<a id="L80"></a><span class="ln">    80</span>			return err
<a id="L81"></a><span class="ln">    81</span>		}
<a id="L82"></a><span class="ln">    82</span>		z.r = r
<a id="L83"></a><span class="ln">    83</span>		z.File = make([]*File, 0, end.directoryRecords)
<a id="L84"></a><span class="ln">    84</span>		z.Comment = end.comment
<a id="L85"></a><span class="ln">    85</span>		rs := io.NewSectionReader(r, 0, size)
<a id="L86"></a><span class="ln">    86</span>		if _, err = rs.Seek(int64(end.directoryOffset), os.SEEK_SET); err != nil {
<a id="L87"></a><span class="ln">    87</span>			return err
<a id="L88"></a><span class="ln">    88</span>		}
<a id="L89"></a><span class="ln">    89</span>		buf := bufio.NewReader(rs)
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>		<span class="comment">// The count of files inside a zip is truncated to fit in a uint16.</span>
<a id="L92"></a><span class="ln">    92</span>		<span class="comment">// Gloss over this by reading headers until we encounter</span>
<a id="L93"></a><span class="ln">    93</span>		<span class="comment">// a bad one, and then only report a ErrFormat or UnexpectedEOF if</span>
<a id="L94"></a><span class="ln">    94</span>		<span class="comment">// the file count modulo 65536 is incorrect.</span>
<a id="L95"></a><span class="ln">    95</span>		for {
<a id="L96"></a><span class="ln">    96</span>			f := &amp;File{zipr: r, zipsize: size}
<a id="L97"></a><span class="ln">    97</span>			err = readDirectoryHeader(f, buf)
<a id="L98"></a><span class="ln">    98</span>			if err == ErrFormat || err == io.ErrUnexpectedEOF {
<a id="L99"></a><span class="ln">    99</span>				break
<a id="L100"></a><span class="ln">   100</span>			}
<a id="L101"></a><span class="ln">   101</span>			if err != nil {
<a id="L102"></a><span class="ln">   102</span>				return err
<a id="L103"></a><span class="ln">   103</span>			}
<a id="L104"></a><span class="ln">   104</span>			z.File = append(z.File, f)
<a id="L105"></a><span class="ln">   105</span>		}
<a id="L106"></a><span class="ln">   106</span>		if uint16(len(z.File)) != end.directoryRecords {
<a id="L107"></a><span class="ln">   107</span>			<span class="comment">// Return the readDirectoryHeader error if we read</span>
<a id="L108"></a><span class="ln">   108</span>			<span class="comment">// the wrong number of directory entries.</span>
<a id="L109"></a><span class="ln">   109</span>			return err
<a id="L110"></a><span class="ln">   110</span>		}
<a id="L111"></a><span class="ln">   111</span>		return nil
<a id="L112"></a><span class="ln">   112</span>	}
<a id="L113"></a><span class="ln">   113</span>	
<a id="L114"></a><span class="ln">   114</span>	<span class="comment">// Close closes the Zip file, rendering it unusable for I/O.</span>
<a id="L115"></a><span class="ln">   115</span>	func (rc *ReadCloser) Close() error {
<a id="L116"></a><span class="ln">   116</span>		return rc.f.Close()
<a id="L117"></a><span class="ln">   117</span>	}
<a id="L118"></a><span class="ln">   118</span>	
<a id="L119"></a><span class="ln">   119</span>	<span class="comment">// Open returns a ReadCloser that provides access to the File&#39;s contents.</span>
<a id="L120"></a><span class="ln">   120</span>	<span class="comment">// Multiple files may be read concurrently.</span>
<a id="L121"></a><span class="ln">   121</span>	func (f *File) Open() (rc io.ReadCloser, err error) {
<a id="L122"></a><span class="ln">   122</span>		bodyOffset, err := f.findBodyOffset()
<a id="L123"></a><span class="ln">   123</span>		if err != nil {
<a id="L124"></a><span class="ln">   124</span>			return
<a id="L125"></a><span class="ln">   125</span>		}
<a id="L126"></a><span class="ln">   126</span>		size := int64(f.CompressedSize)
<a id="L127"></a><span class="ln">   127</span>		r := io.NewSectionReader(f.zipr, f.headerOffset+bodyOffset, size)
<a id="L128"></a><span class="ln">   128</span>		switch f.Method {
<a id="L129"></a><span class="ln">   129</span>		case Store: <span class="comment">// (no compression)</span>
<a id="L130"></a><span class="ln">   130</span>			rc = ioutil.NopCloser(r)
<a id="L131"></a><span class="ln">   131</span>		case Deflate:
<a id="L132"></a><span class="ln">   132</span>			rc = flate.NewReader(r)
<a id="L133"></a><span class="ln">   133</span>		default:
<a id="L134"></a><span class="ln">   134</span>			err = ErrAlgorithm
<a id="L135"></a><span class="ln">   135</span>			return
<a id="L136"></a><span class="ln">   136</span>		}
<a id="L137"></a><span class="ln">   137</span>		var desr io.Reader
<a id="L138"></a><span class="ln">   138</span>		if f.hasDataDescriptor() {
<a id="L139"></a><span class="ln">   139</span>			desr = io.NewSectionReader(f.zipr, f.headerOffset+bodyOffset+size, dataDescriptorLen)
<a id="L140"></a><span class="ln">   140</span>		}
<a id="L141"></a><span class="ln">   141</span>		rc = &amp;checksumReader{rc, crc32.NewIEEE(), f, desr, nil}
<a id="L142"></a><span class="ln">   142</span>		return
<a id="L143"></a><span class="ln">   143</span>	}
<a id="L144"></a><span class="ln">   144</span>	
<a id="L145"></a><span class="ln">   145</span>	type checksumReader struct {
<a id="L146"></a><span class="ln">   146</span>		rc   io.ReadCloser
<a id="L147"></a><span class="ln">   147</span>		hash hash.Hash32
<a id="L148"></a><span class="ln">   148</span>		f    *File
<a id="L149"></a><span class="ln">   149</span>		desr io.Reader <span class="comment">// if non-nil, where to read the data descriptor</span>
<a id="L150"></a><span class="ln">   150</span>		err  error     <span class="comment">// sticky error</span>
<a id="L151"></a><span class="ln">   151</span>	}
<a id="L152"></a><span class="ln">   152</span>	
<a id="L153"></a><span class="ln">   153</span>	func (r *checksumReader) Read(b []byte) (n int, err error) {
<a id="L154"></a><span class="ln">   154</span>		if r.err != nil {
<a id="L155"></a><span class="ln">   155</span>			return 0, r.err
<a id="L156"></a><span class="ln">   156</span>		}
<a id="L157"></a><span class="ln">   157</span>		n, err = r.rc.Read(b)
<a id="L158"></a><span class="ln">   158</span>		r.hash.Write(b[:n])
<a id="L159"></a><span class="ln">   159</span>		if err == nil {
<a id="L160"></a><span class="ln">   160</span>			return
<a id="L161"></a><span class="ln">   161</span>		}
<a id="L162"></a><span class="ln">   162</span>		if err == io.EOF {
<a id="L163"></a><span class="ln">   163</span>			if r.desr != nil {
<a id="L164"></a><span class="ln">   164</span>				if err1 := readDataDescriptor(r.desr, r.f); err1 != nil {
<a id="L165"></a><span class="ln">   165</span>					err = err1
<a id="L166"></a><span class="ln">   166</span>				} else if r.hash.Sum32() != r.f.CRC32 {
<a id="L167"></a><span class="ln">   167</span>					err = ErrChecksum
<a id="L168"></a><span class="ln">   168</span>				}
<a id="L169"></a><span class="ln">   169</span>			} else {
<a id="L170"></a><span class="ln">   170</span>				<span class="comment">// If there&#39;s not a data descriptor, we still compare</span>
<a id="L171"></a><span class="ln">   171</span>				<span class="comment">// the CRC32 of what we&#39;ve read against the file header</span>
<a id="L172"></a><span class="ln">   172</span>				<span class="comment">// or TOC&#39;s CRC32, if it seems like it was set.</span>
<a id="L173"></a><span class="ln">   173</span>				if r.f.CRC32 != 0 &amp;&amp; r.hash.Sum32() != r.f.CRC32 {
<a id="L174"></a><span class="ln">   174</span>					err = ErrChecksum
<a id="L175"></a><span class="ln">   175</span>				}
<a id="L176"></a><span class="ln">   176</span>			}
<a id="L177"></a><span class="ln">   177</span>		}
<a id="L178"></a><span class="ln">   178</span>		r.err = err
<a id="L179"></a><span class="ln">   179</span>		return
<a id="L180"></a><span class="ln">   180</span>	}
<a id="L181"></a><span class="ln">   181</span>	
<a id="L182"></a><span class="ln">   182</span>	func (r *checksumReader) Close() error { return r.rc.Close() }
<a id="L183"></a><span class="ln">   183</span>	
<a id="L184"></a><span class="ln">   184</span>	<span class="comment">// findBodyOffset does the minimum work to verify the file has a header</span>
<a id="L185"></a><span class="ln">   185</span>	<span class="comment">// and returns the file body offset.</span>
<a id="L186"></a><span class="ln">   186</span>	func (f *File) findBodyOffset() (int64, error) {
<a id="L187"></a><span class="ln">   187</span>		r := io.NewSectionReader(f.zipr, f.headerOffset, f.zipsize-f.headerOffset)
<a id="L188"></a><span class="ln">   188</span>		var buf [fileHeaderLen]byte
<a id="L189"></a><span class="ln">   189</span>		if _, err := io.ReadFull(r, buf[:]); err != nil {
<a id="L190"></a><span class="ln">   190</span>			return 0, err
<a id="L191"></a><span class="ln">   191</span>		}
<a id="L192"></a><span class="ln">   192</span>		b := readBuf(buf[:])
<a id="L193"></a><span class="ln">   193</span>		if sig := b.uint32(); sig != fileHeaderSignature {
<a id="L194"></a><span class="ln">   194</span>			return 0, ErrFormat
<a id="L195"></a><span class="ln">   195</span>		}
<a id="L196"></a><span class="ln">   196</span>		b = b[22:] <span class="comment">// skip over most of the header</span>
<a id="L197"></a><span class="ln">   197</span>		filenameLen := int(b.uint16())
<a id="L198"></a><span class="ln">   198</span>		extraLen := int(b.uint16())
<a id="L199"></a><span class="ln">   199</span>		return int64(fileHeaderLen + filenameLen + extraLen), nil
<a id="L200"></a><span class="ln">   200</span>	}
<a id="L201"></a><span class="ln">   201</span>	
<a id="L202"></a><span class="ln">   202</span>	<span class="comment">// readDirectoryHeader attempts to read a directory header from r.</span>
<a id="L203"></a><span class="ln">   203</span>	<span class="comment">// It returns io.ErrUnexpectedEOF if it cannot read a complete header,</span>
<a id="L204"></a><span class="ln">   204</span>	<span class="comment">// and ErrFormat if it doesn&#39;t find a valid header signature.</span>
<a id="L205"></a><span class="ln">   205</span>	func readDirectoryHeader(f *File, r io.Reader) error {
<a id="L206"></a><span class="ln">   206</span>		var buf [directoryHeaderLen]byte
<a id="L207"></a><span class="ln">   207</span>		if _, err := io.ReadFull(r, buf[:]); err != nil {
<a id="L208"></a><span class="ln">   208</span>			return err
<a id="L209"></a><span class="ln">   209</span>		}
<a id="L210"></a><span class="ln">   210</span>		b := readBuf(buf[:])
<a id="L211"></a><span class="ln">   211</span>		if sig := b.uint32(); sig != directoryHeaderSignature {
<a id="L212"></a><span class="ln">   212</span>			return ErrFormat
<a id="L213"></a><span class="ln">   213</span>		}
<a id="L214"></a><span class="ln">   214</span>		f.CreatorVersion = b.uint16()
<a id="L215"></a><span class="ln">   215</span>		f.ReaderVersion = b.uint16()
<a id="L216"></a><span class="ln">   216</span>		f.Flags = b.uint16()
<a id="L217"></a><span class="ln">   217</span>		f.Method = b.uint16()
<a id="L218"></a><span class="ln">   218</span>		f.ModifiedTime = b.uint16()
<a id="L219"></a><span class="ln">   219</span>		f.ModifiedDate = b.uint16()
<a id="L220"></a><span class="ln">   220</span>		f.CRC32 = b.uint32()
<a id="L221"></a><span class="ln">   221</span>		f.CompressedSize = b.uint32()
<a id="L222"></a><span class="ln">   222</span>		f.UncompressedSize = b.uint32()
<a id="L223"></a><span class="ln">   223</span>		filenameLen := int(b.uint16())
<a id="L224"></a><span class="ln">   224</span>		extraLen := int(b.uint16())
<a id="L225"></a><span class="ln">   225</span>		commentLen := int(b.uint16())
<a id="L226"></a><span class="ln">   226</span>		b = b[4:] <span class="comment">// skipped start disk number and internal attributes (2x uint16)</span>
<a id="L227"></a><span class="ln">   227</span>		f.ExternalAttrs = b.uint32()
<a id="L228"></a><span class="ln">   228</span>		f.headerOffset = int64(b.uint32())
<a id="L229"></a><span class="ln">   229</span>		d := make([]byte, filenameLen+extraLen+commentLen)
<a id="L230"></a><span class="ln">   230</span>		if _, err := io.ReadFull(r, d); err != nil {
<a id="L231"></a><span class="ln">   231</span>			return err
<a id="L232"></a><span class="ln">   232</span>		}
<a id="L233"></a><span class="ln">   233</span>		f.Name = string(d[:filenameLen])
<a id="L234"></a><span class="ln">   234</span>		f.Extra = d[filenameLen : filenameLen+extraLen]
<a id="L235"></a><span class="ln">   235</span>		f.Comment = string(d[filenameLen+extraLen:])
<a id="L236"></a><span class="ln">   236</span>		return nil
<a id="L237"></a><span class="ln">   237</span>	}
<a id="L238"></a><span class="ln">   238</span>	
<a id="L239"></a><span class="ln">   239</span>	func readDataDescriptor(r io.Reader, f *File) error {
<a id="L240"></a><span class="ln">   240</span>		var buf [dataDescriptorLen]byte
<a id="L241"></a><span class="ln">   241</span>	
<a id="L242"></a><span class="ln">   242</span>		<span class="comment">// The spec says: &#34;Although not originally assigned a</span>
<a id="L243"></a><span class="ln">   243</span>		<span class="comment">// signature, the value 0x08074b50 has commonly been adopted</span>
<a id="L244"></a><span class="ln">   244</span>		<span class="comment">// as a signature value for the data descriptor record.</span>
<a id="L245"></a><span class="ln">   245</span>		<span class="comment">// Implementers should be aware that ZIP files may be</span>
<a id="L246"></a><span class="ln">   246</span>		<span class="comment">// encountered with or without this signature marking data</span>
<a id="L247"></a><span class="ln">   247</span>		<span class="comment">// descriptors and should account for either case when reading</span>
<a id="L248"></a><span class="ln">   248</span>		<span class="comment">// ZIP files to ensure compatibility.&#34;</span>
<a id="L249"></a><span class="ln">   249</span>		<span class="comment">//</span>
<a id="L250"></a><span class="ln">   250</span>		<span class="comment">// dataDescriptorLen includes the size of the signature but</span>
<a id="L251"></a><span class="ln">   251</span>		<span class="comment">// first read just those 4 bytes to see if it exists.</span>
<a id="L252"></a><span class="ln">   252</span>		if _, err := io.ReadFull(r, buf[:4]); err != nil {
<a id="L253"></a><span class="ln">   253</span>			return err
<a id="L254"></a><span class="ln">   254</span>		}
<a id="L255"></a><span class="ln">   255</span>		off := 0
<a id="L256"></a><span class="ln">   256</span>		maybeSig := readBuf(buf[:4])
<a id="L257"></a><span class="ln">   257</span>		if maybeSig.uint32() != dataDescriptorSignature {
<a id="L258"></a><span class="ln">   258</span>			<span class="comment">// No data descriptor signature. Keep these four</span>
<a id="L259"></a><span class="ln">   259</span>			<span class="comment">// bytes.</span>
<a id="L260"></a><span class="ln">   260</span>			off += 4
<a id="L261"></a><span class="ln">   261</span>		}
<a id="L262"></a><span class="ln">   262</span>		if _, err := io.ReadFull(r, buf[off:12]); err != nil {
<a id="L263"></a><span class="ln">   263</span>			return err
<a id="L264"></a><span class="ln">   264</span>		}
<a id="L265"></a><span class="ln">   265</span>		b := readBuf(buf[:12])
<a id="L266"></a><span class="ln">   266</span>		f.CRC32 = b.uint32()
<a id="L267"></a><span class="ln">   267</span>		f.CompressedSize = b.uint32()
<a id="L268"></a><span class="ln">   268</span>		f.UncompressedSize = b.uint32()
<a id="L269"></a><span class="ln">   269</span>		return nil
<a id="L270"></a><span class="ln">   270</span>	}
<a id="L271"></a><span class="ln">   271</span>	
<a id="L272"></a><span class="ln">   272</span>	func readDirectoryEnd(r io.ReaderAt, size int64) (dir *directoryEnd, err error) {
<a id="L273"></a><span class="ln">   273</span>		<span class="comment">// look for directoryEndSignature in the last 1k, then in the last 65k</span>
<a id="L274"></a><span class="ln">   274</span>		var buf []byte
<a id="L275"></a><span class="ln">   275</span>		for i, bLen := range []int64{1024, 65 * 1024} {
<a id="L276"></a><span class="ln">   276</span>			if bLen &gt; size {
<a id="L277"></a><span class="ln">   277</span>				bLen = size
<a id="L278"></a><span class="ln">   278</span>			}
<a id="L279"></a><span class="ln">   279</span>			buf = make([]byte, int(bLen))
<a id="L280"></a><span class="ln">   280</span>			if _, err := r.ReadAt(buf, size-bLen); err != nil &amp;&amp; err != io.EOF {
<a id="L281"></a><span class="ln">   281</span>				return nil, err
<a id="L282"></a><span class="ln">   282</span>			}
<a id="L283"></a><span class="ln">   283</span>			if p := findSignatureInBlock(buf); p &gt;= 0 {
<a id="L284"></a><span class="ln">   284</span>				buf = buf[p:]
<a id="L285"></a><span class="ln">   285</span>				break
<a id="L286"></a><span class="ln">   286</span>			}
<a id="L287"></a><span class="ln">   287</span>			if i == 1 || bLen == size {
<a id="L288"></a><span class="ln">   288</span>				return nil, ErrFormat
<a id="L289"></a><span class="ln">   289</span>			}
<a id="L290"></a><span class="ln">   290</span>		}
<a id="L291"></a><span class="ln">   291</span>	
<a id="L292"></a><span class="ln">   292</span>		<span class="comment">// read header into struct</span>
<a id="L293"></a><span class="ln">   293</span>		b := readBuf(buf[4:]) <span class="comment">// skip signature</span>
<a id="L294"></a><span class="ln">   294</span>		d := &amp;directoryEnd{
<a id="L295"></a><span class="ln">   295</span>			diskNbr:            b.uint16(),
<a id="L296"></a><span class="ln">   296</span>			dirDiskNbr:         b.uint16(),
<a id="L297"></a><span class="ln">   297</span>			dirRecordsThisDisk: b.uint16(),
<a id="L298"></a><span class="ln">   298</span>			directoryRecords:   b.uint16(),
<a id="L299"></a><span class="ln">   299</span>			directorySize:      b.uint32(),
<a id="L300"></a><span class="ln">   300</span>			directoryOffset:    b.uint32(),
<a id="L301"></a><span class="ln">   301</span>			commentLen:         b.uint16(),
<a id="L302"></a><span class="ln">   302</span>		}
<a id="L303"></a><span class="ln">   303</span>		l := int(d.commentLen)
<a id="L304"></a><span class="ln">   304</span>		if l &gt; len(b) {
<a id="L305"></a><span class="ln">   305</span>			return nil, errors.New(&#34;zip: invalid comment length&#34;)
<a id="L306"></a><span class="ln">   306</span>		}
<a id="L307"></a><span class="ln">   307</span>		d.comment = string(b[:l])
<a id="L308"></a><span class="ln">   308</span>		return d, nil
<a id="L309"></a><span class="ln">   309</span>	}
<a id="L310"></a><span class="ln">   310</span>	
<a id="L311"></a><span class="ln">   311</span>	func findSignatureInBlock(b []byte) int {
<a id="L312"></a><span class="ln">   312</span>		for i := len(b) - directoryEndLen; i &gt;= 0; i-- {
<a id="L313"></a><span class="ln">   313</span>			<span class="comment">// defined from directoryEndSignature in struct.go</span>
<a id="L314"></a><span class="ln">   314</span>			if b[i] == &#39;P&#39; &amp;&amp; b[i+1] == &#39;K&#39; &amp;&amp; b[i+2] == 0x05 &amp;&amp; b[i+3] == 0x06 {
<a id="L315"></a><span class="ln">   315</span>				<span class="comment">// n is length of comment</span>
<a id="L316"></a><span class="ln">   316</span>				n := int(b[i+directoryEndLen-2]) | int(b[i+directoryEndLen-1])&lt;&lt;8
<a id="L317"></a><span class="ln">   317</span>				if n+directoryEndLen+i == len(b) {
<a id="L318"></a><span class="ln">   318</span>					return i
<a id="L319"></a><span class="ln">   319</span>				}
<a id="L320"></a><span class="ln">   320</span>			}
<a id="L321"></a><span class="ln">   321</span>		}
<a id="L322"></a><span class="ln">   322</span>		return -1
<a id="L323"></a><span class="ln">   323</span>	}
<a id="L324"></a><span class="ln">   324</span>	
<a id="L325"></a><span class="ln">   325</span>	type readBuf []byte
<a id="L326"></a><span class="ln">   326</span>	
<a id="L327"></a><span class="ln">   327</span>	func (b *readBuf) uint16() uint16 {
<a id="L328"></a><span class="ln">   328</span>		v := binary.LittleEndian.Uint16(*b)
<a id="L329"></a><span class="ln">   329</span>		*b = (*b)[2:]
<a id="L330"></a><span class="ln">   330</span>		return v
<a id="L331"></a><span class="ln">   331</span>	}
<a id="L332"></a><span class="ln">   332</span>	
<a id="L333"></a><span class="ln">   333</span>	func (b *readBuf) uint32() uint32 {
<a id="L334"></a><span class="ln">   334</span>		v := binary.LittleEndian.Uint32(*b)
<a id="L335"></a><span class="ln">   335</span>		*b = (*b)[4:]
<a id="L336"></a><span class="ln">   336</span>		return v
<a id="L337"></a><span class="ln">   337</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

