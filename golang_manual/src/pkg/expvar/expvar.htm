<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/expvar/expvar.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/expvar/expvar.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package expvar provides a standardized interface to public variables, such</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// as operation counters in servers. It exposes these variables via HTTP at</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// /debug/vars in JSON format.</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">//</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// Operations to set or modify these public variables are atomic.</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">//</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// In addition to adding the HTTP handler, this package registers the</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// following variables:</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">//</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">//	cmdline   os.Args</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">//	memstats  runtime.Memstats</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">//</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// The package is sometimes only imported for the side effect of</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// registering its HTTP handler and the above variables.  To use it</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// this way, link this package into your program:</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">//	import _ &#34;expvar&#34;</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">//</span>
<a id="L22"></a><span class="ln">    22</span>	package expvar
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>	import (
<a id="L25"></a><span class="ln">    25</span>		&#34;bytes&#34;
<a id="L26"></a><span class="ln">    26</span>		&#34;encoding/json&#34;
<a id="L27"></a><span class="ln">    27</span>		&#34;fmt&#34;
<a id="L28"></a><span class="ln">    28</span>		&#34;log&#34;
<a id="L29"></a><span class="ln">    29</span>		&#34;net/http&#34;
<a id="L30"></a><span class="ln">    30</span>		&#34;os&#34;
<a id="L31"></a><span class="ln">    31</span>		&#34;runtime&#34;
<a id="L32"></a><span class="ln">    32</span>		&#34;strconv&#34;
<a id="L33"></a><span class="ln">    33</span>		&#34;sync&#34;
<a id="L34"></a><span class="ln">    34</span>	)
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// Var is an abstract type for all exported variables.</span>
<a id="L37"></a><span class="ln">    37</span>	type Var interface {
<a id="L38"></a><span class="ln">    38</span>		String() string
<a id="L39"></a><span class="ln">    39</span>	}
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// Int is a 64-bit integer variable that satisfies the Var interface.</span>
<a id="L42"></a><span class="ln">    42</span>	type Int struct {
<a id="L43"></a><span class="ln">    43</span>		i  int64
<a id="L44"></a><span class="ln">    44</span>		mu sync.RWMutex
<a id="L45"></a><span class="ln">    45</span>	}
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>	func (v *Int) String() string {
<a id="L48"></a><span class="ln">    48</span>		v.mu.RLock()
<a id="L49"></a><span class="ln">    49</span>		defer v.mu.RUnlock()
<a id="L50"></a><span class="ln">    50</span>		return strconv.FormatInt(v.i, 10)
<a id="L51"></a><span class="ln">    51</span>	}
<a id="L52"></a><span class="ln">    52</span>	
<a id="L53"></a><span class="ln">    53</span>	func (v *Int) Add(delta int64) {
<a id="L54"></a><span class="ln">    54</span>		v.mu.Lock()
<a id="L55"></a><span class="ln">    55</span>		defer v.mu.Unlock()
<a id="L56"></a><span class="ln">    56</span>		v.i += delta
<a id="L57"></a><span class="ln">    57</span>	}
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>	func (v *Int) Set(value int64) {
<a id="L60"></a><span class="ln">    60</span>		v.mu.Lock()
<a id="L61"></a><span class="ln">    61</span>		defer v.mu.Unlock()
<a id="L62"></a><span class="ln">    62</span>		v.i = value
<a id="L63"></a><span class="ln">    63</span>	}
<a id="L64"></a><span class="ln">    64</span>	
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// Float is a 64-bit float variable that satisfies the Var interface.</span>
<a id="L66"></a><span class="ln">    66</span>	type Float struct {
<a id="L67"></a><span class="ln">    67</span>		f  float64
<a id="L68"></a><span class="ln">    68</span>		mu sync.RWMutex
<a id="L69"></a><span class="ln">    69</span>	}
<a id="L70"></a><span class="ln">    70</span>	
<a id="L71"></a><span class="ln">    71</span>	func (v *Float) String() string {
<a id="L72"></a><span class="ln">    72</span>		v.mu.RLock()
<a id="L73"></a><span class="ln">    73</span>		defer v.mu.RUnlock()
<a id="L74"></a><span class="ln">    74</span>		return strconv.FormatFloat(v.f, &#39;g&#39;, -1, 64)
<a id="L75"></a><span class="ln">    75</span>	}
<a id="L76"></a><span class="ln">    76</span>	
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// Add adds delta to v.</span>
<a id="L78"></a><span class="ln">    78</span>	func (v *Float) Add(delta float64) {
<a id="L79"></a><span class="ln">    79</span>		v.mu.Lock()
<a id="L80"></a><span class="ln">    80</span>		defer v.mu.Unlock()
<a id="L81"></a><span class="ln">    81</span>		v.f += delta
<a id="L82"></a><span class="ln">    82</span>	}
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">// Set sets v to value.</span>
<a id="L85"></a><span class="ln">    85</span>	func (v *Float) Set(value float64) {
<a id="L86"></a><span class="ln">    86</span>		v.mu.Lock()
<a id="L87"></a><span class="ln">    87</span>		defer v.mu.Unlock()
<a id="L88"></a><span class="ln">    88</span>		v.f = value
<a id="L89"></a><span class="ln">    89</span>	}
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// Map is a string-to-Var map variable that satisfies the Var interface.</span>
<a id="L92"></a><span class="ln">    92</span>	type Map struct {
<a id="L93"></a><span class="ln">    93</span>		m  map[string]Var
<a id="L94"></a><span class="ln">    94</span>		mu sync.RWMutex
<a id="L95"></a><span class="ln">    95</span>	}
<a id="L96"></a><span class="ln">    96</span>	
<a id="L97"></a><span class="ln">    97</span>	<span class="comment">// KeyValue represents a single entry in a Map.</span>
<a id="L98"></a><span class="ln">    98</span>	type KeyValue struct {
<a id="L99"></a><span class="ln">    99</span>		Key   string
<a id="L100"></a><span class="ln">   100</span>		Value Var
<a id="L101"></a><span class="ln">   101</span>	}
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>	func (v *Map) String() string {
<a id="L104"></a><span class="ln">   104</span>		v.mu.RLock()
<a id="L105"></a><span class="ln">   105</span>		defer v.mu.RUnlock()
<a id="L106"></a><span class="ln">   106</span>		var b bytes.Buffer
<a id="L107"></a><span class="ln">   107</span>		fmt.Fprintf(&amp;b, &#34;{&#34;)
<a id="L108"></a><span class="ln">   108</span>		first := true
<a id="L109"></a><span class="ln">   109</span>		for key, val := range v.m {
<a id="L110"></a><span class="ln">   110</span>			if !first {
<a id="L111"></a><span class="ln">   111</span>				fmt.Fprintf(&amp;b, &#34;, &#34;)
<a id="L112"></a><span class="ln">   112</span>			}
<a id="L113"></a><span class="ln">   113</span>			fmt.Fprintf(&amp;b, &#34;\&#34;%s\&#34;: %v&#34;, key, val)
<a id="L114"></a><span class="ln">   114</span>			first = false
<a id="L115"></a><span class="ln">   115</span>		}
<a id="L116"></a><span class="ln">   116</span>		fmt.Fprintf(&amp;b, &#34;}&#34;)
<a id="L117"></a><span class="ln">   117</span>		return b.String()
<a id="L118"></a><span class="ln">   118</span>	}
<a id="L119"></a><span class="ln">   119</span>	
<a id="L120"></a><span class="ln">   120</span>	func (v *Map) Init() *Map {
<a id="L121"></a><span class="ln">   121</span>		v.m = make(map[string]Var)
<a id="L122"></a><span class="ln">   122</span>		return v
<a id="L123"></a><span class="ln">   123</span>	}
<a id="L124"></a><span class="ln">   124</span>	
<a id="L125"></a><span class="ln">   125</span>	func (v *Map) Get(key string) Var {
<a id="L126"></a><span class="ln">   126</span>		v.mu.RLock()
<a id="L127"></a><span class="ln">   127</span>		defer v.mu.RUnlock()
<a id="L128"></a><span class="ln">   128</span>		return v.m[key]
<a id="L129"></a><span class="ln">   129</span>	}
<a id="L130"></a><span class="ln">   130</span>	
<a id="L131"></a><span class="ln">   131</span>	func (v *Map) Set(key string, av Var) {
<a id="L132"></a><span class="ln">   132</span>		v.mu.Lock()
<a id="L133"></a><span class="ln">   133</span>		defer v.mu.Unlock()
<a id="L134"></a><span class="ln">   134</span>		v.m[key] = av
<a id="L135"></a><span class="ln">   135</span>	}
<a id="L136"></a><span class="ln">   136</span>	
<a id="L137"></a><span class="ln">   137</span>	func (v *Map) Add(key string, delta int64) {
<a id="L138"></a><span class="ln">   138</span>		v.mu.RLock()
<a id="L139"></a><span class="ln">   139</span>		av, ok := v.m[key]
<a id="L140"></a><span class="ln">   140</span>		v.mu.RUnlock()
<a id="L141"></a><span class="ln">   141</span>		if !ok {
<a id="L142"></a><span class="ln">   142</span>			<span class="comment">// check again under the write lock</span>
<a id="L143"></a><span class="ln">   143</span>			v.mu.Lock()
<a id="L144"></a><span class="ln">   144</span>			if _, ok = v.m[key]; !ok {
<a id="L145"></a><span class="ln">   145</span>				av = new(Int)
<a id="L146"></a><span class="ln">   146</span>				v.m[key] = av
<a id="L147"></a><span class="ln">   147</span>			}
<a id="L148"></a><span class="ln">   148</span>			v.mu.Unlock()
<a id="L149"></a><span class="ln">   149</span>		}
<a id="L150"></a><span class="ln">   150</span>	
<a id="L151"></a><span class="ln">   151</span>		<span class="comment">// Add to Int; ignore otherwise.</span>
<a id="L152"></a><span class="ln">   152</span>		if iv, ok := av.(*Int); ok {
<a id="L153"></a><span class="ln">   153</span>			iv.Add(delta)
<a id="L154"></a><span class="ln">   154</span>		}
<a id="L155"></a><span class="ln">   155</span>	}
<a id="L156"></a><span class="ln">   156</span>	
<a id="L157"></a><span class="ln">   157</span>	<span class="comment">// AddFloat adds delta to the *Float value stored under the given map key.</span>
<a id="L158"></a><span class="ln">   158</span>	func (v *Map) AddFloat(key string, delta float64) {
<a id="L159"></a><span class="ln">   159</span>		v.mu.RLock()
<a id="L160"></a><span class="ln">   160</span>		av, ok := v.m[key]
<a id="L161"></a><span class="ln">   161</span>		v.mu.RUnlock()
<a id="L162"></a><span class="ln">   162</span>		if !ok {
<a id="L163"></a><span class="ln">   163</span>			<span class="comment">// check again under the write lock</span>
<a id="L164"></a><span class="ln">   164</span>			v.mu.Lock()
<a id="L165"></a><span class="ln">   165</span>			if _, ok = v.m[key]; !ok {
<a id="L166"></a><span class="ln">   166</span>				av = new(Float)
<a id="L167"></a><span class="ln">   167</span>				v.m[key] = av
<a id="L168"></a><span class="ln">   168</span>			}
<a id="L169"></a><span class="ln">   169</span>			v.mu.Unlock()
<a id="L170"></a><span class="ln">   170</span>		}
<a id="L171"></a><span class="ln">   171</span>	
<a id="L172"></a><span class="ln">   172</span>		<span class="comment">// Add to Float; ignore otherwise.</span>
<a id="L173"></a><span class="ln">   173</span>		if iv, ok := av.(*Float); ok {
<a id="L174"></a><span class="ln">   174</span>			iv.Add(delta)
<a id="L175"></a><span class="ln">   175</span>		}
<a id="L176"></a><span class="ln">   176</span>	}
<a id="L177"></a><span class="ln">   177</span>	
<a id="L178"></a><span class="ln">   178</span>	<span class="comment">// Do calls f for each entry in the map.</span>
<a id="L179"></a><span class="ln">   179</span>	<span class="comment">// The map is locked during the iteration,</span>
<a id="L180"></a><span class="ln">   180</span>	<span class="comment">// but existing entries may be concurrently updated.</span>
<a id="L181"></a><span class="ln">   181</span>	func (v *Map) Do(f func(KeyValue)) {
<a id="L182"></a><span class="ln">   182</span>		v.mu.RLock()
<a id="L183"></a><span class="ln">   183</span>		defer v.mu.RUnlock()
<a id="L184"></a><span class="ln">   184</span>		for k, v := range v.m {
<a id="L185"></a><span class="ln">   185</span>			f(KeyValue{k, v})
<a id="L186"></a><span class="ln">   186</span>		}
<a id="L187"></a><span class="ln">   187</span>	}
<a id="L188"></a><span class="ln">   188</span>	
<a id="L189"></a><span class="ln">   189</span>	<span class="comment">// String is a string variable, and satisfies the Var interface.</span>
<a id="L190"></a><span class="ln">   190</span>	type String struct {
<a id="L191"></a><span class="ln">   191</span>		s  string
<a id="L192"></a><span class="ln">   192</span>		mu sync.RWMutex
<a id="L193"></a><span class="ln">   193</span>	}
<a id="L194"></a><span class="ln">   194</span>	
<a id="L195"></a><span class="ln">   195</span>	func (v *String) String() string {
<a id="L196"></a><span class="ln">   196</span>		v.mu.RLock()
<a id="L197"></a><span class="ln">   197</span>		defer v.mu.RUnlock()
<a id="L198"></a><span class="ln">   198</span>		return strconv.Quote(v.s)
<a id="L199"></a><span class="ln">   199</span>	}
<a id="L200"></a><span class="ln">   200</span>	
<a id="L201"></a><span class="ln">   201</span>	func (v *String) Set(value string) {
<a id="L202"></a><span class="ln">   202</span>		v.mu.Lock()
<a id="L203"></a><span class="ln">   203</span>		defer v.mu.Unlock()
<a id="L204"></a><span class="ln">   204</span>		v.s = value
<a id="L205"></a><span class="ln">   205</span>	}
<a id="L206"></a><span class="ln">   206</span>	
<a id="L207"></a><span class="ln">   207</span>	<span class="comment">// Func implements Var by calling the function</span>
<a id="L208"></a><span class="ln">   208</span>	<span class="comment">// and formatting the returned value using JSON.</span>
<a id="L209"></a><span class="ln">   209</span>	type Func func() interface{}
<a id="L210"></a><span class="ln">   210</span>	
<a id="L211"></a><span class="ln">   211</span>	func (f Func) String() string {
<a id="L212"></a><span class="ln">   212</span>		v, _ := json.Marshal(f())
<a id="L213"></a><span class="ln">   213</span>		return string(v)
<a id="L214"></a><span class="ln">   214</span>	}
<a id="L215"></a><span class="ln">   215</span>	
<a id="L216"></a><span class="ln">   216</span>	<span class="comment">// All published variables.</span>
<a id="L217"></a><span class="ln">   217</span>	var (
<a id="L218"></a><span class="ln">   218</span>		mutex sync.RWMutex
<a id="L219"></a><span class="ln">   219</span>		vars  map[string]Var = make(map[string]Var)
<a id="L220"></a><span class="ln">   220</span>	)
<a id="L221"></a><span class="ln">   221</span>	
<a id="L222"></a><span class="ln">   222</span>	<span class="comment">// Publish declares a named exported variable. This should be called from a</span>
<a id="L223"></a><span class="ln">   223</span>	<span class="comment">// package&#39;s init function when it creates its Vars. If the name is already</span>
<a id="L224"></a><span class="ln">   224</span>	<span class="comment">// registered then this will log.Panic.</span>
<a id="L225"></a><span class="ln">   225</span>	func Publish(name string, v Var) {
<a id="L226"></a><span class="ln">   226</span>		mutex.Lock()
<a id="L227"></a><span class="ln">   227</span>		defer mutex.Unlock()
<a id="L228"></a><span class="ln">   228</span>		if _, existing := vars[name]; existing {
<a id="L229"></a><span class="ln">   229</span>			log.Panicln(&#34;Reuse of exported var name:&#34;, name)
<a id="L230"></a><span class="ln">   230</span>		}
<a id="L231"></a><span class="ln">   231</span>		vars[name] = v
<a id="L232"></a><span class="ln">   232</span>	}
<a id="L233"></a><span class="ln">   233</span>	
<a id="L234"></a><span class="ln">   234</span>	<span class="comment">// Get retrieves a named exported variable.</span>
<a id="L235"></a><span class="ln">   235</span>	func Get(name string) Var {
<a id="L236"></a><span class="ln">   236</span>		mutex.RLock()
<a id="L237"></a><span class="ln">   237</span>		defer mutex.RUnlock()
<a id="L238"></a><span class="ln">   238</span>		return vars[name]
<a id="L239"></a><span class="ln">   239</span>	}
<a id="L240"></a><span class="ln">   240</span>	
<a id="L241"></a><span class="ln">   241</span>	<span class="comment">// Convenience functions for creating new exported variables.</span>
<a id="L242"></a><span class="ln">   242</span>	
<a id="L243"></a><span class="ln">   243</span>	func NewInt(name string) *Int {
<a id="L244"></a><span class="ln">   244</span>		v := new(Int)
<a id="L245"></a><span class="ln">   245</span>		Publish(name, v)
<a id="L246"></a><span class="ln">   246</span>		return v
<a id="L247"></a><span class="ln">   247</span>	}
<a id="L248"></a><span class="ln">   248</span>	
<a id="L249"></a><span class="ln">   249</span>	func NewFloat(name string) *Float {
<a id="L250"></a><span class="ln">   250</span>		v := new(Float)
<a id="L251"></a><span class="ln">   251</span>		Publish(name, v)
<a id="L252"></a><span class="ln">   252</span>		return v
<a id="L253"></a><span class="ln">   253</span>	}
<a id="L254"></a><span class="ln">   254</span>	
<a id="L255"></a><span class="ln">   255</span>	func NewMap(name string) *Map {
<a id="L256"></a><span class="ln">   256</span>		v := new(Map).Init()
<a id="L257"></a><span class="ln">   257</span>		Publish(name, v)
<a id="L258"></a><span class="ln">   258</span>		return v
<a id="L259"></a><span class="ln">   259</span>	}
<a id="L260"></a><span class="ln">   260</span>	
<a id="L261"></a><span class="ln">   261</span>	func NewString(name string) *String {
<a id="L262"></a><span class="ln">   262</span>		v := new(String)
<a id="L263"></a><span class="ln">   263</span>		Publish(name, v)
<a id="L264"></a><span class="ln">   264</span>		return v
<a id="L265"></a><span class="ln">   265</span>	}
<a id="L266"></a><span class="ln">   266</span>	
<a id="L267"></a><span class="ln">   267</span>	<span class="comment">// Do calls f for each exported variable.</span>
<a id="L268"></a><span class="ln">   268</span>	<span class="comment">// The global variable map is locked during the iteration,</span>
<a id="L269"></a><span class="ln">   269</span>	<span class="comment">// but existing entries may be concurrently updated.</span>
<a id="L270"></a><span class="ln">   270</span>	func Do(f func(KeyValue)) {
<a id="L271"></a><span class="ln">   271</span>		mutex.RLock()
<a id="L272"></a><span class="ln">   272</span>		defer mutex.RUnlock()
<a id="L273"></a><span class="ln">   273</span>		for k, v := range vars {
<a id="L274"></a><span class="ln">   274</span>			f(KeyValue{k, v})
<a id="L275"></a><span class="ln">   275</span>		}
<a id="L276"></a><span class="ln">   276</span>	}
<a id="L277"></a><span class="ln">   277</span>	
<a id="L278"></a><span class="ln">   278</span>	func expvarHandler(w http.ResponseWriter, r *http.Request) {
<a id="L279"></a><span class="ln">   279</span>		w.Header().Set(&#34;Content-Type&#34;, &#34;application/json; charset=utf-8&#34;)
<a id="L280"></a><span class="ln">   280</span>		fmt.Fprintf(w, &#34;{\n&#34;)
<a id="L281"></a><span class="ln">   281</span>		first := true
<a id="L282"></a><span class="ln">   282</span>		Do(func(kv KeyValue) {
<a id="L283"></a><span class="ln">   283</span>			if !first {
<a id="L284"></a><span class="ln">   284</span>				fmt.Fprintf(w, &#34;,\n&#34;)
<a id="L285"></a><span class="ln">   285</span>			}
<a id="L286"></a><span class="ln">   286</span>			first = false
<a id="L287"></a><span class="ln">   287</span>			fmt.Fprintf(w, &#34;%q: %s&#34;, kv.Key, kv.Value)
<a id="L288"></a><span class="ln">   288</span>		})
<a id="L289"></a><span class="ln">   289</span>		fmt.Fprintf(w, &#34;\n}\n&#34;)
<a id="L290"></a><span class="ln">   290</span>	}
<a id="L291"></a><span class="ln">   291</span>	
<a id="L292"></a><span class="ln">   292</span>	func cmdline() interface{} {
<a id="L293"></a><span class="ln">   293</span>		return os.Args
<a id="L294"></a><span class="ln">   294</span>	}
<a id="L295"></a><span class="ln">   295</span>	
<a id="L296"></a><span class="ln">   296</span>	func memstats() interface{} {
<a id="L297"></a><span class="ln">   297</span>		stats := new(runtime.MemStats)
<a id="L298"></a><span class="ln">   298</span>		runtime.ReadMemStats(stats)
<a id="L299"></a><span class="ln">   299</span>		return *stats
<a id="L300"></a><span class="ln">   300</span>	}
<a id="L301"></a><span class="ln">   301</span>	
<a id="L302"></a><span class="ln">   302</span>	func init() {
<a id="L303"></a><span class="ln">   303</span>		http.HandleFunc(&#34;/debug/vars&#34;, expvarHandler)
<a id="L304"></a><span class="ln">   304</span>		Publish(&#34;cmdline&#34;, Func(cmdline))
<a id="L305"></a><span class="ln">   305</span>		Publish(&#34;memstats&#34;, Func(memstats))
<a id="L306"></a><span class="ln">   306</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

