<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/syscall/ztypes_linux_amd64.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/syscall/ztypes_linux_amd64.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Created by cgo -godefs - DO NOT EDIT</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// cgo -godefs types_linux.go</span>
<a id="L3"></a><span class="ln">     3</span>	
<a id="L4"></a><span class="ln">     4</span>	package syscall
<a id="L5"></a><span class="ln">     5</span>	
<a id="L6"></a><span class="ln">     6</span>	const (
<a id="L7"></a><span class="ln">     7</span>		sizeofPtr      = 0x8
<a id="L8"></a><span class="ln">     8</span>		sizeofShort    = 0x2
<a id="L9"></a><span class="ln">     9</span>		sizeofInt      = 0x4
<a id="L10"></a><span class="ln">    10</span>		sizeofLong     = 0x8
<a id="L11"></a><span class="ln">    11</span>		sizeofLongLong = 0x8
<a id="L12"></a><span class="ln">    12</span>		PathMax        = 0x1000
<a id="L13"></a><span class="ln">    13</span>	)
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	type (
<a id="L16"></a><span class="ln">    16</span>		_C_short     int16
<a id="L17"></a><span class="ln">    17</span>		_C_int       int32
<a id="L18"></a><span class="ln">    18</span>		_C_long      int64
<a id="L19"></a><span class="ln">    19</span>		_C_long_long int64
<a id="L20"></a><span class="ln">    20</span>	)
<a id="L21"></a><span class="ln">    21</span>	
<a id="L22"></a><span class="ln">    22</span>	type Timespec struct {
<a id="L23"></a><span class="ln">    23</span>		Sec  int64
<a id="L24"></a><span class="ln">    24</span>		Nsec int64
<a id="L25"></a><span class="ln">    25</span>	}
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>	type Timeval struct {
<a id="L28"></a><span class="ln">    28</span>		Sec  int64
<a id="L29"></a><span class="ln">    29</span>		Usec int64
<a id="L30"></a><span class="ln">    30</span>	}
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>	type Timex struct {
<a id="L33"></a><span class="ln">    33</span>		Modes     uint32
<a id="L34"></a><span class="ln">    34</span>		Pad_cgo_0 [4]byte
<a id="L35"></a><span class="ln">    35</span>		Offset    int64
<a id="L36"></a><span class="ln">    36</span>		Freq      int64
<a id="L37"></a><span class="ln">    37</span>		Maxerror  int64
<a id="L38"></a><span class="ln">    38</span>		Esterror  int64
<a id="L39"></a><span class="ln">    39</span>		Status    int32
<a id="L40"></a><span class="ln">    40</span>		Pad_cgo_1 [4]byte
<a id="L41"></a><span class="ln">    41</span>		Constant  int64
<a id="L42"></a><span class="ln">    42</span>		Precision int64
<a id="L43"></a><span class="ln">    43</span>		Tolerance int64
<a id="L44"></a><span class="ln">    44</span>		Time      Timeval
<a id="L45"></a><span class="ln">    45</span>		Tick      int64
<a id="L46"></a><span class="ln">    46</span>		Ppsfreq   int64
<a id="L47"></a><span class="ln">    47</span>		Jitter    int64
<a id="L48"></a><span class="ln">    48</span>		Shift     int32
<a id="L49"></a><span class="ln">    49</span>		Pad_cgo_2 [4]byte
<a id="L50"></a><span class="ln">    50</span>		Stabil    int64
<a id="L51"></a><span class="ln">    51</span>		Jitcnt    int64
<a id="L52"></a><span class="ln">    52</span>		Calcnt    int64
<a id="L53"></a><span class="ln">    53</span>		Errcnt    int64
<a id="L54"></a><span class="ln">    54</span>		Stbcnt    int64
<a id="L55"></a><span class="ln">    55</span>		Tai       int32
<a id="L56"></a><span class="ln">    56</span>		Pad_cgo_3 [44]byte
<a id="L57"></a><span class="ln">    57</span>	}
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>	type Time_t int64
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>	type Tms struct {
<a id="L62"></a><span class="ln">    62</span>		Utime  int64
<a id="L63"></a><span class="ln">    63</span>		Stime  int64
<a id="L64"></a><span class="ln">    64</span>		Cutime int64
<a id="L65"></a><span class="ln">    65</span>		Cstime int64
<a id="L66"></a><span class="ln">    66</span>	}
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>	type Utimbuf struct {
<a id="L69"></a><span class="ln">    69</span>		Actime  int64
<a id="L70"></a><span class="ln">    70</span>		Modtime int64
<a id="L71"></a><span class="ln">    71</span>	}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>	type Rusage struct {
<a id="L74"></a><span class="ln">    74</span>		Utime    Timeval
<a id="L75"></a><span class="ln">    75</span>		Stime    Timeval
<a id="L76"></a><span class="ln">    76</span>		Maxrss   int64
<a id="L77"></a><span class="ln">    77</span>		Ixrss    int64
<a id="L78"></a><span class="ln">    78</span>		Idrss    int64
<a id="L79"></a><span class="ln">    79</span>		Isrss    int64
<a id="L80"></a><span class="ln">    80</span>		Minflt   int64
<a id="L81"></a><span class="ln">    81</span>		Majflt   int64
<a id="L82"></a><span class="ln">    82</span>		Nswap    int64
<a id="L83"></a><span class="ln">    83</span>		Inblock  int64
<a id="L84"></a><span class="ln">    84</span>		Oublock  int64
<a id="L85"></a><span class="ln">    85</span>		Msgsnd   int64
<a id="L86"></a><span class="ln">    86</span>		Msgrcv   int64
<a id="L87"></a><span class="ln">    87</span>		Nsignals int64
<a id="L88"></a><span class="ln">    88</span>		Nvcsw    int64
<a id="L89"></a><span class="ln">    89</span>		Nivcsw   int64
<a id="L90"></a><span class="ln">    90</span>	}
<a id="L91"></a><span class="ln">    91</span>	
<a id="L92"></a><span class="ln">    92</span>	type Rlimit struct {
<a id="L93"></a><span class="ln">    93</span>		Cur uint64
<a id="L94"></a><span class="ln">    94</span>		Max uint64
<a id="L95"></a><span class="ln">    95</span>	}
<a id="L96"></a><span class="ln">    96</span>	
<a id="L97"></a><span class="ln">    97</span>	type _Gid_t uint32
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>	type Stat_t struct {
<a id="L100"></a><span class="ln">   100</span>		Dev       uint64
<a id="L101"></a><span class="ln">   101</span>		Ino       uint64
<a id="L102"></a><span class="ln">   102</span>		Nlink     uint64
<a id="L103"></a><span class="ln">   103</span>		Mode      uint32
<a id="L104"></a><span class="ln">   104</span>		Uid       uint32
<a id="L105"></a><span class="ln">   105</span>		Gid       uint32
<a id="L106"></a><span class="ln">   106</span>		X__pad0   int32
<a id="L107"></a><span class="ln">   107</span>		Rdev      uint64
<a id="L108"></a><span class="ln">   108</span>		Size      int64
<a id="L109"></a><span class="ln">   109</span>		Blksize   int64
<a id="L110"></a><span class="ln">   110</span>		Blocks    int64
<a id="L111"></a><span class="ln">   111</span>		Atim      Timespec
<a id="L112"></a><span class="ln">   112</span>		Mtim      Timespec
<a id="L113"></a><span class="ln">   113</span>		Ctim      Timespec
<a id="L114"></a><span class="ln">   114</span>		X__unused [3]int64
<a id="L115"></a><span class="ln">   115</span>	}
<a id="L116"></a><span class="ln">   116</span>	
<a id="L117"></a><span class="ln">   117</span>	type Statfs_t struct {
<a id="L118"></a><span class="ln">   118</span>		Type    int64
<a id="L119"></a><span class="ln">   119</span>		Bsize   int64
<a id="L120"></a><span class="ln">   120</span>		Blocks  uint64
<a id="L121"></a><span class="ln">   121</span>		Bfree   uint64
<a id="L122"></a><span class="ln">   122</span>		Bavail  uint64
<a id="L123"></a><span class="ln">   123</span>		Files   uint64
<a id="L124"></a><span class="ln">   124</span>		Ffree   uint64
<a id="L125"></a><span class="ln">   125</span>		Fsid    Fsid
<a id="L126"></a><span class="ln">   126</span>		Namelen int64
<a id="L127"></a><span class="ln">   127</span>		Frsize  int64
<a id="L128"></a><span class="ln">   128</span>		Flags   int64
<a id="L129"></a><span class="ln">   129</span>		Spare   [4]int64
<a id="L130"></a><span class="ln">   130</span>	}
<a id="L131"></a><span class="ln">   131</span>	
<a id="L132"></a><span class="ln">   132</span>	type Dirent struct {
<a id="L133"></a><span class="ln">   133</span>		Ino       uint64
<a id="L134"></a><span class="ln">   134</span>		Off       int64
<a id="L135"></a><span class="ln">   135</span>		Reclen    uint16
<a id="L136"></a><span class="ln">   136</span>		Type      uint8
<a id="L137"></a><span class="ln">   137</span>		Name      [256]int8
<a id="L138"></a><span class="ln">   138</span>		Pad_cgo_0 [5]byte
<a id="L139"></a><span class="ln">   139</span>	}
<a id="L140"></a><span class="ln">   140</span>	
<a id="L141"></a><span class="ln">   141</span>	type Fsid struct {
<a id="L142"></a><span class="ln">   142</span>		X__val [2]int32
<a id="L143"></a><span class="ln">   143</span>	}
<a id="L144"></a><span class="ln">   144</span>	
<a id="L145"></a><span class="ln">   145</span>	type RawSockaddrInet4 struct {
<a id="L146"></a><span class="ln">   146</span>		Family uint16
<a id="L147"></a><span class="ln">   147</span>		Port   uint16
<a id="L148"></a><span class="ln">   148</span>		Addr   [4]byte <span class="comment">/* in_addr */</span>
<a id="L149"></a><span class="ln">   149</span>		Zero   [8]uint8
<a id="L150"></a><span class="ln">   150</span>	}
<a id="L151"></a><span class="ln">   151</span>	
<a id="L152"></a><span class="ln">   152</span>	type RawSockaddrInet6 struct {
<a id="L153"></a><span class="ln">   153</span>		Family   uint16
<a id="L154"></a><span class="ln">   154</span>		Port     uint16
<a id="L155"></a><span class="ln">   155</span>		Flowinfo uint32
<a id="L156"></a><span class="ln">   156</span>		Addr     [16]byte <span class="comment">/* in6_addr */</span>
<a id="L157"></a><span class="ln">   157</span>		Scope_id uint32
<a id="L158"></a><span class="ln">   158</span>	}
<a id="L159"></a><span class="ln">   159</span>	
<a id="L160"></a><span class="ln">   160</span>	type RawSockaddrUnix struct {
<a id="L161"></a><span class="ln">   161</span>		Family uint16
<a id="L162"></a><span class="ln">   162</span>		Path   [108]int8
<a id="L163"></a><span class="ln">   163</span>	}
<a id="L164"></a><span class="ln">   164</span>	
<a id="L165"></a><span class="ln">   165</span>	type RawSockaddrLinklayer struct {
<a id="L166"></a><span class="ln">   166</span>		Family   uint16
<a id="L167"></a><span class="ln">   167</span>		Protocol uint16
<a id="L168"></a><span class="ln">   168</span>		Ifindex  int32
<a id="L169"></a><span class="ln">   169</span>		Hatype   uint16
<a id="L170"></a><span class="ln">   170</span>		Pkttype  uint8
<a id="L171"></a><span class="ln">   171</span>		Halen    uint8
<a id="L172"></a><span class="ln">   172</span>		Addr     [8]uint8
<a id="L173"></a><span class="ln">   173</span>	}
<a id="L174"></a><span class="ln">   174</span>	
<a id="L175"></a><span class="ln">   175</span>	type RawSockaddrNetlink struct {
<a id="L176"></a><span class="ln">   176</span>		Family uint16
<a id="L177"></a><span class="ln">   177</span>		Pad    uint16
<a id="L178"></a><span class="ln">   178</span>		Pid    uint32
<a id="L179"></a><span class="ln">   179</span>		Groups uint32
<a id="L180"></a><span class="ln">   180</span>	}
<a id="L181"></a><span class="ln">   181</span>	
<a id="L182"></a><span class="ln">   182</span>	type RawSockaddr struct {
<a id="L183"></a><span class="ln">   183</span>		Family uint16
<a id="L184"></a><span class="ln">   184</span>		Data   [14]int8
<a id="L185"></a><span class="ln">   185</span>	}
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>	type RawSockaddrAny struct {
<a id="L188"></a><span class="ln">   188</span>		Addr RawSockaddr
<a id="L189"></a><span class="ln">   189</span>		Pad  [96]int8
<a id="L190"></a><span class="ln">   190</span>	}
<a id="L191"></a><span class="ln">   191</span>	
<a id="L192"></a><span class="ln">   192</span>	type _Socklen uint32
<a id="L193"></a><span class="ln">   193</span>	
<a id="L194"></a><span class="ln">   194</span>	type Linger struct {
<a id="L195"></a><span class="ln">   195</span>		Onoff  int32
<a id="L196"></a><span class="ln">   196</span>		Linger int32
<a id="L197"></a><span class="ln">   197</span>	}
<a id="L198"></a><span class="ln">   198</span>	
<a id="L199"></a><span class="ln">   199</span>	type Iovec struct {
<a id="L200"></a><span class="ln">   200</span>		Base *byte
<a id="L201"></a><span class="ln">   201</span>		Len  uint64
<a id="L202"></a><span class="ln">   202</span>	}
<a id="L203"></a><span class="ln">   203</span>	
<a id="L204"></a><span class="ln">   204</span>	type IPMreq struct {
<a id="L205"></a><span class="ln">   205</span>		Multiaddr [4]byte <span class="comment">/* in_addr */</span>
<a id="L206"></a><span class="ln">   206</span>		Interface [4]byte <span class="comment">/* in_addr */</span>
<a id="L207"></a><span class="ln">   207</span>	}
<a id="L208"></a><span class="ln">   208</span>	
<a id="L209"></a><span class="ln">   209</span>	type IPMreqn struct {
<a id="L210"></a><span class="ln">   210</span>		Multiaddr [4]byte <span class="comment">/* in_addr */</span>
<a id="L211"></a><span class="ln">   211</span>		Address   [4]byte <span class="comment">/* in_addr */</span>
<a id="L212"></a><span class="ln">   212</span>		Ifindex   int32
<a id="L213"></a><span class="ln">   213</span>	}
<a id="L214"></a><span class="ln">   214</span>	
<a id="L215"></a><span class="ln">   215</span>	type IPv6Mreq struct {
<a id="L216"></a><span class="ln">   216</span>		Multiaddr [16]byte <span class="comment">/* in6_addr */</span>
<a id="L217"></a><span class="ln">   217</span>		Interface uint32
<a id="L218"></a><span class="ln">   218</span>	}
<a id="L219"></a><span class="ln">   219</span>	
<a id="L220"></a><span class="ln">   220</span>	type Msghdr struct {
<a id="L221"></a><span class="ln">   221</span>		Name       *byte
<a id="L222"></a><span class="ln">   222</span>		Namelen    uint32
<a id="L223"></a><span class="ln">   223</span>		Pad_cgo_0  [4]byte
<a id="L224"></a><span class="ln">   224</span>		Iov        *Iovec
<a id="L225"></a><span class="ln">   225</span>		Iovlen     uint64
<a id="L226"></a><span class="ln">   226</span>		Control    *byte
<a id="L227"></a><span class="ln">   227</span>		Controllen uint64
<a id="L228"></a><span class="ln">   228</span>		Flags      int32
<a id="L229"></a><span class="ln">   229</span>		Pad_cgo_1  [4]byte
<a id="L230"></a><span class="ln">   230</span>	}
<a id="L231"></a><span class="ln">   231</span>	
<a id="L232"></a><span class="ln">   232</span>	type Cmsghdr struct {
<a id="L233"></a><span class="ln">   233</span>		Len          uint64
<a id="L234"></a><span class="ln">   234</span>		Level        int32
<a id="L235"></a><span class="ln">   235</span>		Type         int32
<a id="L236"></a><span class="ln">   236</span>		X__cmsg_data [0]byte
<a id="L237"></a><span class="ln">   237</span>	}
<a id="L238"></a><span class="ln">   238</span>	
<a id="L239"></a><span class="ln">   239</span>	type Inet4Pktinfo struct {
<a id="L240"></a><span class="ln">   240</span>		Ifindex  int32
<a id="L241"></a><span class="ln">   241</span>		Spec_dst [4]byte <span class="comment">/* in_addr */</span>
<a id="L242"></a><span class="ln">   242</span>		Addr     [4]byte <span class="comment">/* in_addr */</span>
<a id="L243"></a><span class="ln">   243</span>	}
<a id="L244"></a><span class="ln">   244</span>	
<a id="L245"></a><span class="ln">   245</span>	type Inet6Pktinfo struct {
<a id="L246"></a><span class="ln">   246</span>		Addr    [16]byte <span class="comment">/* in6_addr */</span>
<a id="L247"></a><span class="ln">   247</span>		Ifindex uint32
<a id="L248"></a><span class="ln">   248</span>	}
<a id="L249"></a><span class="ln">   249</span>	
<a id="L250"></a><span class="ln">   250</span>	type Ucred struct {
<a id="L251"></a><span class="ln">   251</span>		Pid int32
<a id="L252"></a><span class="ln">   252</span>		Uid uint32
<a id="L253"></a><span class="ln">   253</span>		Gid uint32
<a id="L254"></a><span class="ln">   254</span>	}
<a id="L255"></a><span class="ln">   255</span>	
<a id="L256"></a><span class="ln">   256</span>	const (
<a id="L257"></a><span class="ln">   257</span>		SizeofSockaddrInet4     = 0x10
<a id="L258"></a><span class="ln">   258</span>		SizeofSockaddrInet6     = 0x1c
<a id="L259"></a><span class="ln">   259</span>		SizeofSockaddrAny       = 0x70
<a id="L260"></a><span class="ln">   260</span>		SizeofSockaddrUnix      = 0x6e
<a id="L261"></a><span class="ln">   261</span>		SizeofSockaddrLinklayer = 0x14
<a id="L262"></a><span class="ln">   262</span>		SizeofSockaddrNetlink   = 0xc
<a id="L263"></a><span class="ln">   263</span>		SizeofLinger            = 0x8
<a id="L264"></a><span class="ln">   264</span>		SizeofIPMreq            = 0x8
<a id="L265"></a><span class="ln">   265</span>		SizeofIPMreqn           = 0xc
<a id="L266"></a><span class="ln">   266</span>		SizeofIPv6Mreq          = 0x14
<a id="L267"></a><span class="ln">   267</span>		SizeofMsghdr            = 0x38
<a id="L268"></a><span class="ln">   268</span>		SizeofCmsghdr           = 0x10
<a id="L269"></a><span class="ln">   269</span>		SizeofInet4Pktinfo      = 0xc
<a id="L270"></a><span class="ln">   270</span>		SizeofInet6Pktinfo      = 0x14
<a id="L271"></a><span class="ln">   271</span>		SizeofUcred             = 0xc
<a id="L272"></a><span class="ln">   272</span>	)
<a id="L273"></a><span class="ln">   273</span>	
<a id="L274"></a><span class="ln">   274</span>	const (
<a id="L275"></a><span class="ln">   275</span>		IFA_UNSPEC        = 0x0
<a id="L276"></a><span class="ln">   276</span>		IFA_ADDRESS       = 0x1
<a id="L277"></a><span class="ln">   277</span>		IFA_LOCAL         = 0x2
<a id="L278"></a><span class="ln">   278</span>		IFA_LABEL         = 0x3
<a id="L279"></a><span class="ln">   279</span>		IFA_BROADCAST     = 0x4
<a id="L280"></a><span class="ln">   280</span>		IFA_ANYCAST       = 0x5
<a id="L281"></a><span class="ln">   281</span>		IFA_CACHEINFO     = 0x6
<a id="L282"></a><span class="ln">   282</span>		IFA_MULTICAST     = 0x7
<a id="L283"></a><span class="ln">   283</span>		IFLA_UNSPEC       = 0x0
<a id="L284"></a><span class="ln">   284</span>		IFLA_ADDRESS      = 0x1
<a id="L285"></a><span class="ln">   285</span>		IFLA_BROADCAST    = 0x2
<a id="L286"></a><span class="ln">   286</span>		IFLA_IFNAME       = 0x3
<a id="L287"></a><span class="ln">   287</span>		IFLA_MTU          = 0x4
<a id="L288"></a><span class="ln">   288</span>		IFLA_LINK         = 0x5
<a id="L289"></a><span class="ln">   289</span>		IFLA_QDISC        = 0x6
<a id="L290"></a><span class="ln">   290</span>		IFLA_STATS        = 0x7
<a id="L291"></a><span class="ln">   291</span>		IFLA_COST         = 0x8
<a id="L292"></a><span class="ln">   292</span>		IFLA_PRIORITY     = 0x9
<a id="L293"></a><span class="ln">   293</span>		IFLA_MASTER       = 0xa
<a id="L294"></a><span class="ln">   294</span>		IFLA_WIRELESS     = 0xb
<a id="L295"></a><span class="ln">   295</span>		IFLA_PROTINFO     = 0xc
<a id="L296"></a><span class="ln">   296</span>		IFLA_TXQLEN       = 0xd
<a id="L297"></a><span class="ln">   297</span>		IFLA_MAP          = 0xe
<a id="L298"></a><span class="ln">   298</span>		IFLA_WEIGHT       = 0xf
<a id="L299"></a><span class="ln">   299</span>		IFLA_OPERSTATE    = 0x10
<a id="L300"></a><span class="ln">   300</span>		IFLA_LINKMODE     = 0x11
<a id="L301"></a><span class="ln">   301</span>		IFLA_LINKINFO     = 0x12
<a id="L302"></a><span class="ln">   302</span>		IFLA_NET_NS_PID   = 0x13
<a id="L303"></a><span class="ln">   303</span>		IFLA_IFALIAS      = 0x14
<a id="L304"></a><span class="ln">   304</span>		IFLA_MAX          = 0x1c
<a id="L305"></a><span class="ln">   305</span>		RT_SCOPE_UNIVERSE = 0x0
<a id="L306"></a><span class="ln">   306</span>		RT_SCOPE_SITE     = 0xc8
<a id="L307"></a><span class="ln">   307</span>		RT_SCOPE_LINK     = 0xfd
<a id="L308"></a><span class="ln">   308</span>		RT_SCOPE_HOST     = 0xfe
<a id="L309"></a><span class="ln">   309</span>		RT_SCOPE_NOWHERE  = 0xff
<a id="L310"></a><span class="ln">   310</span>		RT_TABLE_UNSPEC   = 0x0
<a id="L311"></a><span class="ln">   311</span>		RT_TABLE_COMPAT   = 0xfc
<a id="L312"></a><span class="ln">   312</span>		RT_TABLE_DEFAULT  = 0xfd
<a id="L313"></a><span class="ln">   313</span>		RT_TABLE_MAIN     = 0xfe
<a id="L314"></a><span class="ln">   314</span>		RT_TABLE_LOCAL    = 0xff
<a id="L315"></a><span class="ln">   315</span>		RT_TABLE_MAX      = 0xffffffff
<a id="L316"></a><span class="ln">   316</span>		RTA_UNSPEC        = 0x0
<a id="L317"></a><span class="ln">   317</span>		RTA_DST           = 0x1
<a id="L318"></a><span class="ln">   318</span>		RTA_SRC           = 0x2
<a id="L319"></a><span class="ln">   319</span>		RTA_IIF           = 0x3
<a id="L320"></a><span class="ln">   320</span>		RTA_OIF           = 0x4
<a id="L321"></a><span class="ln">   321</span>		RTA_GATEWAY       = 0x5
<a id="L322"></a><span class="ln">   322</span>		RTA_PRIORITY      = 0x6
<a id="L323"></a><span class="ln">   323</span>		RTA_PREFSRC       = 0x7
<a id="L324"></a><span class="ln">   324</span>		RTA_METRICS       = 0x8
<a id="L325"></a><span class="ln">   325</span>		RTA_MULTIPATH     = 0x9
<a id="L326"></a><span class="ln">   326</span>		RTA_FLOW          = 0xb
<a id="L327"></a><span class="ln">   327</span>		RTA_CACHEINFO     = 0xc
<a id="L328"></a><span class="ln">   328</span>		RTA_TABLE         = 0xf
<a id="L329"></a><span class="ln">   329</span>		RTN_UNSPEC        = 0x0
<a id="L330"></a><span class="ln">   330</span>		RTN_UNICAST       = 0x1
<a id="L331"></a><span class="ln">   331</span>		RTN_LOCAL         = 0x2
<a id="L332"></a><span class="ln">   332</span>		RTN_BROADCAST     = 0x3
<a id="L333"></a><span class="ln">   333</span>		RTN_ANYCAST       = 0x4
<a id="L334"></a><span class="ln">   334</span>		RTN_MULTICAST     = 0x5
<a id="L335"></a><span class="ln">   335</span>		RTN_BLACKHOLE     = 0x6
<a id="L336"></a><span class="ln">   336</span>		RTN_UNREACHABLE   = 0x7
<a id="L337"></a><span class="ln">   337</span>		RTN_PROHIBIT      = 0x8
<a id="L338"></a><span class="ln">   338</span>		RTN_THROW         = 0x9
<a id="L339"></a><span class="ln">   339</span>		RTN_NAT           = 0xa
<a id="L340"></a><span class="ln">   340</span>		RTN_XRESOLVE      = 0xb
<a id="L341"></a><span class="ln">   341</span>		SizeofNlMsghdr    = 0x10
<a id="L342"></a><span class="ln">   342</span>		SizeofNlMsgerr    = 0x14
<a id="L343"></a><span class="ln">   343</span>		SizeofRtGenmsg    = 0x1
<a id="L344"></a><span class="ln">   344</span>		SizeofNlAttr      = 0x4
<a id="L345"></a><span class="ln">   345</span>		SizeofRtAttr      = 0x4
<a id="L346"></a><span class="ln">   346</span>		SizeofIfInfomsg   = 0x10
<a id="L347"></a><span class="ln">   347</span>		SizeofIfAddrmsg   = 0x8
<a id="L348"></a><span class="ln">   348</span>		SizeofRtMsg       = 0xc
<a id="L349"></a><span class="ln">   349</span>		SizeofRtNexthop   = 0x8
<a id="L350"></a><span class="ln">   350</span>	)
<a id="L351"></a><span class="ln">   351</span>	
<a id="L352"></a><span class="ln">   352</span>	type NlMsghdr struct {
<a id="L353"></a><span class="ln">   353</span>		Len   uint32
<a id="L354"></a><span class="ln">   354</span>		Type  uint16
<a id="L355"></a><span class="ln">   355</span>		Flags uint16
<a id="L356"></a><span class="ln">   356</span>		Seq   uint32
<a id="L357"></a><span class="ln">   357</span>		Pid   uint32
<a id="L358"></a><span class="ln">   358</span>	}
<a id="L359"></a><span class="ln">   359</span>	
<a id="L360"></a><span class="ln">   360</span>	type NlMsgerr struct {
<a id="L361"></a><span class="ln">   361</span>		Error int32
<a id="L362"></a><span class="ln">   362</span>		Msg   NlMsghdr
<a id="L363"></a><span class="ln">   363</span>	}
<a id="L364"></a><span class="ln">   364</span>	
<a id="L365"></a><span class="ln">   365</span>	type RtGenmsg struct {
<a id="L366"></a><span class="ln">   366</span>		Family uint8
<a id="L367"></a><span class="ln">   367</span>	}
<a id="L368"></a><span class="ln">   368</span>	
<a id="L369"></a><span class="ln">   369</span>	type NlAttr struct {
<a id="L370"></a><span class="ln">   370</span>		Len  uint16
<a id="L371"></a><span class="ln">   371</span>		Type uint16
<a id="L372"></a><span class="ln">   372</span>	}
<a id="L373"></a><span class="ln">   373</span>	
<a id="L374"></a><span class="ln">   374</span>	type RtAttr struct {
<a id="L375"></a><span class="ln">   375</span>		Len  uint16
<a id="L376"></a><span class="ln">   376</span>		Type uint16
<a id="L377"></a><span class="ln">   377</span>	}
<a id="L378"></a><span class="ln">   378</span>	
<a id="L379"></a><span class="ln">   379</span>	type IfInfomsg struct {
<a id="L380"></a><span class="ln">   380</span>		Family     uint8
<a id="L381"></a><span class="ln">   381</span>		X__ifi_pad uint8
<a id="L382"></a><span class="ln">   382</span>		Type       uint16
<a id="L383"></a><span class="ln">   383</span>		Index      int32
<a id="L384"></a><span class="ln">   384</span>		Flags      uint32
<a id="L385"></a><span class="ln">   385</span>		Change     uint32
<a id="L386"></a><span class="ln">   386</span>	}
<a id="L387"></a><span class="ln">   387</span>	
<a id="L388"></a><span class="ln">   388</span>	type IfAddrmsg struct {
<a id="L389"></a><span class="ln">   389</span>		Family    uint8
<a id="L390"></a><span class="ln">   390</span>		Prefixlen uint8
<a id="L391"></a><span class="ln">   391</span>		Flags     uint8
<a id="L392"></a><span class="ln">   392</span>		Scope     uint8
<a id="L393"></a><span class="ln">   393</span>		Index     uint32
<a id="L394"></a><span class="ln">   394</span>	}
<a id="L395"></a><span class="ln">   395</span>	
<a id="L396"></a><span class="ln">   396</span>	type RtMsg struct {
<a id="L397"></a><span class="ln">   397</span>		Family   uint8
<a id="L398"></a><span class="ln">   398</span>		Dst_len  uint8
<a id="L399"></a><span class="ln">   399</span>		Src_len  uint8
<a id="L400"></a><span class="ln">   400</span>		Tos      uint8
<a id="L401"></a><span class="ln">   401</span>		Table    uint8
<a id="L402"></a><span class="ln">   402</span>		Protocol uint8
<a id="L403"></a><span class="ln">   403</span>		Scope    uint8
<a id="L404"></a><span class="ln">   404</span>		Type     uint8
<a id="L405"></a><span class="ln">   405</span>		Flags    uint32
<a id="L406"></a><span class="ln">   406</span>	}
<a id="L407"></a><span class="ln">   407</span>	
<a id="L408"></a><span class="ln">   408</span>	type RtNexthop struct {
<a id="L409"></a><span class="ln">   409</span>		Len     uint16
<a id="L410"></a><span class="ln">   410</span>		Flags   uint8
<a id="L411"></a><span class="ln">   411</span>		Hops    uint8
<a id="L412"></a><span class="ln">   412</span>		Ifindex int32
<a id="L413"></a><span class="ln">   413</span>	}
<a id="L414"></a><span class="ln">   414</span>	
<a id="L415"></a><span class="ln">   415</span>	const (
<a id="L416"></a><span class="ln">   416</span>		SizeofSockFilter = 0x8
<a id="L417"></a><span class="ln">   417</span>		SizeofSockFprog  = 0x10
<a id="L418"></a><span class="ln">   418</span>	)
<a id="L419"></a><span class="ln">   419</span>	
<a id="L420"></a><span class="ln">   420</span>	type SockFilter struct {
<a id="L421"></a><span class="ln">   421</span>		Code uint16
<a id="L422"></a><span class="ln">   422</span>		Jt   uint8
<a id="L423"></a><span class="ln">   423</span>		Jf   uint8
<a id="L424"></a><span class="ln">   424</span>		K    uint32
<a id="L425"></a><span class="ln">   425</span>	}
<a id="L426"></a><span class="ln">   426</span>	
<a id="L427"></a><span class="ln">   427</span>	type SockFprog struct {
<a id="L428"></a><span class="ln">   428</span>		Len       uint16
<a id="L429"></a><span class="ln">   429</span>		Pad_cgo_0 [6]byte
<a id="L430"></a><span class="ln">   430</span>		Filter    *SockFilter
<a id="L431"></a><span class="ln">   431</span>	}
<a id="L432"></a><span class="ln">   432</span>	
<a id="L433"></a><span class="ln">   433</span>	type InotifyEvent struct {
<a id="L434"></a><span class="ln">   434</span>		Wd     int32
<a id="L435"></a><span class="ln">   435</span>		Mask   uint32
<a id="L436"></a><span class="ln">   436</span>		Cookie uint32
<a id="L437"></a><span class="ln">   437</span>		Len    uint32
<a id="L438"></a><span class="ln">   438</span>		Name   [0]byte
<a id="L439"></a><span class="ln">   439</span>	}
<a id="L440"></a><span class="ln">   440</span>	
<a id="L441"></a><span class="ln">   441</span>	const SizeofInotifyEvent = 0x10
<a id="L442"></a><span class="ln">   442</span>	
<a id="L443"></a><span class="ln">   443</span>	type PtraceRegs struct {
<a id="L444"></a><span class="ln">   444</span>		R15      uint64
<a id="L445"></a><span class="ln">   445</span>		R14      uint64
<a id="L446"></a><span class="ln">   446</span>		R13      uint64
<a id="L447"></a><span class="ln">   447</span>		R12      uint64
<a id="L448"></a><span class="ln">   448</span>		Rbp      uint64
<a id="L449"></a><span class="ln">   449</span>		Rbx      uint64
<a id="L450"></a><span class="ln">   450</span>		R11      uint64
<a id="L451"></a><span class="ln">   451</span>		R10      uint64
<a id="L452"></a><span class="ln">   452</span>		R9       uint64
<a id="L453"></a><span class="ln">   453</span>		R8       uint64
<a id="L454"></a><span class="ln">   454</span>		Rax      uint64
<a id="L455"></a><span class="ln">   455</span>		Rcx      uint64
<a id="L456"></a><span class="ln">   456</span>		Rdx      uint64
<a id="L457"></a><span class="ln">   457</span>		Rsi      uint64
<a id="L458"></a><span class="ln">   458</span>		Rdi      uint64
<a id="L459"></a><span class="ln">   459</span>		Orig_rax uint64
<a id="L460"></a><span class="ln">   460</span>		Rip      uint64
<a id="L461"></a><span class="ln">   461</span>		Cs       uint64
<a id="L462"></a><span class="ln">   462</span>		Eflags   uint64
<a id="L463"></a><span class="ln">   463</span>		Rsp      uint64
<a id="L464"></a><span class="ln">   464</span>		Ss       uint64
<a id="L465"></a><span class="ln">   465</span>		Fs_base  uint64
<a id="L466"></a><span class="ln">   466</span>		Gs_base  uint64
<a id="L467"></a><span class="ln">   467</span>		Ds       uint64
<a id="L468"></a><span class="ln">   468</span>		Es       uint64
<a id="L469"></a><span class="ln">   469</span>		Fs       uint64
<a id="L470"></a><span class="ln">   470</span>		Gs       uint64
<a id="L471"></a><span class="ln">   471</span>	}
<a id="L472"></a><span class="ln">   472</span>	
<a id="L473"></a><span class="ln">   473</span>	type FdSet struct {
<a id="L474"></a><span class="ln">   474</span>		Bits [16]int64
<a id="L475"></a><span class="ln">   475</span>	}
<a id="L476"></a><span class="ln">   476</span>	
<a id="L477"></a><span class="ln">   477</span>	type Sysinfo_t struct {
<a id="L478"></a><span class="ln">   478</span>		Uptime    int64
<a id="L479"></a><span class="ln">   479</span>		Loads     [3]uint64
<a id="L480"></a><span class="ln">   480</span>		Totalram  uint64
<a id="L481"></a><span class="ln">   481</span>		Freeram   uint64
<a id="L482"></a><span class="ln">   482</span>		Sharedram uint64
<a id="L483"></a><span class="ln">   483</span>		Bufferram uint64
<a id="L484"></a><span class="ln">   484</span>		Totalswap uint64
<a id="L485"></a><span class="ln">   485</span>		Freeswap  uint64
<a id="L486"></a><span class="ln">   486</span>		Procs     uint16
<a id="L487"></a><span class="ln">   487</span>		Pad       uint16
<a id="L488"></a><span class="ln">   488</span>		Pad_cgo_0 [4]byte
<a id="L489"></a><span class="ln">   489</span>		Totalhigh uint64
<a id="L490"></a><span class="ln">   490</span>		Freehigh  uint64
<a id="L491"></a><span class="ln">   491</span>		Unit      uint32
<a id="L492"></a><span class="ln">   492</span>		X_f       [0]byte
<a id="L493"></a><span class="ln">   493</span>		Pad_cgo_1 [4]byte
<a id="L494"></a><span class="ln">   494</span>	}
<a id="L495"></a><span class="ln">   495</span>	
<a id="L496"></a><span class="ln">   496</span>	type Utsname struct {
<a id="L497"></a><span class="ln">   497</span>		Sysname    [65]int8
<a id="L498"></a><span class="ln">   498</span>		Nodename   [65]int8
<a id="L499"></a><span class="ln">   499</span>		Release    [65]int8
<a id="L500"></a><span class="ln">   500</span>		Version    [65]int8
<a id="L501"></a><span class="ln">   501</span>		Machine    [65]int8
<a id="L502"></a><span class="ln">   502</span>		Domainname [65]int8
<a id="L503"></a><span class="ln">   503</span>	}
<a id="L504"></a><span class="ln">   504</span>	
<a id="L505"></a><span class="ln">   505</span>	type Ustat_t struct {
<a id="L506"></a><span class="ln">   506</span>		Tfree     int32
<a id="L507"></a><span class="ln">   507</span>		Pad_cgo_0 [4]byte
<a id="L508"></a><span class="ln">   508</span>		Tinode    uint64
<a id="L509"></a><span class="ln">   509</span>		Fname     [6]int8
<a id="L510"></a><span class="ln">   510</span>		Fpack     [6]int8
<a id="L511"></a><span class="ln">   511</span>		Pad_cgo_1 [4]byte
<a id="L512"></a><span class="ln">   512</span>	}
<a id="L513"></a><span class="ln">   513</span>	
<a id="L514"></a><span class="ln">   514</span>	type EpollEvent struct {
<a id="L515"></a><span class="ln">   515</span>		Events uint32
<a id="L516"></a><span class="ln">   516</span>		Fd     int32
<a id="L517"></a><span class="ln">   517</span>		Pad    int32
<a id="L518"></a><span class="ln">   518</span>	}
<a id="L519"></a><span class="ln">   519</span>	
<a id="L520"></a><span class="ln">   520</span>	type Termios struct {
<a id="L521"></a><span class="ln">   521</span>		Iflag     uint32
<a id="L522"></a><span class="ln">   522</span>		Oflag     uint32
<a id="L523"></a><span class="ln">   523</span>		Cflag     uint32
<a id="L524"></a><span class="ln">   524</span>		Lflag     uint32
<a id="L525"></a><span class="ln">   525</span>		Line      uint8
<a id="L526"></a><span class="ln">   526</span>		Cc        [32]uint8
<a id="L527"></a><span class="ln">   527</span>		Pad_cgo_0 [3]byte
<a id="L528"></a><span class="ln">   528</span>		Ispeed    uint32
<a id="L529"></a><span class="ln">   529</span>		Ospeed    uint32
<a id="L530"></a><span class="ln">   530</span>	}
<a id="L531"></a><span class="ln">   531</span>	
<a id="L532"></a><span class="ln">   532</span>	const (
<a id="L533"></a><span class="ln">   533</span>		VINTR    = 0x0
<a id="L534"></a><span class="ln">   534</span>		VQUIT    = 0x1
<a id="L535"></a><span class="ln">   535</span>		VERASE   = 0x2
<a id="L536"></a><span class="ln">   536</span>		VKILL    = 0x3
<a id="L537"></a><span class="ln">   537</span>		VEOF     = 0x4
<a id="L538"></a><span class="ln">   538</span>		VTIME    = 0x5
<a id="L539"></a><span class="ln">   539</span>		VMIN     = 0x6
<a id="L540"></a><span class="ln">   540</span>		VSWTC    = 0x7
<a id="L541"></a><span class="ln">   541</span>		VSTART   = 0x8
<a id="L542"></a><span class="ln">   542</span>		VSTOP    = 0x9
<a id="L543"></a><span class="ln">   543</span>		VSUSP    = 0xa
<a id="L544"></a><span class="ln">   544</span>		VEOL     = 0xb
<a id="L545"></a><span class="ln">   545</span>		VREPRINT = 0xc
<a id="L546"></a><span class="ln">   546</span>		VDISCARD = 0xd
<a id="L547"></a><span class="ln">   547</span>		VWERASE  = 0xe
<a id="L548"></a><span class="ln">   548</span>		VLNEXT   = 0xf
<a id="L549"></a><span class="ln">   549</span>		VEOL2    = 0x10
<a id="L550"></a><span class="ln">   550</span>		IGNBRK   = 0x1
<a id="L551"></a><span class="ln">   551</span>		BRKINT   = 0x2
<a id="L552"></a><span class="ln">   552</span>		IGNPAR   = 0x4
<a id="L553"></a><span class="ln">   553</span>		PARMRK   = 0x8
<a id="L554"></a><span class="ln">   554</span>		INPCK    = 0x10
<a id="L555"></a><span class="ln">   555</span>		ISTRIP   = 0x20
<a id="L556"></a><span class="ln">   556</span>		INLCR    = 0x40
<a id="L557"></a><span class="ln">   557</span>		IGNCR    = 0x80
<a id="L558"></a><span class="ln">   558</span>		ICRNL    = 0x100
<a id="L559"></a><span class="ln">   559</span>		IUCLC    = 0x200
<a id="L560"></a><span class="ln">   560</span>		IXON     = 0x400
<a id="L561"></a><span class="ln">   561</span>		IXANY    = 0x800
<a id="L562"></a><span class="ln">   562</span>		IXOFF    = 0x1000
<a id="L563"></a><span class="ln">   563</span>		IMAXBEL  = 0x2000
<a id="L564"></a><span class="ln">   564</span>		IUTF8    = 0x4000
<a id="L565"></a><span class="ln">   565</span>		OPOST    = 0x1
<a id="L566"></a><span class="ln">   566</span>		OLCUC    = 0x2
<a id="L567"></a><span class="ln">   567</span>		ONLCR    = 0x4
<a id="L568"></a><span class="ln">   568</span>		OCRNL    = 0x8
<a id="L569"></a><span class="ln">   569</span>		ONOCR    = 0x10
<a id="L570"></a><span class="ln">   570</span>		ONLRET   = 0x20
<a id="L571"></a><span class="ln">   571</span>		OFILL    = 0x40
<a id="L572"></a><span class="ln">   572</span>		OFDEL    = 0x80
<a id="L573"></a><span class="ln">   573</span>		B0       = 0x0
<a id="L574"></a><span class="ln">   574</span>		B50      = 0x1
<a id="L575"></a><span class="ln">   575</span>		B75      = 0x2
<a id="L576"></a><span class="ln">   576</span>		B110     = 0x3
<a id="L577"></a><span class="ln">   577</span>		B134     = 0x4
<a id="L578"></a><span class="ln">   578</span>		B150     = 0x5
<a id="L579"></a><span class="ln">   579</span>		B200     = 0x6
<a id="L580"></a><span class="ln">   580</span>		B300     = 0x7
<a id="L581"></a><span class="ln">   581</span>		B600     = 0x8
<a id="L582"></a><span class="ln">   582</span>		B1200    = 0x9
<a id="L583"></a><span class="ln">   583</span>		B1800    = 0xa
<a id="L584"></a><span class="ln">   584</span>		B2400    = 0xb
<a id="L585"></a><span class="ln">   585</span>		B4800    = 0xc
<a id="L586"></a><span class="ln">   586</span>		B9600    = 0xd
<a id="L587"></a><span class="ln">   587</span>		B19200   = 0xe
<a id="L588"></a><span class="ln">   588</span>		B38400   = 0xf
<a id="L589"></a><span class="ln">   589</span>		CSIZE    = 0x30
<a id="L590"></a><span class="ln">   590</span>		CS5      = 0x0
<a id="L591"></a><span class="ln">   591</span>		CS6      = 0x10
<a id="L592"></a><span class="ln">   592</span>		CS7      = 0x20
<a id="L593"></a><span class="ln">   593</span>		CS8      = 0x30
<a id="L594"></a><span class="ln">   594</span>		CSTOPB   = 0x40
<a id="L595"></a><span class="ln">   595</span>		CREAD    = 0x80
<a id="L596"></a><span class="ln">   596</span>		PARENB   = 0x100
<a id="L597"></a><span class="ln">   597</span>		PARODD   = 0x200
<a id="L598"></a><span class="ln">   598</span>		HUPCL    = 0x400
<a id="L599"></a><span class="ln">   599</span>		CLOCAL   = 0x800
<a id="L600"></a><span class="ln">   600</span>		B57600   = 0x1001
<a id="L601"></a><span class="ln">   601</span>		B115200  = 0x1002
<a id="L602"></a><span class="ln">   602</span>		B230400  = 0x1003
<a id="L603"></a><span class="ln">   603</span>		B460800  = 0x1004
<a id="L604"></a><span class="ln">   604</span>		B500000  = 0x1005
<a id="L605"></a><span class="ln">   605</span>		B576000  = 0x1006
<a id="L606"></a><span class="ln">   606</span>		B921600  = 0x1007
<a id="L607"></a><span class="ln">   607</span>		B1000000 = 0x1008
<a id="L608"></a><span class="ln">   608</span>		B1152000 = 0x1009
<a id="L609"></a><span class="ln">   609</span>		B1500000 = 0x100a
<a id="L610"></a><span class="ln">   610</span>		B2000000 = 0x100b
<a id="L611"></a><span class="ln">   611</span>		B2500000 = 0x100c
<a id="L612"></a><span class="ln">   612</span>		B3000000 = 0x100d
<a id="L613"></a><span class="ln">   613</span>		B3500000 = 0x100e
<a id="L614"></a><span class="ln">   614</span>		B4000000 = 0x100f
<a id="L615"></a><span class="ln">   615</span>		ISIG     = 0x1
<a id="L616"></a><span class="ln">   616</span>		ICANON   = 0x2
<a id="L617"></a><span class="ln">   617</span>		XCASE    = 0x4
<a id="L618"></a><span class="ln">   618</span>		ECHO     = 0x8
<a id="L619"></a><span class="ln">   619</span>		ECHOE    = 0x10
<a id="L620"></a><span class="ln">   620</span>		ECHOK    = 0x20
<a id="L621"></a><span class="ln">   621</span>		ECHONL   = 0x40
<a id="L622"></a><span class="ln">   622</span>		NOFLSH   = 0x80
<a id="L623"></a><span class="ln">   623</span>		TOSTOP   = 0x100
<a id="L624"></a><span class="ln">   624</span>		ECHOCTL  = 0x200
<a id="L625"></a><span class="ln">   625</span>		ECHOPRT  = 0x400
<a id="L626"></a><span class="ln">   626</span>		ECHOKE   = 0x800
<a id="L627"></a><span class="ln">   627</span>		FLUSHO   = 0x1000
<a id="L628"></a><span class="ln">   628</span>		PENDIN   = 0x4000
<a id="L629"></a><span class="ln">   629</span>		IEXTEN   = 0x8000
<a id="L630"></a><span class="ln">   630</span>		TCGETS   = 0x5401
<a id="L631"></a><span class="ln">   631</span>		TCSETS   = 0x5402
<a id="L632"></a><span class="ln">   632</span>	)
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

