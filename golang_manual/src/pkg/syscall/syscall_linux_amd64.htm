<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/syscall/syscall_linux_amd64.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/syscall/syscall_linux_amd64.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package syscall
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">//sys	Chown(path string, uid int, gid int) (err error)</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">//sys	Fchown(fd int, uid int, gid int) (err error)</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">//sys	Fstat(fd int, stat *Stat_t) (err error)</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">//sys	Fstatfs(fd int, buf *Statfs_t) (err error)</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">//sys	Ftruncate(fd int, length int64) (err error)</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">//sysnb	Getegid() (egid int)</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">//sysnb	Geteuid() (euid int)</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">//sysnb	Getgid() (gid int)</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">//sysnb	Getuid() (uid int)</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">//sys	Ioperm(from int, num int, on int) (err error)</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">//sys	Iopl(level int) (err error)</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">//sys	Lchown(path string, uid int, gid int) (err error)</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">//sys	Listen(s int, n int) (err error)</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">//sys	Lstat(path string, stat *Stat_t) (err error)</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">//sys	Pread(fd int, p []byte, offset int64) (n int, err error) = SYS_PREAD64</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">//sys	Pwrite(fd int, p []byte, offset int64) (n int, err error) = SYS_PWRITE64</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">//sys	Seek(fd int, offset int64, whence int) (off int64, err error) = SYS_LSEEK</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//sys	Select(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err error)</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">//sys	Sendfile(outfd int, infd int, offset *int64, count int) (written int, err error)</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">//sys	Setfsgid(gid int) (err error)</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">//sys	Setfsuid(uid int) (err error)</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">//sysnb	Setgid(gid int) (err error)</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">//sysnb	Setregid(rgid int, egid int) (err error)</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">//sysnb	Setresgid(rgid int, egid int, sgid int) (err error)</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">//sysnb	Setresuid(ruid int, euid int, suid int) (err error)</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">//sysnb	Setreuid(ruid int, euid int) (err error)</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">//sys	Shutdown(fd int, how int) (err error)</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">//sys	Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int64, err error)</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//sys	Stat(path string, stat *Stat_t) (err error)</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//sys	Statfs(path string, buf *Statfs_t) (err error)</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">//sys	SyncFileRange(fd int, off int64, n int64, flags int) (err error)</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//sys	Truncate(path string, length int64) (err error)</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">//sys	accept(s int, rsa *RawSockaddrAny, addrlen *_Socklen) (fd int, err error)</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">//sys	bind(s int, addr uintptr, addrlen _Socklen) (err error)</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">//sys	connect(s int, addr uintptr, addrlen _Socklen) (err error)</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">//sysnb	getgroups(n int, list *_Gid_t) (nn int, err error)</span>
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">//sysnb	setgroups(n int, list *_Gid_t) (err error)</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">//sys	getsockopt(s int, level int, name int, val uintptr, vallen *_Socklen) (err error)</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">//sys	setsockopt(s int, level int, name int, val uintptr, vallen uintptr) (err error)</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">//sysnb	socket(domain int, typ int, proto int) (fd int, err error)</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">//sysnb	socketpair(domain int, typ int, proto int, fd *[2]int) (err error)</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">//sysnb	getpeername(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error)</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">//sysnb	getsockname(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error)</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">//sys	recvfrom(fd int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen) (n int, err error)</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">//sys	sendto(s int, buf []byte, flags int, to uintptr, addrlen _Socklen) (err error)</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">//sys	recvmsg(s int, msg *Msghdr, flags int) (n int, err error)</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">//sys	sendmsg(s int, msg *Msghdr, flags int) (err error)</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">//sys	mmap(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64) (xaddr uintptr, err error)</span>
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>	func Getpagesize() int { return 4096 }
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>	func Gettimeofday(tv *Timeval) (err error)
<a id="L59"></a><span class="ln">    59</span>	func Time(t *Time_t) (tt Time_t, err error)
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>	func TimespecToNsec(ts Timespec) int64 { return int64(ts.Sec)*1e9 + int64(ts.Nsec) }
<a id="L62"></a><span class="ln">    62</span>	
<a id="L63"></a><span class="ln">    63</span>	func NsecToTimespec(nsec int64) (ts Timespec) {
<a id="L64"></a><span class="ln">    64</span>		ts.Sec = nsec / 1e9
<a id="L65"></a><span class="ln">    65</span>		ts.Nsec = nsec % 1e9
<a id="L66"></a><span class="ln">    66</span>		return
<a id="L67"></a><span class="ln">    67</span>	}
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>	func TimevalToNsec(tv Timeval) int64 { return int64(tv.Sec)*1e9 + int64(tv.Usec)*1e3 }
<a id="L70"></a><span class="ln">    70</span>	
<a id="L71"></a><span class="ln">    71</span>	func NsecToTimeval(nsec int64) (tv Timeval) {
<a id="L72"></a><span class="ln">    72</span>		nsec += 999 <span class="comment">// round up to microsecond</span>
<a id="L73"></a><span class="ln">    73</span>		tv.Sec = nsec / 1e9
<a id="L74"></a><span class="ln">    74</span>		tv.Usec = nsec % 1e9 / 1e3
<a id="L75"></a><span class="ln">    75</span>		return
<a id="L76"></a><span class="ln">    76</span>	}
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>	func (r *PtraceRegs) PC() uint64 { return r.Rip }
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>	func (r *PtraceRegs) SetPC(pc uint64) { r.Rip = pc }
<a id="L81"></a><span class="ln">    81</span>	
<a id="L82"></a><span class="ln">    82</span>	func (iov *Iovec) SetLen(length int) {
<a id="L83"></a><span class="ln">    83</span>		iov.Len = uint64(length)
<a id="L84"></a><span class="ln">    84</span>	}
<a id="L85"></a><span class="ln">    85</span>	
<a id="L86"></a><span class="ln">    86</span>	func (msghdr *Msghdr) SetControllen(length int) {
<a id="L87"></a><span class="ln">    87</span>		msghdr.Controllen = uint64(length)
<a id="L88"></a><span class="ln">    88</span>	}
<a id="L89"></a><span class="ln">    89</span>	
<a id="L90"></a><span class="ln">    90</span>	func (cmsg *Cmsghdr) SetLen(length int) {
<a id="L91"></a><span class="ln">    91</span>		cmsg.Len = uint64(length)
<a id="L92"></a><span class="ln">    92</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

