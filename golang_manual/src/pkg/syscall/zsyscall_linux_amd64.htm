<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/syscall/zsyscall_linux_amd64.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/syscall/zsyscall_linux_amd64.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// mksyscall.pl syscall_linux.go syscall_linux_amd64.go</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT</span>
<a id="L3"></a><span class="ln">     3</span>	
<a id="L4"></a><span class="ln">     4</span>	package syscall
<a id="L5"></a><span class="ln">     5</span>	
<a id="L6"></a><span class="ln">     6</span>	import &#34;unsafe&#34;
<a id="L7"></a><span class="ln">     7</span>	
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L9"></a><span class="ln">     9</span>	
<a id="L10"></a><span class="ln">    10</span>	func open(path string, mode int, perm uint32) (fd int, err error) {
<a id="L11"></a><span class="ln">    11</span>		r0, _, e1 := Syscall(SYS_OPEN, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(mode), uintptr(perm))
<a id="L12"></a><span class="ln">    12</span>		fd = int(r0)
<a id="L13"></a><span class="ln">    13</span>		if e1 != 0 {
<a id="L14"></a><span class="ln">    14</span>			err = e1
<a id="L15"></a><span class="ln">    15</span>		}
<a id="L16"></a><span class="ln">    16</span>		return
<a id="L17"></a><span class="ln">    17</span>	}
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L20"></a><span class="ln">    20</span>	
<a id="L21"></a><span class="ln">    21</span>	func openat(dirfd int, path string, flags int, mode uint32) (fd int, err error) {
<a id="L22"></a><span class="ln">    22</span>		r0, _, e1 := Syscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(flags), uintptr(mode), 0, 0)
<a id="L23"></a><span class="ln">    23</span>		fd = int(r0)
<a id="L24"></a><span class="ln">    24</span>		if e1 != 0 {
<a id="L25"></a><span class="ln">    25</span>			err = e1
<a id="L26"></a><span class="ln">    26</span>		}
<a id="L27"></a><span class="ln">    27</span>		return
<a id="L28"></a><span class="ln">    28</span>	}
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>	func pipe(p *[2]_C_int) (err error) {
<a id="L33"></a><span class="ln">    33</span>		_, _, e1 := RawSyscall(SYS_PIPE, uintptr(unsafe.Pointer(p)), 0, 0)
<a id="L34"></a><span class="ln">    34</span>		if e1 != 0 {
<a id="L35"></a><span class="ln">    35</span>			err = e1
<a id="L36"></a><span class="ln">    36</span>		}
<a id="L37"></a><span class="ln">    37</span>		return
<a id="L38"></a><span class="ln">    38</span>	}
<a id="L39"></a><span class="ln">    39</span>	
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L41"></a><span class="ln">    41</span>	
<a id="L42"></a><span class="ln">    42</span>	func utimes(path string, times *[2]Timeval) (err error) {
<a id="L43"></a><span class="ln">    43</span>		_, _, e1 := Syscall(SYS_UTIMES, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(unsafe.Pointer(times)), 0)
<a id="L44"></a><span class="ln">    44</span>		if e1 != 0 {
<a id="L45"></a><span class="ln">    45</span>			err = e1
<a id="L46"></a><span class="ln">    46</span>		}
<a id="L47"></a><span class="ln">    47</span>		return
<a id="L48"></a><span class="ln">    48</span>	}
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L51"></a><span class="ln">    51</span>	
<a id="L52"></a><span class="ln">    52</span>	func futimesat(dirfd int, path *byte, times *[2]Timeval) (err error) {
<a id="L53"></a><span class="ln">    53</span>		_, _, e1 := Syscall(SYS_FUTIMESAT, uintptr(dirfd), uintptr(unsafe.Pointer(path)), uintptr(unsafe.Pointer(times)))
<a id="L54"></a><span class="ln">    54</span>		if e1 != 0 {
<a id="L55"></a><span class="ln">    55</span>			err = e1
<a id="L56"></a><span class="ln">    56</span>		}
<a id="L57"></a><span class="ln">    57</span>		return
<a id="L58"></a><span class="ln">    58</span>	}
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L61"></a><span class="ln">    61</span>	
<a id="L62"></a><span class="ln">    62</span>	func Getcwd(buf []byte) (n int, err error) {
<a id="L63"></a><span class="ln">    63</span>		var _p0 unsafe.Pointer
<a id="L64"></a><span class="ln">    64</span>		if len(buf) &gt; 0 {
<a id="L65"></a><span class="ln">    65</span>			_p0 = unsafe.Pointer(&amp;buf[0])
<a id="L66"></a><span class="ln">    66</span>		} else {
<a id="L67"></a><span class="ln">    67</span>			_p0 = unsafe.Pointer(&amp;_zero)
<a id="L68"></a><span class="ln">    68</span>		}
<a id="L69"></a><span class="ln">    69</span>		r0, _, e1 := Syscall(SYS_GETCWD, uintptr(_p0), uintptr(len(buf)), 0)
<a id="L70"></a><span class="ln">    70</span>		n = int(r0)
<a id="L71"></a><span class="ln">    71</span>		if e1 != 0 {
<a id="L72"></a><span class="ln">    72</span>			err = e1
<a id="L73"></a><span class="ln">    73</span>		}
<a id="L74"></a><span class="ln">    74</span>		return
<a id="L75"></a><span class="ln">    75</span>	}
<a id="L76"></a><span class="ln">    76</span>	
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>	func wait4(pid int, wstatus *_C_int, options int, rusage *Rusage) (wpid int, err error) {
<a id="L80"></a><span class="ln">    80</span>		r0, _, e1 := Syscall6(SYS_WAIT4, uintptr(pid), uintptr(unsafe.Pointer(wstatus)), uintptr(options), uintptr(unsafe.Pointer(rusage)), 0, 0)
<a id="L81"></a><span class="ln">    81</span>		wpid = int(r0)
<a id="L82"></a><span class="ln">    82</span>		if e1 != 0 {
<a id="L83"></a><span class="ln">    83</span>			err = e1
<a id="L84"></a><span class="ln">    84</span>		}
<a id="L85"></a><span class="ln">    85</span>		return
<a id="L86"></a><span class="ln">    86</span>	}
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L89"></a><span class="ln">    89</span>	
<a id="L90"></a><span class="ln">    90</span>	func ptrace(request int, pid int, addr uintptr, data uintptr) (err error) {
<a id="L91"></a><span class="ln">    91</span>		_, _, e1 := Syscall6(SYS_PTRACE, uintptr(request), uintptr(pid), uintptr(addr), uintptr(data), 0, 0)
<a id="L92"></a><span class="ln">    92</span>		if e1 != 0 {
<a id="L93"></a><span class="ln">    93</span>			err = e1
<a id="L94"></a><span class="ln">    94</span>		}
<a id="L95"></a><span class="ln">    95</span>		return
<a id="L96"></a><span class="ln">    96</span>	}
<a id="L97"></a><span class="ln">    97</span>	
<a id="L98"></a><span class="ln">    98</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L99"></a><span class="ln">    99</span>	
<a id="L100"></a><span class="ln">   100</span>	func reboot(magic1 uint, magic2 uint, cmd int, arg string) (err error) {
<a id="L101"></a><span class="ln">   101</span>		_, _, e1 := Syscall6(SYS_REBOOT, uintptr(magic1), uintptr(magic2), uintptr(cmd), uintptr(unsafe.Pointer(StringBytePtr(arg))), 0, 0)
<a id="L102"></a><span class="ln">   102</span>		if e1 != 0 {
<a id="L103"></a><span class="ln">   103</span>			err = e1
<a id="L104"></a><span class="ln">   104</span>		}
<a id="L105"></a><span class="ln">   105</span>		return
<a id="L106"></a><span class="ln">   106</span>	}
<a id="L107"></a><span class="ln">   107</span>	
<a id="L108"></a><span class="ln">   108</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L109"></a><span class="ln">   109</span>	
<a id="L110"></a><span class="ln">   110</span>	func mount(source string, target string, fstype string, flags uintptr, data *byte) (err error) {
<a id="L111"></a><span class="ln">   111</span>		_, _, e1 := Syscall6(SYS_MOUNT, uintptr(unsafe.Pointer(StringBytePtr(source))), uintptr(unsafe.Pointer(StringBytePtr(target))), uintptr(unsafe.Pointer(StringBytePtr(fstype))), uintptr(flags), uintptr(unsafe.Pointer(data)), 0)
<a id="L112"></a><span class="ln">   112</span>		if e1 != 0 {
<a id="L113"></a><span class="ln">   113</span>			err = e1
<a id="L114"></a><span class="ln">   114</span>		}
<a id="L115"></a><span class="ln">   115</span>		return
<a id="L116"></a><span class="ln">   116</span>	}
<a id="L117"></a><span class="ln">   117</span>	
<a id="L118"></a><span class="ln">   118</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L119"></a><span class="ln">   119</span>	
<a id="L120"></a><span class="ln">   120</span>	func Access(path string, mode uint32) (err error) {
<a id="L121"></a><span class="ln">   121</span>		_, _, e1 := Syscall(SYS_ACCESS, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(mode), 0)
<a id="L122"></a><span class="ln">   122</span>		if e1 != 0 {
<a id="L123"></a><span class="ln">   123</span>			err = e1
<a id="L124"></a><span class="ln">   124</span>		}
<a id="L125"></a><span class="ln">   125</span>		return
<a id="L126"></a><span class="ln">   126</span>	}
<a id="L127"></a><span class="ln">   127</span>	
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L129"></a><span class="ln">   129</span>	
<a id="L130"></a><span class="ln">   130</span>	func Acct(path string) (err error) {
<a id="L131"></a><span class="ln">   131</span>		_, _, e1 := Syscall(SYS_ACCT, uintptr(unsafe.Pointer(StringBytePtr(path))), 0, 0)
<a id="L132"></a><span class="ln">   132</span>		if e1 != 0 {
<a id="L133"></a><span class="ln">   133</span>			err = e1
<a id="L134"></a><span class="ln">   134</span>		}
<a id="L135"></a><span class="ln">   135</span>		return
<a id="L136"></a><span class="ln">   136</span>	}
<a id="L137"></a><span class="ln">   137</span>	
<a id="L138"></a><span class="ln">   138</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L139"></a><span class="ln">   139</span>	
<a id="L140"></a><span class="ln">   140</span>	func Adjtimex(buf *Timex) (state int, err error) {
<a id="L141"></a><span class="ln">   141</span>		r0, _, e1 := Syscall(SYS_ADJTIMEX, uintptr(unsafe.Pointer(buf)), 0, 0)
<a id="L142"></a><span class="ln">   142</span>		state = int(r0)
<a id="L143"></a><span class="ln">   143</span>		if e1 != 0 {
<a id="L144"></a><span class="ln">   144</span>			err = e1
<a id="L145"></a><span class="ln">   145</span>		}
<a id="L146"></a><span class="ln">   146</span>		return
<a id="L147"></a><span class="ln">   147</span>	}
<a id="L148"></a><span class="ln">   148</span>	
<a id="L149"></a><span class="ln">   149</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L150"></a><span class="ln">   150</span>	
<a id="L151"></a><span class="ln">   151</span>	func Chdir(path string) (err error) {
<a id="L152"></a><span class="ln">   152</span>		_, _, e1 := Syscall(SYS_CHDIR, uintptr(unsafe.Pointer(StringBytePtr(path))), 0, 0)
<a id="L153"></a><span class="ln">   153</span>		if e1 != 0 {
<a id="L154"></a><span class="ln">   154</span>			err = e1
<a id="L155"></a><span class="ln">   155</span>		}
<a id="L156"></a><span class="ln">   156</span>		return
<a id="L157"></a><span class="ln">   157</span>	}
<a id="L158"></a><span class="ln">   158</span>	
<a id="L159"></a><span class="ln">   159</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L160"></a><span class="ln">   160</span>	
<a id="L161"></a><span class="ln">   161</span>	func Chmod(path string, mode uint32) (err error) {
<a id="L162"></a><span class="ln">   162</span>		_, _, e1 := Syscall(SYS_CHMOD, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(mode), 0)
<a id="L163"></a><span class="ln">   163</span>		if e1 != 0 {
<a id="L164"></a><span class="ln">   164</span>			err = e1
<a id="L165"></a><span class="ln">   165</span>		}
<a id="L166"></a><span class="ln">   166</span>		return
<a id="L167"></a><span class="ln">   167</span>	}
<a id="L168"></a><span class="ln">   168</span>	
<a id="L169"></a><span class="ln">   169</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L170"></a><span class="ln">   170</span>	
<a id="L171"></a><span class="ln">   171</span>	func Chroot(path string) (err error) {
<a id="L172"></a><span class="ln">   172</span>		_, _, e1 := Syscall(SYS_CHROOT, uintptr(unsafe.Pointer(StringBytePtr(path))), 0, 0)
<a id="L173"></a><span class="ln">   173</span>		if e1 != 0 {
<a id="L174"></a><span class="ln">   174</span>			err = e1
<a id="L175"></a><span class="ln">   175</span>		}
<a id="L176"></a><span class="ln">   176</span>		return
<a id="L177"></a><span class="ln">   177</span>	}
<a id="L178"></a><span class="ln">   178</span>	
<a id="L179"></a><span class="ln">   179</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L180"></a><span class="ln">   180</span>	
<a id="L181"></a><span class="ln">   181</span>	func Close(fd int) (err error) {
<a id="L182"></a><span class="ln">   182</span>		_, _, e1 := Syscall(SYS_CLOSE, uintptr(fd), 0, 0)
<a id="L183"></a><span class="ln">   183</span>		if e1 != 0 {
<a id="L184"></a><span class="ln">   184</span>			err = e1
<a id="L185"></a><span class="ln">   185</span>		}
<a id="L186"></a><span class="ln">   186</span>		return
<a id="L187"></a><span class="ln">   187</span>	}
<a id="L188"></a><span class="ln">   188</span>	
<a id="L189"></a><span class="ln">   189</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L190"></a><span class="ln">   190</span>	
<a id="L191"></a><span class="ln">   191</span>	func Creat(path string, mode uint32) (fd int, err error) {
<a id="L192"></a><span class="ln">   192</span>		r0, _, e1 := Syscall(SYS_CREAT, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(mode), 0)
<a id="L193"></a><span class="ln">   193</span>		fd = int(r0)
<a id="L194"></a><span class="ln">   194</span>		if e1 != 0 {
<a id="L195"></a><span class="ln">   195</span>			err = e1
<a id="L196"></a><span class="ln">   196</span>		}
<a id="L197"></a><span class="ln">   197</span>		return
<a id="L198"></a><span class="ln">   198</span>	}
<a id="L199"></a><span class="ln">   199</span>	
<a id="L200"></a><span class="ln">   200</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L201"></a><span class="ln">   201</span>	
<a id="L202"></a><span class="ln">   202</span>	func Dup(oldfd int) (fd int, err error) {
<a id="L203"></a><span class="ln">   203</span>		r0, _, e1 := RawSyscall(SYS_DUP, uintptr(oldfd), 0, 0)
<a id="L204"></a><span class="ln">   204</span>		fd = int(r0)
<a id="L205"></a><span class="ln">   205</span>		if e1 != 0 {
<a id="L206"></a><span class="ln">   206</span>			err = e1
<a id="L207"></a><span class="ln">   207</span>		}
<a id="L208"></a><span class="ln">   208</span>		return
<a id="L209"></a><span class="ln">   209</span>	}
<a id="L210"></a><span class="ln">   210</span>	
<a id="L211"></a><span class="ln">   211</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L212"></a><span class="ln">   212</span>	
<a id="L213"></a><span class="ln">   213</span>	func Dup2(oldfd int, newfd int) (err error) {
<a id="L214"></a><span class="ln">   214</span>		_, _, e1 := RawSyscall(SYS_DUP2, uintptr(oldfd), uintptr(newfd), 0)
<a id="L215"></a><span class="ln">   215</span>		if e1 != 0 {
<a id="L216"></a><span class="ln">   216</span>			err = e1
<a id="L217"></a><span class="ln">   217</span>		}
<a id="L218"></a><span class="ln">   218</span>		return
<a id="L219"></a><span class="ln">   219</span>	}
<a id="L220"></a><span class="ln">   220</span>	
<a id="L221"></a><span class="ln">   221</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L222"></a><span class="ln">   222</span>	
<a id="L223"></a><span class="ln">   223</span>	func EpollCreate(size int) (fd int, err error) {
<a id="L224"></a><span class="ln">   224</span>		r0, _, e1 := RawSyscall(SYS_EPOLL_CREATE, uintptr(size), 0, 0)
<a id="L225"></a><span class="ln">   225</span>		fd = int(r0)
<a id="L226"></a><span class="ln">   226</span>		if e1 != 0 {
<a id="L227"></a><span class="ln">   227</span>			err = e1
<a id="L228"></a><span class="ln">   228</span>		}
<a id="L229"></a><span class="ln">   229</span>		return
<a id="L230"></a><span class="ln">   230</span>	}
<a id="L231"></a><span class="ln">   231</span>	
<a id="L232"></a><span class="ln">   232</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L233"></a><span class="ln">   233</span>	
<a id="L234"></a><span class="ln">   234</span>	func EpollCreate1(flag int) (fd int, err error) {
<a id="L235"></a><span class="ln">   235</span>		r0, _, e1 := RawSyscall(SYS_EPOLL_CREATE1, uintptr(flag), 0, 0)
<a id="L236"></a><span class="ln">   236</span>		fd = int(r0)
<a id="L237"></a><span class="ln">   237</span>		if e1 != 0 {
<a id="L238"></a><span class="ln">   238</span>			err = e1
<a id="L239"></a><span class="ln">   239</span>		}
<a id="L240"></a><span class="ln">   240</span>		return
<a id="L241"></a><span class="ln">   241</span>	}
<a id="L242"></a><span class="ln">   242</span>	
<a id="L243"></a><span class="ln">   243</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L244"></a><span class="ln">   244</span>	
<a id="L245"></a><span class="ln">   245</span>	func EpollCtl(epfd int, op int, fd int, event *EpollEvent) (err error) {
<a id="L246"></a><span class="ln">   246</span>		_, _, e1 := RawSyscall6(SYS_EPOLL_CTL, uintptr(epfd), uintptr(op), uintptr(fd), uintptr(unsafe.Pointer(event)), 0, 0)
<a id="L247"></a><span class="ln">   247</span>		if e1 != 0 {
<a id="L248"></a><span class="ln">   248</span>			err = e1
<a id="L249"></a><span class="ln">   249</span>		}
<a id="L250"></a><span class="ln">   250</span>		return
<a id="L251"></a><span class="ln">   251</span>	}
<a id="L252"></a><span class="ln">   252</span>	
<a id="L253"></a><span class="ln">   253</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L254"></a><span class="ln">   254</span>	
<a id="L255"></a><span class="ln">   255</span>	func EpollWait(epfd int, events []EpollEvent, msec int) (n int, err error) {
<a id="L256"></a><span class="ln">   256</span>		var _p0 unsafe.Pointer
<a id="L257"></a><span class="ln">   257</span>		if len(events) &gt; 0 {
<a id="L258"></a><span class="ln">   258</span>			_p0 = unsafe.Pointer(&amp;events[0])
<a id="L259"></a><span class="ln">   259</span>		} else {
<a id="L260"></a><span class="ln">   260</span>			_p0 = unsafe.Pointer(&amp;_zero)
<a id="L261"></a><span class="ln">   261</span>		}
<a id="L262"></a><span class="ln">   262</span>		r0, _, e1 := Syscall6(SYS_EPOLL_WAIT, uintptr(epfd), uintptr(_p0), uintptr(len(events)), uintptr(msec), 0, 0)
<a id="L263"></a><span class="ln">   263</span>		n = int(r0)
<a id="L264"></a><span class="ln">   264</span>		if e1 != 0 {
<a id="L265"></a><span class="ln">   265</span>			err = e1
<a id="L266"></a><span class="ln">   266</span>		}
<a id="L267"></a><span class="ln">   267</span>		return
<a id="L268"></a><span class="ln">   268</span>	}
<a id="L269"></a><span class="ln">   269</span>	
<a id="L270"></a><span class="ln">   270</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L271"></a><span class="ln">   271</span>	
<a id="L272"></a><span class="ln">   272</span>	func Exit(code int) {
<a id="L273"></a><span class="ln">   273</span>		Syscall(SYS_EXIT_GROUP, uintptr(code), 0, 0)
<a id="L274"></a><span class="ln">   274</span>		return
<a id="L275"></a><span class="ln">   275</span>	}
<a id="L276"></a><span class="ln">   276</span>	
<a id="L277"></a><span class="ln">   277</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L278"></a><span class="ln">   278</span>	
<a id="L279"></a><span class="ln">   279</span>	func Faccessat(dirfd int, path string, mode uint32, flags int) (err error) {
<a id="L280"></a><span class="ln">   280</span>		_, _, e1 := Syscall6(SYS_FACCESSAT, uintptr(dirfd), uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(mode), uintptr(flags), 0, 0)
<a id="L281"></a><span class="ln">   281</span>		if e1 != 0 {
<a id="L282"></a><span class="ln">   282</span>			err = e1
<a id="L283"></a><span class="ln">   283</span>		}
<a id="L284"></a><span class="ln">   284</span>		return
<a id="L285"></a><span class="ln">   285</span>	}
<a id="L286"></a><span class="ln">   286</span>	
<a id="L287"></a><span class="ln">   287</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L288"></a><span class="ln">   288</span>	
<a id="L289"></a><span class="ln">   289</span>	func Fallocate(fd int, mode uint32, off int64, len int64) (err error) {
<a id="L290"></a><span class="ln">   290</span>		_, _, e1 := Syscall6(SYS_FALLOCATE, uintptr(fd), uintptr(mode), uintptr(off), uintptr(len), 0, 0)
<a id="L291"></a><span class="ln">   291</span>		if e1 != 0 {
<a id="L292"></a><span class="ln">   292</span>			err = e1
<a id="L293"></a><span class="ln">   293</span>		}
<a id="L294"></a><span class="ln">   294</span>		return
<a id="L295"></a><span class="ln">   295</span>	}
<a id="L296"></a><span class="ln">   296</span>	
<a id="L297"></a><span class="ln">   297</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L298"></a><span class="ln">   298</span>	
<a id="L299"></a><span class="ln">   299</span>	func Fchdir(fd int) (err error) {
<a id="L300"></a><span class="ln">   300</span>		_, _, e1 := Syscall(SYS_FCHDIR, uintptr(fd), 0, 0)
<a id="L301"></a><span class="ln">   301</span>		if e1 != 0 {
<a id="L302"></a><span class="ln">   302</span>			err = e1
<a id="L303"></a><span class="ln">   303</span>		}
<a id="L304"></a><span class="ln">   304</span>		return
<a id="L305"></a><span class="ln">   305</span>	}
<a id="L306"></a><span class="ln">   306</span>	
<a id="L307"></a><span class="ln">   307</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L308"></a><span class="ln">   308</span>	
<a id="L309"></a><span class="ln">   309</span>	func Fchmod(fd int, mode uint32) (err error) {
<a id="L310"></a><span class="ln">   310</span>		_, _, e1 := Syscall(SYS_FCHMOD, uintptr(fd), uintptr(mode), 0)
<a id="L311"></a><span class="ln">   311</span>		if e1 != 0 {
<a id="L312"></a><span class="ln">   312</span>			err = e1
<a id="L313"></a><span class="ln">   313</span>		}
<a id="L314"></a><span class="ln">   314</span>		return
<a id="L315"></a><span class="ln">   315</span>	}
<a id="L316"></a><span class="ln">   316</span>	
<a id="L317"></a><span class="ln">   317</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L318"></a><span class="ln">   318</span>	
<a id="L319"></a><span class="ln">   319</span>	func Fchmodat(dirfd int, path string, mode uint32, flags int) (err error) {
<a id="L320"></a><span class="ln">   320</span>		_, _, e1 := Syscall6(SYS_FCHMODAT, uintptr(dirfd), uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(mode), uintptr(flags), 0, 0)
<a id="L321"></a><span class="ln">   321</span>		if e1 != 0 {
<a id="L322"></a><span class="ln">   322</span>			err = e1
<a id="L323"></a><span class="ln">   323</span>		}
<a id="L324"></a><span class="ln">   324</span>		return
<a id="L325"></a><span class="ln">   325</span>	}
<a id="L326"></a><span class="ln">   326</span>	
<a id="L327"></a><span class="ln">   327</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L328"></a><span class="ln">   328</span>	
<a id="L329"></a><span class="ln">   329</span>	func Fchownat(dirfd int, path string, uid int, gid int, flags int) (err error) {
<a id="L330"></a><span class="ln">   330</span>		_, _, e1 := Syscall6(SYS_FCHOWNAT, uintptr(dirfd), uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(uid), uintptr(gid), uintptr(flags), 0)
<a id="L331"></a><span class="ln">   331</span>		if e1 != 0 {
<a id="L332"></a><span class="ln">   332</span>			err = e1
<a id="L333"></a><span class="ln">   333</span>		}
<a id="L334"></a><span class="ln">   334</span>		return
<a id="L335"></a><span class="ln">   335</span>	}
<a id="L336"></a><span class="ln">   336</span>	
<a id="L337"></a><span class="ln">   337</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L338"></a><span class="ln">   338</span>	
<a id="L339"></a><span class="ln">   339</span>	func fcntl(fd int, cmd int, arg int) (val int, err error) {
<a id="L340"></a><span class="ln">   340</span>		r0, _, e1 := Syscall(SYS_FCNTL, uintptr(fd), uintptr(cmd), uintptr(arg))
<a id="L341"></a><span class="ln">   341</span>		val = int(r0)
<a id="L342"></a><span class="ln">   342</span>		if e1 != 0 {
<a id="L343"></a><span class="ln">   343</span>			err = e1
<a id="L344"></a><span class="ln">   344</span>		}
<a id="L345"></a><span class="ln">   345</span>		return
<a id="L346"></a><span class="ln">   346</span>	}
<a id="L347"></a><span class="ln">   347</span>	
<a id="L348"></a><span class="ln">   348</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L349"></a><span class="ln">   349</span>	
<a id="L350"></a><span class="ln">   350</span>	func Fdatasync(fd int) (err error) {
<a id="L351"></a><span class="ln">   351</span>		_, _, e1 := Syscall(SYS_FDATASYNC, uintptr(fd), 0, 0)
<a id="L352"></a><span class="ln">   352</span>		if e1 != 0 {
<a id="L353"></a><span class="ln">   353</span>			err = e1
<a id="L354"></a><span class="ln">   354</span>		}
<a id="L355"></a><span class="ln">   355</span>		return
<a id="L356"></a><span class="ln">   356</span>	}
<a id="L357"></a><span class="ln">   357</span>	
<a id="L358"></a><span class="ln">   358</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L359"></a><span class="ln">   359</span>	
<a id="L360"></a><span class="ln">   360</span>	func Flock(fd int, how int) (err error) {
<a id="L361"></a><span class="ln">   361</span>		_, _, e1 := Syscall(SYS_FLOCK, uintptr(fd), uintptr(how), 0)
<a id="L362"></a><span class="ln">   362</span>		if e1 != 0 {
<a id="L363"></a><span class="ln">   363</span>			err = e1
<a id="L364"></a><span class="ln">   364</span>		}
<a id="L365"></a><span class="ln">   365</span>		return
<a id="L366"></a><span class="ln">   366</span>	}
<a id="L367"></a><span class="ln">   367</span>	
<a id="L368"></a><span class="ln">   368</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L369"></a><span class="ln">   369</span>	
<a id="L370"></a><span class="ln">   370</span>	func Fsync(fd int) (err error) {
<a id="L371"></a><span class="ln">   371</span>		_, _, e1 := Syscall(SYS_FSYNC, uintptr(fd), 0, 0)
<a id="L372"></a><span class="ln">   372</span>		if e1 != 0 {
<a id="L373"></a><span class="ln">   373</span>			err = e1
<a id="L374"></a><span class="ln">   374</span>		}
<a id="L375"></a><span class="ln">   375</span>		return
<a id="L376"></a><span class="ln">   376</span>	}
<a id="L377"></a><span class="ln">   377</span>	
<a id="L378"></a><span class="ln">   378</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L379"></a><span class="ln">   379</span>	
<a id="L380"></a><span class="ln">   380</span>	func Getdents(fd int, buf []byte) (n int, err error) {
<a id="L381"></a><span class="ln">   381</span>		var _p0 unsafe.Pointer
<a id="L382"></a><span class="ln">   382</span>		if len(buf) &gt; 0 {
<a id="L383"></a><span class="ln">   383</span>			_p0 = unsafe.Pointer(&amp;buf[0])
<a id="L384"></a><span class="ln">   384</span>		} else {
<a id="L385"></a><span class="ln">   385</span>			_p0 = unsafe.Pointer(&amp;_zero)
<a id="L386"></a><span class="ln">   386</span>		}
<a id="L387"></a><span class="ln">   387</span>		r0, _, e1 := Syscall(SYS_GETDENTS64, uintptr(fd), uintptr(_p0), uintptr(len(buf)))
<a id="L388"></a><span class="ln">   388</span>		n = int(r0)
<a id="L389"></a><span class="ln">   389</span>		if e1 != 0 {
<a id="L390"></a><span class="ln">   390</span>			err = e1
<a id="L391"></a><span class="ln">   391</span>		}
<a id="L392"></a><span class="ln">   392</span>		return
<a id="L393"></a><span class="ln">   393</span>	}
<a id="L394"></a><span class="ln">   394</span>	
<a id="L395"></a><span class="ln">   395</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L396"></a><span class="ln">   396</span>	
<a id="L397"></a><span class="ln">   397</span>	func Getpgid(pid int) (pgid int, err error) {
<a id="L398"></a><span class="ln">   398</span>		r0, _, e1 := RawSyscall(SYS_GETPGID, uintptr(pid), 0, 0)
<a id="L399"></a><span class="ln">   399</span>		pgid = int(r0)
<a id="L400"></a><span class="ln">   400</span>		if e1 != 0 {
<a id="L401"></a><span class="ln">   401</span>			err = e1
<a id="L402"></a><span class="ln">   402</span>		}
<a id="L403"></a><span class="ln">   403</span>		return
<a id="L404"></a><span class="ln">   404</span>	}
<a id="L405"></a><span class="ln">   405</span>	
<a id="L406"></a><span class="ln">   406</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L407"></a><span class="ln">   407</span>	
<a id="L408"></a><span class="ln">   408</span>	func Getpgrp() (pid int) {
<a id="L409"></a><span class="ln">   409</span>		r0, _, _ := RawSyscall(SYS_GETPGRP, 0, 0, 0)
<a id="L410"></a><span class="ln">   410</span>		pid = int(r0)
<a id="L411"></a><span class="ln">   411</span>		return
<a id="L412"></a><span class="ln">   412</span>	}
<a id="L413"></a><span class="ln">   413</span>	
<a id="L414"></a><span class="ln">   414</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L415"></a><span class="ln">   415</span>	
<a id="L416"></a><span class="ln">   416</span>	func Getpid() (pid int) {
<a id="L417"></a><span class="ln">   417</span>		r0, _, _ := RawSyscall(SYS_GETPID, 0, 0, 0)
<a id="L418"></a><span class="ln">   418</span>		pid = int(r0)
<a id="L419"></a><span class="ln">   419</span>		return
<a id="L420"></a><span class="ln">   420</span>	}
<a id="L421"></a><span class="ln">   421</span>	
<a id="L422"></a><span class="ln">   422</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L423"></a><span class="ln">   423</span>	
<a id="L424"></a><span class="ln">   424</span>	func Getppid() (ppid int) {
<a id="L425"></a><span class="ln">   425</span>		r0, _, _ := RawSyscall(SYS_GETPPID, 0, 0, 0)
<a id="L426"></a><span class="ln">   426</span>		ppid = int(r0)
<a id="L427"></a><span class="ln">   427</span>		return
<a id="L428"></a><span class="ln">   428</span>	}
<a id="L429"></a><span class="ln">   429</span>	
<a id="L430"></a><span class="ln">   430</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L431"></a><span class="ln">   431</span>	
<a id="L432"></a><span class="ln">   432</span>	func Getrlimit(resource int, rlim *Rlimit) (err error) {
<a id="L433"></a><span class="ln">   433</span>		_, _, e1 := RawSyscall(SYS_GETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)
<a id="L434"></a><span class="ln">   434</span>		if e1 != 0 {
<a id="L435"></a><span class="ln">   435</span>			err = e1
<a id="L436"></a><span class="ln">   436</span>		}
<a id="L437"></a><span class="ln">   437</span>		return
<a id="L438"></a><span class="ln">   438</span>	}
<a id="L439"></a><span class="ln">   439</span>	
<a id="L440"></a><span class="ln">   440</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L441"></a><span class="ln">   441</span>	
<a id="L442"></a><span class="ln">   442</span>	func Getrusage(who int, rusage *Rusage) (err error) {
<a id="L443"></a><span class="ln">   443</span>		_, _, e1 := RawSyscall(SYS_GETRUSAGE, uintptr(who), uintptr(unsafe.Pointer(rusage)), 0)
<a id="L444"></a><span class="ln">   444</span>		if e1 != 0 {
<a id="L445"></a><span class="ln">   445</span>			err = e1
<a id="L446"></a><span class="ln">   446</span>		}
<a id="L447"></a><span class="ln">   447</span>		return
<a id="L448"></a><span class="ln">   448</span>	}
<a id="L449"></a><span class="ln">   449</span>	
<a id="L450"></a><span class="ln">   450</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L451"></a><span class="ln">   451</span>	
<a id="L452"></a><span class="ln">   452</span>	func Gettid() (tid int) {
<a id="L453"></a><span class="ln">   453</span>		r0, _, _ := RawSyscall(SYS_GETTID, 0, 0, 0)
<a id="L454"></a><span class="ln">   454</span>		tid = int(r0)
<a id="L455"></a><span class="ln">   455</span>		return
<a id="L456"></a><span class="ln">   456</span>	}
<a id="L457"></a><span class="ln">   457</span>	
<a id="L458"></a><span class="ln">   458</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L459"></a><span class="ln">   459</span>	
<a id="L460"></a><span class="ln">   460</span>	func InotifyAddWatch(fd int, pathname string, mask uint32) (watchdesc int, err error) {
<a id="L461"></a><span class="ln">   461</span>		r0, _, e1 := Syscall(SYS_INOTIFY_ADD_WATCH, uintptr(fd), uintptr(unsafe.Pointer(StringBytePtr(pathname))), uintptr(mask))
<a id="L462"></a><span class="ln">   462</span>		watchdesc = int(r0)
<a id="L463"></a><span class="ln">   463</span>		if e1 != 0 {
<a id="L464"></a><span class="ln">   464</span>			err = e1
<a id="L465"></a><span class="ln">   465</span>		}
<a id="L466"></a><span class="ln">   466</span>		return
<a id="L467"></a><span class="ln">   467</span>	}
<a id="L468"></a><span class="ln">   468</span>	
<a id="L469"></a><span class="ln">   469</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L470"></a><span class="ln">   470</span>	
<a id="L471"></a><span class="ln">   471</span>	func InotifyInit() (fd int, err error) {
<a id="L472"></a><span class="ln">   472</span>		r0, _, e1 := RawSyscall(SYS_INOTIFY_INIT, 0, 0, 0)
<a id="L473"></a><span class="ln">   473</span>		fd = int(r0)
<a id="L474"></a><span class="ln">   474</span>		if e1 != 0 {
<a id="L475"></a><span class="ln">   475</span>			err = e1
<a id="L476"></a><span class="ln">   476</span>		}
<a id="L477"></a><span class="ln">   477</span>		return
<a id="L478"></a><span class="ln">   478</span>	}
<a id="L479"></a><span class="ln">   479</span>	
<a id="L480"></a><span class="ln">   480</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L481"></a><span class="ln">   481</span>	
<a id="L482"></a><span class="ln">   482</span>	func InotifyInit1(flags int) (fd int, err error) {
<a id="L483"></a><span class="ln">   483</span>		r0, _, e1 := RawSyscall(SYS_INOTIFY_INIT1, uintptr(flags), 0, 0)
<a id="L484"></a><span class="ln">   484</span>		fd = int(r0)
<a id="L485"></a><span class="ln">   485</span>		if e1 != 0 {
<a id="L486"></a><span class="ln">   486</span>			err = e1
<a id="L487"></a><span class="ln">   487</span>		}
<a id="L488"></a><span class="ln">   488</span>		return
<a id="L489"></a><span class="ln">   489</span>	}
<a id="L490"></a><span class="ln">   490</span>	
<a id="L491"></a><span class="ln">   491</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L492"></a><span class="ln">   492</span>	
<a id="L493"></a><span class="ln">   493</span>	func InotifyRmWatch(fd int, watchdesc uint32) (success int, err error) {
<a id="L494"></a><span class="ln">   494</span>		r0, _, e1 := RawSyscall(SYS_INOTIFY_RM_WATCH, uintptr(fd), uintptr(watchdesc), 0)
<a id="L495"></a><span class="ln">   495</span>		success = int(r0)
<a id="L496"></a><span class="ln">   496</span>		if e1 != 0 {
<a id="L497"></a><span class="ln">   497</span>			err = e1
<a id="L498"></a><span class="ln">   498</span>		}
<a id="L499"></a><span class="ln">   499</span>		return
<a id="L500"></a><span class="ln">   500</span>	}
<a id="L501"></a><span class="ln">   501</span>	
<a id="L502"></a><span class="ln">   502</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L503"></a><span class="ln">   503</span>	
<a id="L504"></a><span class="ln">   504</span>	func Kill(pid int, sig Signal) (err error) {
<a id="L505"></a><span class="ln">   505</span>		_, _, e1 := RawSyscall(SYS_KILL, uintptr(pid), uintptr(sig), 0)
<a id="L506"></a><span class="ln">   506</span>		if e1 != 0 {
<a id="L507"></a><span class="ln">   507</span>			err = e1
<a id="L508"></a><span class="ln">   508</span>		}
<a id="L509"></a><span class="ln">   509</span>		return
<a id="L510"></a><span class="ln">   510</span>	}
<a id="L511"></a><span class="ln">   511</span>	
<a id="L512"></a><span class="ln">   512</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L513"></a><span class="ln">   513</span>	
<a id="L514"></a><span class="ln">   514</span>	func Klogctl(typ int, buf []byte) (n int, err error) {
<a id="L515"></a><span class="ln">   515</span>		var _p0 unsafe.Pointer
<a id="L516"></a><span class="ln">   516</span>		if len(buf) &gt; 0 {
<a id="L517"></a><span class="ln">   517</span>			_p0 = unsafe.Pointer(&amp;buf[0])
<a id="L518"></a><span class="ln">   518</span>		} else {
<a id="L519"></a><span class="ln">   519</span>			_p0 = unsafe.Pointer(&amp;_zero)
<a id="L520"></a><span class="ln">   520</span>		}
<a id="L521"></a><span class="ln">   521</span>		r0, _, e1 := Syscall(SYS_SYSLOG, uintptr(typ), uintptr(_p0), uintptr(len(buf)))
<a id="L522"></a><span class="ln">   522</span>		n = int(r0)
<a id="L523"></a><span class="ln">   523</span>		if e1 != 0 {
<a id="L524"></a><span class="ln">   524</span>			err = e1
<a id="L525"></a><span class="ln">   525</span>		}
<a id="L526"></a><span class="ln">   526</span>		return
<a id="L527"></a><span class="ln">   527</span>	}
<a id="L528"></a><span class="ln">   528</span>	
<a id="L529"></a><span class="ln">   529</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L530"></a><span class="ln">   530</span>	
<a id="L531"></a><span class="ln">   531</span>	func Link(oldpath string, newpath string) (err error) {
<a id="L532"></a><span class="ln">   532</span>		_, _, e1 := Syscall(SYS_LINK, uintptr(unsafe.Pointer(StringBytePtr(oldpath))), uintptr(unsafe.Pointer(StringBytePtr(newpath))), 0)
<a id="L533"></a><span class="ln">   533</span>		if e1 != 0 {
<a id="L534"></a><span class="ln">   534</span>			err = e1
<a id="L535"></a><span class="ln">   535</span>		}
<a id="L536"></a><span class="ln">   536</span>		return
<a id="L537"></a><span class="ln">   537</span>	}
<a id="L538"></a><span class="ln">   538</span>	
<a id="L539"></a><span class="ln">   539</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L540"></a><span class="ln">   540</span>	
<a id="L541"></a><span class="ln">   541</span>	func Mkdir(path string, mode uint32) (err error) {
<a id="L542"></a><span class="ln">   542</span>		_, _, e1 := Syscall(SYS_MKDIR, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(mode), 0)
<a id="L543"></a><span class="ln">   543</span>		if e1 != 0 {
<a id="L544"></a><span class="ln">   544</span>			err = e1
<a id="L545"></a><span class="ln">   545</span>		}
<a id="L546"></a><span class="ln">   546</span>		return
<a id="L547"></a><span class="ln">   547</span>	}
<a id="L548"></a><span class="ln">   548</span>	
<a id="L549"></a><span class="ln">   549</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L550"></a><span class="ln">   550</span>	
<a id="L551"></a><span class="ln">   551</span>	func Mkdirat(dirfd int, path string, mode uint32) (err error) {
<a id="L552"></a><span class="ln">   552</span>		_, _, e1 := Syscall(SYS_MKDIRAT, uintptr(dirfd), uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(mode))
<a id="L553"></a><span class="ln">   553</span>		if e1 != 0 {
<a id="L554"></a><span class="ln">   554</span>			err = e1
<a id="L555"></a><span class="ln">   555</span>		}
<a id="L556"></a><span class="ln">   556</span>		return
<a id="L557"></a><span class="ln">   557</span>	}
<a id="L558"></a><span class="ln">   558</span>	
<a id="L559"></a><span class="ln">   559</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L560"></a><span class="ln">   560</span>	
<a id="L561"></a><span class="ln">   561</span>	func Mknod(path string, mode uint32, dev int) (err error) {
<a id="L562"></a><span class="ln">   562</span>		_, _, e1 := Syscall(SYS_MKNOD, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(mode), uintptr(dev))
<a id="L563"></a><span class="ln">   563</span>		if e1 != 0 {
<a id="L564"></a><span class="ln">   564</span>			err = e1
<a id="L565"></a><span class="ln">   565</span>		}
<a id="L566"></a><span class="ln">   566</span>		return
<a id="L567"></a><span class="ln">   567</span>	}
<a id="L568"></a><span class="ln">   568</span>	
<a id="L569"></a><span class="ln">   569</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L570"></a><span class="ln">   570</span>	
<a id="L571"></a><span class="ln">   571</span>	func Mknodat(dirfd int, path string, mode uint32, dev int) (err error) {
<a id="L572"></a><span class="ln">   572</span>		_, _, e1 := Syscall6(SYS_MKNODAT, uintptr(dirfd), uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(mode), uintptr(dev), 0, 0)
<a id="L573"></a><span class="ln">   573</span>		if e1 != 0 {
<a id="L574"></a><span class="ln">   574</span>			err = e1
<a id="L575"></a><span class="ln">   575</span>		}
<a id="L576"></a><span class="ln">   576</span>		return
<a id="L577"></a><span class="ln">   577</span>	}
<a id="L578"></a><span class="ln">   578</span>	
<a id="L579"></a><span class="ln">   579</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L580"></a><span class="ln">   580</span>	
<a id="L581"></a><span class="ln">   581</span>	func Nanosleep(time *Timespec, leftover *Timespec) (err error) {
<a id="L582"></a><span class="ln">   582</span>		_, _, e1 := Syscall(SYS_NANOSLEEP, uintptr(unsafe.Pointer(time)), uintptr(unsafe.Pointer(leftover)), 0)
<a id="L583"></a><span class="ln">   583</span>		if e1 != 0 {
<a id="L584"></a><span class="ln">   584</span>			err = e1
<a id="L585"></a><span class="ln">   585</span>		}
<a id="L586"></a><span class="ln">   586</span>		return
<a id="L587"></a><span class="ln">   587</span>	}
<a id="L588"></a><span class="ln">   588</span>	
<a id="L589"></a><span class="ln">   589</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L590"></a><span class="ln">   590</span>	
<a id="L591"></a><span class="ln">   591</span>	func Pause() (err error) {
<a id="L592"></a><span class="ln">   592</span>		_, _, e1 := Syscall(SYS_PAUSE, 0, 0, 0)
<a id="L593"></a><span class="ln">   593</span>		if e1 != 0 {
<a id="L594"></a><span class="ln">   594</span>			err = e1
<a id="L595"></a><span class="ln">   595</span>		}
<a id="L596"></a><span class="ln">   596</span>		return
<a id="L597"></a><span class="ln">   597</span>	}
<a id="L598"></a><span class="ln">   598</span>	
<a id="L599"></a><span class="ln">   599</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L600"></a><span class="ln">   600</span>	
<a id="L601"></a><span class="ln">   601</span>	func PivotRoot(newroot string, putold string) (err error) {
<a id="L602"></a><span class="ln">   602</span>		_, _, e1 := Syscall(SYS_PIVOT_ROOT, uintptr(unsafe.Pointer(StringBytePtr(newroot))), uintptr(unsafe.Pointer(StringBytePtr(putold))), 0)
<a id="L603"></a><span class="ln">   603</span>		if e1 != 0 {
<a id="L604"></a><span class="ln">   604</span>			err = e1
<a id="L605"></a><span class="ln">   605</span>		}
<a id="L606"></a><span class="ln">   606</span>		return
<a id="L607"></a><span class="ln">   607</span>	}
<a id="L608"></a><span class="ln">   608</span>	
<a id="L609"></a><span class="ln">   609</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L610"></a><span class="ln">   610</span>	
<a id="L611"></a><span class="ln">   611</span>	func Read(fd int, p []byte) (n int, err error) {
<a id="L612"></a><span class="ln">   612</span>		var _p0 unsafe.Pointer
<a id="L613"></a><span class="ln">   613</span>		if len(p) &gt; 0 {
<a id="L614"></a><span class="ln">   614</span>			_p0 = unsafe.Pointer(&amp;p[0])
<a id="L615"></a><span class="ln">   615</span>		} else {
<a id="L616"></a><span class="ln">   616</span>			_p0 = unsafe.Pointer(&amp;_zero)
<a id="L617"></a><span class="ln">   617</span>		}
<a id="L618"></a><span class="ln">   618</span>		r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(_p0), uintptr(len(p)))
<a id="L619"></a><span class="ln">   619</span>		n = int(r0)
<a id="L620"></a><span class="ln">   620</span>		if e1 != 0 {
<a id="L621"></a><span class="ln">   621</span>			err = e1
<a id="L622"></a><span class="ln">   622</span>		}
<a id="L623"></a><span class="ln">   623</span>		return
<a id="L624"></a><span class="ln">   624</span>	}
<a id="L625"></a><span class="ln">   625</span>	
<a id="L626"></a><span class="ln">   626</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L627"></a><span class="ln">   627</span>	
<a id="L628"></a><span class="ln">   628</span>	func Readlink(path string, buf []byte) (n int, err error) {
<a id="L629"></a><span class="ln">   629</span>		var _p0 unsafe.Pointer
<a id="L630"></a><span class="ln">   630</span>		if len(buf) &gt; 0 {
<a id="L631"></a><span class="ln">   631</span>			_p0 = unsafe.Pointer(&amp;buf[0])
<a id="L632"></a><span class="ln">   632</span>		} else {
<a id="L633"></a><span class="ln">   633</span>			_p0 = unsafe.Pointer(&amp;_zero)
<a id="L634"></a><span class="ln">   634</span>		}
<a id="L635"></a><span class="ln">   635</span>		r0, _, e1 := Syscall(SYS_READLINK, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(_p0), uintptr(len(buf)))
<a id="L636"></a><span class="ln">   636</span>		n = int(r0)
<a id="L637"></a><span class="ln">   637</span>		if e1 != 0 {
<a id="L638"></a><span class="ln">   638</span>			err = e1
<a id="L639"></a><span class="ln">   639</span>		}
<a id="L640"></a><span class="ln">   640</span>		return
<a id="L641"></a><span class="ln">   641</span>	}
<a id="L642"></a><span class="ln">   642</span>	
<a id="L643"></a><span class="ln">   643</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L644"></a><span class="ln">   644</span>	
<a id="L645"></a><span class="ln">   645</span>	func Rename(oldpath string, newpath string) (err error) {
<a id="L646"></a><span class="ln">   646</span>		_, _, e1 := Syscall(SYS_RENAME, uintptr(unsafe.Pointer(StringBytePtr(oldpath))), uintptr(unsafe.Pointer(StringBytePtr(newpath))), 0)
<a id="L647"></a><span class="ln">   647</span>		if e1 != 0 {
<a id="L648"></a><span class="ln">   648</span>			err = e1
<a id="L649"></a><span class="ln">   649</span>		}
<a id="L650"></a><span class="ln">   650</span>		return
<a id="L651"></a><span class="ln">   651</span>	}
<a id="L652"></a><span class="ln">   652</span>	
<a id="L653"></a><span class="ln">   653</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L654"></a><span class="ln">   654</span>	
<a id="L655"></a><span class="ln">   655</span>	func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) {
<a id="L656"></a><span class="ln">   656</span>		_, _, e1 := Syscall6(SYS_RENAMEAT, uintptr(olddirfd), uintptr(unsafe.Pointer(StringBytePtr(oldpath))), uintptr(newdirfd), uintptr(unsafe.Pointer(StringBytePtr(newpath))), 0, 0)
<a id="L657"></a><span class="ln">   657</span>		if e1 != 0 {
<a id="L658"></a><span class="ln">   658</span>			err = e1
<a id="L659"></a><span class="ln">   659</span>		}
<a id="L660"></a><span class="ln">   660</span>		return
<a id="L661"></a><span class="ln">   661</span>	}
<a id="L662"></a><span class="ln">   662</span>	
<a id="L663"></a><span class="ln">   663</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L664"></a><span class="ln">   664</span>	
<a id="L665"></a><span class="ln">   665</span>	func Rmdir(path string) (err error) {
<a id="L666"></a><span class="ln">   666</span>		_, _, e1 := Syscall(SYS_RMDIR, uintptr(unsafe.Pointer(StringBytePtr(path))), 0, 0)
<a id="L667"></a><span class="ln">   667</span>		if e1 != 0 {
<a id="L668"></a><span class="ln">   668</span>			err = e1
<a id="L669"></a><span class="ln">   669</span>		}
<a id="L670"></a><span class="ln">   670</span>		return
<a id="L671"></a><span class="ln">   671</span>	}
<a id="L672"></a><span class="ln">   672</span>	
<a id="L673"></a><span class="ln">   673</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L674"></a><span class="ln">   674</span>	
<a id="L675"></a><span class="ln">   675</span>	func Setdomainname(p []byte) (err error) {
<a id="L676"></a><span class="ln">   676</span>		var _p0 unsafe.Pointer
<a id="L677"></a><span class="ln">   677</span>		if len(p) &gt; 0 {
<a id="L678"></a><span class="ln">   678</span>			_p0 = unsafe.Pointer(&amp;p[0])
<a id="L679"></a><span class="ln">   679</span>		} else {
<a id="L680"></a><span class="ln">   680</span>			_p0 = unsafe.Pointer(&amp;_zero)
<a id="L681"></a><span class="ln">   681</span>		}
<a id="L682"></a><span class="ln">   682</span>		_, _, e1 := Syscall(SYS_SETDOMAINNAME, uintptr(_p0), uintptr(len(p)), 0)
<a id="L683"></a><span class="ln">   683</span>		if e1 != 0 {
<a id="L684"></a><span class="ln">   684</span>			err = e1
<a id="L685"></a><span class="ln">   685</span>		}
<a id="L686"></a><span class="ln">   686</span>		return
<a id="L687"></a><span class="ln">   687</span>	}
<a id="L688"></a><span class="ln">   688</span>	
<a id="L689"></a><span class="ln">   689</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L690"></a><span class="ln">   690</span>	
<a id="L691"></a><span class="ln">   691</span>	func Sethostname(p []byte) (err error) {
<a id="L692"></a><span class="ln">   692</span>		var _p0 unsafe.Pointer
<a id="L693"></a><span class="ln">   693</span>		if len(p) &gt; 0 {
<a id="L694"></a><span class="ln">   694</span>			_p0 = unsafe.Pointer(&amp;p[0])
<a id="L695"></a><span class="ln">   695</span>		} else {
<a id="L696"></a><span class="ln">   696</span>			_p0 = unsafe.Pointer(&amp;_zero)
<a id="L697"></a><span class="ln">   697</span>		}
<a id="L698"></a><span class="ln">   698</span>		_, _, e1 := Syscall(SYS_SETHOSTNAME, uintptr(_p0), uintptr(len(p)), 0)
<a id="L699"></a><span class="ln">   699</span>		if e1 != 0 {
<a id="L700"></a><span class="ln">   700</span>			err = e1
<a id="L701"></a><span class="ln">   701</span>		}
<a id="L702"></a><span class="ln">   702</span>		return
<a id="L703"></a><span class="ln">   703</span>	}
<a id="L704"></a><span class="ln">   704</span>	
<a id="L705"></a><span class="ln">   705</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L706"></a><span class="ln">   706</span>	
<a id="L707"></a><span class="ln">   707</span>	func Setpgid(pid int, pgid int) (err error) {
<a id="L708"></a><span class="ln">   708</span>		_, _, e1 := RawSyscall(SYS_SETPGID, uintptr(pid), uintptr(pgid), 0)
<a id="L709"></a><span class="ln">   709</span>		if e1 != 0 {
<a id="L710"></a><span class="ln">   710</span>			err = e1
<a id="L711"></a><span class="ln">   711</span>		}
<a id="L712"></a><span class="ln">   712</span>		return
<a id="L713"></a><span class="ln">   713</span>	}
<a id="L714"></a><span class="ln">   714</span>	
<a id="L715"></a><span class="ln">   715</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L716"></a><span class="ln">   716</span>	
<a id="L717"></a><span class="ln">   717</span>	func Setrlimit(resource int, rlim *Rlimit) (err error) {
<a id="L718"></a><span class="ln">   718</span>		_, _, e1 := RawSyscall(SYS_SETRLIMIT, uintptr(resource), uintptr(unsafe.Pointer(rlim)), 0)
<a id="L719"></a><span class="ln">   719</span>		if e1 != 0 {
<a id="L720"></a><span class="ln">   720</span>			err = e1
<a id="L721"></a><span class="ln">   721</span>		}
<a id="L722"></a><span class="ln">   722</span>		return
<a id="L723"></a><span class="ln">   723</span>	}
<a id="L724"></a><span class="ln">   724</span>	
<a id="L725"></a><span class="ln">   725</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L726"></a><span class="ln">   726</span>	
<a id="L727"></a><span class="ln">   727</span>	func Setsid() (pid int, err error) {
<a id="L728"></a><span class="ln">   728</span>		r0, _, e1 := RawSyscall(SYS_SETSID, 0, 0, 0)
<a id="L729"></a><span class="ln">   729</span>		pid = int(r0)
<a id="L730"></a><span class="ln">   730</span>		if e1 != 0 {
<a id="L731"></a><span class="ln">   731</span>			err = e1
<a id="L732"></a><span class="ln">   732</span>		}
<a id="L733"></a><span class="ln">   733</span>		return
<a id="L734"></a><span class="ln">   734</span>	}
<a id="L735"></a><span class="ln">   735</span>	
<a id="L736"></a><span class="ln">   736</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L737"></a><span class="ln">   737</span>	
<a id="L738"></a><span class="ln">   738</span>	func Settimeofday(tv *Timeval) (err error) {
<a id="L739"></a><span class="ln">   739</span>		_, _, e1 := RawSyscall(SYS_SETTIMEOFDAY, uintptr(unsafe.Pointer(tv)), 0, 0)
<a id="L740"></a><span class="ln">   740</span>		if e1 != 0 {
<a id="L741"></a><span class="ln">   741</span>			err = e1
<a id="L742"></a><span class="ln">   742</span>		}
<a id="L743"></a><span class="ln">   743</span>		return
<a id="L744"></a><span class="ln">   744</span>	}
<a id="L745"></a><span class="ln">   745</span>	
<a id="L746"></a><span class="ln">   746</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L747"></a><span class="ln">   747</span>	
<a id="L748"></a><span class="ln">   748</span>	func Setuid(uid int) (err error) {
<a id="L749"></a><span class="ln">   749</span>		_, _, e1 := RawSyscall(SYS_SETUID, uintptr(uid), 0, 0)
<a id="L750"></a><span class="ln">   750</span>		if e1 != 0 {
<a id="L751"></a><span class="ln">   751</span>			err = e1
<a id="L752"></a><span class="ln">   752</span>		}
<a id="L753"></a><span class="ln">   753</span>		return
<a id="L754"></a><span class="ln">   754</span>	}
<a id="L755"></a><span class="ln">   755</span>	
<a id="L756"></a><span class="ln">   756</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L757"></a><span class="ln">   757</span>	
<a id="L758"></a><span class="ln">   758</span>	func Symlink(oldpath string, newpath string) (err error) {
<a id="L759"></a><span class="ln">   759</span>		_, _, e1 := Syscall(SYS_SYMLINK, uintptr(unsafe.Pointer(StringBytePtr(oldpath))), uintptr(unsafe.Pointer(StringBytePtr(newpath))), 0)
<a id="L760"></a><span class="ln">   760</span>		if e1 != 0 {
<a id="L761"></a><span class="ln">   761</span>			err = e1
<a id="L762"></a><span class="ln">   762</span>		}
<a id="L763"></a><span class="ln">   763</span>		return
<a id="L764"></a><span class="ln">   764</span>	}
<a id="L765"></a><span class="ln">   765</span>	
<a id="L766"></a><span class="ln">   766</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L767"></a><span class="ln">   767</span>	
<a id="L768"></a><span class="ln">   768</span>	func Sync() {
<a id="L769"></a><span class="ln">   769</span>		Syscall(SYS_SYNC, 0, 0, 0)
<a id="L770"></a><span class="ln">   770</span>		return
<a id="L771"></a><span class="ln">   771</span>	}
<a id="L772"></a><span class="ln">   772</span>	
<a id="L773"></a><span class="ln">   773</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L774"></a><span class="ln">   774</span>	
<a id="L775"></a><span class="ln">   775</span>	func Sysinfo(info *Sysinfo_t) (err error) {
<a id="L776"></a><span class="ln">   776</span>		_, _, e1 := RawSyscall(SYS_SYSINFO, uintptr(unsafe.Pointer(info)), 0, 0)
<a id="L777"></a><span class="ln">   777</span>		if e1 != 0 {
<a id="L778"></a><span class="ln">   778</span>			err = e1
<a id="L779"></a><span class="ln">   779</span>		}
<a id="L780"></a><span class="ln">   780</span>		return
<a id="L781"></a><span class="ln">   781</span>	}
<a id="L782"></a><span class="ln">   782</span>	
<a id="L783"></a><span class="ln">   783</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L784"></a><span class="ln">   784</span>	
<a id="L785"></a><span class="ln">   785</span>	func Tee(rfd int, wfd int, len int, flags int) (n int64, err error) {
<a id="L786"></a><span class="ln">   786</span>		r0, _, e1 := Syscall6(SYS_TEE, uintptr(rfd), uintptr(wfd), uintptr(len), uintptr(flags), 0, 0)
<a id="L787"></a><span class="ln">   787</span>		n = int64(r0)
<a id="L788"></a><span class="ln">   788</span>		if e1 != 0 {
<a id="L789"></a><span class="ln">   789</span>			err = e1
<a id="L790"></a><span class="ln">   790</span>		}
<a id="L791"></a><span class="ln">   791</span>		return
<a id="L792"></a><span class="ln">   792</span>	}
<a id="L793"></a><span class="ln">   793</span>	
<a id="L794"></a><span class="ln">   794</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L795"></a><span class="ln">   795</span>	
<a id="L796"></a><span class="ln">   796</span>	func Tgkill(tgid int, tid int, sig Signal) (err error) {
<a id="L797"></a><span class="ln">   797</span>		_, _, e1 := RawSyscall(SYS_TGKILL, uintptr(tgid), uintptr(tid), uintptr(sig))
<a id="L798"></a><span class="ln">   798</span>		if e1 != 0 {
<a id="L799"></a><span class="ln">   799</span>			err = e1
<a id="L800"></a><span class="ln">   800</span>		}
<a id="L801"></a><span class="ln">   801</span>		return
<a id="L802"></a><span class="ln">   802</span>	}
<a id="L803"></a><span class="ln">   803</span>	
<a id="L804"></a><span class="ln">   804</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L805"></a><span class="ln">   805</span>	
<a id="L806"></a><span class="ln">   806</span>	func Times(tms *Tms) (ticks uintptr, err error) {
<a id="L807"></a><span class="ln">   807</span>		r0, _, e1 := RawSyscall(SYS_TIMES, uintptr(unsafe.Pointer(tms)), 0, 0)
<a id="L808"></a><span class="ln">   808</span>		ticks = uintptr(r0)
<a id="L809"></a><span class="ln">   809</span>		if e1 != 0 {
<a id="L810"></a><span class="ln">   810</span>			err = e1
<a id="L811"></a><span class="ln">   811</span>		}
<a id="L812"></a><span class="ln">   812</span>		return
<a id="L813"></a><span class="ln">   813</span>	}
<a id="L814"></a><span class="ln">   814</span>	
<a id="L815"></a><span class="ln">   815</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L816"></a><span class="ln">   816</span>	
<a id="L817"></a><span class="ln">   817</span>	func Umask(mask int) (oldmask int) {
<a id="L818"></a><span class="ln">   818</span>		r0, _, _ := RawSyscall(SYS_UMASK, uintptr(mask), 0, 0)
<a id="L819"></a><span class="ln">   819</span>		oldmask = int(r0)
<a id="L820"></a><span class="ln">   820</span>		return
<a id="L821"></a><span class="ln">   821</span>	}
<a id="L822"></a><span class="ln">   822</span>	
<a id="L823"></a><span class="ln">   823</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L824"></a><span class="ln">   824</span>	
<a id="L825"></a><span class="ln">   825</span>	func Uname(buf *Utsname) (err error) {
<a id="L826"></a><span class="ln">   826</span>		_, _, e1 := RawSyscall(SYS_UNAME, uintptr(unsafe.Pointer(buf)), 0, 0)
<a id="L827"></a><span class="ln">   827</span>		if e1 != 0 {
<a id="L828"></a><span class="ln">   828</span>			err = e1
<a id="L829"></a><span class="ln">   829</span>		}
<a id="L830"></a><span class="ln">   830</span>		return
<a id="L831"></a><span class="ln">   831</span>	}
<a id="L832"></a><span class="ln">   832</span>	
<a id="L833"></a><span class="ln">   833</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L834"></a><span class="ln">   834</span>	
<a id="L835"></a><span class="ln">   835</span>	func Unlink(path string) (err error) {
<a id="L836"></a><span class="ln">   836</span>		_, _, e1 := Syscall(SYS_UNLINK, uintptr(unsafe.Pointer(StringBytePtr(path))), 0, 0)
<a id="L837"></a><span class="ln">   837</span>		if e1 != 0 {
<a id="L838"></a><span class="ln">   838</span>			err = e1
<a id="L839"></a><span class="ln">   839</span>		}
<a id="L840"></a><span class="ln">   840</span>		return
<a id="L841"></a><span class="ln">   841</span>	}
<a id="L842"></a><span class="ln">   842</span>	
<a id="L843"></a><span class="ln">   843</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L844"></a><span class="ln">   844</span>	
<a id="L845"></a><span class="ln">   845</span>	func Unlinkat(dirfd int, path string) (err error) {
<a id="L846"></a><span class="ln">   846</span>		_, _, e1 := Syscall(SYS_UNLINKAT, uintptr(dirfd), uintptr(unsafe.Pointer(StringBytePtr(path))), 0)
<a id="L847"></a><span class="ln">   847</span>		if e1 != 0 {
<a id="L848"></a><span class="ln">   848</span>			err = e1
<a id="L849"></a><span class="ln">   849</span>		}
<a id="L850"></a><span class="ln">   850</span>		return
<a id="L851"></a><span class="ln">   851</span>	}
<a id="L852"></a><span class="ln">   852</span>	
<a id="L853"></a><span class="ln">   853</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L854"></a><span class="ln">   854</span>	
<a id="L855"></a><span class="ln">   855</span>	func Unmount(target string, flags int) (err error) {
<a id="L856"></a><span class="ln">   856</span>		_, _, e1 := Syscall(SYS_UMOUNT2, uintptr(unsafe.Pointer(StringBytePtr(target))), uintptr(flags), 0)
<a id="L857"></a><span class="ln">   857</span>		if e1 != 0 {
<a id="L858"></a><span class="ln">   858</span>			err = e1
<a id="L859"></a><span class="ln">   859</span>		}
<a id="L860"></a><span class="ln">   860</span>		return
<a id="L861"></a><span class="ln">   861</span>	}
<a id="L862"></a><span class="ln">   862</span>	
<a id="L863"></a><span class="ln">   863</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L864"></a><span class="ln">   864</span>	
<a id="L865"></a><span class="ln">   865</span>	func Unshare(flags int) (err error) {
<a id="L866"></a><span class="ln">   866</span>		_, _, e1 := Syscall(SYS_UNSHARE, uintptr(flags), 0, 0)
<a id="L867"></a><span class="ln">   867</span>		if e1 != 0 {
<a id="L868"></a><span class="ln">   868</span>			err = e1
<a id="L869"></a><span class="ln">   869</span>		}
<a id="L870"></a><span class="ln">   870</span>		return
<a id="L871"></a><span class="ln">   871</span>	}
<a id="L872"></a><span class="ln">   872</span>	
<a id="L873"></a><span class="ln">   873</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L874"></a><span class="ln">   874</span>	
<a id="L875"></a><span class="ln">   875</span>	func Ustat(dev int, ubuf *Ustat_t) (err error) {
<a id="L876"></a><span class="ln">   876</span>		_, _, e1 := Syscall(SYS_USTAT, uintptr(dev), uintptr(unsafe.Pointer(ubuf)), 0)
<a id="L877"></a><span class="ln">   877</span>		if e1 != 0 {
<a id="L878"></a><span class="ln">   878</span>			err = e1
<a id="L879"></a><span class="ln">   879</span>		}
<a id="L880"></a><span class="ln">   880</span>		return
<a id="L881"></a><span class="ln">   881</span>	}
<a id="L882"></a><span class="ln">   882</span>	
<a id="L883"></a><span class="ln">   883</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L884"></a><span class="ln">   884</span>	
<a id="L885"></a><span class="ln">   885</span>	func Utime(path string, buf *Utimbuf) (err error) {
<a id="L886"></a><span class="ln">   886</span>		_, _, e1 := Syscall(SYS_UTIME, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(unsafe.Pointer(buf)), 0)
<a id="L887"></a><span class="ln">   887</span>		if e1 != 0 {
<a id="L888"></a><span class="ln">   888</span>			err = e1
<a id="L889"></a><span class="ln">   889</span>		}
<a id="L890"></a><span class="ln">   890</span>		return
<a id="L891"></a><span class="ln">   891</span>	}
<a id="L892"></a><span class="ln">   892</span>	
<a id="L893"></a><span class="ln">   893</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L894"></a><span class="ln">   894</span>	
<a id="L895"></a><span class="ln">   895</span>	func Write(fd int, p []byte) (n int, err error) {
<a id="L896"></a><span class="ln">   896</span>		var _p0 unsafe.Pointer
<a id="L897"></a><span class="ln">   897</span>		if len(p) &gt; 0 {
<a id="L898"></a><span class="ln">   898</span>			_p0 = unsafe.Pointer(&amp;p[0])
<a id="L899"></a><span class="ln">   899</span>		} else {
<a id="L900"></a><span class="ln">   900</span>			_p0 = unsafe.Pointer(&amp;_zero)
<a id="L901"></a><span class="ln">   901</span>		}
<a id="L902"></a><span class="ln">   902</span>		r0, _, e1 := Syscall(SYS_WRITE, uintptr(fd), uintptr(_p0), uintptr(len(p)))
<a id="L903"></a><span class="ln">   903</span>		n = int(r0)
<a id="L904"></a><span class="ln">   904</span>		if e1 != 0 {
<a id="L905"></a><span class="ln">   905</span>			err = e1
<a id="L906"></a><span class="ln">   906</span>		}
<a id="L907"></a><span class="ln">   907</span>		return
<a id="L908"></a><span class="ln">   908</span>	}
<a id="L909"></a><span class="ln">   909</span>	
<a id="L910"></a><span class="ln">   910</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L911"></a><span class="ln">   911</span>	
<a id="L912"></a><span class="ln">   912</span>	func exitThread(code int) (err error) {
<a id="L913"></a><span class="ln">   913</span>		_, _, e1 := Syscall(SYS_EXIT, uintptr(code), 0, 0)
<a id="L914"></a><span class="ln">   914</span>		if e1 != 0 {
<a id="L915"></a><span class="ln">   915</span>			err = e1
<a id="L916"></a><span class="ln">   916</span>		}
<a id="L917"></a><span class="ln">   917</span>		return
<a id="L918"></a><span class="ln">   918</span>	}
<a id="L919"></a><span class="ln">   919</span>	
<a id="L920"></a><span class="ln">   920</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L921"></a><span class="ln">   921</span>	
<a id="L922"></a><span class="ln">   922</span>	func read(fd int, p *byte, np int) (n int, err error) {
<a id="L923"></a><span class="ln">   923</span>		r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(unsafe.Pointer(p)), uintptr(np))
<a id="L924"></a><span class="ln">   924</span>		n = int(r0)
<a id="L925"></a><span class="ln">   925</span>		if e1 != 0 {
<a id="L926"></a><span class="ln">   926</span>			err = e1
<a id="L927"></a><span class="ln">   927</span>		}
<a id="L928"></a><span class="ln">   928</span>		return
<a id="L929"></a><span class="ln">   929</span>	}
<a id="L930"></a><span class="ln">   930</span>	
<a id="L931"></a><span class="ln">   931</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L932"></a><span class="ln">   932</span>	
<a id="L933"></a><span class="ln">   933</span>	func write(fd int, p *byte, np int) (n int, err error) {
<a id="L934"></a><span class="ln">   934</span>		r0, _, e1 := Syscall(SYS_WRITE, uintptr(fd), uintptr(unsafe.Pointer(p)), uintptr(np))
<a id="L935"></a><span class="ln">   935</span>		n = int(r0)
<a id="L936"></a><span class="ln">   936</span>		if e1 != 0 {
<a id="L937"></a><span class="ln">   937</span>			err = e1
<a id="L938"></a><span class="ln">   938</span>		}
<a id="L939"></a><span class="ln">   939</span>		return
<a id="L940"></a><span class="ln">   940</span>	}
<a id="L941"></a><span class="ln">   941</span>	
<a id="L942"></a><span class="ln">   942</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L943"></a><span class="ln">   943</span>	
<a id="L944"></a><span class="ln">   944</span>	func munmap(addr uintptr, length uintptr) (err error) {
<a id="L945"></a><span class="ln">   945</span>		_, _, e1 := Syscall(SYS_MUNMAP, uintptr(addr), uintptr(length), 0)
<a id="L946"></a><span class="ln">   946</span>		if e1 != 0 {
<a id="L947"></a><span class="ln">   947</span>			err = e1
<a id="L948"></a><span class="ln">   948</span>		}
<a id="L949"></a><span class="ln">   949</span>		return
<a id="L950"></a><span class="ln">   950</span>	}
<a id="L951"></a><span class="ln">   951</span>	
<a id="L952"></a><span class="ln">   952</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L953"></a><span class="ln">   953</span>	
<a id="L954"></a><span class="ln">   954</span>	func Madvise(b []byte, advice int) (err error) {
<a id="L955"></a><span class="ln">   955</span>		var _p0 unsafe.Pointer
<a id="L956"></a><span class="ln">   956</span>		if len(b) &gt; 0 {
<a id="L957"></a><span class="ln">   957</span>			_p0 = unsafe.Pointer(&amp;b[0])
<a id="L958"></a><span class="ln">   958</span>		} else {
<a id="L959"></a><span class="ln">   959</span>			_p0 = unsafe.Pointer(&amp;_zero)
<a id="L960"></a><span class="ln">   960</span>		}
<a id="L961"></a><span class="ln">   961</span>		_, _, e1 := Syscall(SYS_MADVISE, uintptr(_p0), uintptr(len(b)), uintptr(advice))
<a id="L962"></a><span class="ln">   962</span>		if e1 != 0 {
<a id="L963"></a><span class="ln">   963</span>			err = e1
<a id="L964"></a><span class="ln">   964</span>		}
<a id="L965"></a><span class="ln">   965</span>		return
<a id="L966"></a><span class="ln">   966</span>	}
<a id="L967"></a><span class="ln">   967</span>	
<a id="L968"></a><span class="ln">   968</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L969"></a><span class="ln">   969</span>	
<a id="L970"></a><span class="ln">   970</span>	func Mprotect(b []byte, prot int) (err error) {
<a id="L971"></a><span class="ln">   971</span>		var _p0 unsafe.Pointer
<a id="L972"></a><span class="ln">   972</span>		if len(b) &gt; 0 {
<a id="L973"></a><span class="ln">   973</span>			_p0 = unsafe.Pointer(&amp;b[0])
<a id="L974"></a><span class="ln">   974</span>		} else {
<a id="L975"></a><span class="ln">   975</span>			_p0 = unsafe.Pointer(&amp;_zero)
<a id="L976"></a><span class="ln">   976</span>		}
<a id="L977"></a><span class="ln">   977</span>		_, _, e1 := Syscall(SYS_MPROTECT, uintptr(_p0), uintptr(len(b)), uintptr(prot))
<a id="L978"></a><span class="ln">   978</span>		if e1 != 0 {
<a id="L979"></a><span class="ln">   979</span>			err = e1
<a id="L980"></a><span class="ln">   980</span>		}
<a id="L981"></a><span class="ln">   981</span>		return
<a id="L982"></a><span class="ln">   982</span>	}
<a id="L983"></a><span class="ln">   983</span>	
<a id="L984"></a><span class="ln">   984</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L985"></a><span class="ln">   985</span>	
<a id="L986"></a><span class="ln">   986</span>	func Mlock(b []byte) (err error) {
<a id="L987"></a><span class="ln">   987</span>		var _p0 unsafe.Pointer
<a id="L988"></a><span class="ln">   988</span>		if len(b) &gt; 0 {
<a id="L989"></a><span class="ln">   989</span>			_p0 = unsafe.Pointer(&amp;b[0])
<a id="L990"></a><span class="ln">   990</span>		} else {
<a id="L991"></a><span class="ln">   991</span>			_p0 = unsafe.Pointer(&amp;_zero)
<a id="L992"></a><span class="ln">   992</span>		}
<a id="L993"></a><span class="ln">   993</span>		_, _, e1 := Syscall(SYS_MLOCK, uintptr(_p0), uintptr(len(b)), 0)
<a id="L994"></a><span class="ln">   994</span>		if e1 != 0 {
<a id="L995"></a><span class="ln">   995</span>			err = e1
<a id="L996"></a><span class="ln">   996</span>		}
<a id="L997"></a><span class="ln">   997</span>		return
<a id="L998"></a><span class="ln">   998</span>	}
<a id="L999"></a><span class="ln">   999</span>	
<a id="L1000"></a><span class="ln">  1000</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1001"></a><span class="ln">  1001</span>	
<a id="L1002"></a><span class="ln">  1002</span>	func Munlock(b []byte) (err error) {
<a id="L1003"></a><span class="ln">  1003</span>		var _p0 unsafe.Pointer
<a id="L1004"></a><span class="ln">  1004</span>		if len(b) &gt; 0 {
<a id="L1005"></a><span class="ln">  1005</span>			_p0 = unsafe.Pointer(&amp;b[0])
<a id="L1006"></a><span class="ln">  1006</span>		} else {
<a id="L1007"></a><span class="ln">  1007</span>			_p0 = unsafe.Pointer(&amp;_zero)
<a id="L1008"></a><span class="ln">  1008</span>		}
<a id="L1009"></a><span class="ln">  1009</span>		_, _, e1 := Syscall(SYS_MUNLOCK, uintptr(_p0), uintptr(len(b)), 0)
<a id="L1010"></a><span class="ln">  1010</span>		if e1 != 0 {
<a id="L1011"></a><span class="ln">  1011</span>			err = e1
<a id="L1012"></a><span class="ln">  1012</span>		}
<a id="L1013"></a><span class="ln">  1013</span>		return
<a id="L1014"></a><span class="ln">  1014</span>	}
<a id="L1015"></a><span class="ln">  1015</span>	
<a id="L1016"></a><span class="ln">  1016</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1017"></a><span class="ln">  1017</span>	
<a id="L1018"></a><span class="ln">  1018</span>	func Mlockall(flags int) (err error) {
<a id="L1019"></a><span class="ln">  1019</span>		_, _, e1 := Syscall(SYS_MLOCKALL, uintptr(flags), 0, 0)
<a id="L1020"></a><span class="ln">  1020</span>		if e1 != 0 {
<a id="L1021"></a><span class="ln">  1021</span>			err = e1
<a id="L1022"></a><span class="ln">  1022</span>		}
<a id="L1023"></a><span class="ln">  1023</span>		return
<a id="L1024"></a><span class="ln">  1024</span>	}
<a id="L1025"></a><span class="ln">  1025</span>	
<a id="L1026"></a><span class="ln">  1026</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1027"></a><span class="ln">  1027</span>	
<a id="L1028"></a><span class="ln">  1028</span>	func Munlockall() (err error) {
<a id="L1029"></a><span class="ln">  1029</span>		_, _, e1 := Syscall(SYS_MUNLOCKALL, 0, 0, 0)
<a id="L1030"></a><span class="ln">  1030</span>		if e1 != 0 {
<a id="L1031"></a><span class="ln">  1031</span>			err = e1
<a id="L1032"></a><span class="ln">  1032</span>		}
<a id="L1033"></a><span class="ln">  1033</span>		return
<a id="L1034"></a><span class="ln">  1034</span>	}
<a id="L1035"></a><span class="ln">  1035</span>	
<a id="L1036"></a><span class="ln">  1036</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1037"></a><span class="ln">  1037</span>	
<a id="L1038"></a><span class="ln">  1038</span>	func Chown(path string, uid int, gid int) (err error) {
<a id="L1039"></a><span class="ln">  1039</span>		_, _, e1 := Syscall(SYS_CHOWN, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(uid), uintptr(gid))
<a id="L1040"></a><span class="ln">  1040</span>		if e1 != 0 {
<a id="L1041"></a><span class="ln">  1041</span>			err = e1
<a id="L1042"></a><span class="ln">  1042</span>		}
<a id="L1043"></a><span class="ln">  1043</span>		return
<a id="L1044"></a><span class="ln">  1044</span>	}
<a id="L1045"></a><span class="ln">  1045</span>	
<a id="L1046"></a><span class="ln">  1046</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1047"></a><span class="ln">  1047</span>	
<a id="L1048"></a><span class="ln">  1048</span>	func Fchown(fd int, uid int, gid int) (err error) {
<a id="L1049"></a><span class="ln">  1049</span>		_, _, e1 := Syscall(SYS_FCHOWN, uintptr(fd), uintptr(uid), uintptr(gid))
<a id="L1050"></a><span class="ln">  1050</span>		if e1 != 0 {
<a id="L1051"></a><span class="ln">  1051</span>			err = e1
<a id="L1052"></a><span class="ln">  1052</span>		}
<a id="L1053"></a><span class="ln">  1053</span>		return
<a id="L1054"></a><span class="ln">  1054</span>	}
<a id="L1055"></a><span class="ln">  1055</span>	
<a id="L1056"></a><span class="ln">  1056</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1057"></a><span class="ln">  1057</span>	
<a id="L1058"></a><span class="ln">  1058</span>	func Fstat(fd int, stat *Stat_t) (err error) {
<a id="L1059"></a><span class="ln">  1059</span>		_, _, e1 := Syscall(SYS_FSTAT, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0)
<a id="L1060"></a><span class="ln">  1060</span>		if e1 != 0 {
<a id="L1061"></a><span class="ln">  1061</span>			err = e1
<a id="L1062"></a><span class="ln">  1062</span>		}
<a id="L1063"></a><span class="ln">  1063</span>		return
<a id="L1064"></a><span class="ln">  1064</span>	}
<a id="L1065"></a><span class="ln">  1065</span>	
<a id="L1066"></a><span class="ln">  1066</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1067"></a><span class="ln">  1067</span>	
<a id="L1068"></a><span class="ln">  1068</span>	func Fstatfs(fd int, buf *Statfs_t) (err error) {
<a id="L1069"></a><span class="ln">  1069</span>		_, _, e1 := Syscall(SYS_FSTATFS, uintptr(fd), uintptr(unsafe.Pointer(buf)), 0)
<a id="L1070"></a><span class="ln">  1070</span>		if e1 != 0 {
<a id="L1071"></a><span class="ln">  1071</span>			err = e1
<a id="L1072"></a><span class="ln">  1072</span>		}
<a id="L1073"></a><span class="ln">  1073</span>		return
<a id="L1074"></a><span class="ln">  1074</span>	}
<a id="L1075"></a><span class="ln">  1075</span>	
<a id="L1076"></a><span class="ln">  1076</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1077"></a><span class="ln">  1077</span>	
<a id="L1078"></a><span class="ln">  1078</span>	func Ftruncate(fd int, length int64) (err error) {
<a id="L1079"></a><span class="ln">  1079</span>		_, _, e1 := Syscall(SYS_FTRUNCATE, uintptr(fd), uintptr(length), 0)
<a id="L1080"></a><span class="ln">  1080</span>		if e1 != 0 {
<a id="L1081"></a><span class="ln">  1081</span>			err = e1
<a id="L1082"></a><span class="ln">  1082</span>		}
<a id="L1083"></a><span class="ln">  1083</span>		return
<a id="L1084"></a><span class="ln">  1084</span>	}
<a id="L1085"></a><span class="ln">  1085</span>	
<a id="L1086"></a><span class="ln">  1086</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1087"></a><span class="ln">  1087</span>	
<a id="L1088"></a><span class="ln">  1088</span>	func Getegid() (egid int) {
<a id="L1089"></a><span class="ln">  1089</span>		r0, _, _ := RawSyscall(SYS_GETEGID, 0, 0, 0)
<a id="L1090"></a><span class="ln">  1090</span>		egid = int(r0)
<a id="L1091"></a><span class="ln">  1091</span>		return
<a id="L1092"></a><span class="ln">  1092</span>	}
<a id="L1093"></a><span class="ln">  1093</span>	
<a id="L1094"></a><span class="ln">  1094</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1095"></a><span class="ln">  1095</span>	
<a id="L1096"></a><span class="ln">  1096</span>	func Geteuid() (euid int) {
<a id="L1097"></a><span class="ln">  1097</span>		r0, _, _ := RawSyscall(SYS_GETEUID, 0, 0, 0)
<a id="L1098"></a><span class="ln">  1098</span>		euid = int(r0)
<a id="L1099"></a><span class="ln">  1099</span>		return
<a id="L1100"></a><span class="ln">  1100</span>	}
<a id="L1101"></a><span class="ln">  1101</span>	
<a id="L1102"></a><span class="ln">  1102</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1103"></a><span class="ln">  1103</span>	
<a id="L1104"></a><span class="ln">  1104</span>	func Getgid() (gid int) {
<a id="L1105"></a><span class="ln">  1105</span>		r0, _, _ := RawSyscall(SYS_GETGID, 0, 0, 0)
<a id="L1106"></a><span class="ln">  1106</span>		gid = int(r0)
<a id="L1107"></a><span class="ln">  1107</span>		return
<a id="L1108"></a><span class="ln">  1108</span>	}
<a id="L1109"></a><span class="ln">  1109</span>	
<a id="L1110"></a><span class="ln">  1110</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1111"></a><span class="ln">  1111</span>	
<a id="L1112"></a><span class="ln">  1112</span>	func Getuid() (uid int) {
<a id="L1113"></a><span class="ln">  1113</span>		r0, _, _ := RawSyscall(SYS_GETUID, 0, 0, 0)
<a id="L1114"></a><span class="ln">  1114</span>		uid = int(r0)
<a id="L1115"></a><span class="ln">  1115</span>		return
<a id="L1116"></a><span class="ln">  1116</span>	}
<a id="L1117"></a><span class="ln">  1117</span>	
<a id="L1118"></a><span class="ln">  1118</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1119"></a><span class="ln">  1119</span>	
<a id="L1120"></a><span class="ln">  1120</span>	func Ioperm(from int, num int, on int) (err error) {
<a id="L1121"></a><span class="ln">  1121</span>		_, _, e1 := Syscall(SYS_IOPERM, uintptr(from), uintptr(num), uintptr(on))
<a id="L1122"></a><span class="ln">  1122</span>		if e1 != 0 {
<a id="L1123"></a><span class="ln">  1123</span>			err = e1
<a id="L1124"></a><span class="ln">  1124</span>		}
<a id="L1125"></a><span class="ln">  1125</span>		return
<a id="L1126"></a><span class="ln">  1126</span>	}
<a id="L1127"></a><span class="ln">  1127</span>	
<a id="L1128"></a><span class="ln">  1128</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1129"></a><span class="ln">  1129</span>	
<a id="L1130"></a><span class="ln">  1130</span>	func Iopl(level int) (err error) {
<a id="L1131"></a><span class="ln">  1131</span>		_, _, e1 := Syscall(SYS_IOPL, uintptr(level), 0, 0)
<a id="L1132"></a><span class="ln">  1132</span>		if e1 != 0 {
<a id="L1133"></a><span class="ln">  1133</span>			err = e1
<a id="L1134"></a><span class="ln">  1134</span>		}
<a id="L1135"></a><span class="ln">  1135</span>		return
<a id="L1136"></a><span class="ln">  1136</span>	}
<a id="L1137"></a><span class="ln">  1137</span>	
<a id="L1138"></a><span class="ln">  1138</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1139"></a><span class="ln">  1139</span>	
<a id="L1140"></a><span class="ln">  1140</span>	func Lchown(path string, uid int, gid int) (err error) {
<a id="L1141"></a><span class="ln">  1141</span>		_, _, e1 := Syscall(SYS_LCHOWN, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(uid), uintptr(gid))
<a id="L1142"></a><span class="ln">  1142</span>		if e1 != 0 {
<a id="L1143"></a><span class="ln">  1143</span>			err = e1
<a id="L1144"></a><span class="ln">  1144</span>		}
<a id="L1145"></a><span class="ln">  1145</span>		return
<a id="L1146"></a><span class="ln">  1146</span>	}
<a id="L1147"></a><span class="ln">  1147</span>	
<a id="L1148"></a><span class="ln">  1148</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1149"></a><span class="ln">  1149</span>	
<a id="L1150"></a><span class="ln">  1150</span>	func Listen(s int, n int) (err error) {
<a id="L1151"></a><span class="ln">  1151</span>		_, _, e1 := Syscall(SYS_LISTEN, uintptr(s), uintptr(n), 0)
<a id="L1152"></a><span class="ln">  1152</span>		if e1 != 0 {
<a id="L1153"></a><span class="ln">  1153</span>			err = e1
<a id="L1154"></a><span class="ln">  1154</span>		}
<a id="L1155"></a><span class="ln">  1155</span>		return
<a id="L1156"></a><span class="ln">  1156</span>	}
<a id="L1157"></a><span class="ln">  1157</span>	
<a id="L1158"></a><span class="ln">  1158</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1159"></a><span class="ln">  1159</span>	
<a id="L1160"></a><span class="ln">  1160</span>	func Lstat(path string, stat *Stat_t) (err error) {
<a id="L1161"></a><span class="ln">  1161</span>		_, _, e1 := Syscall(SYS_LSTAT, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(unsafe.Pointer(stat)), 0)
<a id="L1162"></a><span class="ln">  1162</span>		if e1 != 0 {
<a id="L1163"></a><span class="ln">  1163</span>			err = e1
<a id="L1164"></a><span class="ln">  1164</span>		}
<a id="L1165"></a><span class="ln">  1165</span>		return
<a id="L1166"></a><span class="ln">  1166</span>	}
<a id="L1167"></a><span class="ln">  1167</span>	
<a id="L1168"></a><span class="ln">  1168</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1169"></a><span class="ln">  1169</span>	
<a id="L1170"></a><span class="ln">  1170</span>	func Pread(fd int, p []byte, offset int64) (n int, err error) {
<a id="L1171"></a><span class="ln">  1171</span>		var _p0 unsafe.Pointer
<a id="L1172"></a><span class="ln">  1172</span>		if len(p) &gt; 0 {
<a id="L1173"></a><span class="ln">  1173</span>			_p0 = unsafe.Pointer(&amp;p[0])
<a id="L1174"></a><span class="ln">  1174</span>		} else {
<a id="L1175"></a><span class="ln">  1175</span>			_p0 = unsafe.Pointer(&amp;_zero)
<a id="L1176"></a><span class="ln">  1176</span>		}
<a id="L1177"></a><span class="ln">  1177</span>		r0, _, e1 := Syscall6(SYS_PREAD64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)
<a id="L1178"></a><span class="ln">  1178</span>		n = int(r0)
<a id="L1179"></a><span class="ln">  1179</span>		if e1 != 0 {
<a id="L1180"></a><span class="ln">  1180</span>			err = e1
<a id="L1181"></a><span class="ln">  1181</span>		}
<a id="L1182"></a><span class="ln">  1182</span>		return
<a id="L1183"></a><span class="ln">  1183</span>	}
<a id="L1184"></a><span class="ln">  1184</span>	
<a id="L1185"></a><span class="ln">  1185</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1186"></a><span class="ln">  1186</span>	
<a id="L1187"></a><span class="ln">  1187</span>	func Pwrite(fd int, p []byte, offset int64) (n int, err error) {
<a id="L1188"></a><span class="ln">  1188</span>		var _p0 unsafe.Pointer
<a id="L1189"></a><span class="ln">  1189</span>		if len(p) &gt; 0 {
<a id="L1190"></a><span class="ln">  1190</span>			_p0 = unsafe.Pointer(&amp;p[0])
<a id="L1191"></a><span class="ln">  1191</span>		} else {
<a id="L1192"></a><span class="ln">  1192</span>			_p0 = unsafe.Pointer(&amp;_zero)
<a id="L1193"></a><span class="ln">  1193</span>		}
<a id="L1194"></a><span class="ln">  1194</span>		r0, _, e1 := Syscall6(SYS_PWRITE64, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(offset), 0, 0)
<a id="L1195"></a><span class="ln">  1195</span>		n = int(r0)
<a id="L1196"></a><span class="ln">  1196</span>		if e1 != 0 {
<a id="L1197"></a><span class="ln">  1197</span>			err = e1
<a id="L1198"></a><span class="ln">  1198</span>		}
<a id="L1199"></a><span class="ln">  1199</span>		return
<a id="L1200"></a><span class="ln">  1200</span>	}
<a id="L1201"></a><span class="ln">  1201</span>	
<a id="L1202"></a><span class="ln">  1202</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1203"></a><span class="ln">  1203</span>	
<a id="L1204"></a><span class="ln">  1204</span>	func Seek(fd int, offset int64, whence int) (off int64, err error) {
<a id="L1205"></a><span class="ln">  1205</span>		r0, _, e1 := Syscall(SYS_LSEEK, uintptr(fd), uintptr(offset), uintptr(whence))
<a id="L1206"></a><span class="ln">  1206</span>		off = int64(r0)
<a id="L1207"></a><span class="ln">  1207</span>		if e1 != 0 {
<a id="L1208"></a><span class="ln">  1208</span>			err = e1
<a id="L1209"></a><span class="ln">  1209</span>		}
<a id="L1210"></a><span class="ln">  1210</span>		return
<a id="L1211"></a><span class="ln">  1211</span>	}
<a id="L1212"></a><span class="ln">  1212</span>	
<a id="L1213"></a><span class="ln">  1213</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1214"></a><span class="ln">  1214</span>	
<a id="L1215"></a><span class="ln">  1215</span>	func Select(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err error) {
<a id="L1216"></a><span class="ln">  1216</span>		r0, _, e1 := Syscall6(SYS_SELECT, uintptr(nfd), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)), 0)
<a id="L1217"></a><span class="ln">  1217</span>		n = int(r0)
<a id="L1218"></a><span class="ln">  1218</span>		if e1 != 0 {
<a id="L1219"></a><span class="ln">  1219</span>			err = e1
<a id="L1220"></a><span class="ln">  1220</span>		}
<a id="L1221"></a><span class="ln">  1221</span>		return
<a id="L1222"></a><span class="ln">  1222</span>	}
<a id="L1223"></a><span class="ln">  1223</span>	
<a id="L1224"></a><span class="ln">  1224</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1225"></a><span class="ln">  1225</span>	
<a id="L1226"></a><span class="ln">  1226</span>	func Sendfile(outfd int, infd int, offset *int64, count int) (written int, err error) {
<a id="L1227"></a><span class="ln">  1227</span>		r0, _, e1 := Syscall6(SYS_SENDFILE, uintptr(outfd), uintptr(infd), uintptr(unsafe.Pointer(offset)), uintptr(count), 0, 0)
<a id="L1228"></a><span class="ln">  1228</span>		written = int(r0)
<a id="L1229"></a><span class="ln">  1229</span>		if e1 != 0 {
<a id="L1230"></a><span class="ln">  1230</span>			err = e1
<a id="L1231"></a><span class="ln">  1231</span>		}
<a id="L1232"></a><span class="ln">  1232</span>		return
<a id="L1233"></a><span class="ln">  1233</span>	}
<a id="L1234"></a><span class="ln">  1234</span>	
<a id="L1235"></a><span class="ln">  1235</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1236"></a><span class="ln">  1236</span>	
<a id="L1237"></a><span class="ln">  1237</span>	func Setfsgid(gid int) (err error) {
<a id="L1238"></a><span class="ln">  1238</span>		_, _, e1 := Syscall(SYS_SETFSGID, uintptr(gid), 0, 0)
<a id="L1239"></a><span class="ln">  1239</span>		if e1 != 0 {
<a id="L1240"></a><span class="ln">  1240</span>			err = e1
<a id="L1241"></a><span class="ln">  1241</span>		}
<a id="L1242"></a><span class="ln">  1242</span>		return
<a id="L1243"></a><span class="ln">  1243</span>	}
<a id="L1244"></a><span class="ln">  1244</span>	
<a id="L1245"></a><span class="ln">  1245</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1246"></a><span class="ln">  1246</span>	
<a id="L1247"></a><span class="ln">  1247</span>	func Setfsuid(uid int) (err error) {
<a id="L1248"></a><span class="ln">  1248</span>		_, _, e1 := Syscall(SYS_SETFSUID, uintptr(uid), 0, 0)
<a id="L1249"></a><span class="ln">  1249</span>		if e1 != 0 {
<a id="L1250"></a><span class="ln">  1250</span>			err = e1
<a id="L1251"></a><span class="ln">  1251</span>		}
<a id="L1252"></a><span class="ln">  1252</span>		return
<a id="L1253"></a><span class="ln">  1253</span>	}
<a id="L1254"></a><span class="ln">  1254</span>	
<a id="L1255"></a><span class="ln">  1255</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1256"></a><span class="ln">  1256</span>	
<a id="L1257"></a><span class="ln">  1257</span>	func Setgid(gid int) (err error) {
<a id="L1258"></a><span class="ln">  1258</span>		_, _, e1 := RawSyscall(SYS_SETGID, uintptr(gid), 0, 0)
<a id="L1259"></a><span class="ln">  1259</span>		if e1 != 0 {
<a id="L1260"></a><span class="ln">  1260</span>			err = e1
<a id="L1261"></a><span class="ln">  1261</span>		}
<a id="L1262"></a><span class="ln">  1262</span>		return
<a id="L1263"></a><span class="ln">  1263</span>	}
<a id="L1264"></a><span class="ln">  1264</span>	
<a id="L1265"></a><span class="ln">  1265</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1266"></a><span class="ln">  1266</span>	
<a id="L1267"></a><span class="ln">  1267</span>	func Setregid(rgid int, egid int) (err error) {
<a id="L1268"></a><span class="ln">  1268</span>		_, _, e1 := RawSyscall(SYS_SETREGID, uintptr(rgid), uintptr(egid), 0)
<a id="L1269"></a><span class="ln">  1269</span>		if e1 != 0 {
<a id="L1270"></a><span class="ln">  1270</span>			err = e1
<a id="L1271"></a><span class="ln">  1271</span>		}
<a id="L1272"></a><span class="ln">  1272</span>		return
<a id="L1273"></a><span class="ln">  1273</span>	}
<a id="L1274"></a><span class="ln">  1274</span>	
<a id="L1275"></a><span class="ln">  1275</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1276"></a><span class="ln">  1276</span>	
<a id="L1277"></a><span class="ln">  1277</span>	func Setresgid(rgid int, egid int, sgid int) (err error) {
<a id="L1278"></a><span class="ln">  1278</span>		_, _, e1 := RawSyscall(SYS_SETRESGID, uintptr(rgid), uintptr(egid), uintptr(sgid))
<a id="L1279"></a><span class="ln">  1279</span>		if e1 != 0 {
<a id="L1280"></a><span class="ln">  1280</span>			err = e1
<a id="L1281"></a><span class="ln">  1281</span>		}
<a id="L1282"></a><span class="ln">  1282</span>		return
<a id="L1283"></a><span class="ln">  1283</span>	}
<a id="L1284"></a><span class="ln">  1284</span>	
<a id="L1285"></a><span class="ln">  1285</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1286"></a><span class="ln">  1286</span>	
<a id="L1287"></a><span class="ln">  1287</span>	func Setresuid(ruid int, euid int, suid int) (err error) {
<a id="L1288"></a><span class="ln">  1288</span>		_, _, e1 := RawSyscall(SYS_SETRESUID, uintptr(ruid), uintptr(euid), uintptr(suid))
<a id="L1289"></a><span class="ln">  1289</span>		if e1 != 0 {
<a id="L1290"></a><span class="ln">  1290</span>			err = e1
<a id="L1291"></a><span class="ln">  1291</span>		}
<a id="L1292"></a><span class="ln">  1292</span>		return
<a id="L1293"></a><span class="ln">  1293</span>	}
<a id="L1294"></a><span class="ln">  1294</span>	
<a id="L1295"></a><span class="ln">  1295</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1296"></a><span class="ln">  1296</span>	
<a id="L1297"></a><span class="ln">  1297</span>	func Setreuid(ruid int, euid int) (err error) {
<a id="L1298"></a><span class="ln">  1298</span>		_, _, e1 := RawSyscall(SYS_SETREUID, uintptr(ruid), uintptr(euid), 0)
<a id="L1299"></a><span class="ln">  1299</span>		if e1 != 0 {
<a id="L1300"></a><span class="ln">  1300</span>			err = e1
<a id="L1301"></a><span class="ln">  1301</span>		}
<a id="L1302"></a><span class="ln">  1302</span>		return
<a id="L1303"></a><span class="ln">  1303</span>	}
<a id="L1304"></a><span class="ln">  1304</span>	
<a id="L1305"></a><span class="ln">  1305</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1306"></a><span class="ln">  1306</span>	
<a id="L1307"></a><span class="ln">  1307</span>	func Shutdown(fd int, how int) (err error) {
<a id="L1308"></a><span class="ln">  1308</span>		_, _, e1 := Syscall(SYS_SHUTDOWN, uintptr(fd), uintptr(how), 0)
<a id="L1309"></a><span class="ln">  1309</span>		if e1 != 0 {
<a id="L1310"></a><span class="ln">  1310</span>			err = e1
<a id="L1311"></a><span class="ln">  1311</span>		}
<a id="L1312"></a><span class="ln">  1312</span>		return
<a id="L1313"></a><span class="ln">  1313</span>	}
<a id="L1314"></a><span class="ln">  1314</span>	
<a id="L1315"></a><span class="ln">  1315</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1316"></a><span class="ln">  1316</span>	
<a id="L1317"></a><span class="ln">  1317</span>	func Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int64, err error) {
<a id="L1318"></a><span class="ln">  1318</span>		r0, _, e1 := Syscall6(SYS_SPLICE, uintptr(rfd), uintptr(unsafe.Pointer(roff)), uintptr(wfd), uintptr(unsafe.Pointer(woff)), uintptr(len), uintptr(flags))
<a id="L1319"></a><span class="ln">  1319</span>		n = int64(r0)
<a id="L1320"></a><span class="ln">  1320</span>		if e1 != 0 {
<a id="L1321"></a><span class="ln">  1321</span>			err = e1
<a id="L1322"></a><span class="ln">  1322</span>		}
<a id="L1323"></a><span class="ln">  1323</span>		return
<a id="L1324"></a><span class="ln">  1324</span>	}
<a id="L1325"></a><span class="ln">  1325</span>	
<a id="L1326"></a><span class="ln">  1326</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1327"></a><span class="ln">  1327</span>	
<a id="L1328"></a><span class="ln">  1328</span>	func Stat(path string, stat *Stat_t) (err error) {
<a id="L1329"></a><span class="ln">  1329</span>		_, _, e1 := Syscall(SYS_STAT, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(unsafe.Pointer(stat)), 0)
<a id="L1330"></a><span class="ln">  1330</span>		if e1 != 0 {
<a id="L1331"></a><span class="ln">  1331</span>			err = e1
<a id="L1332"></a><span class="ln">  1332</span>		}
<a id="L1333"></a><span class="ln">  1333</span>		return
<a id="L1334"></a><span class="ln">  1334</span>	}
<a id="L1335"></a><span class="ln">  1335</span>	
<a id="L1336"></a><span class="ln">  1336</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1337"></a><span class="ln">  1337</span>	
<a id="L1338"></a><span class="ln">  1338</span>	func Statfs(path string, buf *Statfs_t) (err error) {
<a id="L1339"></a><span class="ln">  1339</span>		_, _, e1 := Syscall(SYS_STATFS, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(unsafe.Pointer(buf)), 0)
<a id="L1340"></a><span class="ln">  1340</span>		if e1 != 0 {
<a id="L1341"></a><span class="ln">  1341</span>			err = e1
<a id="L1342"></a><span class="ln">  1342</span>		}
<a id="L1343"></a><span class="ln">  1343</span>		return
<a id="L1344"></a><span class="ln">  1344</span>	}
<a id="L1345"></a><span class="ln">  1345</span>	
<a id="L1346"></a><span class="ln">  1346</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1347"></a><span class="ln">  1347</span>	
<a id="L1348"></a><span class="ln">  1348</span>	func SyncFileRange(fd int, off int64, n int64, flags int) (err error) {
<a id="L1349"></a><span class="ln">  1349</span>		_, _, e1 := Syscall6(SYS_SYNC_FILE_RANGE, uintptr(fd), uintptr(off), uintptr(n), uintptr(flags), 0, 0)
<a id="L1350"></a><span class="ln">  1350</span>		if e1 != 0 {
<a id="L1351"></a><span class="ln">  1351</span>			err = e1
<a id="L1352"></a><span class="ln">  1352</span>		}
<a id="L1353"></a><span class="ln">  1353</span>		return
<a id="L1354"></a><span class="ln">  1354</span>	}
<a id="L1355"></a><span class="ln">  1355</span>	
<a id="L1356"></a><span class="ln">  1356</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1357"></a><span class="ln">  1357</span>	
<a id="L1358"></a><span class="ln">  1358</span>	func Truncate(path string, length int64) (err error) {
<a id="L1359"></a><span class="ln">  1359</span>		_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(length), 0)
<a id="L1360"></a><span class="ln">  1360</span>		if e1 != 0 {
<a id="L1361"></a><span class="ln">  1361</span>			err = e1
<a id="L1362"></a><span class="ln">  1362</span>		}
<a id="L1363"></a><span class="ln">  1363</span>		return
<a id="L1364"></a><span class="ln">  1364</span>	}
<a id="L1365"></a><span class="ln">  1365</span>	
<a id="L1366"></a><span class="ln">  1366</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1367"></a><span class="ln">  1367</span>	
<a id="L1368"></a><span class="ln">  1368</span>	func accept(s int, rsa *RawSockaddrAny, addrlen *_Socklen) (fd int, err error) {
<a id="L1369"></a><span class="ln">  1369</span>		r0, _, e1 := Syscall(SYS_ACCEPT, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))
<a id="L1370"></a><span class="ln">  1370</span>		fd = int(r0)
<a id="L1371"></a><span class="ln">  1371</span>		if e1 != 0 {
<a id="L1372"></a><span class="ln">  1372</span>			err = e1
<a id="L1373"></a><span class="ln">  1373</span>		}
<a id="L1374"></a><span class="ln">  1374</span>		return
<a id="L1375"></a><span class="ln">  1375</span>	}
<a id="L1376"></a><span class="ln">  1376</span>	
<a id="L1377"></a><span class="ln">  1377</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1378"></a><span class="ln">  1378</span>	
<a id="L1379"></a><span class="ln">  1379</span>	func bind(s int, addr uintptr, addrlen _Socklen) (err error) {
<a id="L1380"></a><span class="ln">  1380</span>		_, _, e1 := Syscall(SYS_BIND, uintptr(s), uintptr(addr), uintptr(addrlen))
<a id="L1381"></a><span class="ln">  1381</span>		if e1 != 0 {
<a id="L1382"></a><span class="ln">  1382</span>			err = e1
<a id="L1383"></a><span class="ln">  1383</span>		}
<a id="L1384"></a><span class="ln">  1384</span>		return
<a id="L1385"></a><span class="ln">  1385</span>	}
<a id="L1386"></a><span class="ln">  1386</span>	
<a id="L1387"></a><span class="ln">  1387</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1388"></a><span class="ln">  1388</span>	
<a id="L1389"></a><span class="ln">  1389</span>	func connect(s int, addr uintptr, addrlen _Socklen) (err error) {
<a id="L1390"></a><span class="ln">  1390</span>		_, _, e1 := Syscall(SYS_CONNECT, uintptr(s), uintptr(addr), uintptr(addrlen))
<a id="L1391"></a><span class="ln">  1391</span>		if e1 != 0 {
<a id="L1392"></a><span class="ln">  1392</span>			err = e1
<a id="L1393"></a><span class="ln">  1393</span>		}
<a id="L1394"></a><span class="ln">  1394</span>		return
<a id="L1395"></a><span class="ln">  1395</span>	}
<a id="L1396"></a><span class="ln">  1396</span>	
<a id="L1397"></a><span class="ln">  1397</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1398"></a><span class="ln">  1398</span>	
<a id="L1399"></a><span class="ln">  1399</span>	func getgroups(n int, list *_Gid_t) (nn int, err error) {
<a id="L1400"></a><span class="ln">  1400</span>		r0, _, e1 := RawSyscall(SYS_GETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)
<a id="L1401"></a><span class="ln">  1401</span>		nn = int(r0)
<a id="L1402"></a><span class="ln">  1402</span>		if e1 != 0 {
<a id="L1403"></a><span class="ln">  1403</span>			err = e1
<a id="L1404"></a><span class="ln">  1404</span>		}
<a id="L1405"></a><span class="ln">  1405</span>		return
<a id="L1406"></a><span class="ln">  1406</span>	}
<a id="L1407"></a><span class="ln">  1407</span>	
<a id="L1408"></a><span class="ln">  1408</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1409"></a><span class="ln">  1409</span>	
<a id="L1410"></a><span class="ln">  1410</span>	func setgroups(n int, list *_Gid_t) (err error) {
<a id="L1411"></a><span class="ln">  1411</span>		_, _, e1 := RawSyscall(SYS_SETGROUPS, uintptr(n), uintptr(unsafe.Pointer(list)), 0)
<a id="L1412"></a><span class="ln">  1412</span>		if e1 != 0 {
<a id="L1413"></a><span class="ln">  1413</span>			err = e1
<a id="L1414"></a><span class="ln">  1414</span>		}
<a id="L1415"></a><span class="ln">  1415</span>		return
<a id="L1416"></a><span class="ln">  1416</span>	}
<a id="L1417"></a><span class="ln">  1417</span>	
<a id="L1418"></a><span class="ln">  1418</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1419"></a><span class="ln">  1419</span>	
<a id="L1420"></a><span class="ln">  1420</span>	func getsockopt(s int, level int, name int, val uintptr, vallen *_Socklen) (err error) {
<a id="L1421"></a><span class="ln">  1421</span>		_, _, e1 := Syscall6(SYS_GETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen)), 0)
<a id="L1422"></a><span class="ln">  1422</span>		if e1 != 0 {
<a id="L1423"></a><span class="ln">  1423</span>			err = e1
<a id="L1424"></a><span class="ln">  1424</span>		}
<a id="L1425"></a><span class="ln">  1425</span>		return
<a id="L1426"></a><span class="ln">  1426</span>	}
<a id="L1427"></a><span class="ln">  1427</span>	
<a id="L1428"></a><span class="ln">  1428</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1429"></a><span class="ln">  1429</span>	
<a id="L1430"></a><span class="ln">  1430</span>	func setsockopt(s int, level int, name int, val uintptr, vallen uintptr) (err error) {
<a id="L1431"></a><span class="ln">  1431</span>		_, _, e1 := Syscall6(SYS_SETSOCKOPT, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(vallen), 0)
<a id="L1432"></a><span class="ln">  1432</span>		if e1 != 0 {
<a id="L1433"></a><span class="ln">  1433</span>			err = e1
<a id="L1434"></a><span class="ln">  1434</span>		}
<a id="L1435"></a><span class="ln">  1435</span>		return
<a id="L1436"></a><span class="ln">  1436</span>	}
<a id="L1437"></a><span class="ln">  1437</span>	
<a id="L1438"></a><span class="ln">  1438</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1439"></a><span class="ln">  1439</span>	
<a id="L1440"></a><span class="ln">  1440</span>	func socket(domain int, typ int, proto int) (fd int, err error) {
<a id="L1441"></a><span class="ln">  1441</span>		r0, _, e1 := RawSyscall(SYS_SOCKET, uintptr(domain), uintptr(typ), uintptr(proto))
<a id="L1442"></a><span class="ln">  1442</span>		fd = int(r0)
<a id="L1443"></a><span class="ln">  1443</span>		if e1 != 0 {
<a id="L1444"></a><span class="ln">  1444</span>			err = e1
<a id="L1445"></a><span class="ln">  1445</span>		}
<a id="L1446"></a><span class="ln">  1446</span>		return
<a id="L1447"></a><span class="ln">  1447</span>	}
<a id="L1448"></a><span class="ln">  1448</span>	
<a id="L1449"></a><span class="ln">  1449</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1450"></a><span class="ln">  1450</span>	
<a id="L1451"></a><span class="ln">  1451</span>	func socketpair(domain int, typ int, proto int, fd *[2]int) (err error) {
<a id="L1452"></a><span class="ln">  1452</span>		_, _, e1 := RawSyscall6(SYS_SOCKETPAIR, uintptr(domain), uintptr(typ), uintptr(proto), uintptr(unsafe.Pointer(fd)), 0, 0)
<a id="L1453"></a><span class="ln">  1453</span>		if e1 != 0 {
<a id="L1454"></a><span class="ln">  1454</span>			err = e1
<a id="L1455"></a><span class="ln">  1455</span>		}
<a id="L1456"></a><span class="ln">  1456</span>		return
<a id="L1457"></a><span class="ln">  1457</span>	}
<a id="L1458"></a><span class="ln">  1458</span>	
<a id="L1459"></a><span class="ln">  1459</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1460"></a><span class="ln">  1460</span>	
<a id="L1461"></a><span class="ln">  1461</span>	func getpeername(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error) {
<a id="L1462"></a><span class="ln">  1462</span>		_, _, e1 := RawSyscall(SYS_GETPEERNAME, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))
<a id="L1463"></a><span class="ln">  1463</span>		if e1 != 0 {
<a id="L1464"></a><span class="ln">  1464</span>			err = e1
<a id="L1465"></a><span class="ln">  1465</span>		}
<a id="L1466"></a><span class="ln">  1466</span>		return
<a id="L1467"></a><span class="ln">  1467</span>	}
<a id="L1468"></a><span class="ln">  1468</span>	
<a id="L1469"></a><span class="ln">  1469</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1470"></a><span class="ln">  1470</span>	
<a id="L1471"></a><span class="ln">  1471</span>	func getsockname(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error) {
<a id="L1472"></a><span class="ln">  1472</span>		_, _, e1 := RawSyscall(SYS_GETSOCKNAME, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))
<a id="L1473"></a><span class="ln">  1473</span>		if e1 != 0 {
<a id="L1474"></a><span class="ln">  1474</span>			err = e1
<a id="L1475"></a><span class="ln">  1475</span>		}
<a id="L1476"></a><span class="ln">  1476</span>		return
<a id="L1477"></a><span class="ln">  1477</span>	}
<a id="L1478"></a><span class="ln">  1478</span>	
<a id="L1479"></a><span class="ln">  1479</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1480"></a><span class="ln">  1480</span>	
<a id="L1481"></a><span class="ln">  1481</span>	func recvfrom(fd int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen) (n int, err error) {
<a id="L1482"></a><span class="ln">  1482</span>		var _p0 unsafe.Pointer
<a id="L1483"></a><span class="ln">  1483</span>		if len(p) &gt; 0 {
<a id="L1484"></a><span class="ln">  1484</span>			_p0 = unsafe.Pointer(&amp;p[0])
<a id="L1485"></a><span class="ln">  1485</span>		} else {
<a id="L1486"></a><span class="ln">  1486</span>			_p0 = unsafe.Pointer(&amp;_zero)
<a id="L1487"></a><span class="ln">  1487</span>		}
<a id="L1488"></a><span class="ln">  1488</span>		r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
<a id="L1489"></a><span class="ln">  1489</span>		n = int(r0)
<a id="L1490"></a><span class="ln">  1490</span>		if e1 != 0 {
<a id="L1491"></a><span class="ln">  1491</span>			err = e1
<a id="L1492"></a><span class="ln">  1492</span>		}
<a id="L1493"></a><span class="ln">  1493</span>		return
<a id="L1494"></a><span class="ln">  1494</span>	}
<a id="L1495"></a><span class="ln">  1495</span>	
<a id="L1496"></a><span class="ln">  1496</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1497"></a><span class="ln">  1497</span>	
<a id="L1498"></a><span class="ln">  1498</span>	func sendto(s int, buf []byte, flags int, to uintptr, addrlen _Socklen) (err error) {
<a id="L1499"></a><span class="ln">  1499</span>		var _p0 unsafe.Pointer
<a id="L1500"></a><span class="ln">  1500</span>		if len(buf) &gt; 0 {
<a id="L1501"></a><span class="ln">  1501</span>			_p0 = unsafe.Pointer(&amp;buf[0])
<a id="L1502"></a><span class="ln">  1502</span>		} else {
<a id="L1503"></a><span class="ln">  1503</span>			_p0 = unsafe.Pointer(&amp;_zero)
<a id="L1504"></a><span class="ln">  1504</span>		}
<a id="L1505"></a><span class="ln">  1505</span>		_, _, e1 := Syscall6(SYS_SENDTO, uintptr(s), uintptr(_p0), uintptr(len(buf)), uintptr(flags), uintptr(to), uintptr(addrlen))
<a id="L1506"></a><span class="ln">  1506</span>		if e1 != 0 {
<a id="L1507"></a><span class="ln">  1507</span>			err = e1
<a id="L1508"></a><span class="ln">  1508</span>		}
<a id="L1509"></a><span class="ln">  1509</span>		return
<a id="L1510"></a><span class="ln">  1510</span>	}
<a id="L1511"></a><span class="ln">  1511</span>	
<a id="L1512"></a><span class="ln">  1512</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1513"></a><span class="ln">  1513</span>	
<a id="L1514"></a><span class="ln">  1514</span>	func recvmsg(s int, msg *Msghdr, flags int) (n int, err error) {
<a id="L1515"></a><span class="ln">  1515</span>		r0, _, e1 := Syscall(SYS_RECVMSG, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags))
<a id="L1516"></a><span class="ln">  1516</span>		n = int(r0)
<a id="L1517"></a><span class="ln">  1517</span>		if e1 != 0 {
<a id="L1518"></a><span class="ln">  1518</span>			err = e1
<a id="L1519"></a><span class="ln">  1519</span>		}
<a id="L1520"></a><span class="ln">  1520</span>		return
<a id="L1521"></a><span class="ln">  1521</span>	}
<a id="L1522"></a><span class="ln">  1522</span>	
<a id="L1523"></a><span class="ln">  1523</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1524"></a><span class="ln">  1524</span>	
<a id="L1525"></a><span class="ln">  1525</span>	func sendmsg(s int, msg *Msghdr, flags int) (err error) {
<a id="L1526"></a><span class="ln">  1526</span>		_, _, e1 := Syscall(SYS_SENDMSG, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags))
<a id="L1527"></a><span class="ln">  1527</span>		if e1 != 0 {
<a id="L1528"></a><span class="ln">  1528</span>			err = e1
<a id="L1529"></a><span class="ln">  1529</span>		}
<a id="L1530"></a><span class="ln">  1530</span>		return
<a id="L1531"></a><span class="ln">  1531</span>	}
<a id="L1532"></a><span class="ln">  1532</span>	
<a id="L1533"></a><span class="ln">  1533</span>	<span class="comment">// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span>
<a id="L1534"></a><span class="ln">  1534</span>	
<a id="L1535"></a><span class="ln">  1535</span>	func mmap(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64) (xaddr uintptr, err error) {
<a id="L1536"></a><span class="ln">  1536</span>		r0, _, e1 := Syscall6(SYS_MMAP, uintptr(addr), uintptr(length), uintptr(prot), uintptr(flags), uintptr(fd), uintptr(offset))
<a id="L1537"></a><span class="ln">  1537</span>		xaddr = uintptr(r0)
<a id="L1538"></a><span class="ln">  1538</span>		if e1 != 0 {
<a id="L1539"></a><span class="ln">  1539</span>			err = e1
<a id="L1540"></a><span class="ln">  1540</span>		}
<a id="L1541"></a><span class="ln">  1541</span>		return
<a id="L1542"></a><span class="ln">  1542</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

