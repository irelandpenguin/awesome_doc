<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/syscall/exec_unix.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/syscall/exec_unix.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// +build darwin freebsd linux netbsd openbsd</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// Fork, exec, wait, etc.</span>
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	package syscall
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	import (
<a id="L12"></a><span class="ln">    12</span>		&#34;runtime&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;sync&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;unsafe&#34;
<a id="L15"></a><span class="ln">    15</span>	)
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// Lock synchronizing creation of new file descriptors with fork.</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">//</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// We want the child in a fork/exec sequence to inherit only the</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// file descriptors we intend.  To do that, we mark all file</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// descriptors close-on-exec and then, in the child, explicitly</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// unmark the ones we want the exec&#39;ed program to keep.</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// Unix doesn&#39;t make this easy: there is, in general, no way to</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// allocate a new file descriptor close-on-exec.  Instead you</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// have to allocate the descriptor and then mark it close-on-exec.</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// If a fork happens between those two events, the child&#39;s exec</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// will inherit an unwanted file descriptor.</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">//</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// This lock solves that race: the create new fd/mark close-on-exec</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// operation is done holding ForkLock for reading, and the fork itself</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// is done holding ForkLock for writing.  At least, that&#39;s the idea.</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// There are some complications.</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">//</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// Some system calls that create new file descriptors can block</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// for arbitrarily long times: open on a hung NFS server or named</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// pipe, accept on a socket, and so on.  We can&#39;t reasonably grab</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// the lock across those operations.</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// It is worse to inherit some file descriptors than others.</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// If a non-malicious child accidentally inherits an open ordinary file,</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// that&#39;s not a big deal.  On the other hand, if a long-lived child</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">// accidentally inherits the write end of a pipe, then the reader</span>
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">// of that pipe will not see EOF until that child exits, potentially</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">// causing the parent program to hang.  This is a common problem</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">// in threaded C programs that use popen.</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">//</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">// Luckily, the file descriptors that are most important not to</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">// inherit are not the ones that can take an arbitrarily long time</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">// to create: pipe returns instantly, and the net package uses</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// non-blocking I/O to accept on a listening socket.</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// The rules for which file descriptor-creating operations use the</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// ForkLock are as follows:</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">//</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">// 1) Pipe.    Does not block.  Use the ForkLock.</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// 2) Socket.  Does not block.  Use the ForkLock.</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// 3) Accept.  If using non-blocking mode, use the ForkLock.</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">//             Otherwise, live with the race.</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// 4) Open.    Can block.  Use O_CLOEXEC if available (Linux).</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">//             Otherwise, live with the race.</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// 5) Dup.     Does not block.  Use the ForkLock.</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">//             On Linux, could use fcntl F_DUPFD_CLOEXEC</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">//             instead of the ForkLock, but only for dup(fd, -1).</span>
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>	var ForkLock sync.RWMutex
<a id="L65"></a><span class="ln">    65</span>	
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">// Convert array of string to array</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// of NUL-terminated byte pointer.</span>
<a id="L68"></a><span class="ln">    68</span>	func StringSlicePtr(ss []string) []*byte {
<a id="L69"></a><span class="ln">    69</span>		bb := make([]*byte, len(ss)+1)
<a id="L70"></a><span class="ln">    70</span>		for i := 0; i &lt; len(ss); i++ {
<a id="L71"></a><span class="ln">    71</span>			bb[i] = StringBytePtr(ss[i])
<a id="L72"></a><span class="ln">    72</span>		}
<a id="L73"></a><span class="ln">    73</span>		bb[len(ss)] = nil
<a id="L74"></a><span class="ln">    74</span>		return bb
<a id="L75"></a><span class="ln">    75</span>	}
<a id="L76"></a><span class="ln">    76</span>	
<a id="L77"></a><span class="ln">    77</span>	func CloseOnExec(fd int) { fcntl(fd, F_SETFD, FD_CLOEXEC) }
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>	func SetNonblock(fd int, nonblocking bool) (err error) {
<a id="L80"></a><span class="ln">    80</span>		flag, err := fcntl(fd, F_GETFL, 0)
<a id="L81"></a><span class="ln">    81</span>		if err != nil {
<a id="L82"></a><span class="ln">    82</span>			return err
<a id="L83"></a><span class="ln">    83</span>		}
<a id="L84"></a><span class="ln">    84</span>		if nonblocking {
<a id="L85"></a><span class="ln">    85</span>			flag |= O_NONBLOCK
<a id="L86"></a><span class="ln">    86</span>		} else {
<a id="L87"></a><span class="ln">    87</span>			flag &amp;= ^O_NONBLOCK
<a id="L88"></a><span class="ln">    88</span>		}
<a id="L89"></a><span class="ln">    89</span>		_, err = fcntl(fd, F_SETFL, flag)
<a id="L90"></a><span class="ln">    90</span>		return err
<a id="L91"></a><span class="ln">    91</span>	}
<a id="L92"></a><span class="ln">    92</span>	
<a id="L93"></a><span class="ln">    93</span>	<span class="comment">// Credential holds user and group identities to be assumed</span>
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// by a child process started by StartProcess.</span>
<a id="L95"></a><span class="ln">    95</span>	type Credential struct {
<a id="L96"></a><span class="ln">    96</span>		Uid    uint32   <span class="comment">// User ID.</span>
<a id="L97"></a><span class="ln">    97</span>		Gid    uint32   <span class="comment">// Group ID.</span>
<a id="L98"></a><span class="ln">    98</span>		Groups []uint32 <span class="comment">// Supplementary group IDs.</span>
<a id="L99"></a><span class="ln">    99</span>	}
<a id="L100"></a><span class="ln">   100</span>	
<a id="L101"></a><span class="ln">   101</span>	<span class="comment">// ProcAttr holds attributes that will be applied to a new process started</span>
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">// by StartProcess.</span>
<a id="L103"></a><span class="ln">   103</span>	type ProcAttr struct {
<a id="L104"></a><span class="ln">   104</span>		Dir   string    <span class="comment">// Current working directory.</span>
<a id="L105"></a><span class="ln">   105</span>		Env   []string  <span class="comment">// Environment.</span>
<a id="L106"></a><span class="ln">   106</span>		Files []uintptr <span class="comment">// File descriptors.</span>
<a id="L107"></a><span class="ln">   107</span>		Sys   *SysProcAttr
<a id="L108"></a><span class="ln">   108</span>	}
<a id="L109"></a><span class="ln">   109</span>	
<a id="L110"></a><span class="ln">   110</span>	var zeroProcAttr ProcAttr
<a id="L111"></a><span class="ln">   111</span>	var zeroSysProcAttr SysProcAttr
<a id="L112"></a><span class="ln">   112</span>	
<a id="L113"></a><span class="ln">   113</span>	func forkExec(argv0 string, argv []string, attr *ProcAttr) (pid int, err error) {
<a id="L114"></a><span class="ln">   114</span>		var p [2]int
<a id="L115"></a><span class="ln">   115</span>		var n int
<a id="L116"></a><span class="ln">   116</span>		var err1 Errno
<a id="L117"></a><span class="ln">   117</span>		var wstatus WaitStatus
<a id="L118"></a><span class="ln">   118</span>	
<a id="L119"></a><span class="ln">   119</span>		if attr == nil {
<a id="L120"></a><span class="ln">   120</span>			attr = &amp;zeroProcAttr
<a id="L121"></a><span class="ln">   121</span>		}
<a id="L122"></a><span class="ln">   122</span>		sys := attr.Sys
<a id="L123"></a><span class="ln">   123</span>		if sys == nil {
<a id="L124"></a><span class="ln">   124</span>			sys = &amp;zeroSysProcAttr
<a id="L125"></a><span class="ln">   125</span>		}
<a id="L126"></a><span class="ln">   126</span>	
<a id="L127"></a><span class="ln">   127</span>		p[0] = -1
<a id="L128"></a><span class="ln">   128</span>		p[1] = -1
<a id="L129"></a><span class="ln">   129</span>	
<a id="L130"></a><span class="ln">   130</span>		<span class="comment">// Convert args to C form.</span>
<a id="L131"></a><span class="ln">   131</span>		argv0p := StringBytePtr(argv0)
<a id="L132"></a><span class="ln">   132</span>		argvp := StringSlicePtr(argv)
<a id="L133"></a><span class="ln">   133</span>		envvp := StringSlicePtr(attr.Env)
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>		if runtime.GOOS == &#34;freebsd&#34; &amp;&amp; len(argv[0]) &gt; len(argv0) {
<a id="L136"></a><span class="ln">   136</span>			argvp[0] = argv0p
<a id="L137"></a><span class="ln">   137</span>		}
<a id="L138"></a><span class="ln">   138</span>	
<a id="L139"></a><span class="ln">   139</span>		var chroot *byte
<a id="L140"></a><span class="ln">   140</span>		if sys.Chroot != &#34;&#34; {
<a id="L141"></a><span class="ln">   141</span>			chroot = StringBytePtr(sys.Chroot)
<a id="L142"></a><span class="ln">   142</span>		}
<a id="L143"></a><span class="ln">   143</span>		var dir *byte
<a id="L144"></a><span class="ln">   144</span>		if attr.Dir != &#34;&#34; {
<a id="L145"></a><span class="ln">   145</span>			dir = StringBytePtr(attr.Dir)
<a id="L146"></a><span class="ln">   146</span>		}
<a id="L147"></a><span class="ln">   147</span>	
<a id="L148"></a><span class="ln">   148</span>		<span class="comment">// Acquire the fork lock so that no other threads</span>
<a id="L149"></a><span class="ln">   149</span>		<span class="comment">// create new fds that are not yet close-on-exec</span>
<a id="L150"></a><span class="ln">   150</span>		<span class="comment">// before we fork.</span>
<a id="L151"></a><span class="ln">   151</span>		ForkLock.Lock()
<a id="L152"></a><span class="ln">   152</span>	
<a id="L153"></a><span class="ln">   153</span>		<span class="comment">// Allocate child status pipe close on exec.</span>
<a id="L154"></a><span class="ln">   154</span>		if err = Pipe(p[0:]); err != nil {
<a id="L155"></a><span class="ln">   155</span>			goto error
<a id="L156"></a><span class="ln">   156</span>		}
<a id="L157"></a><span class="ln">   157</span>		if _, err = fcntl(p[0], F_SETFD, FD_CLOEXEC); err != nil {
<a id="L158"></a><span class="ln">   158</span>			goto error
<a id="L159"></a><span class="ln">   159</span>		}
<a id="L160"></a><span class="ln">   160</span>		if _, err = fcntl(p[1], F_SETFD, FD_CLOEXEC); err != nil {
<a id="L161"></a><span class="ln">   161</span>			goto error
<a id="L162"></a><span class="ln">   162</span>		}
<a id="L163"></a><span class="ln">   163</span>	
<a id="L164"></a><span class="ln">   164</span>		<span class="comment">// Kick off child.</span>
<a id="L165"></a><span class="ln">   165</span>		pid, err1 = forkAndExecInChild(argv0p, argvp, envvp, chroot, dir, attr, sys, p[1])
<a id="L166"></a><span class="ln">   166</span>		if err1 != 0 {
<a id="L167"></a><span class="ln">   167</span>			err = Errno(err1)
<a id="L168"></a><span class="ln">   168</span>			goto error
<a id="L169"></a><span class="ln">   169</span>		}
<a id="L170"></a><span class="ln">   170</span>		ForkLock.Unlock()
<a id="L171"></a><span class="ln">   171</span>	
<a id="L172"></a><span class="ln">   172</span>		<span class="comment">// Read child error status from pipe.</span>
<a id="L173"></a><span class="ln">   173</span>		Close(p[1])
<a id="L174"></a><span class="ln">   174</span>		n, err = read(p[0], (*byte)(unsafe.Pointer(&amp;err1)), int(unsafe.Sizeof(err1)))
<a id="L175"></a><span class="ln">   175</span>		Close(p[0])
<a id="L176"></a><span class="ln">   176</span>		if err != nil || n != 0 {
<a id="L177"></a><span class="ln">   177</span>			if n == int(unsafe.Sizeof(err1)) {
<a id="L178"></a><span class="ln">   178</span>				err = Errno(err1)
<a id="L179"></a><span class="ln">   179</span>			}
<a id="L180"></a><span class="ln">   180</span>			if err == nil {
<a id="L181"></a><span class="ln">   181</span>				err = EPIPE
<a id="L182"></a><span class="ln">   182</span>			}
<a id="L183"></a><span class="ln">   183</span>	
<a id="L184"></a><span class="ln">   184</span>			<span class="comment">// Child failed; wait for it to exit, to make sure</span>
<a id="L185"></a><span class="ln">   185</span>			<span class="comment">// the zombies don&#39;t accumulate.</span>
<a id="L186"></a><span class="ln">   186</span>			_, err1 := Wait4(pid, &amp;wstatus, 0, nil)
<a id="L187"></a><span class="ln">   187</span>			for err1 == EINTR {
<a id="L188"></a><span class="ln">   188</span>				_, err1 = Wait4(pid, &amp;wstatus, 0, nil)
<a id="L189"></a><span class="ln">   189</span>			}
<a id="L190"></a><span class="ln">   190</span>			return 0, err
<a id="L191"></a><span class="ln">   191</span>		}
<a id="L192"></a><span class="ln">   192</span>	
<a id="L193"></a><span class="ln">   193</span>		<span class="comment">// Read got EOF, so pipe closed on exec, so exec succeeded.</span>
<a id="L194"></a><span class="ln">   194</span>		return pid, nil
<a id="L195"></a><span class="ln">   195</span>	
<a id="L196"></a><span class="ln">   196</span>	error:
<a id="L197"></a><span class="ln">   197</span>		if p[0] &gt;= 0 {
<a id="L198"></a><span class="ln">   198</span>			Close(p[0])
<a id="L199"></a><span class="ln">   199</span>			Close(p[1])
<a id="L200"></a><span class="ln">   200</span>		}
<a id="L201"></a><span class="ln">   201</span>		ForkLock.Unlock()
<a id="L202"></a><span class="ln">   202</span>		return 0, err
<a id="L203"></a><span class="ln">   203</span>	}
<a id="L204"></a><span class="ln">   204</span>	
<a id="L205"></a><span class="ln">   205</span>	<span class="comment">// Combination of fork and exec, careful to be thread safe.</span>
<a id="L206"></a><span class="ln">   206</span>	func ForkExec(argv0 string, argv []string, attr *ProcAttr) (pid int, err error) {
<a id="L207"></a><span class="ln">   207</span>		return forkExec(argv0, argv, attr)
<a id="L208"></a><span class="ln">   208</span>	}
<a id="L209"></a><span class="ln">   209</span>	
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// StartProcess wraps ForkExec for package os.</span>
<a id="L211"></a><span class="ln">   211</span>	func StartProcess(argv0 string, argv []string, attr *ProcAttr) (pid int, handle uintptr, err error) {
<a id="L212"></a><span class="ln">   212</span>		pid, err = forkExec(argv0, argv, attr)
<a id="L213"></a><span class="ln">   213</span>		return pid, 0, err
<a id="L214"></a><span class="ln">   214</span>	}
<a id="L215"></a><span class="ln">   215</span>	
<a id="L216"></a><span class="ln">   216</span>	<span class="comment">// Ordinary exec.</span>
<a id="L217"></a><span class="ln">   217</span>	func Exec(argv0 string, argv []string, envv []string) (err error) {
<a id="L218"></a><span class="ln">   218</span>		_, _, err1 := RawSyscall(SYS_EXECVE,
<a id="L219"></a><span class="ln">   219</span>			uintptr(unsafe.Pointer(StringBytePtr(argv0))),
<a id="L220"></a><span class="ln">   220</span>			uintptr(unsafe.Pointer(&amp;StringSlicePtr(argv)[0])),
<a id="L221"></a><span class="ln">   221</span>			uintptr(unsafe.Pointer(&amp;StringSlicePtr(envv)[0])))
<a id="L222"></a><span class="ln">   222</span>		return Errno(err1)
<a id="L223"></a><span class="ln">   223</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

