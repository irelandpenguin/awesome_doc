<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/syscall/syscall_unix.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/syscall/syscall_unix.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// +build darwin freebsd linux netbsd openbsd</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package syscall
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;runtime&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;sync&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;unsafe&#34;
<a id="L13"></a><span class="ln">    13</span>	)
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	var (
<a id="L16"></a><span class="ln">    16</span>		Stdin  = 0
<a id="L17"></a><span class="ln">    17</span>		Stdout = 1
<a id="L18"></a><span class="ln">    18</span>		Stderr = 2
<a id="L19"></a><span class="ln">    19</span>	)
<a id="L20"></a><span class="ln">    20</span>	
<a id="L21"></a><span class="ln">    21</span>	const darwinAMD64 = runtime.GOOS == &#34;darwin&#34; &amp;&amp; runtime.GOARCH == &#34;amd64&#34;
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno)
<a id="L24"></a><span class="ln">    24</span>	func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)
<a id="L25"></a><span class="ln">    25</span>	func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno)
<a id="L26"></a><span class="ln">    26</span>	func RawSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)
<a id="L27"></a><span class="ln">    27</span>	
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// Mmap manager, for use by operating system-specific implementations.</span>
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>	type mmapper struct {
<a id="L31"></a><span class="ln">    31</span>		sync.Mutex
<a id="L32"></a><span class="ln">    32</span>		active map[*byte][]byte <span class="comment">// active mappings; key is last byte in mapping</span>
<a id="L33"></a><span class="ln">    33</span>		mmap   func(addr, length uintptr, prot, flags, fd int, offset int64) (uintptr, error)
<a id="L34"></a><span class="ln">    34</span>		munmap func(addr uintptr, length uintptr) error
<a id="L35"></a><span class="ln">    35</span>	}
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>	func (m *mmapper) Mmap(fd int, offset int64, length int, prot int, flags int) (data []byte, err error) {
<a id="L38"></a><span class="ln">    38</span>		if length &lt;= 0 {
<a id="L39"></a><span class="ln">    39</span>			return nil, EINVAL
<a id="L40"></a><span class="ln">    40</span>		}
<a id="L41"></a><span class="ln">    41</span>	
<a id="L42"></a><span class="ln">    42</span>		<span class="comment">// Map the requested memory.</span>
<a id="L43"></a><span class="ln">    43</span>		addr, errno := m.mmap(0, uintptr(length), prot, flags, fd, offset)
<a id="L44"></a><span class="ln">    44</span>		if errno != nil {
<a id="L45"></a><span class="ln">    45</span>			return nil, errno
<a id="L46"></a><span class="ln">    46</span>		}
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>		<span class="comment">// Slice memory layout</span>
<a id="L49"></a><span class="ln">    49</span>		var sl = struct {
<a id="L50"></a><span class="ln">    50</span>			addr uintptr
<a id="L51"></a><span class="ln">    51</span>			len  int
<a id="L52"></a><span class="ln">    52</span>			cap  int
<a id="L53"></a><span class="ln">    53</span>		}{addr, length, length}
<a id="L54"></a><span class="ln">    54</span>	
<a id="L55"></a><span class="ln">    55</span>		<span class="comment">// Use unsafe to turn sl into a []byte.</span>
<a id="L56"></a><span class="ln">    56</span>		b := *(*[]byte)(unsafe.Pointer(&amp;sl))
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>		<span class="comment">// Register mapping in m and return it.</span>
<a id="L59"></a><span class="ln">    59</span>		p := &amp;b[cap(b)-1]
<a id="L60"></a><span class="ln">    60</span>		m.Lock()
<a id="L61"></a><span class="ln">    61</span>		defer m.Unlock()
<a id="L62"></a><span class="ln">    62</span>		m.active[p] = b
<a id="L63"></a><span class="ln">    63</span>		return b, nil
<a id="L64"></a><span class="ln">    64</span>	}
<a id="L65"></a><span class="ln">    65</span>	
<a id="L66"></a><span class="ln">    66</span>	func (m *mmapper) Munmap(data []byte) (err error) {
<a id="L67"></a><span class="ln">    67</span>		if len(data) == 0 || len(data) != cap(data) {
<a id="L68"></a><span class="ln">    68</span>			return EINVAL
<a id="L69"></a><span class="ln">    69</span>		}
<a id="L70"></a><span class="ln">    70</span>	
<a id="L71"></a><span class="ln">    71</span>		<span class="comment">// Find the base of the mapping.</span>
<a id="L72"></a><span class="ln">    72</span>		p := &amp;data[cap(data)-1]
<a id="L73"></a><span class="ln">    73</span>		m.Lock()
<a id="L74"></a><span class="ln">    74</span>		defer m.Unlock()
<a id="L75"></a><span class="ln">    75</span>		b := m.active[p]
<a id="L76"></a><span class="ln">    76</span>		if b == nil || &amp;b[0] != &amp;data[0] {
<a id="L77"></a><span class="ln">    77</span>			return EINVAL
<a id="L78"></a><span class="ln">    78</span>		}
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>		<span class="comment">// Unmap the memory and update m.</span>
<a id="L81"></a><span class="ln">    81</span>		if errno := m.munmap(uintptr(unsafe.Pointer(&amp;b[0])), uintptr(len(b))); errno != nil {
<a id="L82"></a><span class="ln">    82</span>			return errno
<a id="L83"></a><span class="ln">    83</span>		}
<a id="L84"></a><span class="ln">    84</span>		delete(m.active, p)
<a id="L85"></a><span class="ln">    85</span>		return nil
<a id="L86"></a><span class="ln">    86</span>	}
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// An Errno is an unsigned number describing an error condition.</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">// It implements the error interface.  The zero Errno is by convention</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// a non-error, so code to convert from Errno to error should use:</span>
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">//	err = nil</span>
<a id="L92"></a><span class="ln">    92</span>	<span class="comment">//	if errno != 0 {</span>
<a id="L93"></a><span class="ln">    93</span>	<span class="comment">//		err = errno</span>
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">//	}</span>
<a id="L95"></a><span class="ln">    95</span>	type Errno uintptr
<a id="L96"></a><span class="ln">    96</span>	
<a id="L97"></a><span class="ln">    97</span>	func (e Errno) Error() string {
<a id="L98"></a><span class="ln">    98</span>		if 0 &lt;= int(e) &amp;&amp; int(e) &lt; len(errors) {
<a id="L99"></a><span class="ln">    99</span>			s := errors[e]
<a id="L100"></a><span class="ln">   100</span>			if s != &#34;&#34; {
<a id="L101"></a><span class="ln">   101</span>				return s
<a id="L102"></a><span class="ln">   102</span>			}
<a id="L103"></a><span class="ln">   103</span>		}
<a id="L104"></a><span class="ln">   104</span>		return &#34;errno &#34; + itoa(int(e))
<a id="L105"></a><span class="ln">   105</span>	}
<a id="L106"></a><span class="ln">   106</span>	
<a id="L107"></a><span class="ln">   107</span>	func (e Errno) Temporary() bool {
<a id="L108"></a><span class="ln">   108</span>		return e == EINTR || e == EMFILE || e.Timeout()
<a id="L109"></a><span class="ln">   109</span>	}
<a id="L110"></a><span class="ln">   110</span>	
<a id="L111"></a><span class="ln">   111</span>	func (e Errno) Timeout() bool {
<a id="L112"></a><span class="ln">   112</span>		return e == EAGAIN || e == EWOULDBLOCK || e == ETIMEDOUT
<a id="L113"></a><span class="ln">   113</span>	}
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>	<span class="comment">// A Signal is a number describing a process signal.</span>
<a id="L116"></a><span class="ln">   116</span>	<span class="comment">// It implements the os.Signal interface.</span>
<a id="L117"></a><span class="ln">   117</span>	type Signal int
<a id="L118"></a><span class="ln">   118</span>	
<a id="L119"></a><span class="ln">   119</span>	func (s Signal) Signal() {}
<a id="L120"></a><span class="ln">   120</span>	
<a id="L121"></a><span class="ln">   121</span>	func (s Signal) String() string {
<a id="L122"></a><span class="ln">   122</span>		if 0 &lt;= s &amp;&amp; int(s) &lt; len(signals) {
<a id="L123"></a><span class="ln">   123</span>			str := signals[s]
<a id="L124"></a><span class="ln">   124</span>			if str != &#34;&#34; {
<a id="L125"></a><span class="ln">   125</span>				return str
<a id="L126"></a><span class="ln">   126</span>			}
<a id="L127"></a><span class="ln">   127</span>		}
<a id="L128"></a><span class="ln">   128</span>		return &#34;signal &#34; + itoa(int(s))
<a id="L129"></a><span class="ln">   129</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

