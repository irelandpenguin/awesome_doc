<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/syscall/sockcmsg_unix.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/syscall/sockcmsg_unix.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// +build darwin freebsd linux netbsd openbsd</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// Socket control messages</span>
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	package syscall
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	import (
<a id="L12"></a><span class="ln">    12</span>		&#34;unsafe&#34;
<a id="L13"></a><span class="ln">    13</span>	)
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// Round the length of a raw sockaddr up to align it propery.</span>
<a id="L16"></a><span class="ln">    16</span>	func cmsgAlignOf(salen int) int {
<a id="L17"></a><span class="ln">    17</span>		salign := sizeofPtr
<a id="L18"></a><span class="ln">    18</span>		<span class="comment">// NOTE: It seems like 64-bit Darwin kernel still requires 32-bit</span>
<a id="L19"></a><span class="ln">    19</span>		<span class="comment">// aligned access to BSD subsystem.</span>
<a id="L20"></a><span class="ln">    20</span>		if darwinAMD64 {
<a id="L21"></a><span class="ln">    21</span>			salign = 4
<a id="L22"></a><span class="ln">    22</span>		}
<a id="L23"></a><span class="ln">    23</span>		if salen == 0 {
<a id="L24"></a><span class="ln">    24</span>			return salign
<a id="L25"></a><span class="ln">    25</span>		}
<a id="L26"></a><span class="ln">    26</span>		return (salen + salign - 1) &amp; ^(salign - 1)
<a id="L27"></a><span class="ln">    27</span>	}
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// CmsgLen returns the value to store in the Len field of the Cmsghdr</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// structure, taking into account any necessary alignment.</span>
<a id="L31"></a><span class="ln">    31</span>	func CmsgLen(datalen int) int {
<a id="L32"></a><span class="ln">    32</span>		return cmsgAlignOf(SizeofCmsghdr) + datalen
<a id="L33"></a><span class="ln">    33</span>	}
<a id="L34"></a><span class="ln">    34</span>	
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// CmsgSpace returns the number of bytes an ancillary element with</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// payload of the passed data length occupies.</span>
<a id="L37"></a><span class="ln">    37</span>	func CmsgSpace(datalen int) int {
<a id="L38"></a><span class="ln">    38</span>		return cmsgAlignOf(SizeofCmsghdr) + cmsgAlignOf(datalen)
<a id="L39"></a><span class="ln">    39</span>	}
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>	func cmsgData(cmsg *Cmsghdr) unsafe.Pointer {
<a id="L42"></a><span class="ln">    42</span>		return unsafe.Pointer(uintptr(unsafe.Pointer(cmsg)) + SizeofCmsghdr)
<a id="L43"></a><span class="ln">    43</span>	}
<a id="L44"></a><span class="ln">    44</span>	
<a id="L45"></a><span class="ln">    45</span>	type SocketControlMessage struct {
<a id="L46"></a><span class="ln">    46</span>		Header Cmsghdr
<a id="L47"></a><span class="ln">    47</span>		Data   []byte
<a id="L48"></a><span class="ln">    48</span>	}
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>	func ParseSocketControlMessage(buf []byte) ([]SocketControlMessage, error) {
<a id="L51"></a><span class="ln">    51</span>		var (
<a id="L52"></a><span class="ln">    52</span>			h     *Cmsghdr
<a id="L53"></a><span class="ln">    53</span>			dbuf  []byte
<a id="L54"></a><span class="ln">    54</span>			e     error
<a id="L55"></a><span class="ln">    55</span>			cmsgs []SocketControlMessage
<a id="L56"></a><span class="ln">    56</span>		)
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>		for len(buf) &gt;= CmsgLen(0) {
<a id="L59"></a><span class="ln">    59</span>			h, dbuf, e = socketControlMessageHeaderAndData(buf)
<a id="L60"></a><span class="ln">    60</span>			if e != nil {
<a id="L61"></a><span class="ln">    61</span>				break
<a id="L62"></a><span class="ln">    62</span>			}
<a id="L63"></a><span class="ln">    63</span>			m := SocketControlMessage{}
<a id="L64"></a><span class="ln">    64</span>			m.Header = *h
<a id="L65"></a><span class="ln">    65</span>			m.Data = dbuf[:int(h.Len)-cmsgAlignOf(SizeofCmsghdr)]
<a id="L66"></a><span class="ln">    66</span>			cmsgs = append(cmsgs, m)
<a id="L67"></a><span class="ln">    67</span>			buf = buf[cmsgAlignOf(int(h.Len)):]
<a id="L68"></a><span class="ln">    68</span>		}
<a id="L69"></a><span class="ln">    69</span>	
<a id="L70"></a><span class="ln">    70</span>		return cmsgs, e
<a id="L71"></a><span class="ln">    71</span>	}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>	func socketControlMessageHeaderAndData(buf []byte) (*Cmsghdr, []byte, error) {
<a id="L74"></a><span class="ln">    74</span>		h := (*Cmsghdr)(unsafe.Pointer(&amp;buf[0]))
<a id="L75"></a><span class="ln">    75</span>		if h.Len &lt; SizeofCmsghdr || int(h.Len) &gt; len(buf) {
<a id="L76"></a><span class="ln">    76</span>			return nil, nil, EINVAL
<a id="L77"></a><span class="ln">    77</span>		}
<a id="L78"></a><span class="ln">    78</span>		return h, buf[cmsgAlignOf(SizeofCmsghdr):], nil
<a id="L79"></a><span class="ln">    79</span>	}
<a id="L80"></a><span class="ln">    80</span>	
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// UnixRights encodes a set of open file descriptors into a socket</span>
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">// control message for sending to another process.</span>
<a id="L83"></a><span class="ln">    83</span>	func UnixRights(fds ...int) []byte {
<a id="L84"></a><span class="ln">    84</span>		datalen := len(fds) * 4
<a id="L85"></a><span class="ln">    85</span>		buf := make([]byte, CmsgSpace(datalen))
<a id="L86"></a><span class="ln">    86</span>		cmsg := (*Cmsghdr)(unsafe.Pointer(&amp;buf[0]))
<a id="L87"></a><span class="ln">    87</span>		cmsg.Level = SOL_SOCKET
<a id="L88"></a><span class="ln">    88</span>		cmsg.Type = SCM_RIGHTS
<a id="L89"></a><span class="ln">    89</span>		cmsg.SetLen(CmsgLen(datalen))
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>		data := uintptr(cmsgData(cmsg))
<a id="L92"></a><span class="ln">    92</span>		for _, fd := range fds {
<a id="L93"></a><span class="ln">    93</span>			*(*int32)(unsafe.Pointer(data)) = int32(fd)
<a id="L94"></a><span class="ln">    94</span>			data += 4
<a id="L95"></a><span class="ln">    95</span>		}
<a id="L96"></a><span class="ln">    96</span>	
<a id="L97"></a><span class="ln">    97</span>		return buf
<a id="L98"></a><span class="ln">    98</span>	}
<a id="L99"></a><span class="ln">    99</span>	
<a id="L100"></a><span class="ln">   100</span>	<span class="comment">// ParseUnixRights decodes a socket control message that contains an</span>
<a id="L101"></a><span class="ln">   101</span>	<span class="comment">// integer array of open file descriptors from another process.</span>
<a id="L102"></a><span class="ln">   102</span>	func ParseUnixRights(msg *SocketControlMessage) ([]int, error) {
<a id="L103"></a><span class="ln">   103</span>		if msg.Header.Level != SOL_SOCKET {
<a id="L104"></a><span class="ln">   104</span>			return nil, EINVAL
<a id="L105"></a><span class="ln">   105</span>		}
<a id="L106"></a><span class="ln">   106</span>		if msg.Header.Type != SCM_RIGHTS {
<a id="L107"></a><span class="ln">   107</span>			return nil, EINVAL
<a id="L108"></a><span class="ln">   108</span>		}
<a id="L109"></a><span class="ln">   109</span>		fds := make([]int, len(msg.Data)&gt;&gt;2)
<a id="L110"></a><span class="ln">   110</span>		for i, j := 0, 0; i &lt; len(msg.Data); i += 4 {
<a id="L111"></a><span class="ln">   111</span>			fds[j] = int(*(*int32)(unsafe.Pointer(&amp;msg.Data[i])))
<a id="L112"></a><span class="ln">   112</span>			j++
<a id="L113"></a><span class="ln">   113</span>		}
<a id="L114"></a><span class="ln">   114</span>		return fds, nil
<a id="L115"></a><span class="ln">   115</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

