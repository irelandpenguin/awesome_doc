<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/syscall/netlink_linux.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/syscall/netlink_linux.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Netlink sockets and messages</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package syscall
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;unsafe&#34;
<a id="L11"></a><span class="ln">    11</span>	)
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// Round the length of a netlink message up to align it properly.</span>
<a id="L14"></a><span class="ln">    14</span>	func nlmAlignOf(msglen int) int {
<a id="L15"></a><span class="ln">    15</span>		return (msglen + NLMSG_ALIGNTO - 1) &amp; ^(NLMSG_ALIGNTO - 1)
<a id="L16"></a><span class="ln">    16</span>	}
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// Round the length of a netlink route attribute up to align it</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// properly.</span>
<a id="L20"></a><span class="ln">    20</span>	func rtaAlignOf(attrlen int) int {
<a id="L21"></a><span class="ln">    21</span>		return (attrlen + RTA_ALIGNTO - 1) &amp; ^(RTA_ALIGNTO - 1)
<a id="L22"></a><span class="ln">    22</span>	}
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// NetlinkRouteRequest represents the request message to receive</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// routing and link states from the kernel.</span>
<a id="L26"></a><span class="ln">    26</span>	type NetlinkRouteRequest struct {
<a id="L27"></a><span class="ln">    27</span>		Header NlMsghdr
<a id="L28"></a><span class="ln">    28</span>		Data   RtGenmsg
<a id="L29"></a><span class="ln">    29</span>	}
<a id="L30"></a><span class="ln">    30</span>	
<a id="L31"></a><span class="ln">    31</span>	func (rr *NetlinkRouteRequest) toWireFormat() []byte {
<a id="L32"></a><span class="ln">    32</span>		b := make([]byte, rr.Header.Len)
<a id="L33"></a><span class="ln">    33</span>		b[0] = byte(rr.Header.Len)
<a id="L34"></a><span class="ln">    34</span>		b[1] = byte(rr.Header.Len &gt;&gt; 8)
<a id="L35"></a><span class="ln">    35</span>		b[2] = byte(rr.Header.Len &gt;&gt; 16)
<a id="L36"></a><span class="ln">    36</span>		b[3] = byte(rr.Header.Len &gt;&gt; 24)
<a id="L37"></a><span class="ln">    37</span>		b[4] = byte(rr.Header.Type)
<a id="L38"></a><span class="ln">    38</span>		b[5] = byte(rr.Header.Type &gt;&gt; 8)
<a id="L39"></a><span class="ln">    39</span>		b[6] = byte(rr.Header.Flags)
<a id="L40"></a><span class="ln">    40</span>		b[7] = byte(rr.Header.Flags &gt;&gt; 8)
<a id="L41"></a><span class="ln">    41</span>		b[8] = byte(rr.Header.Seq)
<a id="L42"></a><span class="ln">    42</span>		b[9] = byte(rr.Header.Seq &gt;&gt; 8)
<a id="L43"></a><span class="ln">    43</span>		b[10] = byte(rr.Header.Seq &gt;&gt; 16)
<a id="L44"></a><span class="ln">    44</span>		b[11] = byte(rr.Header.Seq &gt;&gt; 24)
<a id="L45"></a><span class="ln">    45</span>		b[12] = byte(rr.Header.Pid)
<a id="L46"></a><span class="ln">    46</span>		b[13] = byte(rr.Header.Pid &gt;&gt; 8)
<a id="L47"></a><span class="ln">    47</span>		b[14] = byte(rr.Header.Pid &gt;&gt; 16)
<a id="L48"></a><span class="ln">    48</span>		b[15] = byte(rr.Header.Pid &gt;&gt; 24)
<a id="L49"></a><span class="ln">    49</span>		b[16] = byte(rr.Data.Family)
<a id="L50"></a><span class="ln">    50</span>		return b
<a id="L51"></a><span class="ln">    51</span>	}
<a id="L52"></a><span class="ln">    52</span>	
<a id="L53"></a><span class="ln">    53</span>	func newNetlinkRouteRequest(proto, seq, family int) []byte {
<a id="L54"></a><span class="ln">    54</span>		rr := &amp;NetlinkRouteRequest{}
<a id="L55"></a><span class="ln">    55</span>		rr.Header.Len = NLMSG_HDRLEN + SizeofRtGenmsg
<a id="L56"></a><span class="ln">    56</span>		rr.Header.Type = uint16(proto)
<a id="L57"></a><span class="ln">    57</span>		rr.Header.Flags = NLM_F_DUMP | NLM_F_REQUEST
<a id="L58"></a><span class="ln">    58</span>		rr.Header.Seq = uint32(seq)
<a id="L59"></a><span class="ln">    59</span>		rr.Data.Family = uint8(family)
<a id="L60"></a><span class="ln">    60</span>		return rr.toWireFormat()
<a id="L61"></a><span class="ln">    61</span>	}
<a id="L62"></a><span class="ln">    62</span>	
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">// NetlinkRIB returns routing information base, as known as RIB,</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// which consists of network facility information, states and</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// parameters.</span>
<a id="L66"></a><span class="ln">    66</span>	func NetlinkRIB(proto, family int) ([]byte, error) {
<a id="L67"></a><span class="ln">    67</span>		var (
<a id="L68"></a><span class="ln">    68</span>			lsanl SockaddrNetlink
<a id="L69"></a><span class="ln">    69</span>			tab   []byte
<a id="L70"></a><span class="ln">    70</span>		)
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>		s, e := Socket(AF_NETLINK, SOCK_RAW, 0)
<a id="L73"></a><span class="ln">    73</span>		if e != nil {
<a id="L74"></a><span class="ln">    74</span>			return nil, e
<a id="L75"></a><span class="ln">    75</span>		}
<a id="L76"></a><span class="ln">    76</span>		defer Close(s)
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>		lsanl.Family = AF_NETLINK
<a id="L79"></a><span class="ln">    79</span>		e = Bind(s, &amp;lsanl)
<a id="L80"></a><span class="ln">    80</span>		if e != nil {
<a id="L81"></a><span class="ln">    81</span>			return nil, e
<a id="L82"></a><span class="ln">    82</span>		}
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>		seq := 1
<a id="L85"></a><span class="ln">    85</span>		wb := newNetlinkRouteRequest(proto, seq, family)
<a id="L86"></a><span class="ln">    86</span>		e = Sendto(s, wb, 0, &amp;lsanl)
<a id="L87"></a><span class="ln">    87</span>		if e != nil {
<a id="L88"></a><span class="ln">    88</span>			return nil, e
<a id="L89"></a><span class="ln">    89</span>		}
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>		for {
<a id="L92"></a><span class="ln">    92</span>			var (
<a id="L93"></a><span class="ln">    93</span>				rb  []byte
<a id="L94"></a><span class="ln">    94</span>				nr  int
<a id="L95"></a><span class="ln">    95</span>				lsa Sockaddr
<a id="L96"></a><span class="ln">    96</span>			)
<a id="L97"></a><span class="ln">    97</span>	
<a id="L98"></a><span class="ln">    98</span>			rb = make([]byte, Getpagesize())
<a id="L99"></a><span class="ln">    99</span>			nr, _, e = Recvfrom(s, rb, 0)
<a id="L100"></a><span class="ln">   100</span>			if e != nil {
<a id="L101"></a><span class="ln">   101</span>				return nil, e
<a id="L102"></a><span class="ln">   102</span>			}
<a id="L103"></a><span class="ln">   103</span>			if nr &lt; NLMSG_HDRLEN {
<a id="L104"></a><span class="ln">   104</span>				return nil, EINVAL
<a id="L105"></a><span class="ln">   105</span>			}
<a id="L106"></a><span class="ln">   106</span>			rb = rb[:nr]
<a id="L107"></a><span class="ln">   107</span>			tab = append(tab, rb...)
<a id="L108"></a><span class="ln">   108</span>	
<a id="L109"></a><span class="ln">   109</span>			msgs, _ := ParseNetlinkMessage(rb)
<a id="L110"></a><span class="ln">   110</span>			for _, m := range msgs {
<a id="L111"></a><span class="ln">   111</span>				if lsa, e = Getsockname(s); e != nil {
<a id="L112"></a><span class="ln">   112</span>					return nil, e
<a id="L113"></a><span class="ln">   113</span>				}
<a id="L114"></a><span class="ln">   114</span>				switch v := lsa.(type) {
<a id="L115"></a><span class="ln">   115</span>				case *SockaddrNetlink:
<a id="L116"></a><span class="ln">   116</span>					if m.Header.Seq != uint32(seq) || m.Header.Pid != v.Pid {
<a id="L117"></a><span class="ln">   117</span>						return nil, EINVAL
<a id="L118"></a><span class="ln">   118</span>					}
<a id="L119"></a><span class="ln">   119</span>				default:
<a id="L120"></a><span class="ln">   120</span>					return nil, EINVAL
<a id="L121"></a><span class="ln">   121</span>				}
<a id="L122"></a><span class="ln">   122</span>				if m.Header.Type == NLMSG_DONE {
<a id="L123"></a><span class="ln">   123</span>					goto done
<a id="L124"></a><span class="ln">   124</span>				}
<a id="L125"></a><span class="ln">   125</span>				if m.Header.Type == NLMSG_ERROR {
<a id="L126"></a><span class="ln">   126</span>					return nil, EINVAL
<a id="L127"></a><span class="ln">   127</span>				}
<a id="L128"></a><span class="ln">   128</span>			}
<a id="L129"></a><span class="ln">   129</span>		}
<a id="L130"></a><span class="ln">   130</span>	
<a id="L131"></a><span class="ln">   131</span>	done:
<a id="L132"></a><span class="ln">   132</span>		return tab, nil
<a id="L133"></a><span class="ln">   133</span>	}
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">// NetlinkMessage represents the netlink message.</span>
<a id="L136"></a><span class="ln">   136</span>	type NetlinkMessage struct {
<a id="L137"></a><span class="ln">   137</span>		Header NlMsghdr
<a id="L138"></a><span class="ln">   138</span>		Data   []byte
<a id="L139"></a><span class="ln">   139</span>	}
<a id="L140"></a><span class="ln">   140</span>	
<a id="L141"></a><span class="ln">   141</span>	<span class="comment">// ParseNetlinkMessage parses buf as netlink messages and returns</span>
<a id="L142"></a><span class="ln">   142</span>	<span class="comment">// the slice containing the NetlinkMessage structs.</span>
<a id="L143"></a><span class="ln">   143</span>	func ParseNetlinkMessage(buf []byte) ([]NetlinkMessage, error) {
<a id="L144"></a><span class="ln">   144</span>		var (
<a id="L145"></a><span class="ln">   145</span>			h    *NlMsghdr
<a id="L146"></a><span class="ln">   146</span>			dbuf []byte
<a id="L147"></a><span class="ln">   147</span>			dlen int
<a id="L148"></a><span class="ln">   148</span>			e    error
<a id="L149"></a><span class="ln">   149</span>			msgs []NetlinkMessage
<a id="L150"></a><span class="ln">   150</span>		)
<a id="L151"></a><span class="ln">   151</span>	
<a id="L152"></a><span class="ln">   152</span>		for len(buf) &gt;= NLMSG_HDRLEN {
<a id="L153"></a><span class="ln">   153</span>			h, dbuf, dlen, e = netlinkMessageHeaderAndData(buf)
<a id="L154"></a><span class="ln">   154</span>			if e != nil {
<a id="L155"></a><span class="ln">   155</span>				break
<a id="L156"></a><span class="ln">   156</span>			}
<a id="L157"></a><span class="ln">   157</span>			m := NetlinkMessage{}
<a id="L158"></a><span class="ln">   158</span>			m.Header = *h
<a id="L159"></a><span class="ln">   159</span>			m.Data = dbuf[:h.Len-NLMSG_HDRLEN]
<a id="L160"></a><span class="ln">   160</span>			msgs = append(msgs, m)
<a id="L161"></a><span class="ln">   161</span>			buf = buf[dlen:]
<a id="L162"></a><span class="ln">   162</span>		}
<a id="L163"></a><span class="ln">   163</span>	
<a id="L164"></a><span class="ln">   164</span>		return msgs, e
<a id="L165"></a><span class="ln">   165</span>	}
<a id="L166"></a><span class="ln">   166</span>	
<a id="L167"></a><span class="ln">   167</span>	func netlinkMessageHeaderAndData(buf []byte) (*NlMsghdr, []byte, int, error) {
<a id="L168"></a><span class="ln">   168</span>		h := (*NlMsghdr)(unsafe.Pointer(&amp;buf[0]))
<a id="L169"></a><span class="ln">   169</span>		if h.Len &lt; NLMSG_HDRLEN || int(h.Len) &gt; len(buf) {
<a id="L170"></a><span class="ln">   170</span>			return nil, nil, 0, EINVAL
<a id="L171"></a><span class="ln">   171</span>		}
<a id="L172"></a><span class="ln">   172</span>		return h, buf[NLMSG_HDRLEN:], nlmAlignOf(int(h.Len)), nil
<a id="L173"></a><span class="ln">   173</span>	}
<a id="L174"></a><span class="ln">   174</span>	
<a id="L175"></a><span class="ln">   175</span>	<span class="comment">// NetlinkRouteAttr represents the netlink route attribute.</span>
<a id="L176"></a><span class="ln">   176</span>	type NetlinkRouteAttr struct {
<a id="L177"></a><span class="ln">   177</span>		Attr  RtAttr
<a id="L178"></a><span class="ln">   178</span>		Value []byte
<a id="L179"></a><span class="ln">   179</span>	}
<a id="L180"></a><span class="ln">   180</span>	
<a id="L181"></a><span class="ln">   181</span>	<span class="comment">// ParseNetlinkRouteAttr parses msg&#39;s payload as netlink route</span>
<a id="L182"></a><span class="ln">   182</span>	<span class="comment">// attributes and returns the slice containing the NetlinkRouteAttr</span>
<a id="L183"></a><span class="ln">   183</span>	<span class="comment">// structs.</span>
<a id="L184"></a><span class="ln">   184</span>	func ParseNetlinkRouteAttr(msg *NetlinkMessage) ([]NetlinkRouteAttr, error) {
<a id="L185"></a><span class="ln">   185</span>		var (
<a id="L186"></a><span class="ln">   186</span>			buf   []byte
<a id="L187"></a><span class="ln">   187</span>			a     *RtAttr
<a id="L188"></a><span class="ln">   188</span>			alen  int
<a id="L189"></a><span class="ln">   189</span>			vbuf  []byte
<a id="L190"></a><span class="ln">   190</span>			e     error
<a id="L191"></a><span class="ln">   191</span>			attrs []NetlinkRouteAttr
<a id="L192"></a><span class="ln">   192</span>		)
<a id="L193"></a><span class="ln">   193</span>	
<a id="L194"></a><span class="ln">   194</span>		switch msg.Header.Type {
<a id="L195"></a><span class="ln">   195</span>		case RTM_NEWLINK, RTM_DELLINK:
<a id="L196"></a><span class="ln">   196</span>			buf = msg.Data[SizeofIfInfomsg:]
<a id="L197"></a><span class="ln">   197</span>		case RTM_NEWADDR, RTM_DELADDR:
<a id="L198"></a><span class="ln">   198</span>			buf = msg.Data[SizeofIfAddrmsg:]
<a id="L199"></a><span class="ln">   199</span>		case RTM_NEWROUTE, RTM_DELROUTE:
<a id="L200"></a><span class="ln">   200</span>			buf = msg.Data[SizeofRtMsg:]
<a id="L201"></a><span class="ln">   201</span>		default:
<a id="L202"></a><span class="ln">   202</span>			return nil, EINVAL
<a id="L203"></a><span class="ln">   203</span>		}
<a id="L204"></a><span class="ln">   204</span>	
<a id="L205"></a><span class="ln">   205</span>		for len(buf) &gt;= SizeofRtAttr {
<a id="L206"></a><span class="ln">   206</span>			a, vbuf, alen, e = netlinkRouteAttrAndValue(buf)
<a id="L207"></a><span class="ln">   207</span>			if e != nil {
<a id="L208"></a><span class="ln">   208</span>				break
<a id="L209"></a><span class="ln">   209</span>			}
<a id="L210"></a><span class="ln">   210</span>			ra := NetlinkRouteAttr{}
<a id="L211"></a><span class="ln">   211</span>			ra.Attr = *a
<a id="L212"></a><span class="ln">   212</span>			ra.Value = vbuf[:a.Len-SizeofRtAttr]
<a id="L213"></a><span class="ln">   213</span>			attrs = append(attrs, ra)
<a id="L214"></a><span class="ln">   214</span>			buf = buf[alen:]
<a id="L215"></a><span class="ln">   215</span>		}
<a id="L216"></a><span class="ln">   216</span>	
<a id="L217"></a><span class="ln">   217</span>		return attrs, nil
<a id="L218"></a><span class="ln">   218</span>	}
<a id="L219"></a><span class="ln">   219</span>	
<a id="L220"></a><span class="ln">   220</span>	func netlinkRouteAttrAndValue(buf []byte) (*RtAttr, []byte, int, error) {
<a id="L221"></a><span class="ln">   221</span>		h := (*RtAttr)(unsafe.Pointer(&amp;buf[0]))
<a id="L222"></a><span class="ln">   222</span>		if h.Len &lt; SizeofRtAttr || int(h.Len) &gt; len(buf) {
<a id="L223"></a><span class="ln">   223</span>			return nil, nil, 0, EINVAL
<a id="L224"></a><span class="ln">   224</span>		}
<a id="L225"></a><span class="ln">   225</span>		return h, buf[SizeofRtAttr:], rtaAlignOf(int(h.Len)), nil
<a id="L226"></a><span class="ln">   226</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

