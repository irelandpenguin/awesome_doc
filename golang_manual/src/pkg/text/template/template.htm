<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/text/template/template.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/text/template/template.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package template
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;fmt&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;reflect&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;text/template/parse&#34;
<a id="L11"></a><span class="ln">    11</span>	)
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// common holds the information shared by related templates.</span>
<a id="L14"></a><span class="ln">    14</span>	type common struct {
<a id="L15"></a><span class="ln">    15</span>		tmpl map[string]*Template
<a id="L16"></a><span class="ln">    16</span>		<span class="comment">// We use two maps, one for parsing and one for execution.</span>
<a id="L17"></a><span class="ln">    17</span>		<span class="comment">// This separation makes the API cleaner since it doesn&#39;t</span>
<a id="L18"></a><span class="ln">    18</span>		<span class="comment">// expose reflection to the client.</span>
<a id="L19"></a><span class="ln">    19</span>		parseFuncs FuncMap
<a id="L20"></a><span class="ln">    20</span>		execFuncs  map[string]reflect.Value
<a id="L21"></a><span class="ln">    21</span>	}
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// Template is the representation of a parsed template. The *parse.Tree</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// field is exported only for use by html/template and should be treated</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// as unexported by all other clients.</span>
<a id="L26"></a><span class="ln">    26</span>	type Template struct {
<a id="L27"></a><span class="ln">    27</span>		name string
<a id="L28"></a><span class="ln">    28</span>		*parse.Tree
<a id="L29"></a><span class="ln">    29</span>		*common
<a id="L30"></a><span class="ln">    30</span>		leftDelim  string
<a id="L31"></a><span class="ln">    31</span>		rightDelim string
<a id="L32"></a><span class="ln">    32</span>	}
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// New allocates a new template with the given name.</span>
<a id="L35"></a><span class="ln">    35</span>	func New(name string) *Template {
<a id="L36"></a><span class="ln">    36</span>		return &amp;Template{
<a id="L37"></a><span class="ln">    37</span>			name: name,
<a id="L38"></a><span class="ln">    38</span>		}
<a id="L39"></a><span class="ln">    39</span>	}
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// Name returns the name of the template.</span>
<a id="L42"></a><span class="ln">    42</span>	func (t *Template) Name() string {
<a id="L43"></a><span class="ln">    43</span>		return t.name
<a id="L44"></a><span class="ln">    44</span>	}
<a id="L45"></a><span class="ln">    45</span>	
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">// New allocates a new template associated with the given one and with the same</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">// delimiters. The association, which is transitive, allows one template to</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">// invoke another with a {{template}} action.</span>
<a id="L49"></a><span class="ln">    49</span>	func (t *Template) New(name string) *Template {
<a id="L50"></a><span class="ln">    50</span>		t.init()
<a id="L51"></a><span class="ln">    51</span>		return &amp;Template{
<a id="L52"></a><span class="ln">    52</span>			name:       name,
<a id="L53"></a><span class="ln">    53</span>			common:     t.common,
<a id="L54"></a><span class="ln">    54</span>			leftDelim:  t.leftDelim,
<a id="L55"></a><span class="ln">    55</span>			rightDelim: t.rightDelim,
<a id="L56"></a><span class="ln">    56</span>		}
<a id="L57"></a><span class="ln">    57</span>	}
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>	func (t *Template) init() {
<a id="L60"></a><span class="ln">    60</span>		if t.common == nil {
<a id="L61"></a><span class="ln">    61</span>			t.common = new(common)
<a id="L62"></a><span class="ln">    62</span>			t.tmpl = make(map[string]*Template)
<a id="L63"></a><span class="ln">    63</span>			t.parseFuncs = make(FuncMap)
<a id="L64"></a><span class="ln">    64</span>			t.execFuncs = make(map[string]reflect.Value)
<a id="L65"></a><span class="ln">    65</span>		}
<a id="L66"></a><span class="ln">    66</span>	}
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// Clone returns a duplicate of the template, including all associated</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// templates. The actual representation is not copied, but the name space of</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// associated templates is, so further calls to Parse in the copy will add</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">// templates to the copy but not to the original. Clone can be used to prepare</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">// common templates and use them with variant definitions for other templates</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// by adding the variants after the clone is made.</span>
<a id="L74"></a><span class="ln">    74</span>	func (t *Template) Clone() (*Template, error) {
<a id="L75"></a><span class="ln">    75</span>		nt := t.copy(nil)
<a id="L76"></a><span class="ln">    76</span>		nt.init()
<a id="L77"></a><span class="ln">    77</span>		nt.tmpl[t.name] = nt
<a id="L78"></a><span class="ln">    78</span>		for k, v := range t.tmpl {
<a id="L79"></a><span class="ln">    79</span>			if k == t.name { <span class="comment">// Already installed.</span>
<a id="L80"></a><span class="ln">    80</span>				continue
<a id="L81"></a><span class="ln">    81</span>			}
<a id="L82"></a><span class="ln">    82</span>			<span class="comment">// The associated templates share nt&#39;s common structure.</span>
<a id="L83"></a><span class="ln">    83</span>			tmpl := v.copy(nt.common)
<a id="L84"></a><span class="ln">    84</span>			nt.tmpl[k] = tmpl
<a id="L85"></a><span class="ln">    85</span>		}
<a id="L86"></a><span class="ln">    86</span>		for k, v := range t.parseFuncs {
<a id="L87"></a><span class="ln">    87</span>			nt.parseFuncs[k] = v
<a id="L88"></a><span class="ln">    88</span>		}
<a id="L89"></a><span class="ln">    89</span>		for k, v := range t.execFuncs {
<a id="L90"></a><span class="ln">    90</span>			nt.execFuncs[k] = v
<a id="L91"></a><span class="ln">    91</span>		}
<a id="L92"></a><span class="ln">    92</span>		return nt, nil
<a id="L93"></a><span class="ln">    93</span>	}
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">// copy returns a shallow copy of t, with common set to the argument.</span>
<a id="L96"></a><span class="ln">    96</span>	func (t *Template) copy(c *common) *Template {
<a id="L97"></a><span class="ln">    97</span>		nt := New(t.name)
<a id="L98"></a><span class="ln">    98</span>		nt.Tree = t.Tree
<a id="L99"></a><span class="ln">    99</span>		nt.common = c
<a id="L100"></a><span class="ln">   100</span>		nt.leftDelim = t.leftDelim
<a id="L101"></a><span class="ln">   101</span>		nt.rightDelim = t.rightDelim
<a id="L102"></a><span class="ln">   102</span>		return nt
<a id="L103"></a><span class="ln">   103</span>	}
<a id="L104"></a><span class="ln">   104</span>	
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// AddParseTree creates a new template with the name and parse tree</span>
<a id="L106"></a><span class="ln">   106</span>	<span class="comment">// and associates it with t.</span>
<a id="L107"></a><span class="ln">   107</span>	func (t *Template) AddParseTree(name string, tree *parse.Tree) (*Template, error) {
<a id="L108"></a><span class="ln">   108</span>		if t.tmpl[name] != nil {
<a id="L109"></a><span class="ln">   109</span>			return nil, fmt.Errorf(&#34;template: redefinition of template %q&#34;, name)
<a id="L110"></a><span class="ln">   110</span>		}
<a id="L111"></a><span class="ln">   111</span>		nt := t.New(name)
<a id="L112"></a><span class="ln">   112</span>		nt.Tree = tree
<a id="L113"></a><span class="ln">   113</span>		t.tmpl[name] = nt
<a id="L114"></a><span class="ln">   114</span>		return nt, nil
<a id="L115"></a><span class="ln">   115</span>	}
<a id="L116"></a><span class="ln">   116</span>	
<a id="L117"></a><span class="ln">   117</span>	<span class="comment">// Templates returns a slice of the templates associated with t, including t</span>
<a id="L118"></a><span class="ln">   118</span>	<span class="comment">// itself.</span>
<a id="L119"></a><span class="ln">   119</span>	func (t *Template) Templates() []*Template {
<a id="L120"></a><span class="ln">   120</span>		<span class="comment">// Return a slice so we don&#39;t expose the map.</span>
<a id="L121"></a><span class="ln">   121</span>		m := make([]*Template, 0, len(t.tmpl))
<a id="L122"></a><span class="ln">   122</span>		for _, v := range t.tmpl {
<a id="L123"></a><span class="ln">   123</span>			m = append(m, v)
<a id="L124"></a><span class="ln">   124</span>		}
<a id="L125"></a><span class="ln">   125</span>		return m
<a id="L126"></a><span class="ln">   126</span>	}
<a id="L127"></a><span class="ln">   127</span>	
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// Delims sets the action delimiters to the specified strings, to be used in</span>
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// subsequent calls to Parse, ParseFiles, or ParseGlob. Nested template</span>
<a id="L130"></a><span class="ln">   130</span>	<span class="comment">// definitions will inherit the settings. An empty delimiter stands for the</span>
<a id="L131"></a><span class="ln">   131</span>	<span class="comment">// corresponding default: {{ or }}.</span>
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">// The return value is the template, so calls can be chained.</span>
<a id="L133"></a><span class="ln">   133</span>	func (t *Template) Delims(left, right string) *Template {
<a id="L134"></a><span class="ln">   134</span>		t.leftDelim = left
<a id="L135"></a><span class="ln">   135</span>		t.rightDelim = right
<a id="L136"></a><span class="ln">   136</span>		return t
<a id="L137"></a><span class="ln">   137</span>	}
<a id="L138"></a><span class="ln">   138</span>	
<a id="L139"></a><span class="ln">   139</span>	<span class="comment">// Funcs adds the elements of the argument map to the template&#39;s function map.</span>
<a id="L140"></a><span class="ln">   140</span>	<span class="comment">// It panics if a value in the map is not a function with appropriate return</span>
<a id="L141"></a><span class="ln">   141</span>	<span class="comment">// type. However, it is legal to overwrite elements of the map. The return</span>
<a id="L142"></a><span class="ln">   142</span>	<span class="comment">// value is the template, so calls can be chained.</span>
<a id="L143"></a><span class="ln">   143</span>	func (t *Template) Funcs(funcMap FuncMap) *Template {
<a id="L144"></a><span class="ln">   144</span>		t.init()
<a id="L145"></a><span class="ln">   145</span>		addValueFuncs(t.execFuncs, funcMap)
<a id="L146"></a><span class="ln">   146</span>		addFuncs(t.parseFuncs, funcMap)
<a id="L147"></a><span class="ln">   147</span>		return t
<a id="L148"></a><span class="ln">   148</span>	}
<a id="L149"></a><span class="ln">   149</span>	
<a id="L150"></a><span class="ln">   150</span>	<span class="comment">// Lookup returns the template with the given name that is associated with t,</span>
<a id="L151"></a><span class="ln">   151</span>	<span class="comment">// or nil if there is no such template.</span>
<a id="L152"></a><span class="ln">   152</span>	func (t *Template) Lookup(name string) *Template {
<a id="L153"></a><span class="ln">   153</span>		if t.common == nil {
<a id="L154"></a><span class="ln">   154</span>			return nil
<a id="L155"></a><span class="ln">   155</span>		}
<a id="L156"></a><span class="ln">   156</span>		return t.tmpl[name]
<a id="L157"></a><span class="ln">   157</span>	}
<a id="L158"></a><span class="ln">   158</span>	
<a id="L159"></a><span class="ln">   159</span>	<span class="comment">// Parse parses a string into a template. Nested template definitions will be</span>
<a id="L160"></a><span class="ln">   160</span>	<span class="comment">// associated with the top-level template t. Parse may be called multiple times</span>
<a id="L161"></a><span class="ln">   161</span>	<span class="comment">// to parse definitions of templates to associate with t. It is an error if a</span>
<a id="L162"></a><span class="ln">   162</span>	<span class="comment">// resulting template is non-empty (contains content other than template</span>
<a id="L163"></a><span class="ln">   163</span>	<span class="comment">// definitions) and would replace a non-empty template with the same name.</span>
<a id="L164"></a><span class="ln">   164</span>	<span class="comment">// (In multiple calls to Parse with the same receiver template, only one call</span>
<a id="L165"></a><span class="ln">   165</span>	<span class="comment">// can contain text other than space, comments, and template definitions.)</span>
<a id="L166"></a><span class="ln">   166</span>	func (t *Template) Parse(text string) (*Template, error) {
<a id="L167"></a><span class="ln">   167</span>		t.init()
<a id="L168"></a><span class="ln">   168</span>		trees, err := parse.Parse(t.name, text, t.leftDelim, t.rightDelim, t.parseFuncs, builtins)
<a id="L169"></a><span class="ln">   169</span>		if err != nil {
<a id="L170"></a><span class="ln">   170</span>			return nil, err
<a id="L171"></a><span class="ln">   171</span>		}
<a id="L172"></a><span class="ln">   172</span>		<span class="comment">// Add the newly parsed trees, including the one for t, into our common structure.</span>
<a id="L173"></a><span class="ln">   173</span>		for name, tree := range trees {
<a id="L174"></a><span class="ln">   174</span>			<span class="comment">// If the name we parsed is the name of this template, overwrite this template.</span>
<a id="L175"></a><span class="ln">   175</span>			<span class="comment">// The associate method checks it&#39;s not a redefinition.</span>
<a id="L176"></a><span class="ln">   176</span>			tmpl := t
<a id="L177"></a><span class="ln">   177</span>			if name != t.name {
<a id="L178"></a><span class="ln">   178</span>				tmpl = t.New(name)
<a id="L179"></a><span class="ln">   179</span>			}
<a id="L180"></a><span class="ln">   180</span>			<span class="comment">// Even if t == tmpl, we need to install it in the common.tmpl map.</span>
<a id="L181"></a><span class="ln">   181</span>			if replace, err := t.associate(tmpl, tree); err != nil {
<a id="L182"></a><span class="ln">   182</span>				return nil, err
<a id="L183"></a><span class="ln">   183</span>			} else if replace {
<a id="L184"></a><span class="ln">   184</span>				tmpl.Tree = tree
<a id="L185"></a><span class="ln">   185</span>			}
<a id="L186"></a><span class="ln">   186</span>			tmpl.leftDelim = t.leftDelim
<a id="L187"></a><span class="ln">   187</span>			tmpl.rightDelim = t.rightDelim
<a id="L188"></a><span class="ln">   188</span>		}
<a id="L189"></a><span class="ln">   189</span>		return t, nil
<a id="L190"></a><span class="ln">   190</span>	}
<a id="L191"></a><span class="ln">   191</span>	
<a id="L192"></a><span class="ln">   192</span>	<span class="comment">// associate installs the new template into the group of templates associated</span>
<a id="L193"></a><span class="ln">   193</span>	<span class="comment">// with t. It is an error to reuse a name except to overwrite an empty</span>
<a id="L194"></a><span class="ln">   194</span>	<span class="comment">// template. The two are already known to share the common structure.</span>
<a id="L195"></a><span class="ln">   195</span>	<span class="comment">// The boolean return value reports wither to store this tree as t.Tree.</span>
<a id="L196"></a><span class="ln">   196</span>	func (t *Template) associate(new *Template, tree *parse.Tree) (bool, error) {
<a id="L197"></a><span class="ln">   197</span>		if new.common != t.common {
<a id="L198"></a><span class="ln">   198</span>			panic(&#34;internal error: associate not common&#34;)
<a id="L199"></a><span class="ln">   199</span>		}
<a id="L200"></a><span class="ln">   200</span>		name := new.name
<a id="L201"></a><span class="ln">   201</span>		if old := t.tmpl[name]; old != nil {
<a id="L202"></a><span class="ln">   202</span>			oldIsEmpty := parse.IsEmptyTree(old.Root)
<a id="L203"></a><span class="ln">   203</span>			newIsEmpty := parse.IsEmptyTree(tree.Root)
<a id="L204"></a><span class="ln">   204</span>			if newIsEmpty {
<a id="L205"></a><span class="ln">   205</span>				<span class="comment">// Whether old is empty or not, new is empty; no reason to replace old.</span>
<a id="L206"></a><span class="ln">   206</span>				return false, nil
<a id="L207"></a><span class="ln">   207</span>			}
<a id="L208"></a><span class="ln">   208</span>			if !oldIsEmpty {
<a id="L209"></a><span class="ln">   209</span>				return false, fmt.Errorf(&#34;template: redefinition of template %q&#34;, name)
<a id="L210"></a><span class="ln">   210</span>			}
<a id="L211"></a><span class="ln">   211</span>		}
<a id="L212"></a><span class="ln">   212</span>		t.tmpl[name] = new
<a id="L213"></a><span class="ln">   213</span>		return true, nil
<a id="L214"></a><span class="ln">   214</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

