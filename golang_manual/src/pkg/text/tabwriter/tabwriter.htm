<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/text/tabwriter/tabwriter.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/text/tabwriter/tabwriter.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package tabwriter implements a write filter (tabwriter.Writer) that</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// translates tabbed columns in input into properly aligned text.</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">//</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// The package is using the Elastic Tabstops algorithm described at</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// http://nickgravgaard.com/elastictabstops/index.html.</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">//</span>
<a id="L11"></a><span class="ln">    11</span>	package tabwriter
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	import (
<a id="L14"></a><span class="ln">    14</span>		&#34;bytes&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;io&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;unicode/utf8&#34;
<a id="L17"></a><span class="ln">    17</span>	)
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// ----------------------------------------------------------------------------</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// Filter implementation</span>
<a id="L21"></a><span class="ln">    21</span>	
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// A cell represents a segment of text terminated by tabs or line breaks.</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// The text itself is stored in a separate buffer; cell only describes the</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// segment&#39;s size in bytes, its width in runes, and whether it&#39;s an htab</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// (&#39;\t&#39;) terminated cell.</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">//</span>
<a id="L27"></a><span class="ln">    27</span>	type cell struct {
<a id="L28"></a><span class="ln">    28</span>		size  int  <span class="comment">// cell size in bytes</span>
<a id="L29"></a><span class="ln">    29</span>		width int  <span class="comment">// cell width in runes</span>
<a id="L30"></a><span class="ln">    30</span>		htab  bool <span class="comment">// true if the cell is terminated by an htab (&#39;\t&#39;)</span>
<a id="L31"></a><span class="ln">    31</span>	}
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// A Writer is a filter that inserts padding around tab-delimited</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// columns in its input to align them in the output.</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// The Writer treats incoming bytes as UTF-8 encoded text consisting</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// of cells terminated by (horizontal or vertical) tabs or line</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// breaks (newline or formfeed characters). Cells in adjacent lines</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// constitute a column. The Writer inserts padding as needed to</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// make all cells in a column have the same width, effectively</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// aligning the columns. It assumes that all characters have the</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">// same width except for tabs for which a tabwidth must be specified.</span>
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">// Note that cells are tab-terminated, not tab-separated: trailing</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">// non-tab text at the end of a line does not form a column cell.</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">//</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">// The Writer assumes that all Unicode code points have the same width;</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">// this may not be true in some fonts.</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">//</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">// If DiscardEmptyColumns is set, empty columns that are terminated</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// entirely by vertical (or &#34;soft&#34;) tabs are discarded. Columns</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// terminated by horizontal (or &#34;hard&#34;) tabs are not affected by</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// this flag.</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">//</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">// If a Writer is configured to filter HTML, HTML tags and entities</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// are passed through. The widths of tags and entities are</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// assumed to be zero (tags) and one (entities) for formatting purposes.</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">//</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// A segment of text may be escaped by bracketing it with Escape</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// characters. The tabwriter passes escaped text segments through</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// unchanged. In particular, it does not interpret any tabs or line</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">// breaks within the segment. If the StripEscape flag is set, the</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">// Escape characters are stripped from the output; otherwise they</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">// are passed through as well. For the purpose of formatting, the</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// width of the escaped text is always computed excluding the Escape</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// characters.</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">//</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// The formfeed character (&#39;\f&#39;) acts like a newline but it also</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// terminates all columns in the current line (effectively calling</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// Flush). Cells in the next line start new columns. Unless found</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// inside an HTML tag or inside an escaped text segment, formfeed</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">// characters appear as newlines in the output.</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">//</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// The Writer must buffer input internally, because proper spacing</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">// of one line may depend on the cells in future lines. Clients must</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">// call Flush when done calling Write.</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">//</span>
<a id="L77"></a><span class="ln">    77</span>	type Writer struct {
<a id="L78"></a><span class="ln">    78</span>		<span class="comment">// configuration</span>
<a id="L79"></a><span class="ln">    79</span>		output   io.Writer
<a id="L80"></a><span class="ln">    80</span>		minwidth int
<a id="L81"></a><span class="ln">    81</span>		tabwidth int
<a id="L82"></a><span class="ln">    82</span>		padding  int
<a id="L83"></a><span class="ln">    83</span>		padbytes [8]byte
<a id="L84"></a><span class="ln">    84</span>		flags    uint
<a id="L85"></a><span class="ln">    85</span>	
<a id="L86"></a><span class="ln">    86</span>		<span class="comment">// current state</span>
<a id="L87"></a><span class="ln">    87</span>		buf     bytes.Buffer <span class="comment">// collected text excluding tabs or line breaks</span>
<a id="L88"></a><span class="ln">    88</span>		pos     int          <span class="comment">// buffer position up to which cell.width of incomplete cell has been computed</span>
<a id="L89"></a><span class="ln">    89</span>		cell    cell         <span class="comment">// current incomplete cell; cell.width is up to buf[pos] excluding ignored sections</span>
<a id="L90"></a><span class="ln">    90</span>		endChar byte         <span class="comment">// terminating char of escaped sequence (Escape for escapes, &#39;&gt;&#39;, &#39;;&#39; for HTML tags/entities, or 0)</span>
<a id="L91"></a><span class="ln">    91</span>		lines   [][]cell     <span class="comment">// list of lines; each line is a list of cells</span>
<a id="L92"></a><span class="ln">    92</span>		widths  []int        <span class="comment">// list of column widths in runes - re-used during formatting</span>
<a id="L93"></a><span class="ln">    93</span>	}
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>	func (b *Writer) addLine() { b.lines = append(b.lines, []cell{}) }
<a id="L96"></a><span class="ln">    96</span>	
<a id="L97"></a><span class="ln">    97</span>	<span class="comment">// Reset the current state.</span>
<a id="L98"></a><span class="ln">    98</span>	func (b *Writer) reset() {
<a id="L99"></a><span class="ln">    99</span>		b.buf.Reset()
<a id="L100"></a><span class="ln">   100</span>		b.pos = 0
<a id="L101"></a><span class="ln">   101</span>		b.cell = cell{}
<a id="L102"></a><span class="ln">   102</span>		b.endChar = 0
<a id="L103"></a><span class="ln">   103</span>		b.lines = b.lines[0:0]
<a id="L104"></a><span class="ln">   104</span>		b.widths = b.widths[0:0]
<a id="L105"></a><span class="ln">   105</span>		b.addLine()
<a id="L106"></a><span class="ln">   106</span>	}
<a id="L107"></a><span class="ln">   107</span>	
<a id="L108"></a><span class="ln">   108</span>	<span class="comment">// Internal representation (current state):</span>
<a id="L109"></a><span class="ln">   109</span>	<span class="comment">//</span>
<a id="L110"></a><span class="ln">   110</span>	<span class="comment">// - all text written is appended to buf; tabs and line breaks are stripped away</span>
<a id="L111"></a><span class="ln">   111</span>	<span class="comment">// - at any given time there is a (possibly empty) incomplete cell at the end</span>
<a id="L112"></a><span class="ln">   112</span>	<span class="comment">//   (the cell starts after a tab or line break)</span>
<a id="L113"></a><span class="ln">   113</span>	<span class="comment">// - cell.size is the number of bytes belonging to the cell so far</span>
<a id="L114"></a><span class="ln">   114</span>	<span class="comment">// - cell.width is text width in runes of that cell from the start of the cell to</span>
<a id="L115"></a><span class="ln">   115</span>	<span class="comment">//   position pos; html tags and entities are excluded from this width if html</span>
<a id="L116"></a><span class="ln">   116</span>	<span class="comment">//   filtering is enabled</span>
<a id="L117"></a><span class="ln">   117</span>	<span class="comment">// - the sizes and widths of processed text are kept in the lines list</span>
<a id="L118"></a><span class="ln">   118</span>	<span class="comment">//   which contains a list of cells for each line</span>
<a id="L119"></a><span class="ln">   119</span>	<span class="comment">// - the widths list is a temporary list with current widths used during</span>
<a id="L120"></a><span class="ln">   120</span>	<span class="comment">//   formatting; it is kept in Writer because it&#39;s re-used</span>
<a id="L121"></a><span class="ln">   121</span>	<span class="comment">//</span>
<a id="L122"></a><span class="ln">   122</span>	<span class="comment">//                    |&lt;---------- size ----------&gt;|</span>
<a id="L123"></a><span class="ln">   123</span>	<span class="comment">//                    |                            |</span>
<a id="L124"></a><span class="ln">   124</span>	<span class="comment">//                    |&lt;- width -&gt;|&lt;- ignored -&gt;|  |</span>
<a id="L125"></a><span class="ln">   125</span>	<span class="comment">//                    |           |             |  |</span>
<a id="L126"></a><span class="ln">   126</span>	<span class="comment">// [---processed---tab------------&lt;tag&gt;...&lt;/tag&gt;...]</span>
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// ^                  ^                         ^</span>
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// |                  |                         |</span>
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// buf                start of incomplete cell  pos</span>
<a id="L130"></a><span class="ln">   130</span>	
<a id="L131"></a><span class="ln">   131</span>	<span class="comment">// Formatting can be controlled with these flags.</span>
<a id="L132"></a><span class="ln">   132</span>	const (
<a id="L133"></a><span class="ln">   133</span>		<span class="comment">// Ignore html tags and treat entities (starting with &#39;&amp;&#39;</span>
<a id="L134"></a><span class="ln">   134</span>		<span class="comment">// and ending in &#39;;&#39;) as single characters (width = 1).</span>
<a id="L135"></a><span class="ln">   135</span>		FilterHTML uint = 1 &lt;&lt; iota
<a id="L136"></a><span class="ln">   136</span>	
<a id="L137"></a><span class="ln">   137</span>		<span class="comment">// Strip Escape characters bracketing escaped text segments</span>
<a id="L138"></a><span class="ln">   138</span>		<span class="comment">// instead of passing them through unchanged with the text.</span>
<a id="L139"></a><span class="ln">   139</span>		StripEscape
<a id="L140"></a><span class="ln">   140</span>	
<a id="L141"></a><span class="ln">   141</span>		<span class="comment">// Force right-alignment of cell content.</span>
<a id="L142"></a><span class="ln">   142</span>		<span class="comment">// Default is left-alignment.</span>
<a id="L143"></a><span class="ln">   143</span>		AlignRight
<a id="L144"></a><span class="ln">   144</span>	
<a id="L145"></a><span class="ln">   145</span>		<span class="comment">// Handle empty columns as if they were not present in</span>
<a id="L146"></a><span class="ln">   146</span>		<span class="comment">// the input in the first place.</span>
<a id="L147"></a><span class="ln">   147</span>		DiscardEmptyColumns
<a id="L148"></a><span class="ln">   148</span>	
<a id="L149"></a><span class="ln">   149</span>		<span class="comment">// Always use tabs for indentation columns (i.e., padding of</span>
<a id="L150"></a><span class="ln">   150</span>		<span class="comment">// leading empty cells on the left) independent of padchar.</span>
<a id="L151"></a><span class="ln">   151</span>		TabIndent
<a id="L152"></a><span class="ln">   152</span>	
<a id="L153"></a><span class="ln">   153</span>		<span class="comment">// Print a vertical bar (&#39;|&#39;) between columns (after formatting).</span>
<a id="L154"></a><span class="ln">   154</span>		<span class="comment">// Discarded columns appear as zero-width columns (&#34;||&#34;).</span>
<a id="L155"></a><span class="ln">   155</span>		Debug
<a id="L156"></a><span class="ln">   156</span>	)
<a id="L157"></a><span class="ln">   157</span>	
<a id="L158"></a><span class="ln">   158</span>	<span class="comment">// A Writer must be initialized with a call to Init. The first parameter (output)</span>
<a id="L159"></a><span class="ln">   159</span>	<span class="comment">// specifies the filter output. The remaining parameters control the formatting:</span>
<a id="L160"></a><span class="ln">   160</span>	<span class="comment">//</span>
<a id="L161"></a><span class="ln">   161</span>	<span class="comment">//	minwidth	minimal cell width including any padding</span>
<a id="L162"></a><span class="ln">   162</span>	<span class="comment">//	tabwidth	width of tab characters (equivalent number of spaces)</span>
<a id="L163"></a><span class="ln">   163</span>	<span class="comment">//	padding		padding added to a cell before computing its width</span>
<a id="L164"></a><span class="ln">   164</span>	<span class="comment">//	padchar		ASCII char used for padding</span>
<a id="L165"></a><span class="ln">   165</span>	<span class="comment">//			if padchar == &#39;\t&#39;, the Writer will assume that the</span>
<a id="L166"></a><span class="ln">   166</span>	<span class="comment">//			width of a &#39;\t&#39; in the formatted output is tabwidth,</span>
<a id="L167"></a><span class="ln">   167</span>	<span class="comment">//			and cells are left-aligned independent of align_left</span>
<a id="L168"></a><span class="ln">   168</span>	<span class="comment">//			(for correct-looking results, tabwidth must correspond</span>
<a id="L169"></a><span class="ln">   169</span>	<span class="comment">//			to the tab width in the viewer displaying the result)</span>
<a id="L170"></a><span class="ln">   170</span>	<span class="comment">//	flags		formatting control</span>
<a id="L171"></a><span class="ln">   171</span>	<span class="comment">//</span>
<a id="L172"></a><span class="ln">   172</span>	func (b *Writer) Init(output io.Writer, minwidth, tabwidth, padding int, padchar byte, flags uint) *Writer {
<a id="L173"></a><span class="ln">   173</span>		if minwidth &lt; 0 || tabwidth &lt; 0 || padding &lt; 0 {
<a id="L174"></a><span class="ln">   174</span>			panic(&#34;negative minwidth, tabwidth, or padding&#34;)
<a id="L175"></a><span class="ln">   175</span>		}
<a id="L176"></a><span class="ln">   176</span>		b.output = output
<a id="L177"></a><span class="ln">   177</span>		b.minwidth = minwidth
<a id="L178"></a><span class="ln">   178</span>		b.tabwidth = tabwidth
<a id="L179"></a><span class="ln">   179</span>		b.padding = padding
<a id="L180"></a><span class="ln">   180</span>		for i := range b.padbytes {
<a id="L181"></a><span class="ln">   181</span>			b.padbytes[i] = padchar
<a id="L182"></a><span class="ln">   182</span>		}
<a id="L183"></a><span class="ln">   183</span>		if padchar == &#39;\t&#39; {
<a id="L184"></a><span class="ln">   184</span>			<span class="comment">// tab padding enforces left-alignment</span>
<a id="L185"></a><span class="ln">   185</span>			flags &amp;^= AlignRight
<a id="L186"></a><span class="ln">   186</span>		}
<a id="L187"></a><span class="ln">   187</span>		b.flags = flags
<a id="L188"></a><span class="ln">   188</span>	
<a id="L189"></a><span class="ln">   189</span>		b.reset()
<a id="L190"></a><span class="ln">   190</span>	
<a id="L191"></a><span class="ln">   191</span>		return b
<a id="L192"></a><span class="ln">   192</span>	}
<a id="L193"></a><span class="ln">   193</span>	
<a id="L194"></a><span class="ln">   194</span>	<span class="comment">// debugging support (keep code around)</span>
<a id="L195"></a><span class="ln">   195</span>	func (b *Writer) dump() {
<a id="L196"></a><span class="ln">   196</span>		pos := 0
<a id="L197"></a><span class="ln">   197</span>		for i, line := range b.lines {
<a id="L198"></a><span class="ln">   198</span>			print(&#34;(&#34;, i, &#34;) &#34;)
<a id="L199"></a><span class="ln">   199</span>			for _, c := range line {
<a id="L200"></a><span class="ln">   200</span>				print(&#34;[&#34;, string(b.buf.Bytes()[pos:pos+c.size]), &#34;]&#34;)
<a id="L201"></a><span class="ln">   201</span>				pos += c.size
<a id="L202"></a><span class="ln">   202</span>			}
<a id="L203"></a><span class="ln">   203</span>			print(&#34;\n&#34;)
<a id="L204"></a><span class="ln">   204</span>		}
<a id="L205"></a><span class="ln">   205</span>		print(&#34;\n&#34;)
<a id="L206"></a><span class="ln">   206</span>	}
<a id="L207"></a><span class="ln">   207</span>	
<a id="L208"></a><span class="ln">   208</span>	<span class="comment">// local error wrapper so we can distinguish errors we want to return</span>
<a id="L209"></a><span class="ln">   209</span>	<span class="comment">// as errors from genuine panics (which we don&#39;t want to return as errors)</span>
<a id="L210"></a><span class="ln">   210</span>	type osError struct {
<a id="L211"></a><span class="ln">   211</span>		err error
<a id="L212"></a><span class="ln">   212</span>	}
<a id="L213"></a><span class="ln">   213</span>	
<a id="L214"></a><span class="ln">   214</span>	func (b *Writer) write0(buf []byte) {
<a id="L215"></a><span class="ln">   215</span>		n, err := b.output.Write(buf)
<a id="L216"></a><span class="ln">   216</span>		if n != len(buf) &amp;&amp; err == nil {
<a id="L217"></a><span class="ln">   217</span>			err = io.ErrShortWrite
<a id="L218"></a><span class="ln">   218</span>		}
<a id="L219"></a><span class="ln">   219</span>		if err != nil {
<a id="L220"></a><span class="ln">   220</span>			panic(osError{err})
<a id="L221"></a><span class="ln">   221</span>		}
<a id="L222"></a><span class="ln">   222</span>	}
<a id="L223"></a><span class="ln">   223</span>	
<a id="L224"></a><span class="ln">   224</span>	func (b *Writer) writeN(src []byte, n int) {
<a id="L225"></a><span class="ln">   225</span>		for n &gt; len(src) {
<a id="L226"></a><span class="ln">   226</span>			b.write0(src)
<a id="L227"></a><span class="ln">   227</span>			n -= len(src)
<a id="L228"></a><span class="ln">   228</span>		}
<a id="L229"></a><span class="ln">   229</span>		b.write0(src[0:n])
<a id="L230"></a><span class="ln">   230</span>	}
<a id="L231"></a><span class="ln">   231</span>	
<a id="L232"></a><span class="ln">   232</span>	var (
<a id="L233"></a><span class="ln">   233</span>		newline = []byte{&#39;\n&#39;}
<a id="L234"></a><span class="ln">   234</span>		tabs    = []byte(&#34;\t\t\t\t\t\t\t\t&#34;)
<a id="L235"></a><span class="ln">   235</span>	)
<a id="L236"></a><span class="ln">   236</span>	
<a id="L237"></a><span class="ln">   237</span>	func (b *Writer) writePadding(textw, cellw int, useTabs bool) {
<a id="L238"></a><span class="ln">   238</span>		if b.padbytes[0] == &#39;\t&#39; || useTabs {
<a id="L239"></a><span class="ln">   239</span>			<span class="comment">// padding is done with tabs</span>
<a id="L240"></a><span class="ln">   240</span>			if b.tabwidth == 0 {
<a id="L241"></a><span class="ln">   241</span>				return <span class="comment">// tabs have no width - can&#39;t do any padding</span>
<a id="L242"></a><span class="ln">   242</span>			}
<a id="L243"></a><span class="ln">   243</span>			<span class="comment">// make cellw the smallest multiple of b.tabwidth</span>
<a id="L244"></a><span class="ln">   244</span>			cellw = (cellw + b.tabwidth - 1) / b.tabwidth * b.tabwidth
<a id="L245"></a><span class="ln">   245</span>			n := cellw - textw <span class="comment">// amount of padding</span>
<a id="L246"></a><span class="ln">   246</span>			if n &lt; 0 {
<a id="L247"></a><span class="ln">   247</span>				panic(&#34;internal error&#34;)
<a id="L248"></a><span class="ln">   248</span>			}
<a id="L249"></a><span class="ln">   249</span>			b.writeN(tabs, (n+b.tabwidth-1)/b.tabwidth)
<a id="L250"></a><span class="ln">   250</span>			return
<a id="L251"></a><span class="ln">   251</span>		}
<a id="L252"></a><span class="ln">   252</span>	
<a id="L253"></a><span class="ln">   253</span>		<span class="comment">// padding is done with non-tab characters</span>
<a id="L254"></a><span class="ln">   254</span>		b.writeN(b.padbytes[0:], cellw-textw)
<a id="L255"></a><span class="ln">   255</span>	}
<a id="L256"></a><span class="ln">   256</span>	
<a id="L257"></a><span class="ln">   257</span>	var vbar = []byte{&#39;|&#39;}
<a id="L258"></a><span class="ln">   258</span>	
<a id="L259"></a><span class="ln">   259</span>	func (b *Writer) writeLines(pos0 int, line0, line1 int) (pos int) {
<a id="L260"></a><span class="ln">   260</span>		pos = pos0
<a id="L261"></a><span class="ln">   261</span>		for i := line0; i &lt; line1; i++ {
<a id="L262"></a><span class="ln">   262</span>			line := b.lines[i]
<a id="L263"></a><span class="ln">   263</span>	
<a id="L264"></a><span class="ln">   264</span>			<span class="comment">// if TabIndent is set, use tabs to pad leading empty cells</span>
<a id="L265"></a><span class="ln">   265</span>			useTabs := b.flags&amp;TabIndent != 0
<a id="L266"></a><span class="ln">   266</span>	
<a id="L267"></a><span class="ln">   267</span>			for j, c := range line {
<a id="L268"></a><span class="ln">   268</span>				if j &gt; 0 &amp;&amp; b.flags&amp;Debug != 0 {
<a id="L269"></a><span class="ln">   269</span>					<span class="comment">// indicate column break</span>
<a id="L270"></a><span class="ln">   270</span>					b.write0(vbar)
<a id="L271"></a><span class="ln">   271</span>				}
<a id="L272"></a><span class="ln">   272</span>	
<a id="L273"></a><span class="ln">   273</span>				if c.size == 0 {
<a id="L274"></a><span class="ln">   274</span>					<span class="comment">// empty cell</span>
<a id="L275"></a><span class="ln">   275</span>					if j &lt; len(b.widths) {
<a id="L276"></a><span class="ln">   276</span>						b.writePadding(c.width, b.widths[j], useTabs)
<a id="L277"></a><span class="ln">   277</span>					}
<a id="L278"></a><span class="ln">   278</span>				} else {
<a id="L279"></a><span class="ln">   279</span>					<span class="comment">// non-empty cell</span>
<a id="L280"></a><span class="ln">   280</span>					useTabs = false
<a id="L281"></a><span class="ln">   281</span>					if b.flags&amp;AlignRight == 0 { <span class="comment">// align left</span>
<a id="L282"></a><span class="ln">   282</span>						b.write0(b.buf.Bytes()[pos : pos+c.size])
<a id="L283"></a><span class="ln">   283</span>						pos += c.size
<a id="L284"></a><span class="ln">   284</span>						if j &lt; len(b.widths) {
<a id="L285"></a><span class="ln">   285</span>							b.writePadding(c.width, b.widths[j], false)
<a id="L286"></a><span class="ln">   286</span>						}
<a id="L287"></a><span class="ln">   287</span>					} else { <span class="comment">// align right</span>
<a id="L288"></a><span class="ln">   288</span>						if j &lt; len(b.widths) {
<a id="L289"></a><span class="ln">   289</span>							b.writePadding(c.width, b.widths[j], false)
<a id="L290"></a><span class="ln">   290</span>						}
<a id="L291"></a><span class="ln">   291</span>						b.write0(b.buf.Bytes()[pos : pos+c.size])
<a id="L292"></a><span class="ln">   292</span>						pos += c.size
<a id="L293"></a><span class="ln">   293</span>					}
<a id="L294"></a><span class="ln">   294</span>				}
<a id="L295"></a><span class="ln">   295</span>			}
<a id="L296"></a><span class="ln">   296</span>	
<a id="L297"></a><span class="ln">   297</span>			if i+1 == len(b.lines) {
<a id="L298"></a><span class="ln">   298</span>				<span class="comment">// last buffered line - we don&#39;t have a newline, so just write</span>
<a id="L299"></a><span class="ln">   299</span>				<span class="comment">// any outstanding buffered data</span>
<a id="L300"></a><span class="ln">   300</span>				b.write0(b.buf.Bytes()[pos : pos+b.cell.size])
<a id="L301"></a><span class="ln">   301</span>				pos += b.cell.size
<a id="L302"></a><span class="ln">   302</span>			} else {
<a id="L303"></a><span class="ln">   303</span>				<span class="comment">// not the last line - write newline</span>
<a id="L304"></a><span class="ln">   304</span>				b.write0(newline)
<a id="L305"></a><span class="ln">   305</span>			}
<a id="L306"></a><span class="ln">   306</span>		}
<a id="L307"></a><span class="ln">   307</span>		return
<a id="L308"></a><span class="ln">   308</span>	}
<a id="L309"></a><span class="ln">   309</span>	
<a id="L310"></a><span class="ln">   310</span>	<span class="comment">// Format the text between line0 and line1 (excluding line1); pos</span>
<a id="L311"></a><span class="ln">   311</span>	<span class="comment">// is the buffer position corresponding to the beginning of line0.</span>
<a id="L312"></a><span class="ln">   312</span>	<span class="comment">// Returns the buffer position corresponding to the beginning of</span>
<a id="L313"></a><span class="ln">   313</span>	<span class="comment">// line1 and an error, if any.</span>
<a id="L314"></a><span class="ln">   314</span>	<span class="comment">//</span>
<a id="L315"></a><span class="ln">   315</span>	func (b *Writer) format(pos0 int, line0, line1 int) (pos int) {
<a id="L316"></a><span class="ln">   316</span>		pos = pos0
<a id="L317"></a><span class="ln">   317</span>		column := len(b.widths)
<a id="L318"></a><span class="ln">   318</span>		for this := line0; this &lt; line1; this++ {
<a id="L319"></a><span class="ln">   319</span>			line := b.lines[this]
<a id="L320"></a><span class="ln">   320</span>	
<a id="L321"></a><span class="ln">   321</span>			if column &lt; len(line)-1 {
<a id="L322"></a><span class="ln">   322</span>				<span class="comment">// cell exists in this column =&gt; this line</span>
<a id="L323"></a><span class="ln">   323</span>				<span class="comment">// has more cells than the previous line</span>
<a id="L324"></a><span class="ln">   324</span>				<span class="comment">// (the last cell per line is ignored because cells are</span>
<a id="L325"></a><span class="ln">   325</span>				<span class="comment">// tab-terminated; the last cell per line describes the</span>
<a id="L326"></a><span class="ln">   326</span>				<span class="comment">// text before the newline/formfeed and does not belong</span>
<a id="L327"></a><span class="ln">   327</span>				<span class="comment">// to a column)</span>
<a id="L328"></a><span class="ln">   328</span>	
<a id="L329"></a><span class="ln">   329</span>				<span class="comment">// print unprinted lines until beginning of block</span>
<a id="L330"></a><span class="ln">   330</span>				pos = b.writeLines(pos, line0, this)
<a id="L331"></a><span class="ln">   331</span>				line0 = this
<a id="L332"></a><span class="ln">   332</span>	
<a id="L333"></a><span class="ln">   333</span>				<span class="comment">// column block begin</span>
<a id="L334"></a><span class="ln">   334</span>				width := b.minwidth <span class="comment">// minimal column width</span>
<a id="L335"></a><span class="ln">   335</span>				discardable := true <span class="comment">// true if all cells in this column are empty and &#34;soft&#34;</span>
<a id="L336"></a><span class="ln">   336</span>				for ; this &lt; line1; this++ {
<a id="L337"></a><span class="ln">   337</span>					line = b.lines[this]
<a id="L338"></a><span class="ln">   338</span>					if column &lt; len(line)-1 {
<a id="L339"></a><span class="ln">   339</span>						<span class="comment">// cell exists in this column</span>
<a id="L340"></a><span class="ln">   340</span>						c := line[column]
<a id="L341"></a><span class="ln">   341</span>						<span class="comment">// update width</span>
<a id="L342"></a><span class="ln">   342</span>						if w := c.width + b.padding; w &gt; width {
<a id="L343"></a><span class="ln">   343</span>							width = w
<a id="L344"></a><span class="ln">   344</span>						}
<a id="L345"></a><span class="ln">   345</span>						<span class="comment">// update discardable</span>
<a id="L346"></a><span class="ln">   346</span>						if c.width &gt; 0 || c.htab {
<a id="L347"></a><span class="ln">   347</span>							discardable = false
<a id="L348"></a><span class="ln">   348</span>						}
<a id="L349"></a><span class="ln">   349</span>					} else {
<a id="L350"></a><span class="ln">   350</span>						break
<a id="L351"></a><span class="ln">   351</span>					}
<a id="L352"></a><span class="ln">   352</span>				}
<a id="L353"></a><span class="ln">   353</span>				<span class="comment">// column block end</span>
<a id="L354"></a><span class="ln">   354</span>	
<a id="L355"></a><span class="ln">   355</span>				<span class="comment">// discard empty columns if necessary</span>
<a id="L356"></a><span class="ln">   356</span>				if discardable &amp;&amp; b.flags&amp;DiscardEmptyColumns != 0 {
<a id="L357"></a><span class="ln">   357</span>					width = 0
<a id="L358"></a><span class="ln">   358</span>				}
<a id="L359"></a><span class="ln">   359</span>	
<a id="L360"></a><span class="ln">   360</span>				<span class="comment">// format and print all columns to the right of this column</span>
<a id="L361"></a><span class="ln">   361</span>				<span class="comment">// (we know the widths of this column and all columns to the left)</span>
<a id="L362"></a><span class="ln">   362</span>				b.widths = append(b.widths, width) <span class="comment">// push width</span>
<a id="L363"></a><span class="ln">   363</span>				pos = b.format(pos, line0, this)
<a id="L364"></a><span class="ln">   364</span>				b.widths = b.widths[0 : len(b.widths)-1] <span class="comment">// pop width</span>
<a id="L365"></a><span class="ln">   365</span>				line0 = this
<a id="L366"></a><span class="ln">   366</span>			}
<a id="L367"></a><span class="ln">   367</span>		}
<a id="L368"></a><span class="ln">   368</span>	
<a id="L369"></a><span class="ln">   369</span>		<span class="comment">// print unprinted lines until end</span>
<a id="L370"></a><span class="ln">   370</span>		return b.writeLines(pos, line0, line1)
<a id="L371"></a><span class="ln">   371</span>	}
<a id="L372"></a><span class="ln">   372</span>	
<a id="L373"></a><span class="ln">   373</span>	<span class="comment">// Append text to current cell.</span>
<a id="L374"></a><span class="ln">   374</span>	func (b *Writer) append(text []byte) {
<a id="L375"></a><span class="ln">   375</span>		b.buf.Write(text)
<a id="L376"></a><span class="ln">   376</span>		b.cell.size += len(text)
<a id="L377"></a><span class="ln">   377</span>	}
<a id="L378"></a><span class="ln">   378</span>	
<a id="L379"></a><span class="ln">   379</span>	<span class="comment">// Update the cell width.</span>
<a id="L380"></a><span class="ln">   380</span>	func (b *Writer) updateWidth() {
<a id="L381"></a><span class="ln">   381</span>		b.cell.width += utf8.RuneCount(b.buf.Bytes()[b.pos:b.buf.Len()])
<a id="L382"></a><span class="ln">   382</span>		b.pos = b.buf.Len()
<a id="L383"></a><span class="ln">   383</span>	}
<a id="L384"></a><span class="ln">   384</span>	
<a id="L385"></a><span class="ln">   385</span>	<span class="comment">// To escape a text segment, bracket it with Escape characters.</span>
<a id="L386"></a><span class="ln">   386</span>	<span class="comment">// For instance, the tab in this string &#34;Ignore this tab: \xff\t\xff&#34;</span>
<a id="L387"></a><span class="ln">   387</span>	<span class="comment">// does not terminate a cell and constitutes a single character of</span>
<a id="L388"></a><span class="ln">   388</span>	<span class="comment">// width one for formatting purposes.</span>
<a id="L389"></a><span class="ln">   389</span>	<span class="comment">//</span>
<a id="L390"></a><span class="ln">   390</span>	<span class="comment">// The value 0xff was chosen because it cannot appear in a valid UTF-8 sequence.</span>
<a id="L391"></a><span class="ln">   391</span>	<span class="comment">//</span>
<a id="L392"></a><span class="ln">   392</span>	const Escape = &#39;\xff&#39;
<a id="L393"></a><span class="ln">   393</span>	
<a id="L394"></a><span class="ln">   394</span>	<span class="comment">// Start escaped mode.</span>
<a id="L395"></a><span class="ln">   395</span>	func (b *Writer) startEscape(ch byte) {
<a id="L396"></a><span class="ln">   396</span>		switch ch {
<a id="L397"></a><span class="ln">   397</span>		case Escape:
<a id="L398"></a><span class="ln">   398</span>			b.endChar = Escape
<a id="L399"></a><span class="ln">   399</span>		case &#39;&lt;&#39;:
<a id="L400"></a><span class="ln">   400</span>			b.endChar = &#39;&gt;&#39;
<a id="L401"></a><span class="ln">   401</span>		case &#39;&amp;&#39;:
<a id="L402"></a><span class="ln">   402</span>			b.endChar = &#39;;&#39;
<a id="L403"></a><span class="ln">   403</span>		}
<a id="L404"></a><span class="ln">   404</span>	}
<a id="L405"></a><span class="ln">   405</span>	
<a id="L406"></a><span class="ln">   406</span>	<span class="comment">// Terminate escaped mode. If the escaped text was an HTML tag, its width</span>
<a id="L407"></a><span class="ln">   407</span>	<span class="comment">// is assumed to be zero for formatting purposes; if it was an HTML entity,</span>
<a id="L408"></a><span class="ln">   408</span>	<span class="comment">// its width is assumed to be one. In all other cases, the width is the</span>
<a id="L409"></a><span class="ln">   409</span>	<span class="comment">// unicode width of the text.</span>
<a id="L410"></a><span class="ln">   410</span>	<span class="comment">//</span>
<a id="L411"></a><span class="ln">   411</span>	func (b *Writer) endEscape() {
<a id="L412"></a><span class="ln">   412</span>		switch b.endChar {
<a id="L413"></a><span class="ln">   413</span>		case Escape:
<a id="L414"></a><span class="ln">   414</span>			b.updateWidth()
<a id="L415"></a><span class="ln">   415</span>			if b.flags&amp;StripEscape == 0 {
<a id="L416"></a><span class="ln">   416</span>				b.cell.width -= 2 <span class="comment">// don&#39;t count the Escape chars</span>
<a id="L417"></a><span class="ln">   417</span>			}
<a id="L418"></a><span class="ln">   418</span>		case &#39;&gt;&#39;: <span class="comment">// tag of zero width</span>
<a id="L419"></a><span class="ln">   419</span>		case &#39;;&#39;:
<a id="L420"></a><span class="ln">   420</span>			b.cell.width++ <span class="comment">// entity, count as one rune</span>
<a id="L421"></a><span class="ln">   421</span>		}
<a id="L422"></a><span class="ln">   422</span>		b.pos = b.buf.Len()
<a id="L423"></a><span class="ln">   423</span>		b.endChar = 0
<a id="L424"></a><span class="ln">   424</span>	}
<a id="L425"></a><span class="ln">   425</span>	
<a id="L426"></a><span class="ln">   426</span>	<span class="comment">// Terminate the current cell by adding it to the list of cells of the</span>
<a id="L427"></a><span class="ln">   427</span>	<span class="comment">// current line. Returns the number of cells in that line.</span>
<a id="L428"></a><span class="ln">   428</span>	<span class="comment">//</span>
<a id="L429"></a><span class="ln">   429</span>	func (b *Writer) terminateCell(htab bool) int {
<a id="L430"></a><span class="ln">   430</span>		b.cell.htab = htab
<a id="L431"></a><span class="ln">   431</span>		line := &amp;b.lines[len(b.lines)-1]
<a id="L432"></a><span class="ln">   432</span>		*line = append(*line, b.cell)
<a id="L433"></a><span class="ln">   433</span>		b.cell = cell{}
<a id="L434"></a><span class="ln">   434</span>		return len(*line)
<a id="L435"></a><span class="ln">   435</span>	}
<a id="L436"></a><span class="ln">   436</span>	
<a id="L437"></a><span class="ln">   437</span>	func handlePanic(err *error) {
<a id="L438"></a><span class="ln">   438</span>		if e := recover(); e != nil {
<a id="L439"></a><span class="ln">   439</span>			*err = e.(osError).err <span class="comment">// re-panics if it&#39;s not a local osError</span>
<a id="L440"></a><span class="ln">   440</span>		}
<a id="L441"></a><span class="ln">   441</span>	}
<a id="L442"></a><span class="ln">   442</span>	
<a id="L443"></a><span class="ln">   443</span>	<span class="comment">// Flush should be called after the last call to Write to ensure</span>
<a id="L444"></a><span class="ln">   444</span>	<span class="comment">// that any data buffered in the Writer is written to output. Any</span>
<a id="L445"></a><span class="ln">   445</span>	<span class="comment">// incomplete escape sequence at the end is considered</span>
<a id="L446"></a><span class="ln">   446</span>	<span class="comment">// complete for formatting purposes.</span>
<a id="L447"></a><span class="ln">   447</span>	<span class="comment">//</span>
<a id="L448"></a><span class="ln">   448</span>	func (b *Writer) Flush() (err error) {
<a id="L449"></a><span class="ln">   449</span>		defer b.reset() <span class="comment">// even in the presence of errors</span>
<a id="L450"></a><span class="ln">   450</span>		defer handlePanic(&amp;err)
<a id="L451"></a><span class="ln">   451</span>	
<a id="L452"></a><span class="ln">   452</span>		<span class="comment">// add current cell if not empty</span>
<a id="L453"></a><span class="ln">   453</span>		if b.cell.size &gt; 0 {
<a id="L454"></a><span class="ln">   454</span>			if b.endChar != 0 {
<a id="L455"></a><span class="ln">   455</span>				<span class="comment">// inside escape - terminate it even if incomplete</span>
<a id="L456"></a><span class="ln">   456</span>				b.endEscape()
<a id="L457"></a><span class="ln">   457</span>			}
<a id="L458"></a><span class="ln">   458</span>			b.terminateCell(false)
<a id="L459"></a><span class="ln">   459</span>		}
<a id="L460"></a><span class="ln">   460</span>	
<a id="L461"></a><span class="ln">   461</span>		<span class="comment">// format contents of buffer</span>
<a id="L462"></a><span class="ln">   462</span>		b.format(0, 0, len(b.lines))
<a id="L463"></a><span class="ln">   463</span>	
<a id="L464"></a><span class="ln">   464</span>		return
<a id="L465"></a><span class="ln">   465</span>	}
<a id="L466"></a><span class="ln">   466</span>	
<a id="L467"></a><span class="ln">   467</span>	var hbar = []byte(&#34;---\n&#34;)
<a id="L468"></a><span class="ln">   468</span>	
<a id="L469"></a><span class="ln">   469</span>	<span class="comment">// Write writes buf to the writer b.</span>
<a id="L470"></a><span class="ln">   470</span>	<span class="comment">// The only errors returned are ones encountered</span>
<a id="L471"></a><span class="ln">   471</span>	<span class="comment">// while writing to the underlying output stream.</span>
<a id="L472"></a><span class="ln">   472</span>	<span class="comment">//</span>
<a id="L473"></a><span class="ln">   473</span>	func (b *Writer) Write(buf []byte) (n int, err error) {
<a id="L474"></a><span class="ln">   474</span>		defer handlePanic(&amp;err)
<a id="L475"></a><span class="ln">   475</span>	
<a id="L476"></a><span class="ln">   476</span>		<span class="comment">// split text into cells</span>
<a id="L477"></a><span class="ln">   477</span>		n = 0
<a id="L478"></a><span class="ln">   478</span>		for i, ch := range buf {
<a id="L479"></a><span class="ln">   479</span>			if b.endChar == 0 {
<a id="L480"></a><span class="ln">   480</span>				<span class="comment">// outside escape</span>
<a id="L481"></a><span class="ln">   481</span>				switch ch {
<a id="L482"></a><span class="ln">   482</span>				case &#39;\t&#39;, &#39;\v&#39;, &#39;\n&#39;, &#39;\f&#39;:
<a id="L483"></a><span class="ln">   483</span>					<span class="comment">// end of cell</span>
<a id="L484"></a><span class="ln">   484</span>					b.append(buf[n:i])
<a id="L485"></a><span class="ln">   485</span>					b.updateWidth()
<a id="L486"></a><span class="ln">   486</span>					n = i + 1 <span class="comment">// ch consumed</span>
<a id="L487"></a><span class="ln">   487</span>					ncells := b.terminateCell(ch == &#39;\t&#39;)
<a id="L488"></a><span class="ln">   488</span>					if ch == &#39;\n&#39; || ch == &#39;\f&#39; {
<a id="L489"></a><span class="ln">   489</span>						<span class="comment">// terminate line</span>
<a id="L490"></a><span class="ln">   490</span>						b.addLine()
<a id="L491"></a><span class="ln">   491</span>						if ch == &#39;\f&#39; || ncells == 1 {
<a id="L492"></a><span class="ln">   492</span>							<span class="comment">// A &#39;\f&#39; always forces a flush. Otherwise, if the previous</span>
<a id="L493"></a><span class="ln">   493</span>							<span class="comment">// line has only one cell which does not have an impact on</span>
<a id="L494"></a><span class="ln">   494</span>							<span class="comment">// the formatting of the following lines (the last cell per</span>
<a id="L495"></a><span class="ln">   495</span>							<span class="comment">// line is ignored by format()), thus we can flush the</span>
<a id="L496"></a><span class="ln">   496</span>							<span class="comment">// Writer contents.</span>
<a id="L497"></a><span class="ln">   497</span>							if err = b.Flush(); err != nil {
<a id="L498"></a><span class="ln">   498</span>								return
<a id="L499"></a><span class="ln">   499</span>							}
<a id="L500"></a><span class="ln">   500</span>							if ch == &#39;\f&#39; &amp;&amp; b.flags&amp;Debug != 0 {
<a id="L501"></a><span class="ln">   501</span>								<span class="comment">// indicate section break</span>
<a id="L502"></a><span class="ln">   502</span>								b.write0(hbar)
<a id="L503"></a><span class="ln">   503</span>							}
<a id="L504"></a><span class="ln">   504</span>						}
<a id="L505"></a><span class="ln">   505</span>					}
<a id="L506"></a><span class="ln">   506</span>	
<a id="L507"></a><span class="ln">   507</span>				case Escape:
<a id="L508"></a><span class="ln">   508</span>					<span class="comment">// start of escaped sequence</span>
<a id="L509"></a><span class="ln">   509</span>					b.append(buf[n:i])
<a id="L510"></a><span class="ln">   510</span>					b.updateWidth()
<a id="L511"></a><span class="ln">   511</span>					n = i
<a id="L512"></a><span class="ln">   512</span>					if b.flags&amp;StripEscape != 0 {
<a id="L513"></a><span class="ln">   513</span>						n++ <span class="comment">// strip Escape</span>
<a id="L514"></a><span class="ln">   514</span>					}
<a id="L515"></a><span class="ln">   515</span>					b.startEscape(Escape)
<a id="L516"></a><span class="ln">   516</span>	
<a id="L517"></a><span class="ln">   517</span>				case &#39;&lt;&#39;, &#39;&amp;&#39;:
<a id="L518"></a><span class="ln">   518</span>					<span class="comment">// possibly an html tag/entity</span>
<a id="L519"></a><span class="ln">   519</span>					if b.flags&amp;FilterHTML != 0 {
<a id="L520"></a><span class="ln">   520</span>						<span class="comment">// begin of tag/entity</span>
<a id="L521"></a><span class="ln">   521</span>						b.append(buf[n:i])
<a id="L522"></a><span class="ln">   522</span>						b.updateWidth()
<a id="L523"></a><span class="ln">   523</span>						n = i
<a id="L524"></a><span class="ln">   524</span>						b.startEscape(ch)
<a id="L525"></a><span class="ln">   525</span>					}
<a id="L526"></a><span class="ln">   526</span>				}
<a id="L527"></a><span class="ln">   527</span>	
<a id="L528"></a><span class="ln">   528</span>			} else {
<a id="L529"></a><span class="ln">   529</span>				<span class="comment">// inside escape</span>
<a id="L530"></a><span class="ln">   530</span>				if ch == b.endChar {
<a id="L531"></a><span class="ln">   531</span>					<span class="comment">// end of tag/entity</span>
<a id="L532"></a><span class="ln">   532</span>					j := i + 1
<a id="L533"></a><span class="ln">   533</span>					if ch == Escape &amp;&amp; b.flags&amp;StripEscape != 0 {
<a id="L534"></a><span class="ln">   534</span>						j = i <span class="comment">// strip Escape</span>
<a id="L535"></a><span class="ln">   535</span>					}
<a id="L536"></a><span class="ln">   536</span>					b.append(buf[n:j])
<a id="L537"></a><span class="ln">   537</span>					n = i + 1 <span class="comment">// ch consumed</span>
<a id="L538"></a><span class="ln">   538</span>					b.endEscape()
<a id="L539"></a><span class="ln">   539</span>				}
<a id="L540"></a><span class="ln">   540</span>			}
<a id="L541"></a><span class="ln">   541</span>		}
<a id="L542"></a><span class="ln">   542</span>	
<a id="L543"></a><span class="ln">   543</span>		<span class="comment">// append leftover text</span>
<a id="L544"></a><span class="ln">   544</span>		b.append(buf[n:])
<a id="L545"></a><span class="ln">   545</span>		n = len(buf)
<a id="L546"></a><span class="ln">   546</span>		return
<a id="L547"></a><span class="ln">   547</span>	}
<a id="L548"></a><span class="ln">   548</span>	
<a id="L549"></a><span class="ln">   549</span>	<span class="comment">// NewWriter allocates and initializes a new tabwriter.Writer.</span>
<a id="L550"></a><span class="ln">   550</span>	<span class="comment">// The parameters are the same as for the the Init function.</span>
<a id="L551"></a><span class="ln">   551</span>	<span class="comment">//</span>
<a id="L552"></a><span class="ln">   552</span>	func NewWriter(output io.Writer, minwidth, tabwidth, padding int, padchar byte, flags uint) *Writer {
<a id="L553"></a><span class="ln">   553</span>		return new(Writer).Init(output, minwidth, tabwidth, padding, padchar, flags)
<a id="L554"></a><span class="ln">   554</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

