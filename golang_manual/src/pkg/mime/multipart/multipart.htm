<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/mime/multipart/multipart.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/mime/multipart/multipart.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	<span class="comment">//</span>
<a id="L5"></a><span class="ln">     5</span>	
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">/*
</span><a id="L7"></a><span class="ln">     7</span>	<span class="comment">Package multipart implements MIME multipart parsing, as defined in RFC
</span><a id="L8"></a><span class="ln">     8</span>	<span class="comment">2046.
</span><a id="L9"></a><span class="ln">     9</span>	<span class="comment">
</span><a id="L10"></a><span class="ln">    10</span>	<span class="comment">The implementation is sufficient for HTTP (RFC 2388) and the multipart
</span><a id="L11"></a><span class="ln">    11</span>	<span class="comment">bodies generated by popular browsers.
</span><a id="L12"></a><span class="ln">    12</span>	<span class="comment">*/</span>
<a id="L13"></a><span class="ln">    13</span>	package multipart
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	import (
<a id="L16"></a><span class="ln">    16</span>		&#34;bufio&#34;
<a id="L17"></a><span class="ln">    17</span>		&#34;bytes&#34;
<a id="L18"></a><span class="ln">    18</span>		&#34;fmt&#34;
<a id="L19"></a><span class="ln">    19</span>		&#34;io&#34;
<a id="L20"></a><span class="ln">    20</span>		&#34;io/ioutil&#34;
<a id="L21"></a><span class="ln">    21</span>		&#34;mime&#34;
<a id="L22"></a><span class="ln">    22</span>		&#34;net/textproto&#34;
<a id="L23"></a><span class="ln">    23</span>	)
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// TODO(bradfitz): inline these once the compiler can inline them in</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// read-only situation (such as bytes.HasSuffix)</span>
<a id="L27"></a><span class="ln">    27</span>	var lf = []byte(&#34;\n&#34;)
<a id="L28"></a><span class="ln">    28</span>	var crlf = []byte(&#34;\r\n&#34;)
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>	var emptyParams = make(map[string]string)
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// A Part represents a single part in a multipart body.</span>
<a id="L33"></a><span class="ln">    33</span>	type Part struct {
<a id="L34"></a><span class="ln">    34</span>		<span class="comment">// The headers of the body, if any, with the keys canonicalized</span>
<a id="L35"></a><span class="ln">    35</span>		<span class="comment">// in the same fashion that the Go http.Request headers are.</span>
<a id="L36"></a><span class="ln">    36</span>		<span class="comment">// i.e. &#34;foo-bar&#34; changes case to &#34;Foo-Bar&#34;</span>
<a id="L37"></a><span class="ln">    37</span>		Header textproto.MIMEHeader
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>		buffer *bytes.Buffer
<a id="L40"></a><span class="ln">    40</span>		mr     *Reader
<a id="L41"></a><span class="ln">    41</span>	
<a id="L42"></a><span class="ln">    42</span>		disposition       string
<a id="L43"></a><span class="ln">    43</span>		dispositionParams map[string]string
<a id="L44"></a><span class="ln">    44</span>	}
<a id="L45"></a><span class="ln">    45</span>	
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">// FormName returns the name parameter if p has a Content-Disposition</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">// of type &#34;form-data&#34;.  Otherwise it returns the empty string.</span>
<a id="L48"></a><span class="ln">    48</span>	func (p *Part) FormName() string {
<a id="L49"></a><span class="ln">    49</span>		<span class="comment">// See http://tools.ietf.org/html/rfc2183 section 2 for EBNF</span>
<a id="L50"></a><span class="ln">    50</span>		<span class="comment">// of Content-Disposition value format.</span>
<a id="L51"></a><span class="ln">    51</span>		if p.dispositionParams == nil {
<a id="L52"></a><span class="ln">    52</span>			p.parseContentDisposition()
<a id="L53"></a><span class="ln">    53</span>		}
<a id="L54"></a><span class="ln">    54</span>		if p.disposition != &#34;form-data&#34; {
<a id="L55"></a><span class="ln">    55</span>			return &#34;&#34;
<a id="L56"></a><span class="ln">    56</span>		}
<a id="L57"></a><span class="ln">    57</span>		return p.dispositionParams[&#34;name&#34;]
<a id="L58"></a><span class="ln">    58</span>	}
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// FileName returns the filename parameter of the Part&#39;s</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">// Content-Disposition header.</span>
<a id="L62"></a><span class="ln">    62</span>	func (p *Part) FileName() string {
<a id="L63"></a><span class="ln">    63</span>		if p.dispositionParams == nil {
<a id="L64"></a><span class="ln">    64</span>			p.parseContentDisposition()
<a id="L65"></a><span class="ln">    65</span>		}
<a id="L66"></a><span class="ln">    66</span>		return p.dispositionParams[&#34;filename&#34;]
<a id="L67"></a><span class="ln">    67</span>	}
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>	func (p *Part) parseContentDisposition() {
<a id="L70"></a><span class="ln">    70</span>		v := p.Header.Get(&#34;Content-Disposition&#34;)
<a id="L71"></a><span class="ln">    71</span>		var err error
<a id="L72"></a><span class="ln">    72</span>		p.disposition, p.dispositionParams, err = mime.ParseMediaType(v)
<a id="L73"></a><span class="ln">    73</span>		if err != nil {
<a id="L74"></a><span class="ln">    74</span>			p.dispositionParams = emptyParams
<a id="L75"></a><span class="ln">    75</span>		}
<a id="L76"></a><span class="ln">    76</span>	}
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// NewReader creates a new multipart Reader reading from r using the</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// given MIME boundary.</span>
<a id="L80"></a><span class="ln">    80</span>	func NewReader(reader io.Reader, boundary string) *Reader {
<a id="L81"></a><span class="ln">    81</span>		b := []byte(&#34;\r\n--&#34; + boundary + &#34;--&#34;)
<a id="L82"></a><span class="ln">    82</span>		return &amp;Reader{
<a id="L83"></a><span class="ln">    83</span>			bufReader: bufio.NewReader(reader),
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>			nl:               b[:2],
<a id="L86"></a><span class="ln">    86</span>			nlDashBoundary:   b[:len(b)-2],
<a id="L87"></a><span class="ln">    87</span>			dashBoundaryDash: b[2:],
<a id="L88"></a><span class="ln">    88</span>			dashBoundary:     b[2 : len(b)-2],
<a id="L89"></a><span class="ln">    89</span>		}
<a id="L90"></a><span class="ln">    90</span>	}
<a id="L91"></a><span class="ln">    91</span>	
<a id="L92"></a><span class="ln">    92</span>	func newPart(mr *Reader) (*Part, error) {
<a id="L93"></a><span class="ln">    93</span>		bp := &amp;Part{
<a id="L94"></a><span class="ln">    94</span>			Header: make(map[string][]string),
<a id="L95"></a><span class="ln">    95</span>			mr:     mr,
<a id="L96"></a><span class="ln">    96</span>			buffer: new(bytes.Buffer),
<a id="L97"></a><span class="ln">    97</span>		}
<a id="L98"></a><span class="ln">    98</span>		if err := bp.populateHeaders(); err != nil {
<a id="L99"></a><span class="ln">    99</span>			return nil, err
<a id="L100"></a><span class="ln">   100</span>		}
<a id="L101"></a><span class="ln">   101</span>		return bp, nil
<a id="L102"></a><span class="ln">   102</span>	}
<a id="L103"></a><span class="ln">   103</span>	
<a id="L104"></a><span class="ln">   104</span>	func (bp *Part) populateHeaders() error {
<a id="L105"></a><span class="ln">   105</span>		r := textproto.NewReader(bp.mr.bufReader)
<a id="L106"></a><span class="ln">   106</span>		header, err := r.ReadMIMEHeader()
<a id="L107"></a><span class="ln">   107</span>		if err == nil {
<a id="L108"></a><span class="ln">   108</span>			bp.Header = header
<a id="L109"></a><span class="ln">   109</span>		}
<a id="L110"></a><span class="ln">   110</span>		return err
<a id="L111"></a><span class="ln">   111</span>	}
<a id="L112"></a><span class="ln">   112</span>	
<a id="L113"></a><span class="ln">   113</span>	<span class="comment">// Read reads the body of a part, after its headers and before the</span>
<a id="L114"></a><span class="ln">   114</span>	<span class="comment">// next part (if any) begins.</span>
<a id="L115"></a><span class="ln">   115</span>	func (p *Part) Read(d []byte) (n int, err error) {
<a id="L116"></a><span class="ln">   116</span>		if p.buffer.Len() &gt;= len(d) {
<a id="L117"></a><span class="ln">   117</span>			<span class="comment">// Internal buffer of unconsumed data is large enough for</span>
<a id="L118"></a><span class="ln">   118</span>			<span class="comment">// the read request.  No need to parse more at the moment.</span>
<a id="L119"></a><span class="ln">   119</span>			return p.buffer.Read(d)
<a id="L120"></a><span class="ln">   120</span>		}
<a id="L121"></a><span class="ln">   121</span>		peek, err := p.mr.bufReader.Peek(4096) <span class="comment">// TODO(bradfitz): add buffer size accessor</span>
<a id="L122"></a><span class="ln">   122</span>		unexpectedEof := err == io.EOF
<a id="L123"></a><span class="ln">   123</span>		if err != nil &amp;&amp; !unexpectedEof {
<a id="L124"></a><span class="ln">   124</span>			return 0, fmt.Errorf(&#34;multipart: Part Read: %v&#34;, err)
<a id="L125"></a><span class="ln">   125</span>		}
<a id="L126"></a><span class="ln">   126</span>		if peek == nil {
<a id="L127"></a><span class="ln">   127</span>			panic(&#34;nil peek buf&#34;)
<a id="L128"></a><span class="ln">   128</span>		}
<a id="L129"></a><span class="ln">   129</span>	
<a id="L130"></a><span class="ln">   130</span>		<span class="comment">// Search the peek buffer for &#34;\r\n--boundary&#34;. If found,</span>
<a id="L131"></a><span class="ln">   131</span>		<span class="comment">// consume everything up to the boundary. If not, consume only</span>
<a id="L132"></a><span class="ln">   132</span>		<span class="comment">// as much of the peek buffer as cannot hold the boundary</span>
<a id="L133"></a><span class="ln">   133</span>		<span class="comment">// string.</span>
<a id="L134"></a><span class="ln">   134</span>		nCopy := 0
<a id="L135"></a><span class="ln">   135</span>		foundBoundary := false
<a id="L136"></a><span class="ln">   136</span>		if idx := bytes.Index(peek, p.mr.nlDashBoundary); idx != -1 {
<a id="L137"></a><span class="ln">   137</span>			nCopy = idx
<a id="L138"></a><span class="ln">   138</span>			foundBoundary = true
<a id="L139"></a><span class="ln">   139</span>		} else if safeCount := len(peek) - len(p.mr.nlDashBoundary); safeCount &gt; 0 {
<a id="L140"></a><span class="ln">   140</span>			nCopy = safeCount
<a id="L141"></a><span class="ln">   141</span>		} else if unexpectedEof {
<a id="L142"></a><span class="ln">   142</span>			<span class="comment">// If we&#39;ve run out of peek buffer and the boundary</span>
<a id="L143"></a><span class="ln">   143</span>			<span class="comment">// wasn&#39;t found (and can&#39;t possibly fit), we must have</span>
<a id="L144"></a><span class="ln">   144</span>			<span class="comment">// hit the end of the file unexpectedly.</span>
<a id="L145"></a><span class="ln">   145</span>			return 0, io.ErrUnexpectedEOF
<a id="L146"></a><span class="ln">   146</span>		}
<a id="L147"></a><span class="ln">   147</span>		if nCopy &gt; 0 {
<a id="L148"></a><span class="ln">   148</span>			if _, err := io.CopyN(p.buffer, p.mr.bufReader, int64(nCopy)); err != nil {
<a id="L149"></a><span class="ln">   149</span>				return 0, err
<a id="L150"></a><span class="ln">   150</span>			}
<a id="L151"></a><span class="ln">   151</span>		}
<a id="L152"></a><span class="ln">   152</span>		n, err = p.buffer.Read(d)
<a id="L153"></a><span class="ln">   153</span>		if err == io.EOF &amp;&amp; !foundBoundary {
<a id="L154"></a><span class="ln">   154</span>			<span class="comment">// If the boundary hasn&#39;t been reached there&#39;s more to</span>
<a id="L155"></a><span class="ln">   155</span>			<span class="comment">// read, so don&#39;t pass through an EOF from the buffer</span>
<a id="L156"></a><span class="ln">   156</span>			err = nil
<a id="L157"></a><span class="ln">   157</span>		}
<a id="L158"></a><span class="ln">   158</span>		return
<a id="L159"></a><span class="ln">   159</span>	}
<a id="L160"></a><span class="ln">   160</span>	
<a id="L161"></a><span class="ln">   161</span>	func (p *Part) Close() error {
<a id="L162"></a><span class="ln">   162</span>		io.Copy(ioutil.Discard, p)
<a id="L163"></a><span class="ln">   163</span>		return nil
<a id="L164"></a><span class="ln">   164</span>	}
<a id="L165"></a><span class="ln">   165</span>	
<a id="L166"></a><span class="ln">   166</span>	<span class="comment">// Reader is an iterator over parts in a MIME multipart body.</span>
<a id="L167"></a><span class="ln">   167</span>	<span class="comment">// Reader&#39;s underlying parser consumes its input as needed.  Seeking</span>
<a id="L168"></a><span class="ln">   168</span>	<span class="comment">// isn&#39;t supported.</span>
<a id="L169"></a><span class="ln">   169</span>	type Reader struct {
<a id="L170"></a><span class="ln">   170</span>		bufReader *bufio.Reader
<a id="L171"></a><span class="ln">   171</span>	
<a id="L172"></a><span class="ln">   172</span>		currentPart *Part
<a id="L173"></a><span class="ln">   173</span>		partsRead   int
<a id="L174"></a><span class="ln">   174</span>	
<a id="L175"></a><span class="ln">   175</span>		nl, nlDashBoundary, dashBoundaryDash, dashBoundary []byte
<a id="L176"></a><span class="ln">   176</span>	}
<a id="L177"></a><span class="ln">   177</span>	
<a id="L178"></a><span class="ln">   178</span>	<span class="comment">// NextPart returns the next part in the multipart or an error.</span>
<a id="L179"></a><span class="ln">   179</span>	<span class="comment">// When there are no more parts, the error io.EOF is returned.</span>
<a id="L180"></a><span class="ln">   180</span>	func (r *Reader) NextPart() (*Part, error) {
<a id="L181"></a><span class="ln">   181</span>		if r.currentPart != nil {
<a id="L182"></a><span class="ln">   182</span>			r.currentPart.Close()
<a id="L183"></a><span class="ln">   183</span>		}
<a id="L184"></a><span class="ln">   184</span>	
<a id="L185"></a><span class="ln">   185</span>		expectNewPart := false
<a id="L186"></a><span class="ln">   186</span>		for {
<a id="L187"></a><span class="ln">   187</span>			line, err := r.bufReader.ReadSlice(&#39;\n&#39;)
<a id="L188"></a><span class="ln">   188</span>			if err == io.EOF &amp;&amp; bytes.Equal(line, r.dashBoundaryDash) {
<a id="L189"></a><span class="ln">   189</span>				<span class="comment">// If the buffer ends in &#34;--boundary--&#34; without the</span>
<a id="L190"></a><span class="ln">   190</span>				<span class="comment">// trailing &#34;\r\n&#34;, ReadSlice will return an error</span>
<a id="L191"></a><span class="ln">   191</span>				<span class="comment">// (since it&#39;s missing the &#39;\n&#39;), but this is a valid</span>
<a id="L192"></a><span class="ln">   192</span>				<span class="comment">// multipart EOF so we need to return io.EOF instead of</span>
<a id="L193"></a><span class="ln">   193</span>				<span class="comment">// a fmt-wrapped one.</span>
<a id="L194"></a><span class="ln">   194</span>				return nil, io.EOF
<a id="L195"></a><span class="ln">   195</span>			}
<a id="L196"></a><span class="ln">   196</span>			if err != nil {
<a id="L197"></a><span class="ln">   197</span>				return nil, fmt.Errorf(&#34;multipart: NextPart: %v&#34;, err)
<a id="L198"></a><span class="ln">   198</span>			}
<a id="L199"></a><span class="ln">   199</span>	
<a id="L200"></a><span class="ln">   200</span>			if r.isBoundaryDelimiterLine(line) {
<a id="L201"></a><span class="ln">   201</span>				r.partsRead++
<a id="L202"></a><span class="ln">   202</span>				bp, err := newPart(r)
<a id="L203"></a><span class="ln">   203</span>				if err != nil {
<a id="L204"></a><span class="ln">   204</span>					return nil, err
<a id="L205"></a><span class="ln">   205</span>				}
<a id="L206"></a><span class="ln">   206</span>				r.currentPart = bp
<a id="L207"></a><span class="ln">   207</span>				return bp, nil
<a id="L208"></a><span class="ln">   208</span>			}
<a id="L209"></a><span class="ln">   209</span>	
<a id="L210"></a><span class="ln">   210</span>			if hasPrefixThenNewline(line, r.dashBoundaryDash) {
<a id="L211"></a><span class="ln">   211</span>				<span class="comment">// Expected EOF</span>
<a id="L212"></a><span class="ln">   212</span>				return nil, io.EOF
<a id="L213"></a><span class="ln">   213</span>			}
<a id="L214"></a><span class="ln">   214</span>	
<a id="L215"></a><span class="ln">   215</span>			if expectNewPart {
<a id="L216"></a><span class="ln">   216</span>				return nil, fmt.Errorf(&#34;multipart: expecting a new Part; got line %q&#34;, string(line))
<a id="L217"></a><span class="ln">   217</span>			}
<a id="L218"></a><span class="ln">   218</span>	
<a id="L219"></a><span class="ln">   219</span>			if r.partsRead == 0 {
<a id="L220"></a><span class="ln">   220</span>				<span class="comment">// skip line</span>
<a id="L221"></a><span class="ln">   221</span>				continue
<a id="L222"></a><span class="ln">   222</span>			}
<a id="L223"></a><span class="ln">   223</span>	
<a id="L224"></a><span class="ln">   224</span>			<span class="comment">// Consume the &#34;\n&#34; or &#34;\r\n&#34; separator between the</span>
<a id="L225"></a><span class="ln">   225</span>			<span class="comment">// body of the previous part and the boundary line we</span>
<a id="L226"></a><span class="ln">   226</span>			<span class="comment">// now expect will follow. (either a new part or the</span>
<a id="L227"></a><span class="ln">   227</span>			<span class="comment">// end boundary)</span>
<a id="L228"></a><span class="ln">   228</span>			if bytes.Equal(line, r.nl) {
<a id="L229"></a><span class="ln">   229</span>				expectNewPart = true
<a id="L230"></a><span class="ln">   230</span>				continue
<a id="L231"></a><span class="ln">   231</span>			}
<a id="L232"></a><span class="ln">   232</span>	
<a id="L233"></a><span class="ln">   233</span>			return nil, fmt.Errorf(&#34;multipart: unexpected line in Next(): %q&#34;, line)
<a id="L234"></a><span class="ln">   234</span>		}
<a id="L235"></a><span class="ln">   235</span>		panic(&#34;unreachable&#34;)
<a id="L236"></a><span class="ln">   236</span>	}
<a id="L237"></a><span class="ln">   237</span>	
<a id="L238"></a><span class="ln">   238</span>	func (mr *Reader) isBoundaryDelimiterLine(line []byte) bool {
<a id="L239"></a><span class="ln">   239</span>		<span class="comment">// http://tools.ietf.org/html/rfc2046#section-5.1</span>
<a id="L240"></a><span class="ln">   240</span>		<span class="comment">//   The boundary delimiter line is then defined as a line</span>
<a id="L241"></a><span class="ln">   241</span>		<span class="comment">//   consisting entirely of two hyphen characters (&#34;-&#34;,</span>
<a id="L242"></a><span class="ln">   242</span>		<span class="comment">//   decimal value 45) followed by the boundary parameter</span>
<a id="L243"></a><span class="ln">   243</span>		<span class="comment">//   value from the Content-Type header field, optional linear</span>
<a id="L244"></a><span class="ln">   244</span>		<span class="comment">//   whitespace, and a terminating CRLF.</span>
<a id="L245"></a><span class="ln">   245</span>		if !bytes.HasPrefix(line, mr.dashBoundary) {
<a id="L246"></a><span class="ln">   246</span>			return false
<a id="L247"></a><span class="ln">   247</span>		}
<a id="L248"></a><span class="ln">   248</span>		if bytes.HasSuffix(line, mr.nl) {
<a id="L249"></a><span class="ln">   249</span>			return onlyHorizontalWhitespace(line[len(mr.dashBoundary) : len(line)-len(mr.nl)])
<a id="L250"></a><span class="ln">   250</span>		}
<a id="L251"></a><span class="ln">   251</span>		<span class="comment">// Violate the spec and also support newlines without the</span>
<a id="L252"></a><span class="ln">   252</span>		<span class="comment">// carriage return...</span>
<a id="L253"></a><span class="ln">   253</span>		if mr.partsRead == 0 &amp;&amp; bytes.HasSuffix(line, lf) {
<a id="L254"></a><span class="ln">   254</span>			if onlyHorizontalWhitespace(line[len(mr.dashBoundary) : len(line)-1]) {
<a id="L255"></a><span class="ln">   255</span>				mr.nl = mr.nl[1:]
<a id="L256"></a><span class="ln">   256</span>				mr.nlDashBoundary = mr.nlDashBoundary[1:]
<a id="L257"></a><span class="ln">   257</span>				return true
<a id="L258"></a><span class="ln">   258</span>			}
<a id="L259"></a><span class="ln">   259</span>		}
<a id="L260"></a><span class="ln">   260</span>		return false
<a id="L261"></a><span class="ln">   261</span>	}
<a id="L262"></a><span class="ln">   262</span>	
<a id="L263"></a><span class="ln">   263</span>	func onlyHorizontalWhitespace(s []byte) bool {
<a id="L264"></a><span class="ln">   264</span>		for _, b := range s {
<a id="L265"></a><span class="ln">   265</span>			if b != &#39; &#39; &amp;&amp; b != &#39;\t&#39; {
<a id="L266"></a><span class="ln">   266</span>				return false
<a id="L267"></a><span class="ln">   267</span>			}
<a id="L268"></a><span class="ln">   268</span>		}
<a id="L269"></a><span class="ln">   269</span>		return true
<a id="L270"></a><span class="ln">   270</span>	}
<a id="L271"></a><span class="ln">   271</span>	
<a id="L272"></a><span class="ln">   272</span>	func hasPrefixThenNewline(s, prefix []byte) bool {
<a id="L273"></a><span class="ln">   273</span>		return bytes.HasPrefix(s, prefix) &amp;&amp;
<a id="L274"></a><span class="ln">   274</span>			(len(s) == len(prefix)+1 &amp;&amp; s[len(s)-1] == &#39;\n&#39; ||
<a id="L275"></a><span class="ln">   275</span>				len(s) == len(prefix)+2 &amp;&amp; bytes.HasSuffix(s, crlf))
<a id="L276"></a><span class="ln">   276</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

