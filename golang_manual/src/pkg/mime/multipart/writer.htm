<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/mime/multipart/writer.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/mime/multipart/writer.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package multipart
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bytes&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;crypto/rand&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;errors&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;fmt&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;io&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;net/textproto&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;strings&#34;
<a id="L15"></a><span class="ln">    15</span>	)
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// A Writer generates multipart messages.</span>
<a id="L18"></a><span class="ln">    18</span>	type Writer struct {
<a id="L19"></a><span class="ln">    19</span>		w        io.Writer
<a id="L20"></a><span class="ln">    20</span>		boundary string
<a id="L21"></a><span class="ln">    21</span>		lastpart *part
<a id="L22"></a><span class="ln">    22</span>	}
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// NewWriter returns a new multipart Writer with a random boundary,</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// writing to w.</span>
<a id="L26"></a><span class="ln">    26</span>	func NewWriter(w io.Writer) *Writer {
<a id="L27"></a><span class="ln">    27</span>		return &amp;Writer{
<a id="L28"></a><span class="ln">    28</span>			w:        w,
<a id="L29"></a><span class="ln">    29</span>			boundary: randomBoundary(),
<a id="L30"></a><span class="ln">    30</span>		}
<a id="L31"></a><span class="ln">    31</span>	}
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// Boundary returns the Writer&#39;s randomly selected boundary string.</span>
<a id="L34"></a><span class="ln">    34</span>	func (w *Writer) Boundary() string {
<a id="L35"></a><span class="ln">    35</span>		return w.boundary
<a id="L36"></a><span class="ln">    36</span>	}
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// FormDataContentType returns the Content-Type for an HTTP</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// multipart/form-data with this Writer&#39;s Boundary.</span>
<a id="L40"></a><span class="ln">    40</span>	func (w *Writer) FormDataContentType() string {
<a id="L41"></a><span class="ln">    41</span>		return &#34;multipart/form-data; boundary=&#34; + w.boundary
<a id="L42"></a><span class="ln">    42</span>	}
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	func randomBoundary() string {
<a id="L45"></a><span class="ln">    45</span>		var buf [30]byte
<a id="L46"></a><span class="ln">    46</span>		_, err := io.ReadFull(rand.Reader, buf[:])
<a id="L47"></a><span class="ln">    47</span>		if err != nil {
<a id="L48"></a><span class="ln">    48</span>			panic(err)
<a id="L49"></a><span class="ln">    49</span>		}
<a id="L50"></a><span class="ln">    50</span>		return fmt.Sprintf(&#34;%x&#34;, buf[:])
<a id="L51"></a><span class="ln">    51</span>	}
<a id="L52"></a><span class="ln">    52</span>	
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">// CreatePart creates a new multipart section with the provided</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">// header. The body of the part should be written to the returned</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// Writer. After calling CreatePart, any previous part may no longer</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// be written to.</span>
<a id="L57"></a><span class="ln">    57</span>	func (w *Writer) CreatePart(header textproto.MIMEHeader) (io.Writer, error) {
<a id="L58"></a><span class="ln">    58</span>		if w.lastpart != nil {
<a id="L59"></a><span class="ln">    59</span>			if err := w.lastpart.close(); err != nil {
<a id="L60"></a><span class="ln">    60</span>				return nil, err
<a id="L61"></a><span class="ln">    61</span>			}
<a id="L62"></a><span class="ln">    62</span>		}
<a id="L63"></a><span class="ln">    63</span>		var b bytes.Buffer
<a id="L64"></a><span class="ln">    64</span>		if w.lastpart != nil {
<a id="L65"></a><span class="ln">    65</span>			fmt.Fprintf(&amp;b, &#34;\r\n--%s\r\n&#34;, w.boundary)
<a id="L66"></a><span class="ln">    66</span>		} else {
<a id="L67"></a><span class="ln">    67</span>			fmt.Fprintf(&amp;b, &#34;--%s\r\n&#34;, w.boundary)
<a id="L68"></a><span class="ln">    68</span>		}
<a id="L69"></a><span class="ln">    69</span>		<span class="comment">// TODO(bradfitz): move this to textproto.MimeHeader.Write(w), have it sort</span>
<a id="L70"></a><span class="ln">    70</span>		<span class="comment">// and clean, like http.Header.Write(w) does.</span>
<a id="L71"></a><span class="ln">    71</span>		for k, vv := range header {
<a id="L72"></a><span class="ln">    72</span>			for _, v := range vv {
<a id="L73"></a><span class="ln">    73</span>				fmt.Fprintf(&amp;b, &#34;%s: %s\r\n&#34;, k, v)
<a id="L74"></a><span class="ln">    74</span>			}
<a id="L75"></a><span class="ln">    75</span>		}
<a id="L76"></a><span class="ln">    76</span>		fmt.Fprintf(&amp;b, &#34;\r\n&#34;)
<a id="L77"></a><span class="ln">    77</span>		_, err := io.Copy(w.w, &amp;b)
<a id="L78"></a><span class="ln">    78</span>		if err != nil {
<a id="L79"></a><span class="ln">    79</span>			return nil, err
<a id="L80"></a><span class="ln">    80</span>		}
<a id="L81"></a><span class="ln">    81</span>		p := &amp;part{
<a id="L82"></a><span class="ln">    82</span>			mw: w,
<a id="L83"></a><span class="ln">    83</span>		}
<a id="L84"></a><span class="ln">    84</span>		w.lastpart = p
<a id="L85"></a><span class="ln">    85</span>		return p, nil
<a id="L86"></a><span class="ln">    86</span>	}
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>	var quoteEscaper = strings.NewReplacer(&#34;\\&#34;, &#34;\\\\&#34;, `&#34;`, &#34;\\\&#34;&#34;)
<a id="L89"></a><span class="ln">    89</span>	
<a id="L90"></a><span class="ln">    90</span>	func escapeQuotes(s string) string {
<a id="L91"></a><span class="ln">    91</span>		return quoteEscaper.Replace(s)
<a id="L92"></a><span class="ln">    92</span>	}
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// CreateFormFile is a convenience wrapper around CreatePart. It creates</span>
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">// a new form-data header with the provided field name and file name.</span>
<a id="L96"></a><span class="ln">    96</span>	func (w *Writer) CreateFormFile(fieldname, filename string) (io.Writer, error) {
<a id="L97"></a><span class="ln">    97</span>		h := make(textproto.MIMEHeader)
<a id="L98"></a><span class="ln">    98</span>		h.Set(&#34;Content-Disposition&#34;,
<a id="L99"></a><span class="ln">    99</span>			fmt.Sprintf(`form-data; name=&#34;%s&#34;; filename=&#34;%s&#34;`,
<a id="L100"></a><span class="ln">   100</span>				escapeQuotes(fieldname), escapeQuotes(filename)))
<a id="L101"></a><span class="ln">   101</span>		h.Set(&#34;Content-Type&#34;, &#34;application/octet-stream&#34;)
<a id="L102"></a><span class="ln">   102</span>		return w.CreatePart(h)
<a id="L103"></a><span class="ln">   103</span>	}
<a id="L104"></a><span class="ln">   104</span>	
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// CreateFormField calls CreatePart with a header using the</span>
<a id="L106"></a><span class="ln">   106</span>	<span class="comment">// given field name.</span>
<a id="L107"></a><span class="ln">   107</span>	func (w *Writer) CreateFormField(fieldname string) (io.Writer, error) {
<a id="L108"></a><span class="ln">   108</span>		h := make(textproto.MIMEHeader)
<a id="L109"></a><span class="ln">   109</span>		h.Set(&#34;Content-Disposition&#34;,
<a id="L110"></a><span class="ln">   110</span>			fmt.Sprintf(`form-data; name=&#34;%s&#34;`, escapeQuotes(fieldname)))
<a id="L111"></a><span class="ln">   111</span>		return w.CreatePart(h)
<a id="L112"></a><span class="ln">   112</span>	}
<a id="L113"></a><span class="ln">   113</span>	
<a id="L114"></a><span class="ln">   114</span>	<span class="comment">// WriteField calls CreateFormField and then writes the given value.</span>
<a id="L115"></a><span class="ln">   115</span>	func (w *Writer) WriteField(fieldname, value string) error {
<a id="L116"></a><span class="ln">   116</span>		p, err := w.CreateFormField(fieldname)
<a id="L117"></a><span class="ln">   117</span>		if err != nil {
<a id="L118"></a><span class="ln">   118</span>			return err
<a id="L119"></a><span class="ln">   119</span>		}
<a id="L120"></a><span class="ln">   120</span>		_, err = p.Write([]byte(value))
<a id="L121"></a><span class="ln">   121</span>		return err
<a id="L122"></a><span class="ln">   122</span>	}
<a id="L123"></a><span class="ln">   123</span>	
<a id="L124"></a><span class="ln">   124</span>	<span class="comment">// Close finishes the multipart message and writes the trailing</span>
<a id="L125"></a><span class="ln">   125</span>	<span class="comment">// boundary end line to the output.</span>
<a id="L126"></a><span class="ln">   126</span>	func (w *Writer) Close() error {
<a id="L127"></a><span class="ln">   127</span>		if w.lastpart != nil {
<a id="L128"></a><span class="ln">   128</span>			if err := w.lastpart.close(); err != nil {
<a id="L129"></a><span class="ln">   129</span>				return err
<a id="L130"></a><span class="ln">   130</span>			}
<a id="L131"></a><span class="ln">   131</span>			w.lastpart = nil
<a id="L132"></a><span class="ln">   132</span>		}
<a id="L133"></a><span class="ln">   133</span>		_, err := fmt.Fprintf(w.w, &#34;\r\n--%s--\r\n&#34;, w.boundary)
<a id="L134"></a><span class="ln">   134</span>		return err
<a id="L135"></a><span class="ln">   135</span>	}
<a id="L136"></a><span class="ln">   136</span>	
<a id="L137"></a><span class="ln">   137</span>	type part struct {
<a id="L138"></a><span class="ln">   138</span>		mw     *Writer
<a id="L139"></a><span class="ln">   139</span>		closed bool
<a id="L140"></a><span class="ln">   140</span>		we     error <span class="comment">// last error that occurred writing</span>
<a id="L141"></a><span class="ln">   141</span>	}
<a id="L142"></a><span class="ln">   142</span>	
<a id="L143"></a><span class="ln">   143</span>	func (p *part) close() error {
<a id="L144"></a><span class="ln">   144</span>		p.closed = true
<a id="L145"></a><span class="ln">   145</span>		return p.we
<a id="L146"></a><span class="ln">   146</span>	}
<a id="L147"></a><span class="ln">   147</span>	
<a id="L148"></a><span class="ln">   148</span>	func (p *part) Write(d []byte) (n int, err error) {
<a id="L149"></a><span class="ln">   149</span>		if p.closed {
<a id="L150"></a><span class="ln">   150</span>			return 0, errors.New(&#34;multipart: can&#39;t write to finished part&#34;)
<a id="L151"></a><span class="ln">   151</span>		}
<a id="L152"></a><span class="ln">   152</span>		n, err = p.mw.w.Write(d)
<a id="L153"></a><span class="ln">   153</span>		if err != nil {
<a id="L154"></a><span class="ln">   154</span>			p.we = err
<a id="L155"></a><span class="ln">   155</span>		}
<a id="L156"></a><span class="ln">   156</span>		return
<a id="L157"></a><span class="ln">   157</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

