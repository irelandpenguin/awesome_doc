<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/sort/sort.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/sort/sort.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package sort provides primitives for sorting slices and user-defined</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// collections.</span>
<a id="L7"></a><span class="ln">     7</span>	package sort
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import &#34;math&#34;
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// A type, typically a collection, that satisfies sort.Interface can be</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// sorted by the routines in this package.  The methods require that the</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// elements of the collection be enumerated by an integer index.</span>
<a id="L14"></a><span class="ln">    14</span>	type Interface interface {
<a id="L15"></a><span class="ln">    15</span>		<span class="comment">// Len is the number of elements in the collection.</span>
<a id="L16"></a><span class="ln">    16</span>		Len() int
<a id="L17"></a><span class="ln">    17</span>		<span class="comment">// Less returns whether the element with index i should sort</span>
<a id="L18"></a><span class="ln">    18</span>		<span class="comment">// before the element with index j.</span>
<a id="L19"></a><span class="ln">    19</span>		Less(i, j int) bool
<a id="L20"></a><span class="ln">    20</span>		<span class="comment">// Swap swaps the elements with indexes i and j.</span>
<a id="L21"></a><span class="ln">    21</span>		Swap(i, j int)
<a id="L22"></a><span class="ln">    22</span>	}
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>	func min(a, b int) int {
<a id="L25"></a><span class="ln">    25</span>		if a &lt; b {
<a id="L26"></a><span class="ln">    26</span>			return a
<a id="L27"></a><span class="ln">    27</span>		}
<a id="L28"></a><span class="ln">    28</span>		return b
<a id="L29"></a><span class="ln">    29</span>	}
<a id="L30"></a><span class="ln">    30</span>	
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// Insertion sort</span>
<a id="L32"></a><span class="ln">    32</span>	func insertionSort(data Interface, a, b int) {
<a id="L33"></a><span class="ln">    33</span>		for i := a + 1; i &lt; b; i++ {
<a id="L34"></a><span class="ln">    34</span>			for j := i; j &gt; a &amp;&amp; data.Less(j, j-1); j-- {
<a id="L35"></a><span class="ln">    35</span>				data.Swap(j, j-1)
<a id="L36"></a><span class="ln">    36</span>			}
<a id="L37"></a><span class="ln">    37</span>		}
<a id="L38"></a><span class="ln">    38</span>	}
<a id="L39"></a><span class="ln">    39</span>	
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// siftDown implements the heap property on data[lo, hi).</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// first is an offset into the array where the root of the heap lies.</span>
<a id="L42"></a><span class="ln">    42</span>	func siftDown(data Interface, lo, hi, first int) {
<a id="L43"></a><span class="ln">    43</span>		root := lo
<a id="L44"></a><span class="ln">    44</span>		for {
<a id="L45"></a><span class="ln">    45</span>			child := 2*root + 1
<a id="L46"></a><span class="ln">    46</span>			if child &gt;= hi {
<a id="L47"></a><span class="ln">    47</span>				break
<a id="L48"></a><span class="ln">    48</span>			}
<a id="L49"></a><span class="ln">    49</span>			if child+1 &lt; hi &amp;&amp; data.Less(first+child, first+child+1) {
<a id="L50"></a><span class="ln">    50</span>				child++
<a id="L51"></a><span class="ln">    51</span>			}
<a id="L52"></a><span class="ln">    52</span>			if !data.Less(first+root, first+child) {
<a id="L53"></a><span class="ln">    53</span>				return
<a id="L54"></a><span class="ln">    54</span>			}
<a id="L55"></a><span class="ln">    55</span>			data.Swap(first+root, first+child)
<a id="L56"></a><span class="ln">    56</span>			root = child
<a id="L57"></a><span class="ln">    57</span>		}
<a id="L58"></a><span class="ln">    58</span>	}
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	func heapSort(data Interface, a, b int) {
<a id="L61"></a><span class="ln">    61</span>		first := a
<a id="L62"></a><span class="ln">    62</span>		lo := 0
<a id="L63"></a><span class="ln">    63</span>		hi := b - a
<a id="L64"></a><span class="ln">    64</span>	
<a id="L65"></a><span class="ln">    65</span>		<span class="comment">// Build heap with greatest element at top.</span>
<a id="L66"></a><span class="ln">    66</span>		for i := (hi - 1) / 2; i &gt;= 0; i-- {
<a id="L67"></a><span class="ln">    67</span>			siftDown(data, i, hi, first)
<a id="L68"></a><span class="ln">    68</span>		}
<a id="L69"></a><span class="ln">    69</span>	
<a id="L70"></a><span class="ln">    70</span>		<span class="comment">// Pop elements, largest first, into end of data.</span>
<a id="L71"></a><span class="ln">    71</span>		for i := hi - 1; i &gt;= 0; i-- {
<a id="L72"></a><span class="ln">    72</span>			data.Swap(first, first+i)
<a id="L73"></a><span class="ln">    73</span>			siftDown(data, lo, i, first)
<a id="L74"></a><span class="ln">    74</span>		}
<a id="L75"></a><span class="ln">    75</span>	}
<a id="L76"></a><span class="ln">    76</span>	
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// Quicksort, following Bentley and McIlroy,</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// ``Engineering a Sort Function,&#39;&#39; SP&amp;E November 1993.</span>
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// medianOfThree moves the median of the three values data[a], data[b], data[c] into data[a].</span>
<a id="L81"></a><span class="ln">    81</span>	func medianOfThree(data Interface, a, b, c int) {
<a id="L82"></a><span class="ln">    82</span>		m0 := b
<a id="L83"></a><span class="ln">    83</span>		m1 := a
<a id="L84"></a><span class="ln">    84</span>		m2 := c
<a id="L85"></a><span class="ln">    85</span>		<span class="comment">// bubble sort on 3 elements</span>
<a id="L86"></a><span class="ln">    86</span>		if data.Less(m1, m0) {
<a id="L87"></a><span class="ln">    87</span>			data.Swap(m1, m0)
<a id="L88"></a><span class="ln">    88</span>		}
<a id="L89"></a><span class="ln">    89</span>		if data.Less(m2, m1) {
<a id="L90"></a><span class="ln">    90</span>			data.Swap(m2, m1)
<a id="L91"></a><span class="ln">    91</span>		}
<a id="L92"></a><span class="ln">    92</span>		if data.Less(m1, m0) {
<a id="L93"></a><span class="ln">    93</span>			data.Swap(m1, m0)
<a id="L94"></a><span class="ln">    94</span>		}
<a id="L95"></a><span class="ln">    95</span>		<span class="comment">// now data[m0] &lt;= data[m1] &lt;= data[m2]</span>
<a id="L96"></a><span class="ln">    96</span>	}
<a id="L97"></a><span class="ln">    97</span>	
<a id="L98"></a><span class="ln">    98</span>	func swapRange(data Interface, a, b, n int) {
<a id="L99"></a><span class="ln">    99</span>		for i := 0; i &lt; n; i++ {
<a id="L100"></a><span class="ln">   100</span>			data.Swap(a+i, b+i)
<a id="L101"></a><span class="ln">   101</span>		}
<a id="L102"></a><span class="ln">   102</span>	}
<a id="L103"></a><span class="ln">   103</span>	
<a id="L104"></a><span class="ln">   104</span>	func doPivot(data Interface, lo, hi int) (midlo, midhi int) {
<a id="L105"></a><span class="ln">   105</span>		m := lo + (hi-lo)/2 <span class="comment">// Written like this to avoid integer overflow.</span>
<a id="L106"></a><span class="ln">   106</span>		if hi-lo &gt; 40 {
<a id="L107"></a><span class="ln">   107</span>			<span class="comment">// Tukey&#39;s ``Ninther,&#39;&#39; median of three medians of three.</span>
<a id="L108"></a><span class="ln">   108</span>			s := (hi - lo) / 8
<a id="L109"></a><span class="ln">   109</span>			medianOfThree(data, lo, lo+s, lo+2*s)
<a id="L110"></a><span class="ln">   110</span>			medianOfThree(data, m, m-s, m+s)
<a id="L111"></a><span class="ln">   111</span>			medianOfThree(data, hi-1, hi-1-s, hi-1-2*s)
<a id="L112"></a><span class="ln">   112</span>		}
<a id="L113"></a><span class="ln">   113</span>		medianOfThree(data, lo, m, hi-1)
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>		<span class="comment">// Invariants are:</span>
<a id="L116"></a><span class="ln">   116</span>		<span class="comment">//	data[lo] = pivot (set up by ChoosePivot)</span>
<a id="L117"></a><span class="ln">   117</span>		<span class="comment">//	data[lo &lt;= i &lt; a] = pivot</span>
<a id="L118"></a><span class="ln">   118</span>		<span class="comment">//	data[a &lt;= i &lt; b] &lt; pivot</span>
<a id="L119"></a><span class="ln">   119</span>		<span class="comment">//	data[b &lt;= i &lt; c] is unexamined</span>
<a id="L120"></a><span class="ln">   120</span>		<span class="comment">//	data[c &lt;= i &lt; d] &gt; pivot</span>
<a id="L121"></a><span class="ln">   121</span>		<span class="comment">//	data[d &lt;= i &lt; hi] = pivot</span>
<a id="L122"></a><span class="ln">   122</span>		<span class="comment">//</span>
<a id="L123"></a><span class="ln">   123</span>		<span class="comment">// Once b meets c, can swap the &#34;= pivot&#34; sections</span>
<a id="L124"></a><span class="ln">   124</span>		<span class="comment">// into the middle of the slice.</span>
<a id="L125"></a><span class="ln">   125</span>		pivot := lo
<a id="L126"></a><span class="ln">   126</span>		a, b, c, d := lo+1, lo+1, hi, hi
<a id="L127"></a><span class="ln">   127</span>		for b &lt; c {
<a id="L128"></a><span class="ln">   128</span>			if data.Less(b, pivot) { <span class="comment">// data[b] &lt; pivot</span>
<a id="L129"></a><span class="ln">   129</span>				b++
<a id="L130"></a><span class="ln">   130</span>				continue
<a id="L131"></a><span class="ln">   131</span>			}
<a id="L132"></a><span class="ln">   132</span>			if !data.Less(pivot, b) { <span class="comment">// data[b] = pivot</span>
<a id="L133"></a><span class="ln">   133</span>				data.Swap(a, b)
<a id="L134"></a><span class="ln">   134</span>				a++
<a id="L135"></a><span class="ln">   135</span>				b++
<a id="L136"></a><span class="ln">   136</span>				continue
<a id="L137"></a><span class="ln">   137</span>			}
<a id="L138"></a><span class="ln">   138</span>			if data.Less(pivot, c-1) { <span class="comment">// data[c-1] &gt; pivot</span>
<a id="L139"></a><span class="ln">   139</span>				c--
<a id="L140"></a><span class="ln">   140</span>				continue
<a id="L141"></a><span class="ln">   141</span>			}
<a id="L142"></a><span class="ln">   142</span>			if !data.Less(c-1, pivot) { <span class="comment">// data[c-1] = pivot</span>
<a id="L143"></a><span class="ln">   143</span>				data.Swap(c-1, d-1)
<a id="L144"></a><span class="ln">   144</span>				c--
<a id="L145"></a><span class="ln">   145</span>				d--
<a id="L146"></a><span class="ln">   146</span>				continue
<a id="L147"></a><span class="ln">   147</span>			}
<a id="L148"></a><span class="ln">   148</span>			<span class="comment">// data[b] &gt; pivot; data[c-1] &lt; pivot</span>
<a id="L149"></a><span class="ln">   149</span>			data.Swap(b, c-1)
<a id="L150"></a><span class="ln">   150</span>			b++
<a id="L151"></a><span class="ln">   151</span>			c--
<a id="L152"></a><span class="ln">   152</span>		}
<a id="L153"></a><span class="ln">   153</span>	
<a id="L154"></a><span class="ln">   154</span>		n := min(b-a, a-lo)
<a id="L155"></a><span class="ln">   155</span>		swapRange(data, lo, b-n, n)
<a id="L156"></a><span class="ln">   156</span>	
<a id="L157"></a><span class="ln">   157</span>		n = min(hi-d, d-c)
<a id="L158"></a><span class="ln">   158</span>		swapRange(data, c, hi-n, n)
<a id="L159"></a><span class="ln">   159</span>	
<a id="L160"></a><span class="ln">   160</span>		return lo + b - a, hi - (d - c)
<a id="L161"></a><span class="ln">   161</span>	}
<a id="L162"></a><span class="ln">   162</span>	
<a id="L163"></a><span class="ln">   163</span>	func quickSort(data Interface, a, b, maxDepth int) {
<a id="L164"></a><span class="ln">   164</span>		for b-a &gt; 7 {
<a id="L165"></a><span class="ln">   165</span>			if maxDepth == 0 {
<a id="L166"></a><span class="ln">   166</span>				heapSort(data, a, b)
<a id="L167"></a><span class="ln">   167</span>				return
<a id="L168"></a><span class="ln">   168</span>			}
<a id="L169"></a><span class="ln">   169</span>			maxDepth--
<a id="L170"></a><span class="ln">   170</span>			mlo, mhi := doPivot(data, a, b)
<a id="L171"></a><span class="ln">   171</span>			<span class="comment">// Avoiding recursion on the larger subproblem guarantees</span>
<a id="L172"></a><span class="ln">   172</span>			<span class="comment">// a stack depth of at most lg(b-a).</span>
<a id="L173"></a><span class="ln">   173</span>			if mlo-a &lt; b-mhi {
<a id="L174"></a><span class="ln">   174</span>				quickSort(data, a, mlo, maxDepth)
<a id="L175"></a><span class="ln">   175</span>				a = mhi <span class="comment">// i.e., quickSort(data, mhi, b)</span>
<a id="L176"></a><span class="ln">   176</span>			} else {
<a id="L177"></a><span class="ln">   177</span>				quickSort(data, mhi, b, maxDepth)
<a id="L178"></a><span class="ln">   178</span>				b = mlo <span class="comment">// i.e., quickSort(data, a, mlo)</span>
<a id="L179"></a><span class="ln">   179</span>			}
<a id="L180"></a><span class="ln">   180</span>		}
<a id="L181"></a><span class="ln">   181</span>		if b-a &gt; 1 {
<a id="L182"></a><span class="ln">   182</span>			insertionSort(data, a, b)
<a id="L183"></a><span class="ln">   183</span>		}
<a id="L184"></a><span class="ln">   184</span>	}
<a id="L185"></a><span class="ln">   185</span>	
<a id="L186"></a><span class="ln">   186</span>	<span class="comment">// Sort sorts data.</span>
<a id="L187"></a><span class="ln">   187</span>	<span class="comment">// It makes one call to data.Len to determine n, and O(n*log(n)) calls to</span>
<a id="L188"></a><span class="ln">   188</span>	<span class="comment">// data.Less and data.Swap. The sort is not guaranteed to be stable.</span>
<a id="L189"></a><span class="ln">   189</span>	func Sort(data Interface) {
<a id="L190"></a><span class="ln">   190</span>		<span class="comment">// Switch to heapsort if depth of 2*ceil(lg(n+1)) is reached.</span>
<a id="L191"></a><span class="ln">   191</span>		n := data.Len()
<a id="L192"></a><span class="ln">   192</span>		maxDepth := 0
<a id="L193"></a><span class="ln">   193</span>		for i := n; i &gt; 0; i &gt;&gt;= 1 {
<a id="L194"></a><span class="ln">   194</span>			maxDepth++
<a id="L195"></a><span class="ln">   195</span>		}
<a id="L196"></a><span class="ln">   196</span>		maxDepth *= 2
<a id="L197"></a><span class="ln">   197</span>		quickSort(data, 0, n, maxDepth)
<a id="L198"></a><span class="ln">   198</span>	}
<a id="L199"></a><span class="ln">   199</span>	
<a id="L200"></a><span class="ln">   200</span>	<span class="comment">// IsSorted reports whether data is sorted.</span>
<a id="L201"></a><span class="ln">   201</span>	func IsSorted(data Interface) bool {
<a id="L202"></a><span class="ln">   202</span>		n := data.Len()
<a id="L203"></a><span class="ln">   203</span>		for i := n - 1; i &gt; 0; i-- {
<a id="L204"></a><span class="ln">   204</span>			if data.Less(i, i-1) {
<a id="L205"></a><span class="ln">   205</span>				return false
<a id="L206"></a><span class="ln">   206</span>			}
<a id="L207"></a><span class="ln">   207</span>		}
<a id="L208"></a><span class="ln">   208</span>		return true
<a id="L209"></a><span class="ln">   209</span>	}
<a id="L210"></a><span class="ln">   210</span>	
<a id="L211"></a><span class="ln">   211</span>	<span class="comment">// Convenience types for common cases</span>
<a id="L212"></a><span class="ln">   212</span>	
<a id="L213"></a><span class="ln">   213</span>	<span class="comment">// IntSlice attaches the methods of Interface to []int, sorting in increasing order.</span>
<a id="L214"></a><span class="ln">   214</span>	type IntSlice []int
<a id="L215"></a><span class="ln">   215</span>	
<a id="L216"></a><span class="ln">   216</span>	func (p IntSlice) Len() int           { return len(p) }
<a id="L217"></a><span class="ln">   217</span>	func (p IntSlice) Less(i, j int) bool { return p[i] &lt; p[j] }
<a id="L218"></a><span class="ln">   218</span>	func (p IntSlice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }
<a id="L219"></a><span class="ln">   219</span>	
<a id="L220"></a><span class="ln">   220</span>	<span class="comment">// Sort is a convenience method.</span>
<a id="L221"></a><span class="ln">   221</span>	func (p IntSlice) Sort() { Sort(p) }
<a id="L222"></a><span class="ln">   222</span>	
<a id="L223"></a><span class="ln">   223</span>	<span class="comment">// Float64Slice attaches the methods of Interface to []float64, sorting in increasing order.</span>
<a id="L224"></a><span class="ln">   224</span>	type Float64Slice []float64
<a id="L225"></a><span class="ln">   225</span>	
<a id="L226"></a><span class="ln">   226</span>	func (p Float64Slice) Len() int           { return len(p) }
<a id="L227"></a><span class="ln">   227</span>	func (p Float64Slice) Less(i, j int) bool { return p[i] &lt; p[j] || math.IsNaN(p[i]) &amp;&amp; !math.IsNaN(p[j]) }
<a id="L228"></a><span class="ln">   228</span>	func (p Float64Slice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }
<a id="L229"></a><span class="ln">   229</span>	
<a id="L230"></a><span class="ln">   230</span>	<span class="comment">// Sort is a convenience method.</span>
<a id="L231"></a><span class="ln">   231</span>	func (p Float64Slice) Sort() { Sort(p) }
<a id="L232"></a><span class="ln">   232</span>	
<a id="L233"></a><span class="ln">   233</span>	<span class="comment">// StringSlice attaches the methods of Interface to []string, sorting in increasing order.</span>
<a id="L234"></a><span class="ln">   234</span>	type StringSlice []string
<a id="L235"></a><span class="ln">   235</span>	
<a id="L236"></a><span class="ln">   236</span>	func (p StringSlice) Len() int           { return len(p) }
<a id="L237"></a><span class="ln">   237</span>	func (p StringSlice) Less(i, j int) bool { return p[i] &lt; p[j] }
<a id="L238"></a><span class="ln">   238</span>	func (p StringSlice) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }
<a id="L239"></a><span class="ln">   239</span>	
<a id="L240"></a><span class="ln">   240</span>	<span class="comment">// Sort is a convenience method.</span>
<a id="L241"></a><span class="ln">   241</span>	func (p StringSlice) Sort() { Sort(p) }
<a id="L242"></a><span class="ln">   242</span>	
<a id="L243"></a><span class="ln">   243</span>	<span class="comment">// Convenience wrappers for common cases</span>
<a id="L244"></a><span class="ln">   244</span>	
<a id="L245"></a><span class="ln">   245</span>	<span class="comment">// Ints sorts a slice of ints in increasing order.</span>
<a id="L246"></a><span class="ln">   246</span>	func Ints(a []int) { Sort(IntSlice(a)) }
<a id="L247"></a><span class="ln">   247</span>	
<a id="L248"></a><span class="ln">   248</span>	<span class="comment">// Float64s sorts a slice of float64s in increasing order.</span>
<a id="L249"></a><span class="ln">   249</span>	func Float64s(a []float64) { Sort(Float64Slice(a)) }
<a id="L250"></a><span class="ln">   250</span>	
<a id="L251"></a><span class="ln">   251</span>	<span class="comment">// Strings sorts a slice of strings in increasing order.</span>
<a id="L252"></a><span class="ln">   252</span>	func Strings(a []string) { Sort(StringSlice(a)) }
<a id="L253"></a><span class="ln">   253</span>	
<a id="L254"></a><span class="ln">   254</span>	<span class="comment">// IntsAreSorted tests whether a slice of ints is sorted in increasing order.</span>
<a id="L255"></a><span class="ln">   255</span>	func IntsAreSorted(a []int) bool { return IsSorted(IntSlice(a)) }
<a id="L256"></a><span class="ln">   256</span>	
<a id="L257"></a><span class="ln">   257</span>	<span class="comment">// Float64sAreSorted tests whether a slice of float64s is sorted in increasing order.</span>
<a id="L258"></a><span class="ln">   258</span>	func Float64sAreSorted(a []float64) bool { return IsSorted(Float64Slice(a)) }
<a id="L259"></a><span class="ln">   259</span>	
<a id="L260"></a><span class="ln">   260</span>	<span class="comment">// StringsAreSorted tests whether a slice of strings is sorted in increasing order.</span>
<a id="L261"></a><span class="ln">   261</span>	func StringsAreSorted(a []string) bool { return IsSorted(StringSlice(a)) }
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

