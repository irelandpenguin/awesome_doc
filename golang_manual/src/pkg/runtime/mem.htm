<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/runtime/mem.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/runtime/mem.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package runtime
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import &#34;unsafe&#34;
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// A MemStats records statistics about the memory allocator.</span>
<a id="L10"></a><span class="ln">    10</span>	type MemStats struct {
<a id="L11"></a><span class="ln">    11</span>		<span class="comment">// General statistics.</span>
<a id="L12"></a><span class="ln">    12</span>		Alloc      uint64 <span class="comment">// bytes allocated and still in use</span>
<a id="L13"></a><span class="ln">    13</span>		TotalAlloc uint64 <span class="comment">// bytes allocated (even if freed)</span>
<a id="L14"></a><span class="ln">    14</span>		Sys        uint64 <span class="comment">// bytes obtained from system (should be sum of XxxSys below)</span>
<a id="L15"></a><span class="ln">    15</span>		Lookups    uint64 <span class="comment">// number of pointer lookups</span>
<a id="L16"></a><span class="ln">    16</span>		Mallocs    uint64 <span class="comment">// number of mallocs</span>
<a id="L17"></a><span class="ln">    17</span>		Frees      uint64 <span class="comment">// number of frees</span>
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>		<span class="comment">// Main allocation heap statistics.</span>
<a id="L20"></a><span class="ln">    20</span>		HeapAlloc    uint64 <span class="comment">// bytes allocated and still in use</span>
<a id="L21"></a><span class="ln">    21</span>		HeapSys      uint64 <span class="comment">// bytes obtained from system</span>
<a id="L22"></a><span class="ln">    22</span>		HeapIdle     uint64 <span class="comment">// bytes in idle spans</span>
<a id="L23"></a><span class="ln">    23</span>		HeapInuse    uint64 <span class="comment">// bytes in non-idle span</span>
<a id="L24"></a><span class="ln">    24</span>		HeapReleased uint64 <span class="comment">// bytes released to the OS</span>
<a id="L25"></a><span class="ln">    25</span>		HeapObjects  uint64 <span class="comment">// total number of allocated objects</span>
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>		<span class="comment">// Low-level fixed-size structure allocator statistics.</span>
<a id="L28"></a><span class="ln">    28</span>		<span class="comment">//	Inuse is bytes used now.</span>
<a id="L29"></a><span class="ln">    29</span>		<span class="comment">//	Sys is bytes obtained from system.</span>
<a id="L30"></a><span class="ln">    30</span>		StackInuse  uint64 <span class="comment">// bootstrap stacks</span>
<a id="L31"></a><span class="ln">    31</span>		StackSys    uint64
<a id="L32"></a><span class="ln">    32</span>		MSpanInuse  uint64 <span class="comment">// mspan structures</span>
<a id="L33"></a><span class="ln">    33</span>		MSpanSys    uint64
<a id="L34"></a><span class="ln">    34</span>		MCacheInuse uint64 <span class="comment">// mcache structures</span>
<a id="L35"></a><span class="ln">    35</span>		MCacheSys   uint64
<a id="L36"></a><span class="ln">    36</span>		BuckHashSys uint64 <span class="comment">// profiling bucket hash table</span>
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>		<span class="comment">// Garbage collector statistics.</span>
<a id="L39"></a><span class="ln">    39</span>		NextGC       uint64 <span class="comment">// next run in HeapAlloc time (bytes)</span>
<a id="L40"></a><span class="ln">    40</span>		LastGC       uint64 <span class="comment">// last run in absolute time (ns)</span>
<a id="L41"></a><span class="ln">    41</span>		PauseTotalNs uint64
<a id="L42"></a><span class="ln">    42</span>		PauseNs      [256]uint64 <span class="comment">// most recent GC pause times</span>
<a id="L43"></a><span class="ln">    43</span>		NumGC        uint32
<a id="L44"></a><span class="ln">    44</span>		EnableGC     bool
<a id="L45"></a><span class="ln">    45</span>		DebugGC      bool
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>		<span class="comment">// Per-size allocation statistics.</span>
<a id="L48"></a><span class="ln">    48</span>		<span class="comment">// 61 is NumSizeClasses in the C code.</span>
<a id="L49"></a><span class="ln">    49</span>		BySize [61]struct {
<a id="L50"></a><span class="ln">    50</span>			Size    uint32
<a id="L51"></a><span class="ln">    51</span>			Mallocs uint64
<a id="L52"></a><span class="ln">    52</span>			Frees   uint64
<a id="L53"></a><span class="ln">    53</span>		}
<a id="L54"></a><span class="ln">    54</span>	}
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>	var sizeof_C_MStats uintptr <span class="comment">// filled in by malloc.goc</span>
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>	var memStats MemStats
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	func init() {
<a id="L61"></a><span class="ln">    61</span>		if sizeof_C_MStats != unsafe.Sizeof(memStats) {
<a id="L62"></a><span class="ln">    62</span>			println(sizeof_C_MStats, unsafe.Sizeof(memStats))
<a id="L63"></a><span class="ln">    63</span>			panic(&#34;MStats vs MemStatsType size mismatch&#34;)
<a id="L64"></a><span class="ln">    64</span>		}
<a id="L65"></a><span class="ln">    65</span>	}
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// ReadMemStats populates m with memory allocator statistics.</span>
<a id="L68"></a><span class="ln">    68</span>	func ReadMemStats(m *MemStats)
<a id="L69"></a><span class="ln">    69</span>	
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// GC runs a garbage collection.</span>
<a id="L71"></a><span class="ln">    71</span>	func GC()
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

