<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/runtime/debug.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/runtime/debug.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package runtime
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// Breakpoint() executes a breakpoint trap.</span>
<a id="L8"></a><span class="ln">     8</span>	func Breakpoint()
<a id="L9"></a><span class="ln">     9</span>	
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// LockOSThread wires the calling goroutine to its current operating system thread.</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// Until the calling goroutine exits or calls UnlockOSThread, it will always</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// execute in that thread, and no other goroutine can.</span>
<a id="L13"></a><span class="ln">    13</span>	func LockOSThread()
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// UnlockOSThread unwires the calling goroutine from its fixed operating system thread.</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// If the calling goroutine has not called LockOSThread, UnlockOSThread is a no-op.</span>
<a id="L17"></a><span class="ln">    17</span>	func UnlockOSThread()
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// GOMAXPROCS sets the maximum number of CPUs that can be executing</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// simultaneously and returns the previous setting.  If n &lt; 1, it does not</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// change the current setting.</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// The number of logical CPUs on the local machine can be queried with NumCPU.</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// This call will go away when the scheduler improves.</span>
<a id="L24"></a><span class="ln">    24</span>	func GOMAXPROCS(n int) int
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// NumCPU returns the number of logical CPUs on the local machine.</span>
<a id="L27"></a><span class="ln">    27</span>	func NumCPU() int
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// NumCgoCall returns the number of cgo calls made by the current process.</span>
<a id="L30"></a><span class="ln">    30</span>	func NumCgoCall() int64
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// NumGoroutine returns the number of goroutines that currently exist.</span>
<a id="L33"></a><span class="ln">    33</span>	func NumGoroutine() int
<a id="L34"></a><span class="ln">    34</span>	
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// MemProfileRate controls the fraction of memory allocations</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// that are recorded and reported in the memory profile.</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// The profiler aims to sample an average of</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// one allocation per MemProfileRate bytes allocated.</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">//</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// To include every allocated block in the profile, set MemProfileRate to 1.</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// To turn off profiling entirely, set MemProfileRate to 0.</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">//</span>
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">// The tools that process the memory profiles assume that the</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">// profile rate is constant across the lifetime of the program</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">// and equal to the current value.  Programs that change the</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">// memory profiling rate should do so just once, as early as</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">// possible in the execution of the program (for example,</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">// at the beginning of main).</span>
<a id="L49"></a><span class="ln">    49</span>	var MemProfileRate int = 512 * 1024
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// A MemProfileRecord describes the live objects allocated</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// by a particular call sequence (stack trace).</span>
<a id="L53"></a><span class="ln">    53</span>	type MemProfileRecord struct {
<a id="L54"></a><span class="ln">    54</span>		AllocBytes, FreeBytes     int64       <span class="comment">// number of bytes allocated, freed</span>
<a id="L55"></a><span class="ln">    55</span>		AllocObjects, FreeObjects int64       <span class="comment">// number of objects allocated, freed</span>
<a id="L56"></a><span class="ln">    56</span>		Stack0                    [32]uintptr <span class="comment">// stack trace for this record; ends at first 0 entry</span>
<a id="L57"></a><span class="ln">    57</span>	}
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// InUseBytes returns the number of bytes in use (AllocBytes - FreeBytes).</span>
<a id="L60"></a><span class="ln">    60</span>	func (r *MemProfileRecord) InUseBytes() int64 { return r.AllocBytes - r.FreeBytes }
<a id="L61"></a><span class="ln">    61</span>	
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">// InUseObjects returns the number of objects in use (AllocObjects - FreeObjects).</span>
<a id="L63"></a><span class="ln">    63</span>	func (r *MemProfileRecord) InUseObjects() int64 {
<a id="L64"></a><span class="ln">    64</span>		return r.AllocObjects - r.FreeObjects
<a id="L65"></a><span class="ln">    65</span>	}
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// Stack returns the stack trace associated with the record,</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// a prefix of r.Stack0.</span>
<a id="L69"></a><span class="ln">    69</span>	func (r *MemProfileRecord) Stack() []uintptr {
<a id="L70"></a><span class="ln">    70</span>		for i, v := range r.Stack0 {
<a id="L71"></a><span class="ln">    71</span>			if v == 0 {
<a id="L72"></a><span class="ln">    72</span>				return r.Stack0[0:i]
<a id="L73"></a><span class="ln">    73</span>			}
<a id="L74"></a><span class="ln">    74</span>		}
<a id="L75"></a><span class="ln">    75</span>		return r.Stack0[0:]
<a id="L76"></a><span class="ln">    76</span>	}
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// MemProfile returns n, the number of records in the current memory profile.</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// If len(p) &gt;= n, MemProfile copies the profile into p and returns n, true.</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// If len(p) &lt; n, MemProfile does not change p and returns n, false.</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">//</span>
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">// If inuseZero is true, the profile includes allocation records</span>
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">// where r.AllocBytes &gt; 0 but r.AllocBytes == r.FreeBytes.</span>
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">// These are sites where memory was allocated, but it has all</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">// been released back to the runtime.</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">//</span>
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">// Most clients should use the runtime/pprof package or</span>
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// the testing package&#39;s -test.memprofile flag instead</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">// of calling MemProfile directly.</span>
<a id="L90"></a><span class="ln">    90</span>	func MemProfile(p []MemProfileRecord, inuseZero bool) (n int, ok bool)
<a id="L91"></a><span class="ln">    91</span>	
<a id="L92"></a><span class="ln">    92</span>	<span class="comment">// A StackRecord describes a single execution stack.</span>
<a id="L93"></a><span class="ln">    93</span>	type StackRecord struct {
<a id="L94"></a><span class="ln">    94</span>		Stack0 [32]uintptr <span class="comment">// stack trace for this record; ends at first 0 entry</span>
<a id="L95"></a><span class="ln">    95</span>	}
<a id="L96"></a><span class="ln">    96</span>	
<a id="L97"></a><span class="ln">    97</span>	<span class="comment">// Stack returns the stack trace associated with the record,</span>
<a id="L98"></a><span class="ln">    98</span>	<span class="comment">// a prefix of r.Stack0.</span>
<a id="L99"></a><span class="ln">    99</span>	func (r *StackRecord) Stack() []uintptr {
<a id="L100"></a><span class="ln">   100</span>		for i, v := range r.Stack0 {
<a id="L101"></a><span class="ln">   101</span>			if v == 0 {
<a id="L102"></a><span class="ln">   102</span>				return r.Stack0[0:i]
<a id="L103"></a><span class="ln">   103</span>			}
<a id="L104"></a><span class="ln">   104</span>		}
<a id="L105"></a><span class="ln">   105</span>		return r.Stack0[0:]
<a id="L106"></a><span class="ln">   106</span>	}
<a id="L107"></a><span class="ln">   107</span>	
<a id="L108"></a><span class="ln">   108</span>	<span class="comment">// ThreadCreateProfile returns n, the number of records in the thread creation profile.</span>
<a id="L109"></a><span class="ln">   109</span>	<span class="comment">// If len(p) &gt;= n, ThreadCreateProfile copies the profile into p and returns n, true.</span>
<a id="L110"></a><span class="ln">   110</span>	<span class="comment">// If len(p) &lt; n, ThreadCreateProfile does not change p and returns n, false.</span>
<a id="L111"></a><span class="ln">   111</span>	<span class="comment">//</span>
<a id="L112"></a><span class="ln">   112</span>	<span class="comment">// Most clients should use the runtime/pprof package instead</span>
<a id="L113"></a><span class="ln">   113</span>	<span class="comment">// of calling ThreadCreateProfile directly.</span>
<a id="L114"></a><span class="ln">   114</span>	func ThreadCreateProfile(p []StackRecord) (n int, ok bool)
<a id="L115"></a><span class="ln">   115</span>	
<a id="L116"></a><span class="ln">   116</span>	<span class="comment">// GoroutineProfile returns n, the number of records in the active goroutine stack profile.</span>
<a id="L117"></a><span class="ln">   117</span>	<span class="comment">// If len(p) &gt;= n, GoroutineProfile copies the profile into p and returns n, true.</span>
<a id="L118"></a><span class="ln">   118</span>	<span class="comment">// If len(p) &lt; n, GoroutineProfile does not change p and returns n, false.</span>
<a id="L119"></a><span class="ln">   119</span>	<span class="comment">//</span>
<a id="L120"></a><span class="ln">   120</span>	<span class="comment">// Most clients should use the runtime/pprof package instead</span>
<a id="L121"></a><span class="ln">   121</span>	<span class="comment">// of calling GoroutineProfile directly.</span>
<a id="L122"></a><span class="ln">   122</span>	func GoroutineProfile(p []StackRecord) (n int, ok bool)
<a id="L123"></a><span class="ln">   123</span>	
<a id="L124"></a><span class="ln">   124</span>	<span class="comment">// CPUProfile returns the next chunk of binary CPU profiling stack trace data,</span>
<a id="L125"></a><span class="ln">   125</span>	<span class="comment">// blocking until data is available.  If profiling is turned off and all the profile</span>
<a id="L126"></a><span class="ln">   126</span>	<span class="comment">// data accumulated while it was on has been returned, CPUProfile returns nil.</span>
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// The caller must save the returned data before calling CPUProfile again.</span>
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// Most clients should use the runtime/pprof package or</span>
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// the testing package&#39;s -test.cpuprofile flag instead of calling</span>
<a id="L130"></a><span class="ln">   130</span>	<span class="comment">// CPUProfile directly.</span>
<a id="L131"></a><span class="ln">   131</span>	func CPUProfile() []byte
<a id="L132"></a><span class="ln">   132</span>	
<a id="L133"></a><span class="ln">   133</span>	<span class="comment">// SetCPUProfileRate sets the CPU profiling rate to hz samples per second.</span>
<a id="L134"></a><span class="ln">   134</span>	<span class="comment">// If hz &lt;= 0, SetCPUProfileRate turns off profiling.</span>
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">// If the profiler is on, the rate cannot be changed without first turning it off.</span>
<a id="L136"></a><span class="ln">   136</span>	<span class="comment">// Most clients should use the runtime/pprof package or</span>
<a id="L137"></a><span class="ln">   137</span>	<span class="comment">// the testing package&#39;s -test.cpuprofile flag instead of calling</span>
<a id="L138"></a><span class="ln">   138</span>	<span class="comment">// SetCPUProfileRate directly.</span>
<a id="L139"></a><span class="ln">   139</span>	func SetCPUProfileRate(hz int)
<a id="L140"></a><span class="ln">   140</span>	
<a id="L141"></a><span class="ln">   141</span>	<span class="comment">// Stack formats a stack trace of the calling goroutine into buf</span>
<a id="L142"></a><span class="ln">   142</span>	<span class="comment">// and returns the number of bytes written to buf.</span>
<a id="L143"></a><span class="ln">   143</span>	<span class="comment">// If all is true, Stack formats stack traces of all other goroutines</span>
<a id="L144"></a><span class="ln">   144</span>	<span class="comment">// into buf after the trace for the current goroutine.</span>
<a id="L145"></a><span class="ln">   145</span>	func Stack(buf []byte, all bool) int
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

