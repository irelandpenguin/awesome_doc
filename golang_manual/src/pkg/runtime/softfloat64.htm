<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/runtime/softfloat64.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/runtime/softfloat64.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Software IEEE754 64-bit floating point.</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// Only referred to (and thus linked in) by arm port</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// and by tests in this directory.</span>
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	package runtime
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	const (
<a id="L12"></a><span class="ln">    12</span>		mantbits64 uint = 52
<a id="L13"></a><span class="ln">    13</span>		expbits64  uint = 11
<a id="L14"></a><span class="ln">    14</span>		bias64          = -1&lt;&lt;(expbits64-1) + 1
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>		nan64 uint64 = (1&lt;&lt;expbits64-1)&lt;&lt;mantbits64 + 1
<a id="L17"></a><span class="ln">    17</span>		inf64 uint64 = (1&lt;&lt;expbits64 - 1) &lt;&lt; mantbits64
<a id="L18"></a><span class="ln">    18</span>		neg64 uint64 = 1 &lt;&lt; (expbits64 + mantbits64)
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>		mantbits32 uint = 23
<a id="L21"></a><span class="ln">    21</span>		expbits32  uint = 8
<a id="L22"></a><span class="ln">    22</span>		bias32          = -1&lt;&lt;(expbits32-1) + 1
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>		nan32 uint32 = (1&lt;&lt;expbits32-1)&lt;&lt;mantbits32 + 1
<a id="L25"></a><span class="ln">    25</span>		inf32 uint32 = (1&lt;&lt;expbits32 - 1) &lt;&lt; mantbits32
<a id="L26"></a><span class="ln">    26</span>		neg32 uint32 = 1 &lt;&lt; (expbits32 + mantbits32)
<a id="L27"></a><span class="ln">    27</span>	)
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>	func funpack64(f uint64) (sign, mant uint64, exp int, inf, nan bool) {
<a id="L30"></a><span class="ln">    30</span>		sign = f &amp; (1 &lt;&lt; (mantbits64 + expbits64))
<a id="L31"></a><span class="ln">    31</span>		mant = f &amp; (1&lt;&lt;mantbits64 - 1)
<a id="L32"></a><span class="ln">    32</span>		exp = int(f&gt;&gt;mantbits64) &amp; (1&lt;&lt;expbits64 - 1)
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>		switch exp {
<a id="L35"></a><span class="ln">    35</span>		case 1&lt;&lt;expbits64 - 1:
<a id="L36"></a><span class="ln">    36</span>			if mant != 0 {
<a id="L37"></a><span class="ln">    37</span>				nan = true
<a id="L38"></a><span class="ln">    38</span>				return
<a id="L39"></a><span class="ln">    39</span>			}
<a id="L40"></a><span class="ln">    40</span>			inf = true
<a id="L41"></a><span class="ln">    41</span>			return
<a id="L42"></a><span class="ln">    42</span>	
<a id="L43"></a><span class="ln">    43</span>		case 0:
<a id="L44"></a><span class="ln">    44</span>			<span class="comment">// denormalized</span>
<a id="L45"></a><span class="ln">    45</span>			if mant != 0 {
<a id="L46"></a><span class="ln">    46</span>				exp += bias64 + 1
<a id="L47"></a><span class="ln">    47</span>				for mant &lt; 1&lt;&lt;mantbits64 {
<a id="L48"></a><span class="ln">    48</span>					mant &lt;&lt;= 1
<a id="L49"></a><span class="ln">    49</span>					exp--
<a id="L50"></a><span class="ln">    50</span>				}
<a id="L51"></a><span class="ln">    51</span>			}
<a id="L52"></a><span class="ln">    52</span>	
<a id="L53"></a><span class="ln">    53</span>		default:
<a id="L54"></a><span class="ln">    54</span>			<span class="comment">// add implicit top bit</span>
<a id="L55"></a><span class="ln">    55</span>			mant |= 1 &lt;&lt; mantbits64
<a id="L56"></a><span class="ln">    56</span>			exp += bias64
<a id="L57"></a><span class="ln">    57</span>		}
<a id="L58"></a><span class="ln">    58</span>		return
<a id="L59"></a><span class="ln">    59</span>	}
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>	func funpack32(f uint32) (sign, mant uint32, exp int, inf, nan bool) {
<a id="L62"></a><span class="ln">    62</span>		sign = f &amp; (1 &lt;&lt; (mantbits32 + expbits32))
<a id="L63"></a><span class="ln">    63</span>		mant = f &amp; (1&lt;&lt;mantbits32 - 1)
<a id="L64"></a><span class="ln">    64</span>		exp = int(f&gt;&gt;mantbits32) &amp; (1&lt;&lt;expbits32 - 1)
<a id="L65"></a><span class="ln">    65</span>	
<a id="L66"></a><span class="ln">    66</span>		switch exp {
<a id="L67"></a><span class="ln">    67</span>		case 1&lt;&lt;expbits32 - 1:
<a id="L68"></a><span class="ln">    68</span>			if mant != 0 {
<a id="L69"></a><span class="ln">    69</span>				nan = true
<a id="L70"></a><span class="ln">    70</span>				return
<a id="L71"></a><span class="ln">    71</span>			}
<a id="L72"></a><span class="ln">    72</span>			inf = true
<a id="L73"></a><span class="ln">    73</span>			return
<a id="L74"></a><span class="ln">    74</span>	
<a id="L75"></a><span class="ln">    75</span>		case 0:
<a id="L76"></a><span class="ln">    76</span>			<span class="comment">// denormalized</span>
<a id="L77"></a><span class="ln">    77</span>			if mant != 0 {
<a id="L78"></a><span class="ln">    78</span>				exp += bias32 + 1
<a id="L79"></a><span class="ln">    79</span>				for mant &lt; 1&lt;&lt;mantbits32 {
<a id="L80"></a><span class="ln">    80</span>					mant &lt;&lt;= 1
<a id="L81"></a><span class="ln">    81</span>					exp--
<a id="L82"></a><span class="ln">    82</span>				}
<a id="L83"></a><span class="ln">    83</span>			}
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>		default:
<a id="L86"></a><span class="ln">    86</span>			<span class="comment">// add implicit top bit</span>
<a id="L87"></a><span class="ln">    87</span>			mant |= 1 &lt;&lt; mantbits32
<a id="L88"></a><span class="ln">    88</span>			exp += bias32
<a id="L89"></a><span class="ln">    89</span>		}
<a id="L90"></a><span class="ln">    90</span>		return
<a id="L91"></a><span class="ln">    91</span>	}
<a id="L92"></a><span class="ln">    92</span>	
<a id="L93"></a><span class="ln">    93</span>	func fpack64(sign, mant uint64, exp int, trunc uint64) uint64 {
<a id="L94"></a><span class="ln">    94</span>		mant0, exp0, trunc0 := mant, exp, trunc
<a id="L95"></a><span class="ln">    95</span>		if mant == 0 {
<a id="L96"></a><span class="ln">    96</span>			return sign
<a id="L97"></a><span class="ln">    97</span>		}
<a id="L98"></a><span class="ln">    98</span>		for mant &lt; 1&lt;&lt;mantbits64 {
<a id="L99"></a><span class="ln">    99</span>			mant &lt;&lt;= 1
<a id="L100"></a><span class="ln">   100</span>			exp--
<a id="L101"></a><span class="ln">   101</span>		}
<a id="L102"></a><span class="ln">   102</span>		for mant &gt;= 4&lt;&lt;mantbits64 {
<a id="L103"></a><span class="ln">   103</span>			trunc |= mant &amp; 1
<a id="L104"></a><span class="ln">   104</span>			mant &gt;&gt;= 1
<a id="L105"></a><span class="ln">   105</span>			exp++
<a id="L106"></a><span class="ln">   106</span>		}
<a id="L107"></a><span class="ln">   107</span>		if mant &gt;= 2&lt;&lt;mantbits64 {
<a id="L108"></a><span class="ln">   108</span>			if mant&amp;1 != 0 &amp;&amp; (trunc != 0 || mant&amp;2 != 0) {
<a id="L109"></a><span class="ln">   109</span>				mant++
<a id="L110"></a><span class="ln">   110</span>				if mant &gt;= 4&lt;&lt;mantbits64 {
<a id="L111"></a><span class="ln">   111</span>					mant &gt;&gt;= 1
<a id="L112"></a><span class="ln">   112</span>					exp++
<a id="L113"></a><span class="ln">   113</span>				}
<a id="L114"></a><span class="ln">   114</span>			}
<a id="L115"></a><span class="ln">   115</span>			mant &gt;&gt;= 1
<a id="L116"></a><span class="ln">   116</span>			exp++
<a id="L117"></a><span class="ln">   117</span>		}
<a id="L118"></a><span class="ln">   118</span>		if exp &gt;= 1&lt;&lt;expbits64-1+bias64 {
<a id="L119"></a><span class="ln">   119</span>			return sign ^ inf64
<a id="L120"></a><span class="ln">   120</span>		}
<a id="L121"></a><span class="ln">   121</span>		if exp &lt; bias64+1 {
<a id="L122"></a><span class="ln">   122</span>			if exp &lt; bias64-int(mantbits64) {
<a id="L123"></a><span class="ln">   123</span>				return sign | 0
<a id="L124"></a><span class="ln">   124</span>			}
<a id="L125"></a><span class="ln">   125</span>			<span class="comment">// repeat expecting denormal</span>
<a id="L126"></a><span class="ln">   126</span>			mant, exp, trunc = mant0, exp0, trunc0
<a id="L127"></a><span class="ln">   127</span>			for exp &lt; bias64 {
<a id="L128"></a><span class="ln">   128</span>				trunc |= mant &amp; 1
<a id="L129"></a><span class="ln">   129</span>				mant &gt;&gt;= 1
<a id="L130"></a><span class="ln">   130</span>				exp++
<a id="L131"></a><span class="ln">   131</span>			}
<a id="L132"></a><span class="ln">   132</span>			if mant&amp;1 != 0 &amp;&amp; (trunc != 0 || mant&amp;2 != 0) {
<a id="L133"></a><span class="ln">   133</span>				mant++
<a id="L134"></a><span class="ln">   134</span>			}
<a id="L135"></a><span class="ln">   135</span>			mant &gt;&gt;= 1
<a id="L136"></a><span class="ln">   136</span>			exp++
<a id="L137"></a><span class="ln">   137</span>			if mant &lt; 1&lt;&lt;mantbits64 {
<a id="L138"></a><span class="ln">   138</span>				return sign | mant
<a id="L139"></a><span class="ln">   139</span>			}
<a id="L140"></a><span class="ln">   140</span>		}
<a id="L141"></a><span class="ln">   141</span>		return sign | uint64(exp-bias64)&lt;&lt;mantbits64 | mant&amp;(1&lt;&lt;mantbits64-1)
<a id="L142"></a><span class="ln">   142</span>	}
<a id="L143"></a><span class="ln">   143</span>	
<a id="L144"></a><span class="ln">   144</span>	func fpack32(sign, mant uint32, exp int, trunc uint32) uint32 {
<a id="L145"></a><span class="ln">   145</span>		mant0, exp0, trunc0 := mant, exp, trunc
<a id="L146"></a><span class="ln">   146</span>		if mant == 0 {
<a id="L147"></a><span class="ln">   147</span>			return sign
<a id="L148"></a><span class="ln">   148</span>		}
<a id="L149"></a><span class="ln">   149</span>		for mant &lt; 1&lt;&lt;mantbits32 {
<a id="L150"></a><span class="ln">   150</span>			mant &lt;&lt;= 1
<a id="L151"></a><span class="ln">   151</span>			exp--
<a id="L152"></a><span class="ln">   152</span>		}
<a id="L153"></a><span class="ln">   153</span>		for mant &gt;= 4&lt;&lt;mantbits32 {
<a id="L154"></a><span class="ln">   154</span>			trunc |= mant &amp; 1
<a id="L155"></a><span class="ln">   155</span>			mant &gt;&gt;= 1
<a id="L156"></a><span class="ln">   156</span>			exp++
<a id="L157"></a><span class="ln">   157</span>		}
<a id="L158"></a><span class="ln">   158</span>		if mant &gt;= 2&lt;&lt;mantbits32 {
<a id="L159"></a><span class="ln">   159</span>			if mant&amp;1 != 0 &amp;&amp; (trunc != 0 || mant&amp;2 != 0) {
<a id="L160"></a><span class="ln">   160</span>				mant++
<a id="L161"></a><span class="ln">   161</span>				if mant &gt;= 4&lt;&lt;mantbits32 {
<a id="L162"></a><span class="ln">   162</span>					mant &gt;&gt;= 1
<a id="L163"></a><span class="ln">   163</span>					exp++
<a id="L164"></a><span class="ln">   164</span>				}
<a id="L165"></a><span class="ln">   165</span>			}
<a id="L166"></a><span class="ln">   166</span>			mant &gt;&gt;= 1
<a id="L167"></a><span class="ln">   167</span>			exp++
<a id="L168"></a><span class="ln">   168</span>		}
<a id="L169"></a><span class="ln">   169</span>		if exp &gt;= 1&lt;&lt;expbits32-1+bias32 {
<a id="L170"></a><span class="ln">   170</span>			return sign ^ inf32
<a id="L171"></a><span class="ln">   171</span>		}
<a id="L172"></a><span class="ln">   172</span>		if exp &lt; bias32+1 {
<a id="L173"></a><span class="ln">   173</span>			if exp &lt; bias32-int(mantbits32) {
<a id="L174"></a><span class="ln">   174</span>				return sign | 0
<a id="L175"></a><span class="ln">   175</span>			}
<a id="L176"></a><span class="ln">   176</span>			<span class="comment">// repeat expecting denormal</span>
<a id="L177"></a><span class="ln">   177</span>			mant, exp, trunc = mant0, exp0, trunc0
<a id="L178"></a><span class="ln">   178</span>			for exp &lt; bias32 {
<a id="L179"></a><span class="ln">   179</span>				trunc |= mant &amp; 1
<a id="L180"></a><span class="ln">   180</span>				mant &gt;&gt;= 1
<a id="L181"></a><span class="ln">   181</span>				exp++
<a id="L182"></a><span class="ln">   182</span>			}
<a id="L183"></a><span class="ln">   183</span>			if mant&amp;1 != 0 &amp;&amp; (trunc != 0 || mant&amp;2 != 0) {
<a id="L184"></a><span class="ln">   184</span>				mant++
<a id="L185"></a><span class="ln">   185</span>			}
<a id="L186"></a><span class="ln">   186</span>			mant &gt;&gt;= 1
<a id="L187"></a><span class="ln">   187</span>			exp++
<a id="L188"></a><span class="ln">   188</span>			if mant &lt; 1&lt;&lt;mantbits32 {
<a id="L189"></a><span class="ln">   189</span>				return sign | mant
<a id="L190"></a><span class="ln">   190</span>			}
<a id="L191"></a><span class="ln">   191</span>		}
<a id="L192"></a><span class="ln">   192</span>		return sign | uint32(exp-bias32)&lt;&lt;mantbits32 | mant&amp;(1&lt;&lt;mantbits32-1)
<a id="L193"></a><span class="ln">   193</span>	}
<a id="L194"></a><span class="ln">   194</span>	
<a id="L195"></a><span class="ln">   195</span>	func fadd64(f, g uint64) uint64 {
<a id="L196"></a><span class="ln">   196</span>		fs, fm, fe, fi, fn := funpack64(f)
<a id="L197"></a><span class="ln">   197</span>		gs, gm, ge, gi, gn := funpack64(g)
<a id="L198"></a><span class="ln">   198</span>	
<a id="L199"></a><span class="ln">   199</span>		<span class="comment">// Special cases.</span>
<a id="L200"></a><span class="ln">   200</span>		switch {
<a id="L201"></a><span class="ln">   201</span>		case fn || gn: <span class="comment">// NaN + x or x + NaN = NaN</span>
<a id="L202"></a><span class="ln">   202</span>			return nan64
<a id="L203"></a><span class="ln">   203</span>	
<a id="L204"></a><span class="ln">   204</span>		case fi &amp;&amp; gi &amp;&amp; fs != gs: <span class="comment">// +Inf + -Inf or -Inf + +Inf = NaN</span>
<a id="L205"></a><span class="ln">   205</span>			return nan64
<a id="L206"></a><span class="ln">   206</span>	
<a id="L207"></a><span class="ln">   207</span>		case fi: <span class="comment">// ±Inf + g = ±Inf</span>
<a id="L208"></a><span class="ln">   208</span>			return f
<a id="L209"></a><span class="ln">   209</span>	
<a id="L210"></a><span class="ln">   210</span>		case gi: <span class="comment">// f + ±Inf = ±Inf</span>
<a id="L211"></a><span class="ln">   211</span>			return g
<a id="L212"></a><span class="ln">   212</span>	
<a id="L213"></a><span class="ln">   213</span>		case fm == 0 &amp;&amp; gm == 0 &amp;&amp; fs != 0 &amp;&amp; gs != 0: <span class="comment">// -0 + -0 = -0</span>
<a id="L214"></a><span class="ln">   214</span>			return f
<a id="L215"></a><span class="ln">   215</span>	
<a id="L216"></a><span class="ln">   216</span>		case fm == 0: <span class="comment">// 0 + g = g but 0 + -0 = +0</span>
<a id="L217"></a><span class="ln">   217</span>			if gm == 0 {
<a id="L218"></a><span class="ln">   218</span>				g ^= gs
<a id="L219"></a><span class="ln">   219</span>			}
<a id="L220"></a><span class="ln">   220</span>			return g
<a id="L221"></a><span class="ln">   221</span>	
<a id="L222"></a><span class="ln">   222</span>		case gm == 0: <span class="comment">// f + 0 = f</span>
<a id="L223"></a><span class="ln">   223</span>			return f
<a id="L224"></a><span class="ln">   224</span>	
<a id="L225"></a><span class="ln">   225</span>		}
<a id="L226"></a><span class="ln">   226</span>	
<a id="L227"></a><span class="ln">   227</span>		if fe &lt; ge || fe == ge &amp;&amp; fm &lt; gm {
<a id="L228"></a><span class="ln">   228</span>			f, g, fs, fm, fe, gs, gm, ge = g, f, gs, gm, ge, fs, fm, fe
<a id="L229"></a><span class="ln">   229</span>		}
<a id="L230"></a><span class="ln">   230</span>	
<a id="L231"></a><span class="ln">   231</span>		shift := uint(fe - ge)
<a id="L232"></a><span class="ln">   232</span>		fm &lt;&lt;= 2
<a id="L233"></a><span class="ln">   233</span>		gm &lt;&lt;= 2
<a id="L234"></a><span class="ln">   234</span>		trunc := gm &amp; (1&lt;&lt;shift - 1)
<a id="L235"></a><span class="ln">   235</span>		gm &gt;&gt;= shift
<a id="L236"></a><span class="ln">   236</span>		if fs == gs {
<a id="L237"></a><span class="ln">   237</span>			fm += gm
<a id="L238"></a><span class="ln">   238</span>		} else {
<a id="L239"></a><span class="ln">   239</span>			fm -= gm
<a id="L240"></a><span class="ln">   240</span>			if trunc != 0 {
<a id="L241"></a><span class="ln">   241</span>				fm--
<a id="L242"></a><span class="ln">   242</span>			}
<a id="L243"></a><span class="ln">   243</span>		}
<a id="L244"></a><span class="ln">   244</span>		if fm == 0 {
<a id="L245"></a><span class="ln">   245</span>			fs = 0
<a id="L246"></a><span class="ln">   246</span>		}
<a id="L247"></a><span class="ln">   247</span>		return fpack64(fs, fm, fe-2, trunc)
<a id="L248"></a><span class="ln">   248</span>	}
<a id="L249"></a><span class="ln">   249</span>	
<a id="L250"></a><span class="ln">   250</span>	func fsub64(f, g uint64) uint64 {
<a id="L251"></a><span class="ln">   251</span>		return fadd64(f, fneg64(g))
<a id="L252"></a><span class="ln">   252</span>	}
<a id="L253"></a><span class="ln">   253</span>	
<a id="L254"></a><span class="ln">   254</span>	func fneg64(f uint64) uint64 {
<a id="L255"></a><span class="ln">   255</span>		return f ^ (1 &lt;&lt; (mantbits64 + expbits64))
<a id="L256"></a><span class="ln">   256</span>	}
<a id="L257"></a><span class="ln">   257</span>	
<a id="L258"></a><span class="ln">   258</span>	func fmul64(f, g uint64) uint64 {
<a id="L259"></a><span class="ln">   259</span>		fs, fm, fe, fi, fn := funpack64(f)
<a id="L260"></a><span class="ln">   260</span>		gs, gm, ge, gi, gn := funpack64(g)
<a id="L261"></a><span class="ln">   261</span>	
<a id="L262"></a><span class="ln">   262</span>		<span class="comment">// Special cases.</span>
<a id="L263"></a><span class="ln">   263</span>		switch {
<a id="L264"></a><span class="ln">   264</span>		case fn || gn: <span class="comment">// NaN * g or f * NaN = NaN</span>
<a id="L265"></a><span class="ln">   265</span>			return nan64
<a id="L266"></a><span class="ln">   266</span>	
<a id="L267"></a><span class="ln">   267</span>		case fi &amp;&amp; gi: <span class="comment">// Inf * Inf = Inf (with sign adjusted)</span>
<a id="L268"></a><span class="ln">   268</span>			return f ^ gs
<a id="L269"></a><span class="ln">   269</span>	
<a id="L270"></a><span class="ln">   270</span>		case fi &amp;&amp; gm == 0, fm == 0 &amp;&amp; gi: <span class="comment">// 0 * Inf = Inf * 0 = NaN</span>
<a id="L271"></a><span class="ln">   271</span>			return nan64
<a id="L272"></a><span class="ln">   272</span>	
<a id="L273"></a><span class="ln">   273</span>		case fm == 0: <span class="comment">// 0 * x = 0 (with sign adjusted)</span>
<a id="L274"></a><span class="ln">   274</span>			return f ^ gs
<a id="L275"></a><span class="ln">   275</span>	
<a id="L276"></a><span class="ln">   276</span>		case gm == 0: <span class="comment">// x * 0 = 0 (with sign adjusted)</span>
<a id="L277"></a><span class="ln">   277</span>			return g ^ fs
<a id="L278"></a><span class="ln">   278</span>		}
<a id="L279"></a><span class="ln">   279</span>	
<a id="L280"></a><span class="ln">   280</span>		<span class="comment">// 53-bit * 53-bit = 107- or 108-bit</span>
<a id="L281"></a><span class="ln">   281</span>		lo, hi := mullu(fm, gm)
<a id="L282"></a><span class="ln">   282</span>		shift := mantbits64 - 1
<a id="L283"></a><span class="ln">   283</span>		trunc := lo &amp; (1&lt;&lt;shift - 1)
<a id="L284"></a><span class="ln">   284</span>		mant := hi&lt;&lt;(64-shift) | lo&gt;&gt;shift
<a id="L285"></a><span class="ln">   285</span>		return fpack64(fs^gs, mant, fe+ge-1, trunc)
<a id="L286"></a><span class="ln">   286</span>	}
<a id="L287"></a><span class="ln">   287</span>	
<a id="L288"></a><span class="ln">   288</span>	func fdiv64(f, g uint64) uint64 {
<a id="L289"></a><span class="ln">   289</span>		fs, fm, fe, fi, fn := funpack64(f)
<a id="L290"></a><span class="ln">   290</span>		gs, gm, ge, gi, gn := funpack64(g)
<a id="L291"></a><span class="ln">   291</span>	
<a id="L292"></a><span class="ln">   292</span>		<span class="comment">// Special cases.</span>
<a id="L293"></a><span class="ln">   293</span>		switch {
<a id="L294"></a><span class="ln">   294</span>		case fn || gn: <span class="comment">// NaN / g = f / NaN = NaN</span>
<a id="L295"></a><span class="ln">   295</span>			return nan64
<a id="L296"></a><span class="ln">   296</span>	
<a id="L297"></a><span class="ln">   297</span>		case fi &amp;&amp; gi: <span class="comment">// ±Inf / ±Inf = NaN</span>
<a id="L298"></a><span class="ln">   298</span>			return nan64
<a id="L299"></a><span class="ln">   299</span>	
<a id="L300"></a><span class="ln">   300</span>		case !fi &amp;&amp; !gi &amp;&amp; fm == 0 &amp;&amp; gm == 0: <span class="comment">// 0 / 0 = NaN</span>
<a id="L301"></a><span class="ln">   301</span>			return nan64
<a id="L302"></a><span class="ln">   302</span>	
<a id="L303"></a><span class="ln">   303</span>		case fi, !gi &amp;&amp; gm == 0: <span class="comment">// Inf / g = f / 0 = Inf</span>
<a id="L304"></a><span class="ln">   304</span>			return fs ^ gs ^ inf64
<a id="L305"></a><span class="ln">   305</span>	
<a id="L306"></a><span class="ln">   306</span>		case gi, fm == 0: <span class="comment">// f / Inf = 0 / g = Inf</span>
<a id="L307"></a><span class="ln">   307</span>			return fs ^ gs ^ 0
<a id="L308"></a><span class="ln">   308</span>		}
<a id="L309"></a><span class="ln">   309</span>		_, _, _, _ = fi, fn, gi, gn
<a id="L310"></a><span class="ln">   310</span>	
<a id="L311"></a><span class="ln">   311</span>		<span class="comment">// 53-bit&lt;&lt;54 / 53-bit = 53- or 54-bit.</span>
<a id="L312"></a><span class="ln">   312</span>		shift := mantbits64 + 2
<a id="L313"></a><span class="ln">   313</span>		q, r := divlu(fm&gt;&gt;(64-shift), fm&lt;&lt;shift, gm)
<a id="L314"></a><span class="ln">   314</span>		return fpack64(fs^gs, q, fe-ge-2, r)
<a id="L315"></a><span class="ln">   315</span>	}
<a id="L316"></a><span class="ln">   316</span>	
<a id="L317"></a><span class="ln">   317</span>	func f64to32(f uint64) uint32 {
<a id="L318"></a><span class="ln">   318</span>		fs, fm, fe, fi, fn := funpack64(f)
<a id="L319"></a><span class="ln">   319</span>		if fn {
<a id="L320"></a><span class="ln">   320</span>			return nan32
<a id="L321"></a><span class="ln">   321</span>		}
<a id="L322"></a><span class="ln">   322</span>		fs32 := uint32(fs &gt;&gt; 32)
<a id="L323"></a><span class="ln">   323</span>		if fi {
<a id="L324"></a><span class="ln">   324</span>			return fs32 ^ inf32
<a id="L325"></a><span class="ln">   325</span>		}
<a id="L326"></a><span class="ln">   326</span>		const d = mantbits64 - mantbits32 - 1
<a id="L327"></a><span class="ln">   327</span>		return fpack32(fs32, uint32(fm&gt;&gt;d), fe-1, uint32(fm&amp;(1&lt;&lt;d-1)))
<a id="L328"></a><span class="ln">   328</span>	}
<a id="L329"></a><span class="ln">   329</span>	
<a id="L330"></a><span class="ln">   330</span>	func f32to64(f uint32) uint64 {
<a id="L331"></a><span class="ln">   331</span>		const d = mantbits64 - mantbits32
<a id="L332"></a><span class="ln">   332</span>		fs, fm, fe, fi, fn := funpack32(f)
<a id="L333"></a><span class="ln">   333</span>		if fn {
<a id="L334"></a><span class="ln">   334</span>			return nan64
<a id="L335"></a><span class="ln">   335</span>		}
<a id="L336"></a><span class="ln">   336</span>		fs64 := uint64(fs) &lt;&lt; 32
<a id="L337"></a><span class="ln">   337</span>		if fi {
<a id="L338"></a><span class="ln">   338</span>			return fs64 ^ inf64
<a id="L339"></a><span class="ln">   339</span>		}
<a id="L340"></a><span class="ln">   340</span>		return fpack64(fs64, uint64(fm)&lt;&lt;d, fe, 0)
<a id="L341"></a><span class="ln">   341</span>	}
<a id="L342"></a><span class="ln">   342</span>	
<a id="L343"></a><span class="ln">   343</span>	func fcmp64(f, g uint64) (cmp int, isnan bool) {
<a id="L344"></a><span class="ln">   344</span>		fs, fm, _, fi, fn := funpack64(f)
<a id="L345"></a><span class="ln">   345</span>		gs, gm, _, gi, gn := funpack64(g)
<a id="L346"></a><span class="ln">   346</span>	
<a id="L347"></a><span class="ln">   347</span>		switch {
<a id="L348"></a><span class="ln">   348</span>		case fn, gn: <span class="comment">// flag NaN</span>
<a id="L349"></a><span class="ln">   349</span>			return 0, true
<a id="L350"></a><span class="ln">   350</span>	
<a id="L351"></a><span class="ln">   351</span>		case !fi &amp;&amp; !gi &amp;&amp; fm == 0 &amp;&amp; gm == 0: <span class="comment">// ±0 == ±0</span>
<a id="L352"></a><span class="ln">   352</span>			return 0, false
<a id="L353"></a><span class="ln">   353</span>	
<a id="L354"></a><span class="ln">   354</span>		case fs &gt; gs: <span class="comment">// f &lt; 0, g &gt; 0</span>
<a id="L355"></a><span class="ln">   355</span>			return -1, false
<a id="L356"></a><span class="ln">   356</span>	
<a id="L357"></a><span class="ln">   357</span>		case fs &lt; gs: <span class="comment">// f &gt; 0, g &lt; 0</span>
<a id="L358"></a><span class="ln">   358</span>			return +1, false
<a id="L359"></a><span class="ln">   359</span>	
<a id="L360"></a><span class="ln">   360</span>		<span class="comment">// Same sign, not NaN.</span>
<a id="L361"></a><span class="ln">   361</span>		<span class="comment">// Can compare encodings directly now.</span>
<a id="L362"></a><span class="ln">   362</span>		<span class="comment">// Reverse for sign.</span>
<a id="L363"></a><span class="ln">   363</span>		case fs == 0 &amp;&amp; f &lt; g, fs != 0 &amp;&amp; f &gt; g:
<a id="L364"></a><span class="ln">   364</span>			return -1, false
<a id="L365"></a><span class="ln">   365</span>	
<a id="L366"></a><span class="ln">   366</span>		case fs == 0 &amp;&amp; f &gt; g, fs != 0 &amp;&amp; f &lt; g:
<a id="L367"></a><span class="ln">   367</span>			return +1, false
<a id="L368"></a><span class="ln">   368</span>		}
<a id="L369"></a><span class="ln">   369</span>	
<a id="L370"></a><span class="ln">   370</span>		<span class="comment">// f == g</span>
<a id="L371"></a><span class="ln">   371</span>		return 0, false
<a id="L372"></a><span class="ln">   372</span>	}
<a id="L373"></a><span class="ln">   373</span>	
<a id="L374"></a><span class="ln">   374</span>	func f64toint(f uint64) (val int64, ok bool) {
<a id="L375"></a><span class="ln">   375</span>		fs, fm, fe, fi, fn := funpack64(f)
<a id="L376"></a><span class="ln">   376</span>	
<a id="L377"></a><span class="ln">   377</span>		switch {
<a id="L378"></a><span class="ln">   378</span>		case fi, fn: <span class="comment">// NaN</span>
<a id="L379"></a><span class="ln">   379</span>			return 0, false
<a id="L380"></a><span class="ln">   380</span>	
<a id="L381"></a><span class="ln">   381</span>		case fe &lt; -1: <span class="comment">// f &lt; 0.5</span>
<a id="L382"></a><span class="ln">   382</span>			return 0, false
<a id="L383"></a><span class="ln">   383</span>	
<a id="L384"></a><span class="ln">   384</span>		case fe &gt; 63: <span class="comment">// f &gt;= 2^63</span>
<a id="L385"></a><span class="ln">   385</span>			if fs != 0 &amp;&amp; fm == 0 { <span class="comment">// f == -2^63</span>
<a id="L386"></a><span class="ln">   386</span>				return -1 &lt;&lt; 63, true
<a id="L387"></a><span class="ln">   387</span>			}
<a id="L388"></a><span class="ln">   388</span>			if fs != 0 {
<a id="L389"></a><span class="ln">   389</span>				return 0, false
<a id="L390"></a><span class="ln">   390</span>			}
<a id="L391"></a><span class="ln">   391</span>			return 0, false
<a id="L392"></a><span class="ln">   392</span>		}
<a id="L393"></a><span class="ln">   393</span>	
<a id="L394"></a><span class="ln">   394</span>		for fe &gt; int(mantbits64) {
<a id="L395"></a><span class="ln">   395</span>			fe--
<a id="L396"></a><span class="ln">   396</span>			fm &lt;&lt;= 1
<a id="L397"></a><span class="ln">   397</span>		}
<a id="L398"></a><span class="ln">   398</span>		for fe &lt; int(mantbits64) {
<a id="L399"></a><span class="ln">   399</span>			fe++
<a id="L400"></a><span class="ln">   400</span>			fm &gt;&gt;= 1
<a id="L401"></a><span class="ln">   401</span>		}
<a id="L402"></a><span class="ln">   402</span>		val = int64(fm)
<a id="L403"></a><span class="ln">   403</span>		if fs != 0 {
<a id="L404"></a><span class="ln">   404</span>			val = -val
<a id="L405"></a><span class="ln">   405</span>		}
<a id="L406"></a><span class="ln">   406</span>		return val, true
<a id="L407"></a><span class="ln">   407</span>	}
<a id="L408"></a><span class="ln">   408</span>	
<a id="L409"></a><span class="ln">   409</span>	func fintto64(val int64) (f uint64) {
<a id="L410"></a><span class="ln">   410</span>		fs := uint64(val) &amp; (1 &lt;&lt; 63)
<a id="L411"></a><span class="ln">   411</span>		mant := uint64(val)
<a id="L412"></a><span class="ln">   412</span>		if fs != 0 {
<a id="L413"></a><span class="ln">   413</span>			mant = -mant
<a id="L414"></a><span class="ln">   414</span>		}
<a id="L415"></a><span class="ln">   415</span>		return fpack64(fs, mant, int(mantbits64), 0)
<a id="L416"></a><span class="ln">   416</span>	}
<a id="L417"></a><span class="ln">   417</span>	
<a id="L418"></a><span class="ln">   418</span>	<span class="comment">// 64x64 -&gt; 128 multiply.</span>
<a id="L419"></a><span class="ln">   419</span>	<span class="comment">// adapted from hacker&#39;s delight.</span>
<a id="L420"></a><span class="ln">   420</span>	func mullu(u, v uint64) (lo, hi uint64) {
<a id="L421"></a><span class="ln">   421</span>		const (
<a id="L422"></a><span class="ln">   422</span>			s    = 32
<a id="L423"></a><span class="ln">   423</span>			mask = 1&lt;&lt;s - 1
<a id="L424"></a><span class="ln">   424</span>		)
<a id="L425"></a><span class="ln">   425</span>		u0 := u &amp; mask
<a id="L426"></a><span class="ln">   426</span>		u1 := u &gt;&gt; s
<a id="L427"></a><span class="ln">   427</span>		v0 := v &amp; mask
<a id="L428"></a><span class="ln">   428</span>		v1 := v &gt;&gt; s
<a id="L429"></a><span class="ln">   429</span>		w0 := u0 * v0
<a id="L430"></a><span class="ln">   430</span>		t := u1*v0 + w0&gt;&gt;s
<a id="L431"></a><span class="ln">   431</span>		w1 := t &amp; mask
<a id="L432"></a><span class="ln">   432</span>		w2 := t &gt;&gt; s
<a id="L433"></a><span class="ln">   433</span>		w1 += u0 * v1
<a id="L434"></a><span class="ln">   434</span>		return u * v, u1*v1 + w2 + w1&gt;&gt;s
<a id="L435"></a><span class="ln">   435</span>	}
<a id="L436"></a><span class="ln">   436</span>	
<a id="L437"></a><span class="ln">   437</span>	<span class="comment">// 128/64 -&gt; 64 quotient, 64 remainder.</span>
<a id="L438"></a><span class="ln">   438</span>	<span class="comment">// adapted from hacker&#39;s delight</span>
<a id="L439"></a><span class="ln">   439</span>	func divlu(u1, u0, v uint64) (q, r uint64) {
<a id="L440"></a><span class="ln">   440</span>		const b = 1 &lt;&lt; 32
<a id="L441"></a><span class="ln">   441</span>	
<a id="L442"></a><span class="ln">   442</span>		if u1 &gt;= v {
<a id="L443"></a><span class="ln">   443</span>			return 1&lt;&lt;64 - 1, 1&lt;&lt;64 - 1
<a id="L444"></a><span class="ln">   444</span>		}
<a id="L445"></a><span class="ln">   445</span>	
<a id="L446"></a><span class="ln">   446</span>		<span class="comment">// s = nlz(v); v &lt;&lt;= s</span>
<a id="L447"></a><span class="ln">   447</span>		s := uint(0)
<a id="L448"></a><span class="ln">   448</span>		for v&amp;(1&lt;&lt;63) == 0 {
<a id="L449"></a><span class="ln">   449</span>			s++
<a id="L450"></a><span class="ln">   450</span>			v &lt;&lt;= 1
<a id="L451"></a><span class="ln">   451</span>		}
<a id="L452"></a><span class="ln">   452</span>	
<a id="L453"></a><span class="ln">   453</span>		vn1 := v &gt;&gt; 32
<a id="L454"></a><span class="ln">   454</span>		vn0 := v &amp; (1&lt;&lt;32 - 1)
<a id="L455"></a><span class="ln">   455</span>		un32 := u1&lt;&lt;s | u0&gt;&gt;(64-s)
<a id="L456"></a><span class="ln">   456</span>		un10 := u0 &lt;&lt; s
<a id="L457"></a><span class="ln">   457</span>		un1 := un10 &gt;&gt; 32
<a id="L458"></a><span class="ln">   458</span>		un0 := un10 &amp; (1&lt;&lt;32 - 1)
<a id="L459"></a><span class="ln">   459</span>		q1 := un32 / vn1
<a id="L460"></a><span class="ln">   460</span>		rhat := un32 - q1*vn1
<a id="L461"></a><span class="ln">   461</span>	
<a id="L462"></a><span class="ln">   462</span>	again1:
<a id="L463"></a><span class="ln">   463</span>		if q1 &gt;= b || q1*vn0 &gt; b*rhat+un1 {
<a id="L464"></a><span class="ln">   464</span>			q1--
<a id="L465"></a><span class="ln">   465</span>			rhat += vn1
<a id="L466"></a><span class="ln">   466</span>			if rhat &lt; b {
<a id="L467"></a><span class="ln">   467</span>				goto again1
<a id="L468"></a><span class="ln">   468</span>			}
<a id="L469"></a><span class="ln">   469</span>		}
<a id="L470"></a><span class="ln">   470</span>	
<a id="L471"></a><span class="ln">   471</span>		un21 := un32*b + un1 - q1*v
<a id="L472"></a><span class="ln">   472</span>		q0 := un21 / vn1
<a id="L473"></a><span class="ln">   473</span>		rhat = un21 - q0*vn1
<a id="L474"></a><span class="ln">   474</span>	
<a id="L475"></a><span class="ln">   475</span>	again2:
<a id="L476"></a><span class="ln">   476</span>		if q0 &gt;= b || q0*vn0 &gt; b*rhat+un0 {
<a id="L477"></a><span class="ln">   477</span>			q0--
<a id="L478"></a><span class="ln">   478</span>			rhat += vn1
<a id="L479"></a><span class="ln">   479</span>			if rhat &lt; b {
<a id="L480"></a><span class="ln">   480</span>				goto again2
<a id="L481"></a><span class="ln">   481</span>			}
<a id="L482"></a><span class="ln">   482</span>		}
<a id="L483"></a><span class="ln">   483</span>	
<a id="L484"></a><span class="ln">   484</span>		return q1*b + q0, (un21*b + un0 - q0*v) &gt;&gt; s
<a id="L485"></a><span class="ln">   485</span>	}
<a id="L486"></a><span class="ln">   486</span>	
<a id="L487"></a><span class="ln">   487</span>	<span class="comment">// callable from C</span>
<a id="L488"></a><span class="ln">   488</span>	
<a id="L489"></a><span class="ln">   489</span>	func fadd64c(f, g uint64, ret *uint64)            { *ret = fadd64(f, g) }
<a id="L490"></a><span class="ln">   490</span>	func fsub64c(f, g uint64, ret *uint64)            { *ret = fsub64(f, g) }
<a id="L491"></a><span class="ln">   491</span>	func fmul64c(f, g uint64, ret *uint64)            { *ret = fmul64(f, g) }
<a id="L492"></a><span class="ln">   492</span>	func fdiv64c(f, g uint64, ret *uint64)            { *ret = fdiv64(f, g) }
<a id="L493"></a><span class="ln">   493</span>	func fneg64c(f uint64, ret *uint64)               { *ret = fneg64(f) }
<a id="L494"></a><span class="ln">   494</span>	func f32to64c(f uint32, ret *uint64)              { *ret = f32to64(f) }
<a id="L495"></a><span class="ln">   495</span>	func f64to32c(f uint64, ret *uint32)              { *ret = f64to32(f) }
<a id="L496"></a><span class="ln">   496</span>	func fcmp64c(f, g uint64, ret *int, retnan *bool) { *ret, *retnan = fcmp64(f, g) }
<a id="L497"></a><span class="ln">   497</span>	func fintto64c(val int64, ret *uint64)            { *ret = fintto64(val) }
<a id="L498"></a><span class="ln">   498</span>	func f64tointc(f uint64, ret *int64, retok *bool) { *ret, *retok = f64toint(f) }
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

