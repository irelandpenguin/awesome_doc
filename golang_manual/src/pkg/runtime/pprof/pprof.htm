<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/runtime/pprof/pprof.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/runtime/pprof/pprof.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package pprof writes runtime profiling data in the format expected</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// by the pprof visualization tool.</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// For more information about pprof, see</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// http://code.google.com/p/google-perftools/.</span>
<a id="L9"></a><span class="ln">     9</span>	package pprof
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	import (
<a id="L12"></a><span class="ln">    12</span>		&#34;bufio&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;bytes&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;fmt&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;io&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;runtime&#34;
<a id="L17"></a><span class="ln">    17</span>		&#34;sort&#34;
<a id="L18"></a><span class="ln">    18</span>		&#34;strings&#34;
<a id="L19"></a><span class="ln">    19</span>		&#34;sync&#34;
<a id="L20"></a><span class="ln">    20</span>		&#34;text/tabwriter&#34;
<a id="L21"></a><span class="ln">    21</span>	)
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// BUG(rsc): A bug in the OS X Snow Leopard 64-bit kernel prevents</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// CPU profiling from giving accurate results on that system.</span>
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// A Profile is a collection of stack traces showing the call sequences</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// that led to instances of a particular event, such as allocation.</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// Packages can create and maintain their own profiles; the most common</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// use is for tracking resources that must be explicitly closed, such as files</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// or network connections.</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">//</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// A Profile&#39;s methods can be called from multiple goroutines simultaneously.</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">//</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// Each Profile has a unique name.  A few profiles are predefined:</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//	goroutine    - stack traces of all current goroutines</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">//	heap         - a sampling of all heap allocations</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//	threadcreate - stack traces that led to the creation of new OS threads</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">//</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// These predefine profiles maintain themselves and panic on an explicit</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// Add or Remove method call.</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">//</span>
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">// The CPU profile is not available as a Profile.  It has a special API,</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">// the StartCPUProfile and StopCPUProfile functions, because it streams</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">// output to a writer during profiling.</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">//</span>
<a id="L47"></a><span class="ln">    47</span>	type Profile struct {
<a id="L48"></a><span class="ln">    48</span>		name  string
<a id="L49"></a><span class="ln">    49</span>		mu    sync.Mutex
<a id="L50"></a><span class="ln">    50</span>		m     map[interface{}][]uintptr
<a id="L51"></a><span class="ln">    51</span>		count func() int
<a id="L52"></a><span class="ln">    52</span>		write func(io.Writer, int) error
<a id="L53"></a><span class="ln">    53</span>	}
<a id="L54"></a><span class="ln">    54</span>	
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// profiles records all registered profiles.</span>
<a id="L56"></a><span class="ln">    56</span>	var profiles struct {
<a id="L57"></a><span class="ln">    57</span>		mu sync.Mutex
<a id="L58"></a><span class="ln">    58</span>		m  map[string]*Profile
<a id="L59"></a><span class="ln">    59</span>	}
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>	var goroutineProfile = &amp;Profile{
<a id="L62"></a><span class="ln">    62</span>		name:  &#34;goroutine&#34;,
<a id="L63"></a><span class="ln">    63</span>		count: countGoroutine,
<a id="L64"></a><span class="ln">    64</span>		write: writeGoroutine,
<a id="L65"></a><span class="ln">    65</span>	}
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>	var threadcreateProfile = &amp;Profile{
<a id="L68"></a><span class="ln">    68</span>		name:  &#34;threadcreate&#34;,
<a id="L69"></a><span class="ln">    69</span>		count: countThreadCreate,
<a id="L70"></a><span class="ln">    70</span>		write: writeThreadCreate,
<a id="L71"></a><span class="ln">    71</span>	}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>	var heapProfile = &amp;Profile{
<a id="L74"></a><span class="ln">    74</span>		name:  &#34;heap&#34;,
<a id="L75"></a><span class="ln">    75</span>		count: countHeap,
<a id="L76"></a><span class="ln">    76</span>		write: writeHeap,
<a id="L77"></a><span class="ln">    77</span>	}
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>	func lockProfiles() {
<a id="L80"></a><span class="ln">    80</span>		profiles.mu.Lock()
<a id="L81"></a><span class="ln">    81</span>		if profiles.m == nil {
<a id="L82"></a><span class="ln">    82</span>			<span class="comment">// Initial built-in profiles.</span>
<a id="L83"></a><span class="ln">    83</span>			profiles.m = map[string]*Profile{
<a id="L84"></a><span class="ln">    84</span>				&#34;goroutine&#34;:    goroutineProfile,
<a id="L85"></a><span class="ln">    85</span>				&#34;threadcreate&#34;: threadcreateProfile,
<a id="L86"></a><span class="ln">    86</span>				&#34;heap&#34;:         heapProfile,
<a id="L87"></a><span class="ln">    87</span>			}
<a id="L88"></a><span class="ln">    88</span>		}
<a id="L89"></a><span class="ln">    89</span>	}
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>	func unlockProfiles() {
<a id="L92"></a><span class="ln">    92</span>		profiles.mu.Unlock()
<a id="L93"></a><span class="ln">    93</span>	}
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">// NewProfile creates a new profile with the given name.</span>
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">// If a profile with that name already exists, NewProfile panics.</span>
<a id="L97"></a><span class="ln">    97</span>	<span class="comment">// The convention is to use a &#39;import/path.&#39; prefix to create</span>
<a id="L98"></a><span class="ln">    98</span>	<span class="comment">// separate name spaces for each package.</span>
<a id="L99"></a><span class="ln">    99</span>	func NewProfile(name string) *Profile {
<a id="L100"></a><span class="ln">   100</span>		lockProfiles()
<a id="L101"></a><span class="ln">   101</span>		defer unlockProfiles()
<a id="L102"></a><span class="ln">   102</span>		if name == &#34;&#34; {
<a id="L103"></a><span class="ln">   103</span>			panic(&#34;pprof: NewProfile with empty name&#34;)
<a id="L104"></a><span class="ln">   104</span>		}
<a id="L105"></a><span class="ln">   105</span>		if profiles.m[name] != nil {
<a id="L106"></a><span class="ln">   106</span>			panic(&#34;pprof: NewProfile name already in use: &#34; + name)
<a id="L107"></a><span class="ln">   107</span>		}
<a id="L108"></a><span class="ln">   108</span>		p := &amp;Profile{
<a id="L109"></a><span class="ln">   109</span>			name: name,
<a id="L110"></a><span class="ln">   110</span>			m:    map[interface{}][]uintptr{},
<a id="L111"></a><span class="ln">   111</span>		}
<a id="L112"></a><span class="ln">   112</span>		profiles.m[name] = p
<a id="L113"></a><span class="ln">   113</span>		return p
<a id="L114"></a><span class="ln">   114</span>	}
<a id="L115"></a><span class="ln">   115</span>	
<a id="L116"></a><span class="ln">   116</span>	<span class="comment">// Lookup returns the profile with the given name, or nil if no such profile exists.</span>
<a id="L117"></a><span class="ln">   117</span>	func Lookup(name string) *Profile {
<a id="L118"></a><span class="ln">   118</span>		lockProfiles()
<a id="L119"></a><span class="ln">   119</span>		defer unlockProfiles()
<a id="L120"></a><span class="ln">   120</span>		return profiles.m[name]
<a id="L121"></a><span class="ln">   121</span>	}
<a id="L122"></a><span class="ln">   122</span>	
<a id="L123"></a><span class="ln">   123</span>	<span class="comment">// Profiles returns a slice of all the known profiles, sorted by name.</span>
<a id="L124"></a><span class="ln">   124</span>	func Profiles() []*Profile {
<a id="L125"></a><span class="ln">   125</span>		lockProfiles()
<a id="L126"></a><span class="ln">   126</span>		defer unlockProfiles()
<a id="L127"></a><span class="ln">   127</span>	
<a id="L128"></a><span class="ln">   128</span>		var all []*Profile
<a id="L129"></a><span class="ln">   129</span>		for _, p := range profiles.m {
<a id="L130"></a><span class="ln">   130</span>			all = append(all, p)
<a id="L131"></a><span class="ln">   131</span>		}
<a id="L132"></a><span class="ln">   132</span>	
<a id="L133"></a><span class="ln">   133</span>		sort.Sort(byName(all))
<a id="L134"></a><span class="ln">   134</span>		return all
<a id="L135"></a><span class="ln">   135</span>	}
<a id="L136"></a><span class="ln">   136</span>	
<a id="L137"></a><span class="ln">   137</span>	type byName []*Profile
<a id="L138"></a><span class="ln">   138</span>	
<a id="L139"></a><span class="ln">   139</span>	func (x byName) Len() int           { return len(x) }
<a id="L140"></a><span class="ln">   140</span>	func (x byName) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }
<a id="L141"></a><span class="ln">   141</span>	func (x byName) Less(i, j int) bool { return x[i].name &lt; x[j].name }
<a id="L142"></a><span class="ln">   142</span>	
<a id="L143"></a><span class="ln">   143</span>	<span class="comment">// Name returns this profile&#39;s name, which can be passed to Lookup to reobtain the profile.</span>
<a id="L144"></a><span class="ln">   144</span>	func (p *Profile) Name() string {
<a id="L145"></a><span class="ln">   145</span>		return p.name
<a id="L146"></a><span class="ln">   146</span>	}
<a id="L147"></a><span class="ln">   147</span>	
<a id="L148"></a><span class="ln">   148</span>	<span class="comment">// Count returns the number of execution stacks currently in the profile.</span>
<a id="L149"></a><span class="ln">   149</span>	func (p *Profile) Count() int {
<a id="L150"></a><span class="ln">   150</span>		p.mu.Lock()
<a id="L151"></a><span class="ln">   151</span>		defer p.mu.Unlock()
<a id="L152"></a><span class="ln">   152</span>		if p.count != nil {
<a id="L153"></a><span class="ln">   153</span>			return p.count()
<a id="L154"></a><span class="ln">   154</span>		}
<a id="L155"></a><span class="ln">   155</span>		return len(p.m)
<a id="L156"></a><span class="ln">   156</span>	}
<a id="L157"></a><span class="ln">   157</span>	
<a id="L158"></a><span class="ln">   158</span>	<span class="comment">// Add adds the current execution stack to the profile, associated with value.</span>
<a id="L159"></a><span class="ln">   159</span>	<span class="comment">// Add stores value in an internal map, so value must be suitable for use as</span>
<a id="L160"></a><span class="ln">   160</span>	<span class="comment">// a map key and will not be garbage collected until the corresponding</span>
<a id="L161"></a><span class="ln">   161</span>	<span class="comment">// call to Remove.  Add panics if the profile already contains a stack for value.</span>
<a id="L162"></a><span class="ln">   162</span>	<span class="comment">//</span>
<a id="L163"></a><span class="ln">   163</span>	<span class="comment">// The skip parameter has the same meaning as runtime.Caller&#39;s skip</span>
<a id="L164"></a><span class="ln">   164</span>	<span class="comment">// and controls where the stack trace begins.  Passing skip=0 begins the</span>
<a id="L165"></a><span class="ln">   165</span>	<span class="comment">// trace in the function calling Add.  For example, given this</span>
<a id="L166"></a><span class="ln">   166</span>	<span class="comment">// execution stack:</span>
<a id="L167"></a><span class="ln">   167</span>	<span class="comment">//</span>
<a id="L168"></a><span class="ln">   168</span>	<span class="comment">//	Add</span>
<a id="L169"></a><span class="ln">   169</span>	<span class="comment">//	called from rpc.NewClient</span>
<a id="L170"></a><span class="ln">   170</span>	<span class="comment">//	called from mypkg.Run</span>
<a id="L171"></a><span class="ln">   171</span>	<span class="comment">//	called from main.main</span>
<a id="L172"></a><span class="ln">   172</span>	<span class="comment">//</span>
<a id="L173"></a><span class="ln">   173</span>	<span class="comment">// Passing skip=0 begins the stack trace at the call to Add inside rpc.NewClient.</span>
<a id="L174"></a><span class="ln">   174</span>	<span class="comment">// Passing skip=1 begins the stack trace at the call to NewClient inside mypkg.Run.</span>
<a id="L175"></a><span class="ln">   175</span>	<span class="comment">//</span>
<a id="L176"></a><span class="ln">   176</span>	func (p *Profile) Add(value interface{}, skip int) {
<a id="L177"></a><span class="ln">   177</span>		if p.name == &#34;&#34; {
<a id="L178"></a><span class="ln">   178</span>			panic(&#34;pprof: use of uninitialized Profile&#34;)
<a id="L179"></a><span class="ln">   179</span>		}
<a id="L180"></a><span class="ln">   180</span>		if p.write != nil {
<a id="L181"></a><span class="ln">   181</span>			panic(&#34;pprof: Add called on built-in Profile &#34; + p.name)
<a id="L182"></a><span class="ln">   182</span>		}
<a id="L183"></a><span class="ln">   183</span>	
<a id="L184"></a><span class="ln">   184</span>		stk := make([]uintptr, 32)
<a id="L185"></a><span class="ln">   185</span>		n := runtime.Callers(skip+1, stk[:])
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>		p.mu.Lock()
<a id="L188"></a><span class="ln">   188</span>		defer p.mu.Unlock()
<a id="L189"></a><span class="ln">   189</span>		if p.m[value] != nil {
<a id="L190"></a><span class="ln">   190</span>			panic(&#34;pprof: Profile.Add of duplicate value&#34;)
<a id="L191"></a><span class="ln">   191</span>		}
<a id="L192"></a><span class="ln">   192</span>		p.m[value] = stk[:n]
<a id="L193"></a><span class="ln">   193</span>	}
<a id="L194"></a><span class="ln">   194</span>	
<a id="L195"></a><span class="ln">   195</span>	<span class="comment">// Remove removes the execution stack associated with value from the profile.</span>
<a id="L196"></a><span class="ln">   196</span>	<span class="comment">// It is a no-op if the value is not in the profile.</span>
<a id="L197"></a><span class="ln">   197</span>	func (p *Profile) Remove(value interface{}) {
<a id="L198"></a><span class="ln">   198</span>		p.mu.Lock()
<a id="L199"></a><span class="ln">   199</span>		defer p.mu.Unlock()
<a id="L200"></a><span class="ln">   200</span>		delete(p.m, value)
<a id="L201"></a><span class="ln">   201</span>	}
<a id="L202"></a><span class="ln">   202</span>	
<a id="L203"></a><span class="ln">   203</span>	<span class="comment">// WriteTo writes a pprof-formatted snapshot of the profile to w.</span>
<a id="L204"></a><span class="ln">   204</span>	<span class="comment">// If a write to w returns an error, WriteTo returns that error.</span>
<a id="L205"></a><span class="ln">   205</span>	<span class="comment">// Otherwise, WriteTo returns nil.</span>
<a id="L206"></a><span class="ln">   206</span>	<span class="comment">//</span>
<a id="L207"></a><span class="ln">   207</span>	<span class="comment">// The debug parameter enables additional output.</span>
<a id="L208"></a><span class="ln">   208</span>	<span class="comment">// Passing debug=0 prints only the hexadecimal addresses that pprof needs.</span>
<a id="L209"></a><span class="ln">   209</span>	<span class="comment">// Passing debug=1 adds comments translating addresses to function names</span>
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// and line numbers, so that a programmer can read the profile without tools.</span>
<a id="L211"></a><span class="ln">   211</span>	<span class="comment">//</span>
<a id="L212"></a><span class="ln">   212</span>	<span class="comment">// The predefined profiles may assign meaning to other debug values;</span>
<a id="L213"></a><span class="ln">   213</span>	<span class="comment">// for example, when printing the &#34;goroutine&#34; profile, debug=2 means to</span>
<a id="L214"></a><span class="ln">   214</span>	<span class="comment">// print the goroutine stacks in the same form that a Go program uses</span>
<a id="L215"></a><span class="ln">   215</span>	<span class="comment">// when dying due to an unrecovered panic.</span>
<a id="L216"></a><span class="ln">   216</span>	func (p *Profile) WriteTo(w io.Writer, debug int) error {
<a id="L217"></a><span class="ln">   217</span>		if p.name == &#34;&#34; {
<a id="L218"></a><span class="ln">   218</span>			panic(&#34;pprof: use of zero Profile&#34;)
<a id="L219"></a><span class="ln">   219</span>		}
<a id="L220"></a><span class="ln">   220</span>		if p.write != nil {
<a id="L221"></a><span class="ln">   221</span>			return p.write(w, debug)
<a id="L222"></a><span class="ln">   222</span>		}
<a id="L223"></a><span class="ln">   223</span>	
<a id="L224"></a><span class="ln">   224</span>		<span class="comment">// Obtain consistent snapshot under lock; then process without lock.</span>
<a id="L225"></a><span class="ln">   225</span>		var all [][]uintptr
<a id="L226"></a><span class="ln">   226</span>		p.mu.Lock()
<a id="L227"></a><span class="ln">   227</span>		for _, stk := range p.m {
<a id="L228"></a><span class="ln">   228</span>			all = append(all, stk)
<a id="L229"></a><span class="ln">   229</span>		}
<a id="L230"></a><span class="ln">   230</span>		p.mu.Unlock()
<a id="L231"></a><span class="ln">   231</span>	
<a id="L232"></a><span class="ln">   232</span>		<span class="comment">// Map order is non-deterministic; make output deterministic.</span>
<a id="L233"></a><span class="ln">   233</span>		sort.Sort(stackProfile(all))
<a id="L234"></a><span class="ln">   234</span>	
<a id="L235"></a><span class="ln">   235</span>		return printCountProfile(w, debug, p.name, stackProfile(all))
<a id="L236"></a><span class="ln">   236</span>	}
<a id="L237"></a><span class="ln">   237</span>	
<a id="L238"></a><span class="ln">   238</span>	type stackProfile [][]uintptr
<a id="L239"></a><span class="ln">   239</span>	
<a id="L240"></a><span class="ln">   240</span>	func (x stackProfile) Len() int              { return len(x) }
<a id="L241"></a><span class="ln">   241</span>	func (x stackProfile) Stack(i int) []uintptr { return x[i] }
<a id="L242"></a><span class="ln">   242</span>	func (x stackProfile) Swap(i, j int)         { x[i], x[j] = x[j], x[i] }
<a id="L243"></a><span class="ln">   243</span>	func (x stackProfile) Less(i, j int) bool {
<a id="L244"></a><span class="ln">   244</span>		t, u := x[i], x[j]
<a id="L245"></a><span class="ln">   245</span>		for k := 0; k &lt; len(t) &amp;&amp; k &lt; len(u); k++ {
<a id="L246"></a><span class="ln">   246</span>			if t[k] != u[k] {
<a id="L247"></a><span class="ln">   247</span>				return t[k] &lt; u[k]
<a id="L248"></a><span class="ln">   248</span>			}
<a id="L249"></a><span class="ln">   249</span>		}
<a id="L250"></a><span class="ln">   250</span>		return len(t) &lt; len(u)
<a id="L251"></a><span class="ln">   251</span>	}
<a id="L252"></a><span class="ln">   252</span>	
<a id="L253"></a><span class="ln">   253</span>	<span class="comment">// A countProfile is a set of stack traces to be printed as counts</span>
<a id="L254"></a><span class="ln">   254</span>	<span class="comment">// grouped by stack trace.  There are multiple implementations:</span>
<a id="L255"></a><span class="ln">   255</span>	<span class="comment">// all that matters is that we can find out how many traces there are</span>
<a id="L256"></a><span class="ln">   256</span>	<span class="comment">// and obtain each trace in turn.</span>
<a id="L257"></a><span class="ln">   257</span>	type countProfile interface {
<a id="L258"></a><span class="ln">   258</span>		Len() int
<a id="L259"></a><span class="ln">   259</span>		Stack(i int) []uintptr
<a id="L260"></a><span class="ln">   260</span>	}
<a id="L261"></a><span class="ln">   261</span>	
<a id="L262"></a><span class="ln">   262</span>	<span class="comment">// printCountProfile prints a countProfile at the specified debug level.</span>
<a id="L263"></a><span class="ln">   263</span>	func printCountProfile(w io.Writer, debug int, name string, p countProfile) error {
<a id="L264"></a><span class="ln">   264</span>		b := bufio.NewWriter(w)
<a id="L265"></a><span class="ln">   265</span>		var tw *tabwriter.Writer
<a id="L266"></a><span class="ln">   266</span>		w = b
<a id="L267"></a><span class="ln">   267</span>		if debug &gt; 0 {
<a id="L268"></a><span class="ln">   268</span>			tw = tabwriter.NewWriter(w, 1, 8, 1, &#39;\t&#39;, 0)
<a id="L269"></a><span class="ln">   269</span>			w = tw
<a id="L270"></a><span class="ln">   270</span>		}
<a id="L271"></a><span class="ln">   271</span>	
<a id="L272"></a><span class="ln">   272</span>		fmt.Fprintf(w, &#34;%s profile: total %d\n&#34;, name, p.Len())
<a id="L273"></a><span class="ln">   273</span>	
<a id="L274"></a><span class="ln">   274</span>		<span class="comment">// Build count of each stack.</span>
<a id="L275"></a><span class="ln">   275</span>		var buf bytes.Buffer
<a id="L276"></a><span class="ln">   276</span>		key := func(stk []uintptr) string {
<a id="L277"></a><span class="ln">   277</span>			buf.Reset()
<a id="L278"></a><span class="ln">   278</span>			fmt.Fprintf(&amp;buf, &#34;@&#34;)
<a id="L279"></a><span class="ln">   279</span>			for _, pc := range stk {
<a id="L280"></a><span class="ln">   280</span>				fmt.Fprintf(&amp;buf, &#34; %#x&#34;, pc)
<a id="L281"></a><span class="ln">   281</span>			}
<a id="L282"></a><span class="ln">   282</span>			return buf.String()
<a id="L283"></a><span class="ln">   283</span>		}
<a id="L284"></a><span class="ln">   284</span>		m := map[string]int{}
<a id="L285"></a><span class="ln">   285</span>		n := p.Len()
<a id="L286"></a><span class="ln">   286</span>		for i := 0; i &lt; n; i++ {
<a id="L287"></a><span class="ln">   287</span>			m[key(p.Stack(i))]++
<a id="L288"></a><span class="ln">   288</span>		}
<a id="L289"></a><span class="ln">   289</span>	
<a id="L290"></a><span class="ln">   290</span>		<span class="comment">// Print stacks, listing count on first occurrence of a unique stack.</span>
<a id="L291"></a><span class="ln">   291</span>		for i := 0; i &lt; n; i++ {
<a id="L292"></a><span class="ln">   292</span>			stk := p.Stack(i)
<a id="L293"></a><span class="ln">   293</span>			s := key(stk)
<a id="L294"></a><span class="ln">   294</span>			if count := m[s]; count != 0 {
<a id="L295"></a><span class="ln">   295</span>				fmt.Fprintf(w, &#34;%d %s\n&#34;, count, s)
<a id="L296"></a><span class="ln">   296</span>				if debug &gt; 0 {
<a id="L297"></a><span class="ln">   297</span>					printStackRecord(w, stk, false)
<a id="L298"></a><span class="ln">   298</span>				}
<a id="L299"></a><span class="ln">   299</span>				delete(m, s)
<a id="L300"></a><span class="ln">   300</span>			}
<a id="L301"></a><span class="ln">   301</span>		}
<a id="L302"></a><span class="ln">   302</span>	
<a id="L303"></a><span class="ln">   303</span>		if tw != nil {
<a id="L304"></a><span class="ln">   304</span>			tw.Flush()
<a id="L305"></a><span class="ln">   305</span>		}
<a id="L306"></a><span class="ln">   306</span>		return b.Flush()
<a id="L307"></a><span class="ln">   307</span>	}
<a id="L308"></a><span class="ln">   308</span>	
<a id="L309"></a><span class="ln">   309</span>	<span class="comment">// printStackRecord prints the function + source line information</span>
<a id="L310"></a><span class="ln">   310</span>	<span class="comment">// for a single stack trace.</span>
<a id="L311"></a><span class="ln">   311</span>	func printStackRecord(w io.Writer, stk []uintptr, allFrames bool) {
<a id="L312"></a><span class="ln">   312</span>		show := allFrames
<a id="L313"></a><span class="ln">   313</span>		for _, pc := range stk {
<a id="L314"></a><span class="ln">   314</span>			f := runtime.FuncForPC(pc)
<a id="L315"></a><span class="ln">   315</span>			if f == nil {
<a id="L316"></a><span class="ln">   316</span>				show = true
<a id="L317"></a><span class="ln">   317</span>				fmt.Fprintf(w, &#34;#\t%#x\n&#34;, pc)
<a id="L318"></a><span class="ln">   318</span>			} else {
<a id="L319"></a><span class="ln">   319</span>				file, line := f.FileLine(pc)
<a id="L320"></a><span class="ln">   320</span>				name := f.Name()
<a id="L321"></a><span class="ln">   321</span>				<span class="comment">// Hide runtime.goexit and any runtime functions at the beginning.</span>
<a id="L322"></a><span class="ln">   322</span>				<span class="comment">// This is useful mainly for allocation traces.</span>
<a id="L323"></a><span class="ln">   323</span>				if name == &#34;runtime.goexit&#34; || !show &amp;&amp; strings.HasPrefix(name, &#34;runtime.&#34;) {
<a id="L324"></a><span class="ln">   324</span>					continue
<a id="L325"></a><span class="ln">   325</span>				}
<a id="L326"></a><span class="ln">   326</span>				show = true
<a id="L327"></a><span class="ln">   327</span>				fmt.Fprintf(w, &#34;#\t%#x\t%s+%#x\t%s:%d\n&#34;, pc, f.Name(), pc-f.Entry(), file, line)
<a id="L328"></a><span class="ln">   328</span>			}
<a id="L329"></a><span class="ln">   329</span>		}
<a id="L330"></a><span class="ln">   330</span>		if !show {
<a id="L331"></a><span class="ln">   331</span>			<span class="comment">// We didn&#39;t print anything; do it again,</span>
<a id="L332"></a><span class="ln">   332</span>			<span class="comment">// and this time include runtime functions.</span>
<a id="L333"></a><span class="ln">   333</span>			printStackRecord(w, stk, true)
<a id="L334"></a><span class="ln">   334</span>			return
<a id="L335"></a><span class="ln">   335</span>		}
<a id="L336"></a><span class="ln">   336</span>		fmt.Fprintf(w, &#34;\n&#34;)
<a id="L337"></a><span class="ln">   337</span>	}
<a id="L338"></a><span class="ln">   338</span>	
<a id="L339"></a><span class="ln">   339</span>	<span class="comment">// Interface to system profiles.</span>
<a id="L340"></a><span class="ln">   340</span>	
<a id="L341"></a><span class="ln">   341</span>	type byInUseBytes []runtime.MemProfileRecord
<a id="L342"></a><span class="ln">   342</span>	
<a id="L343"></a><span class="ln">   343</span>	func (x byInUseBytes) Len() int           { return len(x) }
<a id="L344"></a><span class="ln">   344</span>	func (x byInUseBytes) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }
<a id="L345"></a><span class="ln">   345</span>	func (x byInUseBytes) Less(i, j int) bool { return x[i].InUseBytes() &gt; x[j].InUseBytes() }
<a id="L346"></a><span class="ln">   346</span>	
<a id="L347"></a><span class="ln">   347</span>	<span class="comment">// WriteHeapProfile is shorthand for Lookup(&#34;heap&#34;).WriteTo(w, 0).</span>
<a id="L348"></a><span class="ln">   348</span>	<span class="comment">// It is preserved for backwards compatibility.</span>
<a id="L349"></a><span class="ln">   349</span>	func WriteHeapProfile(w io.Writer) error {
<a id="L350"></a><span class="ln">   350</span>		return writeHeap(w, 0)
<a id="L351"></a><span class="ln">   351</span>	}
<a id="L352"></a><span class="ln">   352</span>	
<a id="L353"></a><span class="ln">   353</span>	<span class="comment">// countHeap returns the number of records in the heap profile.</span>
<a id="L354"></a><span class="ln">   354</span>	func countHeap() int {
<a id="L355"></a><span class="ln">   355</span>		n, _ := runtime.MemProfile(nil, false)
<a id="L356"></a><span class="ln">   356</span>		return n
<a id="L357"></a><span class="ln">   357</span>	}
<a id="L358"></a><span class="ln">   358</span>	
<a id="L359"></a><span class="ln">   359</span>	<span class="comment">// writeHeapProfile writes the current runtime heap profile to w.</span>
<a id="L360"></a><span class="ln">   360</span>	func writeHeap(w io.Writer, debug int) error {
<a id="L361"></a><span class="ln">   361</span>		<span class="comment">// Find out how many records there are (MemProfile(nil, false)),</span>
<a id="L362"></a><span class="ln">   362</span>		<span class="comment">// allocate that many records, and get the data.</span>
<a id="L363"></a><span class="ln">   363</span>		<span class="comment">// There&#39;s a race—more records might be added between</span>
<a id="L364"></a><span class="ln">   364</span>		<span class="comment">// the two calls—so allocate a few extra records for safety</span>
<a id="L365"></a><span class="ln">   365</span>		<span class="comment">// and also try again if we&#39;re very unlucky.</span>
<a id="L366"></a><span class="ln">   366</span>		<span class="comment">// The loop should only execute one iteration in the common case.</span>
<a id="L367"></a><span class="ln">   367</span>		var p []runtime.MemProfileRecord
<a id="L368"></a><span class="ln">   368</span>		n, ok := runtime.MemProfile(nil, false)
<a id="L369"></a><span class="ln">   369</span>		for {
<a id="L370"></a><span class="ln">   370</span>			<span class="comment">// Allocate room for a slightly bigger profile,</span>
<a id="L371"></a><span class="ln">   371</span>			<span class="comment">// in case a few more entries have been added</span>
<a id="L372"></a><span class="ln">   372</span>			<span class="comment">// since the call to MemProfile.</span>
<a id="L373"></a><span class="ln">   373</span>			p = make([]runtime.MemProfileRecord, n+50)
<a id="L374"></a><span class="ln">   374</span>			n, ok = runtime.MemProfile(p, false)
<a id="L375"></a><span class="ln">   375</span>			if ok {
<a id="L376"></a><span class="ln">   376</span>				p = p[0:n]
<a id="L377"></a><span class="ln">   377</span>				break
<a id="L378"></a><span class="ln">   378</span>			}
<a id="L379"></a><span class="ln">   379</span>			<span class="comment">// Profile grew; try again.</span>
<a id="L380"></a><span class="ln">   380</span>		}
<a id="L381"></a><span class="ln">   381</span>	
<a id="L382"></a><span class="ln">   382</span>		sort.Sort(byInUseBytes(p))
<a id="L383"></a><span class="ln">   383</span>	
<a id="L384"></a><span class="ln">   384</span>		b := bufio.NewWriter(w)
<a id="L385"></a><span class="ln">   385</span>		var tw *tabwriter.Writer
<a id="L386"></a><span class="ln">   386</span>		w = b
<a id="L387"></a><span class="ln">   387</span>		if debug &gt; 0 {
<a id="L388"></a><span class="ln">   388</span>			tw = tabwriter.NewWriter(w, 1, 8, 1, &#39;\t&#39;, 0)
<a id="L389"></a><span class="ln">   389</span>			w = tw
<a id="L390"></a><span class="ln">   390</span>		}
<a id="L391"></a><span class="ln">   391</span>	
<a id="L392"></a><span class="ln">   392</span>		var total runtime.MemProfileRecord
<a id="L393"></a><span class="ln">   393</span>		for i := range p {
<a id="L394"></a><span class="ln">   394</span>			r := &amp;p[i]
<a id="L395"></a><span class="ln">   395</span>			total.AllocBytes += r.AllocBytes
<a id="L396"></a><span class="ln">   396</span>			total.AllocObjects += r.AllocObjects
<a id="L397"></a><span class="ln">   397</span>			total.FreeBytes += r.FreeBytes
<a id="L398"></a><span class="ln">   398</span>			total.FreeObjects += r.FreeObjects
<a id="L399"></a><span class="ln">   399</span>		}
<a id="L400"></a><span class="ln">   400</span>	
<a id="L401"></a><span class="ln">   401</span>		<span class="comment">// Technically the rate is MemProfileRate not 2*MemProfileRate,</span>
<a id="L402"></a><span class="ln">   402</span>		<span class="comment">// but early versions of the C++ heap profiler reported 2*MemProfileRate,</span>
<a id="L403"></a><span class="ln">   403</span>		<span class="comment">// so that&#39;s what pprof has come to expect.</span>
<a id="L404"></a><span class="ln">   404</span>		fmt.Fprintf(w, &#34;heap profile: %d: %d [%d: %d] @ heap/%d\n&#34;,
<a id="L405"></a><span class="ln">   405</span>			total.InUseObjects(), total.InUseBytes(),
<a id="L406"></a><span class="ln">   406</span>			total.AllocObjects, total.AllocBytes,
<a id="L407"></a><span class="ln">   407</span>			2*runtime.MemProfileRate)
<a id="L408"></a><span class="ln">   408</span>	
<a id="L409"></a><span class="ln">   409</span>		for i := range p {
<a id="L410"></a><span class="ln">   410</span>			r := &amp;p[i]
<a id="L411"></a><span class="ln">   411</span>			fmt.Fprintf(w, &#34;%d: %d [%d: %d] @&#34;,
<a id="L412"></a><span class="ln">   412</span>				r.InUseObjects(), r.InUseBytes(),
<a id="L413"></a><span class="ln">   413</span>				r.AllocObjects, r.AllocBytes)
<a id="L414"></a><span class="ln">   414</span>			for _, pc := range r.Stack() {
<a id="L415"></a><span class="ln">   415</span>				fmt.Fprintf(w, &#34; %#x&#34;, pc)
<a id="L416"></a><span class="ln">   416</span>			}
<a id="L417"></a><span class="ln">   417</span>			fmt.Fprintf(w, &#34;\n&#34;)
<a id="L418"></a><span class="ln">   418</span>			if debug &gt; 0 {
<a id="L419"></a><span class="ln">   419</span>				printStackRecord(w, r.Stack(), false)
<a id="L420"></a><span class="ln">   420</span>			}
<a id="L421"></a><span class="ln">   421</span>		}
<a id="L422"></a><span class="ln">   422</span>	
<a id="L423"></a><span class="ln">   423</span>		<span class="comment">// Print memstats information too.</span>
<a id="L424"></a><span class="ln">   424</span>		<span class="comment">// Pprof will ignore, but useful for people</span>
<a id="L425"></a><span class="ln">   425</span>		if debug &gt; 0 {
<a id="L426"></a><span class="ln">   426</span>			s := new(runtime.MemStats)
<a id="L427"></a><span class="ln">   427</span>			runtime.ReadMemStats(s)
<a id="L428"></a><span class="ln">   428</span>			fmt.Fprintf(w, &#34;\n# runtime.MemStats\n&#34;)
<a id="L429"></a><span class="ln">   429</span>			fmt.Fprintf(w, &#34;# Alloc = %d\n&#34;, s.Alloc)
<a id="L430"></a><span class="ln">   430</span>			fmt.Fprintf(w, &#34;# TotalAlloc = %d\n&#34;, s.TotalAlloc)
<a id="L431"></a><span class="ln">   431</span>			fmt.Fprintf(w, &#34;# Sys = %d\n&#34;, s.Sys)
<a id="L432"></a><span class="ln">   432</span>			fmt.Fprintf(w, &#34;# Lookups = %d\n&#34;, s.Lookups)
<a id="L433"></a><span class="ln">   433</span>			fmt.Fprintf(w, &#34;# Mallocs = %d\n&#34;, s.Mallocs)
<a id="L434"></a><span class="ln">   434</span>	
<a id="L435"></a><span class="ln">   435</span>			fmt.Fprintf(w, &#34;# HeapAlloc = %d\n&#34;, s.HeapAlloc)
<a id="L436"></a><span class="ln">   436</span>			fmt.Fprintf(w, &#34;# HeapSys = %d\n&#34;, s.HeapSys)
<a id="L437"></a><span class="ln">   437</span>			fmt.Fprintf(w, &#34;# HeapIdle = %d\n&#34;, s.HeapIdle)
<a id="L438"></a><span class="ln">   438</span>			fmt.Fprintf(w, &#34;# HeapInuse = %d\n&#34;, s.HeapInuse)
<a id="L439"></a><span class="ln">   439</span>	
<a id="L440"></a><span class="ln">   440</span>			fmt.Fprintf(w, &#34;# Stack = %d / %d\n&#34;, s.StackInuse, s.StackSys)
<a id="L441"></a><span class="ln">   441</span>			fmt.Fprintf(w, &#34;# MSpan = %d / %d\n&#34;, s.MSpanInuse, s.MSpanSys)
<a id="L442"></a><span class="ln">   442</span>			fmt.Fprintf(w, &#34;# MCache = %d / %d\n&#34;, s.MCacheInuse, s.MCacheSys)
<a id="L443"></a><span class="ln">   443</span>			fmt.Fprintf(w, &#34;# BuckHashSys = %d\n&#34;, s.BuckHashSys)
<a id="L444"></a><span class="ln">   444</span>	
<a id="L445"></a><span class="ln">   445</span>			fmt.Fprintf(w, &#34;# NextGC = %d\n&#34;, s.NextGC)
<a id="L446"></a><span class="ln">   446</span>			fmt.Fprintf(w, &#34;# PauseNs = %d\n&#34;, s.PauseNs)
<a id="L447"></a><span class="ln">   447</span>			fmt.Fprintf(w, &#34;# NumGC = %d\n&#34;, s.NumGC)
<a id="L448"></a><span class="ln">   448</span>			fmt.Fprintf(w, &#34;# EnableGC = %v\n&#34;, s.EnableGC)
<a id="L449"></a><span class="ln">   449</span>			fmt.Fprintf(w, &#34;# DebugGC = %v\n&#34;, s.DebugGC)
<a id="L450"></a><span class="ln">   450</span>		}
<a id="L451"></a><span class="ln">   451</span>	
<a id="L452"></a><span class="ln">   452</span>		if tw != nil {
<a id="L453"></a><span class="ln">   453</span>			tw.Flush()
<a id="L454"></a><span class="ln">   454</span>		}
<a id="L455"></a><span class="ln">   455</span>		return b.Flush()
<a id="L456"></a><span class="ln">   456</span>	}
<a id="L457"></a><span class="ln">   457</span>	
<a id="L458"></a><span class="ln">   458</span>	<span class="comment">// countThreadCreate returns the size of the current ThreadCreateProfile.</span>
<a id="L459"></a><span class="ln">   459</span>	func countThreadCreate() int {
<a id="L460"></a><span class="ln">   460</span>		n, _ := runtime.ThreadCreateProfile(nil)
<a id="L461"></a><span class="ln">   461</span>		return n
<a id="L462"></a><span class="ln">   462</span>	}
<a id="L463"></a><span class="ln">   463</span>	
<a id="L464"></a><span class="ln">   464</span>	<span class="comment">// writeThreadCreate writes the current runtime ThreadCreateProfile to w.</span>
<a id="L465"></a><span class="ln">   465</span>	func writeThreadCreate(w io.Writer, debug int) error {
<a id="L466"></a><span class="ln">   466</span>		return writeRuntimeProfile(w, debug, &#34;threadcreate&#34;, runtime.ThreadCreateProfile)
<a id="L467"></a><span class="ln">   467</span>	}
<a id="L468"></a><span class="ln">   468</span>	
<a id="L469"></a><span class="ln">   469</span>	<span class="comment">// countGoroutine returns the number of goroutines.</span>
<a id="L470"></a><span class="ln">   470</span>	func countGoroutine() int {
<a id="L471"></a><span class="ln">   471</span>		return runtime.NumGoroutine()
<a id="L472"></a><span class="ln">   472</span>	}
<a id="L473"></a><span class="ln">   473</span>	
<a id="L474"></a><span class="ln">   474</span>	<span class="comment">// writeGoroutine writes the current runtime GoroutineProfile to w.</span>
<a id="L475"></a><span class="ln">   475</span>	func writeGoroutine(w io.Writer, debug int) error {
<a id="L476"></a><span class="ln">   476</span>		if debug &gt;= 2 {
<a id="L477"></a><span class="ln">   477</span>			return writeGoroutineStacks(w)
<a id="L478"></a><span class="ln">   478</span>		}
<a id="L479"></a><span class="ln">   479</span>		return writeRuntimeProfile(w, debug, &#34;goroutine&#34;, runtime.GoroutineProfile)
<a id="L480"></a><span class="ln">   480</span>	}
<a id="L481"></a><span class="ln">   481</span>	
<a id="L482"></a><span class="ln">   482</span>	func writeGoroutineStacks(w io.Writer) error {
<a id="L483"></a><span class="ln">   483</span>		<span class="comment">// We don&#39;t know how big the buffer needs to be to collect</span>
<a id="L484"></a><span class="ln">   484</span>		<span class="comment">// all the goroutines.  Start with 1 MB and try a few times, doubling each time.</span>
<a id="L485"></a><span class="ln">   485</span>		<span class="comment">// Give up and use a truncated trace if 64 MB is not enough.</span>
<a id="L486"></a><span class="ln">   486</span>		buf := make([]byte, 1&lt;&lt;20)
<a id="L487"></a><span class="ln">   487</span>		for i := 0; ; i++ {
<a id="L488"></a><span class="ln">   488</span>			n := runtime.Stack(buf, true)
<a id="L489"></a><span class="ln">   489</span>			if n &lt; len(buf) {
<a id="L490"></a><span class="ln">   490</span>				buf = buf[:n]
<a id="L491"></a><span class="ln">   491</span>				break
<a id="L492"></a><span class="ln">   492</span>			}
<a id="L493"></a><span class="ln">   493</span>			if len(buf) &gt;= 64&lt;&lt;20 {
<a id="L494"></a><span class="ln">   494</span>				<span class="comment">// Filled 64 MB - stop there.</span>
<a id="L495"></a><span class="ln">   495</span>				break
<a id="L496"></a><span class="ln">   496</span>			}
<a id="L497"></a><span class="ln">   497</span>			buf = make([]byte, 2*len(buf))
<a id="L498"></a><span class="ln">   498</span>		}
<a id="L499"></a><span class="ln">   499</span>		_, err := w.Write(buf)
<a id="L500"></a><span class="ln">   500</span>		return err
<a id="L501"></a><span class="ln">   501</span>	}
<a id="L502"></a><span class="ln">   502</span>	
<a id="L503"></a><span class="ln">   503</span>	func writeRuntimeProfile(w io.Writer, debug int, name string, fetch func([]runtime.StackRecord) (int, bool)) error {
<a id="L504"></a><span class="ln">   504</span>		<span class="comment">// Find out how many records there are (fetch(nil)),</span>
<a id="L505"></a><span class="ln">   505</span>		<span class="comment">// allocate that many records, and get the data.</span>
<a id="L506"></a><span class="ln">   506</span>		<span class="comment">// There&#39;s a race—more records might be added between</span>
<a id="L507"></a><span class="ln">   507</span>		<span class="comment">// the two calls—so allocate a few extra records for safety</span>
<a id="L508"></a><span class="ln">   508</span>		<span class="comment">// and also try again if we&#39;re very unlucky.</span>
<a id="L509"></a><span class="ln">   509</span>		<span class="comment">// The loop should only execute one iteration in the common case.</span>
<a id="L510"></a><span class="ln">   510</span>		var p []runtime.StackRecord
<a id="L511"></a><span class="ln">   511</span>		n, ok := fetch(nil)
<a id="L512"></a><span class="ln">   512</span>		for {
<a id="L513"></a><span class="ln">   513</span>			<span class="comment">// Allocate room for a slightly bigger profile,</span>
<a id="L514"></a><span class="ln">   514</span>			<span class="comment">// in case a few more entries have been added</span>
<a id="L515"></a><span class="ln">   515</span>			<span class="comment">// since the call to ThreadProfile.</span>
<a id="L516"></a><span class="ln">   516</span>			p = make([]runtime.StackRecord, n+10)
<a id="L517"></a><span class="ln">   517</span>			n, ok = fetch(p)
<a id="L518"></a><span class="ln">   518</span>			if ok {
<a id="L519"></a><span class="ln">   519</span>				p = p[0:n]
<a id="L520"></a><span class="ln">   520</span>				break
<a id="L521"></a><span class="ln">   521</span>			}
<a id="L522"></a><span class="ln">   522</span>			<span class="comment">// Profile grew; try again.</span>
<a id="L523"></a><span class="ln">   523</span>		}
<a id="L524"></a><span class="ln">   524</span>	
<a id="L525"></a><span class="ln">   525</span>		return printCountProfile(w, debug, name, runtimeProfile(p))
<a id="L526"></a><span class="ln">   526</span>	}
<a id="L527"></a><span class="ln">   527</span>	
<a id="L528"></a><span class="ln">   528</span>	type runtimeProfile []runtime.StackRecord
<a id="L529"></a><span class="ln">   529</span>	
<a id="L530"></a><span class="ln">   530</span>	func (p runtimeProfile) Len() int              { return len(p) }
<a id="L531"></a><span class="ln">   531</span>	func (p runtimeProfile) Stack(i int) []uintptr { return p[i].Stack() }
<a id="L532"></a><span class="ln">   532</span>	
<a id="L533"></a><span class="ln">   533</span>	var cpu struct {
<a id="L534"></a><span class="ln">   534</span>		sync.Mutex
<a id="L535"></a><span class="ln">   535</span>		profiling bool
<a id="L536"></a><span class="ln">   536</span>		done      chan bool
<a id="L537"></a><span class="ln">   537</span>	}
<a id="L538"></a><span class="ln">   538</span>	
<a id="L539"></a><span class="ln">   539</span>	<span class="comment">// StartCPUProfile enables CPU profiling for the current process.</span>
<a id="L540"></a><span class="ln">   540</span>	<span class="comment">// While profiling, the profile will be buffered and written to w.</span>
<a id="L541"></a><span class="ln">   541</span>	<span class="comment">// StartCPUProfile returns an error if profiling is already enabled.</span>
<a id="L542"></a><span class="ln">   542</span>	func StartCPUProfile(w io.Writer) error {
<a id="L543"></a><span class="ln">   543</span>		<span class="comment">// The runtime routines allow a variable profiling rate,</span>
<a id="L544"></a><span class="ln">   544</span>		<span class="comment">// but in practice operating systems cannot trigger signals</span>
<a id="L545"></a><span class="ln">   545</span>		<span class="comment">// at more than about 500 Hz, and our processing of the</span>
<a id="L546"></a><span class="ln">   546</span>		<span class="comment">// signal is not cheap (mostly getting the stack trace).</span>
<a id="L547"></a><span class="ln">   547</span>		<span class="comment">// 100 Hz is a reasonable choice: it is frequent enough to</span>
<a id="L548"></a><span class="ln">   548</span>		<span class="comment">// produce useful data, rare enough not to bog down the</span>
<a id="L549"></a><span class="ln">   549</span>		<span class="comment">// system, and a nice round number to make it easy to</span>
<a id="L550"></a><span class="ln">   550</span>		<span class="comment">// convert sample counts to seconds.  Instead of requiring</span>
<a id="L551"></a><span class="ln">   551</span>		<span class="comment">// each client to specify the frequency, we hard code it.</span>
<a id="L552"></a><span class="ln">   552</span>		const hz = 100
<a id="L553"></a><span class="ln">   553</span>	
<a id="L554"></a><span class="ln">   554</span>		<span class="comment">// Avoid queueing behind StopCPUProfile.</span>
<a id="L555"></a><span class="ln">   555</span>		<span class="comment">// Could use TryLock instead if we had it.</span>
<a id="L556"></a><span class="ln">   556</span>		if cpu.profiling {
<a id="L557"></a><span class="ln">   557</span>			return fmt.Errorf(&#34;cpu profiling already in use&#34;)
<a id="L558"></a><span class="ln">   558</span>		}
<a id="L559"></a><span class="ln">   559</span>	
<a id="L560"></a><span class="ln">   560</span>		cpu.Lock()
<a id="L561"></a><span class="ln">   561</span>		defer cpu.Unlock()
<a id="L562"></a><span class="ln">   562</span>		if cpu.done == nil {
<a id="L563"></a><span class="ln">   563</span>			cpu.done = make(chan bool)
<a id="L564"></a><span class="ln">   564</span>		}
<a id="L565"></a><span class="ln">   565</span>		<span class="comment">// Double-check.</span>
<a id="L566"></a><span class="ln">   566</span>		if cpu.profiling {
<a id="L567"></a><span class="ln">   567</span>			return fmt.Errorf(&#34;cpu profiling already in use&#34;)
<a id="L568"></a><span class="ln">   568</span>		}
<a id="L569"></a><span class="ln">   569</span>		cpu.profiling = true
<a id="L570"></a><span class="ln">   570</span>		runtime.SetCPUProfileRate(hz)
<a id="L571"></a><span class="ln">   571</span>		go profileWriter(w)
<a id="L572"></a><span class="ln">   572</span>		return nil
<a id="L573"></a><span class="ln">   573</span>	}
<a id="L574"></a><span class="ln">   574</span>	
<a id="L575"></a><span class="ln">   575</span>	func profileWriter(w io.Writer) {
<a id="L576"></a><span class="ln">   576</span>		for {
<a id="L577"></a><span class="ln">   577</span>			data := runtime.CPUProfile()
<a id="L578"></a><span class="ln">   578</span>			if data == nil {
<a id="L579"></a><span class="ln">   579</span>				break
<a id="L580"></a><span class="ln">   580</span>			}
<a id="L581"></a><span class="ln">   581</span>			w.Write(data)
<a id="L582"></a><span class="ln">   582</span>		}
<a id="L583"></a><span class="ln">   583</span>		cpu.done &lt;- true
<a id="L584"></a><span class="ln">   584</span>	}
<a id="L585"></a><span class="ln">   585</span>	
<a id="L586"></a><span class="ln">   586</span>	<span class="comment">// StopCPUProfile stops the current CPU profile, if any.</span>
<a id="L587"></a><span class="ln">   587</span>	<span class="comment">// StopCPUProfile only returns after all the writes for the</span>
<a id="L588"></a><span class="ln">   588</span>	<span class="comment">// profile have completed.</span>
<a id="L589"></a><span class="ln">   589</span>	func StopCPUProfile() {
<a id="L590"></a><span class="ln">   590</span>		cpu.Lock()
<a id="L591"></a><span class="ln">   591</span>		defer cpu.Unlock()
<a id="L592"></a><span class="ln">   592</span>	
<a id="L593"></a><span class="ln">   593</span>		if !cpu.profiling {
<a id="L594"></a><span class="ln">   594</span>			return
<a id="L595"></a><span class="ln">   595</span>		}
<a id="L596"></a><span class="ln">   596</span>		cpu.profiling = false
<a id="L597"></a><span class="ln">   597</span>		runtime.SetCPUProfileRate(0)
<a id="L598"></a><span class="ln">   598</span>		&lt;-cpu.done
<a id="L599"></a><span class="ln">   599</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

