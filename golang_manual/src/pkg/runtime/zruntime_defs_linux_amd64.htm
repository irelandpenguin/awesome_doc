<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/runtime/zruntime_defs_linux_amd64.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/runtime/zruntime_defs_linux_amd64.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// auto generated by go tool dist</span>
<a id="L2"></a><span class="ln">     2</span>	
<a id="L3"></a><span class="ln">     3</span>	package runtime
<a id="L4"></a><span class="ln">     4</span>	import &#34;unsafe&#34;
<a id="L5"></a><span class="ln">     5</span>	var _ unsafe.Pointer
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	type lock struct {
<a id="L8"></a><span class="ln">     8</span>		<span class="comment">// (union)	key	uint</span>
<a id="L9"></a><span class="ln">     9</span>		waitm	*m
<a id="L10"></a><span class="ln">    10</span>	}
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	type note struct {
<a id="L13"></a><span class="ln">    13</span>		<span class="comment">// (union)	key	uint</span>
<a id="L14"></a><span class="ln">    14</span>		waitm	*m
<a id="L15"></a><span class="ln">    15</span>	}
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	type _string struct {
<a id="L18"></a><span class="ln">    18</span>		str	*uint8
<a id="L19"></a><span class="ln">    19</span>		len	int
<a id="L20"></a><span class="ln">    20</span>	}
<a id="L21"></a><span class="ln">    21</span>	
<a id="L22"></a><span class="ln">    22</span>	type iface struct {
<a id="L23"></a><span class="ln">    23</span>		tab	*itab
<a id="L24"></a><span class="ln">    24</span>		data	unsafe.Pointer
<a id="L25"></a><span class="ln">    25</span>	}
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>	type eface struct {
<a id="L28"></a><span class="ln">    28</span>		_type	*_type
<a id="L29"></a><span class="ln">    29</span>		data	unsafe.Pointer
<a id="L30"></a><span class="ln">    30</span>	}
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>	type _complex64 struct {
<a id="L33"></a><span class="ln">    33</span>		real	float32
<a id="L34"></a><span class="ln">    34</span>		imag	float32
<a id="L35"></a><span class="ln">    35</span>	}
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>	type _complex128 struct {
<a id="L38"></a><span class="ln">    38</span>		real	float64
<a id="L39"></a><span class="ln">    39</span>		imag	float64
<a id="L40"></a><span class="ln">    40</span>	}
<a id="L41"></a><span class="ln">    41</span>	
<a id="L42"></a><span class="ln">    42</span>	type slice struct {
<a id="L43"></a><span class="ln">    43</span>		array	*uint8
<a id="L44"></a><span class="ln">    44</span>		len	uint
<a id="L45"></a><span class="ln">    45</span>		cap	uint
<a id="L46"></a><span class="ln">    46</span>	}
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>	type gobuf struct {
<a id="L49"></a><span class="ln">    49</span>		sp	*uint8
<a id="L50"></a><span class="ln">    50</span>		pc	*uint8
<a id="L51"></a><span class="ln">    51</span>		g	*g
<a id="L52"></a><span class="ln">    52</span>	}
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>	type g struct {
<a id="L55"></a><span class="ln">    55</span>		stackguard	*uint8
<a id="L56"></a><span class="ln">    56</span>		stackbase	*uint8
<a id="L57"></a><span class="ln">    57</span>		_defer	*_defer
<a id="L58"></a><span class="ln">    58</span>		_panic	*_panic
<a id="L59"></a><span class="ln">    59</span>		sched	gobuf
<a id="L60"></a><span class="ln">    60</span>		gcstack	*uint8
<a id="L61"></a><span class="ln">    61</span>		gcsp	*uint8
<a id="L62"></a><span class="ln">    62</span>		gcguard	*uint8
<a id="L63"></a><span class="ln">    63</span>		stack0	*uint8
<a id="L64"></a><span class="ln">    64</span>		entry	*uint8
<a id="L65"></a><span class="ln">    65</span>		alllink	*g
<a id="L66"></a><span class="ln">    66</span>		param	unsafe.Pointer
<a id="L67"></a><span class="ln">    67</span>		status	int16
<a id="L68"></a><span class="ln">    68</span>		goid	int
<a id="L69"></a><span class="ln">    69</span>		selgen	uint
<a id="L70"></a><span class="ln">    70</span>		waitreason	*int8
<a id="L71"></a><span class="ln">    71</span>		schedlink	*g
<a id="L72"></a><span class="ln">    72</span>		readyonstop	uint8
<a id="L73"></a><span class="ln">    73</span>		ispanic	uint8
<a id="L74"></a><span class="ln">    74</span>		m	*m
<a id="L75"></a><span class="ln">    75</span>		lockedm	*m
<a id="L76"></a><span class="ln">    76</span>		idlem	*m
<a id="L77"></a><span class="ln">    77</span>		sig	int
<a id="L78"></a><span class="ln">    78</span>		writenbuf	int
<a id="L79"></a><span class="ln">    79</span>		writebuf	*uint8
<a id="L80"></a><span class="ln">    80</span>		sigcode0	uint64
<a id="L81"></a><span class="ln">    81</span>		sigcode1	uint64
<a id="L82"></a><span class="ln">    82</span>		sigpc	uint64
<a id="L83"></a><span class="ln">    83</span>		gopc	uint64
<a id="L84"></a><span class="ln">    84</span>		end	[0]uint64
<a id="L85"></a><span class="ln">    85</span>	}
<a id="L86"></a><span class="ln">    86</span>	
<a id="L87"></a><span class="ln">    87</span>	type m struct {
<a id="L88"></a><span class="ln">    88</span>		g0	*g
<a id="L89"></a><span class="ln">    89</span>		morepc	func()
<a id="L90"></a><span class="ln">    90</span>		moreargp	unsafe.Pointer
<a id="L91"></a><span class="ln">    91</span>		morebuf	gobuf
<a id="L92"></a><span class="ln">    92</span>		moreframesize	uint
<a id="L93"></a><span class="ln">    93</span>		moreargsize	uint
<a id="L94"></a><span class="ln">    94</span>		cret	uint64
<a id="L95"></a><span class="ln">    95</span>		procid	uint64
<a id="L96"></a><span class="ln">    96</span>		gsignal	*g
<a id="L97"></a><span class="ln">    97</span>		tls	[8]uint
<a id="L98"></a><span class="ln">    98</span>		curg	*g
<a id="L99"></a><span class="ln">    99</span>		id	int
<a id="L100"></a><span class="ln">   100</span>		mallocing	int
<a id="L101"></a><span class="ln">   101</span>		gcing	int
<a id="L102"></a><span class="ln">   102</span>		locks	int
<a id="L103"></a><span class="ln">   103</span>		nomemprof	int
<a id="L104"></a><span class="ln">   104</span>		waitnextg	int
<a id="L105"></a><span class="ln">   105</span>		dying	int
<a id="L106"></a><span class="ln">   106</span>		profilehz	int
<a id="L107"></a><span class="ln">   107</span>		helpgc	int
<a id="L108"></a><span class="ln">   108</span>		fastrand	uint
<a id="L109"></a><span class="ln">   109</span>		ncgocall	uint64
<a id="L110"></a><span class="ln">   110</span>		havenextg	note
<a id="L111"></a><span class="ln">   111</span>		nextg	*g
<a id="L112"></a><span class="ln">   112</span>		alllink	*m
<a id="L113"></a><span class="ln">   113</span>		schedlink	*m
<a id="L114"></a><span class="ln">   114</span>		machport	uint
<a id="L115"></a><span class="ln">   115</span>		mcache	*mcache
<a id="L116"></a><span class="ln">   116</span>		stackalloc	*fixalloc
<a id="L117"></a><span class="ln">   117</span>		lockedg	*g
<a id="L118"></a><span class="ln">   118</span>		idleg	*g
<a id="L119"></a><span class="ln">   119</span>		createstack	[32]uint64
<a id="L120"></a><span class="ln">   120</span>		freglo	[16]uint
<a id="L121"></a><span class="ln">   121</span>		freghi	[16]uint
<a id="L122"></a><span class="ln">   122</span>		fflag	uint
<a id="L123"></a><span class="ln">   123</span>		nextwaitm	*m
<a id="L124"></a><span class="ln">   124</span>		waitsema	uint64
<a id="L125"></a><span class="ln">   125</span>		waitsemacount	uint
<a id="L126"></a><span class="ln">   126</span>		waitsemalock	uint
<a id="L127"></a><span class="ln">   127</span>		end	[0]uint64
<a id="L128"></a><span class="ln">   128</span>	}
<a id="L129"></a><span class="ln">   129</span>	
<a id="L130"></a><span class="ln">   130</span>	type stktop struct {
<a id="L131"></a><span class="ln">   131</span>		stackguard	*uint8
<a id="L132"></a><span class="ln">   132</span>		stackbase	*uint8
<a id="L133"></a><span class="ln">   133</span>		gobuf	gobuf
<a id="L134"></a><span class="ln">   134</span>		argsize	uint
<a id="L135"></a><span class="ln">   135</span>		argp	*uint8
<a id="L136"></a><span class="ln">   136</span>		free	uint64
<a id="L137"></a><span class="ln">   137</span>		_panic	uint8
<a id="L138"></a><span class="ln">   138</span>	}
<a id="L139"></a><span class="ln">   139</span>	
<a id="L140"></a><span class="ln">   140</span>	type sigtab struct {
<a id="L141"></a><span class="ln">   141</span>		flags	int
<a id="L142"></a><span class="ln">   142</span>		name	*int8
<a id="L143"></a><span class="ln">   143</span>	}
<a id="L144"></a><span class="ln">   144</span>	
<a id="L145"></a><span class="ln">   145</span>	type _func struct {
<a id="L146"></a><span class="ln">   146</span>		name	string
<a id="L147"></a><span class="ln">   147</span>		_type	string
<a id="L148"></a><span class="ln">   148</span>		src	string
<a id="L149"></a><span class="ln">   149</span>		pcln	[]byte
<a id="L150"></a><span class="ln">   150</span>		entry	uint64
<a id="L151"></a><span class="ln">   151</span>		pc0	uint64
<a id="L152"></a><span class="ln">   152</span>		ln0	int
<a id="L153"></a><span class="ln">   153</span>		frame	int
<a id="L154"></a><span class="ln">   154</span>		args	int
<a id="L155"></a><span class="ln">   155</span>		locals	int
<a id="L156"></a><span class="ln">   156</span>	}
<a id="L157"></a><span class="ln">   157</span>	
<a id="L158"></a><span class="ln">   158</span>	type wincall struct {
<a id="L159"></a><span class="ln">   159</span>		fn	func(unsafe.Pointer)
<a id="L160"></a><span class="ln">   160</span>		n	uint64
<a id="L161"></a><span class="ln">   161</span>		args	unsafe.Pointer
<a id="L162"></a><span class="ln">   162</span>		r1	uint64
<a id="L163"></a><span class="ln">   163</span>		r2	uint64
<a id="L164"></a><span class="ln">   164</span>		err	uint64
<a id="L165"></a><span class="ln">   165</span>	}
<a id="L166"></a><span class="ln">   166</span>	
<a id="L167"></a><span class="ln">   167</span>	type timers struct {
<a id="L168"></a><span class="ln">   168</span>		lock
<a id="L169"></a><span class="ln">   169</span>		timerproc	*g
<a id="L170"></a><span class="ln">   170</span>		sleeping	uint8
<a id="L171"></a><span class="ln">   171</span>		rescheduling	uint8
<a id="L172"></a><span class="ln">   172</span>		waitnote	note
<a id="L173"></a><span class="ln">   173</span>		t	**timer
<a id="L174"></a><span class="ln">   174</span>		len	int
<a id="L175"></a><span class="ln">   175</span>		cap	int
<a id="L176"></a><span class="ln">   176</span>	}
<a id="L177"></a><span class="ln">   177</span>	
<a id="L178"></a><span class="ln">   178</span>	type timer struct {
<a id="L179"></a><span class="ln">   179</span>		i	int
<a id="L180"></a><span class="ln">   180</span>		when	int64
<a id="L181"></a><span class="ln">   181</span>		period	int64
<a id="L182"></a><span class="ln">   182</span>		f	func(int64, eface)
<a id="L183"></a><span class="ln">   183</span>		arg	eface
<a id="L184"></a><span class="ln">   184</span>	}
<a id="L185"></a><span class="ln">   185</span>	
<a id="L186"></a><span class="ln">   186</span>	type alg struct {
<a id="L187"></a><span class="ln">   187</span>		hash	func(*uint64, uint64, unsafe.Pointer)
<a id="L188"></a><span class="ln">   188</span>		equal	func(*uint8, uint64, unsafe.Pointer, unsafe.Pointer)
<a id="L189"></a><span class="ln">   189</span>		print	func(uint64, unsafe.Pointer)
<a id="L190"></a><span class="ln">   190</span>		copy	func(uint64, unsafe.Pointer, unsafe.Pointer)
<a id="L191"></a><span class="ln">   191</span>	}
<a id="L192"></a><span class="ln">   192</span>	
<a id="L193"></a><span class="ln">   193</span>	var algarray	[22]alg
<a id="L194"></a><span class="ln">   194</span>	type _defer struct {
<a id="L195"></a><span class="ln">   195</span>		siz	int
<a id="L196"></a><span class="ln">   196</span>		nofree	uint8
<a id="L197"></a><span class="ln">   197</span>		argp	*uint8
<a id="L198"></a><span class="ln">   198</span>		pc	*uint8
<a id="L199"></a><span class="ln">   199</span>		fn	*uint8
<a id="L200"></a><span class="ln">   200</span>		link	*_defer
<a id="L201"></a><span class="ln">   201</span>		args	[8]uint8
<a id="L202"></a><span class="ln">   202</span>	}
<a id="L203"></a><span class="ln">   203</span>	
<a id="L204"></a><span class="ln">   204</span>	type _panic struct {
<a id="L205"></a><span class="ln">   205</span>		arg	eface
<a id="L206"></a><span class="ln">   206</span>		stackbase	*uint8
<a id="L207"></a><span class="ln">   207</span>		link	*_panic
<a id="L208"></a><span class="ln">   208</span>		recovered	uint8
<a id="L209"></a><span class="ln">   209</span>	}
<a id="L210"></a><span class="ln">   210</span>	
<a id="L211"></a><span class="ln">   211</span>	var emptystring	string
<a id="L212"></a><span class="ln">   212</span>	var allg	*g
<a id="L213"></a><span class="ln">   213</span>	var lastg	*g
<a id="L214"></a><span class="ln">   214</span>	var allm	*m
<a id="L215"></a><span class="ln">   215</span>	var gomaxprocs	int
<a id="L216"></a><span class="ln">   216</span>	var singleproc	uint8
<a id="L217"></a><span class="ln">   217</span>	var panicking	uint
<a id="L218"></a><span class="ln">   218</span>	var gcwaiting	int
<a id="L219"></a><span class="ln">   219</span>	var goos	*int8
<a id="L220"></a><span class="ln">   220</span>	var ncpu	int
<a id="L221"></a><span class="ln">   221</span>	var iscgo	uint8
<a id="L222"></a><span class="ln">   222</span>	var worldsema	uint
<a id="L223"></a><span class="ln">   223</span>	type timespec struct {
<a id="L224"></a><span class="ln">   224</span>		tv_sec	int64
<a id="L225"></a><span class="ln">   225</span>		tv_nsec	int64
<a id="L226"></a><span class="ln">   226</span>	}
<a id="L227"></a><span class="ln">   227</span>	
<a id="L228"></a><span class="ln">   228</span>	type timeval struct {
<a id="L229"></a><span class="ln">   229</span>		tv_sec	int64
<a id="L230"></a><span class="ln">   230</span>		tv_usec	int64
<a id="L231"></a><span class="ln">   231</span>	}
<a id="L232"></a><span class="ln">   232</span>	
<a id="L233"></a><span class="ln">   233</span>	type sigaction struct {
<a id="L234"></a><span class="ln">   234</span>		sa_handler	unsafe.Pointer
<a id="L235"></a><span class="ln">   235</span>		sa_flags	uint64
<a id="L236"></a><span class="ln">   236</span>		sa_restorer	unsafe.Pointer
<a id="L237"></a><span class="ln">   237</span>		sa_mask	uint64
<a id="L238"></a><span class="ln">   238</span>	}
<a id="L239"></a><span class="ln">   239</span>	
<a id="L240"></a><span class="ln">   240</span>	type siginfo struct {
<a id="L241"></a><span class="ln">   241</span>		si_signo	int
<a id="L242"></a><span class="ln">   242</span>		si_errno	int
<a id="L243"></a><span class="ln">   243</span>		si_code	int
<a id="L244"></a><span class="ln">   244</span>		pad_cgo_0	[4]uint8
<a id="L245"></a><span class="ln">   245</span>		_sifields	[112]uint8
<a id="L246"></a><span class="ln">   246</span>	}
<a id="L247"></a><span class="ln">   247</span>	
<a id="L248"></a><span class="ln">   248</span>	type itimerval struct {
<a id="L249"></a><span class="ln">   249</span>		it_interval	timeval
<a id="L250"></a><span class="ln">   250</span>		it_value	timeval
<a id="L251"></a><span class="ln">   251</span>	}
<a id="L252"></a><span class="ln">   252</span>	
<a id="L253"></a><span class="ln">   253</span>	type usigset struct {
<a id="L254"></a><span class="ln">   254</span>		__val	[16]uint64
<a id="L255"></a><span class="ln">   255</span>	}
<a id="L256"></a><span class="ln">   256</span>	
<a id="L257"></a><span class="ln">   257</span>	type fpxreg struct {
<a id="L258"></a><span class="ln">   258</span>		significand	[4]uint16
<a id="L259"></a><span class="ln">   259</span>		exponent	uint16
<a id="L260"></a><span class="ln">   260</span>		padding	[3]uint16
<a id="L261"></a><span class="ln">   261</span>	}
<a id="L262"></a><span class="ln">   262</span>	
<a id="L263"></a><span class="ln">   263</span>	type xmmreg struct {
<a id="L264"></a><span class="ln">   264</span>		element	[4]uint
<a id="L265"></a><span class="ln">   265</span>	}
<a id="L266"></a><span class="ln">   266</span>	
<a id="L267"></a><span class="ln">   267</span>	type fpstate struct {
<a id="L268"></a><span class="ln">   268</span>		cwd	uint16
<a id="L269"></a><span class="ln">   269</span>		swd	uint16
<a id="L270"></a><span class="ln">   270</span>		ftw	uint16
<a id="L271"></a><span class="ln">   271</span>		fop	uint16
<a id="L272"></a><span class="ln">   272</span>		rip	uint64
<a id="L273"></a><span class="ln">   273</span>		rdp	uint64
<a id="L274"></a><span class="ln">   274</span>		mxcsr	uint
<a id="L275"></a><span class="ln">   275</span>		mxcr_mask	uint
<a id="L276"></a><span class="ln">   276</span>		_st	[8]fpxreg
<a id="L277"></a><span class="ln">   277</span>		_xmm	[16]xmmreg
<a id="L278"></a><span class="ln">   278</span>		padding	[24]uint
<a id="L279"></a><span class="ln">   279</span>	}
<a id="L280"></a><span class="ln">   280</span>	
<a id="L281"></a><span class="ln">   281</span>	type fpxreg1 struct {
<a id="L282"></a><span class="ln">   282</span>		significand	[4]uint16
<a id="L283"></a><span class="ln">   283</span>		exponent	uint16
<a id="L284"></a><span class="ln">   284</span>		padding	[3]uint16
<a id="L285"></a><span class="ln">   285</span>	}
<a id="L286"></a><span class="ln">   286</span>	
<a id="L287"></a><span class="ln">   287</span>	type xmmreg1 struct {
<a id="L288"></a><span class="ln">   288</span>		element	[4]uint
<a id="L289"></a><span class="ln">   289</span>	}
<a id="L290"></a><span class="ln">   290</span>	
<a id="L291"></a><span class="ln">   291</span>	type fpstate1 struct {
<a id="L292"></a><span class="ln">   292</span>		cwd	uint16
<a id="L293"></a><span class="ln">   293</span>		swd	uint16
<a id="L294"></a><span class="ln">   294</span>		ftw	uint16
<a id="L295"></a><span class="ln">   295</span>		fop	uint16
<a id="L296"></a><span class="ln">   296</span>		rip	uint64
<a id="L297"></a><span class="ln">   297</span>		rdp	uint64
<a id="L298"></a><span class="ln">   298</span>		mxcsr	uint
<a id="L299"></a><span class="ln">   299</span>		mxcr_mask	uint
<a id="L300"></a><span class="ln">   300</span>		_st	[8]fpxreg1
<a id="L301"></a><span class="ln">   301</span>		_xmm	[16]xmmreg1
<a id="L302"></a><span class="ln">   302</span>		padding	[24]uint
<a id="L303"></a><span class="ln">   303</span>	}
<a id="L304"></a><span class="ln">   304</span>	
<a id="L305"></a><span class="ln">   305</span>	type fpreg1 struct {
<a id="L306"></a><span class="ln">   306</span>		significand	[4]uint16
<a id="L307"></a><span class="ln">   307</span>		exponent	uint16
<a id="L308"></a><span class="ln">   308</span>	}
<a id="L309"></a><span class="ln">   309</span>	
<a id="L310"></a><span class="ln">   310</span>	type sigaltstack struct {
<a id="L311"></a><span class="ln">   311</span>		ss_sp	*uint8
<a id="L312"></a><span class="ln">   312</span>		ss_flags	int
<a id="L313"></a><span class="ln">   313</span>		pad_cgo_0	[4]uint8
<a id="L314"></a><span class="ln">   314</span>		ss_size	uint64
<a id="L315"></a><span class="ln">   315</span>	}
<a id="L316"></a><span class="ln">   316</span>	
<a id="L317"></a><span class="ln">   317</span>	type mcontext struct {
<a id="L318"></a><span class="ln">   318</span>		gregs	[23]int64
<a id="L319"></a><span class="ln">   319</span>		fpregs	*fpstate
<a id="L320"></a><span class="ln">   320</span>		__reserved1	[8]uint64
<a id="L321"></a><span class="ln">   321</span>	}
<a id="L322"></a><span class="ln">   322</span>	
<a id="L323"></a><span class="ln">   323</span>	type ucontext struct {
<a id="L324"></a><span class="ln">   324</span>		uc_flags	uint64
<a id="L325"></a><span class="ln">   325</span>		uc_link	*ucontext
<a id="L326"></a><span class="ln">   326</span>		uc_stack	sigaltstack
<a id="L327"></a><span class="ln">   327</span>		uc_mcontext	mcontext
<a id="L328"></a><span class="ln">   328</span>		uc_sigmask	usigset
<a id="L329"></a><span class="ln">   329</span>		__fpregs_mem	fpstate
<a id="L330"></a><span class="ln">   330</span>	}
<a id="L331"></a><span class="ln">   331</span>	
<a id="L332"></a><span class="ln">   332</span>	type sigcontext struct {
<a id="L333"></a><span class="ln">   333</span>		r8	uint64
<a id="L334"></a><span class="ln">   334</span>		r9	uint64
<a id="L335"></a><span class="ln">   335</span>		r10	uint64
<a id="L336"></a><span class="ln">   336</span>		r11	uint64
<a id="L337"></a><span class="ln">   337</span>		r12	uint64
<a id="L338"></a><span class="ln">   338</span>		r13	uint64
<a id="L339"></a><span class="ln">   339</span>		r14	uint64
<a id="L340"></a><span class="ln">   340</span>		r15	uint64
<a id="L341"></a><span class="ln">   341</span>		rdi	uint64
<a id="L342"></a><span class="ln">   342</span>		rsi	uint64
<a id="L343"></a><span class="ln">   343</span>		rbp	uint64
<a id="L344"></a><span class="ln">   344</span>		rbx	uint64
<a id="L345"></a><span class="ln">   345</span>		rdx	uint64
<a id="L346"></a><span class="ln">   346</span>		rax	uint64
<a id="L347"></a><span class="ln">   347</span>		rcx	uint64
<a id="L348"></a><span class="ln">   348</span>		rsp	uint64
<a id="L349"></a><span class="ln">   349</span>		rip	uint64
<a id="L350"></a><span class="ln">   350</span>		eflags	uint64
<a id="L351"></a><span class="ln">   351</span>		cs	uint16
<a id="L352"></a><span class="ln">   352</span>		gs	uint16
<a id="L353"></a><span class="ln">   353</span>		fs	uint16
<a id="L354"></a><span class="ln">   354</span>		__pad0	uint16
<a id="L355"></a><span class="ln">   355</span>		err	uint64
<a id="L356"></a><span class="ln">   356</span>		trapno	uint64
<a id="L357"></a><span class="ln">   357</span>		oldmask	uint64
<a id="L358"></a><span class="ln">   358</span>		cr2	uint64
<a id="L359"></a><span class="ln">   359</span>		fpstate	*fpstate1
<a id="L360"></a><span class="ln">   360</span>		__reserved1	[8]uint64
<a id="L361"></a><span class="ln">   361</span>	}
<a id="L362"></a><span class="ln">   362</span>	
<a id="L363"></a><span class="ln">   363</span>	type mlink struct {
<a id="L364"></a><span class="ln">   364</span>		next	*mlink
<a id="L365"></a><span class="ln">   365</span>	}
<a id="L366"></a><span class="ln">   366</span>	
<a id="L367"></a><span class="ln">   367</span>	type fixalloc struct {
<a id="L368"></a><span class="ln">   368</span>		size	uint64
<a id="L369"></a><span class="ln">   369</span>		alloc	func(uint64) unsafe.Pointer
<a id="L370"></a><span class="ln">   370</span>		first	func(unsafe.Pointer, *uint8)
<a id="L371"></a><span class="ln">   371</span>		arg	unsafe.Pointer
<a id="L372"></a><span class="ln">   372</span>		list	*mlink
<a id="L373"></a><span class="ln">   373</span>		chunk	*uint8
<a id="L374"></a><span class="ln">   374</span>		nchunk	uint
<a id="L375"></a><span class="ln">   375</span>		inuse	uint64
<a id="L376"></a><span class="ln">   376</span>		sys	uint64
<a id="L377"></a><span class="ln">   377</span>	}
<a id="L378"></a><span class="ln">   378</span>	
<a id="L379"></a><span class="ln">   379</span>	type _1_ struct {
<a id="L380"></a><span class="ln">   380</span>		size	uint
<a id="L381"></a><span class="ln">   381</span>		nmalloc	uint64
<a id="L382"></a><span class="ln">   382</span>		nfree	uint64
<a id="L383"></a><span class="ln">   383</span>	}
<a id="L384"></a><span class="ln">   384</span>	
<a id="L385"></a><span class="ln">   385</span>	type mstats struct {
<a id="L386"></a><span class="ln">   386</span>		alloc	uint64
<a id="L387"></a><span class="ln">   387</span>		total_alloc	uint64
<a id="L388"></a><span class="ln">   388</span>		sys	uint64
<a id="L389"></a><span class="ln">   389</span>		nlookup	uint64
<a id="L390"></a><span class="ln">   390</span>		nmalloc	uint64
<a id="L391"></a><span class="ln">   391</span>		nfree	uint64
<a id="L392"></a><span class="ln">   392</span>		heap_alloc	uint64
<a id="L393"></a><span class="ln">   393</span>		heap_sys	uint64
<a id="L394"></a><span class="ln">   394</span>		heap_idle	uint64
<a id="L395"></a><span class="ln">   395</span>		heap_inuse	uint64
<a id="L396"></a><span class="ln">   396</span>		heap_released	uint64
<a id="L397"></a><span class="ln">   397</span>		heap_objects	uint64
<a id="L398"></a><span class="ln">   398</span>		stacks_inuse	uint64
<a id="L399"></a><span class="ln">   399</span>		stacks_sys	uint64
<a id="L400"></a><span class="ln">   400</span>		mspan_inuse	uint64
<a id="L401"></a><span class="ln">   401</span>		mspan_sys	uint64
<a id="L402"></a><span class="ln">   402</span>		mcache_inuse	uint64
<a id="L403"></a><span class="ln">   403</span>		mcache_sys	uint64
<a id="L404"></a><span class="ln">   404</span>		buckhash_sys	uint64
<a id="L405"></a><span class="ln">   405</span>		next_gc	uint64
<a id="L406"></a><span class="ln">   406</span>		last_gc	uint64
<a id="L407"></a><span class="ln">   407</span>		pause_total_ns	uint64
<a id="L408"></a><span class="ln">   408</span>		pause_ns	[256]uint64
<a id="L409"></a><span class="ln">   409</span>		numgc	uint
<a id="L410"></a><span class="ln">   410</span>		enablegc	uint8
<a id="L411"></a><span class="ln">   411</span>		debuggc	uint8
<a id="L412"></a><span class="ln">   412</span>		by_size	[61]_1_
<a id="L413"></a><span class="ln">   413</span>	}
<a id="L414"></a><span class="ln">   414</span>	
<a id="L415"></a><span class="ln">   415</span>	var memstats	mstats
<a id="L416"></a><span class="ln">   416</span>	var class_to_size	[61]int
<a id="L417"></a><span class="ln">   417</span>	var class_to_allocnpages	[61]int
<a id="L418"></a><span class="ln">   418</span>	var class_to_transfercount	[61]int
<a id="L419"></a><span class="ln">   419</span>	type mcachelist struct {
<a id="L420"></a><span class="ln">   420</span>		list	*mlink
<a id="L421"></a><span class="ln">   421</span>		nlist	uint
<a id="L422"></a><span class="ln">   422</span>		nlistmin	uint
<a id="L423"></a><span class="ln">   423</span>	}
<a id="L424"></a><span class="ln">   424</span>	
<a id="L425"></a><span class="ln">   425</span>	type _2_ struct {
<a id="L426"></a><span class="ln">   426</span>		nmalloc	int64
<a id="L427"></a><span class="ln">   427</span>		nfree	int64
<a id="L428"></a><span class="ln">   428</span>	}
<a id="L429"></a><span class="ln">   429</span>	
<a id="L430"></a><span class="ln">   430</span>	type mcache struct {
<a id="L431"></a><span class="ln">   431</span>		list	[61]mcachelist
<a id="L432"></a><span class="ln">   432</span>		size	uint64
<a id="L433"></a><span class="ln">   433</span>		local_cachealloc	int64
<a id="L434"></a><span class="ln">   434</span>		local_objects	int64
<a id="L435"></a><span class="ln">   435</span>		local_alloc	int64
<a id="L436"></a><span class="ln">   436</span>		local_total_alloc	int64
<a id="L437"></a><span class="ln">   437</span>		local_nmalloc	int64
<a id="L438"></a><span class="ln">   438</span>		local_nfree	int64
<a id="L439"></a><span class="ln">   439</span>		local_nlookup	int64
<a id="L440"></a><span class="ln">   440</span>		next_sample	int
<a id="L441"></a><span class="ln">   441</span>		local_by_size	[61]_2_
<a id="L442"></a><span class="ln">   442</span>	}
<a id="L443"></a><span class="ln">   443</span>	
<a id="L444"></a><span class="ln">   444</span>	type mspan struct {
<a id="L445"></a><span class="ln">   445</span>		next	*mspan
<a id="L446"></a><span class="ln">   446</span>		prev	*mspan
<a id="L447"></a><span class="ln">   447</span>		allnext	*mspan
<a id="L448"></a><span class="ln">   448</span>		start	uint64
<a id="L449"></a><span class="ln">   449</span>		npages	uint64
<a id="L450"></a><span class="ln">   450</span>		freelist	*mlink
<a id="L451"></a><span class="ln">   451</span>		ref	uint
<a id="L452"></a><span class="ln">   452</span>		sizeclass	uint
<a id="L453"></a><span class="ln">   453</span>		state	uint
<a id="L454"></a><span class="ln">   454</span>		unusedsince	int64
<a id="L455"></a><span class="ln">   455</span>		npreleased	uint64
<a id="L456"></a><span class="ln">   456</span>		limit	*uint8
<a id="L457"></a><span class="ln">   457</span>	}
<a id="L458"></a><span class="ln">   458</span>	
<a id="L459"></a><span class="ln">   459</span>	type mcentral struct {
<a id="L460"></a><span class="ln">   460</span>		lock
<a id="L461"></a><span class="ln">   461</span>		sizeclass	int
<a id="L462"></a><span class="ln">   462</span>		nonempty	mspan
<a id="L463"></a><span class="ln">   463</span>		empty	mspan
<a id="L464"></a><span class="ln">   464</span>		nfree	int
<a id="L465"></a><span class="ln">   465</span>	}
<a id="L466"></a><span class="ln">   466</span>	
<a id="L467"></a><span class="ln">   467</span>	type _3_ struct {
<a id="L468"></a><span class="ln">   468</span>		mcentral
<a id="L469"></a><span class="ln">   469</span>		<span class="comment">// (union)	pad	[64]uint8</span>
<a id="L470"></a><span class="ln">   470</span>	}
<a id="L471"></a><span class="ln">   471</span>	
<a id="L472"></a><span class="ln">   472</span>	type mheap struct {
<a id="L473"></a><span class="ln">   473</span>		lock
<a id="L474"></a><span class="ln">   474</span>		free	[256]mspan
<a id="L475"></a><span class="ln">   475</span>		large	mspan
<a id="L476"></a><span class="ln">   476</span>		allspans	*mspan
<a id="L477"></a><span class="ln">   477</span>		_map	[4194304]*mspan
<a id="L478"></a><span class="ln">   478</span>		bitmap	*uint8
<a id="L479"></a><span class="ln">   479</span>		bitmap_mapped	uint64
<a id="L480"></a><span class="ln">   480</span>		arena_start	*uint8
<a id="L481"></a><span class="ln">   481</span>		arena_used	*uint8
<a id="L482"></a><span class="ln">   482</span>		arena_end	*uint8
<a id="L483"></a><span class="ln">   483</span>		central	[61]_3_
<a id="L484"></a><span class="ln">   484</span>		spanalloc	fixalloc
<a id="L485"></a><span class="ln">   485</span>		cachealloc	fixalloc
<a id="L486"></a><span class="ln">   486</span>	}
<a id="L487"></a><span class="ln">   487</span>	
<a id="L488"></a><span class="ln">   488</span>	var checking	int
<a id="L489"></a><span class="ln">   489</span>	type sigset struct {
<a id="L490"></a><span class="ln">   490</span>		mask	[2]uint
<a id="L491"></a><span class="ln">   491</span>	}
<a id="L492"></a><span class="ln">   492</span>	
<a id="L493"></a><span class="ln">   493</span>	type rlimit struct {
<a id="L494"></a><span class="ln">   494</span>		rlim_cur	uint64
<a id="L495"></a><span class="ln">   495</span>		rlim_max	uint64
<a id="L496"></a><span class="ln">   496</span>	}
<a id="L497"></a><span class="ln">   497</span>	
<a id="L498"></a><span class="ln">   498</span>	var m0	m
<a id="L499"></a><span class="ln">   499</span>	var g0	g
<a id="L500"></a><span class="ln">   500</span>	var debug	int
<a id="L501"></a><span class="ln">   501</span>	type sched struct {
<a id="L502"></a><span class="ln">   502</span>		lock
<a id="L503"></a><span class="ln">   503</span>		gfree	*g
<a id="L504"></a><span class="ln">   504</span>		goidgen	int
<a id="L505"></a><span class="ln">   505</span>		ghead	*g
<a id="L506"></a><span class="ln">   506</span>		gtail	*g
<a id="L507"></a><span class="ln">   507</span>		gwait	int
<a id="L508"></a><span class="ln">   508</span>		gcount	int
<a id="L509"></a><span class="ln">   509</span>		grunning	int
<a id="L510"></a><span class="ln">   510</span>		mhead	*m
<a id="L511"></a><span class="ln">   511</span>		mwait	int
<a id="L512"></a><span class="ln">   512</span>		mcount	int
<a id="L513"></a><span class="ln">   513</span>		atomic	uint
<a id="L514"></a><span class="ln">   514</span>		profilehz	int
<a id="L515"></a><span class="ln">   515</span>		init	uint8
<a id="L516"></a><span class="ln">   516</span>		lockmain	uint8
<a id="L517"></a><span class="ln">   517</span>		stopped	note
<a id="L518"></a><span class="ln">   518</span>	}
<a id="L519"></a><span class="ln">   519</span>	
<a id="L520"></a><span class="ln">   520</span>	var mwakeup	*m
<a id="L521"></a><span class="ln">   521</span>	var scvg	*g
<a id="L522"></a><span class="ln">   522</span>	var libcgo_thread_start	func(unsafe.Pointer)
<a id="L523"></a><span class="ln">   523</span>	type cgothreadstart struct {
<a id="L524"></a><span class="ln">   524</span>		m	*m
<a id="L525"></a><span class="ln">   525</span>		g	*g
<a id="L526"></a><span class="ln">   526</span>		fn	func()
<a id="L527"></a><span class="ln">   527</span>	}
<a id="L528"></a><span class="ln">   528</span>	
<a id="L529"></a><span class="ln">   529</span>	type _4_ struct {
<a id="L530"></a><span class="ln">   530</span>		lock
<a id="L531"></a><span class="ln">   531</span>		fn	func(*uint64, int)
<a id="L532"></a><span class="ln">   532</span>		hz	int
<a id="L533"></a><span class="ln">   533</span>		pcbuf	[100]uint64
<a id="L534"></a><span class="ln">   534</span>	}
<a id="L535"></a><span class="ln">   535</span>	
<a id="L536"></a><span class="ln">   536</span>	var prof	_4_
<a id="L537"></a><span class="ln">   537</span>	var libcgo_setenv	func(**uint8)
<a id="L538"></a><span class="ln">   538</span>	
<a id="L539"></a><span class="ln">   539</span>	
<a id="L540"></a><span class="ln">   540</span>	
<a id="L541"></a><span class="ln">   541</span>	
<a id="L542"></a><span class="ln">   542</span>	
<a id="L543"></a><span class="ln">   543</span>	
<a id="L544"></a><span class="ln">   544</span>	
<a id="L545"></a><span class="ln">   545</span>	
<a id="L546"></a><span class="ln">   546</span>	
<a id="L547"></a><span class="ln">   547</span>	
<a id="L548"></a><span class="ln">   548</span>	
<a id="L549"></a><span class="ln">   549</span>	
<a id="L550"></a><span class="ln">   550</span>	
<a id="L551"></a><span class="ln">   551</span>	
<a id="L552"></a><span class="ln">   552</span>	
<a id="L553"></a><span class="ln">   553</span>	
<a id="L554"></a><span class="ln">   554</span>	
<a id="L555"></a><span class="ln">   555</span>	
<a id="L556"></a><span class="ln">   556</span>	
<a id="L557"></a><span class="ln">   557</span>	
<a id="L558"></a><span class="ln">   558</span>	type commontype struct {
<a id="L559"></a><span class="ln">   559</span>		size	uint64
<a id="L560"></a><span class="ln">   560</span>		hash	uint
<a id="L561"></a><span class="ln">   561</span>		_unused	uint8
<a id="L562"></a><span class="ln">   562</span>		align	uint8
<a id="L563"></a><span class="ln">   563</span>		fieldalign	uint8
<a id="L564"></a><span class="ln">   564</span>		kind	uint8
<a id="L565"></a><span class="ln">   565</span>		alg	*alg
<a id="L566"></a><span class="ln">   566</span>		_string	*string
<a id="L567"></a><span class="ln">   567</span>		x	*uncommontype
<a id="L568"></a><span class="ln">   568</span>		ptrto	*_type
<a id="L569"></a><span class="ln">   569</span>	}
<a id="L570"></a><span class="ln">   570</span>	
<a id="L571"></a><span class="ln">   571</span>	type method struct {
<a id="L572"></a><span class="ln">   572</span>		name	*string
<a id="L573"></a><span class="ln">   573</span>		pkgpath	*string
<a id="L574"></a><span class="ln">   574</span>		mtyp	*_type
<a id="L575"></a><span class="ln">   575</span>		typ	*_type
<a id="L576"></a><span class="ln">   576</span>		ifn	func()
<a id="L577"></a><span class="ln">   577</span>		tfn	func()
<a id="L578"></a><span class="ln">   578</span>	}
<a id="L579"></a><span class="ln">   579</span>	
<a id="L580"></a><span class="ln">   580</span>	type uncommontype struct {
<a id="L581"></a><span class="ln">   581</span>		name	*string
<a id="L582"></a><span class="ln">   582</span>		pkgpath	*string
<a id="L583"></a><span class="ln">   583</span>		mhdr	[]byte
<a id="L584"></a><span class="ln">   584</span>		m	[0]method
<a id="L585"></a><span class="ln">   585</span>	}
<a id="L586"></a><span class="ln">   586</span>	
<a id="L587"></a><span class="ln">   587</span>	type _type struct {
<a id="L588"></a><span class="ln">   588</span>		_type	unsafe.Pointer
<a id="L589"></a><span class="ln">   589</span>		ptr	unsafe.Pointer
<a id="L590"></a><span class="ln">   590</span>		commontype
<a id="L591"></a><span class="ln">   591</span>	}
<a id="L592"></a><span class="ln">   592</span>	
<a id="L593"></a><span class="ln">   593</span>	type imethod struct {
<a id="L594"></a><span class="ln">   594</span>		name	*string
<a id="L595"></a><span class="ln">   595</span>		pkgpath	*string
<a id="L596"></a><span class="ln">   596</span>		_type	*_type
<a id="L597"></a><span class="ln">   597</span>	}
<a id="L598"></a><span class="ln">   598</span>	
<a id="L599"></a><span class="ln">   599</span>	type interfacetype struct {
<a id="L600"></a><span class="ln">   600</span>		_type
<a id="L601"></a><span class="ln">   601</span>		mhdr	[]byte
<a id="L602"></a><span class="ln">   602</span>		m	[0]imethod
<a id="L603"></a><span class="ln">   603</span>	}
<a id="L604"></a><span class="ln">   604</span>	
<a id="L605"></a><span class="ln">   605</span>	type maptype struct {
<a id="L606"></a><span class="ln">   606</span>		_type
<a id="L607"></a><span class="ln">   607</span>		key	*_type
<a id="L608"></a><span class="ln">   608</span>		elem	*_type
<a id="L609"></a><span class="ln">   609</span>	}
<a id="L610"></a><span class="ln">   610</span>	
<a id="L611"></a><span class="ln">   611</span>	type chantype struct {
<a id="L612"></a><span class="ln">   612</span>		_type
<a id="L613"></a><span class="ln">   613</span>		elem	*_type
<a id="L614"></a><span class="ln">   614</span>		dir	uint64
<a id="L615"></a><span class="ln">   615</span>	}
<a id="L616"></a><span class="ln">   616</span>	
<a id="L617"></a><span class="ln">   617</span>	type slicetype struct {
<a id="L618"></a><span class="ln">   618</span>		_type
<a id="L619"></a><span class="ln">   619</span>		elem	*_type
<a id="L620"></a><span class="ln">   620</span>	}
<a id="L621"></a><span class="ln">   621</span>	
<a id="L622"></a><span class="ln">   622</span>	type functype struct {
<a id="L623"></a><span class="ln">   623</span>		_type
<a id="L624"></a><span class="ln">   624</span>		dotdotdot	uint8
<a id="L625"></a><span class="ln">   625</span>		in	[]byte
<a id="L626"></a><span class="ln">   626</span>		out	[]byte
<a id="L627"></a><span class="ln">   627</span>	}
<a id="L628"></a><span class="ln">   628</span>	
<a id="L629"></a><span class="ln">   629</span>	
<a id="L630"></a><span class="ln">   630</span>	
<a id="L631"></a><span class="ln">   631</span>	
<a id="L632"></a><span class="ln">   632</span>	
<a id="L633"></a><span class="ln">   633</span>	
<a id="L634"></a><span class="ln">   634</span>	
<a id="L635"></a><span class="ln">   635</span>	
<a id="L636"></a><span class="ln">   636</span>	
<a id="L637"></a><span class="ln">   637</span>	
<a id="L638"></a><span class="ln">   638</span>	
<a id="L639"></a><span class="ln">   639</span>	
<a id="L640"></a><span class="ln">   640</span>	type itab struct {
<a id="L641"></a><span class="ln">   641</span>		inter	*interfacetype
<a id="L642"></a><span class="ln">   642</span>		_type	*_type
<a id="L643"></a><span class="ln">   643</span>		link	*itab
<a id="L644"></a><span class="ln">   644</span>		bad	int
<a id="L645"></a><span class="ln">   645</span>		unused	int
<a id="L646"></a><span class="ln">   646</span>		fun	[0]func()
<a id="L647"></a><span class="ln">   647</span>	}
<a id="L648"></a><span class="ln">   648</span>	
<a id="L649"></a><span class="ln">   649</span>	var hash	[1009]*itab
<a id="L650"></a><span class="ln">   650</span>	var ifacelock	lock
<a id="L651"></a><span class="ln">   651</span>	
<a id="L652"></a><span class="ln">   652</span>	
<a id="L653"></a><span class="ln">   653</span>	
<a id="L654"></a><span class="ln">   654</span>	
<a id="L655"></a><span class="ln">   655</span>	
<a id="L656"></a><span class="ln">   656</span>	
<a id="L657"></a><span class="ln">   657</span>	
<a id="L658"></a><span class="ln">   658</span>	
<a id="L659"></a><span class="ln">   659</span>	
<a id="L660"></a><span class="ln">   660</span>	
<a id="L661"></a><span class="ln">   661</span>	
<a id="L662"></a><span class="ln">   662</span>	
<a id="L663"></a><span class="ln">   663</span>	
<a id="L664"></a><span class="ln">   664</span>	
<a id="L665"></a><span class="ln">   665</span>	
<a id="L666"></a><span class="ln">   666</span>	
<a id="L667"></a><span class="ln">   667</span>	
<a id="L668"></a><span class="ln">   668</span>	
<a id="L669"></a><span class="ln">   669</span>	
<a id="L670"></a><span class="ln">   670</span>	
<a id="L671"></a><span class="ln">   671</span>	type hash_iter_sub struct {
<a id="L672"></a><span class="ln">   672</span>		e	*hash_entry
<a id="L673"></a><span class="ln">   673</span>		start	*hash_entry
<a id="L674"></a><span class="ln">   674</span>		last	*hash_entry
<a id="L675"></a><span class="ln">   675</span>	}
<a id="L676"></a><span class="ln">   676</span>	
<a id="L677"></a><span class="ln">   677</span>	type hash_iter struct {
<a id="L678"></a><span class="ln">   678</span>		data	*uint8
<a id="L679"></a><span class="ln">   679</span>		elemsize	int
<a id="L680"></a><span class="ln">   680</span>		changes	int
<a id="L681"></a><span class="ln">   681</span>		i	int
<a id="L682"></a><span class="ln">   682</span>		cycled	uint8
<a id="L683"></a><span class="ln">   683</span>		last_hash	uint64
<a id="L684"></a><span class="ln">   684</span>		cycle	uint64
<a id="L685"></a><span class="ln">   685</span>		h	*hmap
<a id="L686"></a><span class="ln">   686</span>		t	*maptype
<a id="L687"></a><span class="ln">   687</span>		subtable_state	[4]hash_iter_sub
<a id="L688"></a><span class="ln">   688</span>	}
<a id="L689"></a><span class="ln">   689</span>	
<a id="L690"></a><span class="ln">   690</span>	
<a id="L691"></a><span class="ln">   691</span>	
<a id="L692"></a><span class="ln">   692</span>	
<a id="L693"></a><span class="ln">   693</span>	
<a id="L694"></a><span class="ln">   694</span>	
<a id="L695"></a><span class="ln">   695</span>	
<a id="L696"></a><span class="ln">   696</span>	
<a id="L697"></a><span class="ln">   697</span>	
<a id="L698"></a><span class="ln">   698</span>	
<a id="L699"></a><span class="ln">   699</span>	
<a id="L700"></a><span class="ln">   700</span>	type hmap struct {
<a id="L701"></a><span class="ln">   701</span>		count	uint
<a id="L702"></a><span class="ln">   702</span>		datasize	uint8
<a id="L703"></a><span class="ln">   703</span>		max_power	uint8
<a id="L704"></a><span class="ln">   704</span>		indirectval	uint8
<a id="L705"></a><span class="ln">   705</span>		valoff	uint8
<a id="L706"></a><span class="ln">   706</span>		changes	int
<a id="L707"></a><span class="ln">   707</span>		hash0	uint64
<a id="L708"></a><span class="ln">   708</span>		st	*hash_subtable
<a id="L709"></a><span class="ln">   709</span>	}
<a id="L710"></a><span class="ln">   710</span>	
<a id="L711"></a><span class="ln">   711</span>	type hash_entry struct {
<a id="L712"></a><span class="ln">   712</span>		hash	uint64
<a id="L713"></a><span class="ln">   713</span>		data	[1]uint8
<a id="L714"></a><span class="ln">   714</span>	}
<a id="L715"></a><span class="ln">   715</span>	
<a id="L716"></a><span class="ln">   716</span>	type hash_subtable struct {
<a id="L717"></a><span class="ln">   717</span>		power	uint8
<a id="L718"></a><span class="ln">   718</span>		used	uint8
<a id="L719"></a><span class="ln">   719</span>		datasize	uint8
<a id="L720"></a><span class="ln">   720</span>		max_probes	uint8
<a id="L721"></a><span class="ln">   721</span>		limit_bytes	int16
<a id="L722"></a><span class="ln">   722</span>		last	*hash_entry
<a id="L723"></a><span class="ln">   723</span>		entry	[1]hash_entry
<a id="L724"></a><span class="ln">   724</span>	}
<a id="L725"></a><span class="ln">   725</span>	
<a id="L726"></a><span class="ln">   726</span>	
<a id="L727"></a><span class="ln">   727</span>	
<a id="L728"></a><span class="ln">   728</span>	
<a id="L729"></a><span class="ln">   729</span>	
<a id="L730"></a><span class="ln">   730</span>	
<a id="L731"></a><span class="ln">   731</span>	
<a id="L732"></a><span class="ln">   732</span>	
<a id="L733"></a><span class="ln">   733</span>	
<a id="L734"></a><span class="ln">   734</span>	
<a id="L735"></a><span class="ln">   735</span>	
<a id="L736"></a><span class="ln">   736</span>	
<a id="L737"></a><span class="ln">   737</span>	
<a id="L738"></a><span class="ln">   738</span>	
<a id="L739"></a><span class="ln">   739</span>	
<a id="L740"></a><span class="ln">   740</span>	
<a id="L741"></a><span class="ln">   741</span>	
<a id="L742"></a><span class="ln">   742</span>	
<a id="L743"></a><span class="ln">   743</span>	
<a id="L744"></a><span class="ln">   744</span>	
<a id="L745"></a><span class="ln">   745</span>	
<a id="L746"></a><span class="ln">   746</span>	
<a id="L747"></a><span class="ln">   747</span>	
<a id="L748"></a><span class="ln">   748</span>	
<a id="L749"></a><span class="ln">   749</span>	
<a id="L750"></a><span class="ln">   750</span>	
<a id="L751"></a><span class="ln">   751</span>	
<a id="L752"></a><span class="ln">   752</span>	
<a id="L753"></a><span class="ln">   753</span>	
<a id="L754"></a><span class="ln">   754</span>	
<a id="L755"></a><span class="ln">   755</span>	
<a id="L756"></a><span class="ln">   756</span>	type sudog struct {
<a id="L757"></a><span class="ln">   757</span>		g	*g
<a id="L758"></a><span class="ln">   758</span>		selgen	uint
<a id="L759"></a><span class="ln">   759</span>		link	*sudog
<a id="L760"></a><span class="ln">   760</span>		elem	*uint8
<a id="L761"></a><span class="ln">   761</span>	}
<a id="L762"></a><span class="ln">   762</span>	
<a id="L763"></a><span class="ln">   763</span>	type waitq struct {
<a id="L764"></a><span class="ln">   764</span>		first	*sudog
<a id="L765"></a><span class="ln">   765</span>		last	*sudog
<a id="L766"></a><span class="ln">   766</span>	}
<a id="L767"></a><span class="ln">   767</span>	
<a id="L768"></a><span class="ln">   768</span>	type hchan struct {
<a id="L769"></a><span class="ln">   769</span>		qcount	uint
<a id="L770"></a><span class="ln">   770</span>		dataqsiz	uint
<a id="L771"></a><span class="ln">   771</span>		elemsize	uint16
<a id="L772"></a><span class="ln">   772</span>		closed	uint8
<a id="L773"></a><span class="ln">   773</span>		elemalign	uint8
<a id="L774"></a><span class="ln">   774</span>		elemalg	*alg
<a id="L775"></a><span class="ln">   775</span>		sendx	uint
<a id="L776"></a><span class="ln">   776</span>		recvx	uint
<a id="L777"></a><span class="ln">   777</span>		recvq	waitq
<a id="L778"></a><span class="ln">   778</span>		sendq	waitq
<a id="L779"></a><span class="ln">   779</span>		lock
<a id="L780"></a><span class="ln">   780</span>	}
<a id="L781"></a><span class="ln">   781</span>	
<a id="L782"></a><span class="ln">   782</span>	type scase struct {
<a id="L783"></a><span class="ln">   783</span>		sg	sudog
<a id="L784"></a><span class="ln">   784</span>		_chan	*hchan
<a id="L785"></a><span class="ln">   785</span>		pc	*uint8
<a id="L786"></a><span class="ln">   786</span>		kind	uint16
<a id="L787"></a><span class="ln">   787</span>		so	uint16
<a id="L788"></a><span class="ln">   788</span>		receivedp	*uint8
<a id="L789"></a><span class="ln">   789</span>	}
<a id="L790"></a><span class="ln">   790</span>	
<a id="L791"></a><span class="ln">   791</span>	type _select struct {
<a id="L792"></a><span class="ln">   792</span>		tcase	uint16
<a id="L793"></a><span class="ln">   793</span>		ncase	uint16
<a id="L794"></a><span class="ln">   794</span>		pollorder	*uint16
<a id="L795"></a><span class="ln">   795</span>		lockorder	**hchan
<a id="L796"></a><span class="ln">   796</span>		scase	[1]scase
<a id="L797"></a><span class="ln">   797</span>	}
<a id="L798"></a><span class="ln">   798</span>	
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

