<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/image/format.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/image/format.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package image
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bufio&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;errors&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;io&#34;
<a id="L11"></a><span class="ln">    11</span>	)
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// ErrFormat indicates that decoding encountered an unknown format.</span>
<a id="L14"></a><span class="ln">    14</span>	var ErrFormat = errors.New(&#34;image: unknown format&#34;)
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// A format holds an image format&#39;s name, magic header and how to decode it.</span>
<a id="L17"></a><span class="ln">    17</span>	type format struct {
<a id="L18"></a><span class="ln">    18</span>		name, magic  string
<a id="L19"></a><span class="ln">    19</span>		decode       func(io.Reader) (Image, error)
<a id="L20"></a><span class="ln">    20</span>		decodeConfig func(io.Reader) (Config, error)
<a id="L21"></a><span class="ln">    21</span>	}
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// Formats is the list of registered formats.</span>
<a id="L24"></a><span class="ln">    24</span>	var formats []format
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// RegisterFormat registers an image format for use by Decode.</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// Name is the name of the format, like &#34;jpeg&#34; or &#34;png&#34;.</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// Magic is the magic prefix that identifies the format&#39;s encoding. The magic</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// string can contain &#34;?&#34; wildcards that each match any one byte.</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// Decode is the function that decodes the encoded image.</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// DecodeConfig is the function that decodes just its configuration.</span>
<a id="L32"></a><span class="ln">    32</span>	func RegisterFormat(name, magic string, decode func(io.Reader) (Image, error), decodeConfig func(io.Reader) (Config, error)) {
<a id="L33"></a><span class="ln">    33</span>		formats = append(formats, format{name, magic, decode, decodeConfig})
<a id="L34"></a><span class="ln">    34</span>	}
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// A reader is an io.Reader that can also peek ahead.</span>
<a id="L37"></a><span class="ln">    37</span>	type reader interface {
<a id="L38"></a><span class="ln">    38</span>		io.Reader
<a id="L39"></a><span class="ln">    39</span>		Peek(int) ([]byte, error)
<a id="L40"></a><span class="ln">    40</span>	}
<a id="L41"></a><span class="ln">    41</span>	
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">// AsReader converts an io.Reader to a reader.</span>
<a id="L43"></a><span class="ln">    43</span>	func asReader(r io.Reader) reader {
<a id="L44"></a><span class="ln">    44</span>		if rr, ok := r.(reader); ok {
<a id="L45"></a><span class="ln">    45</span>			return rr
<a id="L46"></a><span class="ln">    46</span>		}
<a id="L47"></a><span class="ln">    47</span>		return bufio.NewReader(r)
<a id="L48"></a><span class="ln">    48</span>	}
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// Match returns whether magic matches b. Magic may contain &#34;?&#34; wildcards.</span>
<a id="L51"></a><span class="ln">    51</span>	func match(magic string, b []byte) bool {
<a id="L52"></a><span class="ln">    52</span>		if len(magic) != len(b) {
<a id="L53"></a><span class="ln">    53</span>			return false
<a id="L54"></a><span class="ln">    54</span>		}
<a id="L55"></a><span class="ln">    55</span>		for i, c := range b {
<a id="L56"></a><span class="ln">    56</span>			if magic[i] != c &amp;&amp; magic[i] != &#39;?&#39; {
<a id="L57"></a><span class="ln">    57</span>				return false
<a id="L58"></a><span class="ln">    58</span>			}
<a id="L59"></a><span class="ln">    59</span>		}
<a id="L60"></a><span class="ln">    60</span>		return true
<a id="L61"></a><span class="ln">    61</span>	}
<a id="L62"></a><span class="ln">    62</span>	
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">// Sniff determines the format of r&#39;s data.</span>
<a id="L64"></a><span class="ln">    64</span>	func sniff(r reader) format {
<a id="L65"></a><span class="ln">    65</span>		for _, f := range formats {
<a id="L66"></a><span class="ln">    66</span>			b, err := r.Peek(len(f.magic))
<a id="L67"></a><span class="ln">    67</span>			if err == nil &amp;&amp; match(f.magic, b) {
<a id="L68"></a><span class="ln">    68</span>				return f
<a id="L69"></a><span class="ln">    69</span>			}
<a id="L70"></a><span class="ln">    70</span>		}
<a id="L71"></a><span class="ln">    71</span>		return format{}
<a id="L72"></a><span class="ln">    72</span>	}
<a id="L73"></a><span class="ln">    73</span>	
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">// Decode decodes an image that has been encoded in a registered format.</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">// The string returned is the format name used during format registration.</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">// Format registration is typically done by the init method of the codec-</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// specific package.</span>
<a id="L78"></a><span class="ln">    78</span>	func Decode(r io.Reader) (Image, string, error) {
<a id="L79"></a><span class="ln">    79</span>		rr := asReader(r)
<a id="L80"></a><span class="ln">    80</span>		f := sniff(rr)
<a id="L81"></a><span class="ln">    81</span>		if f.decode == nil {
<a id="L82"></a><span class="ln">    82</span>			return nil, &#34;&#34;, ErrFormat
<a id="L83"></a><span class="ln">    83</span>		}
<a id="L84"></a><span class="ln">    84</span>		m, err := f.decode(rr)
<a id="L85"></a><span class="ln">    85</span>		return m, f.name, err
<a id="L86"></a><span class="ln">    86</span>	}
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// DecodeConfig decodes the color model and dimensions of an image that has</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">// been encoded in a registered format. The string returned is the format name</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// used during format registration. Format registration is typically done by</span>
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// the init method of the codec-specific package.</span>
<a id="L92"></a><span class="ln">    92</span>	func DecodeConfig(r io.Reader) (Config, string, error) {
<a id="L93"></a><span class="ln">    93</span>		rr := asReader(r)
<a id="L94"></a><span class="ln">    94</span>		f := sniff(rr)
<a id="L95"></a><span class="ln">    95</span>		if f.decodeConfig == nil {
<a id="L96"></a><span class="ln">    96</span>			return Config{}, &#34;&#34;, ErrFormat
<a id="L97"></a><span class="ln">    97</span>		}
<a id="L98"></a><span class="ln">    98</span>		c, err := f.decodeConfig(rr)
<a id="L99"></a><span class="ln">    99</span>		return c, f.name, err
<a id="L100"></a><span class="ln">   100</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

