<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/image/jpeg/idct.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/image/jpeg/idct.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package jpeg
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// This is a Go translation of idct.c from</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">//</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// http://standards.iso.org/ittf/PubliclyAvailableStandards/ISO_IEC_13818-4_2004_Conformance_Testing/Video/verifier/mpeg2decode_960109.tar.gz</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">//</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// which carries the following notice:</span>
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">/* Copyright (C) 1996, MPEG Software Simulation Group. All Rights Reserved. */</span>
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">/*
</span><a id="L16"></a><span class="ln">    16</span>	<span class="comment"> * Disclaimer of Warranty
</span><a id="L17"></a><span class="ln">    17</span>	<span class="comment"> *
</span><a id="L18"></a><span class="ln">    18</span>	<span class="comment"> * These software programs are available to the user without any license fee or
</span><a id="L19"></a><span class="ln">    19</span>	<span class="comment"> * royalty on an &#34;as is&#34; basis.  The MPEG Software Simulation Group disclaims
</span><a id="L20"></a><span class="ln">    20</span>	<span class="comment"> * any and all warranties, whether express, implied, or statuary, including any
</span><a id="L21"></a><span class="ln">    21</span>	<span class="comment"> * implied warranties or merchantability or of fitness for a particular
</span><a id="L22"></a><span class="ln">    22</span>	<span class="comment"> * purpose.  In no event shall the copyright-holder be liable for any
</span><a id="L23"></a><span class="ln">    23</span>	<span class="comment"> * incidental, punitive, or consequential damages of any kind whatsoever
</span><a id="L24"></a><span class="ln">    24</span>	<span class="comment"> * arising from the use of these programs.
</span><a id="L25"></a><span class="ln">    25</span>	<span class="comment"> *
</span><a id="L26"></a><span class="ln">    26</span>	<span class="comment"> * This disclaimer of warranty extends to the user of these programs and user&#39;s
</span><a id="L27"></a><span class="ln">    27</span>	<span class="comment"> * customers, employees, agents, transferees, successors, and assigns.
</span><a id="L28"></a><span class="ln">    28</span>	<span class="comment"> *
</span><a id="L29"></a><span class="ln">    29</span>	<span class="comment"> * The MPEG Software Simulation Group does not represent or warrant that the
</span><a id="L30"></a><span class="ln">    30</span>	<span class="comment"> * programs furnished hereunder are free of infringement of any third-party
</span><a id="L31"></a><span class="ln">    31</span>	<span class="comment"> * patents.
</span><a id="L32"></a><span class="ln">    32</span>	<span class="comment"> *
</span><a id="L33"></a><span class="ln">    33</span>	<span class="comment"> * Commercial implementations of MPEG-1 and MPEG-2 video, including shareware,
</span><a id="L34"></a><span class="ln">    34</span>	<span class="comment"> * are subject to royalty fees to patent holders.  Many of these patents are
</span><a id="L35"></a><span class="ln">    35</span>	<span class="comment"> * general enough such that they are unavoidable regardless of implementation
</span><a id="L36"></a><span class="ln">    36</span>	<span class="comment"> * design.
</span><a id="L37"></a><span class="ln">    37</span>	<span class="comment"> *
</span><a id="L38"></a><span class="ln">    38</span>	<span class="comment"> */</span>
<a id="L39"></a><span class="ln">    39</span>	
<a id="L40"></a><span class="ln">    40</span>	const (
<a id="L41"></a><span class="ln">    41</span>		w1 = 2841 <span class="comment">// 2048*sqrt(2)*cos(1*pi/16)</span>
<a id="L42"></a><span class="ln">    42</span>		w2 = 2676 <span class="comment">// 2048*sqrt(2)*cos(2*pi/16)</span>
<a id="L43"></a><span class="ln">    43</span>		w3 = 2408 <span class="comment">// 2048*sqrt(2)*cos(3*pi/16)</span>
<a id="L44"></a><span class="ln">    44</span>		w5 = 1609 <span class="comment">// 2048*sqrt(2)*cos(5*pi/16)</span>
<a id="L45"></a><span class="ln">    45</span>		w6 = 1108 <span class="comment">// 2048*sqrt(2)*cos(6*pi/16)</span>
<a id="L46"></a><span class="ln">    46</span>		w7 = 565  <span class="comment">// 2048*sqrt(2)*cos(7*pi/16)</span>
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>		w1pw7 = w1 + w7
<a id="L49"></a><span class="ln">    49</span>		w1mw7 = w1 - w7
<a id="L50"></a><span class="ln">    50</span>		w2pw6 = w2 + w6
<a id="L51"></a><span class="ln">    51</span>		w2mw6 = w2 - w6
<a id="L52"></a><span class="ln">    52</span>		w3pw5 = w3 + w5
<a id="L53"></a><span class="ln">    53</span>		w3mw5 = w3 - w5
<a id="L54"></a><span class="ln">    54</span>	
<a id="L55"></a><span class="ln">    55</span>		r2 = 181 <span class="comment">// 256/sqrt(2)</span>
<a id="L56"></a><span class="ln">    56</span>	)
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// idct performs a 2-D Inverse Discrete Cosine Transformation, followed by a</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// +128 level shift and a clip to [0, 255], writing the results to dst.</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// stride is the number of elements between successive rows of dst.</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">//</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">// The input coefficients should already have been multiplied by the</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">// appropriate quantization table. We use fixed-point computation, with the</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// number of bits for the fractional component varying over the intermediate</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// stages.</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">//</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// For more on the actual algorithm, see Z. Wang, &#34;Fast algorithms for the</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// discrete W transform and for the discrete Fourier transform&#34;, IEEE Trans. on</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// ASSP, Vol. ASSP- 32, pp. 803-816, Aug. 1984.</span>
<a id="L70"></a><span class="ln">    70</span>	func idct(dst []byte, stride int, src *block) {
<a id="L71"></a><span class="ln">    71</span>		<span class="comment">// Horizontal 1-D IDCT.</span>
<a id="L72"></a><span class="ln">    72</span>		for y := 0; y &lt; 8; y++ {
<a id="L73"></a><span class="ln">    73</span>			<span class="comment">// If all the AC components are zero, then the IDCT is trivial.</span>
<a id="L74"></a><span class="ln">    74</span>			if src[y*8+1] == 0 &amp;&amp; src[y*8+2] == 0 &amp;&amp; src[y*8+3] == 0 &amp;&amp;
<a id="L75"></a><span class="ln">    75</span>				src[y*8+4] == 0 &amp;&amp; src[y*8+5] == 0 &amp;&amp; src[y*8+6] == 0 &amp;&amp; src[y*8+7] == 0 {
<a id="L76"></a><span class="ln">    76</span>				dc := src[y*8+0] &lt;&lt; 3
<a id="L77"></a><span class="ln">    77</span>				src[y*8+0] = dc
<a id="L78"></a><span class="ln">    78</span>				src[y*8+1] = dc
<a id="L79"></a><span class="ln">    79</span>				src[y*8+2] = dc
<a id="L80"></a><span class="ln">    80</span>				src[y*8+3] = dc
<a id="L81"></a><span class="ln">    81</span>				src[y*8+4] = dc
<a id="L82"></a><span class="ln">    82</span>				src[y*8+5] = dc
<a id="L83"></a><span class="ln">    83</span>				src[y*8+6] = dc
<a id="L84"></a><span class="ln">    84</span>				src[y*8+7] = dc
<a id="L85"></a><span class="ln">    85</span>				continue
<a id="L86"></a><span class="ln">    86</span>			}
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>			<span class="comment">// Prescale.</span>
<a id="L89"></a><span class="ln">    89</span>			x0 := (src[y*8+0] &lt;&lt; 11) + 128
<a id="L90"></a><span class="ln">    90</span>			x1 := src[y*8+4] &lt;&lt; 11
<a id="L91"></a><span class="ln">    91</span>			x2 := src[y*8+6]
<a id="L92"></a><span class="ln">    92</span>			x3 := src[y*8+2]
<a id="L93"></a><span class="ln">    93</span>			x4 := src[y*8+1]
<a id="L94"></a><span class="ln">    94</span>			x5 := src[y*8+7]
<a id="L95"></a><span class="ln">    95</span>			x6 := src[y*8+5]
<a id="L96"></a><span class="ln">    96</span>			x7 := src[y*8+3]
<a id="L97"></a><span class="ln">    97</span>	
<a id="L98"></a><span class="ln">    98</span>			<span class="comment">// Stage 1.</span>
<a id="L99"></a><span class="ln">    99</span>			x8 := w7 * (x4 + x5)
<a id="L100"></a><span class="ln">   100</span>			x4 = x8 + w1mw7*x4
<a id="L101"></a><span class="ln">   101</span>			x5 = x8 - w1pw7*x5
<a id="L102"></a><span class="ln">   102</span>			x8 = w3 * (x6 + x7)
<a id="L103"></a><span class="ln">   103</span>			x6 = x8 - w3mw5*x6
<a id="L104"></a><span class="ln">   104</span>			x7 = x8 - w3pw5*x7
<a id="L105"></a><span class="ln">   105</span>	
<a id="L106"></a><span class="ln">   106</span>			<span class="comment">// Stage 2.</span>
<a id="L107"></a><span class="ln">   107</span>			x8 = x0 + x1
<a id="L108"></a><span class="ln">   108</span>			x0 -= x1
<a id="L109"></a><span class="ln">   109</span>			x1 = w6 * (x3 + x2)
<a id="L110"></a><span class="ln">   110</span>			x2 = x1 - w2pw6*x2
<a id="L111"></a><span class="ln">   111</span>			x3 = x1 + w2mw6*x3
<a id="L112"></a><span class="ln">   112</span>			x1 = x4 + x6
<a id="L113"></a><span class="ln">   113</span>			x4 -= x6
<a id="L114"></a><span class="ln">   114</span>			x6 = x5 + x7
<a id="L115"></a><span class="ln">   115</span>			x5 -= x7
<a id="L116"></a><span class="ln">   116</span>	
<a id="L117"></a><span class="ln">   117</span>			<span class="comment">// Stage 3.</span>
<a id="L118"></a><span class="ln">   118</span>			x7 = x8 + x3
<a id="L119"></a><span class="ln">   119</span>			x8 -= x3
<a id="L120"></a><span class="ln">   120</span>			x3 = x0 + x2
<a id="L121"></a><span class="ln">   121</span>			x0 -= x2
<a id="L122"></a><span class="ln">   122</span>			x2 = (r2*(x4+x5) + 128) &gt;&gt; 8
<a id="L123"></a><span class="ln">   123</span>			x4 = (r2*(x4-x5) + 128) &gt;&gt; 8
<a id="L124"></a><span class="ln">   124</span>	
<a id="L125"></a><span class="ln">   125</span>			<span class="comment">// Stage 4.</span>
<a id="L126"></a><span class="ln">   126</span>			src[8*y+0] = (x7 + x1) &gt;&gt; 8
<a id="L127"></a><span class="ln">   127</span>			src[8*y+1] = (x3 + x2) &gt;&gt; 8
<a id="L128"></a><span class="ln">   128</span>			src[8*y+2] = (x0 + x4) &gt;&gt; 8
<a id="L129"></a><span class="ln">   129</span>			src[8*y+3] = (x8 + x6) &gt;&gt; 8
<a id="L130"></a><span class="ln">   130</span>			src[8*y+4] = (x8 - x6) &gt;&gt; 8
<a id="L131"></a><span class="ln">   131</span>			src[8*y+5] = (x0 - x4) &gt;&gt; 8
<a id="L132"></a><span class="ln">   132</span>			src[8*y+6] = (x3 - x2) &gt;&gt; 8
<a id="L133"></a><span class="ln">   133</span>			src[8*y+7] = (x7 - x1) &gt;&gt; 8
<a id="L134"></a><span class="ln">   134</span>		}
<a id="L135"></a><span class="ln">   135</span>	
<a id="L136"></a><span class="ln">   136</span>		<span class="comment">// Vertical 1-D IDCT.</span>
<a id="L137"></a><span class="ln">   137</span>		for x := 0; x &lt; 8; x++ {
<a id="L138"></a><span class="ln">   138</span>			<span class="comment">// Similar to the horizontal 1-D IDCT case, if all the AC components are zero, then the IDCT is trivial.</span>
<a id="L139"></a><span class="ln">   139</span>			<span class="comment">// However, after performing the horizontal 1-D IDCT, there are typically non-zero AC components, so</span>
<a id="L140"></a><span class="ln">   140</span>			<span class="comment">// we do not bother to check for the all-zero case.</span>
<a id="L141"></a><span class="ln">   141</span>	
<a id="L142"></a><span class="ln">   142</span>			<span class="comment">// Prescale.</span>
<a id="L143"></a><span class="ln">   143</span>			y0 := (src[8*0+x] &lt;&lt; 8) + 8192
<a id="L144"></a><span class="ln">   144</span>			y1 := src[8*4+x] &lt;&lt; 8
<a id="L145"></a><span class="ln">   145</span>			y2 := src[8*6+x]
<a id="L146"></a><span class="ln">   146</span>			y3 := src[8*2+x]
<a id="L147"></a><span class="ln">   147</span>			y4 := src[8*1+x]
<a id="L148"></a><span class="ln">   148</span>			y5 := src[8*7+x]
<a id="L149"></a><span class="ln">   149</span>			y6 := src[8*5+x]
<a id="L150"></a><span class="ln">   150</span>			y7 := src[8*3+x]
<a id="L151"></a><span class="ln">   151</span>	
<a id="L152"></a><span class="ln">   152</span>			<span class="comment">// Stage 1.</span>
<a id="L153"></a><span class="ln">   153</span>			y8 := w7*(y4+y5) + 4
<a id="L154"></a><span class="ln">   154</span>			y4 = (y8 + w1mw7*y4) &gt;&gt; 3
<a id="L155"></a><span class="ln">   155</span>			y5 = (y8 - w1pw7*y5) &gt;&gt; 3
<a id="L156"></a><span class="ln">   156</span>			y8 = w3*(y6+y7) + 4
<a id="L157"></a><span class="ln">   157</span>			y6 = (y8 - w3mw5*y6) &gt;&gt; 3
<a id="L158"></a><span class="ln">   158</span>			y7 = (y8 - w3pw5*y7) &gt;&gt; 3
<a id="L159"></a><span class="ln">   159</span>	
<a id="L160"></a><span class="ln">   160</span>			<span class="comment">// Stage 2.</span>
<a id="L161"></a><span class="ln">   161</span>			y8 = y0 + y1
<a id="L162"></a><span class="ln">   162</span>			y0 -= y1
<a id="L163"></a><span class="ln">   163</span>			y1 = w6*(y3+y2) + 4
<a id="L164"></a><span class="ln">   164</span>			y2 = (y1 - w2pw6*y2) &gt;&gt; 3
<a id="L165"></a><span class="ln">   165</span>			y3 = (y1 + w2mw6*y3) &gt;&gt; 3
<a id="L166"></a><span class="ln">   166</span>			y1 = y4 + y6
<a id="L167"></a><span class="ln">   167</span>			y4 -= y6
<a id="L168"></a><span class="ln">   168</span>			y6 = y5 + y7
<a id="L169"></a><span class="ln">   169</span>			y5 -= y7
<a id="L170"></a><span class="ln">   170</span>	
<a id="L171"></a><span class="ln">   171</span>			<span class="comment">// Stage 3.</span>
<a id="L172"></a><span class="ln">   172</span>			y7 = y8 + y3
<a id="L173"></a><span class="ln">   173</span>			y8 -= y3
<a id="L174"></a><span class="ln">   174</span>			y3 = y0 + y2
<a id="L175"></a><span class="ln">   175</span>			y0 -= y2
<a id="L176"></a><span class="ln">   176</span>			y2 = (r2*(y4+y5) + 128) &gt;&gt; 8
<a id="L177"></a><span class="ln">   177</span>			y4 = (r2*(y4-y5) + 128) &gt;&gt; 8
<a id="L178"></a><span class="ln">   178</span>	
<a id="L179"></a><span class="ln">   179</span>			<span class="comment">// Stage 4.</span>
<a id="L180"></a><span class="ln">   180</span>			src[8*0+x] = (y7 + y1) &gt;&gt; 14
<a id="L181"></a><span class="ln">   181</span>			src[8*1+x] = (y3 + y2) &gt;&gt; 14
<a id="L182"></a><span class="ln">   182</span>			src[8*2+x] = (y0 + y4) &gt;&gt; 14
<a id="L183"></a><span class="ln">   183</span>			src[8*3+x] = (y8 + y6) &gt;&gt; 14
<a id="L184"></a><span class="ln">   184</span>			src[8*4+x] = (y8 - y6) &gt;&gt; 14
<a id="L185"></a><span class="ln">   185</span>			src[8*5+x] = (y0 - y4) &gt;&gt; 14
<a id="L186"></a><span class="ln">   186</span>			src[8*6+x] = (y3 - y2) &gt;&gt; 14
<a id="L187"></a><span class="ln">   187</span>			src[8*7+x] = (y7 - y1) &gt;&gt; 14
<a id="L188"></a><span class="ln">   188</span>		}
<a id="L189"></a><span class="ln">   189</span>	
<a id="L190"></a><span class="ln">   190</span>		<span class="comment">// Level shift by +128, clip to [0, 255], and write to dst.</span>
<a id="L191"></a><span class="ln">   191</span>		for y := 0; y &lt; 8; y++ {
<a id="L192"></a><span class="ln">   192</span>			for x := 0; x &lt; 8; x++ {
<a id="L193"></a><span class="ln">   193</span>				c := src[y*8+x]
<a id="L194"></a><span class="ln">   194</span>				if c &lt; -128 {
<a id="L195"></a><span class="ln">   195</span>					c = 0
<a id="L196"></a><span class="ln">   196</span>				} else if c &gt; 127 {
<a id="L197"></a><span class="ln">   197</span>					c = 255
<a id="L198"></a><span class="ln">   198</span>				} else {
<a id="L199"></a><span class="ln">   199</span>					c += 128
<a id="L200"></a><span class="ln">   200</span>				}
<a id="L201"></a><span class="ln">   201</span>				dst[y*stride+x] = uint8(c)
<a id="L202"></a><span class="ln">   202</span>			}
<a id="L203"></a><span class="ln">   203</span>		}
<a id="L204"></a><span class="ln">   204</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

