<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/image/jpeg/fdct.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/image/jpeg/fdct.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package jpeg
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// This file implements a Forward Discrete Cosine Transformation.</span>
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">/*
</span><a id="L10"></a><span class="ln">    10</span>	<span class="comment">It is based on the code in jfdctint.c from the Independent JPEG Group,
</span><a id="L11"></a><span class="ln">    11</span>	<span class="comment">found at http://www.ijg.org/files/jpegsrc.v8c.tar.gz.
</span><a id="L12"></a><span class="ln">    12</span>	<span class="comment">
</span><a id="L13"></a><span class="ln">    13</span>	<span class="comment">The &#34;LEGAL ISSUES&#34; section of the README in that archive says:
</span><a id="L14"></a><span class="ln">    14</span>	<span class="comment">
</span><a id="L15"></a><span class="ln">    15</span>	<span class="comment">In plain English:
</span><a id="L16"></a><span class="ln">    16</span>	<span class="comment">
</span><a id="L17"></a><span class="ln">    17</span>	<span class="comment">1. We don&#39;t promise that this software works.  (But if you find any bugs,
</span><a id="L18"></a><span class="ln">    18</span>	<span class="comment">   please let us know!)
</span><a id="L19"></a><span class="ln">    19</span>	<span class="comment">2. You can use this software for whatever you want.  You don&#39;t have to pay us.
</span><a id="L20"></a><span class="ln">    20</span>	<span class="comment">3. You may not pretend that you wrote this software.  If you use it in a
</span><a id="L21"></a><span class="ln">    21</span>	<span class="comment">   program, you must acknowledge somewhere in your documentation that
</span><a id="L22"></a><span class="ln">    22</span>	<span class="comment">   you&#39;ve used the IJG code.
</span><a id="L23"></a><span class="ln">    23</span>	<span class="comment">
</span><a id="L24"></a><span class="ln">    24</span>	<span class="comment">In legalese:
</span><a id="L25"></a><span class="ln">    25</span>	<span class="comment">
</span><a id="L26"></a><span class="ln">    26</span>	<span class="comment">The authors make NO WARRANTY or representation, either express or implied,
</span><a id="L27"></a><span class="ln">    27</span>	<span class="comment">with respect to this software, its quality, accuracy, merchantability, or
</span><a id="L28"></a><span class="ln">    28</span>	<span class="comment">fitness for a particular purpose.  This software is provided &#34;AS IS&#34;, and you,
</span><a id="L29"></a><span class="ln">    29</span>	<span class="comment">its user, assume the entire risk as to its quality and accuracy.
</span><a id="L30"></a><span class="ln">    30</span>	<span class="comment">
</span><a id="L31"></a><span class="ln">    31</span>	<span class="comment">This software is copyright (C) 1991-2011, Thomas G. Lane, Guido Vollbeding.
</span><a id="L32"></a><span class="ln">    32</span>	<span class="comment">All Rights Reserved except as specified below.
</span><a id="L33"></a><span class="ln">    33</span>	<span class="comment">
</span><a id="L34"></a><span class="ln">    34</span>	<span class="comment">Permission is hereby granted to use, copy, modify, and distribute this
</span><a id="L35"></a><span class="ln">    35</span>	<span class="comment">software (or portions thereof) for any purpose, without fee, subject to these
</span><a id="L36"></a><span class="ln">    36</span>	<span class="comment">conditions:
</span><a id="L37"></a><span class="ln">    37</span>	<span class="comment">(1) If any part of the source code for this software is distributed, then this
</span><a id="L38"></a><span class="ln">    38</span>	<span class="comment">README file must be included, with this copyright and no-warranty notice
</span><a id="L39"></a><span class="ln">    39</span>	<span class="comment">unaltered; and any additions, deletions, or changes to the original files
</span><a id="L40"></a><span class="ln">    40</span>	<span class="comment">must be clearly indicated in accompanying documentation.
</span><a id="L41"></a><span class="ln">    41</span>	<span class="comment">(2) If only executable code is distributed, then the accompanying
</span><a id="L42"></a><span class="ln">    42</span>	<span class="comment">documentation must state that &#34;this software is based in part on the work of
</span><a id="L43"></a><span class="ln">    43</span>	<span class="comment">the Independent JPEG Group&#34;.
</span><a id="L44"></a><span class="ln">    44</span>	<span class="comment">(3) Permission for use of this software is granted only if the user accepts
</span><a id="L45"></a><span class="ln">    45</span>	<span class="comment">full responsibility for any undesirable consequences; the authors accept
</span><a id="L46"></a><span class="ln">    46</span>	<span class="comment">NO LIABILITY for damages of any kind.
</span><a id="L47"></a><span class="ln">    47</span>	<span class="comment">
</span><a id="L48"></a><span class="ln">    48</span>	<span class="comment">These conditions apply to any software derived from or based on the IJG code,
</span><a id="L49"></a><span class="ln">    49</span>	<span class="comment">not just to the unmodified library.  If you use our work, you ought to
</span><a id="L50"></a><span class="ln">    50</span>	<span class="comment">acknowledge us.
</span><a id="L51"></a><span class="ln">    51</span>	<span class="comment">
</span><a id="L52"></a><span class="ln">    52</span>	<span class="comment">Permission is NOT granted for the use of any IJG author&#39;s name or company name
</span><a id="L53"></a><span class="ln">    53</span>	<span class="comment">in advertising or publicity relating to this software or products derived from
</span><a id="L54"></a><span class="ln">    54</span>	<span class="comment">it.  This software may be referred to only as &#34;the Independent JPEG Group&#39;s
</span><a id="L55"></a><span class="ln">    55</span>	<span class="comment">software&#34;.
</span><a id="L56"></a><span class="ln">    56</span>	<span class="comment">
</span><a id="L57"></a><span class="ln">    57</span>	<span class="comment">We specifically permit and encourage the use of this software as the basis of
</span><a id="L58"></a><span class="ln">    58</span>	<span class="comment">commercial products, provided that all warranty or liability claims are
</span><a id="L59"></a><span class="ln">    59</span>	<span class="comment">assumed by the product vendor.
</span><a id="L60"></a><span class="ln">    60</span>	<span class="comment">*/</span>
<a id="L61"></a><span class="ln">    61</span>	
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">// Trigonometric constants in 13-bit fixed point format.</span>
<a id="L63"></a><span class="ln">    63</span>	const (
<a id="L64"></a><span class="ln">    64</span>		fix_0_298631336 = 2446
<a id="L65"></a><span class="ln">    65</span>		fix_0_390180644 = 3196
<a id="L66"></a><span class="ln">    66</span>		fix_0_541196100 = 4433
<a id="L67"></a><span class="ln">    67</span>		fix_0_765366865 = 6270
<a id="L68"></a><span class="ln">    68</span>		fix_0_899976223 = 7373
<a id="L69"></a><span class="ln">    69</span>		fix_1_175875602 = 9633
<a id="L70"></a><span class="ln">    70</span>		fix_1_501321110 = 12299
<a id="L71"></a><span class="ln">    71</span>		fix_1_847759065 = 15137
<a id="L72"></a><span class="ln">    72</span>		fix_1_961570560 = 16069
<a id="L73"></a><span class="ln">    73</span>		fix_2_053119869 = 16819
<a id="L74"></a><span class="ln">    74</span>		fix_2_562915447 = 20995
<a id="L75"></a><span class="ln">    75</span>		fix_3_072711026 = 25172
<a id="L76"></a><span class="ln">    76</span>	)
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>	const (
<a id="L79"></a><span class="ln">    79</span>		constBits     = 13
<a id="L80"></a><span class="ln">    80</span>		pass1Bits     = 2
<a id="L81"></a><span class="ln">    81</span>		centerJSample = 128
<a id="L82"></a><span class="ln">    82</span>	)
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">// fdct performs a forward DCT on an 8x8 block of coefficients, including a</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">// level shift.</span>
<a id="L86"></a><span class="ln">    86</span>	func fdct(b *block) {
<a id="L87"></a><span class="ln">    87</span>		<span class="comment">// Pass 1: process rows.</span>
<a id="L88"></a><span class="ln">    88</span>		for y := 0; y &lt; 8; y++ {
<a id="L89"></a><span class="ln">    89</span>			x0 := b[y*8+0]
<a id="L90"></a><span class="ln">    90</span>			x1 := b[y*8+1]
<a id="L91"></a><span class="ln">    91</span>			x2 := b[y*8+2]
<a id="L92"></a><span class="ln">    92</span>			x3 := b[y*8+3]
<a id="L93"></a><span class="ln">    93</span>			x4 := b[y*8+4]
<a id="L94"></a><span class="ln">    94</span>			x5 := b[y*8+5]
<a id="L95"></a><span class="ln">    95</span>			x6 := b[y*8+6]
<a id="L96"></a><span class="ln">    96</span>			x7 := b[y*8+7]
<a id="L97"></a><span class="ln">    97</span>	
<a id="L98"></a><span class="ln">    98</span>			tmp0 := x0 + x7
<a id="L99"></a><span class="ln">    99</span>			tmp1 := x1 + x6
<a id="L100"></a><span class="ln">   100</span>			tmp2 := x2 + x5
<a id="L101"></a><span class="ln">   101</span>			tmp3 := x3 + x4
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>			tmp10 := tmp0 + tmp3
<a id="L104"></a><span class="ln">   104</span>			tmp12 := tmp0 - tmp3
<a id="L105"></a><span class="ln">   105</span>			tmp11 := tmp1 + tmp2
<a id="L106"></a><span class="ln">   106</span>			tmp13 := tmp1 - tmp2
<a id="L107"></a><span class="ln">   107</span>	
<a id="L108"></a><span class="ln">   108</span>			tmp0 = x0 - x7
<a id="L109"></a><span class="ln">   109</span>			tmp1 = x1 - x6
<a id="L110"></a><span class="ln">   110</span>			tmp2 = x2 - x5
<a id="L111"></a><span class="ln">   111</span>			tmp3 = x3 - x4
<a id="L112"></a><span class="ln">   112</span>	
<a id="L113"></a><span class="ln">   113</span>			b[y*8+0] = (tmp10 + tmp11 - 8*centerJSample) &lt;&lt; pass1Bits
<a id="L114"></a><span class="ln">   114</span>			b[y*8+4] = (tmp10 - tmp11) &lt;&lt; pass1Bits
<a id="L115"></a><span class="ln">   115</span>			z1 := (tmp12 + tmp13) * fix_0_541196100
<a id="L116"></a><span class="ln">   116</span>			z1 += 1 &lt;&lt; (constBits - pass1Bits - 1)
<a id="L117"></a><span class="ln">   117</span>			b[y*8+2] = (z1 + tmp12*fix_0_765366865) &gt;&gt; (constBits - pass1Bits)
<a id="L118"></a><span class="ln">   118</span>			b[y*8+6] = (z1 - tmp13*fix_1_847759065) &gt;&gt; (constBits - pass1Bits)
<a id="L119"></a><span class="ln">   119</span>	
<a id="L120"></a><span class="ln">   120</span>			tmp10 = tmp0 + tmp3
<a id="L121"></a><span class="ln">   121</span>			tmp11 = tmp1 + tmp2
<a id="L122"></a><span class="ln">   122</span>			tmp12 = tmp0 + tmp2
<a id="L123"></a><span class="ln">   123</span>			tmp13 = tmp1 + tmp3
<a id="L124"></a><span class="ln">   124</span>			z1 = (tmp12 + tmp13) * fix_1_175875602
<a id="L125"></a><span class="ln">   125</span>			z1 += 1 &lt;&lt; (constBits - pass1Bits - 1)
<a id="L126"></a><span class="ln">   126</span>			tmp0 = tmp0 * fix_1_501321110
<a id="L127"></a><span class="ln">   127</span>			tmp1 = tmp1 * fix_3_072711026
<a id="L128"></a><span class="ln">   128</span>			tmp2 = tmp2 * fix_2_053119869
<a id="L129"></a><span class="ln">   129</span>			tmp3 = tmp3 * fix_0_298631336
<a id="L130"></a><span class="ln">   130</span>			tmp10 = tmp10 * -fix_0_899976223
<a id="L131"></a><span class="ln">   131</span>			tmp11 = tmp11 * -fix_2_562915447
<a id="L132"></a><span class="ln">   132</span>			tmp12 = tmp12 * -fix_0_390180644
<a id="L133"></a><span class="ln">   133</span>			tmp13 = tmp13 * -fix_1_961570560
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>			tmp12 += z1
<a id="L136"></a><span class="ln">   136</span>			tmp13 += z1
<a id="L137"></a><span class="ln">   137</span>			b[y*8+1] = (tmp0 + tmp10 + tmp12) &gt;&gt; (constBits - pass1Bits)
<a id="L138"></a><span class="ln">   138</span>			b[y*8+3] = (tmp1 + tmp11 + tmp13) &gt;&gt; (constBits - pass1Bits)
<a id="L139"></a><span class="ln">   139</span>			b[y*8+5] = (tmp2 + tmp11 + tmp12) &gt;&gt; (constBits - pass1Bits)
<a id="L140"></a><span class="ln">   140</span>			b[y*8+7] = (tmp3 + tmp10 + tmp13) &gt;&gt; (constBits - pass1Bits)
<a id="L141"></a><span class="ln">   141</span>		}
<a id="L142"></a><span class="ln">   142</span>		<span class="comment">// Pass 2: process columns.</span>
<a id="L143"></a><span class="ln">   143</span>		<span class="comment">// We remove pass1Bits scaling, but leave results scaled up by an overall factor of 8.</span>
<a id="L144"></a><span class="ln">   144</span>		for x := 0; x &lt; 8; x++ {
<a id="L145"></a><span class="ln">   145</span>			tmp0 := b[0*8+x] + b[7*8+x]
<a id="L146"></a><span class="ln">   146</span>			tmp1 := b[1*8+x] + b[6*8+x]
<a id="L147"></a><span class="ln">   147</span>			tmp2 := b[2*8+x] + b[5*8+x]
<a id="L148"></a><span class="ln">   148</span>			tmp3 := b[3*8+x] + b[4*8+x]
<a id="L149"></a><span class="ln">   149</span>	
<a id="L150"></a><span class="ln">   150</span>			tmp10 := tmp0 + tmp3 + 1&lt;&lt;(pass1Bits-1)
<a id="L151"></a><span class="ln">   151</span>			tmp12 := tmp0 - tmp3
<a id="L152"></a><span class="ln">   152</span>			tmp11 := tmp1 + tmp2
<a id="L153"></a><span class="ln">   153</span>			tmp13 := tmp1 - tmp2
<a id="L154"></a><span class="ln">   154</span>	
<a id="L155"></a><span class="ln">   155</span>			tmp0 = b[0*8+x] - b[7*8+x]
<a id="L156"></a><span class="ln">   156</span>			tmp1 = b[1*8+x] - b[6*8+x]
<a id="L157"></a><span class="ln">   157</span>			tmp2 = b[2*8+x] - b[5*8+x]
<a id="L158"></a><span class="ln">   158</span>			tmp3 = b[3*8+x] - b[4*8+x]
<a id="L159"></a><span class="ln">   159</span>	
<a id="L160"></a><span class="ln">   160</span>			b[0*8+x] = (tmp10 + tmp11) &gt;&gt; pass1Bits
<a id="L161"></a><span class="ln">   161</span>			b[4*8+x] = (tmp10 - tmp11) &gt;&gt; pass1Bits
<a id="L162"></a><span class="ln">   162</span>	
<a id="L163"></a><span class="ln">   163</span>			z1 := (tmp12 + tmp13) * fix_0_541196100
<a id="L164"></a><span class="ln">   164</span>			z1 += 1 &lt;&lt; (constBits + pass1Bits - 1)
<a id="L165"></a><span class="ln">   165</span>			b[2*8+x] = (z1 + tmp12*fix_0_765366865) &gt;&gt; (constBits + pass1Bits)
<a id="L166"></a><span class="ln">   166</span>			b[6*8+x] = (z1 - tmp13*fix_1_847759065) &gt;&gt; (constBits + pass1Bits)
<a id="L167"></a><span class="ln">   167</span>	
<a id="L168"></a><span class="ln">   168</span>			tmp10 = tmp0 + tmp3
<a id="L169"></a><span class="ln">   169</span>			tmp11 = tmp1 + tmp2
<a id="L170"></a><span class="ln">   170</span>			tmp12 = tmp0 + tmp2
<a id="L171"></a><span class="ln">   171</span>			tmp13 = tmp1 + tmp3
<a id="L172"></a><span class="ln">   172</span>			z1 = (tmp12 + tmp13) * fix_1_175875602
<a id="L173"></a><span class="ln">   173</span>			z1 += 1 &lt;&lt; (constBits + pass1Bits - 1)
<a id="L174"></a><span class="ln">   174</span>			tmp0 = tmp0 * fix_1_501321110
<a id="L175"></a><span class="ln">   175</span>			tmp1 = tmp1 * fix_3_072711026
<a id="L176"></a><span class="ln">   176</span>			tmp2 = tmp2 * fix_2_053119869
<a id="L177"></a><span class="ln">   177</span>			tmp3 = tmp3 * fix_0_298631336
<a id="L178"></a><span class="ln">   178</span>			tmp10 = tmp10 * -fix_0_899976223
<a id="L179"></a><span class="ln">   179</span>			tmp11 = tmp11 * -fix_2_562915447
<a id="L180"></a><span class="ln">   180</span>			tmp12 = tmp12 * -fix_0_390180644
<a id="L181"></a><span class="ln">   181</span>			tmp13 = tmp13 * -fix_1_961570560
<a id="L182"></a><span class="ln">   182</span>	
<a id="L183"></a><span class="ln">   183</span>			tmp12 += z1
<a id="L184"></a><span class="ln">   184</span>			tmp13 += z1
<a id="L185"></a><span class="ln">   185</span>			b[1*8+x] = (tmp0 + tmp10 + tmp12) &gt;&gt; (constBits + pass1Bits)
<a id="L186"></a><span class="ln">   186</span>			b[3*8+x] = (tmp1 + tmp11 + tmp13) &gt;&gt; (constBits + pass1Bits)
<a id="L187"></a><span class="ln">   187</span>			b[5*8+x] = (tmp2 + tmp11 + tmp12) &gt;&gt; (constBits + pass1Bits)
<a id="L188"></a><span class="ln">   188</span>			b[7*8+x] = (tmp3 + tmp10 + tmp13) &gt;&gt; (constBits + pass1Bits)
<a id="L189"></a><span class="ln">   189</span>		}
<a id="L190"></a><span class="ln">   190</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

