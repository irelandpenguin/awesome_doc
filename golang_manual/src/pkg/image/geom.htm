<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/image/geom.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/image/geom.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package image
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;strconv&#34;
<a id="L9"></a><span class="ln">     9</span>	)
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// A Point is an X, Y coordinate pair. The axes increase right and down.</span>
<a id="L12"></a><span class="ln">    12</span>	type Point struct {
<a id="L13"></a><span class="ln">    13</span>		X, Y int
<a id="L14"></a><span class="ln">    14</span>	}
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// String returns a string representation of p like &#34;(3,4)&#34;.</span>
<a id="L17"></a><span class="ln">    17</span>	func (p Point) String() string {
<a id="L18"></a><span class="ln">    18</span>		return &#34;(&#34; + strconv.Itoa(p.X) + &#34;,&#34; + strconv.Itoa(p.Y) + &#34;)&#34;
<a id="L19"></a><span class="ln">    19</span>	}
<a id="L20"></a><span class="ln">    20</span>	
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// Add returns the vector p+q.</span>
<a id="L22"></a><span class="ln">    22</span>	func (p Point) Add(q Point) Point {
<a id="L23"></a><span class="ln">    23</span>		return Point{p.X + q.X, p.Y + q.Y}
<a id="L24"></a><span class="ln">    24</span>	}
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// Sub returns the vector p-q.</span>
<a id="L27"></a><span class="ln">    27</span>	func (p Point) Sub(q Point) Point {
<a id="L28"></a><span class="ln">    28</span>		return Point{p.X - q.X, p.Y - q.Y}
<a id="L29"></a><span class="ln">    29</span>	}
<a id="L30"></a><span class="ln">    30</span>	
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// Mul returns the vector p*k.</span>
<a id="L32"></a><span class="ln">    32</span>	func (p Point) Mul(k int) Point {
<a id="L33"></a><span class="ln">    33</span>		return Point{p.X * k, p.Y * k}
<a id="L34"></a><span class="ln">    34</span>	}
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// Div returns the vector p/k.</span>
<a id="L37"></a><span class="ln">    37</span>	func (p Point) Div(k int) Point {
<a id="L38"></a><span class="ln">    38</span>		return Point{p.X / k, p.Y / k}
<a id="L39"></a><span class="ln">    39</span>	}
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// In returns whether p is in r.</span>
<a id="L42"></a><span class="ln">    42</span>	func (p Point) In(r Rectangle) bool {
<a id="L43"></a><span class="ln">    43</span>		return r.Min.X &lt;= p.X &amp;&amp; p.X &lt; r.Max.X &amp;&amp;
<a id="L44"></a><span class="ln">    44</span>			r.Min.Y &lt;= p.Y &amp;&amp; p.Y &lt; r.Max.Y
<a id="L45"></a><span class="ln">    45</span>	}
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">// Mod returns the point q in r such that p.X-q.X is a multiple of r&#39;s width</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">// and p.Y-q.Y is a multiple of r&#39;s height.</span>
<a id="L49"></a><span class="ln">    49</span>	func (p Point) Mod(r Rectangle) Point {
<a id="L50"></a><span class="ln">    50</span>		w, h := r.Dx(), r.Dy()
<a id="L51"></a><span class="ln">    51</span>		p = p.Sub(r.Min)
<a id="L52"></a><span class="ln">    52</span>		p.X = p.X % w
<a id="L53"></a><span class="ln">    53</span>		if p.X &lt; 0 {
<a id="L54"></a><span class="ln">    54</span>			p.X += w
<a id="L55"></a><span class="ln">    55</span>		}
<a id="L56"></a><span class="ln">    56</span>		p.Y = p.Y % h
<a id="L57"></a><span class="ln">    57</span>		if p.Y &lt; 0 {
<a id="L58"></a><span class="ln">    58</span>			p.Y += h
<a id="L59"></a><span class="ln">    59</span>		}
<a id="L60"></a><span class="ln">    60</span>		return p.Add(r.Min)
<a id="L61"></a><span class="ln">    61</span>	}
<a id="L62"></a><span class="ln">    62</span>	
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">// Eq returns whether p and q are equal.</span>
<a id="L64"></a><span class="ln">    64</span>	func (p Point) Eq(q Point) bool {
<a id="L65"></a><span class="ln">    65</span>		return p.X == q.X &amp;&amp; p.Y == q.Y
<a id="L66"></a><span class="ln">    66</span>	}
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// ZP is the zero Point.</span>
<a id="L69"></a><span class="ln">    69</span>	var ZP Point
<a id="L70"></a><span class="ln">    70</span>	
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">// Pt is shorthand for Point{X, Y}.</span>
<a id="L72"></a><span class="ln">    72</span>	func Pt(X, Y int) Point {
<a id="L73"></a><span class="ln">    73</span>		return Point{X, Y}
<a id="L74"></a><span class="ln">    74</span>	}
<a id="L75"></a><span class="ln">    75</span>	
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">// A Rectangle contains the points with Min.X &lt;= X &lt; Max.X, Min.Y &lt;= Y &lt; Max.Y.</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// It is well-formed if Min.X &lt;= Max.X and likewise for Y. Points are always</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// well-formed. A rectangle&#39;s methods always return well-formed outputs for</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// well-formed inputs.</span>
<a id="L80"></a><span class="ln">    80</span>	type Rectangle struct {
<a id="L81"></a><span class="ln">    81</span>		Min, Max Point
<a id="L82"></a><span class="ln">    82</span>	}
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">// String returns a string representation of r like &#34;(3,4)-(6,5)&#34;.</span>
<a id="L85"></a><span class="ln">    85</span>	func (r Rectangle) String() string {
<a id="L86"></a><span class="ln">    86</span>		return r.Min.String() + &#34;-&#34; + r.Max.String()
<a id="L87"></a><span class="ln">    87</span>	}
<a id="L88"></a><span class="ln">    88</span>	
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">// Dx returns r&#39;s width.</span>
<a id="L90"></a><span class="ln">    90</span>	func (r Rectangle) Dx() int {
<a id="L91"></a><span class="ln">    91</span>		return r.Max.X - r.Min.X
<a id="L92"></a><span class="ln">    92</span>	}
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// Dy returns r&#39;s height.</span>
<a id="L95"></a><span class="ln">    95</span>	func (r Rectangle) Dy() int {
<a id="L96"></a><span class="ln">    96</span>		return r.Max.Y - r.Min.Y
<a id="L97"></a><span class="ln">    97</span>	}
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">// Size returns r&#39;s width and height.</span>
<a id="L100"></a><span class="ln">   100</span>	func (r Rectangle) Size() Point {
<a id="L101"></a><span class="ln">   101</span>		return Point{
<a id="L102"></a><span class="ln">   102</span>			r.Max.X - r.Min.X,
<a id="L103"></a><span class="ln">   103</span>			r.Max.Y - r.Min.Y,
<a id="L104"></a><span class="ln">   104</span>		}
<a id="L105"></a><span class="ln">   105</span>	}
<a id="L106"></a><span class="ln">   106</span>	
<a id="L107"></a><span class="ln">   107</span>	<span class="comment">// Add returns the rectangle r translated by p.</span>
<a id="L108"></a><span class="ln">   108</span>	func (r Rectangle) Add(p Point) Rectangle {
<a id="L109"></a><span class="ln">   109</span>		return Rectangle{
<a id="L110"></a><span class="ln">   110</span>			Point{r.Min.X + p.X, r.Min.Y + p.Y},
<a id="L111"></a><span class="ln">   111</span>			Point{r.Max.X + p.X, r.Max.Y + p.Y},
<a id="L112"></a><span class="ln">   112</span>		}
<a id="L113"></a><span class="ln">   113</span>	}
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>	<span class="comment">// Sub returns the rectangle r translated by -p.</span>
<a id="L116"></a><span class="ln">   116</span>	func (r Rectangle) Sub(p Point) Rectangle {
<a id="L117"></a><span class="ln">   117</span>		return Rectangle{
<a id="L118"></a><span class="ln">   118</span>			Point{r.Min.X - p.X, r.Min.Y - p.Y},
<a id="L119"></a><span class="ln">   119</span>			Point{r.Max.X - p.X, r.Max.Y - p.Y},
<a id="L120"></a><span class="ln">   120</span>		}
<a id="L121"></a><span class="ln">   121</span>	}
<a id="L122"></a><span class="ln">   122</span>	
<a id="L123"></a><span class="ln">   123</span>	<span class="comment">// Inset returns the rectangle r inset by n, which may be negative. If either</span>
<a id="L124"></a><span class="ln">   124</span>	<span class="comment">// of r&#39;s dimensions is less than 2*n then an empty rectangle near the center</span>
<a id="L125"></a><span class="ln">   125</span>	<span class="comment">// of r will be returned.</span>
<a id="L126"></a><span class="ln">   126</span>	func (r Rectangle) Inset(n int) Rectangle {
<a id="L127"></a><span class="ln">   127</span>		if r.Dx() &lt; 2*n {
<a id="L128"></a><span class="ln">   128</span>			r.Min.X = (r.Min.X + r.Max.X) / 2
<a id="L129"></a><span class="ln">   129</span>			r.Max.X = r.Min.X
<a id="L130"></a><span class="ln">   130</span>		} else {
<a id="L131"></a><span class="ln">   131</span>			r.Min.X += n
<a id="L132"></a><span class="ln">   132</span>			r.Max.X -= n
<a id="L133"></a><span class="ln">   133</span>		}
<a id="L134"></a><span class="ln">   134</span>		if r.Dy() &lt; 2*n {
<a id="L135"></a><span class="ln">   135</span>			r.Min.Y = (r.Min.Y + r.Max.Y) / 2
<a id="L136"></a><span class="ln">   136</span>			r.Max.Y = r.Min.Y
<a id="L137"></a><span class="ln">   137</span>		} else {
<a id="L138"></a><span class="ln">   138</span>			r.Min.Y += n
<a id="L139"></a><span class="ln">   139</span>			r.Max.Y -= n
<a id="L140"></a><span class="ln">   140</span>		}
<a id="L141"></a><span class="ln">   141</span>		return r
<a id="L142"></a><span class="ln">   142</span>	}
<a id="L143"></a><span class="ln">   143</span>	
<a id="L144"></a><span class="ln">   144</span>	<span class="comment">// Intersect returns the largest rectangle contained by both r and s. If the</span>
<a id="L145"></a><span class="ln">   145</span>	<span class="comment">// two rectangles do not overlap then the zero rectangle will be returned.</span>
<a id="L146"></a><span class="ln">   146</span>	func (r Rectangle) Intersect(s Rectangle) Rectangle {
<a id="L147"></a><span class="ln">   147</span>		if r.Min.X &lt; s.Min.X {
<a id="L148"></a><span class="ln">   148</span>			r.Min.X = s.Min.X
<a id="L149"></a><span class="ln">   149</span>		}
<a id="L150"></a><span class="ln">   150</span>		if r.Min.Y &lt; s.Min.Y {
<a id="L151"></a><span class="ln">   151</span>			r.Min.Y = s.Min.Y
<a id="L152"></a><span class="ln">   152</span>		}
<a id="L153"></a><span class="ln">   153</span>		if r.Max.X &gt; s.Max.X {
<a id="L154"></a><span class="ln">   154</span>			r.Max.X = s.Max.X
<a id="L155"></a><span class="ln">   155</span>		}
<a id="L156"></a><span class="ln">   156</span>		if r.Max.Y &gt; s.Max.Y {
<a id="L157"></a><span class="ln">   157</span>			r.Max.Y = s.Max.Y
<a id="L158"></a><span class="ln">   158</span>		}
<a id="L159"></a><span class="ln">   159</span>		if r.Min.X &gt; r.Max.X || r.Min.Y &gt; r.Max.Y {
<a id="L160"></a><span class="ln">   160</span>			return ZR
<a id="L161"></a><span class="ln">   161</span>		}
<a id="L162"></a><span class="ln">   162</span>		return r
<a id="L163"></a><span class="ln">   163</span>	}
<a id="L164"></a><span class="ln">   164</span>	
<a id="L165"></a><span class="ln">   165</span>	<span class="comment">// Union returns the smallest rectangle that contains both r and s.</span>
<a id="L166"></a><span class="ln">   166</span>	func (r Rectangle) Union(s Rectangle) Rectangle {
<a id="L167"></a><span class="ln">   167</span>		if r.Min.X &gt; s.Min.X {
<a id="L168"></a><span class="ln">   168</span>			r.Min.X = s.Min.X
<a id="L169"></a><span class="ln">   169</span>		}
<a id="L170"></a><span class="ln">   170</span>		if r.Min.Y &gt; s.Min.Y {
<a id="L171"></a><span class="ln">   171</span>			r.Min.Y = s.Min.Y
<a id="L172"></a><span class="ln">   172</span>		}
<a id="L173"></a><span class="ln">   173</span>		if r.Max.X &lt; s.Max.X {
<a id="L174"></a><span class="ln">   174</span>			r.Max.X = s.Max.X
<a id="L175"></a><span class="ln">   175</span>		}
<a id="L176"></a><span class="ln">   176</span>		if r.Max.Y &lt; s.Max.Y {
<a id="L177"></a><span class="ln">   177</span>			r.Max.Y = s.Max.Y
<a id="L178"></a><span class="ln">   178</span>		}
<a id="L179"></a><span class="ln">   179</span>		return r
<a id="L180"></a><span class="ln">   180</span>	}
<a id="L181"></a><span class="ln">   181</span>	
<a id="L182"></a><span class="ln">   182</span>	<span class="comment">// Empty returns whether the rectangle contains no points.</span>
<a id="L183"></a><span class="ln">   183</span>	func (r Rectangle) Empty() bool {
<a id="L184"></a><span class="ln">   184</span>		return r.Min.X &gt;= r.Max.X || r.Min.Y &gt;= r.Max.Y
<a id="L185"></a><span class="ln">   185</span>	}
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>	<span class="comment">// Eq returns whether r and s are equal.</span>
<a id="L188"></a><span class="ln">   188</span>	func (r Rectangle) Eq(s Rectangle) bool {
<a id="L189"></a><span class="ln">   189</span>		return r.Min.X == s.Min.X &amp;&amp; r.Min.Y == s.Min.Y &amp;&amp;
<a id="L190"></a><span class="ln">   190</span>			r.Max.X == s.Max.X &amp;&amp; r.Max.Y == s.Max.Y
<a id="L191"></a><span class="ln">   191</span>	}
<a id="L192"></a><span class="ln">   192</span>	
<a id="L193"></a><span class="ln">   193</span>	<span class="comment">// Overlaps returns whether r and s have a non-empty intersection.</span>
<a id="L194"></a><span class="ln">   194</span>	func (r Rectangle) Overlaps(s Rectangle) bool {
<a id="L195"></a><span class="ln">   195</span>		return r.Min.X &lt; s.Max.X &amp;&amp; s.Min.X &lt; r.Max.X &amp;&amp;
<a id="L196"></a><span class="ln">   196</span>			r.Min.Y &lt; s.Max.Y &amp;&amp; s.Min.Y &lt; r.Max.Y
<a id="L197"></a><span class="ln">   197</span>	}
<a id="L198"></a><span class="ln">   198</span>	
<a id="L199"></a><span class="ln">   199</span>	<span class="comment">// In returns whether every point in r is in s.</span>
<a id="L200"></a><span class="ln">   200</span>	func (r Rectangle) In(s Rectangle) bool {
<a id="L201"></a><span class="ln">   201</span>		if r.Empty() {
<a id="L202"></a><span class="ln">   202</span>			return true
<a id="L203"></a><span class="ln">   203</span>		}
<a id="L204"></a><span class="ln">   204</span>		<span class="comment">// Note that r.Max is an exclusive bound for r, so that r.In(s)</span>
<a id="L205"></a><span class="ln">   205</span>		<span class="comment">// does not require that r.Max.In(s).</span>
<a id="L206"></a><span class="ln">   206</span>		return s.Min.X &lt;= r.Min.X &amp;&amp; r.Max.X &lt;= s.Max.X &amp;&amp;
<a id="L207"></a><span class="ln">   207</span>			s.Min.Y &lt;= r.Min.Y &amp;&amp; r.Max.Y &lt;= s.Max.Y
<a id="L208"></a><span class="ln">   208</span>	}
<a id="L209"></a><span class="ln">   209</span>	
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// Canon returns the canonical version of r. The returned rectangle has minimum</span>
<a id="L211"></a><span class="ln">   211</span>	<span class="comment">// and maximum coordinates swapped if necessary so that it is well-formed.</span>
<a id="L212"></a><span class="ln">   212</span>	func (r Rectangle) Canon() Rectangle {
<a id="L213"></a><span class="ln">   213</span>		if r.Max.X &lt; r.Min.X {
<a id="L214"></a><span class="ln">   214</span>			r.Min.X, r.Max.X = r.Max.X, r.Min.X
<a id="L215"></a><span class="ln">   215</span>		}
<a id="L216"></a><span class="ln">   216</span>		if r.Max.Y &lt; r.Min.Y {
<a id="L217"></a><span class="ln">   217</span>			r.Min.Y, r.Max.Y = r.Max.Y, r.Min.Y
<a id="L218"></a><span class="ln">   218</span>		}
<a id="L219"></a><span class="ln">   219</span>		return r
<a id="L220"></a><span class="ln">   220</span>	}
<a id="L221"></a><span class="ln">   221</span>	
<a id="L222"></a><span class="ln">   222</span>	<span class="comment">// ZR is the zero Rectangle.</span>
<a id="L223"></a><span class="ln">   223</span>	var ZR Rectangle
<a id="L224"></a><span class="ln">   224</span>	
<a id="L225"></a><span class="ln">   225</span>	<span class="comment">// Rect is shorthand for Rectangle{Pt(x0, y0), Pt(x1, y1)}.</span>
<a id="L226"></a><span class="ln">   226</span>	func Rect(x0, y0, x1, y1 int) Rectangle {
<a id="L227"></a><span class="ln">   227</span>		if x0 &gt; x1 {
<a id="L228"></a><span class="ln">   228</span>			x0, x1 = x1, x0
<a id="L229"></a><span class="ln">   229</span>		}
<a id="L230"></a><span class="ln">   230</span>		if y0 &gt; y1 {
<a id="L231"></a><span class="ln">   231</span>			y0, y1 = y1, y0
<a id="L232"></a><span class="ln">   232</span>		}
<a id="L233"></a><span class="ln">   233</span>		return Rectangle{Point{x0, y0}, Point{x1, y1}}
<a id="L234"></a><span class="ln">   234</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

