<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/image/color/color.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/image/color/color.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package color implements a basic color library.</span>
<a id="L6"></a><span class="ln">     6</span>	package color
<a id="L7"></a><span class="ln">     7</span>	
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// Color can convert itself to alpha-premultiplied 16-bits per channel RGBA.</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// The conversion may be lossy.</span>
<a id="L10"></a><span class="ln">    10</span>	type Color interface {
<a id="L11"></a><span class="ln">    11</span>		<span class="comment">// RGBA returns the alpha-premultiplied red, green, blue and alpha values</span>
<a id="L12"></a><span class="ln">    12</span>		<span class="comment">// for the color. Each value ranges within [0, 0xFFFF], but is represented</span>
<a id="L13"></a><span class="ln">    13</span>		<span class="comment">// by a uint32 so that multiplying by a blend factor up to 0xFFFF will not</span>
<a id="L14"></a><span class="ln">    14</span>		<span class="comment">// overflow.</span>
<a id="L15"></a><span class="ln">    15</span>		RGBA() (r, g, b, a uint32)
<a id="L16"></a><span class="ln">    16</span>	}
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// RGBA represents a traditional 32-bit alpha-premultiplied color,</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// having 8 bits for each of red, green, blue and alpha.</span>
<a id="L20"></a><span class="ln">    20</span>	type RGBA struct {
<a id="L21"></a><span class="ln">    21</span>		R, G, B, A uint8
<a id="L22"></a><span class="ln">    22</span>	}
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>	func (c RGBA) RGBA() (r, g, b, a uint32) {
<a id="L25"></a><span class="ln">    25</span>		r = uint32(c.R)
<a id="L26"></a><span class="ln">    26</span>		r |= r &lt;&lt; 8
<a id="L27"></a><span class="ln">    27</span>		g = uint32(c.G)
<a id="L28"></a><span class="ln">    28</span>		g |= g &lt;&lt; 8
<a id="L29"></a><span class="ln">    29</span>		b = uint32(c.B)
<a id="L30"></a><span class="ln">    30</span>		b |= b &lt;&lt; 8
<a id="L31"></a><span class="ln">    31</span>		a = uint32(c.A)
<a id="L32"></a><span class="ln">    32</span>		a |= a &lt;&lt; 8
<a id="L33"></a><span class="ln">    33</span>		return
<a id="L34"></a><span class="ln">    34</span>	}
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// RGBA64 represents a 64-bit alpha-premultiplied color,</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// having 16 bits for each of red, green, blue and alpha.</span>
<a id="L38"></a><span class="ln">    38</span>	type RGBA64 struct {
<a id="L39"></a><span class="ln">    39</span>		R, G, B, A uint16
<a id="L40"></a><span class="ln">    40</span>	}
<a id="L41"></a><span class="ln">    41</span>	
<a id="L42"></a><span class="ln">    42</span>	func (c RGBA64) RGBA() (r, g, b, a uint32) {
<a id="L43"></a><span class="ln">    43</span>		return uint32(c.R), uint32(c.G), uint32(c.B), uint32(c.A)
<a id="L44"></a><span class="ln">    44</span>	}
<a id="L45"></a><span class="ln">    45</span>	
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">// NRGBA represents a non-alpha-premultiplied 32-bit color.</span>
<a id="L47"></a><span class="ln">    47</span>	type NRGBA struct {
<a id="L48"></a><span class="ln">    48</span>		R, G, B, A uint8
<a id="L49"></a><span class="ln">    49</span>	}
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>	func (c NRGBA) RGBA() (r, g, b, a uint32) {
<a id="L52"></a><span class="ln">    52</span>		r = uint32(c.R)
<a id="L53"></a><span class="ln">    53</span>		r |= r &lt;&lt; 8
<a id="L54"></a><span class="ln">    54</span>		r *= uint32(c.A)
<a id="L55"></a><span class="ln">    55</span>		r /= 0xff
<a id="L56"></a><span class="ln">    56</span>		g = uint32(c.G)
<a id="L57"></a><span class="ln">    57</span>		g |= g &lt;&lt; 8
<a id="L58"></a><span class="ln">    58</span>		g *= uint32(c.A)
<a id="L59"></a><span class="ln">    59</span>		g /= 0xff
<a id="L60"></a><span class="ln">    60</span>		b = uint32(c.B)
<a id="L61"></a><span class="ln">    61</span>		b |= b &lt;&lt; 8
<a id="L62"></a><span class="ln">    62</span>		b *= uint32(c.A)
<a id="L63"></a><span class="ln">    63</span>		b /= 0xff
<a id="L64"></a><span class="ln">    64</span>		a = uint32(c.A)
<a id="L65"></a><span class="ln">    65</span>		a |= a &lt;&lt; 8
<a id="L66"></a><span class="ln">    66</span>		return
<a id="L67"></a><span class="ln">    67</span>	}
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// NRGBA64 represents a non-alpha-premultiplied 64-bit color,</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// having 16 bits for each of red, green, blue and alpha.</span>
<a id="L71"></a><span class="ln">    71</span>	type NRGBA64 struct {
<a id="L72"></a><span class="ln">    72</span>		R, G, B, A uint16
<a id="L73"></a><span class="ln">    73</span>	}
<a id="L74"></a><span class="ln">    74</span>	
<a id="L75"></a><span class="ln">    75</span>	func (c NRGBA64) RGBA() (r, g, b, a uint32) {
<a id="L76"></a><span class="ln">    76</span>		r = uint32(c.R)
<a id="L77"></a><span class="ln">    77</span>		r *= uint32(c.A)
<a id="L78"></a><span class="ln">    78</span>		r /= 0xffff
<a id="L79"></a><span class="ln">    79</span>		g = uint32(c.G)
<a id="L80"></a><span class="ln">    80</span>		g *= uint32(c.A)
<a id="L81"></a><span class="ln">    81</span>		g /= 0xffff
<a id="L82"></a><span class="ln">    82</span>		b = uint32(c.B)
<a id="L83"></a><span class="ln">    83</span>		b *= uint32(c.A)
<a id="L84"></a><span class="ln">    84</span>		b /= 0xffff
<a id="L85"></a><span class="ln">    85</span>		a = uint32(c.A)
<a id="L86"></a><span class="ln">    86</span>		return
<a id="L87"></a><span class="ln">    87</span>	}
<a id="L88"></a><span class="ln">    88</span>	
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">// Alpha represents an 8-bit alpha color.</span>
<a id="L90"></a><span class="ln">    90</span>	type Alpha struct {
<a id="L91"></a><span class="ln">    91</span>		A uint8
<a id="L92"></a><span class="ln">    92</span>	}
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>	func (c Alpha) RGBA() (r, g, b, a uint32) {
<a id="L95"></a><span class="ln">    95</span>		a = uint32(c.A)
<a id="L96"></a><span class="ln">    96</span>		a |= a &lt;&lt; 8
<a id="L97"></a><span class="ln">    97</span>		return a, a, a, a
<a id="L98"></a><span class="ln">    98</span>	}
<a id="L99"></a><span class="ln">    99</span>	
<a id="L100"></a><span class="ln">   100</span>	<span class="comment">// Alpha16 represents a 16-bit alpha color.</span>
<a id="L101"></a><span class="ln">   101</span>	type Alpha16 struct {
<a id="L102"></a><span class="ln">   102</span>		A uint16
<a id="L103"></a><span class="ln">   103</span>	}
<a id="L104"></a><span class="ln">   104</span>	
<a id="L105"></a><span class="ln">   105</span>	func (c Alpha16) RGBA() (r, g, b, a uint32) {
<a id="L106"></a><span class="ln">   106</span>		a = uint32(c.A)
<a id="L107"></a><span class="ln">   107</span>		return a, a, a, a
<a id="L108"></a><span class="ln">   108</span>	}
<a id="L109"></a><span class="ln">   109</span>	
<a id="L110"></a><span class="ln">   110</span>	<span class="comment">// Gray represents an 8-bit grayscale color.</span>
<a id="L111"></a><span class="ln">   111</span>	type Gray struct {
<a id="L112"></a><span class="ln">   112</span>		Y uint8
<a id="L113"></a><span class="ln">   113</span>	}
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>	func (c Gray) RGBA() (r, g, b, a uint32) {
<a id="L116"></a><span class="ln">   116</span>		y := uint32(c.Y)
<a id="L117"></a><span class="ln">   117</span>		y |= y &lt;&lt; 8
<a id="L118"></a><span class="ln">   118</span>		return y, y, y, 0xffff
<a id="L119"></a><span class="ln">   119</span>	}
<a id="L120"></a><span class="ln">   120</span>	
<a id="L121"></a><span class="ln">   121</span>	<span class="comment">// Gray16 represents a 16-bit grayscale color.</span>
<a id="L122"></a><span class="ln">   122</span>	type Gray16 struct {
<a id="L123"></a><span class="ln">   123</span>		Y uint16
<a id="L124"></a><span class="ln">   124</span>	}
<a id="L125"></a><span class="ln">   125</span>	
<a id="L126"></a><span class="ln">   126</span>	func (c Gray16) RGBA() (r, g, b, a uint32) {
<a id="L127"></a><span class="ln">   127</span>		y := uint32(c.Y)
<a id="L128"></a><span class="ln">   128</span>		return y, y, y, 0xffff
<a id="L129"></a><span class="ln">   129</span>	}
<a id="L130"></a><span class="ln">   130</span>	
<a id="L131"></a><span class="ln">   131</span>	<span class="comment">// Model can convert any Color to one from its own color model. The conversion</span>
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">// may be lossy.</span>
<a id="L133"></a><span class="ln">   133</span>	type Model interface {
<a id="L134"></a><span class="ln">   134</span>		Convert(c Color) Color
<a id="L135"></a><span class="ln">   135</span>	}
<a id="L136"></a><span class="ln">   136</span>	
<a id="L137"></a><span class="ln">   137</span>	<span class="comment">// ModelFunc returns a Model that invokes f to implement the conversion.</span>
<a id="L138"></a><span class="ln">   138</span>	func ModelFunc(f func(Color) Color) Model {
<a id="L139"></a><span class="ln">   139</span>		<span class="comment">// Note: using *modelFunc as the implementation</span>
<a id="L140"></a><span class="ln">   140</span>		<span class="comment">// means that callers can still use comparisons</span>
<a id="L141"></a><span class="ln">   141</span>		<span class="comment">// like m == RGBAModel.  This is not possible if</span>
<a id="L142"></a><span class="ln">   142</span>		<span class="comment">// we use the func value directly, because funcs</span>
<a id="L143"></a><span class="ln">   143</span>		<span class="comment">// are no longer comparable.</span>
<a id="L144"></a><span class="ln">   144</span>		return &amp;modelFunc{f}
<a id="L145"></a><span class="ln">   145</span>	}
<a id="L146"></a><span class="ln">   146</span>	
<a id="L147"></a><span class="ln">   147</span>	type modelFunc struct {
<a id="L148"></a><span class="ln">   148</span>		f func(Color) Color
<a id="L149"></a><span class="ln">   149</span>	}
<a id="L150"></a><span class="ln">   150</span>	
<a id="L151"></a><span class="ln">   151</span>	func (m *modelFunc) Convert(c Color) Color {
<a id="L152"></a><span class="ln">   152</span>		return m.f(c)
<a id="L153"></a><span class="ln">   153</span>	}
<a id="L154"></a><span class="ln">   154</span>	
<a id="L155"></a><span class="ln">   155</span>	<span class="comment">// Models for the standard color types.</span>
<a id="L156"></a><span class="ln">   156</span>	var (
<a id="L157"></a><span class="ln">   157</span>		RGBAModel    Model = ModelFunc(rgbaModel)
<a id="L158"></a><span class="ln">   158</span>		RGBA64Model  Model = ModelFunc(rgba64Model)
<a id="L159"></a><span class="ln">   159</span>		NRGBAModel   Model = ModelFunc(nrgbaModel)
<a id="L160"></a><span class="ln">   160</span>		NRGBA64Model Model = ModelFunc(nrgba64Model)
<a id="L161"></a><span class="ln">   161</span>		AlphaModel   Model = ModelFunc(alphaModel)
<a id="L162"></a><span class="ln">   162</span>		Alpha16Model Model = ModelFunc(alpha16Model)
<a id="L163"></a><span class="ln">   163</span>		GrayModel    Model = ModelFunc(grayModel)
<a id="L164"></a><span class="ln">   164</span>		Gray16Model  Model = ModelFunc(gray16Model)
<a id="L165"></a><span class="ln">   165</span>	)
<a id="L166"></a><span class="ln">   166</span>	
<a id="L167"></a><span class="ln">   167</span>	func rgbaModel(c Color) Color {
<a id="L168"></a><span class="ln">   168</span>		if _, ok := c.(RGBA); ok {
<a id="L169"></a><span class="ln">   169</span>			return c
<a id="L170"></a><span class="ln">   170</span>		}
<a id="L171"></a><span class="ln">   171</span>		r, g, b, a := c.RGBA()
<a id="L172"></a><span class="ln">   172</span>		return RGBA{uint8(r &gt;&gt; 8), uint8(g &gt;&gt; 8), uint8(b &gt;&gt; 8), uint8(a &gt;&gt; 8)}
<a id="L173"></a><span class="ln">   173</span>	}
<a id="L174"></a><span class="ln">   174</span>	
<a id="L175"></a><span class="ln">   175</span>	func rgba64Model(c Color) Color {
<a id="L176"></a><span class="ln">   176</span>		if _, ok := c.(RGBA64); ok {
<a id="L177"></a><span class="ln">   177</span>			return c
<a id="L178"></a><span class="ln">   178</span>		}
<a id="L179"></a><span class="ln">   179</span>		r, g, b, a := c.RGBA()
<a id="L180"></a><span class="ln">   180</span>		return RGBA64{uint16(r), uint16(g), uint16(b), uint16(a)}
<a id="L181"></a><span class="ln">   181</span>	}
<a id="L182"></a><span class="ln">   182</span>	
<a id="L183"></a><span class="ln">   183</span>	func nrgbaModel(c Color) Color {
<a id="L184"></a><span class="ln">   184</span>		if _, ok := c.(NRGBA); ok {
<a id="L185"></a><span class="ln">   185</span>			return c
<a id="L186"></a><span class="ln">   186</span>		}
<a id="L187"></a><span class="ln">   187</span>		r, g, b, a := c.RGBA()
<a id="L188"></a><span class="ln">   188</span>		if a == 0xffff {
<a id="L189"></a><span class="ln">   189</span>			return NRGBA{uint8(r &gt;&gt; 8), uint8(g &gt;&gt; 8), uint8(b &gt;&gt; 8), 0xff}
<a id="L190"></a><span class="ln">   190</span>		}
<a id="L191"></a><span class="ln">   191</span>		if a == 0 {
<a id="L192"></a><span class="ln">   192</span>			return NRGBA{0, 0, 0, 0}
<a id="L193"></a><span class="ln">   193</span>		}
<a id="L194"></a><span class="ln">   194</span>		<span class="comment">// Since Color.RGBA returns a alpha-premultiplied color, we should have r &lt;= a &amp;&amp; g &lt;= a &amp;&amp; b &lt;= a.</span>
<a id="L195"></a><span class="ln">   195</span>		r = (r * 0xffff) / a
<a id="L196"></a><span class="ln">   196</span>		g = (g * 0xffff) / a
<a id="L197"></a><span class="ln">   197</span>		b = (b * 0xffff) / a
<a id="L198"></a><span class="ln">   198</span>		return NRGBA{uint8(r &gt;&gt; 8), uint8(g &gt;&gt; 8), uint8(b &gt;&gt; 8), uint8(a &gt;&gt; 8)}
<a id="L199"></a><span class="ln">   199</span>	}
<a id="L200"></a><span class="ln">   200</span>	
<a id="L201"></a><span class="ln">   201</span>	func nrgba64Model(c Color) Color {
<a id="L202"></a><span class="ln">   202</span>		if _, ok := c.(NRGBA64); ok {
<a id="L203"></a><span class="ln">   203</span>			return c
<a id="L204"></a><span class="ln">   204</span>		}
<a id="L205"></a><span class="ln">   205</span>		r, g, b, a := c.RGBA()
<a id="L206"></a><span class="ln">   206</span>		if a == 0xffff {
<a id="L207"></a><span class="ln">   207</span>			return NRGBA64{uint16(r), uint16(g), uint16(b), 0xffff}
<a id="L208"></a><span class="ln">   208</span>		}
<a id="L209"></a><span class="ln">   209</span>		if a == 0 {
<a id="L210"></a><span class="ln">   210</span>			return NRGBA64{0, 0, 0, 0}
<a id="L211"></a><span class="ln">   211</span>		}
<a id="L212"></a><span class="ln">   212</span>		<span class="comment">// Since Color.RGBA returns a alpha-premultiplied color, we should have r &lt;= a &amp;&amp; g &lt;= a &amp;&amp; b &lt;= a.</span>
<a id="L213"></a><span class="ln">   213</span>		r = (r * 0xffff) / a
<a id="L214"></a><span class="ln">   214</span>		g = (g * 0xffff) / a
<a id="L215"></a><span class="ln">   215</span>		b = (b * 0xffff) / a
<a id="L216"></a><span class="ln">   216</span>		return NRGBA64{uint16(r), uint16(g), uint16(b), uint16(a)}
<a id="L217"></a><span class="ln">   217</span>	}
<a id="L218"></a><span class="ln">   218</span>	
<a id="L219"></a><span class="ln">   219</span>	func alphaModel(c Color) Color {
<a id="L220"></a><span class="ln">   220</span>		if _, ok := c.(Alpha); ok {
<a id="L221"></a><span class="ln">   221</span>			return c
<a id="L222"></a><span class="ln">   222</span>		}
<a id="L223"></a><span class="ln">   223</span>		_, _, _, a := c.RGBA()
<a id="L224"></a><span class="ln">   224</span>		return Alpha{uint8(a &gt;&gt; 8)}
<a id="L225"></a><span class="ln">   225</span>	}
<a id="L226"></a><span class="ln">   226</span>	
<a id="L227"></a><span class="ln">   227</span>	func alpha16Model(c Color) Color {
<a id="L228"></a><span class="ln">   228</span>		if _, ok := c.(Alpha16); ok {
<a id="L229"></a><span class="ln">   229</span>			return c
<a id="L230"></a><span class="ln">   230</span>		}
<a id="L231"></a><span class="ln">   231</span>		_, _, _, a := c.RGBA()
<a id="L232"></a><span class="ln">   232</span>		return Alpha16{uint16(a)}
<a id="L233"></a><span class="ln">   233</span>	}
<a id="L234"></a><span class="ln">   234</span>	
<a id="L235"></a><span class="ln">   235</span>	func grayModel(c Color) Color {
<a id="L236"></a><span class="ln">   236</span>		if _, ok := c.(Gray); ok {
<a id="L237"></a><span class="ln">   237</span>			return c
<a id="L238"></a><span class="ln">   238</span>		}
<a id="L239"></a><span class="ln">   239</span>		r, g, b, _ := c.RGBA()
<a id="L240"></a><span class="ln">   240</span>		y := (299*r + 587*g + 114*b + 500) / 1000
<a id="L241"></a><span class="ln">   241</span>		return Gray{uint8(y &gt;&gt; 8)}
<a id="L242"></a><span class="ln">   242</span>	}
<a id="L243"></a><span class="ln">   243</span>	
<a id="L244"></a><span class="ln">   244</span>	func gray16Model(c Color) Color {
<a id="L245"></a><span class="ln">   245</span>		if _, ok := c.(Gray16); ok {
<a id="L246"></a><span class="ln">   246</span>			return c
<a id="L247"></a><span class="ln">   247</span>		}
<a id="L248"></a><span class="ln">   248</span>		r, g, b, _ := c.RGBA()
<a id="L249"></a><span class="ln">   249</span>		y := (299*r + 587*g + 114*b + 500) / 1000
<a id="L250"></a><span class="ln">   250</span>		return Gray16{uint16(y)}
<a id="L251"></a><span class="ln">   251</span>	}
<a id="L252"></a><span class="ln">   252</span>	
<a id="L253"></a><span class="ln">   253</span>	<span class="comment">// Palette is a palette of colors.</span>
<a id="L254"></a><span class="ln">   254</span>	type Palette []Color
<a id="L255"></a><span class="ln">   255</span>	
<a id="L256"></a><span class="ln">   256</span>	func diff(a, b uint32) uint32 {
<a id="L257"></a><span class="ln">   257</span>		if a &gt; b {
<a id="L258"></a><span class="ln">   258</span>			return a - b
<a id="L259"></a><span class="ln">   259</span>		}
<a id="L260"></a><span class="ln">   260</span>		return b - a
<a id="L261"></a><span class="ln">   261</span>	}
<a id="L262"></a><span class="ln">   262</span>	
<a id="L263"></a><span class="ln">   263</span>	<span class="comment">// Convert returns the palette color closest to c in Euclidean R,G,B space.</span>
<a id="L264"></a><span class="ln">   264</span>	func (p Palette) Convert(c Color) Color {
<a id="L265"></a><span class="ln">   265</span>		if len(p) == 0 {
<a id="L266"></a><span class="ln">   266</span>			return nil
<a id="L267"></a><span class="ln">   267</span>		}
<a id="L268"></a><span class="ln">   268</span>		return p[p.Index(c)]
<a id="L269"></a><span class="ln">   269</span>	}
<a id="L270"></a><span class="ln">   270</span>	
<a id="L271"></a><span class="ln">   271</span>	<span class="comment">// Index returns the index of the palette color closest to c in Euclidean</span>
<a id="L272"></a><span class="ln">   272</span>	<span class="comment">// R,G,B space.</span>
<a id="L273"></a><span class="ln">   273</span>	func (p Palette) Index(c Color) int {
<a id="L274"></a><span class="ln">   274</span>		cr, cg, cb, _ := c.RGBA()
<a id="L275"></a><span class="ln">   275</span>		<span class="comment">// Shift by 1 bit to avoid potential uint32 overflow in sum-squared-difference.</span>
<a id="L276"></a><span class="ln">   276</span>		cr &gt;&gt;= 1
<a id="L277"></a><span class="ln">   277</span>		cg &gt;&gt;= 1
<a id="L278"></a><span class="ln">   278</span>		cb &gt;&gt;= 1
<a id="L279"></a><span class="ln">   279</span>		ret, bestSSD := 0, uint32(1&lt;&lt;32-1)
<a id="L280"></a><span class="ln">   280</span>		for i, v := range p {
<a id="L281"></a><span class="ln">   281</span>			vr, vg, vb, _ := v.RGBA()
<a id="L282"></a><span class="ln">   282</span>			vr &gt;&gt;= 1
<a id="L283"></a><span class="ln">   283</span>			vg &gt;&gt;= 1
<a id="L284"></a><span class="ln">   284</span>			vb &gt;&gt;= 1
<a id="L285"></a><span class="ln">   285</span>			dr, dg, db := diff(cr, vr), diff(cg, vg), diff(cb, vb)
<a id="L286"></a><span class="ln">   286</span>			ssd := (dr * dr) + (dg * dg) + (db * db)
<a id="L287"></a><span class="ln">   287</span>			if ssd &lt; bestSSD {
<a id="L288"></a><span class="ln">   288</span>				if ssd == 0 {
<a id="L289"></a><span class="ln">   289</span>					return i
<a id="L290"></a><span class="ln">   290</span>				}
<a id="L291"></a><span class="ln">   291</span>				ret, bestSSD = i, ssd
<a id="L292"></a><span class="ln">   292</span>			}
<a id="L293"></a><span class="ln">   293</span>		}
<a id="L294"></a><span class="ln">   294</span>		return ret
<a id="L295"></a><span class="ln">   295</span>	}
<a id="L296"></a><span class="ln">   296</span>	
<a id="L297"></a><span class="ln">   297</span>	<span class="comment">// Standard colors.</span>
<a id="L298"></a><span class="ln">   298</span>	var (
<a id="L299"></a><span class="ln">   299</span>		Black       = Gray16{0}
<a id="L300"></a><span class="ln">   300</span>		White       = Gray16{0xffff}
<a id="L301"></a><span class="ln">   301</span>		Transparent = Alpha16{0}
<a id="L302"></a><span class="ln">   302</span>		Opaque      = Alpha16{0xffff}
<a id="L303"></a><span class="ln">   303</span>	)
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

