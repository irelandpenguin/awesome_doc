<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/image/png/reader.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/image/png/reader.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package png implements a PNG image decoder and encoder.</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">//</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// The PNG specification is at http://www.w3.org/TR/PNG/.</span>
<a id="L8"></a><span class="ln">     8</span>	package png
<a id="L9"></a><span class="ln">     9</span>	
<a id="L10"></a><span class="ln">    10</span>	import (
<a id="L11"></a><span class="ln">    11</span>		&#34;compress/zlib&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;encoding/binary&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;fmt&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;hash&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;hash/crc32&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;image&#34;
<a id="L17"></a><span class="ln">    17</span>		&#34;image/color&#34;
<a id="L18"></a><span class="ln">    18</span>		&#34;io&#34;
<a id="L19"></a><span class="ln">    19</span>	)
<a id="L20"></a><span class="ln">    20</span>	
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// Color type, as per the PNG spec.</span>
<a id="L22"></a><span class="ln">    22</span>	const (
<a id="L23"></a><span class="ln">    23</span>		ctGrayscale      = 0
<a id="L24"></a><span class="ln">    24</span>		ctTrueColor      = 2
<a id="L25"></a><span class="ln">    25</span>		ctPaletted       = 3
<a id="L26"></a><span class="ln">    26</span>		ctGrayscaleAlpha = 4
<a id="L27"></a><span class="ln">    27</span>		ctTrueColorAlpha = 6
<a id="L28"></a><span class="ln">    28</span>	)
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// A cb is a combination of color type and bit depth.</span>
<a id="L31"></a><span class="ln">    31</span>	const (
<a id="L32"></a><span class="ln">    32</span>		cbInvalid = iota
<a id="L33"></a><span class="ln">    33</span>		cbG1
<a id="L34"></a><span class="ln">    34</span>		cbG2
<a id="L35"></a><span class="ln">    35</span>		cbG4
<a id="L36"></a><span class="ln">    36</span>		cbG8
<a id="L37"></a><span class="ln">    37</span>		cbGA8
<a id="L38"></a><span class="ln">    38</span>		cbTC8
<a id="L39"></a><span class="ln">    39</span>		cbP1
<a id="L40"></a><span class="ln">    40</span>		cbP2
<a id="L41"></a><span class="ln">    41</span>		cbP4
<a id="L42"></a><span class="ln">    42</span>		cbP8
<a id="L43"></a><span class="ln">    43</span>		cbTCA8
<a id="L44"></a><span class="ln">    44</span>		cbG16
<a id="L45"></a><span class="ln">    45</span>		cbGA16
<a id="L46"></a><span class="ln">    46</span>		cbTC16
<a id="L47"></a><span class="ln">    47</span>		cbTCA16
<a id="L48"></a><span class="ln">    48</span>	)
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// Filter type, as per the PNG spec.</span>
<a id="L51"></a><span class="ln">    51</span>	const (
<a id="L52"></a><span class="ln">    52</span>		ftNone    = 0
<a id="L53"></a><span class="ln">    53</span>		ftSub     = 1
<a id="L54"></a><span class="ln">    54</span>		ftUp      = 2
<a id="L55"></a><span class="ln">    55</span>		ftAverage = 3
<a id="L56"></a><span class="ln">    56</span>		ftPaeth   = 4
<a id="L57"></a><span class="ln">    57</span>		nFilter   = 5
<a id="L58"></a><span class="ln">    58</span>	)
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// Decoding stage.</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">// The PNG specification says that the IHDR, PLTE (if present), IDAT and IEND</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">// chunks must appear in that order. There may be multiple IDAT chunks, and</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">// IDAT chunks must be sequential (i.e. they may not have any other chunks</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// between them).</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// http://www.w3.org/TR/PNG/#5ChunkOrdering</span>
<a id="L66"></a><span class="ln">    66</span>	const (
<a id="L67"></a><span class="ln">    67</span>		dsStart = iota
<a id="L68"></a><span class="ln">    68</span>		dsSeenIHDR
<a id="L69"></a><span class="ln">    69</span>		dsSeenPLTE
<a id="L70"></a><span class="ln">    70</span>		dsSeenIDAT
<a id="L71"></a><span class="ln">    71</span>		dsSeenIEND
<a id="L72"></a><span class="ln">    72</span>	)
<a id="L73"></a><span class="ln">    73</span>	
<a id="L74"></a><span class="ln">    74</span>	const pngHeader = &#34;\x89PNG\r\n\x1a\n&#34;
<a id="L75"></a><span class="ln">    75</span>	
<a id="L76"></a><span class="ln">    76</span>	type decoder struct {
<a id="L77"></a><span class="ln">    77</span>		r             io.Reader
<a id="L78"></a><span class="ln">    78</span>		img           image.Image
<a id="L79"></a><span class="ln">    79</span>		crc           hash.Hash32
<a id="L80"></a><span class="ln">    80</span>		width, height int
<a id="L81"></a><span class="ln">    81</span>		depth         int
<a id="L82"></a><span class="ln">    82</span>		palette       color.Palette
<a id="L83"></a><span class="ln">    83</span>		cb            int
<a id="L84"></a><span class="ln">    84</span>		stage         int
<a id="L85"></a><span class="ln">    85</span>		idatLength    uint32
<a id="L86"></a><span class="ln">    86</span>		tmp           [3 * 256]byte
<a id="L87"></a><span class="ln">    87</span>	}
<a id="L88"></a><span class="ln">    88</span>	
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">// A FormatError reports that the input is not a valid PNG.</span>
<a id="L90"></a><span class="ln">    90</span>	type FormatError string
<a id="L91"></a><span class="ln">    91</span>	
<a id="L92"></a><span class="ln">    92</span>	func (e FormatError) Error() string { return &#34;png: invalid format: &#34; + string(e) }
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>	var chunkOrderError = FormatError(&#34;chunk out of order&#34;)
<a id="L95"></a><span class="ln">    95</span>	
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">// An UnsupportedError reports that the input uses a valid but unimplemented PNG feature.</span>
<a id="L97"></a><span class="ln">    97</span>	type UnsupportedError string
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>	func (e UnsupportedError) Error() string { return &#34;png: unsupported feature: &#34; + string(e) }
<a id="L100"></a><span class="ln">   100</span>	
<a id="L101"></a><span class="ln">   101</span>	func abs(x int) int {
<a id="L102"></a><span class="ln">   102</span>		if x &lt; 0 {
<a id="L103"></a><span class="ln">   103</span>			return -x
<a id="L104"></a><span class="ln">   104</span>		}
<a id="L105"></a><span class="ln">   105</span>		return x
<a id="L106"></a><span class="ln">   106</span>	}
<a id="L107"></a><span class="ln">   107</span>	
<a id="L108"></a><span class="ln">   108</span>	func min(a, b int) int {
<a id="L109"></a><span class="ln">   109</span>		if a &lt; b {
<a id="L110"></a><span class="ln">   110</span>			return a
<a id="L111"></a><span class="ln">   111</span>		}
<a id="L112"></a><span class="ln">   112</span>		return b
<a id="L113"></a><span class="ln">   113</span>	}
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>	func (d *decoder) parseIHDR(length uint32) error {
<a id="L116"></a><span class="ln">   116</span>		if length != 13 {
<a id="L117"></a><span class="ln">   117</span>			return FormatError(&#34;bad IHDR length&#34;)
<a id="L118"></a><span class="ln">   118</span>		}
<a id="L119"></a><span class="ln">   119</span>		if _, err := io.ReadFull(d.r, d.tmp[:13]); err != nil {
<a id="L120"></a><span class="ln">   120</span>			return err
<a id="L121"></a><span class="ln">   121</span>		}
<a id="L122"></a><span class="ln">   122</span>		d.crc.Write(d.tmp[:13])
<a id="L123"></a><span class="ln">   123</span>		if d.tmp[10] != 0 || d.tmp[11] != 0 || d.tmp[12] != 0 {
<a id="L124"></a><span class="ln">   124</span>			return UnsupportedError(&#34;compression, filter or interlace method&#34;)
<a id="L125"></a><span class="ln">   125</span>		}
<a id="L126"></a><span class="ln">   126</span>		w := int32(binary.BigEndian.Uint32(d.tmp[0:4]))
<a id="L127"></a><span class="ln">   127</span>		h := int32(binary.BigEndian.Uint32(d.tmp[4:8]))
<a id="L128"></a><span class="ln">   128</span>		if w &lt; 0 || h &lt; 0 {
<a id="L129"></a><span class="ln">   129</span>			return FormatError(&#34;negative dimension&#34;)
<a id="L130"></a><span class="ln">   130</span>		}
<a id="L131"></a><span class="ln">   131</span>		nPixels := int64(w) * int64(h)
<a id="L132"></a><span class="ln">   132</span>		if nPixels != int64(int(nPixels)) {
<a id="L133"></a><span class="ln">   133</span>			return UnsupportedError(&#34;dimension overflow&#34;)
<a id="L134"></a><span class="ln">   134</span>		}
<a id="L135"></a><span class="ln">   135</span>		d.cb = cbInvalid
<a id="L136"></a><span class="ln">   136</span>		d.depth = int(d.tmp[8])
<a id="L137"></a><span class="ln">   137</span>		switch d.depth {
<a id="L138"></a><span class="ln">   138</span>		case 1:
<a id="L139"></a><span class="ln">   139</span>			switch d.tmp[9] {
<a id="L140"></a><span class="ln">   140</span>			case ctGrayscale:
<a id="L141"></a><span class="ln">   141</span>				d.cb = cbG1
<a id="L142"></a><span class="ln">   142</span>			case ctPaletted:
<a id="L143"></a><span class="ln">   143</span>				d.cb = cbP1
<a id="L144"></a><span class="ln">   144</span>			}
<a id="L145"></a><span class="ln">   145</span>		case 2:
<a id="L146"></a><span class="ln">   146</span>			switch d.tmp[9] {
<a id="L147"></a><span class="ln">   147</span>			case ctGrayscale:
<a id="L148"></a><span class="ln">   148</span>				d.cb = cbG2
<a id="L149"></a><span class="ln">   149</span>			case ctPaletted:
<a id="L150"></a><span class="ln">   150</span>				d.cb = cbP2
<a id="L151"></a><span class="ln">   151</span>			}
<a id="L152"></a><span class="ln">   152</span>		case 4:
<a id="L153"></a><span class="ln">   153</span>			switch d.tmp[9] {
<a id="L154"></a><span class="ln">   154</span>			case ctGrayscale:
<a id="L155"></a><span class="ln">   155</span>				d.cb = cbG4
<a id="L156"></a><span class="ln">   156</span>			case ctPaletted:
<a id="L157"></a><span class="ln">   157</span>				d.cb = cbP4
<a id="L158"></a><span class="ln">   158</span>			}
<a id="L159"></a><span class="ln">   159</span>		case 8:
<a id="L160"></a><span class="ln">   160</span>			switch d.tmp[9] {
<a id="L161"></a><span class="ln">   161</span>			case ctGrayscale:
<a id="L162"></a><span class="ln">   162</span>				d.cb = cbG8
<a id="L163"></a><span class="ln">   163</span>			case ctTrueColor:
<a id="L164"></a><span class="ln">   164</span>				d.cb = cbTC8
<a id="L165"></a><span class="ln">   165</span>			case ctPaletted:
<a id="L166"></a><span class="ln">   166</span>				d.cb = cbP8
<a id="L167"></a><span class="ln">   167</span>			case ctGrayscaleAlpha:
<a id="L168"></a><span class="ln">   168</span>				d.cb = cbGA8
<a id="L169"></a><span class="ln">   169</span>			case ctTrueColorAlpha:
<a id="L170"></a><span class="ln">   170</span>				d.cb = cbTCA8
<a id="L171"></a><span class="ln">   171</span>			}
<a id="L172"></a><span class="ln">   172</span>		case 16:
<a id="L173"></a><span class="ln">   173</span>			switch d.tmp[9] {
<a id="L174"></a><span class="ln">   174</span>			case ctGrayscale:
<a id="L175"></a><span class="ln">   175</span>				d.cb = cbG16
<a id="L176"></a><span class="ln">   176</span>			case ctTrueColor:
<a id="L177"></a><span class="ln">   177</span>				d.cb = cbTC16
<a id="L178"></a><span class="ln">   178</span>			case ctGrayscaleAlpha:
<a id="L179"></a><span class="ln">   179</span>				d.cb = cbGA16
<a id="L180"></a><span class="ln">   180</span>			case ctTrueColorAlpha:
<a id="L181"></a><span class="ln">   181</span>				d.cb = cbTCA16
<a id="L182"></a><span class="ln">   182</span>			}
<a id="L183"></a><span class="ln">   183</span>		}
<a id="L184"></a><span class="ln">   184</span>		if d.cb == cbInvalid {
<a id="L185"></a><span class="ln">   185</span>			return UnsupportedError(fmt.Sprintf(&#34;bit depth %d, color type %d&#34;, d.tmp[8], d.tmp[9]))
<a id="L186"></a><span class="ln">   186</span>		}
<a id="L187"></a><span class="ln">   187</span>		d.width, d.height = int(w), int(h)
<a id="L188"></a><span class="ln">   188</span>		return d.verifyChecksum()
<a id="L189"></a><span class="ln">   189</span>	}
<a id="L190"></a><span class="ln">   190</span>	
<a id="L191"></a><span class="ln">   191</span>	func (d *decoder) parsePLTE(length uint32) error {
<a id="L192"></a><span class="ln">   192</span>		np := int(length / 3) <span class="comment">// The number of palette entries.</span>
<a id="L193"></a><span class="ln">   193</span>		if length%3 != 0 || np &lt;= 0 || np &gt; 256 || np &gt; 1&lt;&lt;uint(d.depth) {
<a id="L194"></a><span class="ln">   194</span>			return FormatError(&#34;bad PLTE length&#34;)
<a id="L195"></a><span class="ln">   195</span>		}
<a id="L196"></a><span class="ln">   196</span>		n, err := io.ReadFull(d.r, d.tmp[:3*np])
<a id="L197"></a><span class="ln">   197</span>		if err != nil {
<a id="L198"></a><span class="ln">   198</span>			return err
<a id="L199"></a><span class="ln">   199</span>		}
<a id="L200"></a><span class="ln">   200</span>		d.crc.Write(d.tmp[:n])
<a id="L201"></a><span class="ln">   201</span>		switch d.cb {
<a id="L202"></a><span class="ln">   202</span>		case cbP1, cbP2, cbP4, cbP8:
<a id="L203"></a><span class="ln">   203</span>			d.palette = color.Palette(make([]color.Color, np))
<a id="L204"></a><span class="ln">   204</span>			for i := 0; i &lt; np; i++ {
<a id="L205"></a><span class="ln">   205</span>				d.palette[i] = color.RGBA{d.tmp[3*i+0], d.tmp[3*i+1], d.tmp[3*i+2], 0xff}
<a id="L206"></a><span class="ln">   206</span>			}
<a id="L207"></a><span class="ln">   207</span>		case cbTC8, cbTCA8, cbTC16, cbTCA16:
<a id="L208"></a><span class="ln">   208</span>			<span class="comment">// As per the PNG spec, a PLTE chunk is optional (and for practical purposes,</span>
<a id="L209"></a><span class="ln">   209</span>			<span class="comment">// ignorable) for the ctTrueColor and ctTrueColorAlpha color types (section 4.1.2).</span>
<a id="L210"></a><span class="ln">   210</span>		default:
<a id="L211"></a><span class="ln">   211</span>			return FormatError(&#34;PLTE, color type mismatch&#34;)
<a id="L212"></a><span class="ln">   212</span>		}
<a id="L213"></a><span class="ln">   213</span>		return d.verifyChecksum()
<a id="L214"></a><span class="ln">   214</span>	}
<a id="L215"></a><span class="ln">   215</span>	
<a id="L216"></a><span class="ln">   216</span>	func (d *decoder) parsetRNS(length uint32) error {
<a id="L217"></a><span class="ln">   217</span>		if length &gt; 256 {
<a id="L218"></a><span class="ln">   218</span>			return FormatError(&#34;bad tRNS length&#34;)
<a id="L219"></a><span class="ln">   219</span>		}
<a id="L220"></a><span class="ln">   220</span>		n, err := io.ReadFull(d.r, d.tmp[:length])
<a id="L221"></a><span class="ln">   221</span>		if err != nil {
<a id="L222"></a><span class="ln">   222</span>			return err
<a id="L223"></a><span class="ln">   223</span>		}
<a id="L224"></a><span class="ln">   224</span>		d.crc.Write(d.tmp[:n])
<a id="L225"></a><span class="ln">   225</span>		switch d.cb {
<a id="L226"></a><span class="ln">   226</span>		case cbG8, cbG16:
<a id="L227"></a><span class="ln">   227</span>			return UnsupportedError(&#34;grayscale transparency&#34;)
<a id="L228"></a><span class="ln">   228</span>		case cbTC8, cbTC16:
<a id="L229"></a><span class="ln">   229</span>			return UnsupportedError(&#34;truecolor transparency&#34;)
<a id="L230"></a><span class="ln">   230</span>		case cbP1, cbP2, cbP4, cbP8:
<a id="L231"></a><span class="ln">   231</span>			if n &gt; len(d.palette) {
<a id="L232"></a><span class="ln">   232</span>				return FormatError(&#34;bad tRNS length&#34;)
<a id="L233"></a><span class="ln">   233</span>			}
<a id="L234"></a><span class="ln">   234</span>			for i := 0; i &lt; n; i++ {
<a id="L235"></a><span class="ln">   235</span>				rgba := d.palette[i].(color.RGBA)
<a id="L236"></a><span class="ln">   236</span>				d.palette[i] = color.RGBA{rgba.R, rgba.G, rgba.B, d.tmp[i]}
<a id="L237"></a><span class="ln">   237</span>			}
<a id="L238"></a><span class="ln">   238</span>		case cbGA8, cbGA16, cbTCA8, cbTCA16:
<a id="L239"></a><span class="ln">   239</span>			return FormatError(&#34;tRNS, color type mismatch&#34;)
<a id="L240"></a><span class="ln">   240</span>		}
<a id="L241"></a><span class="ln">   241</span>		return d.verifyChecksum()
<a id="L242"></a><span class="ln">   242</span>	}
<a id="L243"></a><span class="ln">   243</span>	
<a id="L244"></a><span class="ln">   244</span>	<span class="comment">// The Paeth filter function, as per the PNG specification.</span>
<a id="L245"></a><span class="ln">   245</span>	func paeth(a, b, c uint8) uint8 {
<a id="L246"></a><span class="ln">   246</span>		p := int(a) + int(b) - int(c)
<a id="L247"></a><span class="ln">   247</span>		pa := abs(p - int(a))
<a id="L248"></a><span class="ln">   248</span>		pb := abs(p - int(b))
<a id="L249"></a><span class="ln">   249</span>		pc := abs(p - int(c))
<a id="L250"></a><span class="ln">   250</span>		if pa &lt;= pb &amp;&amp; pa &lt;= pc {
<a id="L251"></a><span class="ln">   251</span>			return a
<a id="L252"></a><span class="ln">   252</span>		} else if pb &lt;= pc {
<a id="L253"></a><span class="ln">   253</span>			return b
<a id="L254"></a><span class="ln">   254</span>		}
<a id="L255"></a><span class="ln">   255</span>		return c
<a id="L256"></a><span class="ln">   256</span>	}
<a id="L257"></a><span class="ln">   257</span>	
<a id="L258"></a><span class="ln">   258</span>	<span class="comment">// Read presents one or more IDAT chunks as one continuous stream (minus the</span>
<a id="L259"></a><span class="ln">   259</span>	<span class="comment">// intermediate chunk headers and footers). If the PNG data looked like:</span>
<a id="L260"></a><span class="ln">   260</span>	<span class="comment">//   ... len0 IDAT xxx crc0 len1 IDAT yy crc1 len2 IEND crc2</span>
<a id="L261"></a><span class="ln">   261</span>	<span class="comment">// then this reader presents xxxyy. For well-formed PNG data, the decoder state</span>
<a id="L262"></a><span class="ln">   262</span>	<span class="comment">// immediately before the first Read call is that d.r is positioned between the</span>
<a id="L263"></a><span class="ln">   263</span>	<span class="comment">// first IDAT and xxx, and the decoder state immediately after the last Read</span>
<a id="L264"></a><span class="ln">   264</span>	<span class="comment">// call is that d.r is positioned between yy and crc1.</span>
<a id="L265"></a><span class="ln">   265</span>	func (d *decoder) Read(p []byte) (int, error) {
<a id="L266"></a><span class="ln">   266</span>		if len(p) == 0 {
<a id="L267"></a><span class="ln">   267</span>			return 0, nil
<a id="L268"></a><span class="ln">   268</span>		}
<a id="L269"></a><span class="ln">   269</span>		for d.idatLength == 0 {
<a id="L270"></a><span class="ln">   270</span>			<span class="comment">// We have exhausted an IDAT chunk. Verify the checksum of that chunk.</span>
<a id="L271"></a><span class="ln">   271</span>			if err := d.verifyChecksum(); err != nil {
<a id="L272"></a><span class="ln">   272</span>				return 0, err
<a id="L273"></a><span class="ln">   273</span>			}
<a id="L274"></a><span class="ln">   274</span>			<span class="comment">// Read the length and chunk type of the next chunk, and check that</span>
<a id="L275"></a><span class="ln">   275</span>			<span class="comment">// it is an IDAT chunk.</span>
<a id="L276"></a><span class="ln">   276</span>			if _, err := io.ReadFull(d.r, d.tmp[:8]); err != nil {
<a id="L277"></a><span class="ln">   277</span>				return 0, err
<a id="L278"></a><span class="ln">   278</span>			}
<a id="L279"></a><span class="ln">   279</span>			d.idatLength = binary.BigEndian.Uint32(d.tmp[:4])
<a id="L280"></a><span class="ln">   280</span>			if string(d.tmp[4:8]) != &#34;IDAT&#34; {
<a id="L281"></a><span class="ln">   281</span>				return 0, FormatError(&#34;not enough pixel data&#34;)
<a id="L282"></a><span class="ln">   282</span>			}
<a id="L283"></a><span class="ln">   283</span>			d.crc.Reset()
<a id="L284"></a><span class="ln">   284</span>			d.crc.Write(d.tmp[4:8])
<a id="L285"></a><span class="ln">   285</span>		}
<a id="L286"></a><span class="ln">   286</span>		if int(d.idatLength) &lt; 0 {
<a id="L287"></a><span class="ln">   287</span>			return 0, UnsupportedError(&#34;IDAT chunk length overflow&#34;)
<a id="L288"></a><span class="ln">   288</span>		}
<a id="L289"></a><span class="ln">   289</span>		n, err := d.r.Read(p[:min(len(p), int(d.idatLength))])
<a id="L290"></a><span class="ln">   290</span>		d.crc.Write(p[:n])
<a id="L291"></a><span class="ln">   291</span>		d.idatLength -= uint32(n)
<a id="L292"></a><span class="ln">   292</span>		return n, err
<a id="L293"></a><span class="ln">   293</span>	}
<a id="L294"></a><span class="ln">   294</span>	
<a id="L295"></a><span class="ln">   295</span>	<span class="comment">// decode decodes the IDAT data into an image.</span>
<a id="L296"></a><span class="ln">   296</span>	func (d *decoder) decode() (image.Image, error) {
<a id="L297"></a><span class="ln">   297</span>		r, err := zlib.NewReader(d)
<a id="L298"></a><span class="ln">   298</span>		if err != nil {
<a id="L299"></a><span class="ln">   299</span>			return nil, err
<a id="L300"></a><span class="ln">   300</span>		}
<a id="L301"></a><span class="ln">   301</span>		defer r.Close()
<a id="L302"></a><span class="ln">   302</span>		bitsPerPixel := 0
<a id="L303"></a><span class="ln">   303</span>		maxPalette := uint8(0)
<a id="L304"></a><span class="ln">   304</span>		var (
<a id="L305"></a><span class="ln">   305</span>			gray     *image.Gray
<a id="L306"></a><span class="ln">   306</span>			rgba     *image.RGBA
<a id="L307"></a><span class="ln">   307</span>			paletted *image.Paletted
<a id="L308"></a><span class="ln">   308</span>			nrgba    *image.NRGBA
<a id="L309"></a><span class="ln">   309</span>			gray16   *image.Gray16
<a id="L310"></a><span class="ln">   310</span>			rgba64   *image.RGBA64
<a id="L311"></a><span class="ln">   311</span>			nrgba64  *image.NRGBA64
<a id="L312"></a><span class="ln">   312</span>			img      image.Image
<a id="L313"></a><span class="ln">   313</span>		)
<a id="L314"></a><span class="ln">   314</span>		switch d.cb {
<a id="L315"></a><span class="ln">   315</span>		case cbG1, cbG2, cbG4, cbG8:
<a id="L316"></a><span class="ln">   316</span>			bitsPerPixel = d.depth
<a id="L317"></a><span class="ln">   317</span>			gray = image.NewGray(image.Rect(0, 0, d.width, d.height))
<a id="L318"></a><span class="ln">   318</span>			img = gray
<a id="L319"></a><span class="ln">   319</span>		case cbGA8:
<a id="L320"></a><span class="ln">   320</span>			bitsPerPixel = 16
<a id="L321"></a><span class="ln">   321</span>			nrgba = image.NewNRGBA(image.Rect(0, 0, d.width, d.height))
<a id="L322"></a><span class="ln">   322</span>			img = nrgba
<a id="L323"></a><span class="ln">   323</span>		case cbTC8:
<a id="L324"></a><span class="ln">   324</span>			bitsPerPixel = 24
<a id="L325"></a><span class="ln">   325</span>			rgba = image.NewRGBA(image.Rect(0, 0, d.width, d.height))
<a id="L326"></a><span class="ln">   326</span>			img = rgba
<a id="L327"></a><span class="ln">   327</span>		case cbP1, cbP2, cbP4, cbP8:
<a id="L328"></a><span class="ln">   328</span>			bitsPerPixel = d.depth
<a id="L329"></a><span class="ln">   329</span>			paletted = image.NewPaletted(image.Rect(0, 0, d.width, d.height), d.palette)
<a id="L330"></a><span class="ln">   330</span>			img = paletted
<a id="L331"></a><span class="ln">   331</span>			maxPalette = uint8(len(d.palette) - 1)
<a id="L332"></a><span class="ln">   332</span>		case cbTCA8:
<a id="L333"></a><span class="ln">   333</span>			bitsPerPixel = 32
<a id="L334"></a><span class="ln">   334</span>			nrgba = image.NewNRGBA(image.Rect(0, 0, d.width, d.height))
<a id="L335"></a><span class="ln">   335</span>			img = nrgba
<a id="L336"></a><span class="ln">   336</span>		case cbG16:
<a id="L337"></a><span class="ln">   337</span>			bitsPerPixel = 16
<a id="L338"></a><span class="ln">   338</span>			gray16 = image.NewGray16(image.Rect(0, 0, d.width, d.height))
<a id="L339"></a><span class="ln">   339</span>			img = gray16
<a id="L340"></a><span class="ln">   340</span>		case cbGA16:
<a id="L341"></a><span class="ln">   341</span>			bitsPerPixel = 32
<a id="L342"></a><span class="ln">   342</span>			nrgba64 = image.NewNRGBA64(image.Rect(0, 0, d.width, d.height))
<a id="L343"></a><span class="ln">   343</span>			img = nrgba64
<a id="L344"></a><span class="ln">   344</span>		case cbTC16:
<a id="L345"></a><span class="ln">   345</span>			bitsPerPixel = 48
<a id="L346"></a><span class="ln">   346</span>			rgba64 = image.NewRGBA64(image.Rect(0, 0, d.width, d.height))
<a id="L347"></a><span class="ln">   347</span>			img = rgba64
<a id="L348"></a><span class="ln">   348</span>		case cbTCA16:
<a id="L349"></a><span class="ln">   349</span>			bitsPerPixel = 64
<a id="L350"></a><span class="ln">   350</span>			nrgba64 = image.NewNRGBA64(image.Rect(0, 0, d.width, d.height))
<a id="L351"></a><span class="ln">   351</span>			img = nrgba64
<a id="L352"></a><span class="ln">   352</span>		}
<a id="L353"></a><span class="ln">   353</span>		bytesPerPixel := (bitsPerPixel + 7) / 8
<a id="L354"></a><span class="ln">   354</span>	
<a id="L355"></a><span class="ln">   355</span>		<span class="comment">// cr and pr are the bytes for the current and previous row.</span>
<a id="L356"></a><span class="ln">   356</span>		<span class="comment">// The +1 is for the per-row filter type, which is at cr[0].</span>
<a id="L357"></a><span class="ln">   357</span>		cr := make([]uint8, 1+(bitsPerPixel*d.width+7)/8)
<a id="L358"></a><span class="ln">   358</span>		pr := make([]uint8, 1+(bitsPerPixel*d.width+7)/8)
<a id="L359"></a><span class="ln">   359</span>	
<a id="L360"></a><span class="ln">   360</span>		for y := 0; y &lt; d.height; y++ {
<a id="L361"></a><span class="ln">   361</span>			<span class="comment">// Read the decompressed bytes.</span>
<a id="L362"></a><span class="ln">   362</span>			_, err := io.ReadFull(r, cr)
<a id="L363"></a><span class="ln">   363</span>			if err != nil {
<a id="L364"></a><span class="ln">   364</span>				return nil, err
<a id="L365"></a><span class="ln">   365</span>			}
<a id="L366"></a><span class="ln">   366</span>	
<a id="L367"></a><span class="ln">   367</span>			<span class="comment">// Apply the filter.</span>
<a id="L368"></a><span class="ln">   368</span>			cdat := cr[1:]
<a id="L369"></a><span class="ln">   369</span>			pdat := pr[1:]
<a id="L370"></a><span class="ln">   370</span>			switch cr[0] {
<a id="L371"></a><span class="ln">   371</span>			case ftNone:
<a id="L372"></a><span class="ln">   372</span>				<span class="comment">// No-op.</span>
<a id="L373"></a><span class="ln">   373</span>			case ftSub:
<a id="L374"></a><span class="ln">   374</span>				for i := bytesPerPixel; i &lt; len(cdat); i++ {
<a id="L375"></a><span class="ln">   375</span>					cdat[i] += cdat[i-bytesPerPixel]
<a id="L376"></a><span class="ln">   376</span>				}
<a id="L377"></a><span class="ln">   377</span>			case ftUp:
<a id="L378"></a><span class="ln">   378</span>				for i := 0; i &lt; len(cdat); i++ {
<a id="L379"></a><span class="ln">   379</span>					cdat[i] += pdat[i]
<a id="L380"></a><span class="ln">   380</span>				}
<a id="L381"></a><span class="ln">   381</span>			case ftAverage:
<a id="L382"></a><span class="ln">   382</span>				for i := 0; i &lt; bytesPerPixel; i++ {
<a id="L383"></a><span class="ln">   383</span>					cdat[i] += pdat[i] / 2
<a id="L384"></a><span class="ln">   384</span>				}
<a id="L385"></a><span class="ln">   385</span>				for i := bytesPerPixel; i &lt; len(cdat); i++ {
<a id="L386"></a><span class="ln">   386</span>					cdat[i] += uint8((int(cdat[i-bytesPerPixel]) + int(pdat[i])) / 2)
<a id="L387"></a><span class="ln">   387</span>				}
<a id="L388"></a><span class="ln">   388</span>			case ftPaeth:
<a id="L389"></a><span class="ln">   389</span>				for i := 0; i &lt; bytesPerPixel; i++ {
<a id="L390"></a><span class="ln">   390</span>					cdat[i] += paeth(0, pdat[i], 0)
<a id="L391"></a><span class="ln">   391</span>				}
<a id="L392"></a><span class="ln">   392</span>				for i := bytesPerPixel; i &lt; len(cdat); i++ {
<a id="L393"></a><span class="ln">   393</span>					cdat[i] += paeth(cdat[i-bytesPerPixel], pdat[i], pdat[i-bytesPerPixel])
<a id="L394"></a><span class="ln">   394</span>				}
<a id="L395"></a><span class="ln">   395</span>			default:
<a id="L396"></a><span class="ln">   396</span>				return nil, FormatError(&#34;bad filter type&#34;)
<a id="L397"></a><span class="ln">   397</span>			}
<a id="L398"></a><span class="ln">   398</span>	
<a id="L399"></a><span class="ln">   399</span>			<span class="comment">// Convert from bytes to colors.</span>
<a id="L400"></a><span class="ln">   400</span>			switch d.cb {
<a id="L401"></a><span class="ln">   401</span>			case cbG1:
<a id="L402"></a><span class="ln">   402</span>				for x := 0; x &lt; d.width; x += 8 {
<a id="L403"></a><span class="ln">   403</span>					b := cdat[x/8]
<a id="L404"></a><span class="ln">   404</span>					for x2 := 0; x2 &lt; 8 &amp;&amp; x+x2 &lt; d.width; x2++ {
<a id="L405"></a><span class="ln">   405</span>						gray.SetGray(x+x2, y, color.Gray{(b &gt;&gt; 7) * 0xff})
<a id="L406"></a><span class="ln">   406</span>						b &lt;&lt;= 1
<a id="L407"></a><span class="ln">   407</span>					}
<a id="L408"></a><span class="ln">   408</span>				}
<a id="L409"></a><span class="ln">   409</span>			case cbG2:
<a id="L410"></a><span class="ln">   410</span>				for x := 0; x &lt; d.width; x += 4 {
<a id="L411"></a><span class="ln">   411</span>					b := cdat[x/4]
<a id="L412"></a><span class="ln">   412</span>					for x2 := 0; x2 &lt; 4 &amp;&amp; x+x2 &lt; d.width; x2++ {
<a id="L413"></a><span class="ln">   413</span>						gray.SetGray(x+x2, y, color.Gray{(b &gt;&gt; 6) * 0x55})
<a id="L414"></a><span class="ln">   414</span>						b &lt;&lt;= 2
<a id="L415"></a><span class="ln">   415</span>					}
<a id="L416"></a><span class="ln">   416</span>				}
<a id="L417"></a><span class="ln">   417</span>			case cbG4:
<a id="L418"></a><span class="ln">   418</span>				for x := 0; x &lt; d.width; x += 2 {
<a id="L419"></a><span class="ln">   419</span>					b := cdat[x/2]
<a id="L420"></a><span class="ln">   420</span>					for x2 := 0; x2 &lt; 2 &amp;&amp; x+x2 &lt; d.width; x2++ {
<a id="L421"></a><span class="ln">   421</span>						gray.SetGray(x+x2, y, color.Gray{(b &gt;&gt; 4) * 0x11})
<a id="L422"></a><span class="ln">   422</span>						b &lt;&lt;= 4
<a id="L423"></a><span class="ln">   423</span>					}
<a id="L424"></a><span class="ln">   424</span>				}
<a id="L425"></a><span class="ln">   425</span>			case cbG8:
<a id="L426"></a><span class="ln">   426</span>				for x := 0; x &lt; d.width; x++ {
<a id="L427"></a><span class="ln">   427</span>					gray.SetGray(x, y, color.Gray{cdat[x]})
<a id="L428"></a><span class="ln">   428</span>				}
<a id="L429"></a><span class="ln">   429</span>			case cbGA8:
<a id="L430"></a><span class="ln">   430</span>				for x := 0; x &lt; d.width; x++ {
<a id="L431"></a><span class="ln">   431</span>					ycol := cdat[2*x+0]
<a id="L432"></a><span class="ln">   432</span>					nrgba.SetNRGBA(x, y, color.NRGBA{ycol, ycol, ycol, cdat[2*x+1]})
<a id="L433"></a><span class="ln">   433</span>				}
<a id="L434"></a><span class="ln">   434</span>			case cbTC8:
<a id="L435"></a><span class="ln">   435</span>				for x := 0; x &lt; d.width; x++ {
<a id="L436"></a><span class="ln">   436</span>					rgba.SetRGBA(x, y, color.RGBA{cdat[3*x+0], cdat[3*x+1], cdat[3*x+2], 0xff})
<a id="L437"></a><span class="ln">   437</span>				}
<a id="L438"></a><span class="ln">   438</span>			case cbP1:
<a id="L439"></a><span class="ln">   439</span>				for x := 0; x &lt; d.width; x += 8 {
<a id="L440"></a><span class="ln">   440</span>					b := cdat[x/8]
<a id="L441"></a><span class="ln">   441</span>					for x2 := 0; x2 &lt; 8 &amp;&amp; x+x2 &lt; d.width; x2++ {
<a id="L442"></a><span class="ln">   442</span>						idx := b &gt;&gt; 7
<a id="L443"></a><span class="ln">   443</span>						if idx &gt; maxPalette {
<a id="L444"></a><span class="ln">   444</span>							return nil, FormatError(&#34;palette index out of range&#34;)
<a id="L445"></a><span class="ln">   445</span>						}
<a id="L446"></a><span class="ln">   446</span>						paletted.SetColorIndex(x+x2, y, idx)
<a id="L447"></a><span class="ln">   447</span>						b &lt;&lt;= 1
<a id="L448"></a><span class="ln">   448</span>					}
<a id="L449"></a><span class="ln">   449</span>				}
<a id="L450"></a><span class="ln">   450</span>			case cbP2:
<a id="L451"></a><span class="ln">   451</span>				for x := 0; x &lt; d.width; x += 4 {
<a id="L452"></a><span class="ln">   452</span>					b := cdat[x/4]
<a id="L453"></a><span class="ln">   453</span>					for x2 := 0; x2 &lt; 4 &amp;&amp; x+x2 &lt; d.width; x2++ {
<a id="L454"></a><span class="ln">   454</span>						idx := b &gt;&gt; 6
<a id="L455"></a><span class="ln">   455</span>						if idx &gt; maxPalette {
<a id="L456"></a><span class="ln">   456</span>							return nil, FormatError(&#34;palette index out of range&#34;)
<a id="L457"></a><span class="ln">   457</span>						}
<a id="L458"></a><span class="ln">   458</span>						paletted.SetColorIndex(x+x2, y, idx)
<a id="L459"></a><span class="ln">   459</span>						b &lt;&lt;= 2
<a id="L460"></a><span class="ln">   460</span>					}
<a id="L461"></a><span class="ln">   461</span>				}
<a id="L462"></a><span class="ln">   462</span>			case cbP4:
<a id="L463"></a><span class="ln">   463</span>				for x := 0; x &lt; d.width; x += 2 {
<a id="L464"></a><span class="ln">   464</span>					b := cdat[x/2]
<a id="L465"></a><span class="ln">   465</span>					for x2 := 0; x2 &lt; 2 &amp;&amp; x+x2 &lt; d.width; x2++ {
<a id="L466"></a><span class="ln">   466</span>						idx := b &gt;&gt; 4
<a id="L467"></a><span class="ln">   467</span>						if idx &gt; maxPalette {
<a id="L468"></a><span class="ln">   468</span>							return nil, FormatError(&#34;palette index out of range&#34;)
<a id="L469"></a><span class="ln">   469</span>						}
<a id="L470"></a><span class="ln">   470</span>						paletted.SetColorIndex(x+x2, y, idx)
<a id="L471"></a><span class="ln">   471</span>						b &lt;&lt;= 4
<a id="L472"></a><span class="ln">   472</span>					}
<a id="L473"></a><span class="ln">   473</span>				}
<a id="L474"></a><span class="ln">   474</span>			case cbP8:
<a id="L475"></a><span class="ln">   475</span>				for x := 0; x &lt; d.width; x++ {
<a id="L476"></a><span class="ln">   476</span>					if cdat[x] &gt; maxPalette {
<a id="L477"></a><span class="ln">   477</span>						return nil, FormatError(&#34;palette index out of range&#34;)
<a id="L478"></a><span class="ln">   478</span>					}
<a id="L479"></a><span class="ln">   479</span>					paletted.SetColorIndex(x, y, cdat[x])
<a id="L480"></a><span class="ln">   480</span>				}
<a id="L481"></a><span class="ln">   481</span>			case cbTCA8:
<a id="L482"></a><span class="ln">   482</span>				for x := 0; x &lt; d.width; x++ {
<a id="L483"></a><span class="ln">   483</span>					nrgba.SetNRGBA(x, y, color.NRGBA{cdat[4*x+0], cdat[4*x+1], cdat[4*x+2], cdat[4*x+3]})
<a id="L484"></a><span class="ln">   484</span>				}
<a id="L485"></a><span class="ln">   485</span>			case cbG16:
<a id="L486"></a><span class="ln">   486</span>				for x := 0; x &lt; d.width; x++ {
<a id="L487"></a><span class="ln">   487</span>					ycol := uint16(cdat[2*x+0])&lt;&lt;8 | uint16(cdat[2*x+1])
<a id="L488"></a><span class="ln">   488</span>					gray16.SetGray16(x, y, color.Gray16{ycol})
<a id="L489"></a><span class="ln">   489</span>				}
<a id="L490"></a><span class="ln">   490</span>			case cbGA16:
<a id="L491"></a><span class="ln">   491</span>				for x := 0; x &lt; d.width; x++ {
<a id="L492"></a><span class="ln">   492</span>					ycol := uint16(cdat[4*x+0])&lt;&lt;8 | uint16(cdat[4*x+1])
<a id="L493"></a><span class="ln">   493</span>					acol := uint16(cdat[4*x+2])&lt;&lt;8 | uint16(cdat[4*x+3])
<a id="L494"></a><span class="ln">   494</span>					nrgba64.SetNRGBA64(x, y, color.NRGBA64{ycol, ycol, ycol, acol})
<a id="L495"></a><span class="ln">   495</span>				}
<a id="L496"></a><span class="ln">   496</span>			case cbTC16:
<a id="L497"></a><span class="ln">   497</span>				for x := 0; x &lt; d.width; x++ {
<a id="L498"></a><span class="ln">   498</span>					rcol := uint16(cdat[6*x+0])&lt;&lt;8 | uint16(cdat[6*x+1])
<a id="L499"></a><span class="ln">   499</span>					gcol := uint16(cdat[6*x+2])&lt;&lt;8 | uint16(cdat[6*x+3])
<a id="L500"></a><span class="ln">   500</span>					bcol := uint16(cdat[6*x+4])&lt;&lt;8 | uint16(cdat[6*x+5])
<a id="L501"></a><span class="ln">   501</span>					rgba64.SetRGBA64(x, y, color.RGBA64{rcol, gcol, bcol, 0xffff})
<a id="L502"></a><span class="ln">   502</span>				}
<a id="L503"></a><span class="ln">   503</span>			case cbTCA16:
<a id="L504"></a><span class="ln">   504</span>				for x := 0; x &lt; d.width; x++ {
<a id="L505"></a><span class="ln">   505</span>					rcol := uint16(cdat[8*x+0])&lt;&lt;8 | uint16(cdat[8*x+1])
<a id="L506"></a><span class="ln">   506</span>					gcol := uint16(cdat[8*x+2])&lt;&lt;8 | uint16(cdat[8*x+3])
<a id="L507"></a><span class="ln">   507</span>					bcol := uint16(cdat[8*x+4])&lt;&lt;8 | uint16(cdat[8*x+5])
<a id="L508"></a><span class="ln">   508</span>					acol := uint16(cdat[8*x+6])&lt;&lt;8 | uint16(cdat[8*x+7])
<a id="L509"></a><span class="ln">   509</span>					nrgba64.SetNRGBA64(x, y, color.NRGBA64{rcol, gcol, bcol, acol})
<a id="L510"></a><span class="ln">   510</span>				}
<a id="L511"></a><span class="ln">   511</span>			}
<a id="L512"></a><span class="ln">   512</span>	
<a id="L513"></a><span class="ln">   513</span>			<span class="comment">// The current row for y is the previous row for y+1.</span>
<a id="L514"></a><span class="ln">   514</span>			pr, cr = cr, pr
<a id="L515"></a><span class="ln">   515</span>		}
<a id="L516"></a><span class="ln">   516</span>	
<a id="L517"></a><span class="ln">   517</span>		<span class="comment">// Check for EOF, to verify the zlib checksum.</span>
<a id="L518"></a><span class="ln">   518</span>		n, err := r.Read(pr[:1])
<a id="L519"></a><span class="ln">   519</span>		if err != io.EOF {
<a id="L520"></a><span class="ln">   520</span>			return nil, FormatError(err.Error())
<a id="L521"></a><span class="ln">   521</span>		}
<a id="L522"></a><span class="ln">   522</span>		if n != 0 || d.idatLength != 0 {
<a id="L523"></a><span class="ln">   523</span>			return nil, FormatError(&#34;too much pixel data&#34;)
<a id="L524"></a><span class="ln">   524</span>		}
<a id="L525"></a><span class="ln">   525</span>	
<a id="L526"></a><span class="ln">   526</span>		return img, nil
<a id="L527"></a><span class="ln">   527</span>	}
<a id="L528"></a><span class="ln">   528</span>	
<a id="L529"></a><span class="ln">   529</span>	func (d *decoder) parseIDAT(length uint32) (err error) {
<a id="L530"></a><span class="ln">   530</span>		d.idatLength = length
<a id="L531"></a><span class="ln">   531</span>		d.img, err = d.decode()
<a id="L532"></a><span class="ln">   532</span>		if err != nil {
<a id="L533"></a><span class="ln">   533</span>			return err
<a id="L534"></a><span class="ln">   534</span>		}
<a id="L535"></a><span class="ln">   535</span>		return d.verifyChecksum()
<a id="L536"></a><span class="ln">   536</span>	}
<a id="L537"></a><span class="ln">   537</span>	
<a id="L538"></a><span class="ln">   538</span>	func (d *decoder) parseIEND(length uint32) error {
<a id="L539"></a><span class="ln">   539</span>		if length != 0 {
<a id="L540"></a><span class="ln">   540</span>			return FormatError(&#34;bad IEND length&#34;)
<a id="L541"></a><span class="ln">   541</span>		}
<a id="L542"></a><span class="ln">   542</span>		return d.verifyChecksum()
<a id="L543"></a><span class="ln">   543</span>	}
<a id="L544"></a><span class="ln">   544</span>	
<a id="L545"></a><span class="ln">   545</span>	func (d *decoder) parseChunk() error {
<a id="L546"></a><span class="ln">   546</span>		<span class="comment">// Read the length and chunk type.</span>
<a id="L547"></a><span class="ln">   547</span>		n, err := io.ReadFull(d.r, d.tmp[:8])
<a id="L548"></a><span class="ln">   548</span>		if err != nil {
<a id="L549"></a><span class="ln">   549</span>			return err
<a id="L550"></a><span class="ln">   550</span>		}
<a id="L551"></a><span class="ln">   551</span>		length := binary.BigEndian.Uint32(d.tmp[:4])
<a id="L552"></a><span class="ln">   552</span>		d.crc.Reset()
<a id="L553"></a><span class="ln">   553</span>		d.crc.Write(d.tmp[4:8])
<a id="L554"></a><span class="ln">   554</span>	
<a id="L555"></a><span class="ln">   555</span>		<span class="comment">// Read the chunk data.</span>
<a id="L556"></a><span class="ln">   556</span>		switch string(d.tmp[4:8]) {
<a id="L557"></a><span class="ln">   557</span>		case &#34;IHDR&#34;:
<a id="L558"></a><span class="ln">   558</span>			if d.stage != dsStart {
<a id="L559"></a><span class="ln">   559</span>				return chunkOrderError
<a id="L560"></a><span class="ln">   560</span>			}
<a id="L561"></a><span class="ln">   561</span>			d.stage = dsSeenIHDR
<a id="L562"></a><span class="ln">   562</span>			return d.parseIHDR(length)
<a id="L563"></a><span class="ln">   563</span>		case &#34;PLTE&#34;:
<a id="L564"></a><span class="ln">   564</span>			if d.stage != dsSeenIHDR {
<a id="L565"></a><span class="ln">   565</span>				return chunkOrderError
<a id="L566"></a><span class="ln">   566</span>			}
<a id="L567"></a><span class="ln">   567</span>			d.stage = dsSeenPLTE
<a id="L568"></a><span class="ln">   568</span>			return d.parsePLTE(length)
<a id="L569"></a><span class="ln">   569</span>		case &#34;tRNS&#34;:
<a id="L570"></a><span class="ln">   570</span>			if d.stage != dsSeenPLTE {
<a id="L571"></a><span class="ln">   571</span>				return chunkOrderError
<a id="L572"></a><span class="ln">   572</span>			}
<a id="L573"></a><span class="ln">   573</span>			return d.parsetRNS(length)
<a id="L574"></a><span class="ln">   574</span>		case &#34;IDAT&#34;:
<a id="L575"></a><span class="ln">   575</span>			if d.stage &lt; dsSeenIHDR || d.stage &gt; dsSeenIDAT || (d.cb == cbP8 &amp;&amp; d.stage == dsSeenIHDR) {
<a id="L576"></a><span class="ln">   576</span>				return chunkOrderError
<a id="L577"></a><span class="ln">   577</span>			}
<a id="L578"></a><span class="ln">   578</span>			d.stage = dsSeenIDAT
<a id="L579"></a><span class="ln">   579</span>			return d.parseIDAT(length)
<a id="L580"></a><span class="ln">   580</span>		case &#34;IEND&#34;:
<a id="L581"></a><span class="ln">   581</span>			if d.stage != dsSeenIDAT {
<a id="L582"></a><span class="ln">   582</span>				return chunkOrderError
<a id="L583"></a><span class="ln">   583</span>			}
<a id="L584"></a><span class="ln">   584</span>			d.stage = dsSeenIEND
<a id="L585"></a><span class="ln">   585</span>			return d.parseIEND(length)
<a id="L586"></a><span class="ln">   586</span>		}
<a id="L587"></a><span class="ln">   587</span>		<span class="comment">// Ignore this chunk (of a known length).</span>
<a id="L588"></a><span class="ln">   588</span>		var ignored [4096]byte
<a id="L589"></a><span class="ln">   589</span>		for length &gt; 0 {
<a id="L590"></a><span class="ln">   590</span>			n, err = io.ReadFull(d.r, ignored[:min(len(ignored), int(length))])
<a id="L591"></a><span class="ln">   591</span>			if err != nil {
<a id="L592"></a><span class="ln">   592</span>				return err
<a id="L593"></a><span class="ln">   593</span>			}
<a id="L594"></a><span class="ln">   594</span>			d.crc.Write(ignored[:n])
<a id="L595"></a><span class="ln">   595</span>			length -= uint32(n)
<a id="L596"></a><span class="ln">   596</span>		}
<a id="L597"></a><span class="ln">   597</span>		return d.verifyChecksum()
<a id="L598"></a><span class="ln">   598</span>	}
<a id="L599"></a><span class="ln">   599</span>	
<a id="L600"></a><span class="ln">   600</span>	func (d *decoder) verifyChecksum() error {
<a id="L601"></a><span class="ln">   601</span>		if _, err := io.ReadFull(d.r, d.tmp[:4]); err != nil {
<a id="L602"></a><span class="ln">   602</span>			return err
<a id="L603"></a><span class="ln">   603</span>		}
<a id="L604"></a><span class="ln">   604</span>		if binary.BigEndian.Uint32(d.tmp[:4]) != d.crc.Sum32() {
<a id="L605"></a><span class="ln">   605</span>			return FormatError(&#34;invalid checksum&#34;)
<a id="L606"></a><span class="ln">   606</span>		}
<a id="L607"></a><span class="ln">   607</span>		return nil
<a id="L608"></a><span class="ln">   608</span>	}
<a id="L609"></a><span class="ln">   609</span>	
<a id="L610"></a><span class="ln">   610</span>	func (d *decoder) checkHeader() error {
<a id="L611"></a><span class="ln">   611</span>		_, err := io.ReadFull(d.r, d.tmp[:len(pngHeader)])
<a id="L612"></a><span class="ln">   612</span>		if err != nil {
<a id="L613"></a><span class="ln">   613</span>			return err
<a id="L614"></a><span class="ln">   614</span>		}
<a id="L615"></a><span class="ln">   615</span>		if string(d.tmp[:len(pngHeader)]) != pngHeader {
<a id="L616"></a><span class="ln">   616</span>			return FormatError(&#34;not a PNG file&#34;)
<a id="L617"></a><span class="ln">   617</span>		}
<a id="L618"></a><span class="ln">   618</span>		return nil
<a id="L619"></a><span class="ln">   619</span>	}
<a id="L620"></a><span class="ln">   620</span>	
<a id="L621"></a><span class="ln">   621</span>	<span class="comment">// Decode reads a PNG image from r and returns it as an image.Image.</span>
<a id="L622"></a><span class="ln">   622</span>	<span class="comment">// The type of Image returned depends on the PNG contents.</span>
<a id="L623"></a><span class="ln">   623</span>	func Decode(r io.Reader) (image.Image, error) {
<a id="L624"></a><span class="ln">   624</span>		d := &amp;decoder{
<a id="L625"></a><span class="ln">   625</span>			r:   r,
<a id="L626"></a><span class="ln">   626</span>			crc: crc32.NewIEEE(),
<a id="L627"></a><span class="ln">   627</span>		}
<a id="L628"></a><span class="ln">   628</span>		if err := d.checkHeader(); err != nil {
<a id="L629"></a><span class="ln">   629</span>			if err == io.EOF {
<a id="L630"></a><span class="ln">   630</span>				err = io.ErrUnexpectedEOF
<a id="L631"></a><span class="ln">   631</span>			}
<a id="L632"></a><span class="ln">   632</span>			return nil, err
<a id="L633"></a><span class="ln">   633</span>		}
<a id="L634"></a><span class="ln">   634</span>		for d.stage != dsSeenIEND {
<a id="L635"></a><span class="ln">   635</span>			if err := d.parseChunk(); err != nil {
<a id="L636"></a><span class="ln">   636</span>				if err == io.EOF {
<a id="L637"></a><span class="ln">   637</span>					err = io.ErrUnexpectedEOF
<a id="L638"></a><span class="ln">   638</span>				}
<a id="L639"></a><span class="ln">   639</span>				return nil, err
<a id="L640"></a><span class="ln">   640</span>			}
<a id="L641"></a><span class="ln">   641</span>		}
<a id="L642"></a><span class="ln">   642</span>		return d.img, nil
<a id="L643"></a><span class="ln">   643</span>	}
<a id="L644"></a><span class="ln">   644</span>	
<a id="L645"></a><span class="ln">   645</span>	<span class="comment">// DecodeConfig returns the color model and dimensions of a PNG image without</span>
<a id="L646"></a><span class="ln">   646</span>	<span class="comment">// decoding the entire image.</span>
<a id="L647"></a><span class="ln">   647</span>	func DecodeConfig(r io.Reader) (image.Config, error) {
<a id="L648"></a><span class="ln">   648</span>		d := &amp;decoder{
<a id="L649"></a><span class="ln">   649</span>			r:   r,
<a id="L650"></a><span class="ln">   650</span>			crc: crc32.NewIEEE(),
<a id="L651"></a><span class="ln">   651</span>		}
<a id="L652"></a><span class="ln">   652</span>		if err := d.checkHeader(); err != nil {
<a id="L653"></a><span class="ln">   653</span>			if err == io.EOF {
<a id="L654"></a><span class="ln">   654</span>				err = io.ErrUnexpectedEOF
<a id="L655"></a><span class="ln">   655</span>			}
<a id="L656"></a><span class="ln">   656</span>			return image.Config{}, err
<a id="L657"></a><span class="ln">   657</span>		}
<a id="L658"></a><span class="ln">   658</span>		for {
<a id="L659"></a><span class="ln">   659</span>			if err := d.parseChunk(); err != nil {
<a id="L660"></a><span class="ln">   660</span>				if err == io.EOF {
<a id="L661"></a><span class="ln">   661</span>					err = io.ErrUnexpectedEOF
<a id="L662"></a><span class="ln">   662</span>				}
<a id="L663"></a><span class="ln">   663</span>				return image.Config{}, err
<a id="L664"></a><span class="ln">   664</span>			}
<a id="L665"></a><span class="ln">   665</span>			if d.stage == dsSeenIHDR &amp;&amp; d.cb != cbP8 {
<a id="L666"></a><span class="ln">   666</span>				break
<a id="L667"></a><span class="ln">   667</span>			}
<a id="L668"></a><span class="ln">   668</span>			if d.stage == dsSeenPLTE &amp;&amp; d.cb == cbP8 {
<a id="L669"></a><span class="ln">   669</span>				break
<a id="L670"></a><span class="ln">   670</span>			}
<a id="L671"></a><span class="ln">   671</span>		}
<a id="L672"></a><span class="ln">   672</span>		var cm color.Model
<a id="L673"></a><span class="ln">   673</span>		switch d.cb {
<a id="L674"></a><span class="ln">   674</span>		case cbG1, cbG2, cbG4, cbG8:
<a id="L675"></a><span class="ln">   675</span>			cm = color.GrayModel
<a id="L676"></a><span class="ln">   676</span>		case cbGA8:
<a id="L677"></a><span class="ln">   677</span>			cm = color.NRGBAModel
<a id="L678"></a><span class="ln">   678</span>		case cbTC8:
<a id="L679"></a><span class="ln">   679</span>			cm = color.RGBAModel
<a id="L680"></a><span class="ln">   680</span>		case cbP1, cbP2, cbP4, cbP8:
<a id="L681"></a><span class="ln">   681</span>			cm = d.palette
<a id="L682"></a><span class="ln">   682</span>		case cbTCA8:
<a id="L683"></a><span class="ln">   683</span>			cm = color.NRGBAModel
<a id="L684"></a><span class="ln">   684</span>		case cbG16:
<a id="L685"></a><span class="ln">   685</span>			cm = color.Gray16Model
<a id="L686"></a><span class="ln">   686</span>		case cbGA16:
<a id="L687"></a><span class="ln">   687</span>			cm = color.NRGBA64Model
<a id="L688"></a><span class="ln">   688</span>		case cbTC16:
<a id="L689"></a><span class="ln">   689</span>			cm = color.RGBA64Model
<a id="L690"></a><span class="ln">   690</span>		case cbTCA16:
<a id="L691"></a><span class="ln">   691</span>			cm = color.NRGBA64Model
<a id="L692"></a><span class="ln">   692</span>		}
<a id="L693"></a><span class="ln">   693</span>		return image.Config{
<a id="L694"></a><span class="ln">   694</span>			ColorModel: cm,
<a id="L695"></a><span class="ln">   695</span>			Width:      d.width,
<a id="L696"></a><span class="ln">   696</span>			Height:     d.height,
<a id="L697"></a><span class="ln">   697</span>		}, nil
<a id="L698"></a><span class="ln">   698</span>	}
<a id="L699"></a><span class="ln">   699</span>	
<a id="L700"></a><span class="ln">   700</span>	func init() {
<a id="L701"></a><span class="ln">   701</span>		image.RegisterFormat(&#34;png&#34;, pngHeader, Decode, DecodeConfig)
<a id="L702"></a><span class="ln">   702</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

