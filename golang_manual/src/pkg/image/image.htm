<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/image/image.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/image/image.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package image implements a basic 2-D image library.</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">//</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// The fundamental interface is called Image. An Image contains colors, which</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// are described in the image/color package.</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">//</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// Values of the Image interface are created either by calling functions such</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// as NewRGBA and NewPaletted, or by calling Decode on an io.Reader containing</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// image data in a format such as GIF, JPEG or PNG. Decoding any particular</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// image format requires the prior registration of a decoder function.</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// Registration is typically automatic as a side effect of initializing that</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// format&#39;s package so that, to decode a PNG image, it suffices to have</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">//	import _ &#34;image/png&#34;</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// in a program&#39;s main package. The _ means to import a package purely for its</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// initialization side effects.</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">//</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// See &#34;The Go image package&#34; for more details:</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// http://golang.org/doc/articles/image_package.html</span>
<a id="L22"></a><span class="ln">    22</span>	package image
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>	import (
<a id="L25"></a><span class="ln">    25</span>		&#34;image/color&#34;
<a id="L26"></a><span class="ln">    26</span>	)
<a id="L27"></a><span class="ln">    27</span>	
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// Config holds an image&#39;s color model and dimensions.</span>
<a id="L29"></a><span class="ln">    29</span>	type Config struct {
<a id="L30"></a><span class="ln">    30</span>		ColorModel    color.Model
<a id="L31"></a><span class="ln">    31</span>		Width, Height int
<a id="L32"></a><span class="ln">    32</span>	}
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// Image is a finite rectangular grid of color.Color values taken from a color</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// model.</span>
<a id="L36"></a><span class="ln">    36</span>	type Image interface {
<a id="L37"></a><span class="ln">    37</span>		<span class="comment">// ColorModel returns the Image&#39;s color model.</span>
<a id="L38"></a><span class="ln">    38</span>		ColorModel() color.Model
<a id="L39"></a><span class="ln">    39</span>		<span class="comment">// Bounds returns the domain for which At can return non-zero color.</span>
<a id="L40"></a><span class="ln">    40</span>		<span class="comment">// The bounds do not necessarily contain the point (0, 0).</span>
<a id="L41"></a><span class="ln">    41</span>		Bounds() Rectangle
<a id="L42"></a><span class="ln">    42</span>		<span class="comment">// At returns the color of the pixel at (x, y).</span>
<a id="L43"></a><span class="ln">    43</span>		<span class="comment">// At(Bounds().Min.X, Bounds().Min.Y) returns the upper-left pixel of the grid.</span>
<a id="L44"></a><span class="ln">    44</span>		<span class="comment">// At(Bounds().Max.X-1, Bounds().Max.Y-1) returns the lower-right one.</span>
<a id="L45"></a><span class="ln">    45</span>		At(x, y int) color.Color
<a id="L46"></a><span class="ln">    46</span>	}
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">// PalettedImage is an image whose colors may come from a limited palette.</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">// If m is a PalettedImage and m.ColorModel() returns a PalettedColorModel p,</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// then m.At(x, y) should be equivalent to p[m.ColorIndexAt(x, y)]. If m&#39;s</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// color model is not a PalettedColorModel, then ColorIndexAt&#39;s behavior is</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// undefined.</span>
<a id="L53"></a><span class="ln">    53</span>	type PalettedImage interface {
<a id="L54"></a><span class="ln">    54</span>		<span class="comment">// ColorIndexAt returns the palette index of the pixel at (x, y).</span>
<a id="L55"></a><span class="ln">    55</span>		ColorIndexAt(x, y int) uint8
<a id="L56"></a><span class="ln">    56</span>		Image
<a id="L57"></a><span class="ln">    57</span>	}
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// RGBA is an in-memory image whose At method returns color.RGBA values.</span>
<a id="L60"></a><span class="ln">    60</span>	type RGBA struct {
<a id="L61"></a><span class="ln">    61</span>		<span class="comment">// Pix holds the image&#39;s pixels, in R, G, B, A order. The pixel at</span>
<a id="L62"></a><span class="ln">    62</span>		<span class="comment">// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*4].</span>
<a id="L63"></a><span class="ln">    63</span>		Pix []uint8
<a id="L64"></a><span class="ln">    64</span>		<span class="comment">// Stride is the Pix stride (in bytes) between vertically adjacent pixels.</span>
<a id="L65"></a><span class="ln">    65</span>		Stride int
<a id="L66"></a><span class="ln">    66</span>		<span class="comment">// Rect is the image&#39;s bounds.</span>
<a id="L67"></a><span class="ln">    67</span>		Rect Rectangle
<a id="L68"></a><span class="ln">    68</span>	}
<a id="L69"></a><span class="ln">    69</span>	
<a id="L70"></a><span class="ln">    70</span>	func (p *RGBA) ColorModel() color.Model { return color.RGBAModel }
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>	func (p *RGBA) Bounds() Rectangle { return p.Rect }
<a id="L73"></a><span class="ln">    73</span>	
<a id="L74"></a><span class="ln">    74</span>	func (p *RGBA) At(x, y int) color.Color {
<a id="L75"></a><span class="ln">    75</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L76"></a><span class="ln">    76</span>			return color.RGBA{}
<a id="L77"></a><span class="ln">    77</span>		}
<a id="L78"></a><span class="ln">    78</span>		i := p.PixOffset(x, y)
<a id="L79"></a><span class="ln">    79</span>		return color.RGBA{p.Pix[i+0], p.Pix[i+1], p.Pix[i+2], p.Pix[i+3]}
<a id="L80"></a><span class="ln">    80</span>	}
<a id="L81"></a><span class="ln">    81</span>	
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">// PixOffset returns the index of the first element of Pix that corresponds to</span>
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">// the pixel at (x, y).</span>
<a id="L84"></a><span class="ln">    84</span>	func (p *RGBA) PixOffset(x, y int) int {
<a id="L85"></a><span class="ln">    85</span>		return (y-p.Rect.Min.Y)*p.Stride + (x-p.Rect.Min.X)*4
<a id="L86"></a><span class="ln">    86</span>	}
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>	func (p *RGBA) Set(x, y int, c color.Color) {
<a id="L89"></a><span class="ln">    89</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L90"></a><span class="ln">    90</span>			return
<a id="L91"></a><span class="ln">    91</span>		}
<a id="L92"></a><span class="ln">    92</span>		i := p.PixOffset(x, y)
<a id="L93"></a><span class="ln">    93</span>		c1 := color.RGBAModel.Convert(c).(color.RGBA)
<a id="L94"></a><span class="ln">    94</span>		p.Pix[i+0] = c1.R
<a id="L95"></a><span class="ln">    95</span>		p.Pix[i+1] = c1.G
<a id="L96"></a><span class="ln">    96</span>		p.Pix[i+2] = c1.B
<a id="L97"></a><span class="ln">    97</span>		p.Pix[i+3] = c1.A
<a id="L98"></a><span class="ln">    98</span>	}
<a id="L99"></a><span class="ln">    99</span>	
<a id="L100"></a><span class="ln">   100</span>	func (p *RGBA) SetRGBA(x, y int, c color.RGBA) {
<a id="L101"></a><span class="ln">   101</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L102"></a><span class="ln">   102</span>			return
<a id="L103"></a><span class="ln">   103</span>		}
<a id="L104"></a><span class="ln">   104</span>		i := p.PixOffset(x, y)
<a id="L105"></a><span class="ln">   105</span>		p.Pix[i+0] = c.R
<a id="L106"></a><span class="ln">   106</span>		p.Pix[i+1] = c.G
<a id="L107"></a><span class="ln">   107</span>		p.Pix[i+2] = c.B
<a id="L108"></a><span class="ln">   108</span>		p.Pix[i+3] = c.A
<a id="L109"></a><span class="ln">   109</span>	}
<a id="L110"></a><span class="ln">   110</span>	
<a id="L111"></a><span class="ln">   111</span>	<span class="comment">// SubImage returns an image representing the portion of the image p visible</span>
<a id="L112"></a><span class="ln">   112</span>	<span class="comment">// through r. The returned value shares pixels with the original image.</span>
<a id="L113"></a><span class="ln">   113</span>	func (p *RGBA) SubImage(r Rectangle) Image {
<a id="L114"></a><span class="ln">   114</span>		r = r.Intersect(p.Rect)
<a id="L115"></a><span class="ln">   115</span>		<span class="comment">// If r1 and r2 are Rectangles, r1.Intersect(r2) is not guaranteed to be inside</span>
<a id="L116"></a><span class="ln">   116</span>		<span class="comment">// either r1 or r2 if the intersection is empty. Without explicitly checking for</span>
<a id="L117"></a><span class="ln">   117</span>		<span class="comment">// this, the Pix[i:] expression below can panic.</span>
<a id="L118"></a><span class="ln">   118</span>		if r.Empty() {
<a id="L119"></a><span class="ln">   119</span>			return &amp;RGBA{}
<a id="L120"></a><span class="ln">   120</span>		}
<a id="L121"></a><span class="ln">   121</span>		i := p.PixOffset(r.Min.X, r.Min.Y)
<a id="L122"></a><span class="ln">   122</span>		return &amp;RGBA{
<a id="L123"></a><span class="ln">   123</span>			Pix:    p.Pix[i:],
<a id="L124"></a><span class="ln">   124</span>			Stride: p.Stride,
<a id="L125"></a><span class="ln">   125</span>			Rect:   r,
<a id="L126"></a><span class="ln">   126</span>		}
<a id="L127"></a><span class="ln">   127</span>	}
<a id="L128"></a><span class="ln">   128</span>	
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// Opaque scans the entire image and returns whether or not it is fully opaque.</span>
<a id="L130"></a><span class="ln">   130</span>	func (p *RGBA) Opaque() bool {
<a id="L131"></a><span class="ln">   131</span>		if p.Rect.Empty() {
<a id="L132"></a><span class="ln">   132</span>			return true
<a id="L133"></a><span class="ln">   133</span>		}
<a id="L134"></a><span class="ln">   134</span>		i0, i1 := 3, p.Rect.Dx()*4
<a id="L135"></a><span class="ln">   135</span>		for y := p.Rect.Min.Y; y &lt; p.Rect.Max.Y; y++ {
<a id="L136"></a><span class="ln">   136</span>			for i := i0; i &lt; i1; i += 4 {
<a id="L137"></a><span class="ln">   137</span>				if p.Pix[i] != 0xff {
<a id="L138"></a><span class="ln">   138</span>					return false
<a id="L139"></a><span class="ln">   139</span>				}
<a id="L140"></a><span class="ln">   140</span>			}
<a id="L141"></a><span class="ln">   141</span>			i0 += p.Stride
<a id="L142"></a><span class="ln">   142</span>			i1 += p.Stride
<a id="L143"></a><span class="ln">   143</span>		}
<a id="L144"></a><span class="ln">   144</span>		return true
<a id="L145"></a><span class="ln">   145</span>	}
<a id="L146"></a><span class="ln">   146</span>	
<a id="L147"></a><span class="ln">   147</span>	<span class="comment">// NewRGBA returns a new RGBA with the given bounds.</span>
<a id="L148"></a><span class="ln">   148</span>	func NewRGBA(r Rectangle) *RGBA {
<a id="L149"></a><span class="ln">   149</span>		w, h := r.Dx(), r.Dy()
<a id="L150"></a><span class="ln">   150</span>		buf := make([]uint8, 4*w*h)
<a id="L151"></a><span class="ln">   151</span>		return &amp;RGBA{buf, 4 * w, r}
<a id="L152"></a><span class="ln">   152</span>	}
<a id="L153"></a><span class="ln">   153</span>	
<a id="L154"></a><span class="ln">   154</span>	<span class="comment">// RGBA64 is an in-memory image whose At method returns color.RGBA64 values.</span>
<a id="L155"></a><span class="ln">   155</span>	type RGBA64 struct {
<a id="L156"></a><span class="ln">   156</span>		<span class="comment">// Pix holds the image&#39;s pixels, in R, G, B, A order and big-endian format. The pixel at</span>
<a id="L157"></a><span class="ln">   157</span>		<span class="comment">// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*8].</span>
<a id="L158"></a><span class="ln">   158</span>		Pix []uint8
<a id="L159"></a><span class="ln">   159</span>		<span class="comment">// Stride is the Pix stride (in bytes) between vertically adjacent pixels.</span>
<a id="L160"></a><span class="ln">   160</span>		Stride int
<a id="L161"></a><span class="ln">   161</span>		<span class="comment">// Rect is the image&#39;s bounds.</span>
<a id="L162"></a><span class="ln">   162</span>		Rect Rectangle
<a id="L163"></a><span class="ln">   163</span>	}
<a id="L164"></a><span class="ln">   164</span>	
<a id="L165"></a><span class="ln">   165</span>	func (p *RGBA64) ColorModel() color.Model { return color.RGBA64Model }
<a id="L166"></a><span class="ln">   166</span>	
<a id="L167"></a><span class="ln">   167</span>	func (p *RGBA64) Bounds() Rectangle { return p.Rect }
<a id="L168"></a><span class="ln">   168</span>	
<a id="L169"></a><span class="ln">   169</span>	func (p *RGBA64) At(x, y int) color.Color {
<a id="L170"></a><span class="ln">   170</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L171"></a><span class="ln">   171</span>			return color.RGBA64{}
<a id="L172"></a><span class="ln">   172</span>		}
<a id="L173"></a><span class="ln">   173</span>		i := p.PixOffset(x, y)
<a id="L174"></a><span class="ln">   174</span>		return color.RGBA64{
<a id="L175"></a><span class="ln">   175</span>			uint16(p.Pix[i+0])&lt;&lt;8 | uint16(p.Pix[i+1]),
<a id="L176"></a><span class="ln">   176</span>			uint16(p.Pix[i+2])&lt;&lt;8 | uint16(p.Pix[i+3]),
<a id="L177"></a><span class="ln">   177</span>			uint16(p.Pix[i+4])&lt;&lt;8 | uint16(p.Pix[i+5]),
<a id="L178"></a><span class="ln">   178</span>			uint16(p.Pix[i+6])&lt;&lt;8 | uint16(p.Pix[i+7]),
<a id="L179"></a><span class="ln">   179</span>		}
<a id="L180"></a><span class="ln">   180</span>	}
<a id="L181"></a><span class="ln">   181</span>	
<a id="L182"></a><span class="ln">   182</span>	<span class="comment">// PixOffset returns the index of the first element of Pix that corresponds to</span>
<a id="L183"></a><span class="ln">   183</span>	<span class="comment">// the pixel at (x, y).</span>
<a id="L184"></a><span class="ln">   184</span>	func (p *RGBA64) PixOffset(x, y int) int {
<a id="L185"></a><span class="ln">   185</span>		return (y-p.Rect.Min.Y)*p.Stride + (x-p.Rect.Min.X)*8
<a id="L186"></a><span class="ln">   186</span>	}
<a id="L187"></a><span class="ln">   187</span>	
<a id="L188"></a><span class="ln">   188</span>	func (p *RGBA64) Set(x, y int, c color.Color) {
<a id="L189"></a><span class="ln">   189</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L190"></a><span class="ln">   190</span>			return
<a id="L191"></a><span class="ln">   191</span>		}
<a id="L192"></a><span class="ln">   192</span>		i := p.PixOffset(x, y)
<a id="L193"></a><span class="ln">   193</span>		c1 := color.RGBA64Model.Convert(c).(color.RGBA64)
<a id="L194"></a><span class="ln">   194</span>		p.Pix[i+0] = uint8(c1.R &gt;&gt; 8)
<a id="L195"></a><span class="ln">   195</span>		p.Pix[i+1] = uint8(c1.R)
<a id="L196"></a><span class="ln">   196</span>		p.Pix[i+2] = uint8(c1.G &gt;&gt; 8)
<a id="L197"></a><span class="ln">   197</span>		p.Pix[i+3] = uint8(c1.G)
<a id="L198"></a><span class="ln">   198</span>		p.Pix[i+4] = uint8(c1.B &gt;&gt; 8)
<a id="L199"></a><span class="ln">   199</span>		p.Pix[i+5] = uint8(c1.B)
<a id="L200"></a><span class="ln">   200</span>		p.Pix[i+6] = uint8(c1.A &gt;&gt; 8)
<a id="L201"></a><span class="ln">   201</span>		p.Pix[i+7] = uint8(c1.A)
<a id="L202"></a><span class="ln">   202</span>	}
<a id="L203"></a><span class="ln">   203</span>	
<a id="L204"></a><span class="ln">   204</span>	func (p *RGBA64) SetRGBA64(x, y int, c color.RGBA64) {
<a id="L205"></a><span class="ln">   205</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L206"></a><span class="ln">   206</span>			return
<a id="L207"></a><span class="ln">   207</span>		}
<a id="L208"></a><span class="ln">   208</span>		i := p.PixOffset(x, y)
<a id="L209"></a><span class="ln">   209</span>		p.Pix[i+0] = uint8(c.R &gt;&gt; 8)
<a id="L210"></a><span class="ln">   210</span>		p.Pix[i+1] = uint8(c.R)
<a id="L211"></a><span class="ln">   211</span>		p.Pix[i+2] = uint8(c.G &gt;&gt; 8)
<a id="L212"></a><span class="ln">   212</span>		p.Pix[i+3] = uint8(c.G)
<a id="L213"></a><span class="ln">   213</span>		p.Pix[i+4] = uint8(c.B &gt;&gt; 8)
<a id="L214"></a><span class="ln">   214</span>		p.Pix[i+5] = uint8(c.B)
<a id="L215"></a><span class="ln">   215</span>		p.Pix[i+6] = uint8(c.A &gt;&gt; 8)
<a id="L216"></a><span class="ln">   216</span>		p.Pix[i+7] = uint8(c.A)
<a id="L217"></a><span class="ln">   217</span>	}
<a id="L218"></a><span class="ln">   218</span>	
<a id="L219"></a><span class="ln">   219</span>	<span class="comment">// SubImage returns an image representing the portion of the image p visible</span>
<a id="L220"></a><span class="ln">   220</span>	<span class="comment">// through r. The returned value shares pixels with the original image.</span>
<a id="L221"></a><span class="ln">   221</span>	func (p *RGBA64) SubImage(r Rectangle) Image {
<a id="L222"></a><span class="ln">   222</span>		r = r.Intersect(p.Rect)
<a id="L223"></a><span class="ln">   223</span>		<span class="comment">// If r1 and r2 are Rectangles, r1.Intersect(r2) is not guaranteed to be inside</span>
<a id="L224"></a><span class="ln">   224</span>		<span class="comment">// either r1 or r2 if the intersection is empty. Without explicitly checking for</span>
<a id="L225"></a><span class="ln">   225</span>		<span class="comment">// this, the Pix[i:] expression below can panic.</span>
<a id="L226"></a><span class="ln">   226</span>		if r.Empty() {
<a id="L227"></a><span class="ln">   227</span>			return &amp;RGBA64{}
<a id="L228"></a><span class="ln">   228</span>		}
<a id="L229"></a><span class="ln">   229</span>		i := p.PixOffset(r.Min.X, r.Min.Y)
<a id="L230"></a><span class="ln">   230</span>		return &amp;RGBA64{
<a id="L231"></a><span class="ln">   231</span>			Pix:    p.Pix[i:],
<a id="L232"></a><span class="ln">   232</span>			Stride: p.Stride,
<a id="L233"></a><span class="ln">   233</span>			Rect:   r,
<a id="L234"></a><span class="ln">   234</span>		}
<a id="L235"></a><span class="ln">   235</span>	}
<a id="L236"></a><span class="ln">   236</span>	
<a id="L237"></a><span class="ln">   237</span>	<span class="comment">// Opaque scans the entire image and returns whether or not it is fully opaque.</span>
<a id="L238"></a><span class="ln">   238</span>	func (p *RGBA64) Opaque() bool {
<a id="L239"></a><span class="ln">   239</span>		if p.Rect.Empty() {
<a id="L240"></a><span class="ln">   240</span>			return true
<a id="L241"></a><span class="ln">   241</span>		}
<a id="L242"></a><span class="ln">   242</span>		i0, i1 := 6, p.Rect.Dx()*8
<a id="L243"></a><span class="ln">   243</span>		for y := p.Rect.Min.Y; y &lt; p.Rect.Max.Y; y++ {
<a id="L244"></a><span class="ln">   244</span>			for i := i0; i &lt; i1; i += 8 {
<a id="L245"></a><span class="ln">   245</span>				if p.Pix[i+0] != 0xff || p.Pix[i+1] != 0xff {
<a id="L246"></a><span class="ln">   246</span>					return false
<a id="L247"></a><span class="ln">   247</span>				}
<a id="L248"></a><span class="ln">   248</span>			}
<a id="L249"></a><span class="ln">   249</span>			i0 += p.Stride
<a id="L250"></a><span class="ln">   250</span>			i1 += p.Stride
<a id="L251"></a><span class="ln">   251</span>		}
<a id="L252"></a><span class="ln">   252</span>		return true
<a id="L253"></a><span class="ln">   253</span>	}
<a id="L254"></a><span class="ln">   254</span>	
<a id="L255"></a><span class="ln">   255</span>	<span class="comment">// NewRGBA64 returns a new RGBA64 with the given bounds.</span>
<a id="L256"></a><span class="ln">   256</span>	func NewRGBA64(r Rectangle) *RGBA64 {
<a id="L257"></a><span class="ln">   257</span>		w, h := r.Dx(), r.Dy()
<a id="L258"></a><span class="ln">   258</span>		pix := make([]uint8, 8*w*h)
<a id="L259"></a><span class="ln">   259</span>		return &amp;RGBA64{pix, 8 * w, r}
<a id="L260"></a><span class="ln">   260</span>	}
<a id="L261"></a><span class="ln">   261</span>	
<a id="L262"></a><span class="ln">   262</span>	<span class="comment">// NRGBA is an in-memory image whose At method returns color.NRGBA values.</span>
<a id="L263"></a><span class="ln">   263</span>	type NRGBA struct {
<a id="L264"></a><span class="ln">   264</span>		<span class="comment">// Pix holds the image&#39;s pixels, in R, G, B, A order. The pixel at</span>
<a id="L265"></a><span class="ln">   265</span>		<span class="comment">// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*4].</span>
<a id="L266"></a><span class="ln">   266</span>		Pix []uint8
<a id="L267"></a><span class="ln">   267</span>		<span class="comment">// Stride is the Pix stride (in bytes) between vertically adjacent pixels.</span>
<a id="L268"></a><span class="ln">   268</span>		Stride int
<a id="L269"></a><span class="ln">   269</span>		<span class="comment">// Rect is the image&#39;s bounds.</span>
<a id="L270"></a><span class="ln">   270</span>		Rect Rectangle
<a id="L271"></a><span class="ln">   271</span>	}
<a id="L272"></a><span class="ln">   272</span>	
<a id="L273"></a><span class="ln">   273</span>	func (p *NRGBA) ColorModel() color.Model { return color.NRGBAModel }
<a id="L274"></a><span class="ln">   274</span>	
<a id="L275"></a><span class="ln">   275</span>	func (p *NRGBA) Bounds() Rectangle { return p.Rect }
<a id="L276"></a><span class="ln">   276</span>	
<a id="L277"></a><span class="ln">   277</span>	func (p *NRGBA) At(x, y int) color.Color {
<a id="L278"></a><span class="ln">   278</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L279"></a><span class="ln">   279</span>			return color.NRGBA{}
<a id="L280"></a><span class="ln">   280</span>		}
<a id="L281"></a><span class="ln">   281</span>		i := p.PixOffset(x, y)
<a id="L282"></a><span class="ln">   282</span>		return color.NRGBA{p.Pix[i+0], p.Pix[i+1], p.Pix[i+2], p.Pix[i+3]}
<a id="L283"></a><span class="ln">   283</span>	}
<a id="L284"></a><span class="ln">   284</span>	
<a id="L285"></a><span class="ln">   285</span>	<span class="comment">// PixOffset returns the index of the first element of Pix that corresponds to</span>
<a id="L286"></a><span class="ln">   286</span>	<span class="comment">// the pixel at (x, y).</span>
<a id="L287"></a><span class="ln">   287</span>	func (p *NRGBA) PixOffset(x, y int) int {
<a id="L288"></a><span class="ln">   288</span>		return (y-p.Rect.Min.Y)*p.Stride + (x-p.Rect.Min.X)*4
<a id="L289"></a><span class="ln">   289</span>	}
<a id="L290"></a><span class="ln">   290</span>	
<a id="L291"></a><span class="ln">   291</span>	func (p *NRGBA) Set(x, y int, c color.Color) {
<a id="L292"></a><span class="ln">   292</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L293"></a><span class="ln">   293</span>			return
<a id="L294"></a><span class="ln">   294</span>		}
<a id="L295"></a><span class="ln">   295</span>		i := p.PixOffset(x, y)
<a id="L296"></a><span class="ln">   296</span>		c1 := color.NRGBAModel.Convert(c).(color.NRGBA)
<a id="L297"></a><span class="ln">   297</span>		p.Pix[i+0] = c1.R
<a id="L298"></a><span class="ln">   298</span>		p.Pix[i+1] = c1.G
<a id="L299"></a><span class="ln">   299</span>		p.Pix[i+2] = c1.B
<a id="L300"></a><span class="ln">   300</span>		p.Pix[i+3] = c1.A
<a id="L301"></a><span class="ln">   301</span>	}
<a id="L302"></a><span class="ln">   302</span>	
<a id="L303"></a><span class="ln">   303</span>	func (p *NRGBA) SetNRGBA(x, y int, c color.NRGBA) {
<a id="L304"></a><span class="ln">   304</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L305"></a><span class="ln">   305</span>			return
<a id="L306"></a><span class="ln">   306</span>		}
<a id="L307"></a><span class="ln">   307</span>		i := p.PixOffset(x, y)
<a id="L308"></a><span class="ln">   308</span>		p.Pix[i+0] = c.R
<a id="L309"></a><span class="ln">   309</span>		p.Pix[i+1] = c.G
<a id="L310"></a><span class="ln">   310</span>		p.Pix[i+2] = c.B
<a id="L311"></a><span class="ln">   311</span>		p.Pix[i+3] = c.A
<a id="L312"></a><span class="ln">   312</span>	}
<a id="L313"></a><span class="ln">   313</span>	
<a id="L314"></a><span class="ln">   314</span>	<span class="comment">// SubImage returns an image representing the portion of the image p visible</span>
<a id="L315"></a><span class="ln">   315</span>	<span class="comment">// through r. The returned value shares pixels with the original image.</span>
<a id="L316"></a><span class="ln">   316</span>	func (p *NRGBA) SubImage(r Rectangle) Image {
<a id="L317"></a><span class="ln">   317</span>		r = r.Intersect(p.Rect)
<a id="L318"></a><span class="ln">   318</span>		<span class="comment">// If r1 and r2 are Rectangles, r1.Intersect(r2) is not guaranteed to be inside</span>
<a id="L319"></a><span class="ln">   319</span>		<span class="comment">// either r1 or r2 if the intersection is empty. Without explicitly checking for</span>
<a id="L320"></a><span class="ln">   320</span>		<span class="comment">// this, the Pix[i:] expression below can panic.</span>
<a id="L321"></a><span class="ln">   321</span>		if r.Empty() {
<a id="L322"></a><span class="ln">   322</span>			return &amp;NRGBA{}
<a id="L323"></a><span class="ln">   323</span>		}
<a id="L324"></a><span class="ln">   324</span>		i := p.PixOffset(r.Min.X, r.Min.Y)
<a id="L325"></a><span class="ln">   325</span>		return &amp;NRGBA{
<a id="L326"></a><span class="ln">   326</span>			Pix:    p.Pix[i:],
<a id="L327"></a><span class="ln">   327</span>			Stride: p.Stride,
<a id="L328"></a><span class="ln">   328</span>			Rect:   r,
<a id="L329"></a><span class="ln">   329</span>		}
<a id="L330"></a><span class="ln">   330</span>	}
<a id="L331"></a><span class="ln">   331</span>	
<a id="L332"></a><span class="ln">   332</span>	<span class="comment">// Opaque scans the entire image and returns whether or not it is fully opaque.</span>
<a id="L333"></a><span class="ln">   333</span>	func (p *NRGBA) Opaque() bool {
<a id="L334"></a><span class="ln">   334</span>		if p.Rect.Empty() {
<a id="L335"></a><span class="ln">   335</span>			return true
<a id="L336"></a><span class="ln">   336</span>		}
<a id="L337"></a><span class="ln">   337</span>		i0, i1 := 3, p.Rect.Dx()*4
<a id="L338"></a><span class="ln">   338</span>		for y := p.Rect.Min.Y; y &lt; p.Rect.Max.Y; y++ {
<a id="L339"></a><span class="ln">   339</span>			for i := i0; i &lt; i1; i += 4 {
<a id="L340"></a><span class="ln">   340</span>				if p.Pix[i] != 0xff {
<a id="L341"></a><span class="ln">   341</span>					return false
<a id="L342"></a><span class="ln">   342</span>				}
<a id="L343"></a><span class="ln">   343</span>			}
<a id="L344"></a><span class="ln">   344</span>			i0 += p.Stride
<a id="L345"></a><span class="ln">   345</span>			i1 += p.Stride
<a id="L346"></a><span class="ln">   346</span>		}
<a id="L347"></a><span class="ln">   347</span>		return true
<a id="L348"></a><span class="ln">   348</span>	}
<a id="L349"></a><span class="ln">   349</span>	
<a id="L350"></a><span class="ln">   350</span>	<span class="comment">// NewNRGBA returns a new NRGBA with the given bounds.</span>
<a id="L351"></a><span class="ln">   351</span>	func NewNRGBA(r Rectangle) *NRGBA {
<a id="L352"></a><span class="ln">   352</span>		w, h := r.Dx(), r.Dy()
<a id="L353"></a><span class="ln">   353</span>		pix := make([]uint8, 4*w*h)
<a id="L354"></a><span class="ln">   354</span>		return &amp;NRGBA{pix, 4 * w, r}
<a id="L355"></a><span class="ln">   355</span>	}
<a id="L356"></a><span class="ln">   356</span>	
<a id="L357"></a><span class="ln">   357</span>	<span class="comment">// NRGBA64 is an in-memory image whose At method returns color.NRGBA64 values.</span>
<a id="L358"></a><span class="ln">   358</span>	type NRGBA64 struct {
<a id="L359"></a><span class="ln">   359</span>		<span class="comment">// Pix holds the image&#39;s pixels, in R, G, B, A order and big-endian format. The pixel at</span>
<a id="L360"></a><span class="ln">   360</span>		<span class="comment">// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*8].</span>
<a id="L361"></a><span class="ln">   361</span>		Pix []uint8
<a id="L362"></a><span class="ln">   362</span>		<span class="comment">// Stride is the Pix stride (in bytes) between vertically adjacent pixels.</span>
<a id="L363"></a><span class="ln">   363</span>		Stride int
<a id="L364"></a><span class="ln">   364</span>		<span class="comment">// Rect is the image&#39;s bounds.</span>
<a id="L365"></a><span class="ln">   365</span>		Rect Rectangle
<a id="L366"></a><span class="ln">   366</span>	}
<a id="L367"></a><span class="ln">   367</span>	
<a id="L368"></a><span class="ln">   368</span>	func (p *NRGBA64) ColorModel() color.Model { return color.NRGBA64Model }
<a id="L369"></a><span class="ln">   369</span>	
<a id="L370"></a><span class="ln">   370</span>	func (p *NRGBA64) Bounds() Rectangle { return p.Rect }
<a id="L371"></a><span class="ln">   371</span>	
<a id="L372"></a><span class="ln">   372</span>	func (p *NRGBA64) At(x, y int) color.Color {
<a id="L373"></a><span class="ln">   373</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L374"></a><span class="ln">   374</span>			return color.NRGBA64{}
<a id="L375"></a><span class="ln">   375</span>		}
<a id="L376"></a><span class="ln">   376</span>		i := p.PixOffset(x, y)
<a id="L377"></a><span class="ln">   377</span>		return color.NRGBA64{
<a id="L378"></a><span class="ln">   378</span>			uint16(p.Pix[i+0])&lt;&lt;8 | uint16(p.Pix[i+1]),
<a id="L379"></a><span class="ln">   379</span>			uint16(p.Pix[i+2])&lt;&lt;8 | uint16(p.Pix[i+3]),
<a id="L380"></a><span class="ln">   380</span>			uint16(p.Pix[i+4])&lt;&lt;8 | uint16(p.Pix[i+5]),
<a id="L381"></a><span class="ln">   381</span>			uint16(p.Pix[i+6])&lt;&lt;8 | uint16(p.Pix[i+7]),
<a id="L382"></a><span class="ln">   382</span>		}
<a id="L383"></a><span class="ln">   383</span>	}
<a id="L384"></a><span class="ln">   384</span>	
<a id="L385"></a><span class="ln">   385</span>	<span class="comment">// PixOffset returns the index of the first element of Pix that corresponds to</span>
<a id="L386"></a><span class="ln">   386</span>	<span class="comment">// the pixel at (x, y).</span>
<a id="L387"></a><span class="ln">   387</span>	func (p *NRGBA64) PixOffset(x, y int) int {
<a id="L388"></a><span class="ln">   388</span>		return (y-p.Rect.Min.Y)*p.Stride + (x-p.Rect.Min.X)*8
<a id="L389"></a><span class="ln">   389</span>	}
<a id="L390"></a><span class="ln">   390</span>	
<a id="L391"></a><span class="ln">   391</span>	func (p *NRGBA64) Set(x, y int, c color.Color) {
<a id="L392"></a><span class="ln">   392</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L393"></a><span class="ln">   393</span>			return
<a id="L394"></a><span class="ln">   394</span>		}
<a id="L395"></a><span class="ln">   395</span>		i := p.PixOffset(x, y)
<a id="L396"></a><span class="ln">   396</span>		c1 := color.NRGBA64Model.Convert(c).(color.NRGBA64)
<a id="L397"></a><span class="ln">   397</span>		p.Pix[i+0] = uint8(c1.R &gt;&gt; 8)
<a id="L398"></a><span class="ln">   398</span>		p.Pix[i+1] = uint8(c1.R)
<a id="L399"></a><span class="ln">   399</span>		p.Pix[i+2] = uint8(c1.G &gt;&gt; 8)
<a id="L400"></a><span class="ln">   400</span>		p.Pix[i+3] = uint8(c1.G)
<a id="L401"></a><span class="ln">   401</span>		p.Pix[i+4] = uint8(c1.B &gt;&gt; 8)
<a id="L402"></a><span class="ln">   402</span>		p.Pix[i+5] = uint8(c1.B)
<a id="L403"></a><span class="ln">   403</span>		p.Pix[i+6] = uint8(c1.A &gt;&gt; 8)
<a id="L404"></a><span class="ln">   404</span>		p.Pix[i+7] = uint8(c1.A)
<a id="L405"></a><span class="ln">   405</span>	}
<a id="L406"></a><span class="ln">   406</span>	
<a id="L407"></a><span class="ln">   407</span>	func (p *NRGBA64) SetNRGBA64(x, y int, c color.NRGBA64) {
<a id="L408"></a><span class="ln">   408</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L409"></a><span class="ln">   409</span>			return
<a id="L410"></a><span class="ln">   410</span>		}
<a id="L411"></a><span class="ln">   411</span>		i := p.PixOffset(x, y)
<a id="L412"></a><span class="ln">   412</span>		p.Pix[i+0] = uint8(c.R &gt;&gt; 8)
<a id="L413"></a><span class="ln">   413</span>		p.Pix[i+1] = uint8(c.R)
<a id="L414"></a><span class="ln">   414</span>		p.Pix[i+2] = uint8(c.G &gt;&gt; 8)
<a id="L415"></a><span class="ln">   415</span>		p.Pix[i+3] = uint8(c.G)
<a id="L416"></a><span class="ln">   416</span>		p.Pix[i+4] = uint8(c.B &gt;&gt; 8)
<a id="L417"></a><span class="ln">   417</span>		p.Pix[i+5] = uint8(c.B)
<a id="L418"></a><span class="ln">   418</span>		p.Pix[i+6] = uint8(c.A &gt;&gt; 8)
<a id="L419"></a><span class="ln">   419</span>		p.Pix[i+7] = uint8(c.A)
<a id="L420"></a><span class="ln">   420</span>	}
<a id="L421"></a><span class="ln">   421</span>	
<a id="L422"></a><span class="ln">   422</span>	<span class="comment">// SubImage returns an image representing the portion of the image p visible</span>
<a id="L423"></a><span class="ln">   423</span>	<span class="comment">// through r. The returned value shares pixels with the original image.</span>
<a id="L424"></a><span class="ln">   424</span>	func (p *NRGBA64) SubImage(r Rectangle) Image {
<a id="L425"></a><span class="ln">   425</span>		r = r.Intersect(p.Rect)
<a id="L426"></a><span class="ln">   426</span>		<span class="comment">// If r1 and r2 are Rectangles, r1.Intersect(r2) is not guaranteed to be inside</span>
<a id="L427"></a><span class="ln">   427</span>		<span class="comment">// either r1 or r2 if the intersection is empty. Without explicitly checking for</span>
<a id="L428"></a><span class="ln">   428</span>		<span class="comment">// this, the Pix[i:] expression below can panic.</span>
<a id="L429"></a><span class="ln">   429</span>		if r.Empty() {
<a id="L430"></a><span class="ln">   430</span>			return &amp;NRGBA64{}
<a id="L431"></a><span class="ln">   431</span>		}
<a id="L432"></a><span class="ln">   432</span>		i := p.PixOffset(r.Min.X, r.Min.Y)
<a id="L433"></a><span class="ln">   433</span>		return &amp;NRGBA64{
<a id="L434"></a><span class="ln">   434</span>			Pix:    p.Pix[i:],
<a id="L435"></a><span class="ln">   435</span>			Stride: p.Stride,
<a id="L436"></a><span class="ln">   436</span>			Rect:   r,
<a id="L437"></a><span class="ln">   437</span>		}
<a id="L438"></a><span class="ln">   438</span>	}
<a id="L439"></a><span class="ln">   439</span>	
<a id="L440"></a><span class="ln">   440</span>	<span class="comment">// Opaque scans the entire image and returns whether or not it is fully opaque.</span>
<a id="L441"></a><span class="ln">   441</span>	func (p *NRGBA64) Opaque() bool {
<a id="L442"></a><span class="ln">   442</span>		if p.Rect.Empty() {
<a id="L443"></a><span class="ln">   443</span>			return true
<a id="L444"></a><span class="ln">   444</span>		}
<a id="L445"></a><span class="ln">   445</span>		i0, i1 := 6, p.Rect.Dx()*8
<a id="L446"></a><span class="ln">   446</span>		for y := p.Rect.Min.Y; y &lt; p.Rect.Max.Y; y++ {
<a id="L447"></a><span class="ln">   447</span>			for i := i0; i &lt; i1; i += 8 {
<a id="L448"></a><span class="ln">   448</span>				if p.Pix[i+0] != 0xff || p.Pix[i+1] != 0xff {
<a id="L449"></a><span class="ln">   449</span>					return false
<a id="L450"></a><span class="ln">   450</span>				}
<a id="L451"></a><span class="ln">   451</span>			}
<a id="L452"></a><span class="ln">   452</span>			i0 += p.Stride
<a id="L453"></a><span class="ln">   453</span>			i1 += p.Stride
<a id="L454"></a><span class="ln">   454</span>		}
<a id="L455"></a><span class="ln">   455</span>		return true
<a id="L456"></a><span class="ln">   456</span>	}
<a id="L457"></a><span class="ln">   457</span>	
<a id="L458"></a><span class="ln">   458</span>	<span class="comment">// NewNRGBA64 returns a new NRGBA64 with the given bounds.</span>
<a id="L459"></a><span class="ln">   459</span>	func NewNRGBA64(r Rectangle) *NRGBA64 {
<a id="L460"></a><span class="ln">   460</span>		w, h := r.Dx(), r.Dy()
<a id="L461"></a><span class="ln">   461</span>		pix := make([]uint8, 8*w*h)
<a id="L462"></a><span class="ln">   462</span>		return &amp;NRGBA64{pix, 8 * w, r}
<a id="L463"></a><span class="ln">   463</span>	}
<a id="L464"></a><span class="ln">   464</span>	
<a id="L465"></a><span class="ln">   465</span>	<span class="comment">// Alpha is an in-memory image whose At method returns color.Alpha values.</span>
<a id="L466"></a><span class="ln">   466</span>	type Alpha struct {
<a id="L467"></a><span class="ln">   467</span>		<span class="comment">// Pix holds the image&#39;s pixels, as alpha values. The pixel at</span>
<a id="L468"></a><span class="ln">   468</span>		<span class="comment">// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*1].</span>
<a id="L469"></a><span class="ln">   469</span>		Pix []uint8
<a id="L470"></a><span class="ln">   470</span>		<span class="comment">// Stride is the Pix stride (in bytes) between vertically adjacent pixels.</span>
<a id="L471"></a><span class="ln">   471</span>		Stride int
<a id="L472"></a><span class="ln">   472</span>		<span class="comment">// Rect is the image&#39;s bounds.</span>
<a id="L473"></a><span class="ln">   473</span>		Rect Rectangle
<a id="L474"></a><span class="ln">   474</span>	}
<a id="L475"></a><span class="ln">   475</span>	
<a id="L476"></a><span class="ln">   476</span>	func (p *Alpha) ColorModel() color.Model { return color.AlphaModel }
<a id="L477"></a><span class="ln">   477</span>	
<a id="L478"></a><span class="ln">   478</span>	func (p *Alpha) Bounds() Rectangle { return p.Rect }
<a id="L479"></a><span class="ln">   479</span>	
<a id="L480"></a><span class="ln">   480</span>	func (p *Alpha) At(x, y int) color.Color {
<a id="L481"></a><span class="ln">   481</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L482"></a><span class="ln">   482</span>			return color.Alpha{}
<a id="L483"></a><span class="ln">   483</span>		}
<a id="L484"></a><span class="ln">   484</span>		i := p.PixOffset(x, y)
<a id="L485"></a><span class="ln">   485</span>		return color.Alpha{p.Pix[i]}
<a id="L486"></a><span class="ln">   486</span>	}
<a id="L487"></a><span class="ln">   487</span>	
<a id="L488"></a><span class="ln">   488</span>	<span class="comment">// PixOffset returns the index of the first element of Pix that corresponds to</span>
<a id="L489"></a><span class="ln">   489</span>	<span class="comment">// the pixel at (x, y).</span>
<a id="L490"></a><span class="ln">   490</span>	func (p *Alpha) PixOffset(x, y int) int {
<a id="L491"></a><span class="ln">   491</span>		return (y-p.Rect.Min.Y)*p.Stride + (x-p.Rect.Min.X)*1
<a id="L492"></a><span class="ln">   492</span>	}
<a id="L493"></a><span class="ln">   493</span>	
<a id="L494"></a><span class="ln">   494</span>	func (p *Alpha) Set(x, y int, c color.Color) {
<a id="L495"></a><span class="ln">   495</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L496"></a><span class="ln">   496</span>			return
<a id="L497"></a><span class="ln">   497</span>		}
<a id="L498"></a><span class="ln">   498</span>		i := p.PixOffset(x, y)
<a id="L499"></a><span class="ln">   499</span>		p.Pix[i] = color.AlphaModel.Convert(c).(color.Alpha).A
<a id="L500"></a><span class="ln">   500</span>	}
<a id="L501"></a><span class="ln">   501</span>	
<a id="L502"></a><span class="ln">   502</span>	func (p *Alpha) SetAlpha(x, y int, c color.Alpha) {
<a id="L503"></a><span class="ln">   503</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L504"></a><span class="ln">   504</span>			return
<a id="L505"></a><span class="ln">   505</span>		}
<a id="L506"></a><span class="ln">   506</span>		i := p.PixOffset(x, y)
<a id="L507"></a><span class="ln">   507</span>		p.Pix[i] = c.A
<a id="L508"></a><span class="ln">   508</span>	}
<a id="L509"></a><span class="ln">   509</span>	
<a id="L510"></a><span class="ln">   510</span>	<span class="comment">// SubImage returns an image representing the portion of the image p visible</span>
<a id="L511"></a><span class="ln">   511</span>	<span class="comment">// through r. The returned value shares pixels with the original image.</span>
<a id="L512"></a><span class="ln">   512</span>	func (p *Alpha) SubImage(r Rectangle) Image {
<a id="L513"></a><span class="ln">   513</span>		r = r.Intersect(p.Rect)
<a id="L514"></a><span class="ln">   514</span>		<span class="comment">// If r1 and r2 are Rectangles, r1.Intersect(r2) is not guaranteed to be inside</span>
<a id="L515"></a><span class="ln">   515</span>		<span class="comment">// either r1 or r2 if the intersection is empty. Without explicitly checking for</span>
<a id="L516"></a><span class="ln">   516</span>		<span class="comment">// this, the Pix[i:] expression below can panic.</span>
<a id="L517"></a><span class="ln">   517</span>		if r.Empty() {
<a id="L518"></a><span class="ln">   518</span>			return &amp;Alpha{}
<a id="L519"></a><span class="ln">   519</span>		}
<a id="L520"></a><span class="ln">   520</span>		i := p.PixOffset(r.Min.X, r.Min.Y)
<a id="L521"></a><span class="ln">   521</span>		return &amp;Alpha{
<a id="L522"></a><span class="ln">   522</span>			Pix:    p.Pix[i:],
<a id="L523"></a><span class="ln">   523</span>			Stride: p.Stride,
<a id="L524"></a><span class="ln">   524</span>			Rect:   r,
<a id="L525"></a><span class="ln">   525</span>		}
<a id="L526"></a><span class="ln">   526</span>	}
<a id="L527"></a><span class="ln">   527</span>	
<a id="L528"></a><span class="ln">   528</span>	<span class="comment">// Opaque scans the entire image and returns whether or not it is fully opaque.</span>
<a id="L529"></a><span class="ln">   529</span>	func (p *Alpha) Opaque() bool {
<a id="L530"></a><span class="ln">   530</span>		if p.Rect.Empty() {
<a id="L531"></a><span class="ln">   531</span>			return true
<a id="L532"></a><span class="ln">   532</span>		}
<a id="L533"></a><span class="ln">   533</span>		i0, i1 := 0, p.Rect.Dx()
<a id="L534"></a><span class="ln">   534</span>		for y := p.Rect.Min.Y; y &lt; p.Rect.Max.Y; y++ {
<a id="L535"></a><span class="ln">   535</span>			for i := i0; i &lt; i1; i++ {
<a id="L536"></a><span class="ln">   536</span>				if p.Pix[i] != 0xff {
<a id="L537"></a><span class="ln">   537</span>					return false
<a id="L538"></a><span class="ln">   538</span>				}
<a id="L539"></a><span class="ln">   539</span>			}
<a id="L540"></a><span class="ln">   540</span>			i0 += p.Stride
<a id="L541"></a><span class="ln">   541</span>			i1 += p.Stride
<a id="L542"></a><span class="ln">   542</span>		}
<a id="L543"></a><span class="ln">   543</span>		return true
<a id="L544"></a><span class="ln">   544</span>	}
<a id="L545"></a><span class="ln">   545</span>	
<a id="L546"></a><span class="ln">   546</span>	<span class="comment">// NewAlpha returns a new Alpha with the given bounds.</span>
<a id="L547"></a><span class="ln">   547</span>	func NewAlpha(r Rectangle) *Alpha {
<a id="L548"></a><span class="ln">   548</span>		w, h := r.Dx(), r.Dy()
<a id="L549"></a><span class="ln">   549</span>		pix := make([]uint8, 1*w*h)
<a id="L550"></a><span class="ln">   550</span>		return &amp;Alpha{pix, 1 * w, r}
<a id="L551"></a><span class="ln">   551</span>	}
<a id="L552"></a><span class="ln">   552</span>	
<a id="L553"></a><span class="ln">   553</span>	<span class="comment">// Alpha16 is an in-memory image whose At method returns color.Alpha64 values.</span>
<a id="L554"></a><span class="ln">   554</span>	type Alpha16 struct {
<a id="L555"></a><span class="ln">   555</span>		<span class="comment">// Pix holds the image&#39;s pixels, as alpha values in big-endian format. The pixel at</span>
<a id="L556"></a><span class="ln">   556</span>		<span class="comment">// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*2].</span>
<a id="L557"></a><span class="ln">   557</span>		Pix []uint8
<a id="L558"></a><span class="ln">   558</span>		<span class="comment">// Stride is the Pix stride (in bytes) between vertically adjacent pixels.</span>
<a id="L559"></a><span class="ln">   559</span>		Stride int
<a id="L560"></a><span class="ln">   560</span>		<span class="comment">// Rect is the image&#39;s bounds.</span>
<a id="L561"></a><span class="ln">   561</span>		Rect Rectangle
<a id="L562"></a><span class="ln">   562</span>	}
<a id="L563"></a><span class="ln">   563</span>	
<a id="L564"></a><span class="ln">   564</span>	func (p *Alpha16) ColorModel() color.Model { return color.Alpha16Model }
<a id="L565"></a><span class="ln">   565</span>	
<a id="L566"></a><span class="ln">   566</span>	func (p *Alpha16) Bounds() Rectangle { return p.Rect }
<a id="L567"></a><span class="ln">   567</span>	
<a id="L568"></a><span class="ln">   568</span>	func (p *Alpha16) At(x, y int) color.Color {
<a id="L569"></a><span class="ln">   569</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L570"></a><span class="ln">   570</span>			return color.Alpha16{}
<a id="L571"></a><span class="ln">   571</span>		}
<a id="L572"></a><span class="ln">   572</span>		i := p.PixOffset(x, y)
<a id="L573"></a><span class="ln">   573</span>		return color.Alpha16{uint16(p.Pix[i+0])&lt;&lt;8 | uint16(p.Pix[i+1])}
<a id="L574"></a><span class="ln">   574</span>	}
<a id="L575"></a><span class="ln">   575</span>	
<a id="L576"></a><span class="ln">   576</span>	<span class="comment">// PixOffset returns the index of the first element of Pix that corresponds to</span>
<a id="L577"></a><span class="ln">   577</span>	<span class="comment">// the pixel at (x, y).</span>
<a id="L578"></a><span class="ln">   578</span>	func (p *Alpha16) PixOffset(x, y int) int {
<a id="L579"></a><span class="ln">   579</span>		return (y-p.Rect.Min.Y)*p.Stride + (x-p.Rect.Min.X)*2
<a id="L580"></a><span class="ln">   580</span>	}
<a id="L581"></a><span class="ln">   581</span>	
<a id="L582"></a><span class="ln">   582</span>	func (p *Alpha16) Set(x, y int, c color.Color) {
<a id="L583"></a><span class="ln">   583</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L584"></a><span class="ln">   584</span>			return
<a id="L585"></a><span class="ln">   585</span>		}
<a id="L586"></a><span class="ln">   586</span>		i := p.PixOffset(x, y)
<a id="L587"></a><span class="ln">   587</span>		c1 := color.Alpha16Model.Convert(c).(color.Alpha16)
<a id="L588"></a><span class="ln">   588</span>		p.Pix[i+0] = uint8(c1.A &gt;&gt; 8)
<a id="L589"></a><span class="ln">   589</span>		p.Pix[i+1] = uint8(c1.A)
<a id="L590"></a><span class="ln">   590</span>	}
<a id="L591"></a><span class="ln">   591</span>	
<a id="L592"></a><span class="ln">   592</span>	func (p *Alpha16) SetAlpha16(x, y int, c color.Alpha16) {
<a id="L593"></a><span class="ln">   593</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L594"></a><span class="ln">   594</span>			return
<a id="L595"></a><span class="ln">   595</span>		}
<a id="L596"></a><span class="ln">   596</span>		i := p.PixOffset(x, y)
<a id="L597"></a><span class="ln">   597</span>		p.Pix[i+0] = uint8(c.A &gt;&gt; 8)
<a id="L598"></a><span class="ln">   598</span>		p.Pix[i+1] = uint8(c.A)
<a id="L599"></a><span class="ln">   599</span>	}
<a id="L600"></a><span class="ln">   600</span>	
<a id="L601"></a><span class="ln">   601</span>	<span class="comment">// SubImage returns an image representing the portion of the image p visible</span>
<a id="L602"></a><span class="ln">   602</span>	<span class="comment">// through r. The returned value shares pixels with the original image.</span>
<a id="L603"></a><span class="ln">   603</span>	func (p *Alpha16) SubImage(r Rectangle) Image {
<a id="L604"></a><span class="ln">   604</span>		r = r.Intersect(p.Rect)
<a id="L605"></a><span class="ln">   605</span>		<span class="comment">// If r1 and r2 are Rectangles, r1.Intersect(r2) is not guaranteed to be inside</span>
<a id="L606"></a><span class="ln">   606</span>		<span class="comment">// either r1 or r2 if the intersection is empty. Without explicitly checking for</span>
<a id="L607"></a><span class="ln">   607</span>		<span class="comment">// this, the Pix[i:] expression below can panic.</span>
<a id="L608"></a><span class="ln">   608</span>		if r.Empty() {
<a id="L609"></a><span class="ln">   609</span>			return &amp;Alpha16{}
<a id="L610"></a><span class="ln">   610</span>		}
<a id="L611"></a><span class="ln">   611</span>		i := p.PixOffset(r.Min.X, r.Min.Y)
<a id="L612"></a><span class="ln">   612</span>		return &amp;Alpha16{
<a id="L613"></a><span class="ln">   613</span>			Pix:    p.Pix[i:],
<a id="L614"></a><span class="ln">   614</span>			Stride: p.Stride,
<a id="L615"></a><span class="ln">   615</span>			Rect:   r,
<a id="L616"></a><span class="ln">   616</span>		}
<a id="L617"></a><span class="ln">   617</span>	}
<a id="L618"></a><span class="ln">   618</span>	
<a id="L619"></a><span class="ln">   619</span>	<span class="comment">// Opaque scans the entire image and returns whether or not it is fully opaque.</span>
<a id="L620"></a><span class="ln">   620</span>	func (p *Alpha16) Opaque() bool {
<a id="L621"></a><span class="ln">   621</span>		if p.Rect.Empty() {
<a id="L622"></a><span class="ln">   622</span>			return true
<a id="L623"></a><span class="ln">   623</span>		}
<a id="L624"></a><span class="ln">   624</span>		i0, i1 := 0, p.Rect.Dx()*2
<a id="L625"></a><span class="ln">   625</span>		for y := p.Rect.Min.Y; y &lt; p.Rect.Max.Y; y++ {
<a id="L626"></a><span class="ln">   626</span>			for i := i0; i &lt; i1; i += 2 {
<a id="L627"></a><span class="ln">   627</span>				if p.Pix[i+0] != 0xff || p.Pix[i+1] != 0xff {
<a id="L628"></a><span class="ln">   628</span>					return false
<a id="L629"></a><span class="ln">   629</span>				}
<a id="L630"></a><span class="ln">   630</span>			}
<a id="L631"></a><span class="ln">   631</span>			i0 += p.Stride
<a id="L632"></a><span class="ln">   632</span>			i1 += p.Stride
<a id="L633"></a><span class="ln">   633</span>		}
<a id="L634"></a><span class="ln">   634</span>		return true
<a id="L635"></a><span class="ln">   635</span>	}
<a id="L636"></a><span class="ln">   636</span>	
<a id="L637"></a><span class="ln">   637</span>	<span class="comment">// NewAlpha16 returns a new Alpha16 with the given bounds.</span>
<a id="L638"></a><span class="ln">   638</span>	func NewAlpha16(r Rectangle) *Alpha16 {
<a id="L639"></a><span class="ln">   639</span>		w, h := r.Dx(), r.Dy()
<a id="L640"></a><span class="ln">   640</span>		pix := make([]uint8, 2*w*h)
<a id="L641"></a><span class="ln">   641</span>		return &amp;Alpha16{pix, 2 * w, r}
<a id="L642"></a><span class="ln">   642</span>	}
<a id="L643"></a><span class="ln">   643</span>	
<a id="L644"></a><span class="ln">   644</span>	<span class="comment">// Gray is an in-memory image whose At method returns color.Gray values.</span>
<a id="L645"></a><span class="ln">   645</span>	type Gray struct {
<a id="L646"></a><span class="ln">   646</span>		<span class="comment">// Pix holds the image&#39;s pixels, as gray values. The pixel at</span>
<a id="L647"></a><span class="ln">   647</span>		<span class="comment">// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*1].</span>
<a id="L648"></a><span class="ln">   648</span>		Pix []uint8
<a id="L649"></a><span class="ln">   649</span>		<span class="comment">// Stride is the Pix stride (in bytes) between vertically adjacent pixels.</span>
<a id="L650"></a><span class="ln">   650</span>		Stride int
<a id="L651"></a><span class="ln">   651</span>		<span class="comment">// Rect is the image&#39;s bounds.</span>
<a id="L652"></a><span class="ln">   652</span>		Rect Rectangle
<a id="L653"></a><span class="ln">   653</span>	}
<a id="L654"></a><span class="ln">   654</span>	
<a id="L655"></a><span class="ln">   655</span>	func (p *Gray) ColorModel() color.Model { return color.GrayModel }
<a id="L656"></a><span class="ln">   656</span>	
<a id="L657"></a><span class="ln">   657</span>	func (p *Gray) Bounds() Rectangle { return p.Rect }
<a id="L658"></a><span class="ln">   658</span>	
<a id="L659"></a><span class="ln">   659</span>	func (p *Gray) At(x, y int) color.Color {
<a id="L660"></a><span class="ln">   660</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L661"></a><span class="ln">   661</span>			return color.Gray{}
<a id="L662"></a><span class="ln">   662</span>		}
<a id="L663"></a><span class="ln">   663</span>		i := p.PixOffset(x, y)
<a id="L664"></a><span class="ln">   664</span>		return color.Gray{p.Pix[i]}
<a id="L665"></a><span class="ln">   665</span>	}
<a id="L666"></a><span class="ln">   666</span>	
<a id="L667"></a><span class="ln">   667</span>	<span class="comment">// PixOffset returns the index of the first element of Pix that corresponds to</span>
<a id="L668"></a><span class="ln">   668</span>	<span class="comment">// the pixel at (x, y).</span>
<a id="L669"></a><span class="ln">   669</span>	func (p *Gray) PixOffset(x, y int) int {
<a id="L670"></a><span class="ln">   670</span>		return (y-p.Rect.Min.Y)*p.Stride + (x-p.Rect.Min.X)*1
<a id="L671"></a><span class="ln">   671</span>	}
<a id="L672"></a><span class="ln">   672</span>	
<a id="L673"></a><span class="ln">   673</span>	func (p *Gray) Set(x, y int, c color.Color) {
<a id="L674"></a><span class="ln">   674</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L675"></a><span class="ln">   675</span>			return
<a id="L676"></a><span class="ln">   676</span>		}
<a id="L677"></a><span class="ln">   677</span>		i := p.PixOffset(x, y)
<a id="L678"></a><span class="ln">   678</span>		p.Pix[i] = color.GrayModel.Convert(c).(color.Gray).Y
<a id="L679"></a><span class="ln">   679</span>	}
<a id="L680"></a><span class="ln">   680</span>	
<a id="L681"></a><span class="ln">   681</span>	func (p *Gray) SetGray(x, y int, c color.Gray) {
<a id="L682"></a><span class="ln">   682</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L683"></a><span class="ln">   683</span>			return
<a id="L684"></a><span class="ln">   684</span>		}
<a id="L685"></a><span class="ln">   685</span>		i := p.PixOffset(x, y)
<a id="L686"></a><span class="ln">   686</span>		p.Pix[i] = c.Y
<a id="L687"></a><span class="ln">   687</span>	}
<a id="L688"></a><span class="ln">   688</span>	
<a id="L689"></a><span class="ln">   689</span>	<span class="comment">// SubImage returns an image representing the portion of the image p visible</span>
<a id="L690"></a><span class="ln">   690</span>	<span class="comment">// through r. The returned value shares pixels with the original image.</span>
<a id="L691"></a><span class="ln">   691</span>	func (p *Gray) SubImage(r Rectangle) Image {
<a id="L692"></a><span class="ln">   692</span>		r = r.Intersect(p.Rect)
<a id="L693"></a><span class="ln">   693</span>		<span class="comment">// If r1 and r2 are Rectangles, r1.Intersect(r2) is not guaranteed to be inside</span>
<a id="L694"></a><span class="ln">   694</span>		<span class="comment">// either r1 or r2 if the intersection is empty. Without explicitly checking for</span>
<a id="L695"></a><span class="ln">   695</span>		<span class="comment">// this, the Pix[i:] expression below can panic.</span>
<a id="L696"></a><span class="ln">   696</span>		if r.Empty() {
<a id="L697"></a><span class="ln">   697</span>			return &amp;Gray{}
<a id="L698"></a><span class="ln">   698</span>		}
<a id="L699"></a><span class="ln">   699</span>		i := p.PixOffset(r.Min.X, r.Min.Y)
<a id="L700"></a><span class="ln">   700</span>		return &amp;Gray{
<a id="L701"></a><span class="ln">   701</span>			Pix:    p.Pix[i:],
<a id="L702"></a><span class="ln">   702</span>			Stride: p.Stride,
<a id="L703"></a><span class="ln">   703</span>			Rect:   r,
<a id="L704"></a><span class="ln">   704</span>		}
<a id="L705"></a><span class="ln">   705</span>	}
<a id="L706"></a><span class="ln">   706</span>	
<a id="L707"></a><span class="ln">   707</span>	<span class="comment">// Opaque scans the entire image and returns whether or not it is fully opaque.</span>
<a id="L708"></a><span class="ln">   708</span>	func (p *Gray) Opaque() bool {
<a id="L709"></a><span class="ln">   709</span>		return true
<a id="L710"></a><span class="ln">   710</span>	}
<a id="L711"></a><span class="ln">   711</span>	
<a id="L712"></a><span class="ln">   712</span>	<span class="comment">// NewGray returns a new Gray with the given bounds.</span>
<a id="L713"></a><span class="ln">   713</span>	func NewGray(r Rectangle) *Gray {
<a id="L714"></a><span class="ln">   714</span>		w, h := r.Dx(), r.Dy()
<a id="L715"></a><span class="ln">   715</span>		pix := make([]uint8, 1*w*h)
<a id="L716"></a><span class="ln">   716</span>		return &amp;Gray{pix, 1 * w, r}
<a id="L717"></a><span class="ln">   717</span>	}
<a id="L718"></a><span class="ln">   718</span>	
<a id="L719"></a><span class="ln">   719</span>	<span class="comment">// Gray16 is an in-memory image whose At method returns color.Gray16 values.</span>
<a id="L720"></a><span class="ln">   720</span>	type Gray16 struct {
<a id="L721"></a><span class="ln">   721</span>		<span class="comment">// Pix holds the image&#39;s pixels, as gray values in big-endian format. The pixel at</span>
<a id="L722"></a><span class="ln">   722</span>		<span class="comment">// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*2].</span>
<a id="L723"></a><span class="ln">   723</span>		Pix []uint8
<a id="L724"></a><span class="ln">   724</span>		<span class="comment">// Stride is the Pix stride (in bytes) between vertically adjacent pixels.</span>
<a id="L725"></a><span class="ln">   725</span>		Stride int
<a id="L726"></a><span class="ln">   726</span>		<span class="comment">// Rect is the image&#39;s bounds.</span>
<a id="L727"></a><span class="ln">   727</span>		Rect Rectangle
<a id="L728"></a><span class="ln">   728</span>	}
<a id="L729"></a><span class="ln">   729</span>	
<a id="L730"></a><span class="ln">   730</span>	func (p *Gray16) ColorModel() color.Model { return color.Gray16Model }
<a id="L731"></a><span class="ln">   731</span>	
<a id="L732"></a><span class="ln">   732</span>	func (p *Gray16) Bounds() Rectangle { return p.Rect }
<a id="L733"></a><span class="ln">   733</span>	
<a id="L734"></a><span class="ln">   734</span>	func (p *Gray16) At(x, y int) color.Color {
<a id="L735"></a><span class="ln">   735</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L736"></a><span class="ln">   736</span>			return color.Gray16{}
<a id="L737"></a><span class="ln">   737</span>		}
<a id="L738"></a><span class="ln">   738</span>		i := p.PixOffset(x, y)
<a id="L739"></a><span class="ln">   739</span>		return color.Gray16{uint16(p.Pix[i+0])&lt;&lt;8 | uint16(p.Pix[i+1])}
<a id="L740"></a><span class="ln">   740</span>	}
<a id="L741"></a><span class="ln">   741</span>	
<a id="L742"></a><span class="ln">   742</span>	<span class="comment">// PixOffset returns the index of the first element of Pix that corresponds to</span>
<a id="L743"></a><span class="ln">   743</span>	<span class="comment">// the pixel at (x, y).</span>
<a id="L744"></a><span class="ln">   744</span>	func (p *Gray16) PixOffset(x, y int) int {
<a id="L745"></a><span class="ln">   745</span>		return (y-p.Rect.Min.Y)*p.Stride + (x-p.Rect.Min.X)*2
<a id="L746"></a><span class="ln">   746</span>	}
<a id="L747"></a><span class="ln">   747</span>	
<a id="L748"></a><span class="ln">   748</span>	func (p *Gray16) Set(x, y int, c color.Color) {
<a id="L749"></a><span class="ln">   749</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L750"></a><span class="ln">   750</span>			return
<a id="L751"></a><span class="ln">   751</span>		}
<a id="L752"></a><span class="ln">   752</span>		i := p.PixOffset(x, y)
<a id="L753"></a><span class="ln">   753</span>		c1 := color.Gray16Model.Convert(c).(color.Gray16)
<a id="L754"></a><span class="ln">   754</span>		p.Pix[i+0] = uint8(c1.Y &gt;&gt; 8)
<a id="L755"></a><span class="ln">   755</span>		p.Pix[i+1] = uint8(c1.Y)
<a id="L756"></a><span class="ln">   756</span>	}
<a id="L757"></a><span class="ln">   757</span>	
<a id="L758"></a><span class="ln">   758</span>	func (p *Gray16) SetGray16(x, y int, c color.Gray16) {
<a id="L759"></a><span class="ln">   759</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L760"></a><span class="ln">   760</span>			return
<a id="L761"></a><span class="ln">   761</span>		}
<a id="L762"></a><span class="ln">   762</span>		i := p.PixOffset(x, y)
<a id="L763"></a><span class="ln">   763</span>		p.Pix[i+0] = uint8(c.Y &gt;&gt; 8)
<a id="L764"></a><span class="ln">   764</span>		p.Pix[i+1] = uint8(c.Y)
<a id="L765"></a><span class="ln">   765</span>	}
<a id="L766"></a><span class="ln">   766</span>	
<a id="L767"></a><span class="ln">   767</span>	<span class="comment">// SubImage returns an image representing the portion of the image p visible</span>
<a id="L768"></a><span class="ln">   768</span>	<span class="comment">// through r. The returned value shares pixels with the original image.</span>
<a id="L769"></a><span class="ln">   769</span>	func (p *Gray16) SubImage(r Rectangle) Image {
<a id="L770"></a><span class="ln">   770</span>		r = r.Intersect(p.Rect)
<a id="L771"></a><span class="ln">   771</span>		<span class="comment">// If r1 and r2 are Rectangles, r1.Intersect(r2) is not guaranteed to be inside</span>
<a id="L772"></a><span class="ln">   772</span>		<span class="comment">// either r1 or r2 if the intersection is empty. Without explicitly checking for</span>
<a id="L773"></a><span class="ln">   773</span>		<span class="comment">// this, the Pix[i:] expression below can panic.</span>
<a id="L774"></a><span class="ln">   774</span>		if r.Empty() {
<a id="L775"></a><span class="ln">   775</span>			return &amp;Gray16{}
<a id="L776"></a><span class="ln">   776</span>		}
<a id="L777"></a><span class="ln">   777</span>		i := p.PixOffset(r.Min.X, r.Min.Y)
<a id="L778"></a><span class="ln">   778</span>		return &amp;Gray16{
<a id="L779"></a><span class="ln">   779</span>			Pix:    p.Pix[i:],
<a id="L780"></a><span class="ln">   780</span>			Stride: p.Stride,
<a id="L781"></a><span class="ln">   781</span>			Rect:   r,
<a id="L782"></a><span class="ln">   782</span>		}
<a id="L783"></a><span class="ln">   783</span>	}
<a id="L784"></a><span class="ln">   784</span>	
<a id="L785"></a><span class="ln">   785</span>	<span class="comment">// Opaque scans the entire image and returns whether or not it is fully opaque.</span>
<a id="L786"></a><span class="ln">   786</span>	func (p *Gray16) Opaque() bool {
<a id="L787"></a><span class="ln">   787</span>		return true
<a id="L788"></a><span class="ln">   788</span>	}
<a id="L789"></a><span class="ln">   789</span>	
<a id="L790"></a><span class="ln">   790</span>	<span class="comment">// NewGray16 returns a new Gray16 with the given bounds.</span>
<a id="L791"></a><span class="ln">   791</span>	func NewGray16(r Rectangle) *Gray16 {
<a id="L792"></a><span class="ln">   792</span>		w, h := r.Dx(), r.Dy()
<a id="L793"></a><span class="ln">   793</span>		pix := make([]uint8, 2*w*h)
<a id="L794"></a><span class="ln">   794</span>		return &amp;Gray16{pix, 2 * w, r}
<a id="L795"></a><span class="ln">   795</span>	}
<a id="L796"></a><span class="ln">   796</span>	
<a id="L797"></a><span class="ln">   797</span>	<span class="comment">// Paletted is an in-memory image of uint8 indices into a given palette.</span>
<a id="L798"></a><span class="ln">   798</span>	type Paletted struct {
<a id="L799"></a><span class="ln">   799</span>		<span class="comment">// Pix holds the image&#39;s pixels, as palette indices. The pixel at</span>
<a id="L800"></a><span class="ln">   800</span>		<span class="comment">// (x, y) starts at Pix[(y-Rect.Min.Y)*Stride + (x-Rect.Min.X)*1].</span>
<a id="L801"></a><span class="ln">   801</span>		Pix []uint8
<a id="L802"></a><span class="ln">   802</span>		<span class="comment">// Stride is the Pix stride (in bytes) between vertically adjacent pixels.</span>
<a id="L803"></a><span class="ln">   803</span>		Stride int
<a id="L804"></a><span class="ln">   804</span>		<span class="comment">// Rect is the image&#39;s bounds.</span>
<a id="L805"></a><span class="ln">   805</span>		Rect Rectangle
<a id="L806"></a><span class="ln">   806</span>		<span class="comment">// Palette is the image&#39;s palette.</span>
<a id="L807"></a><span class="ln">   807</span>		Palette color.Palette
<a id="L808"></a><span class="ln">   808</span>	}
<a id="L809"></a><span class="ln">   809</span>	
<a id="L810"></a><span class="ln">   810</span>	func (p *Paletted) ColorModel() color.Model { return p.Palette }
<a id="L811"></a><span class="ln">   811</span>	
<a id="L812"></a><span class="ln">   812</span>	func (p *Paletted) Bounds() Rectangle { return p.Rect }
<a id="L813"></a><span class="ln">   813</span>	
<a id="L814"></a><span class="ln">   814</span>	func (p *Paletted) At(x, y int) color.Color {
<a id="L815"></a><span class="ln">   815</span>		if len(p.Palette) == 0 {
<a id="L816"></a><span class="ln">   816</span>			return nil
<a id="L817"></a><span class="ln">   817</span>		}
<a id="L818"></a><span class="ln">   818</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L819"></a><span class="ln">   819</span>			return p.Palette[0]
<a id="L820"></a><span class="ln">   820</span>		}
<a id="L821"></a><span class="ln">   821</span>		i := p.PixOffset(x, y)
<a id="L822"></a><span class="ln">   822</span>		return p.Palette[p.Pix[i]]
<a id="L823"></a><span class="ln">   823</span>	}
<a id="L824"></a><span class="ln">   824</span>	
<a id="L825"></a><span class="ln">   825</span>	<span class="comment">// PixOffset returns the index of the first element of Pix that corresponds to</span>
<a id="L826"></a><span class="ln">   826</span>	<span class="comment">// the pixel at (x, y).</span>
<a id="L827"></a><span class="ln">   827</span>	func (p *Paletted) PixOffset(x, y int) int {
<a id="L828"></a><span class="ln">   828</span>		return (y-p.Rect.Min.Y)*p.Stride + (x-p.Rect.Min.X)*1
<a id="L829"></a><span class="ln">   829</span>	}
<a id="L830"></a><span class="ln">   830</span>	
<a id="L831"></a><span class="ln">   831</span>	func (p *Paletted) Set(x, y int, c color.Color) {
<a id="L832"></a><span class="ln">   832</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L833"></a><span class="ln">   833</span>			return
<a id="L834"></a><span class="ln">   834</span>		}
<a id="L835"></a><span class="ln">   835</span>		i := p.PixOffset(x, y)
<a id="L836"></a><span class="ln">   836</span>		p.Pix[i] = uint8(p.Palette.Index(c))
<a id="L837"></a><span class="ln">   837</span>	}
<a id="L838"></a><span class="ln">   838</span>	
<a id="L839"></a><span class="ln">   839</span>	func (p *Paletted) ColorIndexAt(x, y int) uint8 {
<a id="L840"></a><span class="ln">   840</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L841"></a><span class="ln">   841</span>			return 0
<a id="L842"></a><span class="ln">   842</span>		}
<a id="L843"></a><span class="ln">   843</span>		i := p.PixOffset(x, y)
<a id="L844"></a><span class="ln">   844</span>		return p.Pix[i]
<a id="L845"></a><span class="ln">   845</span>	}
<a id="L846"></a><span class="ln">   846</span>	
<a id="L847"></a><span class="ln">   847</span>	func (p *Paletted) SetColorIndex(x, y int, index uint8) {
<a id="L848"></a><span class="ln">   848</span>		if !(Point{x, y}.In(p.Rect)) {
<a id="L849"></a><span class="ln">   849</span>			return
<a id="L850"></a><span class="ln">   850</span>		}
<a id="L851"></a><span class="ln">   851</span>		i := p.PixOffset(x, y)
<a id="L852"></a><span class="ln">   852</span>		p.Pix[i] = index
<a id="L853"></a><span class="ln">   853</span>	}
<a id="L854"></a><span class="ln">   854</span>	
<a id="L855"></a><span class="ln">   855</span>	<span class="comment">// SubImage returns an image representing the portion of the image p visible</span>
<a id="L856"></a><span class="ln">   856</span>	<span class="comment">// through r. The returned value shares pixels with the original image.</span>
<a id="L857"></a><span class="ln">   857</span>	func (p *Paletted) SubImage(r Rectangle) Image {
<a id="L858"></a><span class="ln">   858</span>		r = r.Intersect(p.Rect)
<a id="L859"></a><span class="ln">   859</span>		<span class="comment">// If r1 and r2 are Rectangles, r1.Intersect(r2) is not guaranteed to be inside</span>
<a id="L860"></a><span class="ln">   860</span>		<span class="comment">// either r1 or r2 if the intersection is empty. Without explicitly checking for</span>
<a id="L861"></a><span class="ln">   861</span>		<span class="comment">// this, the Pix[i:] expression below can panic.</span>
<a id="L862"></a><span class="ln">   862</span>		if r.Empty() {
<a id="L863"></a><span class="ln">   863</span>			return &amp;Paletted{
<a id="L864"></a><span class="ln">   864</span>				Palette: p.Palette,
<a id="L865"></a><span class="ln">   865</span>			}
<a id="L866"></a><span class="ln">   866</span>		}
<a id="L867"></a><span class="ln">   867</span>		i := p.PixOffset(r.Min.X, r.Min.Y)
<a id="L868"></a><span class="ln">   868</span>		return &amp;Paletted{
<a id="L869"></a><span class="ln">   869</span>			Pix:     p.Pix[i:],
<a id="L870"></a><span class="ln">   870</span>			Stride:  p.Stride,
<a id="L871"></a><span class="ln">   871</span>			Rect:    p.Rect.Intersect(r),
<a id="L872"></a><span class="ln">   872</span>			Palette: p.Palette,
<a id="L873"></a><span class="ln">   873</span>		}
<a id="L874"></a><span class="ln">   874</span>	}
<a id="L875"></a><span class="ln">   875</span>	
<a id="L876"></a><span class="ln">   876</span>	<span class="comment">// Opaque scans the entire image and returns whether or not it is fully opaque.</span>
<a id="L877"></a><span class="ln">   877</span>	func (p *Paletted) Opaque() bool {
<a id="L878"></a><span class="ln">   878</span>		var present [256]bool
<a id="L879"></a><span class="ln">   879</span>		i0, i1 := 0, p.Rect.Dx()
<a id="L880"></a><span class="ln">   880</span>		for y := p.Rect.Min.Y; y &lt; p.Rect.Max.Y; y++ {
<a id="L881"></a><span class="ln">   881</span>			for _, c := range p.Pix[i0:i1] {
<a id="L882"></a><span class="ln">   882</span>				present[c] = true
<a id="L883"></a><span class="ln">   883</span>			}
<a id="L884"></a><span class="ln">   884</span>			i0 += p.Stride
<a id="L885"></a><span class="ln">   885</span>			i1 += p.Stride
<a id="L886"></a><span class="ln">   886</span>		}
<a id="L887"></a><span class="ln">   887</span>		for i, c := range p.Palette {
<a id="L888"></a><span class="ln">   888</span>			if !present[i] {
<a id="L889"></a><span class="ln">   889</span>				continue
<a id="L890"></a><span class="ln">   890</span>			}
<a id="L891"></a><span class="ln">   891</span>			_, _, _, a := c.RGBA()
<a id="L892"></a><span class="ln">   892</span>			if a != 0xffff {
<a id="L893"></a><span class="ln">   893</span>				return false
<a id="L894"></a><span class="ln">   894</span>			}
<a id="L895"></a><span class="ln">   895</span>		}
<a id="L896"></a><span class="ln">   896</span>		return true
<a id="L897"></a><span class="ln">   897</span>	}
<a id="L898"></a><span class="ln">   898</span>	
<a id="L899"></a><span class="ln">   899</span>	<span class="comment">// NewPaletted returns a new Paletted with the given width, height and palette.</span>
<a id="L900"></a><span class="ln">   900</span>	func NewPaletted(r Rectangle, p color.Palette) *Paletted {
<a id="L901"></a><span class="ln">   901</span>		w, h := r.Dx(), r.Dy()
<a id="L902"></a><span class="ln">   902</span>		pix := make([]uint8, 1*w*h)
<a id="L903"></a><span class="ln">   903</span>		return &amp;Paletted{pix, 1 * w, r, p}
<a id="L904"></a><span class="ln">   904</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

