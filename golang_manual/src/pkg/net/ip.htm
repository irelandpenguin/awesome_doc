<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/ip.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/ip.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// IP address manipulations</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">//</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// IPv4 addresses are 4 bytes; IPv6 addresses are 16 bytes.</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// An IPv4 address can be converted to an IPv6 address by</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// adding a canonical prefix (10 zeros, 2 0xFFs).</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// This library accepts either size of byte array but always</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// returns 16-byte addresses.</span>
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	package net
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// IP address lengths (bytes).</span>
<a id="L16"></a><span class="ln">    16</span>	const (
<a id="L17"></a><span class="ln">    17</span>		IPv4len = 4
<a id="L18"></a><span class="ln">    18</span>		IPv6len = 16
<a id="L19"></a><span class="ln">    19</span>	)
<a id="L20"></a><span class="ln">    20</span>	
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// An IP is a single IP address, an array of bytes.</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// Functions in this package accept either 4-byte (IPv4)</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// or 16-byte (IPv6) arrays as input.</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// Note that in this documentation, referring to an</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// IP address as an IPv4 address or an IPv6 address</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// is a semantic property of the address, not just the</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// length of the byte array: a 16-byte array can still</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// be an IPv4 address.</span>
<a id="L30"></a><span class="ln">    30</span>	type IP []byte
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// An IP mask is an IP address.</span>
<a id="L33"></a><span class="ln">    33</span>	type IPMask []byte
<a id="L34"></a><span class="ln">    34</span>	
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// An IPNet represents an IP network.</span>
<a id="L36"></a><span class="ln">    36</span>	type IPNet struct {
<a id="L37"></a><span class="ln">    37</span>		IP   IP     <span class="comment">// network number</span>
<a id="L38"></a><span class="ln">    38</span>		Mask IPMask <span class="comment">// network mask</span>
<a id="L39"></a><span class="ln">    39</span>	}
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// IPv4 returns the IP address (in 16-byte form) of the</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">// IPv4 address a.b.c.d.</span>
<a id="L43"></a><span class="ln">    43</span>	func IPv4(a, b, c, d byte) IP {
<a id="L44"></a><span class="ln">    44</span>		p := make(IP, IPv6len)
<a id="L45"></a><span class="ln">    45</span>		copy(p, v4InV6Prefix)
<a id="L46"></a><span class="ln">    46</span>		p[12] = a
<a id="L47"></a><span class="ln">    47</span>		p[13] = b
<a id="L48"></a><span class="ln">    48</span>		p[14] = c
<a id="L49"></a><span class="ln">    49</span>		p[15] = d
<a id="L50"></a><span class="ln">    50</span>		return p
<a id="L51"></a><span class="ln">    51</span>	}
<a id="L52"></a><span class="ln">    52</span>	
<a id="L53"></a><span class="ln">    53</span>	var v4InV6Prefix = []byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff}
<a id="L54"></a><span class="ln">    54</span>	
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// IPv4Mask returns the IP mask (in 4-byte form) of the</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// IPv4 mask a.b.c.d.</span>
<a id="L57"></a><span class="ln">    57</span>	func IPv4Mask(a, b, c, d byte) IPMask {
<a id="L58"></a><span class="ln">    58</span>		p := make(IPMask, IPv4len)
<a id="L59"></a><span class="ln">    59</span>		p[0] = a
<a id="L60"></a><span class="ln">    60</span>		p[1] = b
<a id="L61"></a><span class="ln">    61</span>		p[2] = c
<a id="L62"></a><span class="ln">    62</span>		p[3] = d
<a id="L63"></a><span class="ln">    63</span>		return p
<a id="L64"></a><span class="ln">    64</span>	}
<a id="L65"></a><span class="ln">    65</span>	
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">// CIDRMask returns an IPMask consisting of `ones&#39; 1 bits</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// followed by 0s up to a total length of `bits&#39; bits.</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// For a mask of this form, CIDRMask is the inverse of IPMask.Size.</span>
<a id="L69"></a><span class="ln">    69</span>	func CIDRMask(ones, bits int) IPMask {
<a id="L70"></a><span class="ln">    70</span>		if bits != 8*IPv4len &amp;&amp; bits != 8*IPv6len {
<a id="L71"></a><span class="ln">    71</span>			return nil
<a id="L72"></a><span class="ln">    72</span>		}
<a id="L73"></a><span class="ln">    73</span>		if ones &lt; 0 || ones &gt; bits {
<a id="L74"></a><span class="ln">    74</span>			return nil
<a id="L75"></a><span class="ln">    75</span>		}
<a id="L76"></a><span class="ln">    76</span>		l := bits / 8
<a id="L77"></a><span class="ln">    77</span>		m := make(IPMask, l)
<a id="L78"></a><span class="ln">    78</span>		n := uint(ones)
<a id="L79"></a><span class="ln">    79</span>		for i := 0; i &lt; l; i++ {
<a id="L80"></a><span class="ln">    80</span>			if n &gt;= 8 {
<a id="L81"></a><span class="ln">    81</span>				m[i] = 0xff
<a id="L82"></a><span class="ln">    82</span>				n -= 8
<a id="L83"></a><span class="ln">    83</span>				continue
<a id="L84"></a><span class="ln">    84</span>			}
<a id="L85"></a><span class="ln">    85</span>			m[i] = ^byte(0xff &gt;&gt; n)
<a id="L86"></a><span class="ln">    86</span>			n = 0
<a id="L87"></a><span class="ln">    87</span>		}
<a id="L88"></a><span class="ln">    88</span>		return m
<a id="L89"></a><span class="ln">    89</span>	}
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// Well-known IPv4 addresses</span>
<a id="L92"></a><span class="ln">    92</span>	var (
<a id="L93"></a><span class="ln">    93</span>		IPv4bcast     = IPv4(255, 255, 255, 255) <span class="comment">// broadcast</span>
<a id="L94"></a><span class="ln">    94</span>		IPv4allsys    = IPv4(224, 0, 0, 1)       <span class="comment">// all systems</span>
<a id="L95"></a><span class="ln">    95</span>		IPv4allrouter = IPv4(224, 0, 0, 2)       <span class="comment">// all routers</span>
<a id="L96"></a><span class="ln">    96</span>		IPv4zero      = IPv4(0, 0, 0, 0)         <span class="comment">// all zeros</span>
<a id="L97"></a><span class="ln">    97</span>	)
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">// Well-known IPv6 addresses</span>
<a id="L100"></a><span class="ln">   100</span>	var (
<a id="L101"></a><span class="ln">   101</span>		IPv6zero                   = IP{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
<a id="L102"></a><span class="ln">   102</span>		IPv6unspecified            = IP{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
<a id="L103"></a><span class="ln">   103</span>		IPv6loopback               = IP{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
<a id="L104"></a><span class="ln">   104</span>		IPv6interfacelocalallnodes = IP{0xff, 0x01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x01}
<a id="L105"></a><span class="ln">   105</span>		IPv6linklocalallnodes      = IP{0xff, 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x01}
<a id="L106"></a><span class="ln">   106</span>		IPv6linklocalallrouters    = IP{0xff, 0x02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x02}
<a id="L107"></a><span class="ln">   107</span>	)
<a id="L108"></a><span class="ln">   108</span>	
<a id="L109"></a><span class="ln">   109</span>	<span class="comment">// IsUnspecified returns true if ip is an unspecified address.</span>
<a id="L110"></a><span class="ln">   110</span>	func (ip IP) IsUnspecified() bool {
<a id="L111"></a><span class="ln">   111</span>		if ip.Equal(IPv4zero) || ip.Equal(IPv6unspecified) {
<a id="L112"></a><span class="ln">   112</span>			return true
<a id="L113"></a><span class="ln">   113</span>		}
<a id="L114"></a><span class="ln">   114</span>		return false
<a id="L115"></a><span class="ln">   115</span>	}
<a id="L116"></a><span class="ln">   116</span>	
<a id="L117"></a><span class="ln">   117</span>	<span class="comment">// IsLoopback returns true if ip is a loopback address.</span>
<a id="L118"></a><span class="ln">   118</span>	func (ip IP) IsLoopback() bool {
<a id="L119"></a><span class="ln">   119</span>		if ip4 := ip.To4(); ip4 != nil &amp;&amp; ip4[0] == 127 {
<a id="L120"></a><span class="ln">   120</span>			return true
<a id="L121"></a><span class="ln">   121</span>		}
<a id="L122"></a><span class="ln">   122</span>		return ip.Equal(IPv6loopback)
<a id="L123"></a><span class="ln">   123</span>	}
<a id="L124"></a><span class="ln">   124</span>	
<a id="L125"></a><span class="ln">   125</span>	<span class="comment">// IsMulticast returns true if ip is a multicast address.</span>
<a id="L126"></a><span class="ln">   126</span>	func (ip IP) IsMulticast() bool {
<a id="L127"></a><span class="ln">   127</span>		if ip4 := ip.To4(); ip4 != nil &amp;&amp; ip4[0]&amp;0xf0 == 0xe0 {
<a id="L128"></a><span class="ln">   128</span>			return true
<a id="L129"></a><span class="ln">   129</span>		}
<a id="L130"></a><span class="ln">   130</span>		return ip[0] == 0xff
<a id="L131"></a><span class="ln">   131</span>	}
<a id="L132"></a><span class="ln">   132</span>	
<a id="L133"></a><span class="ln">   133</span>	<span class="comment">// IsInterfaceLinkLocalMulticast returns true if ip is</span>
<a id="L134"></a><span class="ln">   134</span>	<span class="comment">// an interface-local multicast address.</span>
<a id="L135"></a><span class="ln">   135</span>	func (ip IP) IsInterfaceLocalMulticast() bool {
<a id="L136"></a><span class="ln">   136</span>		return len(ip) == IPv6len &amp;&amp; ip[0] == 0xff &amp;&amp; ip[1]&amp;0x0f == 0x01
<a id="L137"></a><span class="ln">   137</span>	}
<a id="L138"></a><span class="ln">   138</span>	
<a id="L139"></a><span class="ln">   139</span>	<span class="comment">// IsLinkLocalMulticast returns true if ip is a link-local</span>
<a id="L140"></a><span class="ln">   140</span>	<span class="comment">// multicast address.</span>
<a id="L141"></a><span class="ln">   141</span>	func (ip IP) IsLinkLocalMulticast() bool {
<a id="L142"></a><span class="ln">   142</span>		if ip4 := ip.To4(); ip4 != nil &amp;&amp; ip4[0] == 224 &amp;&amp; ip4[1] == 0 &amp;&amp; ip4[2] == 0 {
<a id="L143"></a><span class="ln">   143</span>			return true
<a id="L144"></a><span class="ln">   144</span>		}
<a id="L145"></a><span class="ln">   145</span>		return ip[0] == 0xff &amp;&amp; ip[1]&amp;0x0f == 0x02
<a id="L146"></a><span class="ln">   146</span>	}
<a id="L147"></a><span class="ln">   147</span>	
<a id="L148"></a><span class="ln">   148</span>	<span class="comment">// IsLinkLocalUnicast returns true if ip is a link-local</span>
<a id="L149"></a><span class="ln">   149</span>	<span class="comment">// unicast address.</span>
<a id="L150"></a><span class="ln">   150</span>	func (ip IP) IsLinkLocalUnicast() bool {
<a id="L151"></a><span class="ln">   151</span>		if ip4 := ip.To4(); ip4 != nil &amp;&amp; ip4[0] == 169 &amp;&amp; ip4[1] == 254 {
<a id="L152"></a><span class="ln">   152</span>			return true
<a id="L153"></a><span class="ln">   153</span>		}
<a id="L154"></a><span class="ln">   154</span>		return ip[0] == 0xfe &amp;&amp; ip[1]&amp;0xc0 == 0x80
<a id="L155"></a><span class="ln">   155</span>	}
<a id="L156"></a><span class="ln">   156</span>	
<a id="L157"></a><span class="ln">   157</span>	<span class="comment">// IsGlobalUnicast returns true if ip is a global unicast</span>
<a id="L158"></a><span class="ln">   158</span>	<span class="comment">// address.</span>
<a id="L159"></a><span class="ln">   159</span>	func (ip IP) IsGlobalUnicast() bool {
<a id="L160"></a><span class="ln">   160</span>		return !ip.IsUnspecified() &amp;&amp;
<a id="L161"></a><span class="ln">   161</span>			!ip.IsLoopback() &amp;&amp;
<a id="L162"></a><span class="ln">   162</span>			!ip.IsMulticast() &amp;&amp;
<a id="L163"></a><span class="ln">   163</span>			!ip.IsLinkLocalUnicast()
<a id="L164"></a><span class="ln">   164</span>	}
<a id="L165"></a><span class="ln">   165</span>	
<a id="L166"></a><span class="ln">   166</span>	<span class="comment">// Is p all zeros?</span>
<a id="L167"></a><span class="ln">   167</span>	func isZeros(p IP) bool {
<a id="L168"></a><span class="ln">   168</span>		for i := 0; i &lt; len(p); i++ {
<a id="L169"></a><span class="ln">   169</span>			if p[i] != 0 {
<a id="L170"></a><span class="ln">   170</span>				return false
<a id="L171"></a><span class="ln">   171</span>			}
<a id="L172"></a><span class="ln">   172</span>		}
<a id="L173"></a><span class="ln">   173</span>		return true
<a id="L174"></a><span class="ln">   174</span>	}
<a id="L175"></a><span class="ln">   175</span>	
<a id="L176"></a><span class="ln">   176</span>	<span class="comment">// To4 converts the IPv4 address ip to a 4-byte representation.</span>
<a id="L177"></a><span class="ln">   177</span>	<span class="comment">// If ip is not an IPv4 address, To4 returns nil.</span>
<a id="L178"></a><span class="ln">   178</span>	func (ip IP) To4() IP {
<a id="L179"></a><span class="ln">   179</span>		if len(ip) == IPv4len {
<a id="L180"></a><span class="ln">   180</span>			return ip
<a id="L181"></a><span class="ln">   181</span>		}
<a id="L182"></a><span class="ln">   182</span>		if len(ip) == IPv6len &amp;&amp;
<a id="L183"></a><span class="ln">   183</span>			isZeros(ip[0:10]) &amp;&amp;
<a id="L184"></a><span class="ln">   184</span>			ip[10] == 0xff &amp;&amp;
<a id="L185"></a><span class="ln">   185</span>			ip[11] == 0xff {
<a id="L186"></a><span class="ln">   186</span>			return ip[12:16]
<a id="L187"></a><span class="ln">   187</span>		}
<a id="L188"></a><span class="ln">   188</span>		return nil
<a id="L189"></a><span class="ln">   189</span>	}
<a id="L190"></a><span class="ln">   190</span>	
<a id="L191"></a><span class="ln">   191</span>	<span class="comment">// To16 converts the IP address ip to a 16-byte representation.</span>
<a id="L192"></a><span class="ln">   192</span>	<span class="comment">// If ip is not an IP address (it is the wrong length), To16 returns nil.</span>
<a id="L193"></a><span class="ln">   193</span>	func (ip IP) To16() IP {
<a id="L194"></a><span class="ln">   194</span>		if len(ip) == IPv4len {
<a id="L195"></a><span class="ln">   195</span>			return IPv4(ip[0], ip[1], ip[2], ip[3])
<a id="L196"></a><span class="ln">   196</span>		}
<a id="L197"></a><span class="ln">   197</span>		if len(ip) == IPv6len {
<a id="L198"></a><span class="ln">   198</span>			return ip
<a id="L199"></a><span class="ln">   199</span>		}
<a id="L200"></a><span class="ln">   200</span>		return nil
<a id="L201"></a><span class="ln">   201</span>	}
<a id="L202"></a><span class="ln">   202</span>	
<a id="L203"></a><span class="ln">   203</span>	<span class="comment">// Default route masks for IPv4.</span>
<a id="L204"></a><span class="ln">   204</span>	var (
<a id="L205"></a><span class="ln">   205</span>		classAMask = IPv4Mask(0xff, 0, 0, 0)
<a id="L206"></a><span class="ln">   206</span>		classBMask = IPv4Mask(0xff, 0xff, 0, 0)
<a id="L207"></a><span class="ln">   207</span>		classCMask = IPv4Mask(0xff, 0xff, 0xff, 0)
<a id="L208"></a><span class="ln">   208</span>	)
<a id="L209"></a><span class="ln">   209</span>	
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// DefaultMask returns the default IP mask for the IP address ip.</span>
<a id="L211"></a><span class="ln">   211</span>	<span class="comment">// Only IPv4 addresses have default masks; DefaultMask returns</span>
<a id="L212"></a><span class="ln">   212</span>	<span class="comment">// nil if ip is not a valid IPv4 address.</span>
<a id="L213"></a><span class="ln">   213</span>	func (ip IP) DefaultMask() IPMask {
<a id="L214"></a><span class="ln">   214</span>		if ip = ip.To4(); ip == nil {
<a id="L215"></a><span class="ln">   215</span>			return nil
<a id="L216"></a><span class="ln">   216</span>		}
<a id="L217"></a><span class="ln">   217</span>		switch true {
<a id="L218"></a><span class="ln">   218</span>		case ip[0] &lt; 0x80:
<a id="L219"></a><span class="ln">   219</span>			return classAMask
<a id="L220"></a><span class="ln">   220</span>		case ip[0] &lt; 0xC0:
<a id="L221"></a><span class="ln">   221</span>			return classBMask
<a id="L222"></a><span class="ln">   222</span>		default:
<a id="L223"></a><span class="ln">   223</span>			return classCMask
<a id="L224"></a><span class="ln">   224</span>		}
<a id="L225"></a><span class="ln">   225</span>		return nil <span class="comment">// not reached</span>
<a id="L226"></a><span class="ln">   226</span>	}
<a id="L227"></a><span class="ln">   227</span>	
<a id="L228"></a><span class="ln">   228</span>	func allFF(b []byte) bool {
<a id="L229"></a><span class="ln">   229</span>		for _, c := range b {
<a id="L230"></a><span class="ln">   230</span>			if c != 0xff {
<a id="L231"></a><span class="ln">   231</span>				return false
<a id="L232"></a><span class="ln">   232</span>			}
<a id="L233"></a><span class="ln">   233</span>		}
<a id="L234"></a><span class="ln">   234</span>		return true
<a id="L235"></a><span class="ln">   235</span>	}
<a id="L236"></a><span class="ln">   236</span>	
<a id="L237"></a><span class="ln">   237</span>	<span class="comment">// Mask returns the result of masking the IP address ip with mask.</span>
<a id="L238"></a><span class="ln">   238</span>	func (ip IP) Mask(mask IPMask) IP {
<a id="L239"></a><span class="ln">   239</span>		if len(mask) == IPv6len &amp;&amp; len(ip) == IPv4len &amp;&amp; allFF(mask[:12]) {
<a id="L240"></a><span class="ln">   240</span>			mask = mask[12:]
<a id="L241"></a><span class="ln">   241</span>		}
<a id="L242"></a><span class="ln">   242</span>		if len(mask) == IPv4len &amp;&amp; len(ip) == IPv6len &amp;&amp; bytesEqual(ip[:12], v4InV6Prefix) {
<a id="L243"></a><span class="ln">   243</span>			ip = ip[12:]
<a id="L244"></a><span class="ln">   244</span>		}
<a id="L245"></a><span class="ln">   245</span>		n := len(ip)
<a id="L246"></a><span class="ln">   246</span>		if n != len(mask) {
<a id="L247"></a><span class="ln">   247</span>			return nil
<a id="L248"></a><span class="ln">   248</span>		}
<a id="L249"></a><span class="ln">   249</span>		out := make(IP, n)
<a id="L250"></a><span class="ln">   250</span>		for i := 0; i &lt; n; i++ {
<a id="L251"></a><span class="ln">   251</span>			out[i] = ip[i] &amp; mask[i]
<a id="L252"></a><span class="ln">   252</span>		}
<a id="L253"></a><span class="ln">   253</span>		return out
<a id="L254"></a><span class="ln">   254</span>	}
<a id="L255"></a><span class="ln">   255</span>	
<a id="L256"></a><span class="ln">   256</span>	<span class="comment">// String returns the string form of the IP address ip.</span>
<a id="L257"></a><span class="ln">   257</span>	<span class="comment">// If the address is an IPv4 address, the string representation</span>
<a id="L258"></a><span class="ln">   258</span>	<span class="comment">// is dotted decimal (&#34;74.125.19.99&#34;).  Otherwise the representation</span>
<a id="L259"></a><span class="ln">   259</span>	<span class="comment">// is IPv6 (&#34;2001:4860:0:2001::68&#34;).</span>
<a id="L260"></a><span class="ln">   260</span>	func (ip IP) String() string {
<a id="L261"></a><span class="ln">   261</span>		p := ip
<a id="L262"></a><span class="ln">   262</span>	
<a id="L263"></a><span class="ln">   263</span>		if len(ip) == 0 {
<a id="L264"></a><span class="ln">   264</span>			return &#34;&lt;nil&gt;&#34;
<a id="L265"></a><span class="ln">   265</span>		}
<a id="L266"></a><span class="ln">   266</span>	
<a id="L267"></a><span class="ln">   267</span>		<span class="comment">// If IPv4, use dotted notation.</span>
<a id="L268"></a><span class="ln">   268</span>		if p4 := p.To4(); len(p4) == IPv4len {
<a id="L269"></a><span class="ln">   269</span>			return itod(uint(p4[0])) + &#34;.&#34; +
<a id="L270"></a><span class="ln">   270</span>				itod(uint(p4[1])) + &#34;.&#34; +
<a id="L271"></a><span class="ln">   271</span>				itod(uint(p4[2])) + &#34;.&#34; +
<a id="L272"></a><span class="ln">   272</span>				itod(uint(p4[3]))
<a id="L273"></a><span class="ln">   273</span>		}
<a id="L274"></a><span class="ln">   274</span>		if len(p) != IPv6len {
<a id="L275"></a><span class="ln">   275</span>			return &#34;?&#34;
<a id="L276"></a><span class="ln">   276</span>		}
<a id="L277"></a><span class="ln">   277</span>	
<a id="L278"></a><span class="ln">   278</span>		<span class="comment">// Find longest run of zeros.</span>
<a id="L279"></a><span class="ln">   279</span>		e0 := -1
<a id="L280"></a><span class="ln">   280</span>		e1 := -1
<a id="L281"></a><span class="ln">   281</span>		for i := 0; i &lt; IPv6len; i += 2 {
<a id="L282"></a><span class="ln">   282</span>			j := i
<a id="L283"></a><span class="ln">   283</span>			for j &lt; IPv6len &amp;&amp; p[j] == 0 &amp;&amp; p[j+1] == 0 {
<a id="L284"></a><span class="ln">   284</span>				j += 2
<a id="L285"></a><span class="ln">   285</span>			}
<a id="L286"></a><span class="ln">   286</span>			if j &gt; i &amp;&amp; j-i &gt; e1-e0 {
<a id="L287"></a><span class="ln">   287</span>				e0 = i
<a id="L288"></a><span class="ln">   288</span>				e1 = j
<a id="L289"></a><span class="ln">   289</span>			}
<a id="L290"></a><span class="ln">   290</span>		}
<a id="L291"></a><span class="ln">   291</span>		<span class="comment">// The symbol &#34;::&#34; MUST NOT be used to shorten just one 16 bit 0 field.</span>
<a id="L292"></a><span class="ln">   292</span>		if e1-e0 &lt;= 2 {
<a id="L293"></a><span class="ln">   293</span>			e0 = -1
<a id="L294"></a><span class="ln">   294</span>			e1 = -1
<a id="L295"></a><span class="ln">   295</span>		}
<a id="L296"></a><span class="ln">   296</span>	
<a id="L297"></a><span class="ln">   297</span>		<span class="comment">// Print with possible :: in place of run of zeros</span>
<a id="L298"></a><span class="ln">   298</span>		var s string
<a id="L299"></a><span class="ln">   299</span>		for i := 0; i &lt; IPv6len; i += 2 {
<a id="L300"></a><span class="ln">   300</span>			if i == e0 {
<a id="L301"></a><span class="ln">   301</span>				s += &#34;::&#34;
<a id="L302"></a><span class="ln">   302</span>				i = e1
<a id="L303"></a><span class="ln">   303</span>				if i &gt;= IPv6len {
<a id="L304"></a><span class="ln">   304</span>					break
<a id="L305"></a><span class="ln">   305</span>				}
<a id="L306"></a><span class="ln">   306</span>			} else if i &gt; 0 {
<a id="L307"></a><span class="ln">   307</span>				s += &#34;:&#34;
<a id="L308"></a><span class="ln">   308</span>			}
<a id="L309"></a><span class="ln">   309</span>			s += itox((uint(p[i])&lt;&lt;8)|uint(p[i+1]), 1)
<a id="L310"></a><span class="ln">   310</span>		}
<a id="L311"></a><span class="ln">   311</span>		return s
<a id="L312"></a><span class="ln">   312</span>	}
<a id="L313"></a><span class="ln">   313</span>	
<a id="L314"></a><span class="ln">   314</span>	<span class="comment">// Equal returns true if ip and x are the same IP address.</span>
<a id="L315"></a><span class="ln">   315</span>	<span class="comment">// An IPv4 address and that same address in IPv6 form are</span>
<a id="L316"></a><span class="ln">   316</span>	<span class="comment">// considered to be equal.</span>
<a id="L317"></a><span class="ln">   317</span>	func (ip IP) Equal(x IP) bool {
<a id="L318"></a><span class="ln">   318</span>		if len(ip) == len(x) {
<a id="L319"></a><span class="ln">   319</span>			return bytesEqual(ip, x)
<a id="L320"></a><span class="ln">   320</span>		}
<a id="L321"></a><span class="ln">   321</span>		if len(ip) == IPv4len &amp;&amp; len(x) == IPv6len {
<a id="L322"></a><span class="ln">   322</span>			return bytesEqual(x[0:12], v4InV6Prefix) &amp;&amp; bytesEqual(ip, x[12:])
<a id="L323"></a><span class="ln">   323</span>		}
<a id="L324"></a><span class="ln">   324</span>		if len(ip) == IPv6len &amp;&amp; len(x) == IPv4len {
<a id="L325"></a><span class="ln">   325</span>			return bytesEqual(ip[0:12], v4InV6Prefix) &amp;&amp; bytesEqual(ip[12:], x)
<a id="L326"></a><span class="ln">   326</span>		}
<a id="L327"></a><span class="ln">   327</span>		return false
<a id="L328"></a><span class="ln">   328</span>	}
<a id="L329"></a><span class="ln">   329</span>	
<a id="L330"></a><span class="ln">   330</span>	func bytesEqual(x, y []byte) bool {
<a id="L331"></a><span class="ln">   331</span>		if len(x) != len(y) {
<a id="L332"></a><span class="ln">   332</span>			return false
<a id="L333"></a><span class="ln">   333</span>		}
<a id="L334"></a><span class="ln">   334</span>		for i, b := range x {
<a id="L335"></a><span class="ln">   335</span>			if y[i] != b {
<a id="L336"></a><span class="ln">   336</span>				return false
<a id="L337"></a><span class="ln">   337</span>			}
<a id="L338"></a><span class="ln">   338</span>		}
<a id="L339"></a><span class="ln">   339</span>		return true
<a id="L340"></a><span class="ln">   340</span>	}
<a id="L341"></a><span class="ln">   341</span>	
<a id="L342"></a><span class="ln">   342</span>	<span class="comment">// If mask is a sequence of 1 bits followed by 0 bits,</span>
<a id="L343"></a><span class="ln">   343</span>	<span class="comment">// return the number of 1 bits.</span>
<a id="L344"></a><span class="ln">   344</span>	func simpleMaskLength(mask IPMask) int {
<a id="L345"></a><span class="ln">   345</span>		var n int
<a id="L346"></a><span class="ln">   346</span>		for i, v := range mask {
<a id="L347"></a><span class="ln">   347</span>			if v == 0xff {
<a id="L348"></a><span class="ln">   348</span>				n += 8
<a id="L349"></a><span class="ln">   349</span>				continue
<a id="L350"></a><span class="ln">   350</span>			}
<a id="L351"></a><span class="ln">   351</span>			<span class="comment">// found non-ff byte</span>
<a id="L352"></a><span class="ln">   352</span>			<span class="comment">// count 1 bits</span>
<a id="L353"></a><span class="ln">   353</span>			for v&amp;0x80 != 0 {
<a id="L354"></a><span class="ln">   354</span>				n++
<a id="L355"></a><span class="ln">   355</span>				v &lt;&lt;= 1
<a id="L356"></a><span class="ln">   356</span>			}
<a id="L357"></a><span class="ln">   357</span>			<span class="comment">// rest must be 0 bits</span>
<a id="L358"></a><span class="ln">   358</span>			if v != 0 {
<a id="L359"></a><span class="ln">   359</span>				return -1
<a id="L360"></a><span class="ln">   360</span>			}
<a id="L361"></a><span class="ln">   361</span>			for i++; i &lt; len(mask); i++ {
<a id="L362"></a><span class="ln">   362</span>				if mask[i] != 0 {
<a id="L363"></a><span class="ln">   363</span>					return -1
<a id="L364"></a><span class="ln">   364</span>				}
<a id="L365"></a><span class="ln">   365</span>			}
<a id="L366"></a><span class="ln">   366</span>			break
<a id="L367"></a><span class="ln">   367</span>		}
<a id="L368"></a><span class="ln">   368</span>		return n
<a id="L369"></a><span class="ln">   369</span>	}
<a id="L370"></a><span class="ln">   370</span>	
<a id="L371"></a><span class="ln">   371</span>	<span class="comment">// Size returns the number of leading ones and total bits in the mask.</span>
<a id="L372"></a><span class="ln">   372</span>	<span class="comment">// If the mask is not in the canonical form--ones followed by zeros--then</span>
<a id="L373"></a><span class="ln">   373</span>	<span class="comment">// Size returns 0, 0.</span>
<a id="L374"></a><span class="ln">   374</span>	func (m IPMask) Size() (ones, bits int) {
<a id="L375"></a><span class="ln">   375</span>		ones, bits = simpleMaskLength(m), len(m)*8
<a id="L376"></a><span class="ln">   376</span>		if ones == -1 {
<a id="L377"></a><span class="ln">   377</span>			return 0, 0
<a id="L378"></a><span class="ln">   378</span>		}
<a id="L379"></a><span class="ln">   379</span>		return
<a id="L380"></a><span class="ln">   380</span>	}
<a id="L381"></a><span class="ln">   381</span>	
<a id="L382"></a><span class="ln">   382</span>	<span class="comment">// String returns the hexadecimal form of m, with no punctuation.</span>
<a id="L383"></a><span class="ln">   383</span>	func (m IPMask) String() string {
<a id="L384"></a><span class="ln">   384</span>		s := &#34;&#34;
<a id="L385"></a><span class="ln">   385</span>		for _, b := range m {
<a id="L386"></a><span class="ln">   386</span>			s += itox(uint(b), 2)
<a id="L387"></a><span class="ln">   387</span>		}
<a id="L388"></a><span class="ln">   388</span>		if len(s) == 0 {
<a id="L389"></a><span class="ln">   389</span>			return &#34;&lt;nil&gt;&#34;
<a id="L390"></a><span class="ln">   390</span>		}
<a id="L391"></a><span class="ln">   391</span>		return s
<a id="L392"></a><span class="ln">   392</span>	}
<a id="L393"></a><span class="ln">   393</span>	
<a id="L394"></a><span class="ln">   394</span>	func networkNumberAndMask(n *IPNet) (ip IP, m IPMask) {
<a id="L395"></a><span class="ln">   395</span>		if ip = n.IP.To4(); ip == nil {
<a id="L396"></a><span class="ln">   396</span>			ip = n.IP
<a id="L397"></a><span class="ln">   397</span>			if len(ip) != IPv6len {
<a id="L398"></a><span class="ln">   398</span>				return nil, nil
<a id="L399"></a><span class="ln">   399</span>			}
<a id="L400"></a><span class="ln">   400</span>		}
<a id="L401"></a><span class="ln">   401</span>		m = n.Mask
<a id="L402"></a><span class="ln">   402</span>		switch len(m) {
<a id="L403"></a><span class="ln">   403</span>		case IPv4len:
<a id="L404"></a><span class="ln">   404</span>			if len(ip) != IPv4len {
<a id="L405"></a><span class="ln">   405</span>				return nil, nil
<a id="L406"></a><span class="ln">   406</span>			}
<a id="L407"></a><span class="ln">   407</span>		case IPv6len:
<a id="L408"></a><span class="ln">   408</span>			if len(ip) == IPv4len {
<a id="L409"></a><span class="ln">   409</span>				m = m[12:]
<a id="L410"></a><span class="ln">   410</span>			}
<a id="L411"></a><span class="ln">   411</span>		default:
<a id="L412"></a><span class="ln">   412</span>			return nil, nil
<a id="L413"></a><span class="ln">   413</span>		}
<a id="L414"></a><span class="ln">   414</span>		return
<a id="L415"></a><span class="ln">   415</span>	}
<a id="L416"></a><span class="ln">   416</span>	
<a id="L417"></a><span class="ln">   417</span>	<span class="comment">// Contains reports whether the network includes ip.</span>
<a id="L418"></a><span class="ln">   418</span>	func (n *IPNet) Contains(ip IP) bool {
<a id="L419"></a><span class="ln">   419</span>		nn, m := networkNumberAndMask(n)
<a id="L420"></a><span class="ln">   420</span>		if x := ip.To4(); x != nil {
<a id="L421"></a><span class="ln">   421</span>			ip = x
<a id="L422"></a><span class="ln">   422</span>		}
<a id="L423"></a><span class="ln">   423</span>		l := len(ip)
<a id="L424"></a><span class="ln">   424</span>		if l != len(nn) {
<a id="L425"></a><span class="ln">   425</span>			return false
<a id="L426"></a><span class="ln">   426</span>		}
<a id="L427"></a><span class="ln">   427</span>		for i := 0; i &lt; l; i++ {
<a id="L428"></a><span class="ln">   428</span>			if nn[i]&amp;m[i] != ip[i]&amp;m[i] {
<a id="L429"></a><span class="ln">   429</span>				return false
<a id="L430"></a><span class="ln">   430</span>			}
<a id="L431"></a><span class="ln">   431</span>		}
<a id="L432"></a><span class="ln">   432</span>		return true
<a id="L433"></a><span class="ln">   433</span>	}
<a id="L434"></a><span class="ln">   434</span>	
<a id="L435"></a><span class="ln">   435</span>	<span class="comment">// String returns the CIDR notation of n like &#34;192.168.100.1/24&#34;</span>
<a id="L436"></a><span class="ln">   436</span>	<span class="comment">// or &#34;2001:DB8::/48&#34; as defined in RFC 4632 and RFC 4291.</span>
<a id="L437"></a><span class="ln">   437</span>	<span class="comment">// If the mask is not in the canonical form, it returns the</span>
<a id="L438"></a><span class="ln">   438</span>	<span class="comment">// string which consists of an IP address, followed by a slash</span>
<a id="L439"></a><span class="ln">   439</span>	<span class="comment">// character and a mask expressed as hexadecimal form with no</span>
<a id="L440"></a><span class="ln">   440</span>	<span class="comment">// punctuation like &#34;192.168.100.1/c000ff00&#34;.</span>
<a id="L441"></a><span class="ln">   441</span>	func (n *IPNet) String() string {
<a id="L442"></a><span class="ln">   442</span>		nn, m := networkNumberAndMask(n)
<a id="L443"></a><span class="ln">   443</span>		if nn == nil || m == nil {
<a id="L444"></a><span class="ln">   444</span>			return &#34;&lt;nil&gt;&#34;
<a id="L445"></a><span class="ln">   445</span>		}
<a id="L446"></a><span class="ln">   446</span>		l := simpleMaskLength(m)
<a id="L447"></a><span class="ln">   447</span>		if l == -1 {
<a id="L448"></a><span class="ln">   448</span>			return nn.String() + &#34;/&#34; + m.String()
<a id="L449"></a><span class="ln">   449</span>		}
<a id="L450"></a><span class="ln">   450</span>		return nn.String() + &#34;/&#34; + itod(uint(l))
<a id="L451"></a><span class="ln">   451</span>	}
<a id="L452"></a><span class="ln">   452</span>	
<a id="L453"></a><span class="ln">   453</span>	<span class="comment">// Network returns the address&#39;s network name, &#34;ip+net&#34;.</span>
<a id="L454"></a><span class="ln">   454</span>	func (n *IPNet) Network() string { return &#34;ip+net&#34; }
<a id="L455"></a><span class="ln">   455</span>	
<a id="L456"></a><span class="ln">   456</span>	<span class="comment">// Parse IPv4 address (d.d.d.d).</span>
<a id="L457"></a><span class="ln">   457</span>	func parseIPv4(s string) IP {
<a id="L458"></a><span class="ln">   458</span>		var p [IPv4len]byte
<a id="L459"></a><span class="ln">   459</span>		i := 0
<a id="L460"></a><span class="ln">   460</span>		for j := 0; j &lt; IPv4len; j++ {
<a id="L461"></a><span class="ln">   461</span>			if i &gt;= len(s) {
<a id="L462"></a><span class="ln">   462</span>				<span class="comment">// Missing octets.</span>
<a id="L463"></a><span class="ln">   463</span>				return nil
<a id="L464"></a><span class="ln">   464</span>			}
<a id="L465"></a><span class="ln">   465</span>			if j &gt; 0 {
<a id="L466"></a><span class="ln">   466</span>				if s[i] != &#39;.&#39; {
<a id="L467"></a><span class="ln">   467</span>					return nil
<a id="L468"></a><span class="ln">   468</span>				}
<a id="L469"></a><span class="ln">   469</span>				i++
<a id="L470"></a><span class="ln">   470</span>			}
<a id="L471"></a><span class="ln">   471</span>			var (
<a id="L472"></a><span class="ln">   472</span>				n  int
<a id="L473"></a><span class="ln">   473</span>				ok bool
<a id="L474"></a><span class="ln">   474</span>			)
<a id="L475"></a><span class="ln">   475</span>			n, i, ok = dtoi(s, i)
<a id="L476"></a><span class="ln">   476</span>			if !ok || n &gt; 0xFF {
<a id="L477"></a><span class="ln">   477</span>				return nil
<a id="L478"></a><span class="ln">   478</span>			}
<a id="L479"></a><span class="ln">   479</span>			p[j] = byte(n)
<a id="L480"></a><span class="ln">   480</span>		}
<a id="L481"></a><span class="ln">   481</span>		if i != len(s) {
<a id="L482"></a><span class="ln">   482</span>			return nil
<a id="L483"></a><span class="ln">   483</span>		}
<a id="L484"></a><span class="ln">   484</span>		return IPv4(p[0], p[1], p[2], p[3])
<a id="L485"></a><span class="ln">   485</span>	}
<a id="L486"></a><span class="ln">   486</span>	
<a id="L487"></a><span class="ln">   487</span>	<span class="comment">// Parse IPv6 address.  Many forms.</span>
<a id="L488"></a><span class="ln">   488</span>	<span class="comment">// The basic form is a sequence of eight colon-separated</span>
<a id="L489"></a><span class="ln">   489</span>	<span class="comment">// 16-bit hex numbers separated by colons,</span>
<a id="L490"></a><span class="ln">   490</span>	<span class="comment">// as in 0123:4567:89ab:cdef:0123:4567:89ab:cdef.</span>
<a id="L491"></a><span class="ln">   491</span>	<span class="comment">// Two exceptions:</span>
<a id="L492"></a><span class="ln">   492</span>	<span class="comment">//	* A run of zeros can be replaced with &#34;::&#34;.</span>
<a id="L493"></a><span class="ln">   493</span>	<span class="comment">//	* The last 32 bits can be in IPv4 form.</span>
<a id="L494"></a><span class="ln">   494</span>	<span class="comment">// Thus, ::ffff:1.2.3.4 is the IPv4 address 1.2.3.4.</span>
<a id="L495"></a><span class="ln">   495</span>	func parseIPv6(s string) IP {
<a id="L496"></a><span class="ln">   496</span>		p := make(IP, IPv6len)
<a id="L497"></a><span class="ln">   497</span>		ellipsis := -1 <span class="comment">// position of ellipsis in p</span>
<a id="L498"></a><span class="ln">   498</span>		i := 0         <span class="comment">// index in string s</span>
<a id="L499"></a><span class="ln">   499</span>	
<a id="L500"></a><span class="ln">   500</span>		<span class="comment">// Might have leading ellipsis</span>
<a id="L501"></a><span class="ln">   501</span>		if len(s) &gt;= 2 &amp;&amp; s[0] == &#39;:&#39; &amp;&amp; s[1] == &#39;:&#39; {
<a id="L502"></a><span class="ln">   502</span>			ellipsis = 0
<a id="L503"></a><span class="ln">   503</span>			i = 2
<a id="L504"></a><span class="ln">   504</span>			<span class="comment">// Might be only ellipsis</span>
<a id="L505"></a><span class="ln">   505</span>			if i == len(s) {
<a id="L506"></a><span class="ln">   506</span>				return p
<a id="L507"></a><span class="ln">   507</span>			}
<a id="L508"></a><span class="ln">   508</span>		}
<a id="L509"></a><span class="ln">   509</span>	
<a id="L510"></a><span class="ln">   510</span>		<span class="comment">// Loop, parsing hex numbers followed by colon.</span>
<a id="L511"></a><span class="ln">   511</span>		j := 0
<a id="L512"></a><span class="ln">   512</span>		for j &lt; IPv6len {
<a id="L513"></a><span class="ln">   513</span>			<span class="comment">// Hex number.</span>
<a id="L514"></a><span class="ln">   514</span>			n, i1, ok := xtoi(s, i)
<a id="L515"></a><span class="ln">   515</span>			if !ok || n &gt; 0xFFFF {
<a id="L516"></a><span class="ln">   516</span>				return nil
<a id="L517"></a><span class="ln">   517</span>			}
<a id="L518"></a><span class="ln">   518</span>	
<a id="L519"></a><span class="ln">   519</span>			<span class="comment">// If followed by dot, might be in trailing IPv4.</span>
<a id="L520"></a><span class="ln">   520</span>			if i1 &lt; len(s) &amp;&amp; s[i1] == &#39;.&#39; {
<a id="L521"></a><span class="ln">   521</span>				if ellipsis &lt; 0 &amp;&amp; j != IPv6len-IPv4len {
<a id="L522"></a><span class="ln">   522</span>					<span class="comment">// Not the right place.</span>
<a id="L523"></a><span class="ln">   523</span>					return nil
<a id="L524"></a><span class="ln">   524</span>				}
<a id="L525"></a><span class="ln">   525</span>				if j+IPv4len &gt; IPv6len {
<a id="L526"></a><span class="ln">   526</span>					<span class="comment">// Not enough room.</span>
<a id="L527"></a><span class="ln">   527</span>					return nil
<a id="L528"></a><span class="ln">   528</span>				}
<a id="L529"></a><span class="ln">   529</span>				p4 := parseIPv4(s[i:])
<a id="L530"></a><span class="ln">   530</span>				if p4 == nil {
<a id="L531"></a><span class="ln">   531</span>					return nil
<a id="L532"></a><span class="ln">   532</span>				}
<a id="L533"></a><span class="ln">   533</span>				p[j] = p4[12]
<a id="L534"></a><span class="ln">   534</span>				p[j+1] = p4[13]
<a id="L535"></a><span class="ln">   535</span>				p[j+2] = p4[14]
<a id="L536"></a><span class="ln">   536</span>				p[j+3] = p4[15]
<a id="L537"></a><span class="ln">   537</span>				i = len(s)
<a id="L538"></a><span class="ln">   538</span>				j += IPv4len
<a id="L539"></a><span class="ln">   539</span>				break
<a id="L540"></a><span class="ln">   540</span>			}
<a id="L541"></a><span class="ln">   541</span>	
<a id="L542"></a><span class="ln">   542</span>			<span class="comment">// Save this 16-bit chunk.</span>
<a id="L543"></a><span class="ln">   543</span>			p[j] = byte(n &gt;&gt; 8)
<a id="L544"></a><span class="ln">   544</span>			p[j+1] = byte(n)
<a id="L545"></a><span class="ln">   545</span>			j += 2
<a id="L546"></a><span class="ln">   546</span>	
<a id="L547"></a><span class="ln">   547</span>			<span class="comment">// Stop at end of string.</span>
<a id="L548"></a><span class="ln">   548</span>			i = i1
<a id="L549"></a><span class="ln">   549</span>			if i == len(s) {
<a id="L550"></a><span class="ln">   550</span>				break
<a id="L551"></a><span class="ln">   551</span>			}
<a id="L552"></a><span class="ln">   552</span>	
<a id="L553"></a><span class="ln">   553</span>			<span class="comment">// Otherwise must be followed by colon and more.</span>
<a id="L554"></a><span class="ln">   554</span>			if s[i] != &#39;:&#39; || i+1 == len(s) {
<a id="L555"></a><span class="ln">   555</span>				return nil
<a id="L556"></a><span class="ln">   556</span>			}
<a id="L557"></a><span class="ln">   557</span>			i++
<a id="L558"></a><span class="ln">   558</span>	
<a id="L559"></a><span class="ln">   559</span>			<span class="comment">// Look for ellipsis.</span>
<a id="L560"></a><span class="ln">   560</span>			if s[i] == &#39;:&#39; {
<a id="L561"></a><span class="ln">   561</span>				if ellipsis &gt;= 0 { <span class="comment">// already have one</span>
<a id="L562"></a><span class="ln">   562</span>					return nil
<a id="L563"></a><span class="ln">   563</span>				}
<a id="L564"></a><span class="ln">   564</span>				ellipsis = j
<a id="L565"></a><span class="ln">   565</span>				if i++; i == len(s) { <span class="comment">// can be at end</span>
<a id="L566"></a><span class="ln">   566</span>					break
<a id="L567"></a><span class="ln">   567</span>				}
<a id="L568"></a><span class="ln">   568</span>			}
<a id="L569"></a><span class="ln">   569</span>		}
<a id="L570"></a><span class="ln">   570</span>	
<a id="L571"></a><span class="ln">   571</span>		<span class="comment">// Must have used entire string.</span>
<a id="L572"></a><span class="ln">   572</span>		if i != len(s) {
<a id="L573"></a><span class="ln">   573</span>			return nil
<a id="L574"></a><span class="ln">   574</span>		}
<a id="L575"></a><span class="ln">   575</span>	
<a id="L576"></a><span class="ln">   576</span>		<span class="comment">// If didn&#39;t parse enough, expand ellipsis.</span>
<a id="L577"></a><span class="ln">   577</span>		if j &lt; IPv6len {
<a id="L578"></a><span class="ln">   578</span>			if ellipsis &lt; 0 {
<a id="L579"></a><span class="ln">   579</span>				return nil
<a id="L580"></a><span class="ln">   580</span>			}
<a id="L581"></a><span class="ln">   581</span>			n := IPv6len - j
<a id="L582"></a><span class="ln">   582</span>			for k := j - 1; k &gt;= ellipsis; k-- {
<a id="L583"></a><span class="ln">   583</span>				p[k+n] = p[k]
<a id="L584"></a><span class="ln">   584</span>			}
<a id="L585"></a><span class="ln">   585</span>			for k := ellipsis + n - 1; k &gt;= ellipsis; k-- {
<a id="L586"></a><span class="ln">   586</span>				p[k] = 0
<a id="L587"></a><span class="ln">   587</span>			}
<a id="L588"></a><span class="ln">   588</span>		}
<a id="L589"></a><span class="ln">   589</span>		return p
<a id="L590"></a><span class="ln">   590</span>	}
<a id="L591"></a><span class="ln">   591</span>	
<a id="L592"></a><span class="ln">   592</span>	<span class="comment">// A ParseError represents a malformed text string and the type of string that was expected.</span>
<a id="L593"></a><span class="ln">   593</span>	type ParseError struct {
<a id="L594"></a><span class="ln">   594</span>		Type string
<a id="L595"></a><span class="ln">   595</span>		Text string
<a id="L596"></a><span class="ln">   596</span>	}
<a id="L597"></a><span class="ln">   597</span>	
<a id="L598"></a><span class="ln">   598</span>	func (e *ParseError) Error() string {
<a id="L599"></a><span class="ln">   599</span>		return &#34;invalid &#34; + e.Type + &#34;: &#34; + e.Text
<a id="L600"></a><span class="ln">   600</span>	}
<a id="L601"></a><span class="ln">   601</span>	
<a id="L602"></a><span class="ln">   602</span>	func parseIP(s string) IP {
<a id="L603"></a><span class="ln">   603</span>		if p := parseIPv4(s); p != nil {
<a id="L604"></a><span class="ln">   604</span>			return p
<a id="L605"></a><span class="ln">   605</span>		}
<a id="L606"></a><span class="ln">   606</span>		if p := parseIPv6(s); p != nil {
<a id="L607"></a><span class="ln">   607</span>			return p
<a id="L608"></a><span class="ln">   608</span>		}
<a id="L609"></a><span class="ln">   609</span>		return nil
<a id="L610"></a><span class="ln">   610</span>	}
<a id="L611"></a><span class="ln">   611</span>	
<a id="L612"></a><span class="ln">   612</span>	<span class="comment">// ParseIP parses s as an IP address, returning the result.</span>
<a id="L613"></a><span class="ln">   613</span>	<span class="comment">// The string s can be in dotted decimal (&#34;74.125.19.99&#34;)</span>
<a id="L614"></a><span class="ln">   614</span>	<span class="comment">// or IPv6 (&#34;2001:4860:0:2001::68&#34;) form.</span>
<a id="L615"></a><span class="ln">   615</span>	<span class="comment">// If s is not a valid textual representation of an IP address,</span>
<a id="L616"></a><span class="ln">   616</span>	<span class="comment">// ParseIP returns nil.</span>
<a id="L617"></a><span class="ln">   617</span>	func ParseIP(s string) IP {
<a id="L618"></a><span class="ln">   618</span>		if p := parseIPv4(s); p != nil {
<a id="L619"></a><span class="ln">   619</span>			return p
<a id="L620"></a><span class="ln">   620</span>		}
<a id="L621"></a><span class="ln">   621</span>		return parseIPv6(s)
<a id="L622"></a><span class="ln">   622</span>	}
<a id="L623"></a><span class="ln">   623</span>	
<a id="L624"></a><span class="ln">   624</span>	<span class="comment">// ParseCIDR parses s as a CIDR notation IP address and mask,</span>
<a id="L625"></a><span class="ln">   625</span>	<span class="comment">// like &#34;192.168.100.1/24&#34; or &#34;2001:DB8::/48&#34;, as defined in</span>
<a id="L626"></a><span class="ln">   626</span>	<span class="comment">// RFC 4632 and RFC 4291.</span>
<a id="L627"></a><span class="ln">   627</span>	<span class="comment">//</span>
<a id="L628"></a><span class="ln">   628</span>	<span class="comment">// It returns the IP address and the network implied by the IP</span>
<a id="L629"></a><span class="ln">   629</span>	<span class="comment">// and mask.  For example, ParseCIDR(&#34;192.168.100.1/16&#34;) returns</span>
<a id="L630"></a><span class="ln">   630</span>	<span class="comment">// the IP address 192.168.100.1 and the network 192.168.0.0/16.</span>
<a id="L631"></a><span class="ln">   631</span>	func ParseCIDR(s string) (IP, *IPNet, error) {
<a id="L632"></a><span class="ln">   632</span>		i := byteIndex(s, &#39;/&#39;)
<a id="L633"></a><span class="ln">   633</span>		if i &lt; 0 {
<a id="L634"></a><span class="ln">   634</span>			return nil, nil, &amp;ParseError{&#34;CIDR address&#34;, s}
<a id="L635"></a><span class="ln">   635</span>		}
<a id="L636"></a><span class="ln">   636</span>		ipstr, maskstr := s[:i], s[i+1:]
<a id="L637"></a><span class="ln">   637</span>		iplen := IPv4len
<a id="L638"></a><span class="ln">   638</span>		ip := parseIPv4(ipstr)
<a id="L639"></a><span class="ln">   639</span>		if ip == nil {
<a id="L640"></a><span class="ln">   640</span>			iplen = IPv6len
<a id="L641"></a><span class="ln">   641</span>			ip = parseIPv6(ipstr)
<a id="L642"></a><span class="ln">   642</span>		}
<a id="L643"></a><span class="ln">   643</span>		n, i, ok := dtoi(maskstr, 0)
<a id="L644"></a><span class="ln">   644</span>		if ip == nil || !ok || i != len(maskstr) || n &lt; 0 || n &gt; 8*iplen {
<a id="L645"></a><span class="ln">   645</span>			return nil, nil, &amp;ParseError{&#34;CIDR address&#34;, s}
<a id="L646"></a><span class="ln">   646</span>		}
<a id="L647"></a><span class="ln">   647</span>		m := CIDRMask(n, 8*iplen)
<a id="L648"></a><span class="ln">   648</span>		return ip, &amp;IPNet{ip.Mask(m), m}, nil
<a id="L649"></a><span class="ln">   649</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

