<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/rpc/client.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/rpc/client.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package rpc
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bufio&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;encoding/gob&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;errors&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;io&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;log&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;net&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;net/http&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;sync&#34;
<a id="L16"></a><span class="ln">    16</span>	)
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// ServerError represents an error that has been returned from</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// the remote side of the RPC connection.</span>
<a id="L20"></a><span class="ln">    20</span>	type ServerError string
<a id="L21"></a><span class="ln">    21</span>	
<a id="L22"></a><span class="ln">    22</span>	func (e ServerError) Error() string {
<a id="L23"></a><span class="ln">    23</span>		return string(e)
<a id="L24"></a><span class="ln">    24</span>	}
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>	var ErrShutdown = errors.New(&#34;connection is shut down&#34;)
<a id="L27"></a><span class="ln">    27</span>	
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// Call represents an active RPC.</span>
<a id="L29"></a><span class="ln">    29</span>	type Call struct {
<a id="L30"></a><span class="ln">    30</span>		ServiceMethod string      <span class="comment">// The name of the service and method to call.</span>
<a id="L31"></a><span class="ln">    31</span>		Args          interface{} <span class="comment">// The argument to the function (*struct).</span>
<a id="L32"></a><span class="ln">    32</span>		Reply         interface{} <span class="comment">// The reply from the function (*struct).</span>
<a id="L33"></a><span class="ln">    33</span>		Error         error       <span class="comment">// After completion, the error status.</span>
<a id="L34"></a><span class="ln">    34</span>		Done          chan *Call  <span class="comment">// Strobes when call is complete.</span>
<a id="L35"></a><span class="ln">    35</span>	}
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// Client represents an RPC Client.</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// There may be multiple outstanding Calls associated</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// with a single Client, and a Client may be used by</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// multiple goroutines simultaneously.</span>
<a id="L41"></a><span class="ln">    41</span>	type Client struct {
<a id="L42"></a><span class="ln">    42</span>		mutex    sync.Mutex <span class="comment">// protects pending, seq, request</span>
<a id="L43"></a><span class="ln">    43</span>		sending  sync.Mutex
<a id="L44"></a><span class="ln">    44</span>		request  Request
<a id="L45"></a><span class="ln">    45</span>		seq      uint64
<a id="L46"></a><span class="ln">    46</span>		codec    ClientCodec
<a id="L47"></a><span class="ln">    47</span>		pending  map[uint64]*Call
<a id="L48"></a><span class="ln">    48</span>		closing  bool
<a id="L49"></a><span class="ln">    49</span>		shutdown bool
<a id="L50"></a><span class="ln">    50</span>	}
<a id="L51"></a><span class="ln">    51</span>	
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// A ClientCodec implements writing of RPC requests and</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">// reading of RPC responses for the client side of an RPC session.</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">// The client calls WriteRequest to write a request to the connection</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// and calls ReadResponseHeader and ReadResponseBody in pairs</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// to read responses.  The client calls Close when finished with the</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">// connection. ReadResponseBody may be called with a nil</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// argument to force the body of the response to be read and then</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// discarded.</span>
<a id="L60"></a><span class="ln">    60</span>	type ClientCodec interface {
<a id="L61"></a><span class="ln">    61</span>		WriteRequest(*Request, interface{}) error
<a id="L62"></a><span class="ln">    62</span>		ReadResponseHeader(*Response) error
<a id="L63"></a><span class="ln">    63</span>		ReadResponseBody(interface{}) error
<a id="L64"></a><span class="ln">    64</span>	
<a id="L65"></a><span class="ln">    65</span>		Close() error
<a id="L66"></a><span class="ln">    66</span>	}
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>	func (client *Client) send(call *Call) {
<a id="L69"></a><span class="ln">    69</span>		client.sending.Lock()
<a id="L70"></a><span class="ln">    70</span>		defer client.sending.Unlock()
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>		<span class="comment">// Register this call.</span>
<a id="L73"></a><span class="ln">    73</span>		client.mutex.Lock()
<a id="L74"></a><span class="ln">    74</span>		if client.shutdown {
<a id="L75"></a><span class="ln">    75</span>			call.Error = ErrShutdown
<a id="L76"></a><span class="ln">    76</span>			client.mutex.Unlock()
<a id="L77"></a><span class="ln">    77</span>			call.done()
<a id="L78"></a><span class="ln">    78</span>			return
<a id="L79"></a><span class="ln">    79</span>		}
<a id="L80"></a><span class="ln">    80</span>		seq := client.seq
<a id="L81"></a><span class="ln">    81</span>		client.seq++
<a id="L82"></a><span class="ln">    82</span>		client.pending[seq] = call
<a id="L83"></a><span class="ln">    83</span>		client.mutex.Unlock()
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>		<span class="comment">// Encode and send the request.</span>
<a id="L86"></a><span class="ln">    86</span>		client.request.Seq = seq
<a id="L87"></a><span class="ln">    87</span>		client.request.ServiceMethod = call.ServiceMethod
<a id="L88"></a><span class="ln">    88</span>		err := client.codec.WriteRequest(&amp;client.request, call.Args)
<a id="L89"></a><span class="ln">    89</span>		if err != nil {
<a id="L90"></a><span class="ln">    90</span>			client.mutex.Lock()
<a id="L91"></a><span class="ln">    91</span>			delete(client.pending, seq)
<a id="L92"></a><span class="ln">    92</span>			client.mutex.Unlock()
<a id="L93"></a><span class="ln">    93</span>			call.Error = err
<a id="L94"></a><span class="ln">    94</span>			call.done()
<a id="L95"></a><span class="ln">    95</span>		}
<a id="L96"></a><span class="ln">    96</span>	}
<a id="L97"></a><span class="ln">    97</span>	
<a id="L98"></a><span class="ln">    98</span>	func (client *Client) input() {
<a id="L99"></a><span class="ln">    99</span>		var err error
<a id="L100"></a><span class="ln">   100</span>		var response Response
<a id="L101"></a><span class="ln">   101</span>		for err == nil {
<a id="L102"></a><span class="ln">   102</span>			response = Response{}
<a id="L103"></a><span class="ln">   103</span>			err = client.codec.ReadResponseHeader(&amp;response)
<a id="L104"></a><span class="ln">   104</span>			if err != nil {
<a id="L105"></a><span class="ln">   105</span>				if err == io.EOF &amp;&amp; !client.closing {
<a id="L106"></a><span class="ln">   106</span>					err = io.ErrUnexpectedEOF
<a id="L107"></a><span class="ln">   107</span>				}
<a id="L108"></a><span class="ln">   108</span>				break
<a id="L109"></a><span class="ln">   109</span>			}
<a id="L110"></a><span class="ln">   110</span>			seq := response.Seq
<a id="L111"></a><span class="ln">   111</span>			client.mutex.Lock()
<a id="L112"></a><span class="ln">   112</span>			call := client.pending[seq]
<a id="L113"></a><span class="ln">   113</span>			delete(client.pending, seq)
<a id="L114"></a><span class="ln">   114</span>			client.mutex.Unlock()
<a id="L115"></a><span class="ln">   115</span>	
<a id="L116"></a><span class="ln">   116</span>			if response.Error == &#34;&#34; {
<a id="L117"></a><span class="ln">   117</span>				err = client.codec.ReadResponseBody(call.Reply)
<a id="L118"></a><span class="ln">   118</span>				if err != nil {
<a id="L119"></a><span class="ln">   119</span>					call.Error = errors.New(&#34;reading body &#34; + err.Error())
<a id="L120"></a><span class="ln">   120</span>				}
<a id="L121"></a><span class="ln">   121</span>			} else {
<a id="L122"></a><span class="ln">   122</span>				<span class="comment">// We&#39;ve got an error response. Give this to the request;</span>
<a id="L123"></a><span class="ln">   123</span>				<span class="comment">// any subsequent requests will get the ReadResponseBody</span>
<a id="L124"></a><span class="ln">   124</span>				<span class="comment">// error if there is one.</span>
<a id="L125"></a><span class="ln">   125</span>				call.Error = ServerError(response.Error)
<a id="L126"></a><span class="ln">   126</span>				err = client.codec.ReadResponseBody(nil)
<a id="L127"></a><span class="ln">   127</span>				if err != nil {
<a id="L128"></a><span class="ln">   128</span>					err = errors.New(&#34;reading error body: &#34; + err.Error())
<a id="L129"></a><span class="ln">   129</span>				}
<a id="L130"></a><span class="ln">   130</span>			}
<a id="L131"></a><span class="ln">   131</span>			call.done()
<a id="L132"></a><span class="ln">   132</span>		}
<a id="L133"></a><span class="ln">   133</span>		<span class="comment">// Terminate pending calls.</span>
<a id="L134"></a><span class="ln">   134</span>		client.sending.Lock()
<a id="L135"></a><span class="ln">   135</span>		client.mutex.Lock()
<a id="L136"></a><span class="ln">   136</span>		client.shutdown = true
<a id="L137"></a><span class="ln">   137</span>		closing := client.closing
<a id="L138"></a><span class="ln">   138</span>		for _, call := range client.pending {
<a id="L139"></a><span class="ln">   139</span>			call.Error = err
<a id="L140"></a><span class="ln">   140</span>			call.done()
<a id="L141"></a><span class="ln">   141</span>		}
<a id="L142"></a><span class="ln">   142</span>		client.mutex.Unlock()
<a id="L143"></a><span class="ln">   143</span>		client.sending.Unlock()
<a id="L144"></a><span class="ln">   144</span>		if err != io.EOF &amp;&amp; !closing {
<a id="L145"></a><span class="ln">   145</span>			log.Println(&#34;rpc: client protocol error:&#34;, err)
<a id="L146"></a><span class="ln">   146</span>		}
<a id="L147"></a><span class="ln">   147</span>	}
<a id="L148"></a><span class="ln">   148</span>	
<a id="L149"></a><span class="ln">   149</span>	func (call *Call) done() {
<a id="L150"></a><span class="ln">   150</span>		select {
<a id="L151"></a><span class="ln">   151</span>		case call.Done &lt;- call:
<a id="L152"></a><span class="ln">   152</span>			<span class="comment">// ok</span>
<a id="L153"></a><span class="ln">   153</span>		default:
<a id="L154"></a><span class="ln">   154</span>			<span class="comment">// We don&#39;t want to block here.  It is the caller&#39;s responsibility to make</span>
<a id="L155"></a><span class="ln">   155</span>			<span class="comment">// sure the channel has enough buffer space. See comment in Go().</span>
<a id="L156"></a><span class="ln">   156</span>			log.Println(&#34;rpc: discarding Call reply due to insufficient Done chan capacity&#34;)
<a id="L157"></a><span class="ln">   157</span>		}
<a id="L158"></a><span class="ln">   158</span>	}
<a id="L159"></a><span class="ln">   159</span>	
<a id="L160"></a><span class="ln">   160</span>	<span class="comment">// NewClient returns a new Client to handle requests to the</span>
<a id="L161"></a><span class="ln">   161</span>	<span class="comment">// set of services at the other end of the connection.</span>
<a id="L162"></a><span class="ln">   162</span>	<span class="comment">// It adds a buffer to the write side of the connection so</span>
<a id="L163"></a><span class="ln">   163</span>	<span class="comment">// the header and payload are sent as a unit.</span>
<a id="L164"></a><span class="ln">   164</span>	func NewClient(conn io.ReadWriteCloser) *Client {
<a id="L165"></a><span class="ln">   165</span>		encBuf := bufio.NewWriter(conn)
<a id="L166"></a><span class="ln">   166</span>		client := &amp;gobClientCodec{conn, gob.NewDecoder(conn), gob.NewEncoder(encBuf), encBuf}
<a id="L167"></a><span class="ln">   167</span>		return NewClientWithCodec(client)
<a id="L168"></a><span class="ln">   168</span>	}
<a id="L169"></a><span class="ln">   169</span>	
<a id="L170"></a><span class="ln">   170</span>	<span class="comment">// NewClientWithCodec is like NewClient but uses the specified</span>
<a id="L171"></a><span class="ln">   171</span>	<span class="comment">// codec to encode requests and decode responses.</span>
<a id="L172"></a><span class="ln">   172</span>	func NewClientWithCodec(codec ClientCodec) *Client {
<a id="L173"></a><span class="ln">   173</span>		client := &amp;Client{
<a id="L174"></a><span class="ln">   174</span>			codec:   codec,
<a id="L175"></a><span class="ln">   175</span>			pending: make(map[uint64]*Call),
<a id="L176"></a><span class="ln">   176</span>		}
<a id="L177"></a><span class="ln">   177</span>		go client.input()
<a id="L178"></a><span class="ln">   178</span>		return client
<a id="L179"></a><span class="ln">   179</span>	}
<a id="L180"></a><span class="ln">   180</span>	
<a id="L181"></a><span class="ln">   181</span>	type gobClientCodec struct {
<a id="L182"></a><span class="ln">   182</span>		rwc    io.ReadWriteCloser
<a id="L183"></a><span class="ln">   183</span>		dec    *gob.Decoder
<a id="L184"></a><span class="ln">   184</span>		enc    *gob.Encoder
<a id="L185"></a><span class="ln">   185</span>		encBuf *bufio.Writer
<a id="L186"></a><span class="ln">   186</span>	}
<a id="L187"></a><span class="ln">   187</span>	
<a id="L188"></a><span class="ln">   188</span>	func (c *gobClientCodec) WriteRequest(r *Request, body interface{}) (err error) {
<a id="L189"></a><span class="ln">   189</span>		if err = c.enc.Encode(r); err != nil {
<a id="L190"></a><span class="ln">   190</span>			return
<a id="L191"></a><span class="ln">   191</span>		}
<a id="L192"></a><span class="ln">   192</span>		if err = c.enc.Encode(body); err != nil {
<a id="L193"></a><span class="ln">   193</span>			return
<a id="L194"></a><span class="ln">   194</span>		}
<a id="L195"></a><span class="ln">   195</span>		return c.encBuf.Flush()
<a id="L196"></a><span class="ln">   196</span>	}
<a id="L197"></a><span class="ln">   197</span>	
<a id="L198"></a><span class="ln">   198</span>	func (c *gobClientCodec) ReadResponseHeader(r *Response) error {
<a id="L199"></a><span class="ln">   199</span>		return c.dec.Decode(r)
<a id="L200"></a><span class="ln">   200</span>	}
<a id="L201"></a><span class="ln">   201</span>	
<a id="L202"></a><span class="ln">   202</span>	func (c *gobClientCodec) ReadResponseBody(body interface{}) error {
<a id="L203"></a><span class="ln">   203</span>		return c.dec.Decode(body)
<a id="L204"></a><span class="ln">   204</span>	}
<a id="L205"></a><span class="ln">   205</span>	
<a id="L206"></a><span class="ln">   206</span>	func (c *gobClientCodec) Close() error {
<a id="L207"></a><span class="ln">   207</span>		return c.rwc.Close()
<a id="L208"></a><span class="ln">   208</span>	}
<a id="L209"></a><span class="ln">   209</span>	
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// DialHTTP connects to an HTTP RPC server at the specified network address</span>
<a id="L211"></a><span class="ln">   211</span>	<span class="comment">// listening on the default HTTP RPC path.</span>
<a id="L212"></a><span class="ln">   212</span>	func DialHTTP(network, address string) (*Client, error) {
<a id="L213"></a><span class="ln">   213</span>		return DialHTTPPath(network, address, DefaultRPCPath)
<a id="L214"></a><span class="ln">   214</span>	}
<a id="L215"></a><span class="ln">   215</span>	
<a id="L216"></a><span class="ln">   216</span>	<span class="comment">// DialHTTPPath connects to an HTTP RPC server </span>
<a id="L217"></a><span class="ln">   217</span>	<span class="comment">// at the specified network address and path.</span>
<a id="L218"></a><span class="ln">   218</span>	func DialHTTPPath(network, address, path string) (*Client, error) {
<a id="L219"></a><span class="ln">   219</span>		var err error
<a id="L220"></a><span class="ln">   220</span>		conn, err := net.Dial(network, address)
<a id="L221"></a><span class="ln">   221</span>		if err != nil {
<a id="L222"></a><span class="ln">   222</span>			return nil, err
<a id="L223"></a><span class="ln">   223</span>		}
<a id="L224"></a><span class="ln">   224</span>		io.WriteString(conn, &#34;CONNECT &#34;+path+&#34; HTTP/1.0\n\n&#34;)
<a id="L225"></a><span class="ln">   225</span>	
<a id="L226"></a><span class="ln">   226</span>		<span class="comment">// Require successful HTTP response</span>
<a id="L227"></a><span class="ln">   227</span>		<span class="comment">// before switching to RPC protocol.</span>
<a id="L228"></a><span class="ln">   228</span>		resp, err := http.ReadResponse(bufio.NewReader(conn), &amp;http.Request{Method: &#34;CONNECT&#34;})
<a id="L229"></a><span class="ln">   229</span>		if err == nil &amp;&amp; resp.Status == connected {
<a id="L230"></a><span class="ln">   230</span>			return NewClient(conn), nil
<a id="L231"></a><span class="ln">   231</span>		}
<a id="L232"></a><span class="ln">   232</span>		if err == nil {
<a id="L233"></a><span class="ln">   233</span>			err = errors.New(&#34;unexpected HTTP response: &#34; + resp.Status)
<a id="L234"></a><span class="ln">   234</span>		}
<a id="L235"></a><span class="ln">   235</span>		conn.Close()
<a id="L236"></a><span class="ln">   236</span>		return nil, &amp;net.OpError{
<a id="L237"></a><span class="ln">   237</span>			Op:   &#34;dial-http&#34;,
<a id="L238"></a><span class="ln">   238</span>			Net:  network + &#34; &#34; + address,
<a id="L239"></a><span class="ln">   239</span>			Addr: nil,
<a id="L240"></a><span class="ln">   240</span>			Err:  err,
<a id="L241"></a><span class="ln">   241</span>		}
<a id="L242"></a><span class="ln">   242</span>	}
<a id="L243"></a><span class="ln">   243</span>	
<a id="L244"></a><span class="ln">   244</span>	<span class="comment">// Dial connects to an RPC server at the specified network address.</span>
<a id="L245"></a><span class="ln">   245</span>	func Dial(network, address string) (*Client, error) {
<a id="L246"></a><span class="ln">   246</span>		conn, err := net.Dial(network, address)
<a id="L247"></a><span class="ln">   247</span>		if err != nil {
<a id="L248"></a><span class="ln">   248</span>			return nil, err
<a id="L249"></a><span class="ln">   249</span>		}
<a id="L250"></a><span class="ln">   250</span>		return NewClient(conn), nil
<a id="L251"></a><span class="ln">   251</span>	}
<a id="L252"></a><span class="ln">   252</span>	
<a id="L253"></a><span class="ln">   253</span>	func (client *Client) Close() error {
<a id="L254"></a><span class="ln">   254</span>		client.mutex.Lock()
<a id="L255"></a><span class="ln">   255</span>		if client.shutdown || client.closing {
<a id="L256"></a><span class="ln">   256</span>			client.mutex.Unlock()
<a id="L257"></a><span class="ln">   257</span>			return ErrShutdown
<a id="L258"></a><span class="ln">   258</span>		}
<a id="L259"></a><span class="ln">   259</span>		client.closing = true
<a id="L260"></a><span class="ln">   260</span>		client.mutex.Unlock()
<a id="L261"></a><span class="ln">   261</span>		return client.codec.Close()
<a id="L262"></a><span class="ln">   262</span>	}
<a id="L263"></a><span class="ln">   263</span>	
<a id="L264"></a><span class="ln">   264</span>	<span class="comment">// Go invokes the function asynchronously.  It returns the Call structure representing</span>
<a id="L265"></a><span class="ln">   265</span>	<span class="comment">// the invocation.  The done channel will signal when the call is complete by returning</span>
<a id="L266"></a><span class="ln">   266</span>	<span class="comment">// the same Call object.  If done is nil, Go will allocate a new channel.</span>
<a id="L267"></a><span class="ln">   267</span>	<span class="comment">// If non-nil, done must be buffered or Go will deliberately crash.</span>
<a id="L268"></a><span class="ln">   268</span>	func (client *Client) Go(serviceMethod string, args interface{}, reply interface{}, done chan *Call) *Call {
<a id="L269"></a><span class="ln">   269</span>		call := new(Call)
<a id="L270"></a><span class="ln">   270</span>		call.ServiceMethod = serviceMethod
<a id="L271"></a><span class="ln">   271</span>		call.Args = args
<a id="L272"></a><span class="ln">   272</span>		call.Reply = reply
<a id="L273"></a><span class="ln">   273</span>		if done == nil {
<a id="L274"></a><span class="ln">   274</span>			done = make(chan *Call, 10) <span class="comment">// buffered.</span>
<a id="L275"></a><span class="ln">   275</span>		} else {
<a id="L276"></a><span class="ln">   276</span>			<span class="comment">// If caller passes done != nil, it must arrange that</span>
<a id="L277"></a><span class="ln">   277</span>			<span class="comment">// done has enough buffer for the number of simultaneous</span>
<a id="L278"></a><span class="ln">   278</span>			<span class="comment">// RPCs that will be using that channel.  If the channel</span>
<a id="L279"></a><span class="ln">   279</span>			<span class="comment">// is totally unbuffered, it&#39;s best not to run at all.</span>
<a id="L280"></a><span class="ln">   280</span>			if cap(done) == 0 {
<a id="L281"></a><span class="ln">   281</span>				log.Panic(&#34;rpc: done channel is unbuffered&#34;)
<a id="L282"></a><span class="ln">   282</span>			}
<a id="L283"></a><span class="ln">   283</span>		}
<a id="L284"></a><span class="ln">   284</span>		call.Done = done
<a id="L285"></a><span class="ln">   285</span>		client.send(call)
<a id="L286"></a><span class="ln">   286</span>		return call
<a id="L287"></a><span class="ln">   287</span>	}
<a id="L288"></a><span class="ln">   288</span>	
<a id="L289"></a><span class="ln">   289</span>	<span class="comment">// Call invokes the named function, waits for it to complete, and returns its error status.</span>
<a id="L290"></a><span class="ln">   290</span>	func (client *Client) Call(serviceMethod string, args interface{}, reply interface{}) error {
<a id="L291"></a><span class="ln">   291</span>		call := &lt;-client.Go(serviceMethod, args, reply, make(chan *Call, 1)).Done
<a id="L292"></a><span class="ln">   292</span>		return call.Error
<a id="L293"></a><span class="ln">   293</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

