<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/rpc/debug.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/rpc/debug.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package rpc
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">/*
</span><a id="L8"></a><span class="ln">     8</span>	<span class="comment">	Some HTML presented at http://machine:port/debug/rpc
</span><a id="L9"></a><span class="ln">     9</span>	<span class="comment">	Lists services, their methods, and some statistics, still rudimentary.
</span><a id="L10"></a><span class="ln">    10</span>	<span class="comment">*/</span>
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	import (
<a id="L13"></a><span class="ln">    13</span>		&#34;fmt&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;net/http&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;sort&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;text/template&#34;
<a id="L17"></a><span class="ln">    17</span>	)
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	const debugText = `&lt;html&gt;
<a id="L20"></a><span class="ln">    20</span>		&lt;body&gt;
<a id="L21"></a><span class="ln">    21</span>		&lt;title&gt;Services&lt;/title&gt;
<a id="L22"></a><span class="ln">    22</span>		{{range .}}
<a id="L23"></a><span class="ln">    23</span>		&lt;hr&gt;
<a id="L24"></a><span class="ln">    24</span>		Service {{.Name}}
<a id="L25"></a><span class="ln">    25</span>		&lt;hr&gt;
<a id="L26"></a><span class="ln">    26</span>			&lt;table&gt;
<a id="L27"></a><span class="ln">    27</span>			&lt;th align=center&gt;Method&lt;/th&gt;&lt;th align=center&gt;Calls&lt;/th&gt;
<a id="L28"></a><span class="ln">    28</span>			{{range .Method}}
<a id="L29"></a><span class="ln">    29</span>				&lt;tr&gt;
<a id="L30"></a><span class="ln">    30</span>				&lt;td align=left font=fixed&gt;{{.Name}}({{.Type.ArgType}}, {{.Type.ReplyType}}) error&lt;/td&gt;
<a id="L31"></a><span class="ln">    31</span>				&lt;td align=center&gt;{{.Type.NumCalls}}&lt;/td&gt;
<a id="L32"></a><span class="ln">    32</span>				&lt;/tr&gt;
<a id="L33"></a><span class="ln">    33</span>			{{end}}
<a id="L34"></a><span class="ln">    34</span>			&lt;/table&gt;
<a id="L35"></a><span class="ln">    35</span>		{{end}}
<a id="L36"></a><span class="ln">    36</span>		&lt;/body&gt;
<a id="L37"></a><span class="ln">    37</span>		&lt;/html&gt;`
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>	var debug = template.Must(template.New(&#34;RPC debug&#34;).Parse(debugText))
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>	type debugMethod struct {
<a id="L42"></a><span class="ln">    42</span>		Type *methodType
<a id="L43"></a><span class="ln">    43</span>		Name string
<a id="L44"></a><span class="ln">    44</span>	}
<a id="L45"></a><span class="ln">    45</span>	
<a id="L46"></a><span class="ln">    46</span>	type methodArray []debugMethod
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>	type debugService struct {
<a id="L49"></a><span class="ln">    49</span>		Service *service
<a id="L50"></a><span class="ln">    50</span>		Name    string
<a id="L51"></a><span class="ln">    51</span>		Method  methodArray
<a id="L52"></a><span class="ln">    52</span>	}
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>	type serviceArray []debugService
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>	func (s serviceArray) Len() int           { return len(s) }
<a id="L57"></a><span class="ln">    57</span>	func (s serviceArray) Less(i, j int) bool { return s[i].Name &lt; s[j].Name }
<a id="L58"></a><span class="ln">    58</span>	func (s serviceArray) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	func (m methodArray) Len() int           { return len(m) }
<a id="L61"></a><span class="ln">    61</span>	func (m methodArray) Less(i, j int) bool { return m[i].Name &lt; m[j].Name }
<a id="L62"></a><span class="ln">    62</span>	func (m methodArray) Swap(i, j int)      { m[i], m[j] = m[j], m[i] }
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>	type debugHTTP struct {
<a id="L65"></a><span class="ln">    65</span>		*Server
<a id="L66"></a><span class="ln">    66</span>	}
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// Runs at /debug/rpc</span>
<a id="L69"></a><span class="ln">    69</span>	func (server debugHTTP) ServeHTTP(w http.ResponseWriter, req *http.Request) {
<a id="L70"></a><span class="ln">    70</span>		<span class="comment">// Build a sorted version of the data.</span>
<a id="L71"></a><span class="ln">    71</span>		var services = make(serviceArray, len(server.serviceMap))
<a id="L72"></a><span class="ln">    72</span>		i := 0
<a id="L73"></a><span class="ln">    73</span>		server.mu.Lock()
<a id="L74"></a><span class="ln">    74</span>		for sname, service := range server.serviceMap {
<a id="L75"></a><span class="ln">    75</span>			services[i] = debugService{service, sname, make(methodArray, len(service.method))}
<a id="L76"></a><span class="ln">    76</span>			j := 0
<a id="L77"></a><span class="ln">    77</span>			for mname, method := range service.method {
<a id="L78"></a><span class="ln">    78</span>				services[i].Method[j] = debugMethod{method, mname}
<a id="L79"></a><span class="ln">    79</span>				j++
<a id="L80"></a><span class="ln">    80</span>			}
<a id="L81"></a><span class="ln">    81</span>			sort.Sort(services[i].Method)
<a id="L82"></a><span class="ln">    82</span>			i++
<a id="L83"></a><span class="ln">    83</span>		}
<a id="L84"></a><span class="ln">    84</span>		server.mu.Unlock()
<a id="L85"></a><span class="ln">    85</span>		sort.Sort(services)
<a id="L86"></a><span class="ln">    86</span>		err := debug.Execute(w, services)
<a id="L87"></a><span class="ln">    87</span>		if err != nil {
<a id="L88"></a><span class="ln">    88</span>			fmt.Fprintln(w, &#34;rpc: error executing template:&#34;, err.Error())
<a id="L89"></a><span class="ln">    89</span>		}
<a id="L90"></a><span class="ln">    90</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

