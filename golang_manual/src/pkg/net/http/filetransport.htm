<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/http/filetransport.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/http/filetransport.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package http
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;fmt&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;io&#34;
<a id="L10"></a><span class="ln">    10</span>	)
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// fileTransport implements RoundTripper for the &#39;file&#39; protocol.</span>
<a id="L13"></a><span class="ln">    13</span>	type fileTransport struct {
<a id="L14"></a><span class="ln">    14</span>		fh fileHandler
<a id="L15"></a><span class="ln">    15</span>	}
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// NewFileTransport returns a new RoundTripper, serving the provided</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// FileSystem. The returned RoundTripper ignores the URL host in its</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// incoming requests, as well as most other properties of the</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// request.</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">//</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// The typical use case for NewFileTransport is to register the &#34;file&#34;</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// protocol with a Transport, as in:</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">//   t := &amp;http.Transport{}</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">//   t.RegisterProtocol(&#34;file&#34;, http.NewFileTransport(http.Dir(&#34;/&#34;)))</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">//   c := &amp;http.Client{Transport: t}</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">//   res, err := c.Get(&#34;file:///etc/passwd&#34;)</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">//   ...</span>
<a id="L30"></a><span class="ln">    30</span>	func NewFileTransport(fs FileSystem) RoundTripper {
<a id="L31"></a><span class="ln">    31</span>		return fileTransport{fileHandler{fs}}
<a id="L32"></a><span class="ln">    32</span>	}
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>	func (t fileTransport) RoundTrip(req *Request) (resp *Response, err error) {
<a id="L35"></a><span class="ln">    35</span>		<span class="comment">// We start ServeHTTP in a goroutine, which may take a long</span>
<a id="L36"></a><span class="ln">    36</span>		<span class="comment">// time if the file is large.  The newPopulateResponseWriter</span>
<a id="L37"></a><span class="ln">    37</span>		<span class="comment">// call returns a channel which either ServeHTTP or finish()</span>
<a id="L38"></a><span class="ln">    38</span>		<span class="comment">// sends our *Response on, once the *Response itself has been</span>
<a id="L39"></a><span class="ln">    39</span>		<span class="comment">// populated (even if the body itself is still being</span>
<a id="L40"></a><span class="ln">    40</span>		<span class="comment">// written to the res.Body, a pipe)</span>
<a id="L41"></a><span class="ln">    41</span>		rw, resc := newPopulateResponseWriter()
<a id="L42"></a><span class="ln">    42</span>		go func() {
<a id="L43"></a><span class="ln">    43</span>			t.fh.ServeHTTP(rw, req)
<a id="L44"></a><span class="ln">    44</span>			rw.finish()
<a id="L45"></a><span class="ln">    45</span>		}()
<a id="L46"></a><span class="ln">    46</span>		return &lt;-resc, nil
<a id="L47"></a><span class="ln">    47</span>	}
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>	func newPopulateResponseWriter() (*populateResponse, &lt;-chan *Response) {
<a id="L50"></a><span class="ln">    50</span>		pr, pw := io.Pipe()
<a id="L51"></a><span class="ln">    51</span>		rw := &amp;populateResponse{
<a id="L52"></a><span class="ln">    52</span>			ch: make(chan *Response),
<a id="L53"></a><span class="ln">    53</span>			pw: pw,
<a id="L54"></a><span class="ln">    54</span>			res: &amp;Response{
<a id="L55"></a><span class="ln">    55</span>				Proto:      &#34;HTTP/1.0&#34;,
<a id="L56"></a><span class="ln">    56</span>				ProtoMajor: 1,
<a id="L57"></a><span class="ln">    57</span>				Header:     make(Header),
<a id="L58"></a><span class="ln">    58</span>				Close:      true,
<a id="L59"></a><span class="ln">    59</span>				Body:       pr,
<a id="L60"></a><span class="ln">    60</span>			},
<a id="L61"></a><span class="ln">    61</span>		}
<a id="L62"></a><span class="ln">    62</span>		return rw, rw.ch
<a id="L63"></a><span class="ln">    63</span>	}
<a id="L64"></a><span class="ln">    64</span>	
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// populateResponse is a ResponseWriter that populates the *Response</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">// in res, and writes its body to a pipe connected to the response</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// body. Once writes begin or finish() is called, the response is sent</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// on ch.</span>
<a id="L69"></a><span class="ln">    69</span>	type populateResponse struct {
<a id="L70"></a><span class="ln">    70</span>		res          *Response
<a id="L71"></a><span class="ln">    71</span>		ch           chan *Response
<a id="L72"></a><span class="ln">    72</span>		wroteHeader  bool
<a id="L73"></a><span class="ln">    73</span>		hasContent   bool
<a id="L74"></a><span class="ln">    74</span>		sentResponse bool
<a id="L75"></a><span class="ln">    75</span>		pw           *io.PipeWriter
<a id="L76"></a><span class="ln">    76</span>	}
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>	func (pr *populateResponse) finish() {
<a id="L79"></a><span class="ln">    79</span>		if !pr.wroteHeader {
<a id="L80"></a><span class="ln">    80</span>			pr.WriteHeader(500)
<a id="L81"></a><span class="ln">    81</span>		}
<a id="L82"></a><span class="ln">    82</span>		if !pr.sentResponse {
<a id="L83"></a><span class="ln">    83</span>			pr.sendResponse()
<a id="L84"></a><span class="ln">    84</span>		}
<a id="L85"></a><span class="ln">    85</span>		pr.pw.Close()
<a id="L86"></a><span class="ln">    86</span>	}
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>	func (pr *populateResponse) sendResponse() {
<a id="L89"></a><span class="ln">    89</span>		if pr.sentResponse {
<a id="L90"></a><span class="ln">    90</span>			return
<a id="L91"></a><span class="ln">    91</span>		}
<a id="L92"></a><span class="ln">    92</span>		pr.sentResponse = true
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>		if pr.hasContent {
<a id="L95"></a><span class="ln">    95</span>			pr.res.ContentLength = -1
<a id="L96"></a><span class="ln">    96</span>		}
<a id="L97"></a><span class="ln">    97</span>		pr.ch &lt;- pr.res
<a id="L98"></a><span class="ln">    98</span>	}
<a id="L99"></a><span class="ln">    99</span>	
<a id="L100"></a><span class="ln">   100</span>	func (pr *populateResponse) Header() Header {
<a id="L101"></a><span class="ln">   101</span>		return pr.res.Header
<a id="L102"></a><span class="ln">   102</span>	}
<a id="L103"></a><span class="ln">   103</span>	
<a id="L104"></a><span class="ln">   104</span>	func (pr *populateResponse) WriteHeader(code int) {
<a id="L105"></a><span class="ln">   105</span>		if pr.wroteHeader {
<a id="L106"></a><span class="ln">   106</span>			return
<a id="L107"></a><span class="ln">   107</span>		}
<a id="L108"></a><span class="ln">   108</span>		pr.wroteHeader = true
<a id="L109"></a><span class="ln">   109</span>	
<a id="L110"></a><span class="ln">   110</span>		pr.res.StatusCode = code
<a id="L111"></a><span class="ln">   111</span>		pr.res.Status = fmt.Sprintf(&#34;%d %s&#34;, code, StatusText(code))
<a id="L112"></a><span class="ln">   112</span>	}
<a id="L113"></a><span class="ln">   113</span>	
<a id="L114"></a><span class="ln">   114</span>	func (pr *populateResponse) Write(p []byte) (n int, err error) {
<a id="L115"></a><span class="ln">   115</span>		if !pr.wroteHeader {
<a id="L116"></a><span class="ln">   116</span>			pr.WriteHeader(StatusOK)
<a id="L117"></a><span class="ln">   117</span>		}
<a id="L118"></a><span class="ln">   118</span>		pr.hasContent = true
<a id="L119"></a><span class="ln">   119</span>		if !pr.sentResponse {
<a id="L120"></a><span class="ln">   120</span>			pr.sendResponse()
<a id="L121"></a><span class="ln">   121</span>		}
<a id="L122"></a><span class="ln">   122</span>		return pr.pw.Write(p)
<a id="L123"></a><span class="ln">   123</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

