<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/http/httputil/persist.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/http/httputil/persist.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package httputil provides HTTP utility functions, complementing the</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// more common ones in the net/http package.</span>
<a id="L7"></a><span class="ln">     7</span>	package httputil
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;bufio&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;errors&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;io&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;net&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;net/http&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;net/textproto&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;sync&#34;
<a id="L17"></a><span class="ln">    17</span>	)
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	var (
<a id="L20"></a><span class="ln">    20</span>		ErrPersistEOF = &amp;http.ProtocolError{ErrorString: &#34;persistent connection closed&#34;}
<a id="L21"></a><span class="ln">    21</span>		ErrClosed     = &amp;http.ProtocolError{ErrorString: &#34;connection closed by user&#34;}
<a id="L22"></a><span class="ln">    22</span>		ErrPipeline   = &amp;http.ProtocolError{ErrorString: &#34;pipeline error&#34;}
<a id="L23"></a><span class="ln">    23</span>	)
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// This is an API usage error - the local side is closed.</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// ErrPersistEOF (above) reports that the remote side is closed.</span>
<a id="L27"></a><span class="ln">    27</span>	var errClosed = errors.New(&#34;i/o operation on closed connection&#34;)
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// A ServerConn reads requests and sends responses over an underlying</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// connection, until the HTTP keepalive logic commands an end. ServerConn</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// also allows hijacking the underlying connection by calling Hijack</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// to regain control over the connection. ServerConn supports pipe-lining,</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// i.e. requests can be read out of sync (but in the same order) while the</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// respective responses are sent.</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// ServerConn is low-level and should not be needed by most applications.</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// See Server.</span>
<a id="L38"></a><span class="ln">    38</span>	type ServerConn struct {
<a id="L39"></a><span class="ln">    39</span>		lk              sync.Mutex <span class="comment">// read-write protects the following fields</span>
<a id="L40"></a><span class="ln">    40</span>		c               net.Conn
<a id="L41"></a><span class="ln">    41</span>		r               *bufio.Reader
<a id="L42"></a><span class="ln">    42</span>		re, we          error <span class="comment">// read/write errors</span>
<a id="L43"></a><span class="ln">    43</span>		lastbody        io.ReadCloser
<a id="L44"></a><span class="ln">    44</span>		nread, nwritten int
<a id="L45"></a><span class="ln">    45</span>		pipereq         map[*http.Request]uint
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>		pipe textproto.Pipeline
<a id="L48"></a><span class="ln">    48</span>	}
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// NewServerConn returns a new ServerConn reading and writing c.  If r is not</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// nil, it is the buffer to use when reading c.</span>
<a id="L52"></a><span class="ln">    52</span>	func NewServerConn(c net.Conn, r *bufio.Reader) *ServerConn {
<a id="L53"></a><span class="ln">    53</span>		if r == nil {
<a id="L54"></a><span class="ln">    54</span>			r = bufio.NewReader(c)
<a id="L55"></a><span class="ln">    55</span>		}
<a id="L56"></a><span class="ln">    56</span>		return &amp;ServerConn{c: c, r: r, pipereq: make(map[*http.Request]uint)}
<a id="L57"></a><span class="ln">    57</span>	}
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// Hijack detaches the ServerConn and returns the underlying connection as well</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// as the read-side bufio which may have some left over data. Hijack may be</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">// called before Read has signaled the end of the keep-alive logic. The user</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">// should not call Hijack while Read or Write is in progress.</span>
<a id="L63"></a><span class="ln">    63</span>	func (sc *ServerConn) Hijack() (c net.Conn, r *bufio.Reader) {
<a id="L64"></a><span class="ln">    64</span>		sc.lk.Lock()
<a id="L65"></a><span class="ln">    65</span>		defer sc.lk.Unlock()
<a id="L66"></a><span class="ln">    66</span>		c = sc.c
<a id="L67"></a><span class="ln">    67</span>		r = sc.r
<a id="L68"></a><span class="ln">    68</span>		sc.c = nil
<a id="L69"></a><span class="ln">    69</span>		sc.r = nil
<a id="L70"></a><span class="ln">    70</span>		return
<a id="L71"></a><span class="ln">    71</span>	}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// Close calls Hijack and then also closes the underlying connection</span>
<a id="L74"></a><span class="ln">    74</span>	func (sc *ServerConn) Close() error {
<a id="L75"></a><span class="ln">    75</span>		c, _ := sc.Hijack()
<a id="L76"></a><span class="ln">    76</span>		if c != nil {
<a id="L77"></a><span class="ln">    77</span>			return c.Close()
<a id="L78"></a><span class="ln">    78</span>		}
<a id="L79"></a><span class="ln">    79</span>		return nil
<a id="L80"></a><span class="ln">    80</span>	}
<a id="L81"></a><span class="ln">    81</span>	
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">// Read returns the next request on the wire. An ErrPersistEOF is returned if</span>
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">// it is gracefully determined that there are no more requests (e.g. after the</span>
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">// first request on an HTTP/1.0 connection, or after a Connection:close on a</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">// HTTP/1.1 connection).</span>
<a id="L86"></a><span class="ln">    86</span>	func (sc *ServerConn) Read() (req *http.Request, err error) {
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>		<span class="comment">// Ensure ordered execution of Reads and Writes</span>
<a id="L89"></a><span class="ln">    89</span>		id := sc.pipe.Next()
<a id="L90"></a><span class="ln">    90</span>		sc.pipe.StartRequest(id)
<a id="L91"></a><span class="ln">    91</span>		defer func() {
<a id="L92"></a><span class="ln">    92</span>			sc.pipe.EndRequest(id)
<a id="L93"></a><span class="ln">    93</span>			if req == nil {
<a id="L94"></a><span class="ln">    94</span>				sc.pipe.StartResponse(id)
<a id="L95"></a><span class="ln">    95</span>				sc.pipe.EndResponse(id)
<a id="L96"></a><span class="ln">    96</span>			} else {
<a id="L97"></a><span class="ln">    97</span>				<span class="comment">// Remember the pipeline id of this request</span>
<a id="L98"></a><span class="ln">    98</span>				sc.lk.Lock()
<a id="L99"></a><span class="ln">    99</span>				sc.pipereq[req] = id
<a id="L100"></a><span class="ln">   100</span>				sc.lk.Unlock()
<a id="L101"></a><span class="ln">   101</span>			}
<a id="L102"></a><span class="ln">   102</span>		}()
<a id="L103"></a><span class="ln">   103</span>	
<a id="L104"></a><span class="ln">   104</span>		sc.lk.Lock()
<a id="L105"></a><span class="ln">   105</span>		if sc.we != nil { <span class="comment">// no point receiving if write-side broken or closed</span>
<a id="L106"></a><span class="ln">   106</span>			defer sc.lk.Unlock()
<a id="L107"></a><span class="ln">   107</span>			return nil, sc.we
<a id="L108"></a><span class="ln">   108</span>		}
<a id="L109"></a><span class="ln">   109</span>		if sc.re != nil {
<a id="L110"></a><span class="ln">   110</span>			defer sc.lk.Unlock()
<a id="L111"></a><span class="ln">   111</span>			return nil, sc.re
<a id="L112"></a><span class="ln">   112</span>		}
<a id="L113"></a><span class="ln">   113</span>		if sc.r == nil { <span class="comment">// connection closed by user in the meantime</span>
<a id="L114"></a><span class="ln">   114</span>			defer sc.lk.Unlock()
<a id="L115"></a><span class="ln">   115</span>			return nil, errClosed
<a id="L116"></a><span class="ln">   116</span>		}
<a id="L117"></a><span class="ln">   117</span>		r := sc.r
<a id="L118"></a><span class="ln">   118</span>		lastbody := sc.lastbody
<a id="L119"></a><span class="ln">   119</span>		sc.lastbody = nil
<a id="L120"></a><span class="ln">   120</span>		sc.lk.Unlock()
<a id="L121"></a><span class="ln">   121</span>	
<a id="L122"></a><span class="ln">   122</span>		<span class="comment">// Make sure body is fully consumed, even if user does not call body.Close</span>
<a id="L123"></a><span class="ln">   123</span>		if lastbody != nil {
<a id="L124"></a><span class="ln">   124</span>			<span class="comment">// body.Close is assumed to be idempotent and multiple calls to</span>
<a id="L125"></a><span class="ln">   125</span>			<span class="comment">// it should return the error that its first invocation</span>
<a id="L126"></a><span class="ln">   126</span>			<span class="comment">// returned.</span>
<a id="L127"></a><span class="ln">   127</span>			err = lastbody.Close()
<a id="L128"></a><span class="ln">   128</span>			if err != nil {
<a id="L129"></a><span class="ln">   129</span>				sc.lk.Lock()
<a id="L130"></a><span class="ln">   130</span>				defer sc.lk.Unlock()
<a id="L131"></a><span class="ln">   131</span>				sc.re = err
<a id="L132"></a><span class="ln">   132</span>				return nil, err
<a id="L133"></a><span class="ln">   133</span>			}
<a id="L134"></a><span class="ln">   134</span>		}
<a id="L135"></a><span class="ln">   135</span>	
<a id="L136"></a><span class="ln">   136</span>		req, err = http.ReadRequest(r)
<a id="L137"></a><span class="ln">   137</span>		sc.lk.Lock()
<a id="L138"></a><span class="ln">   138</span>		defer sc.lk.Unlock()
<a id="L139"></a><span class="ln">   139</span>		if err != nil {
<a id="L140"></a><span class="ln">   140</span>			if err == io.ErrUnexpectedEOF {
<a id="L141"></a><span class="ln">   141</span>				<span class="comment">// A close from the opposing client is treated as a</span>
<a id="L142"></a><span class="ln">   142</span>				<span class="comment">// graceful close, even if there was some unparse-able</span>
<a id="L143"></a><span class="ln">   143</span>				<span class="comment">// data before the close.</span>
<a id="L144"></a><span class="ln">   144</span>				sc.re = ErrPersistEOF
<a id="L145"></a><span class="ln">   145</span>				return nil, sc.re
<a id="L146"></a><span class="ln">   146</span>			} else {
<a id="L147"></a><span class="ln">   147</span>				sc.re = err
<a id="L148"></a><span class="ln">   148</span>				return req, err
<a id="L149"></a><span class="ln">   149</span>			}
<a id="L150"></a><span class="ln">   150</span>		}
<a id="L151"></a><span class="ln">   151</span>		sc.lastbody = req.Body
<a id="L152"></a><span class="ln">   152</span>		sc.nread++
<a id="L153"></a><span class="ln">   153</span>		if req.Close {
<a id="L154"></a><span class="ln">   154</span>			sc.re = ErrPersistEOF
<a id="L155"></a><span class="ln">   155</span>			return req, sc.re
<a id="L156"></a><span class="ln">   156</span>		}
<a id="L157"></a><span class="ln">   157</span>		return req, err
<a id="L158"></a><span class="ln">   158</span>	}
<a id="L159"></a><span class="ln">   159</span>	
<a id="L160"></a><span class="ln">   160</span>	<span class="comment">// Pending returns the number of unanswered requests</span>
<a id="L161"></a><span class="ln">   161</span>	<span class="comment">// that have been received on the connection.</span>
<a id="L162"></a><span class="ln">   162</span>	func (sc *ServerConn) Pending() int {
<a id="L163"></a><span class="ln">   163</span>		sc.lk.Lock()
<a id="L164"></a><span class="ln">   164</span>		defer sc.lk.Unlock()
<a id="L165"></a><span class="ln">   165</span>		return sc.nread - sc.nwritten
<a id="L166"></a><span class="ln">   166</span>	}
<a id="L167"></a><span class="ln">   167</span>	
<a id="L168"></a><span class="ln">   168</span>	<span class="comment">// Write writes resp in response to req. To close the connection gracefully, set the</span>
<a id="L169"></a><span class="ln">   169</span>	<span class="comment">// Response.Close field to true. Write should be considered operational until</span>
<a id="L170"></a><span class="ln">   170</span>	<span class="comment">// it returns an error, regardless of any errors returned on the Read side.</span>
<a id="L171"></a><span class="ln">   171</span>	func (sc *ServerConn) Write(req *http.Request, resp *http.Response) error {
<a id="L172"></a><span class="ln">   172</span>	
<a id="L173"></a><span class="ln">   173</span>		<span class="comment">// Retrieve the pipeline ID of this request/response pair</span>
<a id="L174"></a><span class="ln">   174</span>		sc.lk.Lock()
<a id="L175"></a><span class="ln">   175</span>		id, ok := sc.pipereq[req]
<a id="L176"></a><span class="ln">   176</span>		delete(sc.pipereq, req)
<a id="L177"></a><span class="ln">   177</span>		if !ok {
<a id="L178"></a><span class="ln">   178</span>			sc.lk.Unlock()
<a id="L179"></a><span class="ln">   179</span>			return ErrPipeline
<a id="L180"></a><span class="ln">   180</span>		}
<a id="L181"></a><span class="ln">   181</span>		sc.lk.Unlock()
<a id="L182"></a><span class="ln">   182</span>	
<a id="L183"></a><span class="ln">   183</span>		<span class="comment">// Ensure pipeline order</span>
<a id="L184"></a><span class="ln">   184</span>		sc.pipe.StartResponse(id)
<a id="L185"></a><span class="ln">   185</span>		defer sc.pipe.EndResponse(id)
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>		sc.lk.Lock()
<a id="L188"></a><span class="ln">   188</span>		if sc.we != nil {
<a id="L189"></a><span class="ln">   189</span>			defer sc.lk.Unlock()
<a id="L190"></a><span class="ln">   190</span>			return sc.we
<a id="L191"></a><span class="ln">   191</span>		}
<a id="L192"></a><span class="ln">   192</span>		if sc.c == nil { <span class="comment">// connection closed by user in the meantime</span>
<a id="L193"></a><span class="ln">   193</span>			defer sc.lk.Unlock()
<a id="L194"></a><span class="ln">   194</span>			return ErrClosed
<a id="L195"></a><span class="ln">   195</span>		}
<a id="L196"></a><span class="ln">   196</span>		c := sc.c
<a id="L197"></a><span class="ln">   197</span>		if sc.nread &lt;= sc.nwritten {
<a id="L198"></a><span class="ln">   198</span>			defer sc.lk.Unlock()
<a id="L199"></a><span class="ln">   199</span>			return errors.New(&#34;persist server pipe count&#34;)
<a id="L200"></a><span class="ln">   200</span>		}
<a id="L201"></a><span class="ln">   201</span>		if resp.Close {
<a id="L202"></a><span class="ln">   202</span>			<span class="comment">// After signaling a keep-alive close, any pipelined unread</span>
<a id="L203"></a><span class="ln">   203</span>			<span class="comment">// requests will be lost. It is up to the user to drain them</span>
<a id="L204"></a><span class="ln">   204</span>			<span class="comment">// before signaling.</span>
<a id="L205"></a><span class="ln">   205</span>			sc.re = ErrPersistEOF
<a id="L206"></a><span class="ln">   206</span>		}
<a id="L207"></a><span class="ln">   207</span>		sc.lk.Unlock()
<a id="L208"></a><span class="ln">   208</span>	
<a id="L209"></a><span class="ln">   209</span>		err := resp.Write(c)
<a id="L210"></a><span class="ln">   210</span>		sc.lk.Lock()
<a id="L211"></a><span class="ln">   211</span>		defer sc.lk.Unlock()
<a id="L212"></a><span class="ln">   212</span>		if err != nil {
<a id="L213"></a><span class="ln">   213</span>			sc.we = err
<a id="L214"></a><span class="ln">   214</span>			return err
<a id="L215"></a><span class="ln">   215</span>		}
<a id="L216"></a><span class="ln">   216</span>		sc.nwritten++
<a id="L217"></a><span class="ln">   217</span>	
<a id="L218"></a><span class="ln">   218</span>		return nil
<a id="L219"></a><span class="ln">   219</span>	}
<a id="L220"></a><span class="ln">   220</span>	
<a id="L221"></a><span class="ln">   221</span>	<span class="comment">// A ClientConn sends request and receives headers over an underlying</span>
<a id="L222"></a><span class="ln">   222</span>	<span class="comment">// connection, while respecting the HTTP keepalive logic. ClientConn</span>
<a id="L223"></a><span class="ln">   223</span>	<span class="comment">// supports hijacking the connection calling Hijack to</span>
<a id="L224"></a><span class="ln">   224</span>	<span class="comment">// regain control of the underlying net.Conn and deal with it as desired.</span>
<a id="L225"></a><span class="ln">   225</span>	<span class="comment">//</span>
<a id="L226"></a><span class="ln">   226</span>	<span class="comment">// ClientConn is low-level and should not be needed by most applications.</span>
<a id="L227"></a><span class="ln">   227</span>	<span class="comment">// See Client.</span>
<a id="L228"></a><span class="ln">   228</span>	type ClientConn struct {
<a id="L229"></a><span class="ln">   229</span>		lk              sync.Mutex <span class="comment">// read-write protects the following fields</span>
<a id="L230"></a><span class="ln">   230</span>		c               net.Conn
<a id="L231"></a><span class="ln">   231</span>		r               *bufio.Reader
<a id="L232"></a><span class="ln">   232</span>		re, we          error <span class="comment">// read/write errors</span>
<a id="L233"></a><span class="ln">   233</span>		lastbody        io.ReadCloser
<a id="L234"></a><span class="ln">   234</span>		nread, nwritten int
<a id="L235"></a><span class="ln">   235</span>		pipereq         map[*http.Request]uint
<a id="L236"></a><span class="ln">   236</span>	
<a id="L237"></a><span class="ln">   237</span>		pipe     textproto.Pipeline
<a id="L238"></a><span class="ln">   238</span>		writeReq func(*http.Request, io.Writer) error
<a id="L239"></a><span class="ln">   239</span>	}
<a id="L240"></a><span class="ln">   240</span>	
<a id="L241"></a><span class="ln">   241</span>	<span class="comment">// NewClientConn returns a new ClientConn reading and writing c.  If r is not</span>
<a id="L242"></a><span class="ln">   242</span>	<span class="comment">// nil, it is the buffer to use when reading c.</span>
<a id="L243"></a><span class="ln">   243</span>	func NewClientConn(c net.Conn, r *bufio.Reader) *ClientConn {
<a id="L244"></a><span class="ln">   244</span>		if r == nil {
<a id="L245"></a><span class="ln">   245</span>			r = bufio.NewReader(c)
<a id="L246"></a><span class="ln">   246</span>		}
<a id="L247"></a><span class="ln">   247</span>		return &amp;ClientConn{
<a id="L248"></a><span class="ln">   248</span>			c:        c,
<a id="L249"></a><span class="ln">   249</span>			r:        r,
<a id="L250"></a><span class="ln">   250</span>			pipereq:  make(map[*http.Request]uint),
<a id="L251"></a><span class="ln">   251</span>			writeReq: (*http.Request).Write,
<a id="L252"></a><span class="ln">   252</span>		}
<a id="L253"></a><span class="ln">   253</span>	}
<a id="L254"></a><span class="ln">   254</span>	
<a id="L255"></a><span class="ln">   255</span>	<span class="comment">// NewProxyClientConn works like NewClientConn but writes Requests</span>
<a id="L256"></a><span class="ln">   256</span>	<span class="comment">// using Request&#39;s WriteProxy method.</span>
<a id="L257"></a><span class="ln">   257</span>	func NewProxyClientConn(c net.Conn, r *bufio.Reader) *ClientConn {
<a id="L258"></a><span class="ln">   258</span>		cc := NewClientConn(c, r)
<a id="L259"></a><span class="ln">   259</span>		cc.writeReq = (*http.Request).WriteProxy
<a id="L260"></a><span class="ln">   260</span>		return cc
<a id="L261"></a><span class="ln">   261</span>	}
<a id="L262"></a><span class="ln">   262</span>	
<a id="L263"></a><span class="ln">   263</span>	<span class="comment">// Hijack detaches the ClientConn and returns the underlying connection as well</span>
<a id="L264"></a><span class="ln">   264</span>	<span class="comment">// as the read-side bufio which may have some left over data. Hijack may be</span>
<a id="L265"></a><span class="ln">   265</span>	<span class="comment">// called before the user or Read have signaled the end of the keep-alive</span>
<a id="L266"></a><span class="ln">   266</span>	<span class="comment">// logic. The user should not call Hijack while Read or Write is in progress.</span>
<a id="L267"></a><span class="ln">   267</span>	func (cc *ClientConn) Hijack() (c net.Conn, r *bufio.Reader) {
<a id="L268"></a><span class="ln">   268</span>		cc.lk.Lock()
<a id="L269"></a><span class="ln">   269</span>		defer cc.lk.Unlock()
<a id="L270"></a><span class="ln">   270</span>		c = cc.c
<a id="L271"></a><span class="ln">   271</span>		r = cc.r
<a id="L272"></a><span class="ln">   272</span>		cc.c = nil
<a id="L273"></a><span class="ln">   273</span>		cc.r = nil
<a id="L274"></a><span class="ln">   274</span>		return
<a id="L275"></a><span class="ln">   275</span>	}
<a id="L276"></a><span class="ln">   276</span>	
<a id="L277"></a><span class="ln">   277</span>	<span class="comment">// Close calls Hijack and then also closes the underlying connection</span>
<a id="L278"></a><span class="ln">   278</span>	func (cc *ClientConn) Close() error {
<a id="L279"></a><span class="ln">   279</span>		c, _ := cc.Hijack()
<a id="L280"></a><span class="ln">   280</span>		if c != nil {
<a id="L281"></a><span class="ln">   281</span>			return c.Close()
<a id="L282"></a><span class="ln">   282</span>		}
<a id="L283"></a><span class="ln">   283</span>		return nil
<a id="L284"></a><span class="ln">   284</span>	}
<a id="L285"></a><span class="ln">   285</span>	
<a id="L286"></a><span class="ln">   286</span>	<span class="comment">// Write writes a request. An ErrPersistEOF error is returned if the connection</span>
<a id="L287"></a><span class="ln">   287</span>	<span class="comment">// has been closed in an HTTP keepalive sense. If req.Close equals true, the</span>
<a id="L288"></a><span class="ln">   288</span>	<span class="comment">// keepalive connection is logically closed after this request and the opposing</span>
<a id="L289"></a><span class="ln">   289</span>	<span class="comment">// server is informed. An ErrUnexpectedEOF indicates the remote closed the</span>
<a id="L290"></a><span class="ln">   290</span>	<span class="comment">// underlying TCP connection, which is usually considered as graceful close.</span>
<a id="L291"></a><span class="ln">   291</span>	func (cc *ClientConn) Write(req *http.Request) (err error) {
<a id="L292"></a><span class="ln">   292</span>	
<a id="L293"></a><span class="ln">   293</span>		<span class="comment">// Ensure ordered execution of Writes</span>
<a id="L294"></a><span class="ln">   294</span>		id := cc.pipe.Next()
<a id="L295"></a><span class="ln">   295</span>		cc.pipe.StartRequest(id)
<a id="L296"></a><span class="ln">   296</span>		defer func() {
<a id="L297"></a><span class="ln">   297</span>			cc.pipe.EndRequest(id)
<a id="L298"></a><span class="ln">   298</span>			if err != nil {
<a id="L299"></a><span class="ln">   299</span>				cc.pipe.StartResponse(id)
<a id="L300"></a><span class="ln">   300</span>				cc.pipe.EndResponse(id)
<a id="L301"></a><span class="ln">   301</span>			} else {
<a id="L302"></a><span class="ln">   302</span>				<span class="comment">// Remember the pipeline id of this request</span>
<a id="L303"></a><span class="ln">   303</span>				cc.lk.Lock()
<a id="L304"></a><span class="ln">   304</span>				cc.pipereq[req] = id
<a id="L305"></a><span class="ln">   305</span>				cc.lk.Unlock()
<a id="L306"></a><span class="ln">   306</span>			}
<a id="L307"></a><span class="ln">   307</span>		}()
<a id="L308"></a><span class="ln">   308</span>	
<a id="L309"></a><span class="ln">   309</span>		cc.lk.Lock()
<a id="L310"></a><span class="ln">   310</span>		if cc.re != nil { <span class="comment">// no point sending if read-side closed or broken</span>
<a id="L311"></a><span class="ln">   311</span>			defer cc.lk.Unlock()
<a id="L312"></a><span class="ln">   312</span>			return cc.re
<a id="L313"></a><span class="ln">   313</span>		}
<a id="L314"></a><span class="ln">   314</span>		if cc.we != nil {
<a id="L315"></a><span class="ln">   315</span>			defer cc.lk.Unlock()
<a id="L316"></a><span class="ln">   316</span>			return cc.we
<a id="L317"></a><span class="ln">   317</span>		}
<a id="L318"></a><span class="ln">   318</span>		if cc.c == nil { <span class="comment">// connection closed by user in the meantime</span>
<a id="L319"></a><span class="ln">   319</span>			defer cc.lk.Unlock()
<a id="L320"></a><span class="ln">   320</span>			return errClosed
<a id="L321"></a><span class="ln">   321</span>		}
<a id="L322"></a><span class="ln">   322</span>		c := cc.c
<a id="L323"></a><span class="ln">   323</span>		if req.Close {
<a id="L324"></a><span class="ln">   324</span>			<span class="comment">// We write the EOF to the write-side error, because there</span>
<a id="L325"></a><span class="ln">   325</span>			<span class="comment">// still might be some pipelined reads</span>
<a id="L326"></a><span class="ln">   326</span>			cc.we = ErrPersistEOF
<a id="L327"></a><span class="ln">   327</span>		}
<a id="L328"></a><span class="ln">   328</span>		cc.lk.Unlock()
<a id="L329"></a><span class="ln">   329</span>	
<a id="L330"></a><span class="ln">   330</span>		err = cc.writeReq(req, c)
<a id="L331"></a><span class="ln">   331</span>		cc.lk.Lock()
<a id="L332"></a><span class="ln">   332</span>		defer cc.lk.Unlock()
<a id="L333"></a><span class="ln">   333</span>		if err != nil {
<a id="L334"></a><span class="ln">   334</span>			cc.we = err
<a id="L335"></a><span class="ln">   335</span>			return err
<a id="L336"></a><span class="ln">   336</span>		}
<a id="L337"></a><span class="ln">   337</span>		cc.nwritten++
<a id="L338"></a><span class="ln">   338</span>	
<a id="L339"></a><span class="ln">   339</span>		return nil
<a id="L340"></a><span class="ln">   340</span>	}
<a id="L341"></a><span class="ln">   341</span>	
<a id="L342"></a><span class="ln">   342</span>	<span class="comment">// Pending returns the number of unanswered requests</span>
<a id="L343"></a><span class="ln">   343</span>	<span class="comment">// that have been sent on the connection.</span>
<a id="L344"></a><span class="ln">   344</span>	func (cc *ClientConn) Pending() int {
<a id="L345"></a><span class="ln">   345</span>		cc.lk.Lock()
<a id="L346"></a><span class="ln">   346</span>		defer cc.lk.Unlock()
<a id="L347"></a><span class="ln">   347</span>		return cc.nwritten - cc.nread
<a id="L348"></a><span class="ln">   348</span>	}
<a id="L349"></a><span class="ln">   349</span>	
<a id="L350"></a><span class="ln">   350</span>	<span class="comment">// Read reads the next response from the wire. A valid response might be</span>
<a id="L351"></a><span class="ln">   351</span>	<span class="comment">// returned together with an ErrPersistEOF, which means that the remote</span>
<a id="L352"></a><span class="ln">   352</span>	<span class="comment">// requested that this be the last request serviced. Read can be called</span>
<a id="L353"></a><span class="ln">   353</span>	<span class="comment">// concurrently with Write, but not with another Read.</span>
<a id="L354"></a><span class="ln">   354</span>	func (cc *ClientConn) Read(req *http.Request) (resp *http.Response, err error) {
<a id="L355"></a><span class="ln">   355</span>		<span class="comment">// Retrieve the pipeline ID of this request/response pair</span>
<a id="L356"></a><span class="ln">   356</span>		cc.lk.Lock()
<a id="L357"></a><span class="ln">   357</span>		id, ok := cc.pipereq[req]
<a id="L358"></a><span class="ln">   358</span>		delete(cc.pipereq, req)
<a id="L359"></a><span class="ln">   359</span>		if !ok {
<a id="L360"></a><span class="ln">   360</span>			cc.lk.Unlock()
<a id="L361"></a><span class="ln">   361</span>			return nil, ErrPipeline
<a id="L362"></a><span class="ln">   362</span>		}
<a id="L363"></a><span class="ln">   363</span>		cc.lk.Unlock()
<a id="L364"></a><span class="ln">   364</span>	
<a id="L365"></a><span class="ln">   365</span>		<span class="comment">// Ensure pipeline order</span>
<a id="L366"></a><span class="ln">   366</span>		cc.pipe.StartResponse(id)
<a id="L367"></a><span class="ln">   367</span>		defer cc.pipe.EndResponse(id)
<a id="L368"></a><span class="ln">   368</span>	
<a id="L369"></a><span class="ln">   369</span>		cc.lk.Lock()
<a id="L370"></a><span class="ln">   370</span>		if cc.re != nil {
<a id="L371"></a><span class="ln">   371</span>			defer cc.lk.Unlock()
<a id="L372"></a><span class="ln">   372</span>			return nil, cc.re
<a id="L373"></a><span class="ln">   373</span>		}
<a id="L374"></a><span class="ln">   374</span>		if cc.r == nil { <span class="comment">// connection closed by user in the meantime</span>
<a id="L375"></a><span class="ln">   375</span>			defer cc.lk.Unlock()
<a id="L376"></a><span class="ln">   376</span>			return nil, errClosed
<a id="L377"></a><span class="ln">   377</span>		}
<a id="L378"></a><span class="ln">   378</span>		r := cc.r
<a id="L379"></a><span class="ln">   379</span>		lastbody := cc.lastbody
<a id="L380"></a><span class="ln">   380</span>		cc.lastbody = nil
<a id="L381"></a><span class="ln">   381</span>		cc.lk.Unlock()
<a id="L382"></a><span class="ln">   382</span>	
<a id="L383"></a><span class="ln">   383</span>		<span class="comment">// Make sure body is fully consumed, even if user does not call body.Close</span>
<a id="L384"></a><span class="ln">   384</span>		if lastbody != nil {
<a id="L385"></a><span class="ln">   385</span>			<span class="comment">// body.Close is assumed to be idempotent and multiple calls to</span>
<a id="L386"></a><span class="ln">   386</span>			<span class="comment">// it should return the error that its first invocation</span>
<a id="L387"></a><span class="ln">   387</span>			<span class="comment">// returned.</span>
<a id="L388"></a><span class="ln">   388</span>			err = lastbody.Close()
<a id="L389"></a><span class="ln">   389</span>			if err != nil {
<a id="L390"></a><span class="ln">   390</span>				cc.lk.Lock()
<a id="L391"></a><span class="ln">   391</span>				defer cc.lk.Unlock()
<a id="L392"></a><span class="ln">   392</span>				cc.re = err
<a id="L393"></a><span class="ln">   393</span>				return nil, err
<a id="L394"></a><span class="ln">   394</span>			}
<a id="L395"></a><span class="ln">   395</span>		}
<a id="L396"></a><span class="ln">   396</span>	
<a id="L397"></a><span class="ln">   397</span>		resp, err = http.ReadResponse(r, req)
<a id="L398"></a><span class="ln">   398</span>		cc.lk.Lock()
<a id="L399"></a><span class="ln">   399</span>		defer cc.lk.Unlock()
<a id="L400"></a><span class="ln">   400</span>		if err != nil {
<a id="L401"></a><span class="ln">   401</span>			cc.re = err
<a id="L402"></a><span class="ln">   402</span>			return resp, err
<a id="L403"></a><span class="ln">   403</span>		}
<a id="L404"></a><span class="ln">   404</span>		cc.lastbody = resp.Body
<a id="L405"></a><span class="ln">   405</span>	
<a id="L406"></a><span class="ln">   406</span>		cc.nread++
<a id="L407"></a><span class="ln">   407</span>	
<a id="L408"></a><span class="ln">   408</span>		if resp.Close {
<a id="L409"></a><span class="ln">   409</span>			cc.re = ErrPersistEOF <span class="comment">// don&#39;t send any more requests</span>
<a id="L410"></a><span class="ln">   410</span>			return resp, cc.re
<a id="L411"></a><span class="ln">   411</span>		}
<a id="L412"></a><span class="ln">   412</span>		return resp, err
<a id="L413"></a><span class="ln">   413</span>	}
<a id="L414"></a><span class="ln">   414</span>	
<a id="L415"></a><span class="ln">   415</span>	<span class="comment">// Do is convenience method that writes a request and reads a response.</span>
<a id="L416"></a><span class="ln">   416</span>	func (cc *ClientConn) Do(req *http.Request) (resp *http.Response, err error) {
<a id="L417"></a><span class="ln">   417</span>		err = cc.Write(req)
<a id="L418"></a><span class="ln">   418</span>		if err != nil {
<a id="L419"></a><span class="ln">   419</span>			return
<a id="L420"></a><span class="ln">   420</span>		}
<a id="L421"></a><span class="ln">   421</span>		return cc.Read(req)
<a id="L422"></a><span class="ln">   422</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

