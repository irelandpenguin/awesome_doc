<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/http/httputil/reverseproxy.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/http/httputil/reverseproxy.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// HTTP reverse proxy handler</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package httputil
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;io&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;log&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;net&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;net/http&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;net/url&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;strings&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;sync&#34;
<a id="L17"></a><span class="ln">    17</span>		&#34;time&#34;
<a id="L18"></a><span class="ln">    18</span>	)
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// ReverseProxy is an HTTP Handler that takes an incoming request and</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// sends it to another server, proxying the response back to the</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// client.</span>
<a id="L23"></a><span class="ln">    23</span>	type ReverseProxy struct {
<a id="L24"></a><span class="ln">    24</span>		<span class="comment">// Director must be a function which modifies</span>
<a id="L25"></a><span class="ln">    25</span>		<span class="comment">// the request into a new request to be sent</span>
<a id="L26"></a><span class="ln">    26</span>		<span class="comment">// using Transport. Its response is then copied</span>
<a id="L27"></a><span class="ln">    27</span>		<span class="comment">// back to the original client unmodified.</span>
<a id="L28"></a><span class="ln">    28</span>		Director func(*http.Request)
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>		<span class="comment">// The transport used to perform proxy requests.</span>
<a id="L31"></a><span class="ln">    31</span>		<span class="comment">// If nil, http.DefaultTransport is used.</span>
<a id="L32"></a><span class="ln">    32</span>		Transport http.RoundTripper
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>		<span class="comment">// FlushInterval specifies the flush interval</span>
<a id="L35"></a><span class="ln">    35</span>		<span class="comment">// to flush to the client while copying the</span>
<a id="L36"></a><span class="ln">    36</span>		<span class="comment">// response body.</span>
<a id="L37"></a><span class="ln">    37</span>		<span class="comment">// If zero, no periodic flushing is done.</span>
<a id="L38"></a><span class="ln">    38</span>		FlushInterval time.Duration
<a id="L39"></a><span class="ln">    39</span>	}
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>	func singleJoiningSlash(a, b string) string {
<a id="L42"></a><span class="ln">    42</span>		aslash := strings.HasSuffix(a, &#34;/&#34;)
<a id="L43"></a><span class="ln">    43</span>		bslash := strings.HasPrefix(b, &#34;/&#34;)
<a id="L44"></a><span class="ln">    44</span>		switch {
<a id="L45"></a><span class="ln">    45</span>		case aslash &amp;&amp; bslash:
<a id="L46"></a><span class="ln">    46</span>			return a + b[1:]
<a id="L47"></a><span class="ln">    47</span>		case !aslash &amp;&amp; !bslash:
<a id="L48"></a><span class="ln">    48</span>			return a + &#34;/&#34; + b
<a id="L49"></a><span class="ln">    49</span>		}
<a id="L50"></a><span class="ln">    50</span>		return a + b
<a id="L51"></a><span class="ln">    51</span>	}
<a id="L52"></a><span class="ln">    52</span>	
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">// NewSingleHostReverseProxy returns a new ReverseProxy that rewrites</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">// URLs to the scheme, host, and base path provided in target. If the</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// target&#39;s path is &#34;/base&#34; and the incoming request was for &#34;/dir&#34;,</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// the target request will be for /base/dir.</span>
<a id="L57"></a><span class="ln">    57</span>	func NewSingleHostReverseProxy(target *url.URL) *ReverseProxy {
<a id="L58"></a><span class="ln">    58</span>		targetQuery := target.RawQuery
<a id="L59"></a><span class="ln">    59</span>		director := func(req *http.Request) {
<a id="L60"></a><span class="ln">    60</span>			req.URL.Scheme = target.Scheme
<a id="L61"></a><span class="ln">    61</span>			req.URL.Host = target.Host
<a id="L62"></a><span class="ln">    62</span>			req.URL.Path = singleJoiningSlash(target.Path, req.URL.Path)
<a id="L63"></a><span class="ln">    63</span>			if targetQuery == &#34;&#34; || req.URL.RawQuery == &#34;&#34; {
<a id="L64"></a><span class="ln">    64</span>				req.URL.RawQuery = targetQuery + req.URL.RawQuery
<a id="L65"></a><span class="ln">    65</span>			} else {
<a id="L66"></a><span class="ln">    66</span>				req.URL.RawQuery = targetQuery + &#34;&amp;&#34; + req.URL.RawQuery
<a id="L67"></a><span class="ln">    67</span>			}
<a id="L68"></a><span class="ln">    68</span>		}
<a id="L69"></a><span class="ln">    69</span>		return &amp;ReverseProxy{Director: director}
<a id="L70"></a><span class="ln">    70</span>	}
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>	func copyHeader(dst, src http.Header) {
<a id="L73"></a><span class="ln">    73</span>		for k, vv := range src {
<a id="L74"></a><span class="ln">    74</span>			for _, v := range vv {
<a id="L75"></a><span class="ln">    75</span>				dst.Add(k, v)
<a id="L76"></a><span class="ln">    76</span>			}
<a id="L77"></a><span class="ln">    77</span>		}
<a id="L78"></a><span class="ln">    78</span>	}
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>	func (p *ReverseProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {
<a id="L81"></a><span class="ln">    81</span>		transport := p.Transport
<a id="L82"></a><span class="ln">    82</span>		if transport == nil {
<a id="L83"></a><span class="ln">    83</span>			transport = http.DefaultTransport
<a id="L84"></a><span class="ln">    84</span>		}
<a id="L85"></a><span class="ln">    85</span>	
<a id="L86"></a><span class="ln">    86</span>		outreq := new(http.Request)
<a id="L87"></a><span class="ln">    87</span>		*outreq = *req <span class="comment">// includes shallow copies of maps, but okay</span>
<a id="L88"></a><span class="ln">    88</span>	
<a id="L89"></a><span class="ln">    89</span>		p.Director(outreq)
<a id="L90"></a><span class="ln">    90</span>		outreq.Proto = &#34;HTTP/1.1&#34;
<a id="L91"></a><span class="ln">    91</span>		outreq.ProtoMajor = 1
<a id="L92"></a><span class="ln">    92</span>		outreq.ProtoMinor = 1
<a id="L93"></a><span class="ln">    93</span>		outreq.Close = false
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>		<span class="comment">// Remove the connection header to the backend.  We want a</span>
<a id="L96"></a><span class="ln">    96</span>		<span class="comment">// persistent connection, regardless of what the client sent</span>
<a id="L97"></a><span class="ln">    97</span>		<span class="comment">// to us.  This is modifying the same underlying map from req</span>
<a id="L98"></a><span class="ln">    98</span>		<span class="comment">// (shallow copied above) so we only copy it if necessary.</span>
<a id="L99"></a><span class="ln">    99</span>		if outreq.Header.Get(&#34;Connection&#34;) != &#34;&#34; {
<a id="L100"></a><span class="ln">   100</span>			outreq.Header = make(http.Header)
<a id="L101"></a><span class="ln">   101</span>			copyHeader(outreq.Header, req.Header)
<a id="L102"></a><span class="ln">   102</span>			outreq.Header.Del(&#34;Connection&#34;)
<a id="L103"></a><span class="ln">   103</span>		}
<a id="L104"></a><span class="ln">   104</span>	
<a id="L105"></a><span class="ln">   105</span>		if clientIp, _, err := net.SplitHostPort(req.RemoteAddr); err == nil {
<a id="L106"></a><span class="ln">   106</span>			outreq.Header.Set(&#34;X-Forwarded-For&#34;, clientIp)
<a id="L107"></a><span class="ln">   107</span>		}
<a id="L108"></a><span class="ln">   108</span>	
<a id="L109"></a><span class="ln">   109</span>		res, err := transport.RoundTrip(outreq)
<a id="L110"></a><span class="ln">   110</span>		if err != nil {
<a id="L111"></a><span class="ln">   111</span>			log.Printf(&#34;http: proxy error: %v&#34;, err)
<a id="L112"></a><span class="ln">   112</span>			rw.WriteHeader(http.StatusInternalServerError)
<a id="L113"></a><span class="ln">   113</span>			return
<a id="L114"></a><span class="ln">   114</span>		}
<a id="L115"></a><span class="ln">   115</span>	
<a id="L116"></a><span class="ln">   116</span>		copyHeader(rw.Header(), res.Header)
<a id="L117"></a><span class="ln">   117</span>	
<a id="L118"></a><span class="ln">   118</span>		rw.WriteHeader(res.StatusCode)
<a id="L119"></a><span class="ln">   119</span>	
<a id="L120"></a><span class="ln">   120</span>		if res.Body != nil {
<a id="L121"></a><span class="ln">   121</span>			var dst io.Writer = rw
<a id="L122"></a><span class="ln">   122</span>			if p.FlushInterval != 0 {
<a id="L123"></a><span class="ln">   123</span>				if wf, ok := rw.(writeFlusher); ok {
<a id="L124"></a><span class="ln">   124</span>					dst = &amp;maxLatencyWriter{dst: wf, latency: p.FlushInterval}
<a id="L125"></a><span class="ln">   125</span>				}
<a id="L126"></a><span class="ln">   126</span>			}
<a id="L127"></a><span class="ln">   127</span>			io.Copy(dst, res.Body)
<a id="L128"></a><span class="ln">   128</span>		}
<a id="L129"></a><span class="ln">   129</span>	}
<a id="L130"></a><span class="ln">   130</span>	
<a id="L131"></a><span class="ln">   131</span>	type writeFlusher interface {
<a id="L132"></a><span class="ln">   132</span>		io.Writer
<a id="L133"></a><span class="ln">   133</span>		http.Flusher
<a id="L134"></a><span class="ln">   134</span>	}
<a id="L135"></a><span class="ln">   135</span>	
<a id="L136"></a><span class="ln">   136</span>	type maxLatencyWriter struct {
<a id="L137"></a><span class="ln">   137</span>		dst     writeFlusher
<a id="L138"></a><span class="ln">   138</span>		latency time.Duration
<a id="L139"></a><span class="ln">   139</span>	
<a id="L140"></a><span class="ln">   140</span>		lk   sync.Mutex <span class="comment">// protects init of done, as well Write + Flush</span>
<a id="L141"></a><span class="ln">   141</span>		done chan bool
<a id="L142"></a><span class="ln">   142</span>	}
<a id="L143"></a><span class="ln">   143</span>	
<a id="L144"></a><span class="ln">   144</span>	func (m *maxLatencyWriter) Write(p []byte) (n int, err error) {
<a id="L145"></a><span class="ln">   145</span>		m.lk.Lock()
<a id="L146"></a><span class="ln">   146</span>		defer m.lk.Unlock()
<a id="L147"></a><span class="ln">   147</span>		if m.done == nil {
<a id="L148"></a><span class="ln">   148</span>			m.done = make(chan bool)
<a id="L149"></a><span class="ln">   149</span>			go m.flushLoop()
<a id="L150"></a><span class="ln">   150</span>		}
<a id="L151"></a><span class="ln">   151</span>		n, err = m.dst.Write(p)
<a id="L152"></a><span class="ln">   152</span>		if err != nil {
<a id="L153"></a><span class="ln">   153</span>			m.done &lt;- true
<a id="L154"></a><span class="ln">   154</span>		}
<a id="L155"></a><span class="ln">   155</span>		return
<a id="L156"></a><span class="ln">   156</span>	}
<a id="L157"></a><span class="ln">   157</span>	
<a id="L158"></a><span class="ln">   158</span>	func (m *maxLatencyWriter) flushLoop() {
<a id="L159"></a><span class="ln">   159</span>		t := time.NewTicker(m.latency)
<a id="L160"></a><span class="ln">   160</span>		defer t.Stop()
<a id="L161"></a><span class="ln">   161</span>		for {
<a id="L162"></a><span class="ln">   162</span>			select {
<a id="L163"></a><span class="ln">   163</span>			case &lt;-t.C:
<a id="L164"></a><span class="ln">   164</span>				m.lk.Lock()
<a id="L165"></a><span class="ln">   165</span>				m.dst.Flush()
<a id="L166"></a><span class="ln">   166</span>				m.lk.Unlock()
<a id="L167"></a><span class="ln">   167</span>			case &lt;-m.done:
<a id="L168"></a><span class="ln">   168</span>				return
<a id="L169"></a><span class="ln">   169</span>			}
<a id="L170"></a><span class="ln">   170</span>		}
<a id="L171"></a><span class="ln">   171</span>		panic(&#34;unreached&#34;)
<a id="L172"></a><span class="ln">   172</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

