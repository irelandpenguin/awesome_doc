<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/http/httputil/dump.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/http/httputil/dump.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package httputil
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bufio&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;bytes&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;fmt&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;io&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;io/ioutil&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;net&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;net/http&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;net/url&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;strings&#34;
<a id="L17"></a><span class="ln">    17</span>		&#34;time&#34;
<a id="L18"></a><span class="ln">    18</span>	)
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// One of the copies, say from b to r2, could be avoided by using a more</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// elaborate trick where the other copy is made during Request/Response.Write.</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// This would complicate things too much, given that these functions are for</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// debugging only.</span>
<a id="L24"></a><span class="ln">    24</span>	func drainBody(b io.ReadCloser) (r1, r2 io.ReadCloser, err error) {
<a id="L25"></a><span class="ln">    25</span>		var buf bytes.Buffer
<a id="L26"></a><span class="ln">    26</span>		if _, err = buf.ReadFrom(b); err != nil {
<a id="L27"></a><span class="ln">    27</span>			return nil, nil, err
<a id="L28"></a><span class="ln">    28</span>		}
<a id="L29"></a><span class="ln">    29</span>		if err = b.Close(); err != nil {
<a id="L30"></a><span class="ln">    30</span>			return nil, nil, err
<a id="L31"></a><span class="ln">    31</span>		}
<a id="L32"></a><span class="ln">    32</span>		return ioutil.NopCloser(&amp;buf), ioutil.NopCloser(bytes.NewBuffer(buf.Bytes())), nil
<a id="L33"></a><span class="ln">    33</span>	}
<a id="L34"></a><span class="ln">    34</span>	
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// dumpConn is a net.Conn which writes to Writer and reads from Reader</span>
<a id="L36"></a><span class="ln">    36</span>	type dumpConn struct {
<a id="L37"></a><span class="ln">    37</span>		io.Writer
<a id="L38"></a><span class="ln">    38</span>		io.Reader
<a id="L39"></a><span class="ln">    39</span>	}
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>	func (c *dumpConn) Close() error                       { return nil }
<a id="L42"></a><span class="ln">    42</span>	func (c *dumpConn) LocalAddr() net.Addr                { return nil }
<a id="L43"></a><span class="ln">    43</span>	func (c *dumpConn) RemoteAddr() net.Addr               { return nil }
<a id="L44"></a><span class="ln">    44</span>	func (c *dumpConn) SetDeadline(t time.Time) error      { return nil }
<a id="L45"></a><span class="ln">    45</span>	func (c *dumpConn) SetReadDeadline(t time.Time) error  { return nil }
<a id="L46"></a><span class="ln">    46</span>	func (c *dumpConn) SetWriteDeadline(t time.Time) error { return nil }
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">// DumpRequestOut is like DumpRequest but includes</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">// headers that the standard http.Transport adds,</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// such as User-Agent.</span>
<a id="L51"></a><span class="ln">    51</span>	func DumpRequestOut(req *http.Request, body bool) ([]byte, error) {
<a id="L52"></a><span class="ln">    52</span>		save := req.Body
<a id="L53"></a><span class="ln">    53</span>		if !body || req.Body == nil {
<a id="L54"></a><span class="ln">    54</span>			req.Body = nil
<a id="L55"></a><span class="ln">    55</span>		} else {
<a id="L56"></a><span class="ln">    56</span>			var err error
<a id="L57"></a><span class="ln">    57</span>			save, req.Body, err = drainBody(req.Body)
<a id="L58"></a><span class="ln">    58</span>			if err != nil {
<a id="L59"></a><span class="ln">    59</span>				return nil, err
<a id="L60"></a><span class="ln">    60</span>			}
<a id="L61"></a><span class="ln">    61</span>		}
<a id="L62"></a><span class="ln">    62</span>	
<a id="L63"></a><span class="ln">    63</span>		<span class="comment">// Since we&#39;re using the actual Transport code to write the request,</span>
<a id="L64"></a><span class="ln">    64</span>		<span class="comment">// switch to http so the Transport doesn&#39;t try to do an SSL</span>
<a id="L65"></a><span class="ln">    65</span>		<span class="comment">// negotiation with our dumpConn and its bytes.Buffer &amp; pipe.</span>
<a id="L66"></a><span class="ln">    66</span>		<span class="comment">// The wire format for https and http are the same, anyway.</span>
<a id="L67"></a><span class="ln">    67</span>		reqSend := req
<a id="L68"></a><span class="ln">    68</span>		if req.URL.Scheme == &#34;https&#34; {
<a id="L69"></a><span class="ln">    69</span>			reqSend = new(http.Request)
<a id="L70"></a><span class="ln">    70</span>			*reqSend = *req
<a id="L71"></a><span class="ln">    71</span>			reqSend.URL = new(url.URL)
<a id="L72"></a><span class="ln">    72</span>			*reqSend.URL = *req.URL
<a id="L73"></a><span class="ln">    73</span>			reqSend.URL.Scheme = &#34;http&#34;
<a id="L74"></a><span class="ln">    74</span>		}
<a id="L75"></a><span class="ln">    75</span>	
<a id="L76"></a><span class="ln">    76</span>		<span class="comment">// Use the actual Transport code to record what we would send</span>
<a id="L77"></a><span class="ln">    77</span>		<span class="comment">// on the wire, but not using TCP.  Use a Transport with a</span>
<a id="L78"></a><span class="ln">    78</span>		<span class="comment">// customer dialer that returns a fake net.Conn that waits</span>
<a id="L79"></a><span class="ln">    79</span>		<span class="comment">// for the full input (and recording it), and then responds</span>
<a id="L80"></a><span class="ln">    80</span>		<span class="comment">// with a dummy response.</span>
<a id="L81"></a><span class="ln">    81</span>		var buf bytes.Buffer <span class="comment">// records the output</span>
<a id="L82"></a><span class="ln">    82</span>		pr, pw := io.Pipe()
<a id="L83"></a><span class="ln">    83</span>		dr := &amp;delegateReader{c: make(chan io.Reader)}
<a id="L84"></a><span class="ln">    84</span>		<span class="comment">// Wait for the request before replying with a dummy response:</span>
<a id="L85"></a><span class="ln">    85</span>		go func() {
<a id="L86"></a><span class="ln">    86</span>			http.ReadRequest(bufio.NewReader(pr))
<a id="L87"></a><span class="ln">    87</span>			dr.c &lt;- strings.NewReader(&#34;HTTP/1.1 204 No Content\r\n\r\n&#34;)
<a id="L88"></a><span class="ln">    88</span>		}()
<a id="L89"></a><span class="ln">    89</span>	
<a id="L90"></a><span class="ln">    90</span>		t := &amp;http.Transport{
<a id="L91"></a><span class="ln">    91</span>			Dial: func(net, addr string) (net.Conn, error) {
<a id="L92"></a><span class="ln">    92</span>				return &amp;dumpConn{io.MultiWriter(pw, &amp;buf), dr}, nil
<a id="L93"></a><span class="ln">    93</span>			},
<a id="L94"></a><span class="ln">    94</span>		}
<a id="L95"></a><span class="ln">    95</span>	
<a id="L96"></a><span class="ln">    96</span>		_, err := t.RoundTrip(reqSend)
<a id="L97"></a><span class="ln">    97</span>	
<a id="L98"></a><span class="ln">    98</span>		req.Body = save
<a id="L99"></a><span class="ln">    99</span>		if err != nil {
<a id="L100"></a><span class="ln">   100</span>			return nil, err
<a id="L101"></a><span class="ln">   101</span>		}
<a id="L102"></a><span class="ln">   102</span>		return buf.Bytes(), nil
<a id="L103"></a><span class="ln">   103</span>	}
<a id="L104"></a><span class="ln">   104</span>	
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// delegateReader is a reader that delegates to another reader,</span>
<a id="L106"></a><span class="ln">   106</span>	<span class="comment">// once it arrives on a channel.</span>
<a id="L107"></a><span class="ln">   107</span>	type delegateReader struct {
<a id="L108"></a><span class="ln">   108</span>		c chan io.Reader
<a id="L109"></a><span class="ln">   109</span>		r io.Reader <span class="comment">// nil until received from c</span>
<a id="L110"></a><span class="ln">   110</span>	}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>	func (r *delegateReader) Read(p []byte) (int, error) {
<a id="L113"></a><span class="ln">   113</span>		if r.r == nil {
<a id="L114"></a><span class="ln">   114</span>			r.r = &lt;-r.c
<a id="L115"></a><span class="ln">   115</span>		}
<a id="L116"></a><span class="ln">   116</span>		return r.r.Read(p)
<a id="L117"></a><span class="ln">   117</span>	}
<a id="L118"></a><span class="ln">   118</span>	
<a id="L119"></a><span class="ln">   119</span>	<span class="comment">// Return value if nonempty, def otherwise.</span>
<a id="L120"></a><span class="ln">   120</span>	func valueOrDefault(value, def string) string {
<a id="L121"></a><span class="ln">   121</span>		if value != &#34;&#34; {
<a id="L122"></a><span class="ln">   122</span>			return value
<a id="L123"></a><span class="ln">   123</span>		}
<a id="L124"></a><span class="ln">   124</span>		return def
<a id="L125"></a><span class="ln">   125</span>	}
<a id="L126"></a><span class="ln">   126</span>	
<a id="L127"></a><span class="ln">   127</span>	var reqWriteExcludeHeaderDump = map[string]bool{
<a id="L128"></a><span class="ln">   128</span>		&#34;Host&#34;:              true, <span class="comment">// not in Header map anyway</span>
<a id="L129"></a><span class="ln">   129</span>		&#34;Content-Length&#34;:    true,
<a id="L130"></a><span class="ln">   130</span>		&#34;Transfer-Encoding&#34;: true,
<a id="L131"></a><span class="ln">   131</span>		&#34;Trailer&#34;:           true,
<a id="L132"></a><span class="ln">   132</span>	}
<a id="L133"></a><span class="ln">   133</span>	
<a id="L134"></a><span class="ln">   134</span>	<span class="comment">// dumpAsReceived writes req to w in the form as it was received, or</span>
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">// at least as accurately as possible from the information retained in</span>
<a id="L136"></a><span class="ln">   136</span>	<span class="comment">// the request.</span>
<a id="L137"></a><span class="ln">   137</span>	func dumpAsReceived(req *http.Request, w io.Writer) error {
<a id="L138"></a><span class="ln">   138</span>		return nil
<a id="L139"></a><span class="ln">   139</span>	}
<a id="L140"></a><span class="ln">   140</span>	
<a id="L141"></a><span class="ln">   141</span>	<span class="comment">// DumpRequest returns the as-received wire representation of req,</span>
<a id="L142"></a><span class="ln">   142</span>	<span class="comment">// optionally including the request body, for debugging.</span>
<a id="L143"></a><span class="ln">   143</span>	<span class="comment">// DumpRequest is semantically a no-op, but in order to</span>
<a id="L144"></a><span class="ln">   144</span>	<span class="comment">// dump the body, it reads the body data into memory and</span>
<a id="L145"></a><span class="ln">   145</span>	<span class="comment">// changes req.Body to refer to the in-memory copy.</span>
<a id="L146"></a><span class="ln">   146</span>	<span class="comment">// The documentation for http.Request.Write details which fields</span>
<a id="L147"></a><span class="ln">   147</span>	<span class="comment">// of req are used.</span>
<a id="L148"></a><span class="ln">   148</span>	func DumpRequest(req *http.Request, body bool) (dump []byte, err error) {
<a id="L149"></a><span class="ln">   149</span>		save := req.Body
<a id="L150"></a><span class="ln">   150</span>		if !body || req.Body == nil {
<a id="L151"></a><span class="ln">   151</span>			req.Body = nil
<a id="L152"></a><span class="ln">   152</span>		} else {
<a id="L153"></a><span class="ln">   153</span>			save, req.Body, err = drainBody(req.Body)
<a id="L154"></a><span class="ln">   154</span>			if err != nil {
<a id="L155"></a><span class="ln">   155</span>				return
<a id="L156"></a><span class="ln">   156</span>			}
<a id="L157"></a><span class="ln">   157</span>		}
<a id="L158"></a><span class="ln">   158</span>	
<a id="L159"></a><span class="ln">   159</span>		var b bytes.Buffer
<a id="L160"></a><span class="ln">   160</span>	
<a id="L161"></a><span class="ln">   161</span>		fmt.Fprintf(&amp;b, &#34;%s %s HTTP/%d.%d\r\n&#34;, valueOrDefault(req.Method, &#34;GET&#34;),
<a id="L162"></a><span class="ln">   162</span>			req.URL.RequestURI(), req.ProtoMajor, req.ProtoMinor)
<a id="L163"></a><span class="ln">   163</span>	
<a id="L164"></a><span class="ln">   164</span>		host := req.Host
<a id="L165"></a><span class="ln">   165</span>		if host == &#34;&#34; &amp;&amp; req.URL != nil {
<a id="L166"></a><span class="ln">   166</span>			host = req.URL.Host
<a id="L167"></a><span class="ln">   167</span>		}
<a id="L168"></a><span class="ln">   168</span>		if host != &#34;&#34; {
<a id="L169"></a><span class="ln">   169</span>			fmt.Fprintf(&amp;b, &#34;Host: %s\r\n&#34;, host)
<a id="L170"></a><span class="ln">   170</span>		}
<a id="L171"></a><span class="ln">   171</span>	
<a id="L172"></a><span class="ln">   172</span>		chunked := len(req.TransferEncoding) &gt; 0 &amp;&amp; req.TransferEncoding[0] == &#34;chunked&#34;
<a id="L173"></a><span class="ln">   173</span>		if len(req.TransferEncoding) &gt; 0 {
<a id="L174"></a><span class="ln">   174</span>			fmt.Fprintf(&amp;b, &#34;Transfer-Encoding: %s\r\n&#34;, strings.Join(req.TransferEncoding, &#34;,&#34;))
<a id="L175"></a><span class="ln">   175</span>		}
<a id="L176"></a><span class="ln">   176</span>		if req.Close {
<a id="L177"></a><span class="ln">   177</span>			fmt.Fprintf(&amp;b, &#34;Connection: close\r\n&#34;)
<a id="L178"></a><span class="ln">   178</span>		}
<a id="L179"></a><span class="ln">   179</span>	
<a id="L180"></a><span class="ln">   180</span>		err = req.Header.WriteSubset(&amp;b, reqWriteExcludeHeaderDump)
<a id="L181"></a><span class="ln">   181</span>		if err != nil {
<a id="L182"></a><span class="ln">   182</span>			return
<a id="L183"></a><span class="ln">   183</span>		}
<a id="L184"></a><span class="ln">   184</span>	
<a id="L185"></a><span class="ln">   185</span>		io.WriteString(&amp;b, &#34;\r\n&#34;)
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>		if req.Body != nil {
<a id="L188"></a><span class="ln">   188</span>			var dest io.Writer = &amp;b
<a id="L189"></a><span class="ln">   189</span>			if chunked {
<a id="L190"></a><span class="ln">   190</span>				dest = NewChunkedWriter(dest)
<a id="L191"></a><span class="ln">   191</span>			}
<a id="L192"></a><span class="ln">   192</span>			_, err = io.Copy(dest, req.Body)
<a id="L193"></a><span class="ln">   193</span>			if chunked {
<a id="L194"></a><span class="ln">   194</span>				dest.(io.Closer).Close()
<a id="L195"></a><span class="ln">   195</span>				io.WriteString(&amp;b, &#34;\r\n&#34;)
<a id="L196"></a><span class="ln">   196</span>			}
<a id="L197"></a><span class="ln">   197</span>		}
<a id="L198"></a><span class="ln">   198</span>	
<a id="L199"></a><span class="ln">   199</span>		req.Body = save
<a id="L200"></a><span class="ln">   200</span>		if err != nil {
<a id="L201"></a><span class="ln">   201</span>			return
<a id="L202"></a><span class="ln">   202</span>		}
<a id="L203"></a><span class="ln">   203</span>		dump = b.Bytes()
<a id="L204"></a><span class="ln">   204</span>		return
<a id="L205"></a><span class="ln">   205</span>	}
<a id="L206"></a><span class="ln">   206</span>	
<a id="L207"></a><span class="ln">   207</span>	<span class="comment">// DumpResponse is like DumpRequest but dumps a response.</span>
<a id="L208"></a><span class="ln">   208</span>	func DumpResponse(resp *http.Response, body bool) (dump []byte, err error) {
<a id="L209"></a><span class="ln">   209</span>		var b bytes.Buffer
<a id="L210"></a><span class="ln">   210</span>		save := resp.Body
<a id="L211"></a><span class="ln">   211</span>		savecl := resp.ContentLength
<a id="L212"></a><span class="ln">   212</span>		if !body || resp.Body == nil {
<a id="L213"></a><span class="ln">   213</span>			resp.Body = nil
<a id="L214"></a><span class="ln">   214</span>			resp.ContentLength = 0
<a id="L215"></a><span class="ln">   215</span>		} else {
<a id="L216"></a><span class="ln">   216</span>			save, resp.Body, err = drainBody(resp.Body)
<a id="L217"></a><span class="ln">   217</span>			if err != nil {
<a id="L218"></a><span class="ln">   218</span>				return
<a id="L219"></a><span class="ln">   219</span>			}
<a id="L220"></a><span class="ln">   220</span>		}
<a id="L221"></a><span class="ln">   221</span>		err = resp.Write(&amp;b)
<a id="L222"></a><span class="ln">   222</span>		resp.Body = save
<a id="L223"></a><span class="ln">   223</span>		resp.ContentLength = savecl
<a id="L224"></a><span class="ln">   224</span>		if err != nil {
<a id="L225"></a><span class="ln">   225</span>			return
<a id="L226"></a><span class="ln">   226</span>		}
<a id="L227"></a><span class="ln">   227</span>		dump = b.Bytes()
<a id="L228"></a><span class="ln">   228</span>		return
<a id="L229"></a><span class="ln">   229</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

