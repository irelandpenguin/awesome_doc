<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/http/sniff.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/http/sniff.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package http
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bytes&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;encoding/binary&#34;
<a id="L10"></a><span class="ln">    10</span>	)
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// The algorithm uses at most sniffLen bytes to make its decision.</span>
<a id="L13"></a><span class="ln">    13</span>	const sniffLen = 512
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// DetectContentType implements the algorithm described</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// at http://mimesniff.spec.whatwg.org/ to determine the</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// Content-Type of the given data.  It considers at most the</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// first 512 bytes of data.  DetectContentType always returns</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// a valid MIME type: if it cannot determine a more specific one, it</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// returns &#34;application/octet-stream&#34;.</span>
<a id="L21"></a><span class="ln">    21</span>	func DetectContentType(data []byte) string {
<a id="L22"></a><span class="ln">    22</span>		if len(data) &gt; sniffLen {
<a id="L23"></a><span class="ln">    23</span>			data = data[:sniffLen]
<a id="L24"></a><span class="ln">    24</span>		}
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>		<span class="comment">// Index of the first non-whitespace byte in data.</span>
<a id="L27"></a><span class="ln">    27</span>		firstNonWS := 0
<a id="L28"></a><span class="ln">    28</span>		for ; firstNonWS &lt; len(data) &amp;&amp; isWS(data[firstNonWS]); firstNonWS++ {
<a id="L29"></a><span class="ln">    29</span>		}
<a id="L30"></a><span class="ln">    30</span>	
<a id="L31"></a><span class="ln">    31</span>		for _, sig := range sniffSignatures {
<a id="L32"></a><span class="ln">    32</span>			if ct := sig.match(data, firstNonWS); ct != &#34;&#34; {
<a id="L33"></a><span class="ln">    33</span>				return ct
<a id="L34"></a><span class="ln">    34</span>			}
<a id="L35"></a><span class="ln">    35</span>		}
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>		return &#34;application/octet-stream&#34; <span class="comment">// fallback</span>
<a id="L38"></a><span class="ln">    38</span>	}
<a id="L39"></a><span class="ln">    39</span>	
<a id="L40"></a><span class="ln">    40</span>	func isWS(b byte) bool {
<a id="L41"></a><span class="ln">    41</span>		return bytes.IndexByte([]byte(&#34;\t\n\x0C\r &#34;), b) != -1
<a id="L42"></a><span class="ln">    42</span>	}
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	type sniffSig interface {
<a id="L45"></a><span class="ln">    45</span>		<span class="comment">// match returns the MIME type of the data, or &#34;&#34; if unknown.</span>
<a id="L46"></a><span class="ln">    46</span>		match(data []byte, firstNonWS int) string
<a id="L47"></a><span class="ln">    47</span>	}
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">// Data matching the table in section 6.</span>
<a id="L50"></a><span class="ln">    50</span>	var sniffSignatures = []sniffSig{
<a id="L51"></a><span class="ln">    51</span>		htmlSig(&#34;&lt;!DOCTYPE HTML&#34;),
<a id="L52"></a><span class="ln">    52</span>		htmlSig(&#34;&lt;HTML&#34;),
<a id="L53"></a><span class="ln">    53</span>		htmlSig(&#34;&lt;HEAD&#34;),
<a id="L54"></a><span class="ln">    54</span>		htmlSig(&#34;&lt;SCRIPT&#34;),
<a id="L55"></a><span class="ln">    55</span>		htmlSig(&#34;&lt;IFRAME&#34;),
<a id="L56"></a><span class="ln">    56</span>		htmlSig(&#34;&lt;H1&#34;),
<a id="L57"></a><span class="ln">    57</span>		htmlSig(&#34;&lt;DIV&#34;),
<a id="L58"></a><span class="ln">    58</span>		htmlSig(&#34;&lt;FONT&#34;),
<a id="L59"></a><span class="ln">    59</span>		htmlSig(&#34;&lt;TABLE&#34;),
<a id="L60"></a><span class="ln">    60</span>		htmlSig(&#34;&lt;A&#34;),
<a id="L61"></a><span class="ln">    61</span>		htmlSig(&#34;&lt;STYLE&#34;),
<a id="L62"></a><span class="ln">    62</span>		htmlSig(&#34;&lt;TITLE&#34;),
<a id="L63"></a><span class="ln">    63</span>		htmlSig(&#34;&lt;B&#34;),
<a id="L64"></a><span class="ln">    64</span>		htmlSig(&#34;&lt;BODY&#34;),
<a id="L65"></a><span class="ln">    65</span>		htmlSig(&#34;&lt;BR&#34;),
<a id="L66"></a><span class="ln">    66</span>		htmlSig(&#34;&lt;P&#34;),
<a id="L67"></a><span class="ln">    67</span>		htmlSig(&#34;&lt;!--&#34;),
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>		&amp;maskedSig{mask: []byte(&#34;\xFF\xFF\xFF\xFF\xFF&#34;), pat: []byte(&#34;&lt;?xml&#34;), skipWS: true, ct: &#34;text/xml; charset=utf-8&#34;},
<a id="L70"></a><span class="ln">    70</span>	
<a id="L71"></a><span class="ln">    71</span>		&amp;exactSig{[]byte(&#34;%PDF-&#34;), &#34;application/pdf&#34;},
<a id="L72"></a><span class="ln">    72</span>		&amp;exactSig{[]byte(&#34;%!PS-Adobe-&#34;), &#34;application/postscript&#34;},
<a id="L73"></a><span class="ln">    73</span>	
<a id="L74"></a><span class="ln">    74</span>		<span class="comment">// UTF BOMs.</span>
<a id="L75"></a><span class="ln">    75</span>		&amp;maskedSig{mask: []byte(&#34;\xFF\xFF\x00\x00&#34;), pat: []byte(&#34;\xFE\xFF\x00\x00&#34;), ct: &#34;text/plain; charset=utf-16be&#34;},
<a id="L76"></a><span class="ln">    76</span>		&amp;maskedSig{mask: []byte(&#34;\xFF\xFF\x00\x00&#34;), pat: []byte(&#34;\xFF\xFE\x00\x00&#34;), ct: &#34;text/plain; charset=utf-16le&#34;},
<a id="L77"></a><span class="ln">    77</span>		&amp;maskedSig{mask: []byte(&#34;\xFF\xFF\xFF\x00&#34;), pat: []byte(&#34;\xEF\xBB\xBF\x00&#34;), ct: &#34;text/plain; charset=utf-8&#34;},
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>		&amp;exactSig{[]byte(&#34;GIF87a&#34;), &#34;image/gif&#34;},
<a id="L80"></a><span class="ln">    80</span>		&amp;exactSig{[]byte(&#34;GIF89a&#34;), &#34;image/gif&#34;},
<a id="L81"></a><span class="ln">    81</span>		&amp;exactSig{[]byte(&#34;\x89\x50\x4E\x47\x0D\x0A\x1A\x0A&#34;), &#34;image/png&#34;},
<a id="L82"></a><span class="ln">    82</span>		&amp;exactSig{[]byte(&#34;\xFF\xD8\xFF&#34;), &#34;image/jpeg&#34;},
<a id="L83"></a><span class="ln">    83</span>		&amp;exactSig{[]byte(&#34;BM&#34;), &#34;image/bmp&#34;},
<a id="L84"></a><span class="ln">    84</span>		&amp;maskedSig{
<a id="L85"></a><span class="ln">    85</span>			mask: []byte(&#34;\xFF\xFF\xFF\xFF\x00\x00\x00\x00\xFF\xFF\xFF\xFF\xFF\xFF&#34;),
<a id="L86"></a><span class="ln">    86</span>			pat:  []byte(&#34;RIFF\x00\x00\x00\x00WEBPVP&#34;),
<a id="L87"></a><span class="ln">    87</span>			ct:   &#34;image/webp&#34;,
<a id="L88"></a><span class="ln">    88</span>		},
<a id="L89"></a><span class="ln">    89</span>		&amp;exactSig{[]byte(&#34;\x00\x00\x01\x00&#34;), &#34;image/vnd.microsoft.icon&#34;},
<a id="L90"></a><span class="ln">    90</span>		&amp;exactSig{[]byte(&#34;\x4F\x67\x67\x53\x00&#34;), &#34;application/ogg&#34;},
<a id="L91"></a><span class="ln">    91</span>		&amp;maskedSig{
<a id="L92"></a><span class="ln">    92</span>			mask: []byte(&#34;\xFF\xFF\xFF\xFF\x00\x00\x00\x00\xFF\xFF\xFF\xFF&#34;),
<a id="L93"></a><span class="ln">    93</span>			pat:  []byte(&#34;RIFF\x00\x00\x00\x00WAVE&#34;),
<a id="L94"></a><span class="ln">    94</span>			ct:   &#34;audio/wave&#34;,
<a id="L95"></a><span class="ln">    95</span>		},
<a id="L96"></a><span class="ln">    96</span>		&amp;exactSig{[]byte(&#34;\x1A\x45\xDF\xA3&#34;), &#34;video/webm&#34;},
<a id="L97"></a><span class="ln">    97</span>		&amp;exactSig{[]byte(&#34;\x52\x61\x72\x20\x1A\x07\x00&#34;), &#34;application/x-rar-compressed&#34;},
<a id="L98"></a><span class="ln">    98</span>		&amp;exactSig{[]byte(&#34;\x50\x4B\x03\x04&#34;), &#34;application/zip&#34;},
<a id="L99"></a><span class="ln">    99</span>		&amp;exactSig{[]byte(&#34;\x1F\x8B\x08&#34;), &#34;application/x-gzip&#34;},
<a id="L100"></a><span class="ln">   100</span>	
<a id="L101"></a><span class="ln">   101</span>		<span class="comment">// TODO(dsymonds): Re-enable this when the spec is sorted w.r.t. MP4.</span>
<a id="L102"></a><span class="ln">   102</span>		<span class="comment">//mp4Sig(0),</span>
<a id="L103"></a><span class="ln">   103</span>	
<a id="L104"></a><span class="ln">   104</span>		textSig(0), <span class="comment">// should be last</span>
<a id="L105"></a><span class="ln">   105</span>	}
<a id="L106"></a><span class="ln">   106</span>	
<a id="L107"></a><span class="ln">   107</span>	type exactSig struct {
<a id="L108"></a><span class="ln">   108</span>		sig []byte
<a id="L109"></a><span class="ln">   109</span>		ct  string
<a id="L110"></a><span class="ln">   110</span>	}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>	func (e *exactSig) match(data []byte, firstNonWS int) string {
<a id="L113"></a><span class="ln">   113</span>		if bytes.HasPrefix(data, e.sig) {
<a id="L114"></a><span class="ln">   114</span>			return e.ct
<a id="L115"></a><span class="ln">   115</span>		}
<a id="L116"></a><span class="ln">   116</span>		return &#34;&#34;
<a id="L117"></a><span class="ln">   117</span>	}
<a id="L118"></a><span class="ln">   118</span>	
<a id="L119"></a><span class="ln">   119</span>	type maskedSig struct {
<a id="L120"></a><span class="ln">   120</span>		mask, pat []byte
<a id="L121"></a><span class="ln">   121</span>		skipWS    bool
<a id="L122"></a><span class="ln">   122</span>		ct        string
<a id="L123"></a><span class="ln">   123</span>	}
<a id="L124"></a><span class="ln">   124</span>	
<a id="L125"></a><span class="ln">   125</span>	func (m *maskedSig) match(data []byte, firstNonWS int) string {
<a id="L126"></a><span class="ln">   126</span>		if m.skipWS {
<a id="L127"></a><span class="ln">   127</span>			data = data[firstNonWS:]
<a id="L128"></a><span class="ln">   128</span>		}
<a id="L129"></a><span class="ln">   129</span>		if len(data) &lt; len(m.mask) {
<a id="L130"></a><span class="ln">   130</span>			return &#34;&#34;
<a id="L131"></a><span class="ln">   131</span>		}
<a id="L132"></a><span class="ln">   132</span>		for i, mask := range m.mask {
<a id="L133"></a><span class="ln">   133</span>			db := data[i] &amp; mask
<a id="L134"></a><span class="ln">   134</span>			if db != m.pat[i] {
<a id="L135"></a><span class="ln">   135</span>				return &#34;&#34;
<a id="L136"></a><span class="ln">   136</span>			}
<a id="L137"></a><span class="ln">   137</span>		}
<a id="L138"></a><span class="ln">   138</span>		return m.ct
<a id="L139"></a><span class="ln">   139</span>	}
<a id="L140"></a><span class="ln">   140</span>	
<a id="L141"></a><span class="ln">   141</span>	type htmlSig []byte
<a id="L142"></a><span class="ln">   142</span>	
<a id="L143"></a><span class="ln">   143</span>	func (h htmlSig) match(data []byte, firstNonWS int) string {
<a id="L144"></a><span class="ln">   144</span>		data = data[firstNonWS:]
<a id="L145"></a><span class="ln">   145</span>		if len(data) &lt; len(h)+1 {
<a id="L146"></a><span class="ln">   146</span>			return &#34;&#34;
<a id="L147"></a><span class="ln">   147</span>		}
<a id="L148"></a><span class="ln">   148</span>		for i, b := range h {
<a id="L149"></a><span class="ln">   149</span>			db := data[i]
<a id="L150"></a><span class="ln">   150</span>			if &#39;A&#39; &lt;= b &amp;&amp; b &lt;= &#39;Z&#39; {
<a id="L151"></a><span class="ln">   151</span>				db &amp;= 0xDF
<a id="L152"></a><span class="ln">   152</span>			}
<a id="L153"></a><span class="ln">   153</span>			if b != db {
<a id="L154"></a><span class="ln">   154</span>				return &#34;&#34;
<a id="L155"></a><span class="ln">   155</span>			}
<a id="L156"></a><span class="ln">   156</span>		}
<a id="L157"></a><span class="ln">   157</span>		<span class="comment">// Next byte must be space or right angle bracket.</span>
<a id="L158"></a><span class="ln">   158</span>		if db := data[len(h)]; db != &#39; &#39; &amp;&amp; db != &#39;&gt;&#39; {
<a id="L159"></a><span class="ln">   159</span>			return &#34;&#34;
<a id="L160"></a><span class="ln">   160</span>		}
<a id="L161"></a><span class="ln">   161</span>		return &#34;text/html; charset=utf-8&#34;
<a id="L162"></a><span class="ln">   162</span>	}
<a id="L163"></a><span class="ln">   163</span>	
<a id="L164"></a><span class="ln">   164</span>	type mp4Sig int
<a id="L165"></a><span class="ln">   165</span>	
<a id="L166"></a><span class="ln">   166</span>	func (mp4Sig) match(data []byte, firstNonWS int) string {
<a id="L167"></a><span class="ln">   167</span>		<span class="comment">// c.f. section 6.1.</span>
<a id="L168"></a><span class="ln">   168</span>		if len(data) &lt; 8 {
<a id="L169"></a><span class="ln">   169</span>			return &#34;&#34;
<a id="L170"></a><span class="ln">   170</span>		}
<a id="L171"></a><span class="ln">   171</span>		boxSize := int(binary.BigEndian.Uint32(data[:4]))
<a id="L172"></a><span class="ln">   172</span>		if boxSize%4 != 0 || len(data) &lt; boxSize {
<a id="L173"></a><span class="ln">   173</span>			return &#34;&#34;
<a id="L174"></a><span class="ln">   174</span>		}
<a id="L175"></a><span class="ln">   175</span>		if !bytes.Equal(data[4:8], []byte(&#34;ftyp&#34;)) {
<a id="L176"></a><span class="ln">   176</span>			return &#34;&#34;
<a id="L177"></a><span class="ln">   177</span>		}
<a id="L178"></a><span class="ln">   178</span>		for st := 8; st &lt; boxSize; st += 4 {
<a id="L179"></a><span class="ln">   179</span>			if st == 12 {
<a id="L180"></a><span class="ln">   180</span>				<span class="comment">// minor version number</span>
<a id="L181"></a><span class="ln">   181</span>				continue
<a id="L182"></a><span class="ln">   182</span>			}
<a id="L183"></a><span class="ln">   183</span>			seg := string(data[st : st+3])
<a id="L184"></a><span class="ln">   184</span>			switch seg {
<a id="L185"></a><span class="ln">   185</span>			case &#34;mp4&#34;, &#34;iso&#34;, &#34;M4V&#34;, &#34;M4P&#34;, &#34;M4B&#34;:
<a id="L186"></a><span class="ln">   186</span>				return &#34;video/mp4&#34;
<a id="L187"></a><span class="ln">   187</span>				<span class="comment">/* The remainder are not in the spec.
</span><a id="L188"></a><span class="ln">   188</span>	<span class="comment">			case &#34;M4A&#34;:
</span><a id="L189"></a><span class="ln">   189</span>	<span class="comment">				return &#34;audio/mp4&#34;
</span><a id="L190"></a><span class="ln">   190</span>	<span class="comment">			case &#34;3gp&#34;:
</span><a id="L191"></a><span class="ln">   191</span>	<span class="comment">				return &#34;video/3gpp&#34;
</span><a id="L192"></a><span class="ln">   192</span>	<span class="comment">			case &#34;jp2&#34;:
</span><a id="L193"></a><span class="ln">   193</span>	<span class="comment">				return &#34;image/jp2&#34; // JPEG 2000
</span><a id="L194"></a><span class="ln">   194</span>	<span class="comment">			*/</span>
<a id="L195"></a><span class="ln">   195</span>			}
<a id="L196"></a><span class="ln">   196</span>		}
<a id="L197"></a><span class="ln">   197</span>		return &#34;&#34;
<a id="L198"></a><span class="ln">   198</span>	}
<a id="L199"></a><span class="ln">   199</span>	
<a id="L200"></a><span class="ln">   200</span>	type textSig int
<a id="L201"></a><span class="ln">   201</span>	
<a id="L202"></a><span class="ln">   202</span>	func (textSig) match(data []byte, firstNonWS int) string {
<a id="L203"></a><span class="ln">   203</span>		<span class="comment">// c.f. section 5, step 4.</span>
<a id="L204"></a><span class="ln">   204</span>		for _, b := range data[firstNonWS:] {
<a id="L205"></a><span class="ln">   205</span>			switch {
<a id="L206"></a><span class="ln">   206</span>			case 0x00 &lt;= b &amp;&amp; b &lt;= 0x08,
<a id="L207"></a><span class="ln">   207</span>				b == 0x0B,
<a id="L208"></a><span class="ln">   208</span>				0x0E &lt;= b &amp;&amp; b &lt;= 0x1A,
<a id="L209"></a><span class="ln">   209</span>				0x1C &lt;= b &amp;&amp; b &lt;= 0x1F:
<a id="L210"></a><span class="ln">   210</span>				return &#34;&#34;
<a id="L211"></a><span class="ln">   211</span>			}
<a id="L212"></a><span class="ln">   212</span>		}
<a id="L213"></a><span class="ln">   213</span>		return &#34;text/plain; charset=utf-8&#34;
<a id="L214"></a><span class="ln">   214</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

