<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/http/transfer.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/http/transfer.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package http
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bufio&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;bytes&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;errors&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;fmt&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;io&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;io/ioutil&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;net/textproto&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;strconv&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;strings&#34;
<a id="L17"></a><span class="ln">    17</span>	)
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// transferWriter inspects the fields of a user-supplied Request or Response,</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// sanitizes them without changing the user object and provides methods for</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// writing the respective header, body and trailer in wire format.</span>
<a id="L22"></a><span class="ln">    22</span>	type transferWriter struct {
<a id="L23"></a><span class="ln">    23</span>		Method           string
<a id="L24"></a><span class="ln">    24</span>		Body             io.Reader
<a id="L25"></a><span class="ln">    25</span>		BodyCloser       io.Closer
<a id="L26"></a><span class="ln">    26</span>		ResponseToHEAD   bool
<a id="L27"></a><span class="ln">    27</span>		ContentLength    int64 <span class="comment">// -1 means unknown, 0 means exactly none</span>
<a id="L28"></a><span class="ln">    28</span>		Close            bool
<a id="L29"></a><span class="ln">    29</span>		TransferEncoding []string
<a id="L30"></a><span class="ln">    30</span>		Trailer          Header
<a id="L31"></a><span class="ln">    31</span>	}
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	func newTransferWriter(r interface{}) (t *transferWriter, err error) {
<a id="L34"></a><span class="ln">    34</span>		t = &amp;transferWriter{}
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>		<span class="comment">// Extract relevant fields</span>
<a id="L37"></a><span class="ln">    37</span>		atLeastHTTP11 := false
<a id="L38"></a><span class="ln">    38</span>		switch rr := r.(type) {
<a id="L39"></a><span class="ln">    39</span>		case *Request:
<a id="L40"></a><span class="ln">    40</span>			if rr.ContentLength != 0 &amp;&amp; rr.Body == nil {
<a id="L41"></a><span class="ln">    41</span>				return nil, fmt.Errorf(&#34;http: Request.ContentLength=%d with nil Body&#34;, rr.ContentLength)
<a id="L42"></a><span class="ln">    42</span>			}
<a id="L43"></a><span class="ln">    43</span>			t.Method = rr.Method
<a id="L44"></a><span class="ln">    44</span>			t.Body = rr.Body
<a id="L45"></a><span class="ln">    45</span>			t.BodyCloser = rr.Body
<a id="L46"></a><span class="ln">    46</span>			t.ContentLength = rr.ContentLength
<a id="L47"></a><span class="ln">    47</span>			t.Close = rr.Close
<a id="L48"></a><span class="ln">    48</span>			t.TransferEncoding = rr.TransferEncoding
<a id="L49"></a><span class="ln">    49</span>			t.Trailer = rr.Trailer
<a id="L50"></a><span class="ln">    50</span>			atLeastHTTP11 = rr.ProtoAtLeast(1, 1)
<a id="L51"></a><span class="ln">    51</span>			if t.Body != nil &amp;&amp; len(t.TransferEncoding) == 0 &amp;&amp; atLeastHTTP11 {
<a id="L52"></a><span class="ln">    52</span>				if t.ContentLength == 0 {
<a id="L53"></a><span class="ln">    53</span>					<span class="comment">// Test to see if it&#39;s actually zero or just unset.</span>
<a id="L54"></a><span class="ln">    54</span>					var buf [1]byte
<a id="L55"></a><span class="ln">    55</span>					n, _ := io.ReadFull(t.Body, buf[:])
<a id="L56"></a><span class="ln">    56</span>					if n == 1 {
<a id="L57"></a><span class="ln">    57</span>						<span class="comment">// Oh, guess there is data in this Body Reader after all.</span>
<a id="L58"></a><span class="ln">    58</span>						<span class="comment">// The ContentLength field just wasn&#39;t set.</span>
<a id="L59"></a><span class="ln">    59</span>						<span class="comment">// Stich the Body back together again, re-attaching our</span>
<a id="L60"></a><span class="ln">    60</span>						<span class="comment">// consumed byte.</span>
<a id="L61"></a><span class="ln">    61</span>						t.ContentLength = -1
<a id="L62"></a><span class="ln">    62</span>						t.Body = io.MultiReader(bytes.NewBuffer(buf[:]), t.Body)
<a id="L63"></a><span class="ln">    63</span>					} else {
<a id="L64"></a><span class="ln">    64</span>						<span class="comment">// Body is actually empty.</span>
<a id="L65"></a><span class="ln">    65</span>						t.Body = nil
<a id="L66"></a><span class="ln">    66</span>						t.BodyCloser = nil
<a id="L67"></a><span class="ln">    67</span>					}
<a id="L68"></a><span class="ln">    68</span>				}
<a id="L69"></a><span class="ln">    69</span>				if t.ContentLength &lt; 0 {
<a id="L70"></a><span class="ln">    70</span>					t.TransferEncoding = []string{&#34;chunked&#34;}
<a id="L71"></a><span class="ln">    71</span>				}
<a id="L72"></a><span class="ln">    72</span>			}
<a id="L73"></a><span class="ln">    73</span>		case *Response:
<a id="L74"></a><span class="ln">    74</span>			t.Method = rr.Request.Method
<a id="L75"></a><span class="ln">    75</span>			t.Body = rr.Body
<a id="L76"></a><span class="ln">    76</span>			t.BodyCloser = rr.Body
<a id="L77"></a><span class="ln">    77</span>			t.ContentLength = rr.ContentLength
<a id="L78"></a><span class="ln">    78</span>			t.Close = rr.Close
<a id="L79"></a><span class="ln">    79</span>			t.TransferEncoding = rr.TransferEncoding
<a id="L80"></a><span class="ln">    80</span>			t.Trailer = rr.Trailer
<a id="L81"></a><span class="ln">    81</span>			atLeastHTTP11 = rr.ProtoAtLeast(1, 1)
<a id="L82"></a><span class="ln">    82</span>			t.ResponseToHEAD = noBodyExpected(rr.Request.Method)
<a id="L83"></a><span class="ln">    83</span>		}
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>		<span class="comment">// Sanitize Body,ContentLength,TransferEncoding</span>
<a id="L86"></a><span class="ln">    86</span>		if t.ResponseToHEAD {
<a id="L87"></a><span class="ln">    87</span>			t.Body = nil
<a id="L88"></a><span class="ln">    88</span>			t.TransferEncoding = nil
<a id="L89"></a><span class="ln">    89</span>			<span class="comment">// ContentLength is expected to hold Content-Length</span>
<a id="L90"></a><span class="ln">    90</span>			if t.ContentLength &lt; 0 {
<a id="L91"></a><span class="ln">    91</span>				return nil, ErrMissingContentLength
<a id="L92"></a><span class="ln">    92</span>			}
<a id="L93"></a><span class="ln">    93</span>		} else {
<a id="L94"></a><span class="ln">    94</span>			if !atLeastHTTP11 || t.Body == nil {
<a id="L95"></a><span class="ln">    95</span>				t.TransferEncoding = nil
<a id="L96"></a><span class="ln">    96</span>			}
<a id="L97"></a><span class="ln">    97</span>			if chunked(t.TransferEncoding) {
<a id="L98"></a><span class="ln">    98</span>				t.ContentLength = -1
<a id="L99"></a><span class="ln">    99</span>			} else if t.Body == nil { <span class="comment">// no chunking, no body</span>
<a id="L100"></a><span class="ln">   100</span>				t.ContentLength = 0
<a id="L101"></a><span class="ln">   101</span>			}
<a id="L102"></a><span class="ln">   102</span>		}
<a id="L103"></a><span class="ln">   103</span>	
<a id="L104"></a><span class="ln">   104</span>		<span class="comment">// Sanitize Trailer</span>
<a id="L105"></a><span class="ln">   105</span>		if !chunked(t.TransferEncoding) {
<a id="L106"></a><span class="ln">   106</span>			t.Trailer = nil
<a id="L107"></a><span class="ln">   107</span>		}
<a id="L108"></a><span class="ln">   108</span>	
<a id="L109"></a><span class="ln">   109</span>		return t, nil
<a id="L110"></a><span class="ln">   110</span>	}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>	func noBodyExpected(requestMethod string) bool {
<a id="L113"></a><span class="ln">   113</span>		return requestMethod == &#34;HEAD&#34;
<a id="L114"></a><span class="ln">   114</span>	}
<a id="L115"></a><span class="ln">   115</span>	
<a id="L116"></a><span class="ln">   116</span>	func (t *transferWriter) shouldSendContentLength() bool {
<a id="L117"></a><span class="ln">   117</span>		if chunked(t.TransferEncoding) {
<a id="L118"></a><span class="ln">   118</span>			return false
<a id="L119"></a><span class="ln">   119</span>		}
<a id="L120"></a><span class="ln">   120</span>		if t.ContentLength &gt; 0 {
<a id="L121"></a><span class="ln">   121</span>			return true
<a id="L122"></a><span class="ln">   122</span>		}
<a id="L123"></a><span class="ln">   123</span>		if t.ResponseToHEAD {
<a id="L124"></a><span class="ln">   124</span>			return true
<a id="L125"></a><span class="ln">   125</span>		}
<a id="L126"></a><span class="ln">   126</span>		<span class="comment">// Many servers expect a Content-Length for these methods</span>
<a id="L127"></a><span class="ln">   127</span>		if t.Method == &#34;POST&#34; || t.Method == &#34;PUT&#34; {
<a id="L128"></a><span class="ln">   128</span>			return true
<a id="L129"></a><span class="ln">   129</span>		}
<a id="L130"></a><span class="ln">   130</span>		if t.ContentLength == 0 &amp;&amp; isIdentity(t.TransferEncoding) {
<a id="L131"></a><span class="ln">   131</span>			return true
<a id="L132"></a><span class="ln">   132</span>		}
<a id="L133"></a><span class="ln">   133</span>	
<a id="L134"></a><span class="ln">   134</span>		return false
<a id="L135"></a><span class="ln">   135</span>	}
<a id="L136"></a><span class="ln">   136</span>	
<a id="L137"></a><span class="ln">   137</span>	func (t *transferWriter) WriteHeader(w io.Writer) (err error) {
<a id="L138"></a><span class="ln">   138</span>		if t.Close {
<a id="L139"></a><span class="ln">   139</span>			_, err = io.WriteString(w, &#34;Connection: close\r\n&#34;)
<a id="L140"></a><span class="ln">   140</span>			if err != nil {
<a id="L141"></a><span class="ln">   141</span>				return
<a id="L142"></a><span class="ln">   142</span>			}
<a id="L143"></a><span class="ln">   143</span>		}
<a id="L144"></a><span class="ln">   144</span>	
<a id="L145"></a><span class="ln">   145</span>		<span class="comment">// Write Content-Length and/or Transfer-Encoding whose values are a</span>
<a id="L146"></a><span class="ln">   146</span>		<span class="comment">// function of the sanitized field triple (Body, ContentLength,</span>
<a id="L147"></a><span class="ln">   147</span>		<span class="comment">// TransferEncoding)</span>
<a id="L148"></a><span class="ln">   148</span>		if t.shouldSendContentLength() {
<a id="L149"></a><span class="ln">   149</span>			io.WriteString(w, &#34;Content-Length: &#34;)
<a id="L150"></a><span class="ln">   150</span>			_, err = io.WriteString(w, strconv.FormatInt(t.ContentLength, 10)+&#34;\r\n&#34;)
<a id="L151"></a><span class="ln">   151</span>			if err != nil {
<a id="L152"></a><span class="ln">   152</span>				return
<a id="L153"></a><span class="ln">   153</span>			}
<a id="L154"></a><span class="ln">   154</span>		} else if chunked(t.TransferEncoding) {
<a id="L155"></a><span class="ln">   155</span>			_, err = io.WriteString(w, &#34;Transfer-Encoding: chunked\r\n&#34;)
<a id="L156"></a><span class="ln">   156</span>			if err != nil {
<a id="L157"></a><span class="ln">   157</span>				return
<a id="L158"></a><span class="ln">   158</span>			}
<a id="L159"></a><span class="ln">   159</span>		}
<a id="L160"></a><span class="ln">   160</span>	
<a id="L161"></a><span class="ln">   161</span>		<span class="comment">// Write Trailer header</span>
<a id="L162"></a><span class="ln">   162</span>		if t.Trailer != nil {
<a id="L163"></a><span class="ln">   163</span>			<span class="comment">// TODO: At some point, there should be a generic mechanism for</span>
<a id="L164"></a><span class="ln">   164</span>			<span class="comment">// writing long headers, using HTTP line splitting</span>
<a id="L165"></a><span class="ln">   165</span>			io.WriteString(w, &#34;Trailer: &#34;)
<a id="L166"></a><span class="ln">   166</span>			needComma := false
<a id="L167"></a><span class="ln">   167</span>			for k := range t.Trailer {
<a id="L168"></a><span class="ln">   168</span>				k = CanonicalHeaderKey(k)
<a id="L169"></a><span class="ln">   169</span>				switch k {
<a id="L170"></a><span class="ln">   170</span>				case &#34;Transfer-Encoding&#34;, &#34;Trailer&#34;, &#34;Content-Length&#34;:
<a id="L171"></a><span class="ln">   171</span>					return &amp;badStringError{&#34;invalid Trailer key&#34;, k}
<a id="L172"></a><span class="ln">   172</span>				}
<a id="L173"></a><span class="ln">   173</span>				if needComma {
<a id="L174"></a><span class="ln">   174</span>					io.WriteString(w, &#34;,&#34;)
<a id="L175"></a><span class="ln">   175</span>				}
<a id="L176"></a><span class="ln">   176</span>				io.WriteString(w, k)
<a id="L177"></a><span class="ln">   177</span>				needComma = true
<a id="L178"></a><span class="ln">   178</span>			}
<a id="L179"></a><span class="ln">   179</span>			_, err = io.WriteString(w, &#34;\r\n&#34;)
<a id="L180"></a><span class="ln">   180</span>		}
<a id="L181"></a><span class="ln">   181</span>	
<a id="L182"></a><span class="ln">   182</span>		return
<a id="L183"></a><span class="ln">   183</span>	}
<a id="L184"></a><span class="ln">   184</span>	
<a id="L185"></a><span class="ln">   185</span>	func (t *transferWriter) WriteBody(w io.Writer) (err error) {
<a id="L186"></a><span class="ln">   186</span>		var ncopy int64
<a id="L187"></a><span class="ln">   187</span>	
<a id="L188"></a><span class="ln">   188</span>		<span class="comment">// Write body</span>
<a id="L189"></a><span class="ln">   189</span>		if t.Body != nil {
<a id="L190"></a><span class="ln">   190</span>			if chunked(t.TransferEncoding) {
<a id="L191"></a><span class="ln">   191</span>				cw := newChunkedWriter(w)
<a id="L192"></a><span class="ln">   192</span>				_, err = io.Copy(cw, t.Body)
<a id="L193"></a><span class="ln">   193</span>				if err == nil {
<a id="L194"></a><span class="ln">   194</span>					err = cw.Close()
<a id="L195"></a><span class="ln">   195</span>				}
<a id="L196"></a><span class="ln">   196</span>			} else if t.ContentLength == -1 {
<a id="L197"></a><span class="ln">   197</span>				ncopy, err = io.Copy(w, t.Body)
<a id="L198"></a><span class="ln">   198</span>			} else {
<a id="L199"></a><span class="ln">   199</span>				ncopy, err = io.Copy(w, io.LimitReader(t.Body, t.ContentLength))
<a id="L200"></a><span class="ln">   200</span>				nextra, err := io.Copy(ioutil.Discard, t.Body)
<a id="L201"></a><span class="ln">   201</span>				if err != nil {
<a id="L202"></a><span class="ln">   202</span>					return err
<a id="L203"></a><span class="ln">   203</span>				}
<a id="L204"></a><span class="ln">   204</span>				ncopy += nextra
<a id="L205"></a><span class="ln">   205</span>			}
<a id="L206"></a><span class="ln">   206</span>			if err != nil {
<a id="L207"></a><span class="ln">   207</span>				return err
<a id="L208"></a><span class="ln">   208</span>			}
<a id="L209"></a><span class="ln">   209</span>			if err = t.BodyCloser.Close(); err != nil {
<a id="L210"></a><span class="ln">   210</span>				return err
<a id="L211"></a><span class="ln">   211</span>			}
<a id="L212"></a><span class="ln">   212</span>		}
<a id="L213"></a><span class="ln">   213</span>	
<a id="L214"></a><span class="ln">   214</span>		if t.ContentLength != -1 &amp;&amp; t.ContentLength != ncopy {
<a id="L215"></a><span class="ln">   215</span>			return fmt.Errorf(&#34;http: Request.ContentLength=%d with Body length %d&#34;,
<a id="L216"></a><span class="ln">   216</span>				t.ContentLength, ncopy)
<a id="L217"></a><span class="ln">   217</span>		}
<a id="L218"></a><span class="ln">   218</span>	
<a id="L219"></a><span class="ln">   219</span>		<span class="comment">// TODO(petar): Place trailer writer code here.</span>
<a id="L220"></a><span class="ln">   220</span>		if chunked(t.TransferEncoding) {
<a id="L221"></a><span class="ln">   221</span>			<span class="comment">// Last chunk, empty trailer</span>
<a id="L222"></a><span class="ln">   222</span>			_, err = io.WriteString(w, &#34;\r\n&#34;)
<a id="L223"></a><span class="ln">   223</span>		}
<a id="L224"></a><span class="ln">   224</span>	
<a id="L225"></a><span class="ln">   225</span>		return
<a id="L226"></a><span class="ln">   226</span>	}
<a id="L227"></a><span class="ln">   227</span>	
<a id="L228"></a><span class="ln">   228</span>	type transferReader struct {
<a id="L229"></a><span class="ln">   229</span>		<span class="comment">// Input</span>
<a id="L230"></a><span class="ln">   230</span>		Header        Header
<a id="L231"></a><span class="ln">   231</span>		StatusCode    int
<a id="L232"></a><span class="ln">   232</span>		RequestMethod string
<a id="L233"></a><span class="ln">   233</span>		ProtoMajor    int
<a id="L234"></a><span class="ln">   234</span>		ProtoMinor    int
<a id="L235"></a><span class="ln">   235</span>		<span class="comment">// Output</span>
<a id="L236"></a><span class="ln">   236</span>		Body             io.ReadCloser
<a id="L237"></a><span class="ln">   237</span>		ContentLength    int64
<a id="L238"></a><span class="ln">   238</span>		TransferEncoding []string
<a id="L239"></a><span class="ln">   239</span>		Close            bool
<a id="L240"></a><span class="ln">   240</span>		Trailer          Header
<a id="L241"></a><span class="ln">   241</span>	}
<a id="L242"></a><span class="ln">   242</span>	
<a id="L243"></a><span class="ln">   243</span>	<span class="comment">// bodyAllowedForStatus returns whether a given response status code</span>
<a id="L244"></a><span class="ln">   244</span>	<span class="comment">// permits a body.  See RFC2616, section 4.4.</span>
<a id="L245"></a><span class="ln">   245</span>	func bodyAllowedForStatus(status int) bool {
<a id="L246"></a><span class="ln">   246</span>		switch {
<a id="L247"></a><span class="ln">   247</span>		case status &gt;= 100 &amp;&amp; status &lt;= 199:
<a id="L248"></a><span class="ln">   248</span>			return false
<a id="L249"></a><span class="ln">   249</span>		case status == 204:
<a id="L250"></a><span class="ln">   250</span>			return false
<a id="L251"></a><span class="ln">   251</span>		case status == 304:
<a id="L252"></a><span class="ln">   252</span>			return false
<a id="L253"></a><span class="ln">   253</span>		}
<a id="L254"></a><span class="ln">   254</span>		return true
<a id="L255"></a><span class="ln">   255</span>	}
<a id="L256"></a><span class="ln">   256</span>	
<a id="L257"></a><span class="ln">   257</span>	<span class="comment">// msg is *Request or *Response.</span>
<a id="L258"></a><span class="ln">   258</span>	func readTransfer(msg interface{}, r *bufio.Reader) (err error) {
<a id="L259"></a><span class="ln">   259</span>		t := &amp;transferReader{}
<a id="L260"></a><span class="ln">   260</span>	
<a id="L261"></a><span class="ln">   261</span>		<span class="comment">// Unify input</span>
<a id="L262"></a><span class="ln">   262</span>		isResponse := false
<a id="L263"></a><span class="ln">   263</span>		switch rr := msg.(type) {
<a id="L264"></a><span class="ln">   264</span>		case *Response:
<a id="L265"></a><span class="ln">   265</span>			t.Header = rr.Header
<a id="L266"></a><span class="ln">   266</span>			t.StatusCode = rr.StatusCode
<a id="L267"></a><span class="ln">   267</span>			t.RequestMethod = rr.Request.Method
<a id="L268"></a><span class="ln">   268</span>			t.ProtoMajor = rr.ProtoMajor
<a id="L269"></a><span class="ln">   269</span>			t.ProtoMinor = rr.ProtoMinor
<a id="L270"></a><span class="ln">   270</span>			t.Close = shouldClose(t.ProtoMajor, t.ProtoMinor, t.Header)
<a id="L271"></a><span class="ln">   271</span>			isResponse = true
<a id="L272"></a><span class="ln">   272</span>		case *Request:
<a id="L273"></a><span class="ln">   273</span>			t.Header = rr.Header
<a id="L274"></a><span class="ln">   274</span>			t.ProtoMajor = rr.ProtoMajor
<a id="L275"></a><span class="ln">   275</span>			t.ProtoMinor = rr.ProtoMinor
<a id="L276"></a><span class="ln">   276</span>			<span class="comment">// Transfer semantics for Requests are exactly like those for</span>
<a id="L277"></a><span class="ln">   277</span>			<span class="comment">// Responses with status code 200, responding to a GET method</span>
<a id="L278"></a><span class="ln">   278</span>			t.StatusCode = 200
<a id="L279"></a><span class="ln">   279</span>			t.RequestMethod = &#34;GET&#34;
<a id="L280"></a><span class="ln">   280</span>		default:
<a id="L281"></a><span class="ln">   281</span>			panic(&#34;unexpected type&#34;)
<a id="L282"></a><span class="ln">   282</span>		}
<a id="L283"></a><span class="ln">   283</span>	
<a id="L284"></a><span class="ln">   284</span>		<span class="comment">// Default to HTTP/1.1</span>
<a id="L285"></a><span class="ln">   285</span>		if t.ProtoMajor == 0 &amp;&amp; t.ProtoMinor == 0 {
<a id="L286"></a><span class="ln">   286</span>			t.ProtoMajor, t.ProtoMinor = 1, 1
<a id="L287"></a><span class="ln">   287</span>		}
<a id="L288"></a><span class="ln">   288</span>	
<a id="L289"></a><span class="ln">   289</span>		<span class="comment">// Transfer encoding, content length</span>
<a id="L290"></a><span class="ln">   290</span>		t.TransferEncoding, err = fixTransferEncoding(t.RequestMethod, t.Header)
<a id="L291"></a><span class="ln">   291</span>		if err != nil {
<a id="L292"></a><span class="ln">   292</span>			return err
<a id="L293"></a><span class="ln">   293</span>		}
<a id="L294"></a><span class="ln">   294</span>	
<a id="L295"></a><span class="ln">   295</span>		t.ContentLength, err = fixLength(isResponse, t.StatusCode, t.RequestMethod, t.Header, t.TransferEncoding)
<a id="L296"></a><span class="ln">   296</span>		if err != nil {
<a id="L297"></a><span class="ln">   297</span>			return err
<a id="L298"></a><span class="ln">   298</span>		}
<a id="L299"></a><span class="ln">   299</span>	
<a id="L300"></a><span class="ln">   300</span>		<span class="comment">// Trailer</span>
<a id="L301"></a><span class="ln">   301</span>		t.Trailer, err = fixTrailer(t.Header, t.TransferEncoding)
<a id="L302"></a><span class="ln">   302</span>		if err != nil {
<a id="L303"></a><span class="ln">   303</span>			return err
<a id="L304"></a><span class="ln">   304</span>		}
<a id="L305"></a><span class="ln">   305</span>	
<a id="L306"></a><span class="ln">   306</span>		<span class="comment">// If there is no Content-Length or chunked Transfer-Encoding on a *Response</span>
<a id="L307"></a><span class="ln">   307</span>		<span class="comment">// and the status is not 1xx, 204 or 304, then the body is unbounded.</span>
<a id="L308"></a><span class="ln">   308</span>		<span class="comment">// See RFC2616, section 4.4.</span>
<a id="L309"></a><span class="ln">   309</span>		switch msg.(type) {
<a id="L310"></a><span class="ln">   310</span>		case *Response:
<a id="L311"></a><span class="ln">   311</span>			if t.ContentLength == -1 &amp;&amp;
<a id="L312"></a><span class="ln">   312</span>				!chunked(t.TransferEncoding) &amp;&amp;
<a id="L313"></a><span class="ln">   313</span>				bodyAllowedForStatus(t.StatusCode) {
<a id="L314"></a><span class="ln">   314</span>				<span class="comment">// Unbounded body.</span>
<a id="L315"></a><span class="ln">   315</span>				t.Close = true
<a id="L316"></a><span class="ln">   316</span>			}
<a id="L317"></a><span class="ln">   317</span>		}
<a id="L318"></a><span class="ln">   318</span>	
<a id="L319"></a><span class="ln">   319</span>		<span class="comment">// Prepare body reader.  ContentLength &lt; 0 means chunked encoding</span>
<a id="L320"></a><span class="ln">   320</span>		<span class="comment">// or close connection when finished, since multipart is not supported yet</span>
<a id="L321"></a><span class="ln">   321</span>		switch {
<a id="L322"></a><span class="ln">   322</span>		case chunked(t.TransferEncoding):
<a id="L323"></a><span class="ln">   323</span>			t.Body = &amp;body{Reader: newChunkedReader(r), hdr: msg, r: r, closing: t.Close}
<a id="L324"></a><span class="ln">   324</span>		case t.ContentLength &gt;= 0:
<a id="L325"></a><span class="ln">   325</span>			<span class="comment">// TODO: limit the Content-Length. This is an easy DoS vector.</span>
<a id="L326"></a><span class="ln">   326</span>			t.Body = &amp;body{Reader: io.LimitReader(r, t.ContentLength), closing: t.Close}
<a id="L327"></a><span class="ln">   327</span>		default:
<a id="L328"></a><span class="ln">   328</span>			<span class="comment">// t.ContentLength &lt; 0, i.e. &#34;Content-Length&#34; not mentioned in header</span>
<a id="L329"></a><span class="ln">   329</span>			if t.Close {
<a id="L330"></a><span class="ln">   330</span>				<span class="comment">// Close semantics (i.e. HTTP/1.0)</span>
<a id="L331"></a><span class="ln">   331</span>				t.Body = &amp;body{Reader: r, closing: t.Close}
<a id="L332"></a><span class="ln">   332</span>			} else {
<a id="L333"></a><span class="ln">   333</span>				<span class="comment">// Persistent connection (i.e. HTTP/1.1)</span>
<a id="L334"></a><span class="ln">   334</span>				t.Body = &amp;body{Reader: io.LimitReader(r, 0), closing: t.Close}
<a id="L335"></a><span class="ln">   335</span>			}
<a id="L336"></a><span class="ln">   336</span>		}
<a id="L337"></a><span class="ln">   337</span>	
<a id="L338"></a><span class="ln">   338</span>		<span class="comment">// Unify output</span>
<a id="L339"></a><span class="ln">   339</span>		switch rr := msg.(type) {
<a id="L340"></a><span class="ln">   340</span>		case *Request:
<a id="L341"></a><span class="ln">   341</span>			rr.Body = t.Body
<a id="L342"></a><span class="ln">   342</span>			rr.ContentLength = t.ContentLength
<a id="L343"></a><span class="ln">   343</span>			rr.TransferEncoding = t.TransferEncoding
<a id="L344"></a><span class="ln">   344</span>			rr.Close = t.Close
<a id="L345"></a><span class="ln">   345</span>			rr.Trailer = t.Trailer
<a id="L346"></a><span class="ln">   346</span>		case *Response:
<a id="L347"></a><span class="ln">   347</span>			rr.Body = t.Body
<a id="L348"></a><span class="ln">   348</span>			rr.ContentLength = t.ContentLength
<a id="L349"></a><span class="ln">   349</span>			rr.TransferEncoding = t.TransferEncoding
<a id="L350"></a><span class="ln">   350</span>			rr.Close = t.Close
<a id="L351"></a><span class="ln">   351</span>			rr.Trailer = t.Trailer
<a id="L352"></a><span class="ln">   352</span>		}
<a id="L353"></a><span class="ln">   353</span>	
<a id="L354"></a><span class="ln">   354</span>		return nil
<a id="L355"></a><span class="ln">   355</span>	}
<a id="L356"></a><span class="ln">   356</span>	
<a id="L357"></a><span class="ln">   357</span>	<span class="comment">// Checks whether chunked is part of the encodings stack</span>
<a id="L358"></a><span class="ln">   358</span>	func chunked(te []string) bool { return len(te) &gt; 0 &amp;&amp; te[0] == &#34;chunked&#34; }
<a id="L359"></a><span class="ln">   359</span>	
<a id="L360"></a><span class="ln">   360</span>	<span class="comment">// Checks whether the encoding is explicitly &#34;identity&#34;.</span>
<a id="L361"></a><span class="ln">   361</span>	func isIdentity(te []string) bool { return len(te) == 1 &amp;&amp; te[0] == &#34;identity&#34; }
<a id="L362"></a><span class="ln">   362</span>	
<a id="L363"></a><span class="ln">   363</span>	<span class="comment">// Sanitize transfer encoding</span>
<a id="L364"></a><span class="ln">   364</span>	func fixTransferEncoding(requestMethod string, header Header) ([]string, error) {
<a id="L365"></a><span class="ln">   365</span>		raw, present := header[&#34;Transfer-Encoding&#34;]
<a id="L366"></a><span class="ln">   366</span>		if !present {
<a id="L367"></a><span class="ln">   367</span>			return nil, nil
<a id="L368"></a><span class="ln">   368</span>		}
<a id="L369"></a><span class="ln">   369</span>	
<a id="L370"></a><span class="ln">   370</span>		delete(header, &#34;Transfer-Encoding&#34;)
<a id="L371"></a><span class="ln">   371</span>	
<a id="L372"></a><span class="ln">   372</span>		<span class="comment">// Head responses have no bodies, so the transfer encoding</span>
<a id="L373"></a><span class="ln">   373</span>		<span class="comment">// should be ignored.</span>
<a id="L374"></a><span class="ln">   374</span>		if requestMethod == &#34;HEAD&#34; {
<a id="L375"></a><span class="ln">   375</span>			return nil, nil
<a id="L376"></a><span class="ln">   376</span>		}
<a id="L377"></a><span class="ln">   377</span>	
<a id="L378"></a><span class="ln">   378</span>		encodings := strings.Split(raw[0], &#34;,&#34;)
<a id="L379"></a><span class="ln">   379</span>		te := make([]string, 0, len(encodings))
<a id="L380"></a><span class="ln">   380</span>		<span class="comment">// TODO: Even though we only support &#34;identity&#34; and &#34;chunked&#34;</span>
<a id="L381"></a><span class="ln">   381</span>		<span class="comment">// encodings, the loop below is designed with foresight. One</span>
<a id="L382"></a><span class="ln">   382</span>		<span class="comment">// invariant that must be maintained is that, if present,</span>
<a id="L383"></a><span class="ln">   383</span>		<span class="comment">// chunked encoding must always come first.</span>
<a id="L384"></a><span class="ln">   384</span>		for _, encoding := range encodings {
<a id="L385"></a><span class="ln">   385</span>			encoding = strings.ToLower(strings.TrimSpace(encoding))
<a id="L386"></a><span class="ln">   386</span>			<span class="comment">// &#34;identity&#34; encoding is not recorded</span>
<a id="L387"></a><span class="ln">   387</span>			if encoding == &#34;identity&#34; {
<a id="L388"></a><span class="ln">   388</span>				break
<a id="L389"></a><span class="ln">   389</span>			}
<a id="L390"></a><span class="ln">   390</span>			if encoding != &#34;chunked&#34; {
<a id="L391"></a><span class="ln">   391</span>				return nil, &amp;badStringError{&#34;unsupported transfer encoding&#34;, encoding}
<a id="L392"></a><span class="ln">   392</span>			}
<a id="L393"></a><span class="ln">   393</span>			te = te[0 : len(te)+1]
<a id="L394"></a><span class="ln">   394</span>			te[len(te)-1] = encoding
<a id="L395"></a><span class="ln">   395</span>		}
<a id="L396"></a><span class="ln">   396</span>		if len(te) &gt; 1 {
<a id="L397"></a><span class="ln">   397</span>			return nil, &amp;badStringError{&#34;too many transfer encodings&#34;, strings.Join(te, &#34;,&#34;)}
<a id="L398"></a><span class="ln">   398</span>		}
<a id="L399"></a><span class="ln">   399</span>		if len(te) &gt; 0 {
<a id="L400"></a><span class="ln">   400</span>			<span class="comment">// Chunked encoding trumps Content-Length. See RFC 2616</span>
<a id="L401"></a><span class="ln">   401</span>			<span class="comment">// Section 4.4. Currently len(te) &gt; 0 implies chunked</span>
<a id="L402"></a><span class="ln">   402</span>			<span class="comment">// encoding.</span>
<a id="L403"></a><span class="ln">   403</span>			delete(header, &#34;Content-Length&#34;)
<a id="L404"></a><span class="ln">   404</span>			return te, nil
<a id="L405"></a><span class="ln">   405</span>		}
<a id="L406"></a><span class="ln">   406</span>	
<a id="L407"></a><span class="ln">   407</span>		return nil, nil
<a id="L408"></a><span class="ln">   408</span>	}
<a id="L409"></a><span class="ln">   409</span>	
<a id="L410"></a><span class="ln">   410</span>	<span class="comment">// Determine the expected body length, using RFC 2616 Section 4.4. This</span>
<a id="L411"></a><span class="ln">   411</span>	<span class="comment">// function is not a method, because ultimately it should be shared by</span>
<a id="L412"></a><span class="ln">   412</span>	<span class="comment">// ReadResponse and ReadRequest.</span>
<a id="L413"></a><span class="ln">   413</span>	func fixLength(isResponse bool, status int, requestMethod string, header Header, te []string) (int64, error) {
<a id="L414"></a><span class="ln">   414</span>	
<a id="L415"></a><span class="ln">   415</span>		<span class="comment">// Logic based on response type or status</span>
<a id="L416"></a><span class="ln">   416</span>		if noBodyExpected(requestMethod) {
<a id="L417"></a><span class="ln">   417</span>			return 0, nil
<a id="L418"></a><span class="ln">   418</span>		}
<a id="L419"></a><span class="ln">   419</span>		if status/100 == 1 {
<a id="L420"></a><span class="ln">   420</span>			return 0, nil
<a id="L421"></a><span class="ln">   421</span>		}
<a id="L422"></a><span class="ln">   422</span>		switch status {
<a id="L423"></a><span class="ln">   423</span>		case 204, 304:
<a id="L424"></a><span class="ln">   424</span>			return 0, nil
<a id="L425"></a><span class="ln">   425</span>		}
<a id="L426"></a><span class="ln">   426</span>	
<a id="L427"></a><span class="ln">   427</span>		<span class="comment">// Logic based on Transfer-Encoding</span>
<a id="L428"></a><span class="ln">   428</span>		if chunked(te) {
<a id="L429"></a><span class="ln">   429</span>			return -1, nil
<a id="L430"></a><span class="ln">   430</span>		}
<a id="L431"></a><span class="ln">   431</span>	
<a id="L432"></a><span class="ln">   432</span>		<span class="comment">// Logic based on Content-Length</span>
<a id="L433"></a><span class="ln">   433</span>		cl := strings.TrimSpace(header.Get(&#34;Content-Length&#34;))
<a id="L434"></a><span class="ln">   434</span>		if cl != &#34;&#34; {
<a id="L435"></a><span class="ln">   435</span>			n, err := strconv.ParseInt(cl, 10, 64)
<a id="L436"></a><span class="ln">   436</span>			if err != nil || n &lt; 0 {
<a id="L437"></a><span class="ln">   437</span>				return -1, &amp;badStringError{&#34;bad Content-Length&#34;, cl}
<a id="L438"></a><span class="ln">   438</span>			}
<a id="L439"></a><span class="ln">   439</span>			return n, nil
<a id="L440"></a><span class="ln">   440</span>		} else {
<a id="L441"></a><span class="ln">   441</span>			header.Del(&#34;Content-Length&#34;)
<a id="L442"></a><span class="ln">   442</span>		}
<a id="L443"></a><span class="ln">   443</span>	
<a id="L444"></a><span class="ln">   444</span>		if !isResponse &amp;&amp; requestMethod == &#34;GET&#34; {
<a id="L445"></a><span class="ln">   445</span>			<span class="comment">// RFC 2616 doesn&#39;t explicitly permit nor forbid an</span>
<a id="L446"></a><span class="ln">   446</span>			<span class="comment">// entity-body on a GET request so we permit one if</span>
<a id="L447"></a><span class="ln">   447</span>			<span class="comment">// declared, but we default to 0 here (not -1 below)</span>
<a id="L448"></a><span class="ln">   448</span>			<span class="comment">// if there&#39;s no mention of a body.</span>
<a id="L449"></a><span class="ln">   449</span>			return 0, nil
<a id="L450"></a><span class="ln">   450</span>		}
<a id="L451"></a><span class="ln">   451</span>	
<a id="L452"></a><span class="ln">   452</span>		<span class="comment">// Logic based on media type. The purpose of the following code is just</span>
<a id="L453"></a><span class="ln">   453</span>		<span class="comment">// to detect whether the unsupported &#34;multipart/byteranges&#34; is being</span>
<a id="L454"></a><span class="ln">   454</span>		<span class="comment">// used. A proper Content-Type parser is needed in the future.</span>
<a id="L455"></a><span class="ln">   455</span>		if strings.Contains(strings.ToLower(header.Get(&#34;Content-Type&#34;)), &#34;multipart/byteranges&#34;) {
<a id="L456"></a><span class="ln">   456</span>			return -1, ErrNotSupported
<a id="L457"></a><span class="ln">   457</span>		}
<a id="L458"></a><span class="ln">   458</span>	
<a id="L459"></a><span class="ln">   459</span>		<span class="comment">// Body-EOF logic based on other methods (like closing, or chunked coding)</span>
<a id="L460"></a><span class="ln">   460</span>		return -1, nil
<a id="L461"></a><span class="ln">   461</span>	}
<a id="L462"></a><span class="ln">   462</span>	
<a id="L463"></a><span class="ln">   463</span>	<span class="comment">// Determine whether to hang up after sending a request and body, or</span>
<a id="L464"></a><span class="ln">   464</span>	<span class="comment">// receiving a response and body</span>
<a id="L465"></a><span class="ln">   465</span>	<span class="comment">// &#39;header&#39; is the request headers</span>
<a id="L466"></a><span class="ln">   466</span>	func shouldClose(major, minor int, header Header) bool {
<a id="L467"></a><span class="ln">   467</span>		if major &lt; 1 {
<a id="L468"></a><span class="ln">   468</span>			return true
<a id="L469"></a><span class="ln">   469</span>		} else if major == 1 &amp;&amp; minor == 0 {
<a id="L470"></a><span class="ln">   470</span>			if !strings.Contains(strings.ToLower(header.Get(&#34;Connection&#34;)), &#34;keep-alive&#34;) {
<a id="L471"></a><span class="ln">   471</span>				return true
<a id="L472"></a><span class="ln">   472</span>			}
<a id="L473"></a><span class="ln">   473</span>			return false
<a id="L474"></a><span class="ln">   474</span>		} else {
<a id="L475"></a><span class="ln">   475</span>			<span class="comment">// TODO: Should split on commas, toss surrounding white space,</span>
<a id="L476"></a><span class="ln">   476</span>			<span class="comment">// and check each field.</span>
<a id="L477"></a><span class="ln">   477</span>			if strings.ToLower(header.Get(&#34;Connection&#34;)) == &#34;close&#34; {
<a id="L478"></a><span class="ln">   478</span>				header.Del(&#34;Connection&#34;)
<a id="L479"></a><span class="ln">   479</span>				return true
<a id="L480"></a><span class="ln">   480</span>			}
<a id="L481"></a><span class="ln">   481</span>		}
<a id="L482"></a><span class="ln">   482</span>		return false
<a id="L483"></a><span class="ln">   483</span>	}
<a id="L484"></a><span class="ln">   484</span>	
<a id="L485"></a><span class="ln">   485</span>	<span class="comment">// Parse the trailer header</span>
<a id="L486"></a><span class="ln">   486</span>	func fixTrailer(header Header, te []string) (Header, error) {
<a id="L487"></a><span class="ln">   487</span>		raw := header.Get(&#34;Trailer&#34;)
<a id="L488"></a><span class="ln">   488</span>		if raw == &#34;&#34; {
<a id="L489"></a><span class="ln">   489</span>			return nil, nil
<a id="L490"></a><span class="ln">   490</span>		}
<a id="L491"></a><span class="ln">   491</span>	
<a id="L492"></a><span class="ln">   492</span>		header.Del(&#34;Trailer&#34;)
<a id="L493"></a><span class="ln">   493</span>		trailer := make(Header)
<a id="L494"></a><span class="ln">   494</span>		keys := strings.Split(raw, &#34;,&#34;)
<a id="L495"></a><span class="ln">   495</span>		for _, key := range keys {
<a id="L496"></a><span class="ln">   496</span>			key = CanonicalHeaderKey(strings.TrimSpace(key))
<a id="L497"></a><span class="ln">   497</span>			switch key {
<a id="L498"></a><span class="ln">   498</span>			case &#34;Transfer-Encoding&#34;, &#34;Trailer&#34;, &#34;Content-Length&#34;:
<a id="L499"></a><span class="ln">   499</span>				return nil, &amp;badStringError{&#34;bad trailer key&#34;, key}
<a id="L500"></a><span class="ln">   500</span>			}
<a id="L501"></a><span class="ln">   501</span>			trailer.Del(key)
<a id="L502"></a><span class="ln">   502</span>		}
<a id="L503"></a><span class="ln">   503</span>		if len(trailer) == 0 {
<a id="L504"></a><span class="ln">   504</span>			return nil, nil
<a id="L505"></a><span class="ln">   505</span>		}
<a id="L506"></a><span class="ln">   506</span>		if !chunked(te) {
<a id="L507"></a><span class="ln">   507</span>			<span class="comment">// Trailer and no chunking</span>
<a id="L508"></a><span class="ln">   508</span>			return nil, ErrUnexpectedTrailer
<a id="L509"></a><span class="ln">   509</span>		}
<a id="L510"></a><span class="ln">   510</span>		return trailer, nil
<a id="L511"></a><span class="ln">   511</span>	}
<a id="L512"></a><span class="ln">   512</span>	
<a id="L513"></a><span class="ln">   513</span>	<span class="comment">// body turns a Reader into a ReadCloser.</span>
<a id="L514"></a><span class="ln">   514</span>	<span class="comment">// Close ensures that the body has been fully read</span>
<a id="L515"></a><span class="ln">   515</span>	<span class="comment">// and then reads the trailer if necessary.</span>
<a id="L516"></a><span class="ln">   516</span>	type body struct {
<a id="L517"></a><span class="ln">   517</span>		io.Reader
<a id="L518"></a><span class="ln">   518</span>		hdr     interface{}   <span class="comment">// non-nil (Response or Request) value means read trailer</span>
<a id="L519"></a><span class="ln">   519</span>		r       *bufio.Reader <span class="comment">// underlying wire-format reader for the trailer</span>
<a id="L520"></a><span class="ln">   520</span>		closing bool          <span class="comment">// is the connection to be closed after reading body?</span>
<a id="L521"></a><span class="ln">   521</span>		closed  bool
<a id="L522"></a><span class="ln">   522</span>	
<a id="L523"></a><span class="ln">   523</span>		res *response <span class="comment">// response writer for server requests, else nil</span>
<a id="L524"></a><span class="ln">   524</span>	}
<a id="L525"></a><span class="ln">   525</span>	
<a id="L526"></a><span class="ln">   526</span>	<span class="comment">// ErrBodyReadAfterClose is returned when reading a Request Body after</span>
<a id="L527"></a><span class="ln">   527</span>	<span class="comment">// the body has been closed. This typically happens when the body is</span>
<a id="L528"></a><span class="ln">   528</span>	<span class="comment">// read after an HTTP Handler calls WriteHeader or Write on its</span>
<a id="L529"></a><span class="ln">   529</span>	<span class="comment">// ResponseWriter.</span>
<a id="L530"></a><span class="ln">   530</span>	var ErrBodyReadAfterClose = errors.New(&#34;http: invalid Read on closed request Body&#34;)
<a id="L531"></a><span class="ln">   531</span>	
<a id="L532"></a><span class="ln">   532</span>	func (b *body) Read(p []byte) (n int, err error) {
<a id="L533"></a><span class="ln">   533</span>		if b.closed {
<a id="L534"></a><span class="ln">   534</span>			return 0, ErrBodyReadAfterClose
<a id="L535"></a><span class="ln">   535</span>		}
<a id="L536"></a><span class="ln">   536</span>		n, err = b.Reader.Read(p)
<a id="L537"></a><span class="ln">   537</span>	
<a id="L538"></a><span class="ln">   538</span>		<span class="comment">// Read the final trailer once we hit EOF.</span>
<a id="L539"></a><span class="ln">   539</span>		if err == io.EOF &amp;&amp; b.hdr != nil {
<a id="L540"></a><span class="ln">   540</span>			if e := b.readTrailer(); e != nil {
<a id="L541"></a><span class="ln">   541</span>				err = e
<a id="L542"></a><span class="ln">   542</span>			}
<a id="L543"></a><span class="ln">   543</span>			b.hdr = nil
<a id="L544"></a><span class="ln">   544</span>		}
<a id="L545"></a><span class="ln">   545</span>		return n, err
<a id="L546"></a><span class="ln">   546</span>	}
<a id="L547"></a><span class="ln">   547</span>	
<a id="L548"></a><span class="ln">   548</span>	var (
<a id="L549"></a><span class="ln">   549</span>		singleCRLF = []byte(&#34;\r\n&#34;)
<a id="L550"></a><span class="ln">   550</span>		doubleCRLF = []byte(&#34;\r\n\r\n&#34;)
<a id="L551"></a><span class="ln">   551</span>	)
<a id="L552"></a><span class="ln">   552</span>	
<a id="L553"></a><span class="ln">   553</span>	func seeUpcomingDoubleCRLF(r *bufio.Reader) bool {
<a id="L554"></a><span class="ln">   554</span>		for peekSize := 4; ; peekSize++ {
<a id="L555"></a><span class="ln">   555</span>			<span class="comment">// This loop stops when Peek returns an error,</span>
<a id="L556"></a><span class="ln">   556</span>			<span class="comment">// which it does when r&#39;s buffer has been filled.</span>
<a id="L557"></a><span class="ln">   557</span>			buf, err := r.Peek(peekSize)
<a id="L558"></a><span class="ln">   558</span>			if bytes.HasSuffix(buf, doubleCRLF) {
<a id="L559"></a><span class="ln">   559</span>				return true
<a id="L560"></a><span class="ln">   560</span>			}
<a id="L561"></a><span class="ln">   561</span>			if err != nil {
<a id="L562"></a><span class="ln">   562</span>				break
<a id="L563"></a><span class="ln">   563</span>			}
<a id="L564"></a><span class="ln">   564</span>		}
<a id="L565"></a><span class="ln">   565</span>		return false
<a id="L566"></a><span class="ln">   566</span>	}
<a id="L567"></a><span class="ln">   567</span>	
<a id="L568"></a><span class="ln">   568</span>	func (b *body) readTrailer() error {
<a id="L569"></a><span class="ln">   569</span>		<span class="comment">// The common case, since nobody uses trailers.</span>
<a id="L570"></a><span class="ln">   570</span>		buf, _ := b.r.Peek(2)
<a id="L571"></a><span class="ln">   571</span>		if bytes.Equal(buf, singleCRLF) {
<a id="L572"></a><span class="ln">   572</span>			b.r.ReadByte()
<a id="L573"></a><span class="ln">   573</span>			b.r.ReadByte()
<a id="L574"></a><span class="ln">   574</span>			return nil
<a id="L575"></a><span class="ln">   575</span>		}
<a id="L576"></a><span class="ln">   576</span>	
<a id="L577"></a><span class="ln">   577</span>		<span class="comment">// Make sure there&#39;s a header terminator coming up, to prevent</span>
<a id="L578"></a><span class="ln">   578</span>		<span class="comment">// a DoS with an unbounded size Trailer.  It&#39;s not easy to</span>
<a id="L579"></a><span class="ln">   579</span>		<span class="comment">// slip in a LimitReader here, as textproto.NewReader requires</span>
<a id="L580"></a><span class="ln">   580</span>		<span class="comment">// a concrete *bufio.Reader.  Also, we can&#39;t get all the way</span>
<a id="L581"></a><span class="ln">   581</span>		<span class="comment">// back up to our conn&#39;s LimitedReader that *might* be backing</span>
<a id="L582"></a><span class="ln">   582</span>		<span class="comment">// this bufio.Reader.  Instead, a hack: we iteratively Peek up</span>
<a id="L583"></a><span class="ln">   583</span>		<span class="comment">// to the bufio.Reader&#39;s max size, looking for a double CRLF.</span>
<a id="L584"></a><span class="ln">   584</span>		<span class="comment">// This limits the trailer to the underlying buffer size, typically 4kB.</span>
<a id="L585"></a><span class="ln">   585</span>		if !seeUpcomingDoubleCRLF(b.r) {
<a id="L586"></a><span class="ln">   586</span>			return errors.New(&#34;http: suspiciously long trailer after chunked body&#34;)
<a id="L587"></a><span class="ln">   587</span>		}
<a id="L588"></a><span class="ln">   588</span>	
<a id="L589"></a><span class="ln">   589</span>		hdr, err := textproto.NewReader(b.r).ReadMIMEHeader()
<a id="L590"></a><span class="ln">   590</span>		if err != nil {
<a id="L591"></a><span class="ln">   591</span>			return err
<a id="L592"></a><span class="ln">   592</span>		}
<a id="L593"></a><span class="ln">   593</span>		switch rr := b.hdr.(type) {
<a id="L594"></a><span class="ln">   594</span>		case *Request:
<a id="L595"></a><span class="ln">   595</span>			rr.Trailer = Header(hdr)
<a id="L596"></a><span class="ln">   596</span>		case *Response:
<a id="L597"></a><span class="ln">   597</span>			rr.Trailer = Header(hdr)
<a id="L598"></a><span class="ln">   598</span>		}
<a id="L599"></a><span class="ln">   599</span>		return nil
<a id="L600"></a><span class="ln">   600</span>	}
<a id="L601"></a><span class="ln">   601</span>	
<a id="L602"></a><span class="ln">   602</span>	func (b *body) Close() error {
<a id="L603"></a><span class="ln">   603</span>		if b.closed {
<a id="L604"></a><span class="ln">   604</span>			return nil
<a id="L605"></a><span class="ln">   605</span>		}
<a id="L606"></a><span class="ln">   606</span>		defer func() {
<a id="L607"></a><span class="ln">   607</span>			b.closed = true
<a id="L608"></a><span class="ln">   608</span>		}()
<a id="L609"></a><span class="ln">   609</span>		if b.hdr == nil &amp;&amp; b.closing {
<a id="L610"></a><span class="ln">   610</span>			<span class="comment">// no trailer and closing the connection next.</span>
<a id="L611"></a><span class="ln">   611</span>			<span class="comment">// no point in reading to EOF.</span>
<a id="L612"></a><span class="ln">   612</span>			return nil
<a id="L613"></a><span class="ln">   613</span>		}
<a id="L614"></a><span class="ln">   614</span>	
<a id="L615"></a><span class="ln">   615</span>		<span class="comment">// In a server request, don&#39;t continue reading from the client</span>
<a id="L616"></a><span class="ln">   616</span>		<span class="comment">// if we&#39;ve already hit the maximum body size set by the</span>
<a id="L617"></a><span class="ln">   617</span>		<span class="comment">// handler. If this is set, that also means the TCP connection</span>
<a id="L618"></a><span class="ln">   618</span>		<span class="comment">// is about to be closed, so getting to the next HTTP request</span>
<a id="L619"></a><span class="ln">   619</span>		<span class="comment">// in the stream is not necessary.</span>
<a id="L620"></a><span class="ln">   620</span>		if b.res != nil &amp;&amp; b.res.requestBodyLimitHit {
<a id="L621"></a><span class="ln">   621</span>			return nil
<a id="L622"></a><span class="ln">   622</span>		}
<a id="L623"></a><span class="ln">   623</span>	
<a id="L624"></a><span class="ln">   624</span>		<span class="comment">// Fully consume the body, which will also lead to us reading</span>
<a id="L625"></a><span class="ln">   625</span>		<span class="comment">// the trailer headers after the body, if present.</span>
<a id="L626"></a><span class="ln">   626</span>		if _, err := io.Copy(ioutil.Discard, b); err != nil {
<a id="L627"></a><span class="ln">   627</span>			return err
<a id="L628"></a><span class="ln">   628</span>		}
<a id="L629"></a><span class="ln">   629</span>		return nil
<a id="L630"></a><span class="ln">   630</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

