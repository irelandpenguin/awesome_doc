<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/http/pprof/pprof.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/http/pprof/pprof.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package pprof serves via its HTTP server runtime profiling data</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// in the format expected by the pprof visualization tool.</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// For more information about pprof, see</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// http://code.google.com/p/google-perftools/.</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">//</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// The package is typically only imported for the side effect of</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// registering its HTTP handlers.</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// The handled paths all begin with /debug/pprof/.</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">//</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// To use pprof, link this package into your program:</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">//	import _ &#34;net/http/pprof&#34;</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">//</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// Then use the pprof tool to look at the heap profile:</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">//</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">//	go tool pprof http://localhost:6060/debug/pprof/heap</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">//</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// Or to look at a 30-second CPU profile:</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">//</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">//	go tool pprof http://localhost:6060/debug/pprof/profile</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// Or to view all available profiles:</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">//</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">//	go tool pprof http://localhost:6060/debug/pprof/</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">//</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// For a study of the facility in action, visit</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">//</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">//	http://blog.golang.org/2011/06/profiling-go-programs.html</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">//</span>
<a id="L33"></a><span class="ln">    33</span>	package pprof
<a id="L34"></a><span class="ln">    34</span>	
<a id="L35"></a><span class="ln">    35</span>	import (
<a id="L36"></a><span class="ln">    36</span>		&#34;bufio&#34;
<a id="L37"></a><span class="ln">    37</span>		&#34;bytes&#34;
<a id="L38"></a><span class="ln">    38</span>		&#34;fmt&#34;
<a id="L39"></a><span class="ln">    39</span>		&#34;html/template&#34;
<a id="L40"></a><span class="ln">    40</span>		&#34;io&#34;
<a id="L41"></a><span class="ln">    41</span>		&#34;log&#34;
<a id="L42"></a><span class="ln">    42</span>		&#34;net/http&#34;
<a id="L43"></a><span class="ln">    43</span>		&#34;os&#34;
<a id="L44"></a><span class="ln">    44</span>		&#34;runtime&#34;
<a id="L45"></a><span class="ln">    45</span>		&#34;runtime/pprof&#34;
<a id="L46"></a><span class="ln">    46</span>		&#34;strconv&#34;
<a id="L47"></a><span class="ln">    47</span>		&#34;strings&#34;
<a id="L48"></a><span class="ln">    48</span>		&#34;time&#34;
<a id="L49"></a><span class="ln">    49</span>	)
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>	func init() {
<a id="L52"></a><span class="ln">    52</span>		http.Handle(&#34;/debug/pprof/&#34;, http.HandlerFunc(Index))
<a id="L53"></a><span class="ln">    53</span>		http.Handle(&#34;/debug/pprof/cmdline&#34;, http.HandlerFunc(Cmdline))
<a id="L54"></a><span class="ln">    54</span>		http.Handle(&#34;/debug/pprof/profile&#34;, http.HandlerFunc(Profile))
<a id="L55"></a><span class="ln">    55</span>		http.Handle(&#34;/debug/pprof/symbol&#34;, http.HandlerFunc(Symbol))
<a id="L56"></a><span class="ln">    56</span>	}
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// Cmdline responds with the running program&#39;s</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// command line, with arguments separated by NUL bytes.</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// The package initialization registers it as /debug/pprof/cmdline.</span>
<a id="L61"></a><span class="ln">    61</span>	func Cmdline(w http.ResponseWriter, r *http.Request) {
<a id="L62"></a><span class="ln">    62</span>		w.Header().Set(&#34;Content-Type&#34;, &#34;text/plain; charset=utf-8&#34;)
<a id="L63"></a><span class="ln">    63</span>		fmt.Fprintf(w, strings.Join(os.Args, &#34;\x00&#34;))
<a id="L64"></a><span class="ln">    64</span>	}
<a id="L65"></a><span class="ln">    65</span>	
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">// Profile responds with the pprof-formatted cpu profile.</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// The package initialization registers it as /debug/pprof/profile.</span>
<a id="L68"></a><span class="ln">    68</span>	func Profile(w http.ResponseWriter, r *http.Request) {
<a id="L69"></a><span class="ln">    69</span>		sec, _ := strconv.ParseInt(r.FormValue(&#34;seconds&#34;), 10, 64)
<a id="L70"></a><span class="ln">    70</span>		if sec == 0 {
<a id="L71"></a><span class="ln">    71</span>			sec = 30
<a id="L72"></a><span class="ln">    72</span>		}
<a id="L73"></a><span class="ln">    73</span>	
<a id="L74"></a><span class="ln">    74</span>		<span class="comment">// Set Content Type assuming StartCPUProfile will work,</span>
<a id="L75"></a><span class="ln">    75</span>		<span class="comment">// because if it does it starts writing.</span>
<a id="L76"></a><span class="ln">    76</span>		w.Header().Set(&#34;Content-Type&#34;, &#34;application/octet-stream&#34;)
<a id="L77"></a><span class="ln">    77</span>		if err := pprof.StartCPUProfile(w); err != nil {
<a id="L78"></a><span class="ln">    78</span>			<span class="comment">// StartCPUProfile failed, so no writes yet.</span>
<a id="L79"></a><span class="ln">    79</span>			<span class="comment">// Can change header back to text content</span>
<a id="L80"></a><span class="ln">    80</span>			<span class="comment">// and send error code.</span>
<a id="L81"></a><span class="ln">    81</span>			w.Header().Set(&#34;Content-Type&#34;, &#34;text/plain; charset=utf-8&#34;)
<a id="L82"></a><span class="ln">    82</span>			w.WriteHeader(http.StatusInternalServerError)
<a id="L83"></a><span class="ln">    83</span>			fmt.Fprintf(w, &#34;Could not enable CPU profiling: %s\n&#34;, err)
<a id="L84"></a><span class="ln">    84</span>			return
<a id="L85"></a><span class="ln">    85</span>		}
<a id="L86"></a><span class="ln">    86</span>		time.Sleep(time.Duration(sec) * time.Second)
<a id="L87"></a><span class="ln">    87</span>		pprof.StopCPUProfile()
<a id="L88"></a><span class="ln">    88</span>	}
<a id="L89"></a><span class="ln">    89</span>	
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// Symbol looks up the program counters listed in the request,</span>
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// responding with a table mapping program counters to function names.</span>
<a id="L92"></a><span class="ln">    92</span>	<span class="comment">// The package initialization registers it as /debug/pprof/symbol.</span>
<a id="L93"></a><span class="ln">    93</span>	func Symbol(w http.ResponseWriter, r *http.Request) {
<a id="L94"></a><span class="ln">    94</span>		w.Header().Set(&#34;Content-Type&#34;, &#34;text/plain; charset=utf-8&#34;)
<a id="L95"></a><span class="ln">    95</span>	
<a id="L96"></a><span class="ln">    96</span>		<span class="comment">// We have to read the whole POST body before</span>
<a id="L97"></a><span class="ln">    97</span>		<span class="comment">// writing any output.  Buffer the output here.</span>
<a id="L98"></a><span class="ln">    98</span>		var buf bytes.Buffer
<a id="L99"></a><span class="ln">    99</span>	
<a id="L100"></a><span class="ln">   100</span>		<span class="comment">// We don&#39;t know how many symbols we have, but we</span>
<a id="L101"></a><span class="ln">   101</span>		<span class="comment">// do have symbol information.  Pprof only cares whether</span>
<a id="L102"></a><span class="ln">   102</span>		<span class="comment">// this number is 0 (no symbols available) or &gt; 0.</span>
<a id="L103"></a><span class="ln">   103</span>		fmt.Fprintf(&amp;buf, &#34;num_symbols: 1\n&#34;)
<a id="L104"></a><span class="ln">   104</span>	
<a id="L105"></a><span class="ln">   105</span>		var b *bufio.Reader
<a id="L106"></a><span class="ln">   106</span>		if r.Method == &#34;POST&#34; {
<a id="L107"></a><span class="ln">   107</span>			b = bufio.NewReader(r.Body)
<a id="L108"></a><span class="ln">   108</span>		} else {
<a id="L109"></a><span class="ln">   109</span>			b = bufio.NewReader(strings.NewReader(r.URL.RawQuery))
<a id="L110"></a><span class="ln">   110</span>		}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>		for {
<a id="L113"></a><span class="ln">   113</span>			word, err := b.ReadSlice(&#39;+&#39;)
<a id="L114"></a><span class="ln">   114</span>			if err == nil {
<a id="L115"></a><span class="ln">   115</span>				word = word[0 : len(word)-1] <span class="comment">// trim +</span>
<a id="L116"></a><span class="ln">   116</span>			}
<a id="L117"></a><span class="ln">   117</span>			pc, _ := strconv.ParseUint(string(word), 0, 64)
<a id="L118"></a><span class="ln">   118</span>			if pc != 0 {
<a id="L119"></a><span class="ln">   119</span>				f := runtime.FuncForPC(uintptr(pc))
<a id="L120"></a><span class="ln">   120</span>				if f != nil {
<a id="L121"></a><span class="ln">   121</span>					fmt.Fprintf(&amp;buf, &#34;%#x %s\n&#34;, pc, f.Name())
<a id="L122"></a><span class="ln">   122</span>				}
<a id="L123"></a><span class="ln">   123</span>			}
<a id="L124"></a><span class="ln">   124</span>	
<a id="L125"></a><span class="ln">   125</span>			<span class="comment">// Wait until here to check for err; the last</span>
<a id="L126"></a><span class="ln">   126</span>			<span class="comment">// symbol will have an err because it doesn&#39;t end in +.</span>
<a id="L127"></a><span class="ln">   127</span>			if err != nil {
<a id="L128"></a><span class="ln">   128</span>				if err != io.EOF {
<a id="L129"></a><span class="ln">   129</span>					fmt.Fprintf(&amp;buf, &#34;reading request: %v\n&#34;, err)
<a id="L130"></a><span class="ln">   130</span>				}
<a id="L131"></a><span class="ln">   131</span>				break
<a id="L132"></a><span class="ln">   132</span>			}
<a id="L133"></a><span class="ln">   133</span>		}
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>		w.Write(buf.Bytes())
<a id="L136"></a><span class="ln">   136</span>	}
<a id="L137"></a><span class="ln">   137</span>	
<a id="L138"></a><span class="ln">   138</span>	<span class="comment">// Handler returns an HTTP handler that serves the named profile.</span>
<a id="L139"></a><span class="ln">   139</span>	func Handler(name string) http.Handler {
<a id="L140"></a><span class="ln">   140</span>		return handler(name)
<a id="L141"></a><span class="ln">   141</span>	}
<a id="L142"></a><span class="ln">   142</span>	
<a id="L143"></a><span class="ln">   143</span>	type handler string
<a id="L144"></a><span class="ln">   144</span>	
<a id="L145"></a><span class="ln">   145</span>	func (name handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
<a id="L146"></a><span class="ln">   146</span>		w.Header().Set(&#34;Content-Type&#34;, &#34;text/plain; charset=utf-8&#34;)
<a id="L147"></a><span class="ln">   147</span>		debug, _ := strconv.Atoi(r.FormValue(&#34;debug&#34;))
<a id="L148"></a><span class="ln">   148</span>		p := pprof.Lookup(string(name))
<a id="L149"></a><span class="ln">   149</span>		if p == nil {
<a id="L150"></a><span class="ln">   150</span>			w.WriteHeader(404)
<a id="L151"></a><span class="ln">   151</span>			fmt.Fprintf(w, &#34;Unknown profile: %s\n&#34;, name)
<a id="L152"></a><span class="ln">   152</span>			return
<a id="L153"></a><span class="ln">   153</span>		}
<a id="L154"></a><span class="ln">   154</span>		p.WriteTo(w, debug)
<a id="L155"></a><span class="ln">   155</span>		return
<a id="L156"></a><span class="ln">   156</span>	}
<a id="L157"></a><span class="ln">   157</span>	
<a id="L158"></a><span class="ln">   158</span>	<span class="comment">// Index responds with the pprof-formatted profile named by the request.</span>
<a id="L159"></a><span class="ln">   159</span>	<span class="comment">// For example, &#34;/debug/pprof/heap&#34; serves the &#34;heap&#34; profile.</span>
<a id="L160"></a><span class="ln">   160</span>	<span class="comment">// Index responds to a request for &#34;/debug/pprof/&#34; with an HTML page</span>
<a id="L161"></a><span class="ln">   161</span>	<span class="comment">// listing the available profiles.</span>
<a id="L162"></a><span class="ln">   162</span>	func Index(w http.ResponseWriter, r *http.Request) {
<a id="L163"></a><span class="ln">   163</span>		if strings.HasPrefix(r.URL.Path, &#34;/debug/pprof/&#34;) {
<a id="L164"></a><span class="ln">   164</span>			name := r.URL.Path[len(&#34;/debug/pprof/&#34;):]
<a id="L165"></a><span class="ln">   165</span>			if name != &#34;&#34; {
<a id="L166"></a><span class="ln">   166</span>				handler(name).ServeHTTP(w, r)
<a id="L167"></a><span class="ln">   167</span>				return
<a id="L168"></a><span class="ln">   168</span>			}
<a id="L169"></a><span class="ln">   169</span>		}
<a id="L170"></a><span class="ln">   170</span>	
<a id="L171"></a><span class="ln">   171</span>		profiles := pprof.Profiles()
<a id="L172"></a><span class="ln">   172</span>		if err := indexTmpl.Execute(w, profiles); err != nil {
<a id="L173"></a><span class="ln">   173</span>			log.Print(err)
<a id="L174"></a><span class="ln">   174</span>		}
<a id="L175"></a><span class="ln">   175</span>	}
<a id="L176"></a><span class="ln">   176</span>	
<a id="L177"></a><span class="ln">   177</span>	var indexTmpl = template.Must(template.New(&#34;index&#34;).Parse(`&lt;html&gt;
<a id="L178"></a><span class="ln">   178</span>	&lt;head&gt;
<a id="L179"></a><span class="ln">   179</span>	&lt;title&gt;/debug/pprof/&lt;/title&gt;
<a id="L180"></a><span class="ln">   180</span>	&lt;/head&gt;
<a id="L181"></a><span class="ln">   181</span>	/debug/pprof/&lt;br&gt;
<a id="L182"></a><span class="ln">   182</span>	&lt;br&gt;
<a id="L183"></a><span class="ln">   183</span>	&lt;body&gt;
<a id="L184"></a><span class="ln">   184</span>	profiles:&lt;br&gt;
<a id="L185"></a><span class="ln">   185</span>	&lt;table&gt;
<a id="L186"></a><span class="ln">   186</span>	{{range .}}
<a id="L187"></a><span class="ln">   187</span>	&lt;tr&gt;&lt;td align=right&gt;{{.Count}}&lt;td&gt;&lt;a href=&#34;/debug/pprof/{{.Name}}?debug=1&#34;&gt;{{.Name}}&lt;/a&gt;
<a id="L188"></a><span class="ln">   188</span>	{{end}}
<a id="L189"></a><span class="ln">   189</span>	&lt;/table&gt;
<a id="L190"></a><span class="ln">   190</span>	&lt;br&gt;
<a id="L191"></a><span class="ln">   191</span>	&lt;a href=&#34;/debug/pprof/goroutine?debug=2&#34;&gt;full goroutine stack dump&lt;/a&gt;&lt;br&gt;
<a id="L192"></a><span class="ln">   192</span>	&lt;/body&gt;
<a id="L193"></a><span class="ln">   193</span>	&lt;/html&gt;
<a id="L194"></a><span class="ln">   194</span>	`))
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

