<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/http/httptest/server.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/http/httptest/server.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Implementation of Server</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package httptest
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;crypto/tls&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;flag&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;fmt&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;net&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;net/http&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;os&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;sync&#34;
<a id="L17"></a><span class="ln">    17</span>	)
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// A Server is an HTTP server listening on a system-chosen port on the</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// local loopback interface, for use in end-to-end HTTP tests.</span>
<a id="L21"></a><span class="ln">    21</span>	type Server struct {
<a id="L22"></a><span class="ln">    22</span>		URL      string <span class="comment">// base URL of form http://ipaddr:port with no trailing slash</span>
<a id="L23"></a><span class="ln">    23</span>		Listener net.Listener
<a id="L24"></a><span class="ln">    24</span>		TLS      *tls.Config <span class="comment">// nil if not using using TLS</span>
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>		<span class="comment">// Config may be changed after calling NewUnstartedServer and</span>
<a id="L27"></a><span class="ln">    27</span>		<span class="comment">// before Start or StartTLS.</span>
<a id="L28"></a><span class="ln">    28</span>		Config *http.Server
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>		<span class="comment">// wg counts the number of outstanding HTTP requests on this server.</span>
<a id="L31"></a><span class="ln">    31</span>		<span class="comment">// Close blocks until all requests are finished.</span>
<a id="L32"></a><span class="ln">    32</span>		wg sync.WaitGroup
<a id="L33"></a><span class="ln">    33</span>	}
<a id="L34"></a><span class="ln">    34</span>	
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// historyListener keeps track of all connections that it&#39;s ever</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// accepted.</span>
<a id="L37"></a><span class="ln">    37</span>	type historyListener struct {
<a id="L38"></a><span class="ln">    38</span>		net.Listener
<a id="L39"></a><span class="ln">    39</span>		history []net.Conn
<a id="L40"></a><span class="ln">    40</span>	}
<a id="L41"></a><span class="ln">    41</span>	
<a id="L42"></a><span class="ln">    42</span>	func (hs *historyListener) Accept() (c net.Conn, err error) {
<a id="L43"></a><span class="ln">    43</span>		c, err = hs.Listener.Accept()
<a id="L44"></a><span class="ln">    44</span>		if err == nil {
<a id="L45"></a><span class="ln">    45</span>			hs.history = append(hs.history, c)
<a id="L46"></a><span class="ln">    46</span>		}
<a id="L47"></a><span class="ln">    47</span>		return
<a id="L48"></a><span class="ln">    48</span>	}
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>	func newLocalListener() net.Listener {
<a id="L51"></a><span class="ln">    51</span>		if *serve != &#34;&#34; {
<a id="L52"></a><span class="ln">    52</span>			l, err := net.Listen(&#34;tcp&#34;, *serve)
<a id="L53"></a><span class="ln">    53</span>			if err != nil {
<a id="L54"></a><span class="ln">    54</span>				panic(fmt.Sprintf(&#34;httptest: failed to listen on %v: %v&#34;, *serve, err))
<a id="L55"></a><span class="ln">    55</span>			}
<a id="L56"></a><span class="ln">    56</span>			return l
<a id="L57"></a><span class="ln">    57</span>		}
<a id="L58"></a><span class="ln">    58</span>		l, err := net.Listen(&#34;tcp&#34;, &#34;127.0.0.1:0&#34;)
<a id="L59"></a><span class="ln">    59</span>		if err != nil {
<a id="L60"></a><span class="ln">    60</span>			if l, err = net.Listen(&#34;tcp6&#34;, &#34;[::1]:0&#34;); err != nil {
<a id="L61"></a><span class="ln">    61</span>				panic(fmt.Sprintf(&#34;httptest: failed to listen on a port: %v&#34;, err))
<a id="L62"></a><span class="ln">    62</span>			}
<a id="L63"></a><span class="ln">    63</span>		}
<a id="L64"></a><span class="ln">    64</span>		return l
<a id="L65"></a><span class="ln">    65</span>	}
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// When debugging a particular http server-based test,</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// this flag lets you run</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">//	go test -run=BrokenTest -httptest.serve=127.0.0.1:8000</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// to start the broken server so you can interact with it manually.</span>
<a id="L71"></a><span class="ln">    71</span>	var serve = flag.String(&#34;httptest.serve&#34;, &#34;&#34;, &#34;if non-empty, httptest.NewServer serves on this address and blocks&#34;)
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// NewServer starts and returns a new Server.</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">// The caller should call Close when finished, to shut it down.</span>
<a id="L75"></a><span class="ln">    75</span>	func NewServer(handler http.Handler) *Server {
<a id="L76"></a><span class="ln">    76</span>		ts := NewUnstartedServer(handler)
<a id="L77"></a><span class="ln">    77</span>		ts.Start()
<a id="L78"></a><span class="ln">    78</span>		return ts
<a id="L79"></a><span class="ln">    79</span>	}
<a id="L80"></a><span class="ln">    80</span>	
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// NewUnstartedServer returns a new Server but doesn&#39;t start it.</span>
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">//</span>
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">// After changing its configuration, the caller should call Start or</span>
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">// StartTLS.</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">//</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// The caller should call Close when finished, to shut it down.</span>
<a id="L87"></a><span class="ln">    87</span>	func NewUnstartedServer(handler http.Handler) *Server {
<a id="L88"></a><span class="ln">    88</span>		return &amp;Server{
<a id="L89"></a><span class="ln">    89</span>			Listener: newLocalListener(),
<a id="L90"></a><span class="ln">    90</span>			Config:   &amp;http.Server{Handler: handler},
<a id="L91"></a><span class="ln">    91</span>		}
<a id="L92"></a><span class="ln">    92</span>	}
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// Start starts a server from NewUnstartedServer.</span>
<a id="L95"></a><span class="ln">    95</span>	func (s *Server) Start() {
<a id="L96"></a><span class="ln">    96</span>		if s.URL != &#34;&#34; {
<a id="L97"></a><span class="ln">    97</span>			panic(&#34;Server already started&#34;)
<a id="L98"></a><span class="ln">    98</span>		}
<a id="L99"></a><span class="ln">    99</span>		s.Listener = &amp;historyListener{s.Listener, make([]net.Conn, 0)}
<a id="L100"></a><span class="ln">   100</span>		s.URL = &#34;http://&#34; + s.Listener.Addr().String()
<a id="L101"></a><span class="ln">   101</span>		s.wrapHandler()
<a id="L102"></a><span class="ln">   102</span>		go s.Config.Serve(s.Listener)
<a id="L103"></a><span class="ln">   103</span>		if *serve != &#34;&#34; {
<a id="L104"></a><span class="ln">   104</span>			fmt.Fprintln(os.Stderr, &#34;httptest: serving on&#34;, s.URL)
<a id="L105"></a><span class="ln">   105</span>			select {}
<a id="L106"></a><span class="ln">   106</span>		}
<a id="L107"></a><span class="ln">   107</span>	}
<a id="L108"></a><span class="ln">   108</span>	
<a id="L109"></a><span class="ln">   109</span>	<span class="comment">// StartTLS starts TLS on a server from NewUnstartedServer.</span>
<a id="L110"></a><span class="ln">   110</span>	func (s *Server) StartTLS() {
<a id="L111"></a><span class="ln">   111</span>		if s.URL != &#34;&#34; {
<a id="L112"></a><span class="ln">   112</span>			panic(&#34;Server already started&#34;)
<a id="L113"></a><span class="ln">   113</span>		}
<a id="L114"></a><span class="ln">   114</span>		cert, err := tls.X509KeyPair(localhostCert, localhostKey)
<a id="L115"></a><span class="ln">   115</span>		if err != nil {
<a id="L116"></a><span class="ln">   116</span>			panic(fmt.Sprintf(&#34;httptest: NewTLSServer: %v&#34;, err))
<a id="L117"></a><span class="ln">   117</span>		}
<a id="L118"></a><span class="ln">   118</span>	
<a id="L119"></a><span class="ln">   119</span>		s.TLS = &amp;tls.Config{
<a id="L120"></a><span class="ln">   120</span>			NextProtos:   []string{&#34;http/1.1&#34;},
<a id="L121"></a><span class="ln">   121</span>			Certificates: []tls.Certificate{cert},
<a id="L122"></a><span class="ln">   122</span>		}
<a id="L123"></a><span class="ln">   123</span>		tlsListener := tls.NewListener(s.Listener, s.TLS)
<a id="L124"></a><span class="ln">   124</span>	
<a id="L125"></a><span class="ln">   125</span>		s.Listener = &amp;historyListener{tlsListener, make([]net.Conn, 0)}
<a id="L126"></a><span class="ln">   126</span>		s.URL = &#34;https://&#34; + s.Listener.Addr().String()
<a id="L127"></a><span class="ln">   127</span>		s.wrapHandler()
<a id="L128"></a><span class="ln">   128</span>		go s.Config.Serve(s.Listener)
<a id="L129"></a><span class="ln">   129</span>	}
<a id="L130"></a><span class="ln">   130</span>	
<a id="L131"></a><span class="ln">   131</span>	func (s *Server) wrapHandler() {
<a id="L132"></a><span class="ln">   132</span>		h := s.Config.Handler
<a id="L133"></a><span class="ln">   133</span>		if h == nil {
<a id="L134"></a><span class="ln">   134</span>			h = http.DefaultServeMux
<a id="L135"></a><span class="ln">   135</span>		}
<a id="L136"></a><span class="ln">   136</span>		s.Config.Handler = &amp;waitGroupHandler{
<a id="L137"></a><span class="ln">   137</span>			s: s,
<a id="L138"></a><span class="ln">   138</span>			h: h,
<a id="L139"></a><span class="ln">   139</span>		}
<a id="L140"></a><span class="ln">   140</span>	}
<a id="L141"></a><span class="ln">   141</span>	
<a id="L142"></a><span class="ln">   142</span>	<span class="comment">// NewTLSServer starts and returns a new Server using TLS.</span>
<a id="L143"></a><span class="ln">   143</span>	<span class="comment">// The caller should call Close when finished, to shut it down.</span>
<a id="L144"></a><span class="ln">   144</span>	func NewTLSServer(handler http.Handler) *Server {
<a id="L145"></a><span class="ln">   145</span>		ts := NewUnstartedServer(handler)
<a id="L146"></a><span class="ln">   146</span>		ts.StartTLS()
<a id="L147"></a><span class="ln">   147</span>		return ts
<a id="L148"></a><span class="ln">   148</span>	}
<a id="L149"></a><span class="ln">   149</span>	
<a id="L150"></a><span class="ln">   150</span>	<span class="comment">// Close shuts down the server and blocks until all outstanding</span>
<a id="L151"></a><span class="ln">   151</span>	<span class="comment">// requests on this server have completed.</span>
<a id="L152"></a><span class="ln">   152</span>	func (s *Server) Close() {
<a id="L153"></a><span class="ln">   153</span>		s.Listener.Close()
<a id="L154"></a><span class="ln">   154</span>		s.wg.Wait()
<a id="L155"></a><span class="ln">   155</span>	}
<a id="L156"></a><span class="ln">   156</span>	
<a id="L157"></a><span class="ln">   157</span>	<span class="comment">// CloseClientConnections closes any currently open HTTP connections</span>
<a id="L158"></a><span class="ln">   158</span>	<span class="comment">// to the test Server.</span>
<a id="L159"></a><span class="ln">   159</span>	func (s *Server) CloseClientConnections() {
<a id="L160"></a><span class="ln">   160</span>		hl, ok := s.Listener.(*historyListener)
<a id="L161"></a><span class="ln">   161</span>		if !ok {
<a id="L162"></a><span class="ln">   162</span>			return
<a id="L163"></a><span class="ln">   163</span>		}
<a id="L164"></a><span class="ln">   164</span>		for _, conn := range hl.history {
<a id="L165"></a><span class="ln">   165</span>			conn.Close()
<a id="L166"></a><span class="ln">   166</span>		}
<a id="L167"></a><span class="ln">   167</span>	}
<a id="L168"></a><span class="ln">   168</span>	
<a id="L169"></a><span class="ln">   169</span>	<span class="comment">// waitGroupHandler wraps a handler, incrementing and decrementing a</span>
<a id="L170"></a><span class="ln">   170</span>	<span class="comment">// sync.WaitGroup on each request, to enable Server.Close to block</span>
<a id="L171"></a><span class="ln">   171</span>	<span class="comment">// until outstanding requests are finished.</span>
<a id="L172"></a><span class="ln">   172</span>	type waitGroupHandler struct {
<a id="L173"></a><span class="ln">   173</span>		s *Server
<a id="L174"></a><span class="ln">   174</span>		h http.Handler <span class="comment">// non-nil</span>
<a id="L175"></a><span class="ln">   175</span>	}
<a id="L176"></a><span class="ln">   176</span>	
<a id="L177"></a><span class="ln">   177</span>	func (h *waitGroupHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
<a id="L178"></a><span class="ln">   178</span>		h.s.wg.Add(1)
<a id="L179"></a><span class="ln">   179</span>		defer h.s.wg.Done() <span class="comment">// a defer, in case ServeHTTP below panics</span>
<a id="L180"></a><span class="ln">   180</span>		h.h.ServeHTTP(w, r)
<a id="L181"></a><span class="ln">   181</span>	}
<a id="L182"></a><span class="ln">   182</span>	
<a id="L183"></a><span class="ln">   183</span>	<span class="comment">// localhostCert is a PEM-encoded TLS cert with SAN DNS names</span>
<a id="L184"></a><span class="ln">   184</span>	<span class="comment">// &#34;127.0.0.1&#34; and &#34;[::1]&#34;, expiring at the last second of 2049 (the end</span>
<a id="L185"></a><span class="ln">   185</span>	<span class="comment">// of ASN.1 time).</span>
<a id="L186"></a><span class="ln">   186</span>	var localhostCert = []byte(`-----BEGIN CERTIFICATE-----
<a id="L187"></a><span class="ln">   187</span>	MIIBOTCB5qADAgECAgEAMAsGCSqGSIb3DQEBBTAAMB4XDTcwMDEwMTAwMDAwMFoX
<a id="L188"></a><span class="ln">   188</span>	DTQ5MTIzMTIzNTk1OVowADBaMAsGCSqGSIb3DQEBAQNLADBIAkEAsuA5mAFMj6Q7
<a id="L189"></a><span class="ln">   189</span>	qoBzcvKzIq4kzuT5epSp2AkcQfyBHm7K13Ws7u+0b5Vb9gqTf5cAiIKcrtrXVqkL
<a id="L190"></a><span class="ln">   190</span>	8i1UQF6AzwIDAQABo08wTTAOBgNVHQ8BAf8EBAMCACQwDQYDVR0OBAYEBAECAwQw
<a id="L191"></a><span class="ln">   191</span>	DwYDVR0jBAgwBoAEAQIDBDAbBgNVHREEFDASggkxMjcuMC4wLjGCBVs6OjFdMAsG
<a id="L192"></a><span class="ln">   192</span>	CSqGSIb3DQEBBQNBAJH30zjLWRztrWpOCgJL8RQWLaKzhK79pVhAx6q/3NrF16C7
<a id="L193"></a><span class="ln">   193</span>	+l1BRZstTwIGdoGId8BRpErK1TXkniFb95ZMynM=
<a id="L194"></a><span class="ln">   194</span>	-----END CERTIFICATE-----
<a id="L195"></a><span class="ln">   195</span>	`)
<a id="L196"></a><span class="ln">   196</span>	
<a id="L197"></a><span class="ln">   197</span>	<span class="comment">// localhostKey is the private key for localhostCert.</span>
<a id="L198"></a><span class="ln">   198</span>	var localhostKey = []byte(`-----BEGIN RSA PRIVATE KEY-----
<a id="L199"></a><span class="ln">   199</span>	MIIBPQIBAAJBALLgOZgBTI+kO6qAc3LysyKuJM7k+XqUqdgJHEH8gR5uytd1rO7v
<a id="L200"></a><span class="ln">   200</span>	tG+VW/YKk3+XAIiCnK7a11apC/ItVEBegM8CAwEAAQJBAI5sxq7naeR9ahyqRkJi
<a id="L201"></a><span class="ln">   201</span>	SIv2iMxLuPEHaezf5CYOPWjSjBPyVhyRevkhtqEjF/WkgL7C2nWpYHsUcBDBQVF0
<a id="L202"></a><span class="ln">   202</span>	3KECIQDtEGB2ulnkZAahl3WuJziXGLB+p8Wgx7wzSM6bHu1c6QIhAMEp++CaS+SJ
<a id="L203"></a><span class="ln">   203</span>	/TrU0zwY/fW4SvQeb49BPZUF3oqR8Xz3AiEA1rAJHBzBgdOQKdE3ksMUPcnvNJSN
<a id="L204"></a><span class="ln">   204</span>	poCcELmz2clVXtkCIQCLytuLV38XHToTipR4yMl6O+6arzAjZ56uq7m7ZRV0TwIh
<a id="L205"></a><span class="ln">   205</span>	AM65XAOw8Dsg9Kq78aYXiOEDc5DL0sbFUu/SlmRcCg93
<a id="L206"></a><span class="ln">   206</span>	-----END RSA PRIVATE KEY-----
<a id="L207"></a><span class="ln">   207</span>	`)
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

