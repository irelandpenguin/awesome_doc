<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/http/lex.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/http/lex.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package http
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// This file deals with lexical matters of HTTP</span>
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	func isSeparator(c byte) bool {
<a id="L10"></a><span class="ln">    10</span>		switch c {
<a id="L11"></a><span class="ln">    11</span>		case &#39;(&#39;, &#39;)&#39;, &#39;&lt;&#39;, &#39;&gt;&#39;, &#39;@&#39;, &#39;,&#39;, &#39;;&#39;, &#39;:&#39;, &#39;\\&#39;, &#39;&#34;&#39;, &#39;/&#39;, &#39;[&#39;, &#39;]&#39;, &#39;?&#39;, &#39;=&#39;, &#39;{&#39;, &#39;}&#39;, &#39; &#39;, &#39;\t&#39;:
<a id="L12"></a><span class="ln">    12</span>			return true
<a id="L13"></a><span class="ln">    13</span>		}
<a id="L14"></a><span class="ln">    14</span>		return false
<a id="L15"></a><span class="ln">    15</span>	}
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	func isCtl(c byte) bool { return (0 &lt;= c &amp;&amp; c &lt;= 31) || c == 127 }
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	func isChar(c byte) bool { return 0 &lt;= c &amp;&amp; c &lt;= 127 }
<a id="L20"></a><span class="ln">    20</span>	
<a id="L21"></a><span class="ln">    21</span>	func isAnyText(c byte) bool { return !isCtl(c) }
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	func isQdText(c byte) bool { return isAnyText(c) &amp;&amp; c != &#39;&#34;&#39; }
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	func isToken(c byte) bool { return isChar(c) &amp;&amp; !isCtl(c) &amp;&amp; !isSeparator(c) }
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// Valid escaped sequences are not specified in RFC 2616, so for now, we assume</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// that they coincide with the common sense ones used by GO. Malformed</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// characters should probably not be treated as errors by a robust (forgiving)</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// parser, so we replace them with the &#39;?&#39; character.</span>
<a id="L31"></a><span class="ln">    31</span>	func httpUnquotePair(b byte) byte {
<a id="L32"></a><span class="ln">    32</span>		<span class="comment">// skip the first byte, which should always be &#39;\&#39;</span>
<a id="L33"></a><span class="ln">    33</span>		switch b {
<a id="L34"></a><span class="ln">    34</span>		case &#39;a&#39;:
<a id="L35"></a><span class="ln">    35</span>			return &#39;\a&#39;
<a id="L36"></a><span class="ln">    36</span>		case &#39;b&#39;:
<a id="L37"></a><span class="ln">    37</span>			return &#39;\b&#39;
<a id="L38"></a><span class="ln">    38</span>		case &#39;f&#39;:
<a id="L39"></a><span class="ln">    39</span>			return &#39;\f&#39;
<a id="L40"></a><span class="ln">    40</span>		case &#39;n&#39;:
<a id="L41"></a><span class="ln">    41</span>			return &#39;\n&#39;
<a id="L42"></a><span class="ln">    42</span>		case &#39;r&#39;:
<a id="L43"></a><span class="ln">    43</span>			return &#39;\r&#39;
<a id="L44"></a><span class="ln">    44</span>		case &#39;t&#39;:
<a id="L45"></a><span class="ln">    45</span>			return &#39;\t&#39;
<a id="L46"></a><span class="ln">    46</span>		case &#39;v&#39;:
<a id="L47"></a><span class="ln">    47</span>			return &#39;\v&#39;
<a id="L48"></a><span class="ln">    48</span>		case &#39;\\&#39;:
<a id="L49"></a><span class="ln">    49</span>			return &#39;\\&#39;
<a id="L50"></a><span class="ln">    50</span>		case &#39;\&#39;&#39;:
<a id="L51"></a><span class="ln">    51</span>			return &#39;\&#39;&#39;
<a id="L52"></a><span class="ln">    52</span>		case &#39;&#34;&#39;:
<a id="L53"></a><span class="ln">    53</span>			return &#39;&#34;&#39;
<a id="L54"></a><span class="ln">    54</span>		}
<a id="L55"></a><span class="ln">    55</span>		return &#39;?&#39;
<a id="L56"></a><span class="ln">    56</span>	}
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// raw must begin with a valid quoted string. Only the first quoted string is</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// parsed and is unquoted in result. eaten is the number of bytes parsed, or -1</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// upon failure.</span>
<a id="L61"></a><span class="ln">    61</span>	func httpUnquote(raw []byte) (eaten int, result string) {
<a id="L62"></a><span class="ln">    62</span>		buf := make([]byte, len(raw))
<a id="L63"></a><span class="ln">    63</span>		if raw[0] != &#39;&#34;&#39; {
<a id="L64"></a><span class="ln">    64</span>			return -1, &#34;&#34;
<a id="L65"></a><span class="ln">    65</span>		}
<a id="L66"></a><span class="ln">    66</span>		eaten = 1
<a id="L67"></a><span class="ln">    67</span>		j := 0 <span class="comment">// # of bytes written in buf</span>
<a id="L68"></a><span class="ln">    68</span>		for i := 1; i &lt; len(raw); i++ {
<a id="L69"></a><span class="ln">    69</span>			switch b := raw[i]; b {
<a id="L70"></a><span class="ln">    70</span>			case &#39;&#34;&#39;:
<a id="L71"></a><span class="ln">    71</span>				eaten++
<a id="L72"></a><span class="ln">    72</span>				buf = buf[0:j]
<a id="L73"></a><span class="ln">    73</span>				return i + 1, string(buf)
<a id="L74"></a><span class="ln">    74</span>			case &#39;\\&#39;:
<a id="L75"></a><span class="ln">    75</span>				if len(raw) &lt; i+2 {
<a id="L76"></a><span class="ln">    76</span>					return -1, &#34;&#34;
<a id="L77"></a><span class="ln">    77</span>				}
<a id="L78"></a><span class="ln">    78</span>				buf[j] = httpUnquotePair(raw[i+1])
<a id="L79"></a><span class="ln">    79</span>				eaten += 2
<a id="L80"></a><span class="ln">    80</span>				j++
<a id="L81"></a><span class="ln">    81</span>				i++
<a id="L82"></a><span class="ln">    82</span>			default:
<a id="L83"></a><span class="ln">    83</span>				if isQdText(b) {
<a id="L84"></a><span class="ln">    84</span>					buf[j] = b
<a id="L85"></a><span class="ln">    85</span>				} else {
<a id="L86"></a><span class="ln">    86</span>					buf[j] = &#39;?&#39;
<a id="L87"></a><span class="ln">    87</span>				}
<a id="L88"></a><span class="ln">    88</span>				eaten++
<a id="L89"></a><span class="ln">    89</span>				j++
<a id="L90"></a><span class="ln">    90</span>			}
<a id="L91"></a><span class="ln">    91</span>		}
<a id="L92"></a><span class="ln">    92</span>		return -1, &#34;&#34;
<a id="L93"></a><span class="ln">    93</span>	}
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">// This is a best effort parse, so errors are not returned, instead not all of</span>
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">// the input string might be parsed. result is always non-nil.</span>
<a id="L97"></a><span class="ln">    97</span>	func httpSplitFieldValue(fv string) (eaten int, result []string) {
<a id="L98"></a><span class="ln">    98</span>		result = make([]string, 0, len(fv))
<a id="L99"></a><span class="ln">    99</span>		raw := []byte(fv)
<a id="L100"></a><span class="ln">   100</span>		i := 0
<a id="L101"></a><span class="ln">   101</span>		chunk := &#34;&#34;
<a id="L102"></a><span class="ln">   102</span>		for i &lt; len(raw) {
<a id="L103"></a><span class="ln">   103</span>			b := raw[i]
<a id="L104"></a><span class="ln">   104</span>			switch {
<a id="L105"></a><span class="ln">   105</span>			case b == &#39;&#34;&#39;:
<a id="L106"></a><span class="ln">   106</span>				eaten, unq := httpUnquote(raw[i:len(raw)])
<a id="L107"></a><span class="ln">   107</span>				if eaten &lt; 0 {
<a id="L108"></a><span class="ln">   108</span>					return i, result
<a id="L109"></a><span class="ln">   109</span>				} else {
<a id="L110"></a><span class="ln">   110</span>					i += eaten
<a id="L111"></a><span class="ln">   111</span>					chunk += unq
<a id="L112"></a><span class="ln">   112</span>				}
<a id="L113"></a><span class="ln">   113</span>			case isSeparator(b):
<a id="L114"></a><span class="ln">   114</span>				if chunk != &#34;&#34; {
<a id="L115"></a><span class="ln">   115</span>					result = result[0 : len(result)+1]
<a id="L116"></a><span class="ln">   116</span>					result[len(result)-1] = chunk
<a id="L117"></a><span class="ln">   117</span>					chunk = &#34;&#34;
<a id="L118"></a><span class="ln">   118</span>				}
<a id="L119"></a><span class="ln">   119</span>				i++
<a id="L120"></a><span class="ln">   120</span>			case isToken(b):
<a id="L121"></a><span class="ln">   121</span>				chunk += string(b)
<a id="L122"></a><span class="ln">   122</span>				i++
<a id="L123"></a><span class="ln">   123</span>			case b == &#39;\n&#39; || b == &#39;\r&#39;:
<a id="L124"></a><span class="ln">   124</span>				i++
<a id="L125"></a><span class="ln">   125</span>			default:
<a id="L126"></a><span class="ln">   126</span>				chunk += &#34;?&#34;
<a id="L127"></a><span class="ln">   127</span>				i++
<a id="L128"></a><span class="ln">   128</span>			}
<a id="L129"></a><span class="ln">   129</span>		}
<a id="L130"></a><span class="ln">   130</span>		if chunk != &#34;&#34; {
<a id="L131"></a><span class="ln">   131</span>			result = result[0 : len(result)+1]
<a id="L132"></a><span class="ln">   132</span>			result[len(result)-1] = chunk
<a id="L133"></a><span class="ln">   133</span>			chunk = &#34;&#34;
<a id="L134"></a><span class="ln">   134</span>		}
<a id="L135"></a><span class="ln">   135</span>		return i, result
<a id="L136"></a><span class="ln">   136</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

