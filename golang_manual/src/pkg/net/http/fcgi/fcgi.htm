<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/http/fcgi/fcgi.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/http/fcgi/fcgi.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package fcgi implements the FastCGI protocol.</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// Currently only the responder role is supported.</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// The protocol is defined at http://www.fastcgi.com/drupal/node/6?q=node/22</span>
<a id="L8"></a><span class="ln">     8</span>	package fcgi
<a id="L9"></a><span class="ln">     9</span>	
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// This file defines the raw protocol and some utilities used by the child and</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// the host.</span>
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	import (
<a id="L14"></a><span class="ln">    14</span>		&#34;bufio&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;bytes&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;encoding/binary&#34;
<a id="L17"></a><span class="ln">    17</span>		&#34;errors&#34;
<a id="L18"></a><span class="ln">    18</span>		&#34;io&#34;
<a id="L19"></a><span class="ln">    19</span>		&#34;sync&#34;
<a id="L20"></a><span class="ln">    20</span>	)
<a id="L21"></a><span class="ln">    21</span>	
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// recType is a record type, as defined by</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// http://www.fastcgi.com/devkit/doc/fcgi-spec.html#S8</span>
<a id="L24"></a><span class="ln">    24</span>	type recType uint8
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>	const (
<a id="L27"></a><span class="ln">    27</span>		typeBeginRequest    recType = 1
<a id="L28"></a><span class="ln">    28</span>		typeAbortRequest    recType = 2
<a id="L29"></a><span class="ln">    29</span>		typeEndRequest      recType = 3
<a id="L30"></a><span class="ln">    30</span>		typeParams          recType = 4
<a id="L31"></a><span class="ln">    31</span>		typeStdin           recType = 5
<a id="L32"></a><span class="ln">    32</span>		typeStdout          recType = 6
<a id="L33"></a><span class="ln">    33</span>		typeStderr          recType = 7
<a id="L34"></a><span class="ln">    34</span>		typeData            recType = 8
<a id="L35"></a><span class="ln">    35</span>		typeGetValues       recType = 9
<a id="L36"></a><span class="ln">    36</span>		typeGetValuesResult recType = 10
<a id="L37"></a><span class="ln">    37</span>		typeUnknownType     recType = 11
<a id="L38"></a><span class="ln">    38</span>	)
<a id="L39"></a><span class="ln">    39</span>	
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// keep the connection between web-server and responder open after request</span>
<a id="L41"></a><span class="ln">    41</span>	const flagKeepConn = 1
<a id="L42"></a><span class="ln">    42</span>	
<a id="L43"></a><span class="ln">    43</span>	const (
<a id="L44"></a><span class="ln">    44</span>		maxWrite = 65535 <span class="comment">// maximum record body</span>
<a id="L45"></a><span class="ln">    45</span>		maxPad   = 255
<a id="L46"></a><span class="ln">    46</span>	)
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>	const (
<a id="L49"></a><span class="ln">    49</span>		roleResponder = iota + 1 <span class="comment">// only Responders are implemented.</span>
<a id="L50"></a><span class="ln">    50</span>		roleAuthorizer
<a id="L51"></a><span class="ln">    51</span>		roleFilter
<a id="L52"></a><span class="ln">    52</span>	)
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>	const (
<a id="L55"></a><span class="ln">    55</span>		statusRequestComplete = iota
<a id="L56"></a><span class="ln">    56</span>		statusCantMultiplex
<a id="L57"></a><span class="ln">    57</span>		statusOverloaded
<a id="L58"></a><span class="ln">    58</span>		statusUnknownRole
<a id="L59"></a><span class="ln">    59</span>	)
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>	const headerLen = 8
<a id="L62"></a><span class="ln">    62</span>	
<a id="L63"></a><span class="ln">    63</span>	type header struct {
<a id="L64"></a><span class="ln">    64</span>		Version       uint8
<a id="L65"></a><span class="ln">    65</span>		Type          recType
<a id="L66"></a><span class="ln">    66</span>		Id            uint16
<a id="L67"></a><span class="ln">    67</span>		ContentLength uint16
<a id="L68"></a><span class="ln">    68</span>		PaddingLength uint8
<a id="L69"></a><span class="ln">    69</span>		Reserved      uint8
<a id="L70"></a><span class="ln">    70</span>	}
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>	type beginRequest struct {
<a id="L73"></a><span class="ln">    73</span>		role     uint16
<a id="L74"></a><span class="ln">    74</span>		flags    uint8
<a id="L75"></a><span class="ln">    75</span>		reserved [5]uint8
<a id="L76"></a><span class="ln">    76</span>	}
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>	func (br *beginRequest) read(content []byte) error {
<a id="L79"></a><span class="ln">    79</span>		if len(content) != 8 {
<a id="L80"></a><span class="ln">    80</span>			return errors.New(&#34;fcgi: invalid begin request record&#34;)
<a id="L81"></a><span class="ln">    81</span>		}
<a id="L82"></a><span class="ln">    82</span>		br.role = binary.BigEndian.Uint16(content)
<a id="L83"></a><span class="ln">    83</span>		br.flags = content[2]
<a id="L84"></a><span class="ln">    84</span>		return nil
<a id="L85"></a><span class="ln">    85</span>	}
<a id="L86"></a><span class="ln">    86</span>	
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">// for padding so we don&#39;t have to allocate all the time</span>
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// not synchronized because we don&#39;t care what the contents are</span>
<a id="L89"></a><span class="ln">    89</span>	var pad [maxPad]byte
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>	func (h *header) init(recType recType, reqId uint16, contentLength int) {
<a id="L92"></a><span class="ln">    92</span>		h.Version = 1
<a id="L93"></a><span class="ln">    93</span>		h.Type = recType
<a id="L94"></a><span class="ln">    94</span>		h.Id = reqId
<a id="L95"></a><span class="ln">    95</span>		h.ContentLength = uint16(contentLength)
<a id="L96"></a><span class="ln">    96</span>		h.PaddingLength = uint8(-contentLength &amp; 7)
<a id="L97"></a><span class="ln">    97</span>	}
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">// conn sends records over rwc</span>
<a id="L100"></a><span class="ln">   100</span>	type conn struct {
<a id="L101"></a><span class="ln">   101</span>		mutex sync.Mutex
<a id="L102"></a><span class="ln">   102</span>		rwc   io.ReadWriteCloser
<a id="L103"></a><span class="ln">   103</span>	
<a id="L104"></a><span class="ln">   104</span>		<span class="comment">// to avoid allocations</span>
<a id="L105"></a><span class="ln">   105</span>		buf bytes.Buffer
<a id="L106"></a><span class="ln">   106</span>		h   header
<a id="L107"></a><span class="ln">   107</span>	}
<a id="L108"></a><span class="ln">   108</span>	
<a id="L109"></a><span class="ln">   109</span>	func newConn(rwc io.ReadWriteCloser) *conn {
<a id="L110"></a><span class="ln">   110</span>		return &amp;conn{rwc: rwc}
<a id="L111"></a><span class="ln">   111</span>	}
<a id="L112"></a><span class="ln">   112</span>	
<a id="L113"></a><span class="ln">   113</span>	func (c *conn) Close() error {
<a id="L114"></a><span class="ln">   114</span>		c.mutex.Lock()
<a id="L115"></a><span class="ln">   115</span>		defer c.mutex.Unlock()
<a id="L116"></a><span class="ln">   116</span>		return c.rwc.Close()
<a id="L117"></a><span class="ln">   117</span>	}
<a id="L118"></a><span class="ln">   118</span>	
<a id="L119"></a><span class="ln">   119</span>	type record struct {
<a id="L120"></a><span class="ln">   120</span>		h   header
<a id="L121"></a><span class="ln">   121</span>		buf [maxWrite + maxPad]byte
<a id="L122"></a><span class="ln">   122</span>	}
<a id="L123"></a><span class="ln">   123</span>	
<a id="L124"></a><span class="ln">   124</span>	func (rec *record) read(r io.Reader) (err error) {
<a id="L125"></a><span class="ln">   125</span>		if err = binary.Read(r, binary.BigEndian, &amp;rec.h); err != nil {
<a id="L126"></a><span class="ln">   126</span>			return err
<a id="L127"></a><span class="ln">   127</span>		}
<a id="L128"></a><span class="ln">   128</span>		if rec.h.Version != 1 {
<a id="L129"></a><span class="ln">   129</span>			return errors.New(&#34;fcgi: invalid header version&#34;)
<a id="L130"></a><span class="ln">   130</span>		}
<a id="L131"></a><span class="ln">   131</span>		n := int(rec.h.ContentLength) + int(rec.h.PaddingLength)
<a id="L132"></a><span class="ln">   132</span>		if _, err = io.ReadFull(r, rec.buf[:n]); err != nil {
<a id="L133"></a><span class="ln">   133</span>			return err
<a id="L134"></a><span class="ln">   134</span>		}
<a id="L135"></a><span class="ln">   135</span>		return nil
<a id="L136"></a><span class="ln">   136</span>	}
<a id="L137"></a><span class="ln">   137</span>	
<a id="L138"></a><span class="ln">   138</span>	func (r *record) content() []byte {
<a id="L139"></a><span class="ln">   139</span>		return r.buf[:r.h.ContentLength]
<a id="L140"></a><span class="ln">   140</span>	}
<a id="L141"></a><span class="ln">   141</span>	
<a id="L142"></a><span class="ln">   142</span>	<span class="comment">// writeRecord writes and sends a single record.</span>
<a id="L143"></a><span class="ln">   143</span>	func (c *conn) writeRecord(recType recType, reqId uint16, b []byte) error {
<a id="L144"></a><span class="ln">   144</span>		c.mutex.Lock()
<a id="L145"></a><span class="ln">   145</span>		defer c.mutex.Unlock()
<a id="L146"></a><span class="ln">   146</span>		c.buf.Reset()
<a id="L147"></a><span class="ln">   147</span>		c.h.init(recType, reqId, len(b))
<a id="L148"></a><span class="ln">   148</span>		if err := binary.Write(&amp;c.buf, binary.BigEndian, c.h); err != nil {
<a id="L149"></a><span class="ln">   149</span>			return err
<a id="L150"></a><span class="ln">   150</span>		}
<a id="L151"></a><span class="ln">   151</span>		if _, err := c.buf.Write(b); err != nil {
<a id="L152"></a><span class="ln">   152</span>			return err
<a id="L153"></a><span class="ln">   153</span>		}
<a id="L154"></a><span class="ln">   154</span>		if _, err := c.buf.Write(pad[:c.h.PaddingLength]); err != nil {
<a id="L155"></a><span class="ln">   155</span>			return err
<a id="L156"></a><span class="ln">   156</span>		}
<a id="L157"></a><span class="ln">   157</span>		_, err := c.rwc.Write(c.buf.Bytes())
<a id="L158"></a><span class="ln">   158</span>		return err
<a id="L159"></a><span class="ln">   159</span>	}
<a id="L160"></a><span class="ln">   160</span>	
<a id="L161"></a><span class="ln">   161</span>	func (c *conn) writeBeginRequest(reqId uint16, role uint16, flags uint8) error {
<a id="L162"></a><span class="ln">   162</span>		b := [8]byte{byte(role &gt;&gt; 8), byte(role), flags}
<a id="L163"></a><span class="ln">   163</span>		return c.writeRecord(typeBeginRequest, reqId, b[:])
<a id="L164"></a><span class="ln">   164</span>	}
<a id="L165"></a><span class="ln">   165</span>	
<a id="L166"></a><span class="ln">   166</span>	func (c *conn) writeEndRequest(reqId uint16, appStatus int, protocolStatus uint8) error {
<a id="L167"></a><span class="ln">   167</span>		b := make([]byte, 8)
<a id="L168"></a><span class="ln">   168</span>		binary.BigEndian.PutUint32(b, uint32(appStatus))
<a id="L169"></a><span class="ln">   169</span>		b[4] = protocolStatus
<a id="L170"></a><span class="ln">   170</span>		return c.writeRecord(typeEndRequest, reqId, b)
<a id="L171"></a><span class="ln">   171</span>	}
<a id="L172"></a><span class="ln">   172</span>	
<a id="L173"></a><span class="ln">   173</span>	func (c *conn) writePairs(recType recType, reqId uint16, pairs map[string]string) error {
<a id="L174"></a><span class="ln">   174</span>		w := newWriter(c, recType, reqId)
<a id="L175"></a><span class="ln">   175</span>		b := make([]byte, 8)
<a id="L176"></a><span class="ln">   176</span>		for k, v := range pairs {
<a id="L177"></a><span class="ln">   177</span>			n := encodeSize(b, uint32(len(k)))
<a id="L178"></a><span class="ln">   178</span>			n += encodeSize(b[n:], uint32(len(v)))
<a id="L179"></a><span class="ln">   179</span>			if _, err := w.Write(b[:n]); err != nil {
<a id="L180"></a><span class="ln">   180</span>				return err
<a id="L181"></a><span class="ln">   181</span>			}
<a id="L182"></a><span class="ln">   182</span>			if _, err := w.WriteString(k); err != nil {
<a id="L183"></a><span class="ln">   183</span>				return err
<a id="L184"></a><span class="ln">   184</span>			}
<a id="L185"></a><span class="ln">   185</span>			if _, err := w.WriteString(v); err != nil {
<a id="L186"></a><span class="ln">   186</span>				return err
<a id="L187"></a><span class="ln">   187</span>			}
<a id="L188"></a><span class="ln">   188</span>		}
<a id="L189"></a><span class="ln">   189</span>		w.Close()
<a id="L190"></a><span class="ln">   190</span>		return nil
<a id="L191"></a><span class="ln">   191</span>	}
<a id="L192"></a><span class="ln">   192</span>	
<a id="L193"></a><span class="ln">   193</span>	func readSize(s []byte) (uint32, int) {
<a id="L194"></a><span class="ln">   194</span>		if len(s) == 0 {
<a id="L195"></a><span class="ln">   195</span>			return 0, 0
<a id="L196"></a><span class="ln">   196</span>		}
<a id="L197"></a><span class="ln">   197</span>		size, n := uint32(s[0]), 1
<a id="L198"></a><span class="ln">   198</span>		if size&amp;(1&lt;&lt;7) != 0 {
<a id="L199"></a><span class="ln">   199</span>			if len(s) &lt; 4 {
<a id="L200"></a><span class="ln">   200</span>				return 0, 0
<a id="L201"></a><span class="ln">   201</span>			}
<a id="L202"></a><span class="ln">   202</span>			n = 4
<a id="L203"></a><span class="ln">   203</span>			size = binary.BigEndian.Uint32(s)
<a id="L204"></a><span class="ln">   204</span>			size &amp;^= 1 &lt;&lt; 31
<a id="L205"></a><span class="ln">   205</span>		}
<a id="L206"></a><span class="ln">   206</span>		return size, n
<a id="L207"></a><span class="ln">   207</span>	}
<a id="L208"></a><span class="ln">   208</span>	
<a id="L209"></a><span class="ln">   209</span>	func readString(s []byte, size uint32) string {
<a id="L210"></a><span class="ln">   210</span>		if size &gt; uint32(len(s)) {
<a id="L211"></a><span class="ln">   211</span>			return &#34;&#34;
<a id="L212"></a><span class="ln">   212</span>		}
<a id="L213"></a><span class="ln">   213</span>		return string(s[:size])
<a id="L214"></a><span class="ln">   214</span>	}
<a id="L215"></a><span class="ln">   215</span>	
<a id="L216"></a><span class="ln">   216</span>	func encodeSize(b []byte, size uint32) int {
<a id="L217"></a><span class="ln">   217</span>		if size &gt; 127 {
<a id="L218"></a><span class="ln">   218</span>			size |= 1 &lt;&lt; 31
<a id="L219"></a><span class="ln">   219</span>			binary.BigEndian.PutUint32(b, size)
<a id="L220"></a><span class="ln">   220</span>			return 4
<a id="L221"></a><span class="ln">   221</span>		}
<a id="L222"></a><span class="ln">   222</span>		b[0] = byte(size)
<a id="L223"></a><span class="ln">   223</span>		return 1
<a id="L224"></a><span class="ln">   224</span>	}
<a id="L225"></a><span class="ln">   225</span>	
<a id="L226"></a><span class="ln">   226</span>	<span class="comment">// bufWriter encapsulates bufio.Writer but also closes the underlying stream when</span>
<a id="L227"></a><span class="ln">   227</span>	<span class="comment">// Closed.</span>
<a id="L228"></a><span class="ln">   228</span>	type bufWriter struct {
<a id="L229"></a><span class="ln">   229</span>		closer io.Closer
<a id="L230"></a><span class="ln">   230</span>		*bufio.Writer
<a id="L231"></a><span class="ln">   231</span>	}
<a id="L232"></a><span class="ln">   232</span>	
<a id="L233"></a><span class="ln">   233</span>	func (w *bufWriter) Close() error {
<a id="L234"></a><span class="ln">   234</span>		if err := w.Writer.Flush(); err != nil {
<a id="L235"></a><span class="ln">   235</span>			w.closer.Close()
<a id="L236"></a><span class="ln">   236</span>			return err
<a id="L237"></a><span class="ln">   237</span>		}
<a id="L238"></a><span class="ln">   238</span>		return w.closer.Close()
<a id="L239"></a><span class="ln">   239</span>	}
<a id="L240"></a><span class="ln">   240</span>	
<a id="L241"></a><span class="ln">   241</span>	func newWriter(c *conn, recType recType, reqId uint16) *bufWriter {
<a id="L242"></a><span class="ln">   242</span>		s := &amp;streamWriter{c: c, recType: recType, reqId: reqId}
<a id="L243"></a><span class="ln">   243</span>		w := bufio.NewWriterSize(s, maxWrite)
<a id="L244"></a><span class="ln">   244</span>		return &amp;bufWriter{s, w}
<a id="L245"></a><span class="ln">   245</span>	}
<a id="L246"></a><span class="ln">   246</span>	
<a id="L247"></a><span class="ln">   247</span>	<span class="comment">// streamWriter abstracts out the separation of a stream into discrete records.</span>
<a id="L248"></a><span class="ln">   248</span>	<span class="comment">// It only writes maxWrite bytes at a time.</span>
<a id="L249"></a><span class="ln">   249</span>	type streamWriter struct {
<a id="L250"></a><span class="ln">   250</span>		c       *conn
<a id="L251"></a><span class="ln">   251</span>		recType recType
<a id="L252"></a><span class="ln">   252</span>		reqId   uint16
<a id="L253"></a><span class="ln">   253</span>	}
<a id="L254"></a><span class="ln">   254</span>	
<a id="L255"></a><span class="ln">   255</span>	func (w *streamWriter) Write(p []byte) (int, error) {
<a id="L256"></a><span class="ln">   256</span>		nn := 0
<a id="L257"></a><span class="ln">   257</span>		for len(p) &gt; 0 {
<a id="L258"></a><span class="ln">   258</span>			n := len(p)
<a id="L259"></a><span class="ln">   259</span>			if n &gt; maxWrite {
<a id="L260"></a><span class="ln">   260</span>				n = maxWrite
<a id="L261"></a><span class="ln">   261</span>			}
<a id="L262"></a><span class="ln">   262</span>			if err := w.c.writeRecord(w.recType, w.reqId, p[:n]); err != nil {
<a id="L263"></a><span class="ln">   263</span>				return nn, err
<a id="L264"></a><span class="ln">   264</span>			}
<a id="L265"></a><span class="ln">   265</span>			nn += n
<a id="L266"></a><span class="ln">   266</span>			p = p[n:]
<a id="L267"></a><span class="ln">   267</span>		}
<a id="L268"></a><span class="ln">   268</span>		return nn, nil
<a id="L269"></a><span class="ln">   269</span>	}
<a id="L270"></a><span class="ln">   270</span>	
<a id="L271"></a><span class="ln">   271</span>	func (w *streamWriter) Close() error {
<a id="L272"></a><span class="ln">   272</span>		<span class="comment">// send empty record to close the stream</span>
<a id="L273"></a><span class="ln">   273</span>		return w.c.writeRecord(w.recType, w.reqId, nil)
<a id="L274"></a><span class="ln">   274</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

