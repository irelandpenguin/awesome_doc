<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/http/fs.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/http/fs.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// HTTP file system request handler</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package http
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;errors&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;fmt&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;io&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;mime&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;os&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;path&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;path/filepath&#34;
<a id="L17"></a><span class="ln">    17</span>		&#34;strconv&#34;
<a id="L18"></a><span class="ln">    18</span>		&#34;strings&#34;
<a id="L19"></a><span class="ln">    19</span>		&#34;time&#34;
<a id="L20"></a><span class="ln">    20</span>	)
<a id="L21"></a><span class="ln">    21</span>	
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// A Dir implements http.FileSystem using the native file</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// system restricted to a specific directory tree.</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// An empty Dir is treated as &#34;.&#34;.</span>
<a id="L26"></a><span class="ln">    26</span>	type Dir string
<a id="L27"></a><span class="ln">    27</span>	
<a id="L28"></a><span class="ln">    28</span>	func (d Dir) Open(name string) (File, error) {
<a id="L29"></a><span class="ln">    29</span>		if filepath.Separator != &#39;/&#39; &amp;&amp; strings.IndexRune(name, filepath.Separator) &gt;= 0 {
<a id="L30"></a><span class="ln">    30</span>			return nil, errors.New(&#34;http: invalid character in file path&#34;)
<a id="L31"></a><span class="ln">    31</span>		}
<a id="L32"></a><span class="ln">    32</span>		dir := string(d)
<a id="L33"></a><span class="ln">    33</span>		if dir == &#34;&#34; {
<a id="L34"></a><span class="ln">    34</span>			dir = &#34;.&#34;
<a id="L35"></a><span class="ln">    35</span>		}
<a id="L36"></a><span class="ln">    36</span>		f, err := os.Open(filepath.Join(dir, filepath.FromSlash(path.Clean(&#34;/&#34;+name))))
<a id="L37"></a><span class="ln">    37</span>		if err != nil {
<a id="L38"></a><span class="ln">    38</span>			return nil, err
<a id="L39"></a><span class="ln">    39</span>		}
<a id="L40"></a><span class="ln">    40</span>		return f, nil
<a id="L41"></a><span class="ln">    41</span>	}
<a id="L42"></a><span class="ln">    42</span>	
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">// A FileSystem implements access to a collection of named files.</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">// The elements in a file path are separated by slash (&#39;/&#39;, U+002F)</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">// characters, regardless of host operating system convention.</span>
<a id="L46"></a><span class="ln">    46</span>	type FileSystem interface {
<a id="L47"></a><span class="ln">    47</span>		Open(name string) (File, error)
<a id="L48"></a><span class="ln">    48</span>	}
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// A File is returned by a FileSystem&#39;s Open method and can be</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// served by the FileServer implementation.</span>
<a id="L52"></a><span class="ln">    52</span>	type File interface {
<a id="L53"></a><span class="ln">    53</span>		Close() error
<a id="L54"></a><span class="ln">    54</span>		Stat() (os.FileInfo, error)
<a id="L55"></a><span class="ln">    55</span>		Readdir(count int) ([]os.FileInfo, error)
<a id="L56"></a><span class="ln">    56</span>		Read([]byte) (int, error)
<a id="L57"></a><span class="ln">    57</span>		Seek(offset int64, whence int) (int64, error)
<a id="L58"></a><span class="ln">    58</span>	}
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	func dirList(w ResponseWriter, f File) {
<a id="L61"></a><span class="ln">    61</span>		w.Header().Set(&#34;Content-Type&#34;, &#34;text/html; charset=utf-8&#34;)
<a id="L62"></a><span class="ln">    62</span>		fmt.Fprintf(w, &#34;&lt;pre&gt;\n&#34;)
<a id="L63"></a><span class="ln">    63</span>		for {
<a id="L64"></a><span class="ln">    64</span>			dirs, err := f.Readdir(100)
<a id="L65"></a><span class="ln">    65</span>			if err != nil || len(dirs) == 0 {
<a id="L66"></a><span class="ln">    66</span>				break
<a id="L67"></a><span class="ln">    67</span>			}
<a id="L68"></a><span class="ln">    68</span>			for _, d := range dirs {
<a id="L69"></a><span class="ln">    69</span>				name := d.Name()
<a id="L70"></a><span class="ln">    70</span>				if d.IsDir() {
<a id="L71"></a><span class="ln">    71</span>					name += &#34;/&#34;
<a id="L72"></a><span class="ln">    72</span>				}
<a id="L73"></a><span class="ln">    73</span>				<span class="comment">// TODO htmlescape</span>
<a id="L74"></a><span class="ln">    74</span>				fmt.Fprintf(w, &#34;&lt;a href=\&#34;%s\&#34;&gt;%s&lt;/a&gt;\n&#34;, name, name)
<a id="L75"></a><span class="ln">    75</span>			}
<a id="L76"></a><span class="ln">    76</span>		}
<a id="L77"></a><span class="ln">    77</span>		fmt.Fprintf(w, &#34;&lt;/pre&gt;\n&#34;)
<a id="L78"></a><span class="ln">    78</span>	}
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// ServeContent replies to the request using the content in the</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// provided ReadSeeker.  The main benefit of ServeContent over io.Copy</span>
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">// is that it handles Range requests properly, sets the MIME type, and</span>
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">// handles If-Modified-Since requests.</span>
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">//</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">// If the response&#39;s Content-Type header is not set, ServeContent</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// first tries to deduce the type from name&#39;s file extension and,</span>
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">// if that fails, falls back to reading the first block of the content</span>
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// and passing it to DetectContentType.</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">// The name is otherwise unused; in particular it can be empty and is</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// never sent in the response.</span>
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">//</span>
<a id="L92"></a><span class="ln">    92</span>	<span class="comment">// If modtime is not the zero time, ServeContent includes it in a</span>
<a id="L93"></a><span class="ln">    93</span>	<span class="comment">// Last-Modified header in the response.  If the request includes an</span>
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// If-Modified-Since header, ServeContent uses modtime to decide</span>
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">// whether the content needs to be sent at all.</span>
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">//</span>
<a id="L97"></a><span class="ln">    97</span>	<span class="comment">// The content&#39;s Seek method must work: ServeContent uses</span>
<a id="L98"></a><span class="ln">    98</span>	<span class="comment">// a seek to the end of the content to determine its size.</span>
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">//</span>
<a id="L100"></a><span class="ln">   100</span>	<span class="comment">// Note that *os.File implements the io.ReadSeeker interface.</span>
<a id="L101"></a><span class="ln">   101</span>	func ServeContent(w ResponseWriter, req *Request, name string, modtime time.Time, content io.ReadSeeker) {
<a id="L102"></a><span class="ln">   102</span>		size, err := content.Seek(0, os.SEEK_END)
<a id="L103"></a><span class="ln">   103</span>		if err != nil {
<a id="L104"></a><span class="ln">   104</span>			Error(w, &#34;seeker can&#39;t seek&#34;, StatusInternalServerError)
<a id="L105"></a><span class="ln">   105</span>			return
<a id="L106"></a><span class="ln">   106</span>		}
<a id="L107"></a><span class="ln">   107</span>		_, err = content.Seek(0, os.SEEK_SET)
<a id="L108"></a><span class="ln">   108</span>		if err != nil {
<a id="L109"></a><span class="ln">   109</span>			Error(w, &#34;seeker can&#39;t seek&#34;, StatusInternalServerError)
<a id="L110"></a><span class="ln">   110</span>			return
<a id="L111"></a><span class="ln">   111</span>		}
<a id="L112"></a><span class="ln">   112</span>		serveContent(w, req, name, modtime, size, content)
<a id="L113"></a><span class="ln">   113</span>	}
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>	<span class="comment">// if name is empty, filename is unknown. (used for mime type, before sniffing)</span>
<a id="L116"></a><span class="ln">   116</span>	<span class="comment">// if modtime.IsZero(), modtime is unknown.</span>
<a id="L117"></a><span class="ln">   117</span>	<span class="comment">// content must be seeked to the beginning of the file.</span>
<a id="L118"></a><span class="ln">   118</span>	func serveContent(w ResponseWriter, r *Request, name string, modtime time.Time, size int64, content io.ReadSeeker) {
<a id="L119"></a><span class="ln">   119</span>		if checkLastModified(w, r, modtime) {
<a id="L120"></a><span class="ln">   120</span>			return
<a id="L121"></a><span class="ln">   121</span>		}
<a id="L122"></a><span class="ln">   122</span>	
<a id="L123"></a><span class="ln">   123</span>		code := StatusOK
<a id="L124"></a><span class="ln">   124</span>	
<a id="L125"></a><span class="ln">   125</span>		<span class="comment">// If Content-Type isn&#39;t set, use the file&#39;s extension to find it.</span>
<a id="L126"></a><span class="ln">   126</span>		if w.Header().Get(&#34;Content-Type&#34;) == &#34;&#34; {
<a id="L127"></a><span class="ln">   127</span>			ctype := mime.TypeByExtension(filepath.Ext(name))
<a id="L128"></a><span class="ln">   128</span>			if ctype == &#34;&#34; {
<a id="L129"></a><span class="ln">   129</span>				<span class="comment">// read a chunk to decide between utf-8 text and binary</span>
<a id="L130"></a><span class="ln">   130</span>				var buf [1024]byte
<a id="L131"></a><span class="ln">   131</span>				n, _ := io.ReadFull(content, buf[:])
<a id="L132"></a><span class="ln">   132</span>				b := buf[:n]
<a id="L133"></a><span class="ln">   133</span>				ctype = DetectContentType(b)
<a id="L134"></a><span class="ln">   134</span>				_, err := content.Seek(0, os.SEEK_SET) <span class="comment">// rewind to output whole file</span>
<a id="L135"></a><span class="ln">   135</span>				if err != nil {
<a id="L136"></a><span class="ln">   136</span>					Error(w, &#34;seeker can&#39;t seek&#34;, StatusInternalServerError)
<a id="L137"></a><span class="ln">   137</span>					return
<a id="L138"></a><span class="ln">   138</span>				}
<a id="L139"></a><span class="ln">   139</span>			}
<a id="L140"></a><span class="ln">   140</span>			w.Header().Set(&#34;Content-Type&#34;, ctype)
<a id="L141"></a><span class="ln">   141</span>		}
<a id="L142"></a><span class="ln">   142</span>	
<a id="L143"></a><span class="ln">   143</span>		<span class="comment">// handle Content-Range header.</span>
<a id="L144"></a><span class="ln">   144</span>		<span class="comment">// TODO(adg): handle multiple ranges</span>
<a id="L145"></a><span class="ln">   145</span>		sendSize := size
<a id="L146"></a><span class="ln">   146</span>		if size &gt;= 0 {
<a id="L147"></a><span class="ln">   147</span>			ranges, err := parseRange(r.Header.Get(&#34;Range&#34;), size)
<a id="L148"></a><span class="ln">   148</span>			if err == nil &amp;&amp; len(ranges) &gt; 1 {
<a id="L149"></a><span class="ln">   149</span>				err = errors.New(&#34;multiple ranges not supported&#34;)
<a id="L150"></a><span class="ln">   150</span>			}
<a id="L151"></a><span class="ln">   151</span>			if err != nil {
<a id="L152"></a><span class="ln">   152</span>				Error(w, err.Error(), StatusRequestedRangeNotSatisfiable)
<a id="L153"></a><span class="ln">   153</span>				return
<a id="L154"></a><span class="ln">   154</span>			}
<a id="L155"></a><span class="ln">   155</span>			if len(ranges) == 1 {
<a id="L156"></a><span class="ln">   156</span>				ra := ranges[0]
<a id="L157"></a><span class="ln">   157</span>				if _, err := content.Seek(ra.start, os.SEEK_SET); err != nil {
<a id="L158"></a><span class="ln">   158</span>					Error(w, err.Error(), StatusRequestedRangeNotSatisfiable)
<a id="L159"></a><span class="ln">   159</span>					return
<a id="L160"></a><span class="ln">   160</span>				}
<a id="L161"></a><span class="ln">   161</span>				sendSize = ra.length
<a id="L162"></a><span class="ln">   162</span>				code = StatusPartialContent
<a id="L163"></a><span class="ln">   163</span>				w.Header().Set(&#34;Content-Range&#34;, fmt.Sprintf(&#34;bytes %d-%d/%d&#34;, ra.start, ra.start+ra.length-1, size))
<a id="L164"></a><span class="ln">   164</span>			}
<a id="L165"></a><span class="ln">   165</span>	
<a id="L166"></a><span class="ln">   166</span>			w.Header().Set(&#34;Accept-Ranges&#34;, &#34;bytes&#34;)
<a id="L167"></a><span class="ln">   167</span>			if w.Header().Get(&#34;Content-Encoding&#34;) == &#34;&#34; {
<a id="L168"></a><span class="ln">   168</span>				w.Header().Set(&#34;Content-Length&#34;, strconv.FormatInt(sendSize, 10))
<a id="L169"></a><span class="ln">   169</span>			}
<a id="L170"></a><span class="ln">   170</span>		}
<a id="L171"></a><span class="ln">   171</span>	
<a id="L172"></a><span class="ln">   172</span>		w.WriteHeader(code)
<a id="L173"></a><span class="ln">   173</span>	
<a id="L174"></a><span class="ln">   174</span>		if r.Method != &#34;HEAD&#34; {
<a id="L175"></a><span class="ln">   175</span>			if sendSize == -1 {
<a id="L176"></a><span class="ln">   176</span>				io.Copy(w, content)
<a id="L177"></a><span class="ln">   177</span>			} else {
<a id="L178"></a><span class="ln">   178</span>				io.CopyN(w, content, sendSize)
<a id="L179"></a><span class="ln">   179</span>			}
<a id="L180"></a><span class="ln">   180</span>		}
<a id="L181"></a><span class="ln">   181</span>	}
<a id="L182"></a><span class="ln">   182</span>	
<a id="L183"></a><span class="ln">   183</span>	<span class="comment">// modtime is the modification time of the resource to be served, or IsZero().</span>
<a id="L184"></a><span class="ln">   184</span>	<span class="comment">// return value is whether this request is now complete.</span>
<a id="L185"></a><span class="ln">   185</span>	func checkLastModified(w ResponseWriter, r *Request, modtime time.Time) bool {
<a id="L186"></a><span class="ln">   186</span>		if modtime.IsZero() {
<a id="L187"></a><span class="ln">   187</span>			return false
<a id="L188"></a><span class="ln">   188</span>		}
<a id="L189"></a><span class="ln">   189</span>	
<a id="L190"></a><span class="ln">   190</span>		<span class="comment">// The Date-Modified header truncates sub-second precision, so</span>
<a id="L191"></a><span class="ln">   191</span>		<span class="comment">// use mtime &lt; t+1s instead of mtime &lt;= t to check for unmodified.</span>
<a id="L192"></a><span class="ln">   192</span>		if t, err := time.Parse(TimeFormat, r.Header.Get(&#34;If-Modified-Since&#34;)); err == nil &amp;&amp; modtime.Before(t.Add(1*time.Second)) {
<a id="L193"></a><span class="ln">   193</span>			w.WriteHeader(StatusNotModified)
<a id="L194"></a><span class="ln">   194</span>			return true
<a id="L195"></a><span class="ln">   195</span>		}
<a id="L196"></a><span class="ln">   196</span>		w.Header().Set(&#34;Last-Modified&#34;, modtime.UTC().Format(TimeFormat))
<a id="L197"></a><span class="ln">   197</span>		return false
<a id="L198"></a><span class="ln">   198</span>	}
<a id="L199"></a><span class="ln">   199</span>	
<a id="L200"></a><span class="ln">   200</span>	<span class="comment">// name is &#39;/&#39;-separated, not filepath.Separator.</span>
<a id="L201"></a><span class="ln">   201</span>	func serveFile(w ResponseWriter, r *Request, fs FileSystem, name string, redirect bool) {
<a id="L202"></a><span class="ln">   202</span>		const indexPage = &#34;/index.html&#34;
<a id="L203"></a><span class="ln">   203</span>	
<a id="L204"></a><span class="ln">   204</span>		<span class="comment">// redirect .../index.html to .../</span>
<a id="L205"></a><span class="ln">   205</span>		<span class="comment">// can&#39;t use Redirect() because that would make the path absolute,</span>
<a id="L206"></a><span class="ln">   206</span>		<span class="comment">// which would be a problem running under StripPrefix</span>
<a id="L207"></a><span class="ln">   207</span>		if strings.HasSuffix(r.URL.Path, indexPage) {
<a id="L208"></a><span class="ln">   208</span>			localRedirect(w, r, &#34;./&#34;)
<a id="L209"></a><span class="ln">   209</span>			return
<a id="L210"></a><span class="ln">   210</span>		}
<a id="L211"></a><span class="ln">   211</span>	
<a id="L212"></a><span class="ln">   212</span>		f, err := fs.Open(name)
<a id="L213"></a><span class="ln">   213</span>		if err != nil {
<a id="L214"></a><span class="ln">   214</span>			<span class="comment">// TODO expose actual error?</span>
<a id="L215"></a><span class="ln">   215</span>			NotFound(w, r)
<a id="L216"></a><span class="ln">   216</span>			return
<a id="L217"></a><span class="ln">   217</span>		}
<a id="L218"></a><span class="ln">   218</span>		defer f.Close()
<a id="L219"></a><span class="ln">   219</span>	
<a id="L220"></a><span class="ln">   220</span>		d, err1 := f.Stat()
<a id="L221"></a><span class="ln">   221</span>		if err1 != nil {
<a id="L222"></a><span class="ln">   222</span>			<span class="comment">// TODO expose actual error?</span>
<a id="L223"></a><span class="ln">   223</span>			NotFound(w, r)
<a id="L224"></a><span class="ln">   224</span>			return
<a id="L225"></a><span class="ln">   225</span>		}
<a id="L226"></a><span class="ln">   226</span>	
<a id="L227"></a><span class="ln">   227</span>		if redirect {
<a id="L228"></a><span class="ln">   228</span>			<span class="comment">// redirect to canonical path: / at end of directory url</span>
<a id="L229"></a><span class="ln">   229</span>			<span class="comment">// r.URL.Path always begins with /</span>
<a id="L230"></a><span class="ln">   230</span>			url := r.URL.Path
<a id="L231"></a><span class="ln">   231</span>			if d.IsDir() {
<a id="L232"></a><span class="ln">   232</span>				if url[len(url)-1] != &#39;/&#39; {
<a id="L233"></a><span class="ln">   233</span>					localRedirect(w, r, path.Base(url)+&#34;/&#34;)
<a id="L234"></a><span class="ln">   234</span>					return
<a id="L235"></a><span class="ln">   235</span>				}
<a id="L236"></a><span class="ln">   236</span>			} else {
<a id="L237"></a><span class="ln">   237</span>				if url[len(url)-1] == &#39;/&#39; {
<a id="L238"></a><span class="ln">   238</span>					localRedirect(w, r, &#34;../&#34;+path.Base(url))
<a id="L239"></a><span class="ln">   239</span>					return
<a id="L240"></a><span class="ln">   240</span>				}
<a id="L241"></a><span class="ln">   241</span>			}
<a id="L242"></a><span class="ln">   242</span>		}
<a id="L243"></a><span class="ln">   243</span>	
<a id="L244"></a><span class="ln">   244</span>		<span class="comment">// use contents of index.html for directory, if present</span>
<a id="L245"></a><span class="ln">   245</span>		if d.IsDir() {
<a id="L246"></a><span class="ln">   246</span>			if checkLastModified(w, r, d.ModTime()) {
<a id="L247"></a><span class="ln">   247</span>				return
<a id="L248"></a><span class="ln">   248</span>			}
<a id="L249"></a><span class="ln">   249</span>			index := name + indexPage
<a id="L250"></a><span class="ln">   250</span>			ff, err := fs.Open(index)
<a id="L251"></a><span class="ln">   251</span>			if err == nil {
<a id="L252"></a><span class="ln">   252</span>				defer ff.Close()
<a id="L253"></a><span class="ln">   253</span>				dd, err := ff.Stat()
<a id="L254"></a><span class="ln">   254</span>				if err == nil {
<a id="L255"></a><span class="ln">   255</span>					name = index
<a id="L256"></a><span class="ln">   256</span>					d = dd
<a id="L257"></a><span class="ln">   257</span>					f = ff
<a id="L258"></a><span class="ln">   258</span>				}
<a id="L259"></a><span class="ln">   259</span>			}
<a id="L260"></a><span class="ln">   260</span>		}
<a id="L261"></a><span class="ln">   261</span>	
<a id="L262"></a><span class="ln">   262</span>		if d.IsDir() {
<a id="L263"></a><span class="ln">   263</span>			dirList(w, f)
<a id="L264"></a><span class="ln">   264</span>			return
<a id="L265"></a><span class="ln">   265</span>		}
<a id="L266"></a><span class="ln">   266</span>	
<a id="L267"></a><span class="ln">   267</span>		serveContent(w, r, d.Name(), d.ModTime(), d.Size(), f)
<a id="L268"></a><span class="ln">   268</span>	}
<a id="L269"></a><span class="ln">   269</span>	
<a id="L270"></a><span class="ln">   270</span>	<span class="comment">// localRedirect gives a Moved Permanently response.</span>
<a id="L271"></a><span class="ln">   271</span>	<span class="comment">// It does not convert relative paths to absolute paths like Redirect does.</span>
<a id="L272"></a><span class="ln">   272</span>	func localRedirect(w ResponseWriter, r *Request, newPath string) {
<a id="L273"></a><span class="ln">   273</span>		if q := r.URL.RawQuery; q != &#34;&#34; {
<a id="L274"></a><span class="ln">   274</span>			newPath += &#34;?&#34; + q
<a id="L275"></a><span class="ln">   275</span>		}
<a id="L276"></a><span class="ln">   276</span>		w.Header().Set(&#34;Location&#34;, newPath)
<a id="L277"></a><span class="ln">   277</span>		w.WriteHeader(StatusMovedPermanently)
<a id="L278"></a><span class="ln">   278</span>	}
<a id="L279"></a><span class="ln">   279</span>	
<a id="L280"></a><span class="ln">   280</span>	<span class="comment">// ServeFile replies to the request with the contents of the named file or directory.</span>
<a id="L281"></a><span class="ln">   281</span>	func ServeFile(w ResponseWriter, r *Request, name string) {
<a id="L282"></a><span class="ln">   282</span>		dir, file := filepath.Split(name)
<a id="L283"></a><span class="ln">   283</span>		serveFile(w, r, Dir(dir), file, false)
<a id="L284"></a><span class="ln">   284</span>	}
<a id="L285"></a><span class="ln">   285</span>	
<a id="L286"></a><span class="ln">   286</span>	type fileHandler struct {
<a id="L287"></a><span class="ln">   287</span>		root FileSystem
<a id="L288"></a><span class="ln">   288</span>	}
<a id="L289"></a><span class="ln">   289</span>	
<a id="L290"></a><span class="ln">   290</span>	<span class="comment">// FileServer returns a handler that serves HTTP requests</span>
<a id="L291"></a><span class="ln">   291</span>	<span class="comment">// with the contents of the file system rooted at root.</span>
<a id="L292"></a><span class="ln">   292</span>	<span class="comment">//</span>
<a id="L293"></a><span class="ln">   293</span>	<span class="comment">// To use the operating system&#39;s file system implementation,</span>
<a id="L294"></a><span class="ln">   294</span>	<span class="comment">// use http.Dir:</span>
<a id="L295"></a><span class="ln">   295</span>	<span class="comment">//</span>
<a id="L296"></a><span class="ln">   296</span>	<span class="comment">//     http.Handle(&#34;/&#34;, http.FileServer(http.Dir(&#34;/tmp&#34;)))</span>
<a id="L297"></a><span class="ln">   297</span>	func FileServer(root FileSystem) Handler {
<a id="L298"></a><span class="ln">   298</span>		return &amp;fileHandler{root}
<a id="L299"></a><span class="ln">   299</span>	}
<a id="L300"></a><span class="ln">   300</span>	
<a id="L301"></a><span class="ln">   301</span>	func (f *fileHandler) ServeHTTP(w ResponseWriter, r *Request) {
<a id="L302"></a><span class="ln">   302</span>		upath := r.URL.Path
<a id="L303"></a><span class="ln">   303</span>		if !strings.HasPrefix(upath, &#34;/&#34;) {
<a id="L304"></a><span class="ln">   304</span>			upath = &#34;/&#34; + upath
<a id="L305"></a><span class="ln">   305</span>			r.URL.Path = upath
<a id="L306"></a><span class="ln">   306</span>		}
<a id="L307"></a><span class="ln">   307</span>		serveFile(w, r, f.root, path.Clean(upath), true)
<a id="L308"></a><span class="ln">   308</span>	}
<a id="L309"></a><span class="ln">   309</span>	
<a id="L310"></a><span class="ln">   310</span>	<span class="comment">// httpRange specifies the byte range to be sent to the client.</span>
<a id="L311"></a><span class="ln">   311</span>	type httpRange struct {
<a id="L312"></a><span class="ln">   312</span>		start, length int64
<a id="L313"></a><span class="ln">   313</span>	}
<a id="L314"></a><span class="ln">   314</span>	
<a id="L315"></a><span class="ln">   315</span>	<span class="comment">// parseRange parses a Range header string as per RFC 2616.</span>
<a id="L316"></a><span class="ln">   316</span>	func parseRange(s string, size int64) ([]httpRange, error) {
<a id="L317"></a><span class="ln">   317</span>		if s == &#34;&#34; {
<a id="L318"></a><span class="ln">   318</span>			return nil, nil <span class="comment">// header not present</span>
<a id="L319"></a><span class="ln">   319</span>		}
<a id="L320"></a><span class="ln">   320</span>		const b = &#34;bytes=&#34;
<a id="L321"></a><span class="ln">   321</span>		if !strings.HasPrefix(s, b) {
<a id="L322"></a><span class="ln">   322</span>			return nil, errors.New(&#34;invalid range&#34;)
<a id="L323"></a><span class="ln">   323</span>		}
<a id="L324"></a><span class="ln">   324</span>		var ranges []httpRange
<a id="L325"></a><span class="ln">   325</span>		for _, ra := range strings.Split(s[len(b):], &#34;,&#34;) {
<a id="L326"></a><span class="ln">   326</span>			i := strings.Index(ra, &#34;-&#34;)
<a id="L327"></a><span class="ln">   327</span>			if i &lt; 0 {
<a id="L328"></a><span class="ln">   328</span>				return nil, errors.New(&#34;invalid range&#34;)
<a id="L329"></a><span class="ln">   329</span>			}
<a id="L330"></a><span class="ln">   330</span>			start, end := ra[:i], ra[i+1:]
<a id="L331"></a><span class="ln">   331</span>			var r httpRange
<a id="L332"></a><span class="ln">   332</span>			if start == &#34;&#34; {
<a id="L333"></a><span class="ln">   333</span>				<span class="comment">// If no start is specified, end specifies the</span>
<a id="L334"></a><span class="ln">   334</span>				<span class="comment">// range start relative to the end of the file.</span>
<a id="L335"></a><span class="ln">   335</span>				i, err := strconv.ParseInt(end, 10, 64)
<a id="L336"></a><span class="ln">   336</span>				if err != nil {
<a id="L337"></a><span class="ln">   337</span>					return nil, errors.New(&#34;invalid range&#34;)
<a id="L338"></a><span class="ln">   338</span>				}
<a id="L339"></a><span class="ln">   339</span>				if i &gt; size {
<a id="L340"></a><span class="ln">   340</span>					i = size
<a id="L341"></a><span class="ln">   341</span>				}
<a id="L342"></a><span class="ln">   342</span>				r.start = size - i
<a id="L343"></a><span class="ln">   343</span>				r.length = size - r.start
<a id="L344"></a><span class="ln">   344</span>			} else {
<a id="L345"></a><span class="ln">   345</span>				i, err := strconv.ParseInt(start, 10, 64)
<a id="L346"></a><span class="ln">   346</span>				if err != nil || i &gt; size || i &lt; 0 {
<a id="L347"></a><span class="ln">   347</span>					return nil, errors.New(&#34;invalid range&#34;)
<a id="L348"></a><span class="ln">   348</span>				}
<a id="L349"></a><span class="ln">   349</span>				r.start = i
<a id="L350"></a><span class="ln">   350</span>				if end == &#34;&#34; {
<a id="L351"></a><span class="ln">   351</span>					<span class="comment">// If no end is specified, range extends to end of the file.</span>
<a id="L352"></a><span class="ln">   352</span>					r.length = size - r.start
<a id="L353"></a><span class="ln">   353</span>				} else {
<a id="L354"></a><span class="ln">   354</span>					i, err := strconv.ParseInt(end, 10, 64)
<a id="L355"></a><span class="ln">   355</span>					if err != nil || r.start &gt; i {
<a id="L356"></a><span class="ln">   356</span>						return nil, errors.New(&#34;invalid range&#34;)
<a id="L357"></a><span class="ln">   357</span>					}
<a id="L358"></a><span class="ln">   358</span>					if i &gt;= size {
<a id="L359"></a><span class="ln">   359</span>						i = size - 1
<a id="L360"></a><span class="ln">   360</span>					}
<a id="L361"></a><span class="ln">   361</span>					r.length = i - r.start + 1
<a id="L362"></a><span class="ln">   362</span>				}
<a id="L363"></a><span class="ln">   363</span>			}
<a id="L364"></a><span class="ln">   364</span>			ranges = append(ranges, r)
<a id="L365"></a><span class="ln">   365</span>		}
<a id="L366"></a><span class="ln">   366</span>		return ranges, nil
<a id="L367"></a><span class="ln">   367</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

