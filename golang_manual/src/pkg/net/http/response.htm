<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/http/response.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/http/response.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// HTTP Response reading and parsing.</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package http
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;bufio&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;errors&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;io&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;net/textproto&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;net/url&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;strconv&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;strings&#34;
<a id="L17"></a><span class="ln">    17</span>	)
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	var respExcludeHeader = map[string]bool{
<a id="L20"></a><span class="ln">    20</span>		&#34;Content-Length&#34;:    true,
<a id="L21"></a><span class="ln">    21</span>		&#34;Transfer-Encoding&#34;: true,
<a id="L22"></a><span class="ln">    22</span>		&#34;Trailer&#34;:           true,
<a id="L23"></a><span class="ln">    23</span>	}
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// Response represents the response from an HTTP request.</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">//</span>
<a id="L27"></a><span class="ln">    27</span>	type Response struct {
<a id="L28"></a><span class="ln">    28</span>		Status     string <span class="comment">// e.g. &#34;200 OK&#34;</span>
<a id="L29"></a><span class="ln">    29</span>		StatusCode int    <span class="comment">// e.g. 200</span>
<a id="L30"></a><span class="ln">    30</span>		Proto      string <span class="comment">// e.g. &#34;HTTP/1.0&#34;</span>
<a id="L31"></a><span class="ln">    31</span>		ProtoMajor int    <span class="comment">// e.g. 1</span>
<a id="L32"></a><span class="ln">    32</span>		ProtoMinor int    <span class="comment">// e.g. 0</span>
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>		<span class="comment">// Header maps header keys to values.  If the response had multiple</span>
<a id="L35"></a><span class="ln">    35</span>		<span class="comment">// headers with the same key, they will be concatenated, with comma</span>
<a id="L36"></a><span class="ln">    36</span>		<span class="comment">// delimiters.  (Section 4.2 of RFC 2616 requires that multiple headers</span>
<a id="L37"></a><span class="ln">    37</span>		<span class="comment">// be semantically equivalent to a comma-delimited sequence.) Values</span>
<a id="L38"></a><span class="ln">    38</span>		<span class="comment">// duplicated by other fields in this struct (e.g., ContentLength) are</span>
<a id="L39"></a><span class="ln">    39</span>		<span class="comment">// omitted from Header.</span>
<a id="L40"></a><span class="ln">    40</span>		<span class="comment">//</span>
<a id="L41"></a><span class="ln">    41</span>		<span class="comment">// Keys in the map are canonicalized (see CanonicalHeaderKey).</span>
<a id="L42"></a><span class="ln">    42</span>		Header Header
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>		<span class="comment">// Body represents the response body.</span>
<a id="L45"></a><span class="ln">    45</span>		<span class="comment">//</span>
<a id="L46"></a><span class="ln">    46</span>		<span class="comment">// The http Client and Transport guarantee that Body is always</span>
<a id="L47"></a><span class="ln">    47</span>		<span class="comment">// non-nil, even on responses without a body or responses with</span>
<a id="L48"></a><span class="ln">    48</span>		<span class="comment">// a zero-lengthed body.</span>
<a id="L49"></a><span class="ln">    49</span>		Body io.ReadCloser
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>		<span class="comment">// ContentLength records the length of the associated content.  The</span>
<a id="L52"></a><span class="ln">    52</span>		<span class="comment">// value -1 indicates that the length is unknown.  Unless RequestMethod</span>
<a id="L53"></a><span class="ln">    53</span>		<span class="comment">// is &#34;HEAD&#34;, values &gt;= 0 indicate that the given number of bytes may</span>
<a id="L54"></a><span class="ln">    54</span>		<span class="comment">// be read from Body.</span>
<a id="L55"></a><span class="ln">    55</span>		ContentLength int64
<a id="L56"></a><span class="ln">    56</span>	
<a id="L57"></a><span class="ln">    57</span>		<span class="comment">// Contains transfer encodings from outer-most to inner-most. Value is</span>
<a id="L58"></a><span class="ln">    58</span>		<span class="comment">// nil, means that &#34;identity&#34; encoding is used.</span>
<a id="L59"></a><span class="ln">    59</span>		TransferEncoding []string
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>		<span class="comment">// Close records whether the header directed that the connection be</span>
<a id="L62"></a><span class="ln">    62</span>		<span class="comment">// closed after reading Body.  The value is advice for clients: neither</span>
<a id="L63"></a><span class="ln">    63</span>		<span class="comment">// ReadResponse nor Response.Write ever closes a connection.</span>
<a id="L64"></a><span class="ln">    64</span>		Close bool
<a id="L65"></a><span class="ln">    65</span>	
<a id="L66"></a><span class="ln">    66</span>		<span class="comment">// Trailer maps trailer keys to values, in the same</span>
<a id="L67"></a><span class="ln">    67</span>		<span class="comment">// format as the header.</span>
<a id="L68"></a><span class="ln">    68</span>		Trailer Header
<a id="L69"></a><span class="ln">    69</span>	
<a id="L70"></a><span class="ln">    70</span>		<span class="comment">// The Request that was sent to obtain this Response.</span>
<a id="L71"></a><span class="ln">    71</span>		<span class="comment">// Request&#39;s Body is nil (having already been consumed).</span>
<a id="L72"></a><span class="ln">    72</span>		<span class="comment">// This is only populated for Client requests.</span>
<a id="L73"></a><span class="ln">    73</span>		Request *Request
<a id="L74"></a><span class="ln">    74</span>	}
<a id="L75"></a><span class="ln">    75</span>	
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">// Cookies parses and returns the cookies set in the Set-Cookie headers.</span>
<a id="L77"></a><span class="ln">    77</span>	func (r *Response) Cookies() []*Cookie {
<a id="L78"></a><span class="ln">    78</span>		return readSetCookies(r.Header)
<a id="L79"></a><span class="ln">    79</span>	}
<a id="L80"></a><span class="ln">    80</span>	
<a id="L81"></a><span class="ln">    81</span>	var ErrNoLocation = errors.New(&#34;http: no Location header in response&#34;)
<a id="L82"></a><span class="ln">    82</span>	
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">// Location returns the URL of the response&#39;s &#34;Location&#34; header,</span>
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">// if present.  Relative redirects are resolved relative to</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">// the Response&#39;s Request.  ErrNoLocation is returned if no</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// Location header is present.</span>
<a id="L87"></a><span class="ln">    87</span>	func (r *Response) Location() (*url.URL, error) {
<a id="L88"></a><span class="ln">    88</span>		lv := r.Header.Get(&#34;Location&#34;)
<a id="L89"></a><span class="ln">    89</span>		if lv == &#34;&#34; {
<a id="L90"></a><span class="ln">    90</span>			return nil, ErrNoLocation
<a id="L91"></a><span class="ln">    91</span>		}
<a id="L92"></a><span class="ln">    92</span>		if r.Request != nil &amp;&amp; r.Request.URL != nil {
<a id="L93"></a><span class="ln">    93</span>			return r.Request.URL.Parse(lv)
<a id="L94"></a><span class="ln">    94</span>		}
<a id="L95"></a><span class="ln">    95</span>		return url.Parse(lv)
<a id="L96"></a><span class="ln">    96</span>	}
<a id="L97"></a><span class="ln">    97</span>	
<a id="L98"></a><span class="ln">    98</span>	<span class="comment">// ReadResponse reads and returns an HTTP response from r.  The</span>
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">// req parameter specifies the Request that corresponds to</span>
<a id="L100"></a><span class="ln">   100</span>	<span class="comment">// this Response.  Clients must call resp.Body.Close when finished</span>
<a id="L101"></a><span class="ln">   101</span>	<span class="comment">// reading resp.Body.  After that call, clients can inspect</span>
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">// resp.Trailer to find key/value pairs included in the response</span>
<a id="L103"></a><span class="ln">   103</span>	<span class="comment">// trailer.</span>
<a id="L104"></a><span class="ln">   104</span>	func ReadResponse(r *bufio.Reader, req *Request) (resp *Response, err error) {
<a id="L105"></a><span class="ln">   105</span>	
<a id="L106"></a><span class="ln">   106</span>		tp := textproto.NewReader(r)
<a id="L107"></a><span class="ln">   107</span>		resp = new(Response)
<a id="L108"></a><span class="ln">   108</span>	
<a id="L109"></a><span class="ln">   109</span>		resp.Request = req
<a id="L110"></a><span class="ln">   110</span>		resp.Request.Method = strings.ToUpper(resp.Request.Method)
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>		<span class="comment">// Parse the first line of the response.</span>
<a id="L113"></a><span class="ln">   113</span>		line, err := tp.ReadLine()
<a id="L114"></a><span class="ln">   114</span>		if err != nil {
<a id="L115"></a><span class="ln">   115</span>			if err == io.EOF {
<a id="L116"></a><span class="ln">   116</span>				err = io.ErrUnexpectedEOF
<a id="L117"></a><span class="ln">   117</span>			}
<a id="L118"></a><span class="ln">   118</span>			return nil, err
<a id="L119"></a><span class="ln">   119</span>		}
<a id="L120"></a><span class="ln">   120</span>		f := strings.SplitN(line, &#34; &#34;, 3)
<a id="L121"></a><span class="ln">   121</span>		if len(f) &lt; 2 {
<a id="L122"></a><span class="ln">   122</span>			return nil, &amp;badStringError{&#34;malformed HTTP response&#34;, line}
<a id="L123"></a><span class="ln">   123</span>		}
<a id="L124"></a><span class="ln">   124</span>		reasonPhrase := &#34;&#34;
<a id="L125"></a><span class="ln">   125</span>		if len(f) &gt; 2 {
<a id="L126"></a><span class="ln">   126</span>			reasonPhrase = f[2]
<a id="L127"></a><span class="ln">   127</span>		}
<a id="L128"></a><span class="ln">   128</span>		resp.Status = f[1] + &#34; &#34; + reasonPhrase
<a id="L129"></a><span class="ln">   129</span>		resp.StatusCode, err = strconv.Atoi(f[1])
<a id="L130"></a><span class="ln">   130</span>		if err != nil {
<a id="L131"></a><span class="ln">   131</span>			return nil, &amp;badStringError{&#34;malformed HTTP status code&#34;, f[1]}
<a id="L132"></a><span class="ln">   132</span>		}
<a id="L133"></a><span class="ln">   133</span>	
<a id="L134"></a><span class="ln">   134</span>		resp.Proto = f[0]
<a id="L135"></a><span class="ln">   135</span>		var ok bool
<a id="L136"></a><span class="ln">   136</span>		if resp.ProtoMajor, resp.ProtoMinor, ok = ParseHTTPVersion(resp.Proto); !ok {
<a id="L137"></a><span class="ln">   137</span>			return nil, &amp;badStringError{&#34;malformed HTTP version&#34;, resp.Proto}
<a id="L138"></a><span class="ln">   138</span>		}
<a id="L139"></a><span class="ln">   139</span>	
<a id="L140"></a><span class="ln">   140</span>		<span class="comment">// Parse the response headers.</span>
<a id="L141"></a><span class="ln">   141</span>		mimeHeader, err := tp.ReadMIMEHeader()
<a id="L142"></a><span class="ln">   142</span>		if err != nil {
<a id="L143"></a><span class="ln">   143</span>			return nil, err
<a id="L144"></a><span class="ln">   144</span>		}
<a id="L145"></a><span class="ln">   145</span>		resp.Header = Header(mimeHeader)
<a id="L146"></a><span class="ln">   146</span>	
<a id="L147"></a><span class="ln">   147</span>		fixPragmaCacheControl(resp.Header)
<a id="L148"></a><span class="ln">   148</span>	
<a id="L149"></a><span class="ln">   149</span>		err = readTransfer(resp, r)
<a id="L150"></a><span class="ln">   150</span>		if err != nil {
<a id="L151"></a><span class="ln">   151</span>			return nil, err
<a id="L152"></a><span class="ln">   152</span>		}
<a id="L153"></a><span class="ln">   153</span>	
<a id="L154"></a><span class="ln">   154</span>		return resp, nil
<a id="L155"></a><span class="ln">   155</span>	}
<a id="L156"></a><span class="ln">   156</span>	
<a id="L157"></a><span class="ln">   157</span>	<span class="comment">// RFC2616: Should treat</span>
<a id="L158"></a><span class="ln">   158</span>	<span class="comment">//	Pragma: no-cache</span>
<a id="L159"></a><span class="ln">   159</span>	<span class="comment">// like</span>
<a id="L160"></a><span class="ln">   160</span>	<span class="comment">//	Cache-Control: no-cache</span>
<a id="L161"></a><span class="ln">   161</span>	func fixPragmaCacheControl(header Header) {
<a id="L162"></a><span class="ln">   162</span>		if hp, ok := header[&#34;Pragma&#34;]; ok &amp;&amp; len(hp) &gt; 0 &amp;&amp; hp[0] == &#34;no-cache&#34; {
<a id="L163"></a><span class="ln">   163</span>			if _, presentcc := header[&#34;Cache-Control&#34;]; !presentcc {
<a id="L164"></a><span class="ln">   164</span>				header[&#34;Cache-Control&#34;] = []string{&#34;no-cache&#34;}
<a id="L165"></a><span class="ln">   165</span>			}
<a id="L166"></a><span class="ln">   166</span>		}
<a id="L167"></a><span class="ln">   167</span>	}
<a id="L168"></a><span class="ln">   168</span>	
<a id="L169"></a><span class="ln">   169</span>	<span class="comment">// ProtoAtLeast returns whether the HTTP protocol used</span>
<a id="L170"></a><span class="ln">   170</span>	<span class="comment">// in the response is at least major.minor.</span>
<a id="L171"></a><span class="ln">   171</span>	func (r *Response) ProtoAtLeast(major, minor int) bool {
<a id="L172"></a><span class="ln">   172</span>		return r.ProtoMajor &gt; major ||
<a id="L173"></a><span class="ln">   173</span>			r.ProtoMajor == major &amp;&amp; r.ProtoMinor &gt;= minor
<a id="L174"></a><span class="ln">   174</span>	}
<a id="L175"></a><span class="ln">   175</span>	
<a id="L176"></a><span class="ln">   176</span>	<span class="comment">// Writes the response (header, body and trailer) in wire format. This method</span>
<a id="L177"></a><span class="ln">   177</span>	<span class="comment">// consults the following fields of the response:</span>
<a id="L178"></a><span class="ln">   178</span>	<span class="comment">//</span>
<a id="L179"></a><span class="ln">   179</span>	<span class="comment">//  StatusCode</span>
<a id="L180"></a><span class="ln">   180</span>	<span class="comment">//  ProtoMajor</span>
<a id="L181"></a><span class="ln">   181</span>	<span class="comment">//  ProtoMinor</span>
<a id="L182"></a><span class="ln">   182</span>	<span class="comment">//  RequestMethod</span>
<a id="L183"></a><span class="ln">   183</span>	<span class="comment">//  TransferEncoding</span>
<a id="L184"></a><span class="ln">   184</span>	<span class="comment">//  Trailer</span>
<a id="L185"></a><span class="ln">   185</span>	<span class="comment">//  Body</span>
<a id="L186"></a><span class="ln">   186</span>	<span class="comment">//  ContentLength</span>
<a id="L187"></a><span class="ln">   187</span>	<span class="comment">//  Header, values for non-canonical keys will have unpredictable behavior</span>
<a id="L188"></a><span class="ln">   188</span>	<span class="comment">//</span>
<a id="L189"></a><span class="ln">   189</span>	func (r *Response) Write(w io.Writer) error {
<a id="L190"></a><span class="ln">   190</span>	
<a id="L191"></a><span class="ln">   191</span>		<span class="comment">// RequestMethod should be upper-case</span>
<a id="L192"></a><span class="ln">   192</span>		if r.Request != nil {
<a id="L193"></a><span class="ln">   193</span>			r.Request.Method = strings.ToUpper(r.Request.Method)
<a id="L194"></a><span class="ln">   194</span>		}
<a id="L195"></a><span class="ln">   195</span>	
<a id="L196"></a><span class="ln">   196</span>		<span class="comment">// Status line</span>
<a id="L197"></a><span class="ln">   197</span>		text := r.Status
<a id="L198"></a><span class="ln">   198</span>		if text == &#34;&#34; {
<a id="L199"></a><span class="ln">   199</span>			var ok bool
<a id="L200"></a><span class="ln">   200</span>			text, ok = statusText[r.StatusCode]
<a id="L201"></a><span class="ln">   201</span>			if !ok {
<a id="L202"></a><span class="ln">   202</span>				text = &#34;status code &#34; + strconv.Itoa(r.StatusCode)
<a id="L203"></a><span class="ln">   203</span>			}
<a id="L204"></a><span class="ln">   204</span>		}
<a id="L205"></a><span class="ln">   205</span>		io.WriteString(w, &#34;HTTP/&#34;+strconv.Itoa(r.ProtoMajor)+&#34;.&#34;)
<a id="L206"></a><span class="ln">   206</span>		io.WriteString(w, strconv.Itoa(r.ProtoMinor)+&#34; &#34;)
<a id="L207"></a><span class="ln">   207</span>		io.WriteString(w, strconv.Itoa(r.StatusCode)+&#34; &#34;+text+&#34;\r\n&#34;)
<a id="L208"></a><span class="ln">   208</span>	
<a id="L209"></a><span class="ln">   209</span>		<span class="comment">// Process Body,ContentLength,Close,Trailer</span>
<a id="L210"></a><span class="ln">   210</span>		tw, err := newTransferWriter(r)
<a id="L211"></a><span class="ln">   211</span>		if err != nil {
<a id="L212"></a><span class="ln">   212</span>			return err
<a id="L213"></a><span class="ln">   213</span>		}
<a id="L214"></a><span class="ln">   214</span>		err = tw.WriteHeader(w)
<a id="L215"></a><span class="ln">   215</span>		if err != nil {
<a id="L216"></a><span class="ln">   216</span>			return err
<a id="L217"></a><span class="ln">   217</span>		}
<a id="L218"></a><span class="ln">   218</span>	
<a id="L219"></a><span class="ln">   219</span>		<span class="comment">// Rest of header</span>
<a id="L220"></a><span class="ln">   220</span>		err = r.Header.WriteSubset(w, respExcludeHeader)
<a id="L221"></a><span class="ln">   221</span>		if err != nil {
<a id="L222"></a><span class="ln">   222</span>			return err
<a id="L223"></a><span class="ln">   223</span>		}
<a id="L224"></a><span class="ln">   224</span>	
<a id="L225"></a><span class="ln">   225</span>		<span class="comment">// End-of-header</span>
<a id="L226"></a><span class="ln">   226</span>		io.WriteString(w, &#34;\r\n&#34;)
<a id="L227"></a><span class="ln">   227</span>	
<a id="L228"></a><span class="ln">   228</span>		<span class="comment">// Write body and trailer</span>
<a id="L229"></a><span class="ln">   229</span>		err = tw.WriteBody(w)
<a id="L230"></a><span class="ln">   230</span>		if err != nil {
<a id="L231"></a><span class="ln">   231</span>			return err
<a id="L232"></a><span class="ln">   232</span>		}
<a id="L233"></a><span class="ln">   233</span>	
<a id="L234"></a><span class="ln">   234</span>		<span class="comment">// Success</span>
<a id="L235"></a><span class="ln">   235</span>		return nil
<a id="L236"></a><span class="ln">   236</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

