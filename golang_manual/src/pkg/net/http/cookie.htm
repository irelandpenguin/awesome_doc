<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/http/cookie.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/http/cookie.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package http
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bytes&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;fmt&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;strconv&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;strings&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;time&#34;
<a id="L13"></a><span class="ln">    13</span>	)
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// This implementation is done according to RFC 6265:</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">//</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">//    http://tools.ietf.org/html/rfc6265</span>
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// HTTP response or the Cookie header of an HTTP request.</span>
<a id="L21"></a><span class="ln">    21</span>	type Cookie struct {
<a id="L22"></a><span class="ln">    22</span>		Name       string
<a id="L23"></a><span class="ln">    23</span>		Value      string
<a id="L24"></a><span class="ln">    24</span>		Path       string
<a id="L25"></a><span class="ln">    25</span>		Domain     string
<a id="L26"></a><span class="ln">    26</span>		Expires    time.Time
<a id="L27"></a><span class="ln">    27</span>		RawExpires string
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>		<span class="comment">// MaxAge=0 means no &#39;Max-Age&#39; attribute specified. </span>
<a id="L30"></a><span class="ln">    30</span>		<span class="comment">// MaxAge&lt;0 means delete cookie now, equivalently &#39;Max-Age: 0&#39;</span>
<a id="L31"></a><span class="ln">    31</span>		<span class="comment">// MaxAge&gt;0 means Max-Age attribute present and given in seconds</span>
<a id="L32"></a><span class="ln">    32</span>		MaxAge   int
<a id="L33"></a><span class="ln">    33</span>		Secure   bool
<a id="L34"></a><span class="ln">    34</span>		HttpOnly bool
<a id="L35"></a><span class="ln">    35</span>		Raw      string
<a id="L36"></a><span class="ln">    36</span>		Unparsed []string <span class="comment">// Raw text of unparsed attribute-value pairs</span>
<a id="L37"></a><span class="ln">    37</span>	}
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// readSetCookies parses all &#34;Set-Cookie&#34; values from</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// the header h and returns the successfully parsed Cookies.</span>
<a id="L41"></a><span class="ln">    41</span>	func readSetCookies(h Header) []*Cookie {
<a id="L42"></a><span class="ln">    42</span>		cookies := []*Cookie{}
<a id="L43"></a><span class="ln">    43</span>		for _, line := range h[&#34;Set-Cookie&#34;] {
<a id="L44"></a><span class="ln">    44</span>			parts := strings.Split(strings.TrimSpace(line), &#34;;&#34;)
<a id="L45"></a><span class="ln">    45</span>			if len(parts) == 1 &amp;&amp; parts[0] == &#34;&#34; {
<a id="L46"></a><span class="ln">    46</span>				continue
<a id="L47"></a><span class="ln">    47</span>			}
<a id="L48"></a><span class="ln">    48</span>			parts[0] = strings.TrimSpace(parts[0])
<a id="L49"></a><span class="ln">    49</span>			j := strings.Index(parts[0], &#34;=&#34;)
<a id="L50"></a><span class="ln">    50</span>			if j &lt; 0 {
<a id="L51"></a><span class="ln">    51</span>				continue
<a id="L52"></a><span class="ln">    52</span>			}
<a id="L53"></a><span class="ln">    53</span>			name, value := parts[0][:j], parts[0][j+1:]
<a id="L54"></a><span class="ln">    54</span>			if !isCookieNameValid(name) {
<a id="L55"></a><span class="ln">    55</span>				continue
<a id="L56"></a><span class="ln">    56</span>			}
<a id="L57"></a><span class="ln">    57</span>			value, success := parseCookieValue(value)
<a id="L58"></a><span class="ln">    58</span>			if !success {
<a id="L59"></a><span class="ln">    59</span>				continue
<a id="L60"></a><span class="ln">    60</span>			}
<a id="L61"></a><span class="ln">    61</span>			c := &amp;Cookie{
<a id="L62"></a><span class="ln">    62</span>				Name:  name,
<a id="L63"></a><span class="ln">    63</span>				Value: value,
<a id="L64"></a><span class="ln">    64</span>				Raw:   line,
<a id="L65"></a><span class="ln">    65</span>			}
<a id="L66"></a><span class="ln">    66</span>			for i := 1; i &lt; len(parts); i++ {
<a id="L67"></a><span class="ln">    67</span>				parts[i] = strings.TrimSpace(parts[i])
<a id="L68"></a><span class="ln">    68</span>				if len(parts[i]) == 0 {
<a id="L69"></a><span class="ln">    69</span>					continue
<a id="L70"></a><span class="ln">    70</span>				}
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>				attr, val := parts[i], &#34;&#34;
<a id="L73"></a><span class="ln">    73</span>				if j := strings.Index(attr, &#34;=&#34;); j &gt;= 0 {
<a id="L74"></a><span class="ln">    74</span>					attr, val = attr[:j], attr[j+1:]
<a id="L75"></a><span class="ln">    75</span>				}
<a id="L76"></a><span class="ln">    76</span>				lowerAttr := strings.ToLower(attr)
<a id="L77"></a><span class="ln">    77</span>				parseCookieValueFn := parseCookieValue
<a id="L78"></a><span class="ln">    78</span>				if lowerAttr == &#34;expires&#34; {
<a id="L79"></a><span class="ln">    79</span>					parseCookieValueFn = parseCookieExpiresValue
<a id="L80"></a><span class="ln">    80</span>				}
<a id="L81"></a><span class="ln">    81</span>				val, success = parseCookieValueFn(val)
<a id="L82"></a><span class="ln">    82</span>				if !success {
<a id="L83"></a><span class="ln">    83</span>					c.Unparsed = append(c.Unparsed, parts[i])
<a id="L84"></a><span class="ln">    84</span>					continue
<a id="L85"></a><span class="ln">    85</span>				}
<a id="L86"></a><span class="ln">    86</span>				switch lowerAttr {
<a id="L87"></a><span class="ln">    87</span>				case &#34;secure&#34;:
<a id="L88"></a><span class="ln">    88</span>					c.Secure = true
<a id="L89"></a><span class="ln">    89</span>					continue
<a id="L90"></a><span class="ln">    90</span>				case &#34;httponly&#34;:
<a id="L91"></a><span class="ln">    91</span>					c.HttpOnly = true
<a id="L92"></a><span class="ln">    92</span>					continue
<a id="L93"></a><span class="ln">    93</span>				case &#34;domain&#34;:
<a id="L94"></a><span class="ln">    94</span>					c.Domain = val
<a id="L95"></a><span class="ln">    95</span>					<span class="comment">// TODO: Add domain parsing</span>
<a id="L96"></a><span class="ln">    96</span>					continue
<a id="L97"></a><span class="ln">    97</span>				case &#34;max-age&#34;:
<a id="L98"></a><span class="ln">    98</span>					secs, err := strconv.Atoi(val)
<a id="L99"></a><span class="ln">    99</span>					if err != nil || secs != 0 &amp;&amp; val[0] == &#39;0&#39; {
<a id="L100"></a><span class="ln">   100</span>						break
<a id="L101"></a><span class="ln">   101</span>					}
<a id="L102"></a><span class="ln">   102</span>					if secs &lt;= 0 {
<a id="L103"></a><span class="ln">   103</span>						c.MaxAge = -1
<a id="L104"></a><span class="ln">   104</span>					} else {
<a id="L105"></a><span class="ln">   105</span>						c.MaxAge = secs
<a id="L106"></a><span class="ln">   106</span>					}
<a id="L107"></a><span class="ln">   107</span>					continue
<a id="L108"></a><span class="ln">   108</span>				case &#34;expires&#34;:
<a id="L109"></a><span class="ln">   109</span>					c.RawExpires = val
<a id="L110"></a><span class="ln">   110</span>					exptime, err := time.Parse(time.RFC1123, val)
<a id="L111"></a><span class="ln">   111</span>					if err != nil {
<a id="L112"></a><span class="ln">   112</span>						exptime, err = time.Parse(&#34;Mon, 02-Jan-2006 15:04:05 MST&#34;, val)
<a id="L113"></a><span class="ln">   113</span>						if err != nil {
<a id="L114"></a><span class="ln">   114</span>							c.Expires = time.Time{}
<a id="L115"></a><span class="ln">   115</span>							break
<a id="L116"></a><span class="ln">   116</span>						}
<a id="L117"></a><span class="ln">   117</span>					}
<a id="L118"></a><span class="ln">   118</span>					c.Expires = exptime.UTC()
<a id="L119"></a><span class="ln">   119</span>					continue
<a id="L120"></a><span class="ln">   120</span>				case &#34;path&#34;:
<a id="L121"></a><span class="ln">   121</span>					c.Path = val
<a id="L122"></a><span class="ln">   122</span>					<span class="comment">// TODO: Add path parsing</span>
<a id="L123"></a><span class="ln">   123</span>					continue
<a id="L124"></a><span class="ln">   124</span>				}
<a id="L125"></a><span class="ln">   125</span>				c.Unparsed = append(c.Unparsed, parts[i])
<a id="L126"></a><span class="ln">   126</span>			}
<a id="L127"></a><span class="ln">   127</span>			cookies = append(cookies, c)
<a id="L128"></a><span class="ln">   128</span>		}
<a id="L129"></a><span class="ln">   129</span>		return cookies
<a id="L130"></a><span class="ln">   130</span>	}
<a id="L131"></a><span class="ln">   131</span>	
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">// SetCookie adds a Set-Cookie header to the provided ResponseWriter&#39;s headers.</span>
<a id="L133"></a><span class="ln">   133</span>	func SetCookie(w ResponseWriter, cookie *Cookie) {
<a id="L134"></a><span class="ln">   134</span>		w.Header().Add(&#34;Set-Cookie&#34;, cookie.String())
<a id="L135"></a><span class="ln">   135</span>	}
<a id="L136"></a><span class="ln">   136</span>	
<a id="L137"></a><span class="ln">   137</span>	<span class="comment">// String returns the serialization of the cookie for use in a Cookie</span>
<a id="L138"></a><span class="ln">   138</span>	<span class="comment">// header (if only Name and Value are set) or a Set-Cookie response</span>
<a id="L139"></a><span class="ln">   139</span>	<span class="comment">// header (if other fields are set).</span>
<a id="L140"></a><span class="ln">   140</span>	func (c *Cookie) String() string {
<a id="L141"></a><span class="ln">   141</span>		var b bytes.Buffer
<a id="L142"></a><span class="ln">   142</span>		fmt.Fprintf(&amp;b, &#34;%s=%s&#34;, sanitizeName(c.Name), sanitizeValue(c.Value))
<a id="L143"></a><span class="ln">   143</span>		if len(c.Path) &gt; 0 {
<a id="L144"></a><span class="ln">   144</span>			fmt.Fprintf(&amp;b, &#34;; Path=%s&#34;, sanitizeValue(c.Path))
<a id="L145"></a><span class="ln">   145</span>		}
<a id="L146"></a><span class="ln">   146</span>		if len(c.Domain) &gt; 0 {
<a id="L147"></a><span class="ln">   147</span>			fmt.Fprintf(&amp;b, &#34;; Domain=%s&#34;, sanitizeValue(c.Domain))
<a id="L148"></a><span class="ln">   148</span>		}
<a id="L149"></a><span class="ln">   149</span>		if c.Expires.Unix() &gt; 0 {
<a id="L150"></a><span class="ln">   150</span>			fmt.Fprintf(&amp;b, &#34;; Expires=%s&#34;, c.Expires.UTC().Format(time.RFC1123))
<a id="L151"></a><span class="ln">   151</span>		}
<a id="L152"></a><span class="ln">   152</span>		if c.MaxAge &gt; 0 {
<a id="L153"></a><span class="ln">   153</span>			fmt.Fprintf(&amp;b, &#34;; Max-Age=%d&#34;, c.MaxAge)
<a id="L154"></a><span class="ln">   154</span>		} else if c.MaxAge &lt; 0 {
<a id="L155"></a><span class="ln">   155</span>			fmt.Fprintf(&amp;b, &#34;; Max-Age=0&#34;)
<a id="L156"></a><span class="ln">   156</span>		}
<a id="L157"></a><span class="ln">   157</span>		if c.HttpOnly {
<a id="L158"></a><span class="ln">   158</span>			fmt.Fprintf(&amp;b, &#34;; HttpOnly&#34;)
<a id="L159"></a><span class="ln">   159</span>		}
<a id="L160"></a><span class="ln">   160</span>		if c.Secure {
<a id="L161"></a><span class="ln">   161</span>			fmt.Fprintf(&amp;b, &#34;; Secure&#34;)
<a id="L162"></a><span class="ln">   162</span>		}
<a id="L163"></a><span class="ln">   163</span>		return b.String()
<a id="L164"></a><span class="ln">   164</span>	}
<a id="L165"></a><span class="ln">   165</span>	
<a id="L166"></a><span class="ln">   166</span>	<span class="comment">// readCookies parses all &#34;Cookie&#34; values from the header h and</span>
<a id="L167"></a><span class="ln">   167</span>	<span class="comment">// returns the successfully parsed Cookies.</span>
<a id="L168"></a><span class="ln">   168</span>	<span class="comment">//</span>
<a id="L169"></a><span class="ln">   169</span>	<span class="comment">// if filter isn&#39;t empty, only cookies of that name are returned</span>
<a id="L170"></a><span class="ln">   170</span>	func readCookies(h Header, filter string) []*Cookie {
<a id="L171"></a><span class="ln">   171</span>		cookies := []*Cookie{}
<a id="L172"></a><span class="ln">   172</span>		lines, ok := h[&#34;Cookie&#34;]
<a id="L173"></a><span class="ln">   173</span>		if !ok {
<a id="L174"></a><span class="ln">   174</span>			return cookies
<a id="L175"></a><span class="ln">   175</span>		}
<a id="L176"></a><span class="ln">   176</span>	
<a id="L177"></a><span class="ln">   177</span>		for _, line := range lines {
<a id="L178"></a><span class="ln">   178</span>			parts := strings.Split(strings.TrimSpace(line), &#34;;&#34;)
<a id="L179"></a><span class="ln">   179</span>			if len(parts) == 1 &amp;&amp; parts[0] == &#34;&#34; {
<a id="L180"></a><span class="ln">   180</span>				continue
<a id="L181"></a><span class="ln">   181</span>			}
<a id="L182"></a><span class="ln">   182</span>			<span class="comment">// Per-line attributes</span>
<a id="L183"></a><span class="ln">   183</span>			parsedPairs := 0
<a id="L184"></a><span class="ln">   184</span>			for i := 0; i &lt; len(parts); i++ {
<a id="L185"></a><span class="ln">   185</span>				parts[i] = strings.TrimSpace(parts[i])
<a id="L186"></a><span class="ln">   186</span>				if len(parts[i]) == 0 {
<a id="L187"></a><span class="ln">   187</span>					continue
<a id="L188"></a><span class="ln">   188</span>				}
<a id="L189"></a><span class="ln">   189</span>				name, val := parts[i], &#34;&#34;
<a id="L190"></a><span class="ln">   190</span>				if j := strings.Index(name, &#34;=&#34;); j &gt;= 0 {
<a id="L191"></a><span class="ln">   191</span>					name, val = name[:j], name[j+1:]
<a id="L192"></a><span class="ln">   192</span>				}
<a id="L193"></a><span class="ln">   193</span>				if !isCookieNameValid(name) {
<a id="L194"></a><span class="ln">   194</span>					continue
<a id="L195"></a><span class="ln">   195</span>				}
<a id="L196"></a><span class="ln">   196</span>				if filter != &#34;&#34; &amp;&amp; filter != name {
<a id="L197"></a><span class="ln">   197</span>					continue
<a id="L198"></a><span class="ln">   198</span>				}
<a id="L199"></a><span class="ln">   199</span>				val, success := parseCookieValue(val)
<a id="L200"></a><span class="ln">   200</span>				if !success {
<a id="L201"></a><span class="ln">   201</span>					continue
<a id="L202"></a><span class="ln">   202</span>				}
<a id="L203"></a><span class="ln">   203</span>				cookies = append(cookies, &amp;Cookie{Name: name, Value: val})
<a id="L204"></a><span class="ln">   204</span>				parsedPairs++
<a id="L205"></a><span class="ln">   205</span>			}
<a id="L206"></a><span class="ln">   206</span>		}
<a id="L207"></a><span class="ln">   207</span>		return cookies
<a id="L208"></a><span class="ln">   208</span>	}
<a id="L209"></a><span class="ln">   209</span>	
<a id="L210"></a><span class="ln">   210</span>	var cookieNameSanitizer = strings.NewReplacer(&#34;\n&#34;, &#34;-&#34;, &#34;\r&#34;, &#34;-&#34;)
<a id="L211"></a><span class="ln">   211</span>	
<a id="L212"></a><span class="ln">   212</span>	func sanitizeName(n string) string {
<a id="L213"></a><span class="ln">   213</span>		return cookieNameSanitizer.Replace(n)
<a id="L214"></a><span class="ln">   214</span>	}
<a id="L215"></a><span class="ln">   215</span>	
<a id="L216"></a><span class="ln">   216</span>	var cookieValueSanitizer = strings.NewReplacer(&#34;\n&#34;, &#34; &#34;, &#34;\r&#34;, &#34; &#34;, &#34;;&#34;, &#34; &#34;)
<a id="L217"></a><span class="ln">   217</span>	
<a id="L218"></a><span class="ln">   218</span>	func sanitizeValue(v string) string {
<a id="L219"></a><span class="ln">   219</span>		return cookieValueSanitizer.Replace(v)
<a id="L220"></a><span class="ln">   220</span>	}
<a id="L221"></a><span class="ln">   221</span>	
<a id="L222"></a><span class="ln">   222</span>	func unquoteCookieValue(v string) string {
<a id="L223"></a><span class="ln">   223</span>		if len(v) &gt; 1 &amp;&amp; v[0] == &#39;&#34;&#39; &amp;&amp; v[len(v)-1] == &#39;&#34;&#39; {
<a id="L224"></a><span class="ln">   224</span>			return v[1 : len(v)-1]
<a id="L225"></a><span class="ln">   225</span>		}
<a id="L226"></a><span class="ln">   226</span>		return v
<a id="L227"></a><span class="ln">   227</span>	}
<a id="L228"></a><span class="ln">   228</span>	
<a id="L229"></a><span class="ln">   229</span>	func isCookieByte(c byte) bool {
<a id="L230"></a><span class="ln">   230</span>		switch {
<a id="L231"></a><span class="ln">   231</span>		case c == 0x21, 0x23 &lt;= c &amp;&amp; c &lt;= 0x2b, 0x2d &lt;= c &amp;&amp; c &lt;= 0x3a,
<a id="L232"></a><span class="ln">   232</span>			0x3c &lt;= c &amp;&amp; c &lt;= 0x5b, 0x5d &lt;= c &amp;&amp; c &lt;= 0x7e:
<a id="L233"></a><span class="ln">   233</span>			return true
<a id="L234"></a><span class="ln">   234</span>		}
<a id="L235"></a><span class="ln">   235</span>		return false
<a id="L236"></a><span class="ln">   236</span>	}
<a id="L237"></a><span class="ln">   237</span>	
<a id="L238"></a><span class="ln">   238</span>	func isCookieExpiresByte(c byte) (ok bool) {
<a id="L239"></a><span class="ln">   239</span>		return isCookieByte(c) || c == &#39;,&#39; || c == &#39; &#39;
<a id="L240"></a><span class="ln">   240</span>	}
<a id="L241"></a><span class="ln">   241</span>	
<a id="L242"></a><span class="ln">   242</span>	func parseCookieValue(raw string) (string, bool) {
<a id="L243"></a><span class="ln">   243</span>		return parseCookieValueUsing(raw, isCookieByte)
<a id="L244"></a><span class="ln">   244</span>	}
<a id="L245"></a><span class="ln">   245</span>	
<a id="L246"></a><span class="ln">   246</span>	func parseCookieExpiresValue(raw string) (string, bool) {
<a id="L247"></a><span class="ln">   247</span>		return parseCookieValueUsing(raw, isCookieExpiresByte)
<a id="L248"></a><span class="ln">   248</span>	}
<a id="L249"></a><span class="ln">   249</span>	
<a id="L250"></a><span class="ln">   250</span>	func parseCookieValueUsing(raw string, validByte func(byte) bool) (string, bool) {
<a id="L251"></a><span class="ln">   251</span>		raw = unquoteCookieValue(raw)
<a id="L252"></a><span class="ln">   252</span>		for i := 0; i &lt; len(raw); i++ {
<a id="L253"></a><span class="ln">   253</span>			if !validByte(raw[i]) {
<a id="L254"></a><span class="ln">   254</span>				return &#34;&#34;, false
<a id="L255"></a><span class="ln">   255</span>			}
<a id="L256"></a><span class="ln">   256</span>		}
<a id="L257"></a><span class="ln">   257</span>		return raw, true
<a id="L258"></a><span class="ln">   258</span>	}
<a id="L259"></a><span class="ln">   259</span>	
<a id="L260"></a><span class="ln">   260</span>	func isCookieNameValid(raw string) bool {
<a id="L261"></a><span class="ln">   261</span>		for _, c := range raw {
<a id="L262"></a><span class="ln">   262</span>			if !isToken(byte(c)) {
<a id="L263"></a><span class="ln">   263</span>				return false
<a id="L264"></a><span class="ln">   264</span>			}
<a id="L265"></a><span class="ln">   265</span>		}
<a id="L266"></a><span class="ln">   266</span>		return true
<a id="L267"></a><span class="ln">   267</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

