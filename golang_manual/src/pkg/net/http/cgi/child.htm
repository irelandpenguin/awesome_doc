<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/http/cgi/child.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/http/cgi/child.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// This file implements CGI from the perspective of a child</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// process.</span>
<a id="L7"></a><span class="ln">     7</span>	
<a id="L8"></a><span class="ln">     8</span>	package cgi
<a id="L9"></a><span class="ln">     9</span>	
<a id="L10"></a><span class="ln">    10</span>	import (
<a id="L11"></a><span class="ln">    11</span>		&#34;bufio&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;crypto/tls&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;errors&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;fmt&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;io&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;io/ioutil&#34;
<a id="L17"></a><span class="ln">    17</span>		&#34;net&#34;
<a id="L18"></a><span class="ln">    18</span>		&#34;net/http&#34;
<a id="L19"></a><span class="ln">    19</span>		&#34;net/url&#34;
<a id="L20"></a><span class="ln">    20</span>		&#34;os&#34;
<a id="L21"></a><span class="ln">    21</span>		&#34;strconv&#34;
<a id="L22"></a><span class="ln">    22</span>		&#34;strings&#34;
<a id="L23"></a><span class="ln">    23</span>	)
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// Request returns the HTTP request as represented in the current</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// environment. This assumes the current program is being run</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// by a web server in a CGI environment.</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// The returned Request&#39;s Body is populated, if applicable.</span>
<a id="L29"></a><span class="ln">    29</span>	func Request() (*http.Request, error) {
<a id="L30"></a><span class="ln">    30</span>		r, err := RequestFromMap(envMap(os.Environ()))
<a id="L31"></a><span class="ln">    31</span>		if err != nil {
<a id="L32"></a><span class="ln">    32</span>			return nil, err
<a id="L33"></a><span class="ln">    33</span>		}
<a id="L34"></a><span class="ln">    34</span>		if r.ContentLength &gt; 0 {
<a id="L35"></a><span class="ln">    35</span>			r.Body = ioutil.NopCloser(io.LimitReader(os.Stdin, r.ContentLength))
<a id="L36"></a><span class="ln">    36</span>		}
<a id="L37"></a><span class="ln">    37</span>		return r, nil
<a id="L38"></a><span class="ln">    38</span>	}
<a id="L39"></a><span class="ln">    39</span>	
<a id="L40"></a><span class="ln">    40</span>	func envMap(env []string) map[string]string {
<a id="L41"></a><span class="ln">    41</span>		m := make(map[string]string)
<a id="L42"></a><span class="ln">    42</span>		for _, kv := range env {
<a id="L43"></a><span class="ln">    43</span>			if idx := strings.Index(kv, &#34;=&#34;); idx != -1 {
<a id="L44"></a><span class="ln">    44</span>				m[kv[:idx]] = kv[idx+1:]
<a id="L45"></a><span class="ln">    45</span>			}
<a id="L46"></a><span class="ln">    46</span>		}
<a id="L47"></a><span class="ln">    47</span>		return m
<a id="L48"></a><span class="ln">    48</span>	}
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// RequestFromMap creates an http.Request from CGI variables.</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// The returned Request&#39;s Body field is not populated.</span>
<a id="L52"></a><span class="ln">    52</span>	func RequestFromMap(params map[string]string) (*http.Request, error) {
<a id="L53"></a><span class="ln">    53</span>		r := new(http.Request)
<a id="L54"></a><span class="ln">    54</span>		r.Method = params[&#34;REQUEST_METHOD&#34;]
<a id="L55"></a><span class="ln">    55</span>		if r.Method == &#34;&#34; {
<a id="L56"></a><span class="ln">    56</span>			return nil, errors.New(&#34;cgi: no REQUEST_METHOD in environment&#34;)
<a id="L57"></a><span class="ln">    57</span>		}
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>		r.Proto = params[&#34;SERVER_PROTOCOL&#34;]
<a id="L60"></a><span class="ln">    60</span>		var ok bool
<a id="L61"></a><span class="ln">    61</span>		r.ProtoMajor, r.ProtoMinor, ok = http.ParseHTTPVersion(r.Proto)
<a id="L62"></a><span class="ln">    62</span>		if !ok {
<a id="L63"></a><span class="ln">    63</span>			return nil, errors.New(&#34;cgi: invalid SERVER_PROTOCOL version&#34;)
<a id="L64"></a><span class="ln">    64</span>		}
<a id="L65"></a><span class="ln">    65</span>	
<a id="L66"></a><span class="ln">    66</span>		r.Close = true
<a id="L67"></a><span class="ln">    67</span>		r.Trailer = http.Header{}
<a id="L68"></a><span class="ln">    68</span>		r.Header = http.Header{}
<a id="L69"></a><span class="ln">    69</span>	
<a id="L70"></a><span class="ln">    70</span>		r.Host = params[&#34;HTTP_HOST&#34;]
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>		if lenstr := params[&#34;CONTENT_LENGTH&#34;]; lenstr != &#34;&#34; {
<a id="L73"></a><span class="ln">    73</span>			clen, err := strconv.ParseInt(lenstr, 10, 64)
<a id="L74"></a><span class="ln">    74</span>			if err != nil {
<a id="L75"></a><span class="ln">    75</span>				return nil, errors.New(&#34;cgi: bad CONTENT_LENGTH in environment: &#34; + lenstr)
<a id="L76"></a><span class="ln">    76</span>			}
<a id="L77"></a><span class="ln">    77</span>			r.ContentLength = clen
<a id="L78"></a><span class="ln">    78</span>		}
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>		if ct := params[&#34;CONTENT_TYPE&#34;]; ct != &#34;&#34; {
<a id="L81"></a><span class="ln">    81</span>			r.Header.Set(&#34;Content-Type&#34;, ct)
<a id="L82"></a><span class="ln">    82</span>		}
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>		<span class="comment">// Copy &#34;HTTP_FOO_BAR&#34; variables to &#34;Foo-Bar&#34; Headers</span>
<a id="L85"></a><span class="ln">    85</span>		for k, v := range params {
<a id="L86"></a><span class="ln">    86</span>			if !strings.HasPrefix(k, &#34;HTTP_&#34;) || k == &#34;HTTP_HOST&#34; {
<a id="L87"></a><span class="ln">    87</span>				continue
<a id="L88"></a><span class="ln">    88</span>			}
<a id="L89"></a><span class="ln">    89</span>			r.Header.Add(strings.Replace(k[5:], &#34;_&#34;, &#34;-&#34;, -1), v)
<a id="L90"></a><span class="ln">    90</span>		}
<a id="L91"></a><span class="ln">    91</span>	
<a id="L92"></a><span class="ln">    92</span>		<span class="comment">// TODO: cookies.  parsing them isn&#39;t exported, though.</span>
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>		if r.Host != &#34;&#34; {
<a id="L95"></a><span class="ln">    95</span>			<span class="comment">// Hostname is provided, so we can reasonably construct a URL,</span>
<a id="L96"></a><span class="ln">    96</span>			<span class="comment">// even if we have to assume &#39;http&#39; for the scheme.</span>
<a id="L97"></a><span class="ln">    97</span>			rawurl := &#34;http://&#34; + r.Host + params[&#34;REQUEST_URI&#34;]
<a id="L98"></a><span class="ln">    98</span>			url, err := url.Parse(rawurl)
<a id="L99"></a><span class="ln">    99</span>			if err != nil {
<a id="L100"></a><span class="ln">   100</span>				return nil, errors.New(&#34;cgi: failed to parse host and REQUEST_URI into a URL: &#34; + rawurl)
<a id="L101"></a><span class="ln">   101</span>			}
<a id="L102"></a><span class="ln">   102</span>			r.URL = url
<a id="L103"></a><span class="ln">   103</span>		}
<a id="L104"></a><span class="ln">   104</span>		<span class="comment">// Fallback logic if we don&#39;t have a Host header or the URL</span>
<a id="L105"></a><span class="ln">   105</span>		<span class="comment">// failed to parse</span>
<a id="L106"></a><span class="ln">   106</span>		if r.URL == nil {
<a id="L107"></a><span class="ln">   107</span>			uriStr := params[&#34;REQUEST_URI&#34;]
<a id="L108"></a><span class="ln">   108</span>			url, err := url.Parse(uriStr)
<a id="L109"></a><span class="ln">   109</span>			if err != nil {
<a id="L110"></a><span class="ln">   110</span>				return nil, errors.New(&#34;cgi: failed to parse REQUEST_URI into a URL: &#34; + uriStr)
<a id="L111"></a><span class="ln">   111</span>			}
<a id="L112"></a><span class="ln">   112</span>			r.URL = url
<a id="L113"></a><span class="ln">   113</span>		}
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>		<span class="comment">// There&#39;s apparently a de-facto standard for this.</span>
<a id="L116"></a><span class="ln">   116</span>		<span class="comment">// http://docstore.mik.ua/orelly/linux/cgi/ch03_02.htm#ch03-35636</span>
<a id="L117"></a><span class="ln">   117</span>		if s := params[&#34;HTTPS&#34;]; s == &#34;on&#34; || s == &#34;ON&#34; || s == &#34;1&#34; {
<a id="L118"></a><span class="ln">   118</span>			r.TLS = &amp;tls.ConnectionState{HandshakeComplete: true}
<a id="L119"></a><span class="ln">   119</span>		}
<a id="L120"></a><span class="ln">   120</span>	
<a id="L121"></a><span class="ln">   121</span>		<span class="comment">// Request.RemoteAddr has its port set by Go&#39;s standard http</span>
<a id="L122"></a><span class="ln">   122</span>		<span class="comment">// server, so we do here too. We don&#39;t have one, though, so we</span>
<a id="L123"></a><span class="ln">   123</span>		<span class="comment">// use a dummy one.</span>
<a id="L124"></a><span class="ln">   124</span>		r.RemoteAddr = net.JoinHostPort(params[&#34;REMOTE_ADDR&#34;], &#34;0&#34;)
<a id="L125"></a><span class="ln">   125</span>	
<a id="L126"></a><span class="ln">   126</span>		return r, nil
<a id="L127"></a><span class="ln">   127</span>	}
<a id="L128"></a><span class="ln">   128</span>	
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// Serve executes the provided Handler on the currently active CGI</span>
<a id="L130"></a><span class="ln">   130</span>	<span class="comment">// request, if any. If there&#39;s no current CGI environment</span>
<a id="L131"></a><span class="ln">   131</span>	<span class="comment">// an error is returned. The provided handler may be nil to use</span>
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">// http.DefaultServeMux.</span>
<a id="L133"></a><span class="ln">   133</span>	func Serve(handler http.Handler) error {
<a id="L134"></a><span class="ln">   134</span>		req, err := Request()
<a id="L135"></a><span class="ln">   135</span>		if err != nil {
<a id="L136"></a><span class="ln">   136</span>			return err
<a id="L137"></a><span class="ln">   137</span>		}
<a id="L138"></a><span class="ln">   138</span>		if handler == nil {
<a id="L139"></a><span class="ln">   139</span>			handler = http.DefaultServeMux
<a id="L140"></a><span class="ln">   140</span>		}
<a id="L141"></a><span class="ln">   141</span>		rw := &amp;response{
<a id="L142"></a><span class="ln">   142</span>			req:    req,
<a id="L143"></a><span class="ln">   143</span>			header: make(http.Header),
<a id="L144"></a><span class="ln">   144</span>			bufw:   bufio.NewWriter(os.Stdout),
<a id="L145"></a><span class="ln">   145</span>		}
<a id="L146"></a><span class="ln">   146</span>		handler.ServeHTTP(rw, req)
<a id="L147"></a><span class="ln">   147</span>		rw.Write(nil) <span class="comment">// make sure a response is sent</span>
<a id="L148"></a><span class="ln">   148</span>		if err = rw.bufw.Flush(); err != nil {
<a id="L149"></a><span class="ln">   149</span>			return err
<a id="L150"></a><span class="ln">   150</span>		}
<a id="L151"></a><span class="ln">   151</span>		return nil
<a id="L152"></a><span class="ln">   152</span>	}
<a id="L153"></a><span class="ln">   153</span>	
<a id="L154"></a><span class="ln">   154</span>	type response struct {
<a id="L155"></a><span class="ln">   155</span>		req        *http.Request
<a id="L156"></a><span class="ln">   156</span>		header     http.Header
<a id="L157"></a><span class="ln">   157</span>		bufw       *bufio.Writer
<a id="L158"></a><span class="ln">   158</span>		headerSent bool
<a id="L159"></a><span class="ln">   159</span>	}
<a id="L160"></a><span class="ln">   160</span>	
<a id="L161"></a><span class="ln">   161</span>	func (r *response) Flush() {
<a id="L162"></a><span class="ln">   162</span>		r.bufw.Flush()
<a id="L163"></a><span class="ln">   163</span>	}
<a id="L164"></a><span class="ln">   164</span>	
<a id="L165"></a><span class="ln">   165</span>	func (r *response) Header() http.Header {
<a id="L166"></a><span class="ln">   166</span>		return r.header
<a id="L167"></a><span class="ln">   167</span>	}
<a id="L168"></a><span class="ln">   168</span>	
<a id="L169"></a><span class="ln">   169</span>	func (r *response) Write(p []byte) (n int, err error) {
<a id="L170"></a><span class="ln">   170</span>		if !r.headerSent {
<a id="L171"></a><span class="ln">   171</span>			r.WriteHeader(http.StatusOK)
<a id="L172"></a><span class="ln">   172</span>		}
<a id="L173"></a><span class="ln">   173</span>		return r.bufw.Write(p)
<a id="L174"></a><span class="ln">   174</span>	}
<a id="L175"></a><span class="ln">   175</span>	
<a id="L176"></a><span class="ln">   176</span>	func (r *response) WriteHeader(code int) {
<a id="L177"></a><span class="ln">   177</span>		if r.headerSent {
<a id="L178"></a><span class="ln">   178</span>			<span class="comment">// Note: explicitly using Stderr, as Stdout is our HTTP output.</span>
<a id="L179"></a><span class="ln">   179</span>			fmt.Fprintf(os.Stderr, &#34;CGI attempted to write header twice on request for %s&#34;, r.req.URL)
<a id="L180"></a><span class="ln">   180</span>			return
<a id="L181"></a><span class="ln">   181</span>		}
<a id="L182"></a><span class="ln">   182</span>		r.headerSent = true
<a id="L183"></a><span class="ln">   183</span>		fmt.Fprintf(r.bufw, &#34;Status: %d %s\r\n&#34;, code, http.StatusText(code))
<a id="L184"></a><span class="ln">   184</span>	
<a id="L185"></a><span class="ln">   185</span>		<span class="comment">// Set a default Content-Type</span>
<a id="L186"></a><span class="ln">   186</span>		if _, hasType := r.header[&#34;Content-Type&#34;]; !hasType {
<a id="L187"></a><span class="ln">   187</span>			r.header.Add(&#34;Content-Type&#34;, &#34;text/html; charset=utf-8&#34;)
<a id="L188"></a><span class="ln">   188</span>		}
<a id="L189"></a><span class="ln">   189</span>	
<a id="L190"></a><span class="ln">   190</span>		r.header.Write(r.bufw)
<a id="L191"></a><span class="ln">   191</span>		r.bufw.WriteString(&#34;\r\n&#34;)
<a id="L192"></a><span class="ln">   192</span>		r.bufw.Flush()
<a id="L193"></a><span class="ln">   193</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

