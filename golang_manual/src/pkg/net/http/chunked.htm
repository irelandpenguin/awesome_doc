<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/http/chunked.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/http/chunked.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// The wire protocol for HTTP&#39;s &#34;chunked&#34; Transfer-Encoding.</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// This code is duplicated in httputil/chunked.go.</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// Please make any changes in both files.</span>
<a id="L9"></a><span class="ln">     9</span>	
<a id="L10"></a><span class="ln">    10</span>	package http
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	import (
<a id="L13"></a><span class="ln">    13</span>		&#34;bufio&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;bytes&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;errors&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;io&#34;
<a id="L17"></a><span class="ln">    17</span>		&#34;strconv&#34;
<a id="L18"></a><span class="ln">    18</span>	)
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	const maxLineLength = 4096 <span class="comment">// assumed &lt;= bufio.defaultBufSize</span>
<a id="L21"></a><span class="ln">    21</span>	
<a id="L22"></a><span class="ln">    22</span>	var ErrLineTooLong = errors.New(&#34;header line too long&#34;)
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// newChunkedReader returns a new chunkedReader that translates the data read from r</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// out of HTTP &#34;chunked&#34; format before returning it. </span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// The chunkedReader returns io.EOF when the final 0-length chunk is read.</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">//</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// newChunkedReader is not needed by normal applications. The http package</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// automatically decodes chunking when reading response bodies.</span>
<a id="L30"></a><span class="ln">    30</span>	func newChunkedReader(r io.Reader) io.Reader {
<a id="L31"></a><span class="ln">    31</span>		br, ok := r.(*bufio.Reader)
<a id="L32"></a><span class="ln">    32</span>		if !ok {
<a id="L33"></a><span class="ln">    33</span>			br = bufio.NewReader(r)
<a id="L34"></a><span class="ln">    34</span>		}
<a id="L35"></a><span class="ln">    35</span>		return &amp;chunkedReader{r: br}
<a id="L36"></a><span class="ln">    36</span>	}
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>	type chunkedReader struct {
<a id="L39"></a><span class="ln">    39</span>		r   *bufio.Reader
<a id="L40"></a><span class="ln">    40</span>		n   uint64 <span class="comment">// unread bytes in chunk</span>
<a id="L41"></a><span class="ln">    41</span>		err error
<a id="L42"></a><span class="ln">    42</span>	}
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	func (cr *chunkedReader) beginChunk() {
<a id="L45"></a><span class="ln">    45</span>		<span class="comment">// chunk-size CRLF</span>
<a id="L46"></a><span class="ln">    46</span>		var line string
<a id="L47"></a><span class="ln">    47</span>		line, cr.err = readLine(cr.r)
<a id="L48"></a><span class="ln">    48</span>		if cr.err != nil {
<a id="L49"></a><span class="ln">    49</span>			return
<a id="L50"></a><span class="ln">    50</span>		}
<a id="L51"></a><span class="ln">    51</span>		cr.n, cr.err = strconv.ParseUint(line, 16, 64)
<a id="L52"></a><span class="ln">    52</span>		if cr.err != nil {
<a id="L53"></a><span class="ln">    53</span>			return
<a id="L54"></a><span class="ln">    54</span>		}
<a id="L55"></a><span class="ln">    55</span>		if cr.n == 0 {
<a id="L56"></a><span class="ln">    56</span>			cr.err = io.EOF
<a id="L57"></a><span class="ln">    57</span>		}
<a id="L58"></a><span class="ln">    58</span>	}
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	func (cr *chunkedReader) Read(b []uint8) (n int, err error) {
<a id="L61"></a><span class="ln">    61</span>		if cr.err != nil {
<a id="L62"></a><span class="ln">    62</span>			return 0, cr.err
<a id="L63"></a><span class="ln">    63</span>		}
<a id="L64"></a><span class="ln">    64</span>		if cr.n == 0 {
<a id="L65"></a><span class="ln">    65</span>			cr.beginChunk()
<a id="L66"></a><span class="ln">    66</span>			if cr.err != nil {
<a id="L67"></a><span class="ln">    67</span>				return 0, cr.err
<a id="L68"></a><span class="ln">    68</span>			}
<a id="L69"></a><span class="ln">    69</span>		}
<a id="L70"></a><span class="ln">    70</span>		if uint64(len(b)) &gt; cr.n {
<a id="L71"></a><span class="ln">    71</span>			b = b[0:cr.n]
<a id="L72"></a><span class="ln">    72</span>		}
<a id="L73"></a><span class="ln">    73</span>		n, cr.err = cr.r.Read(b)
<a id="L74"></a><span class="ln">    74</span>		cr.n -= uint64(n)
<a id="L75"></a><span class="ln">    75</span>		if cr.n == 0 &amp;&amp; cr.err == nil {
<a id="L76"></a><span class="ln">    76</span>			<span class="comment">// end of chunk (CRLF)</span>
<a id="L77"></a><span class="ln">    77</span>			b := make([]byte, 2)
<a id="L78"></a><span class="ln">    78</span>			if _, cr.err = io.ReadFull(cr.r, b); cr.err == nil {
<a id="L79"></a><span class="ln">    79</span>				if b[0] != &#39;\r&#39; || b[1] != &#39;\n&#39; {
<a id="L80"></a><span class="ln">    80</span>					cr.err = errors.New(&#34;malformed chunked encoding&#34;)
<a id="L81"></a><span class="ln">    81</span>				}
<a id="L82"></a><span class="ln">    82</span>			}
<a id="L83"></a><span class="ln">    83</span>		}
<a id="L84"></a><span class="ln">    84</span>		return n, cr.err
<a id="L85"></a><span class="ln">    85</span>	}
<a id="L86"></a><span class="ln">    86</span>	
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">// Read a line of bytes (up to \n) from b.</span>
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// Give up if the line exceeds maxLineLength.</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">// The returned bytes are a pointer into storage in</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// the bufio, so they are only valid until the next bufio read.</span>
<a id="L91"></a><span class="ln">    91</span>	func readLineBytes(b *bufio.Reader) (p []byte, err error) {
<a id="L92"></a><span class="ln">    92</span>		if p, err = b.ReadSlice(&#39;\n&#39;); err != nil {
<a id="L93"></a><span class="ln">    93</span>			<span class="comment">// We always know when EOF is coming.</span>
<a id="L94"></a><span class="ln">    94</span>			<span class="comment">// If the caller asked for a line, there should be a line.</span>
<a id="L95"></a><span class="ln">    95</span>			if err == io.EOF {
<a id="L96"></a><span class="ln">    96</span>				err = io.ErrUnexpectedEOF
<a id="L97"></a><span class="ln">    97</span>			} else if err == bufio.ErrBufferFull {
<a id="L98"></a><span class="ln">    98</span>				err = ErrLineTooLong
<a id="L99"></a><span class="ln">    99</span>			}
<a id="L100"></a><span class="ln">   100</span>			return nil, err
<a id="L101"></a><span class="ln">   101</span>		}
<a id="L102"></a><span class="ln">   102</span>		if len(p) &gt;= maxLineLength {
<a id="L103"></a><span class="ln">   103</span>			return nil, ErrLineTooLong
<a id="L104"></a><span class="ln">   104</span>		}
<a id="L105"></a><span class="ln">   105</span>	
<a id="L106"></a><span class="ln">   106</span>		<span class="comment">// Chop off trailing white space.</span>
<a id="L107"></a><span class="ln">   107</span>		p = bytes.TrimRight(p, &#34; \r\t\n&#34;)
<a id="L108"></a><span class="ln">   108</span>	
<a id="L109"></a><span class="ln">   109</span>		return p, nil
<a id="L110"></a><span class="ln">   110</span>	}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>	<span class="comment">// readLineBytes, but convert the bytes into a string.</span>
<a id="L113"></a><span class="ln">   113</span>	func readLine(b *bufio.Reader) (s string, err error) {
<a id="L114"></a><span class="ln">   114</span>		p, e := readLineBytes(b)
<a id="L115"></a><span class="ln">   115</span>		if e != nil {
<a id="L116"></a><span class="ln">   116</span>			return &#34;&#34;, e
<a id="L117"></a><span class="ln">   117</span>		}
<a id="L118"></a><span class="ln">   118</span>		return string(p), nil
<a id="L119"></a><span class="ln">   119</span>	}
<a id="L120"></a><span class="ln">   120</span>	
<a id="L121"></a><span class="ln">   121</span>	<span class="comment">// newChunkedWriter returns a new chunkedWriter that translates writes into HTTP</span>
<a id="L122"></a><span class="ln">   122</span>	<span class="comment">// &#34;chunked&#34; format before writing them to w. Closing the returned chunkedWriter</span>
<a id="L123"></a><span class="ln">   123</span>	<span class="comment">// sends the final 0-length chunk that marks the end of the stream.</span>
<a id="L124"></a><span class="ln">   124</span>	<span class="comment">//</span>
<a id="L125"></a><span class="ln">   125</span>	<span class="comment">// newChunkedWriter is not needed by normal applications. The http</span>
<a id="L126"></a><span class="ln">   126</span>	<span class="comment">// package adds chunking automatically if handlers don&#39;t set a</span>
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// Content-Length header. Using newChunkedWriter inside a handler</span>
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// would result in double chunking or chunking with a Content-Length</span>
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// length, both of which are wrong.</span>
<a id="L130"></a><span class="ln">   130</span>	func newChunkedWriter(w io.Writer) io.WriteCloser {
<a id="L131"></a><span class="ln">   131</span>		return &amp;chunkedWriter{w}
<a id="L132"></a><span class="ln">   132</span>	}
<a id="L133"></a><span class="ln">   133</span>	
<a id="L134"></a><span class="ln">   134</span>	<span class="comment">// Writing to chunkedWriter translates to writing in HTTP chunked Transfer</span>
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">// Encoding wire format to the underlying Wire chunkedWriter.</span>
<a id="L136"></a><span class="ln">   136</span>	type chunkedWriter struct {
<a id="L137"></a><span class="ln">   137</span>		Wire io.Writer
<a id="L138"></a><span class="ln">   138</span>	}
<a id="L139"></a><span class="ln">   139</span>	
<a id="L140"></a><span class="ln">   140</span>	<span class="comment">// Write the contents of data as one chunk to Wire.</span>
<a id="L141"></a><span class="ln">   141</span>	<span class="comment">// NOTE: Note that the corresponding chunk-writing procedure in Conn.Write has</span>
<a id="L142"></a><span class="ln">   142</span>	<span class="comment">// a bug since it does not check for success of io.WriteString</span>
<a id="L143"></a><span class="ln">   143</span>	func (cw *chunkedWriter) Write(data []byte) (n int, err error) {
<a id="L144"></a><span class="ln">   144</span>	
<a id="L145"></a><span class="ln">   145</span>		<span class="comment">// Don&#39;t send 0-length data. It looks like EOF for chunked encoding.</span>
<a id="L146"></a><span class="ln">   146</span>		if len(data) == 0 {
<a id="L147"></a><span class="ln">   147</span>			return 0, nil
<a id="L148"></a><span class="ln">   148</span>		}
<a id="L149"></a><span class="ln">   149</span>	
<a id="L150"></a><span class="ln">   150</span>		head := strconv.FormatInt(int64(len(data)), 16) + &#34;\r\n&#34;
<a id="L151"></a><span class="ln">   151</span>	
<a id="L152"></a><span class="ln">   152</span>		if _, err = io.WriteString(cw.Wire, head); err != nil {
<a id="L153"></a><span class="ln">   153</span>			return 0, err
<a id="L154"></a><span class="ln">   154</span>		}
<a id="L155"></a><span class="ln">   155</span>		if n, err = cw.Wire.Write(data); err != nil {
<a id="L156"></a><span class="ln">   156</span>			return
<a id="L157"></a><span class="ln">   157</span>		}
<a id="L158"></a><span class="ln">   158</span>		if n != len(data) {
<a id="L159"></a><span class="ln">   159</span>			err = io.ErrShortWrite
<a id="L160"></a><span class="ln">   160</span>			return
<a id="L161"></a><span class="ln">   161</span>		}
<a id="L162"></a><span class="ln">   162</span>		_, err = io.WriteString(cw.Wire, &#34;\r\n&#34;)
<a id="L163"></a><span class="ln">   163</span>	
<a id="L164"></a><span class="ln">   164</span>		return
<a id="L165"></a><span class="ln">   165</span>	}
<a id="L166"></a><span class="ln">   166</span>	
<a id="L167"></a><span class="ln">   167</span>	func (cw *chunkedWriter) Close() error {
<a id="L168"></a><span class="ln">   168</span>		_, err := io.WriteString(cw.Wire, &#34;0\r\n&#34;)
<a id="L169"></a><span class="ln">   169</span>		return err
<a id="L170"></a><span class="ln">   170</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

