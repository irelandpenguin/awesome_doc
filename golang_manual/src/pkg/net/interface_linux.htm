<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/interface_linux.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/interface_linux.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Network interface identification for Linux</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package net
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;os&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;syscall&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;unsafe&#34;
<a id="L13"></a><span class="ln">    13</span>	)
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// If the ifindex is zero, interfaceTable returns mappings of all</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// network interfaces.  Otherwise it returns a mapping of a specific</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// interface.</span>
<a id="L18"></a><span class="ln">    18</span>	func interfaceTable(ifindex int) ([]Interface, error) {
<a id="L19"></a><span class="ln">    19</span>		tab, err := syscall.NetlinkRIB(syscall.RTM_GETLINK, syscall.AF_UNSPEC)
<a id="L20"></a><span class="ln">    20</span>		if err != nil {
<a id="L21"></a><span class="ln">    21</span>			return nil, os.NewSyscallError(&#34;netlink rib&#34;, err)
<a id="L22"></a><span class="ln">    22</span>		}
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>		msgs, err := syscall.ParseNetlinkMessage(tab)
<a id="L25"></a><span class="ln">    25</span>		if err != nil {
<a id="L26"></a><span class="ln">    26</span>			return nil, os.NewSyscallError(&#34;netlink message&#34;, err)
<a id="L27"></a><span class="ln">    27</span>		}
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>		var ift []Interface
<a id="L30"></a><span class="ln">    30</span>		for _, m := range msgs {
<a id="L31"></a><span class="ln">    31</span>			switch m.Header.Type {
<a id="L32"></a><span class="ln">    32</span>			case syscall.NLMSG_DONE:
<a id="L33"></a><span class="ln">    33</span>				goto done
<a id="L34"></a><span class="ln">    34</span>			case syscall.RTM_NEWLINK:
<a id="L35"></a><span class="ln">    35</span>				ifim := (*syscall.IfInfomsg)(unsafe.Pointer(&amp;m.Data[0]))
<a id="L36"></a><span class="ln">    36</span>				if ifindex == 0 || ifindex == int(ifim.Index) {
<a id="L37"></a><span class="ln">    37</span>					attrs, err := syscall.ParseNetlinkRouteAttr(&amp;m)
<a id="L38"></a><span class="ln">    38</span>					if err != nil {
<a id="L39"></a><span class="ln">    39</span>						return nil, os.NewSyscallError(&#34;netlink routeattr&#34;, err)
<a id="L40"></a><span class="ln">    40</span>					}
<a id="L41"></a><span class="ln">    41</span>					ifi := newLink(ifim, attrs)
<a id="L42"></a><span class="ln">    42</span>					ift = append(ift, ifi)
<a id="L43"></a><span class="ln">    43</span>				}
<a id="L44"></a><span class="ln">    44</span>			}
<a id="L45"></a><span class="ln">    45</span>		}
<a id="L46"></a><span class="ln">    46</span>	done:
<a id="L47"></a><span class="ln">    47</span>		return ift, nil
<a id="L48"></a><span class="ln">    48</span>	}
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>	func newLink(ifim *syscall.IfInfomsg, attrs []syscall.NetlinkRouteAttr) Interface {
<a id="L51"></a><span class="ln">    51</span>		ifi := Interface{Index: int(ifim.Index), Flags: linkFlags(ifim.Flags)}
<a id="L52"></a><span class="ln">    52</span>		for _, a := range attrs {
<a id="L53"></a><span class="ln">    53</span>			switch a.Attr.Type {
<a id="L54"></a><span class="ln">    54</span>			case syscall.IFLA_ADDRESS:
<a id="L55"></a><span class="ln">    55</span>				var nonzero bool
<a id="L56"></a><span class="ln">    56</span>				for _, b := range a.Value {
<a id="L57"></a><span class="ln">    57</span>					if b != 0 {
<a id="L58"></a><span class="ln">    58</span>						nonzero = true
<a id="L59"></a><span class="ln">    59</span>					}
<a id="L60"></a><span class="ln">    60</span>				}
<a id="L61"></a><span class="ln">    61</span>				if nonzero {
<a id="L62"></a><span class="ln">    62</span>					ifi.HardwareAddr = a.Value[:]
<a id="L63"></a><span class="ln">    63</span>				}
<a id="L64"></a><span class="ln">    64</span>			case syscall.IFLA_IFNAME:
<a id="L65"></a><span class="ln">    65</span>				ifi.Name = string(a.Value[:len(a.Value)-1])
<a id="L66"></a><span class="ln">    66</span>			case syscall.IFLA_MTU:
<a id="L67"></a><span class="ln">    67</span>				ifi.MTU = int(uint32(a.Value[3])&lt;&lt;24 | uint32(a.Value[2])&lt;&lt;16 | uint32(a.Value[1])&lt;&lt;8 | uint32(a.Value[0]))
<a id="L68"></a><span class="ln">    68</span>			}
<a id="L69"></a><span class="ln">    69</span>		}
<a id="L70"></a><span class="ln">    70</span>		return ifi
<a id="L71"></a><span class="ln">    71</span>	}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>	func linkFlags(rawFlags uint32) Flags {
<a id="L74"></a><span class="ln">    74</span>		var f Flags
<a id="L75"></a><span class="ln">    75</span>		if rawFlags&amp;syscall.IFF_UP != 0 {
<a id="L76"></a><span class="ln">    76</span>			f |= FlagUp
<a id="L77"></a><span class="ln">    77</span>		}
<a id="L78"></a><span class="ln">    78</span>		if rawFlags&amp;syscall.IFF_BROADCAST != 0 {
<a id="L79"></a><span class="ln">    79</span>			f |= FlagBroadcast
<a id="L80"></a><span class="ln">    80</span>		}
<a id="L81"></a><span class="ln">    81</span>		if rawFlags&amp;syscall.IFF_LOOPBACK != 0 {
<a id="L82"></a><span class="ln">    82</span>			f |= FlagLoopback
<a id="L83"></a><span class="ln">    83</span>		}
<a id="L84"></a><span class="ln">    84</span>		if rawFlags&amp;syscall.IFF_POINTOPOINT != 0 {
<a id="L85"></a><span class="ln">    85</span>			f |= FlagPointToPoint
<a id="L86"></a><span class="ln">    86</span>		}
<a id="L87"></a><span class="ln">    87</span>		if rawFlags&amp;syscall.IFF_MULTICAST != 0 {
<a id="L88"></a><span class="ln">    88</span>			f |= FlagMulticast
<a id="L89"></a><span class="ln">    89</span>		}
<a id="L90"></a><span class="ln">    90</span>		return f
<a id="L91"></a><span class="ln">    91</span>	}
<a id="L92"></a><span class="ln">    92</span>	
<a id="L93"></a><span class="ln">    93</span>	<span class="comment">// If the ifindex is zero, interfaceAddrTable returns addresses</span>
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// for all network interfaces.  Otherwise it returns addresses</span>
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">// for a specific interface.</span>
<a id="L96"></a><span class="ln">    96</span>	func interfaceAddrTable(ifindex int) ([]Addr, error) {
<a id="L97"></a><span class="ln">    97</span>		tab, err := syscall.NetlinkRIB(syscall.RTM_GETADDR, syscall.AF_UNSPEC)
<a id="L98"></a><span class="ln">    98</span>		if err != nil {
<a id="L99"></a><span class="ln">    99</span>			return nil, os.NewSyscallError(&#34;netlink rib&#34;, err)
<a id="L100"></a><span class="ln">   100</span>		}
<a id="L101"></a><span class="ln">   101</span>	
<a id="L102"></a><span class="ln">   102</span>		msgs, err := syscall.ParseNetlinkMessage(tab)
<a id="L103"></a><span class="ln">   103</span>		if err != nil {
<a id="L104"></a><span class="ln">   104</span>			return nil, os.NewSyscallError(&#34;netlink message&#34;, err)
<a id="L105"></a><span class="ln">   105</span>		}
<a id="L106"></a><span class="ln">   106</span>	
<a id="L107"></a><span class="ln">   107</span>		ifat, err := addrTable(msgs, ifindex)
<a id="L108"></a><span class="ln">   108</span>		if err != nil {
<a id="L109"></a><span class="ln">   109</span>			return nil, err
<a id="L110"></a><span class="ln">   110</span>		}
<a id="L111"></a><span class="ln">   111</span>		return ifat, nil
<a id="L112"></a><span class="ln">   112</span>	}
<a id="L113"></a><span class="ln">   113</span>	
<a id="L114"></a><span class="ln">   114</span>	func addrTable(msgs []syscall.NetlinkMessage, ifindex int) ([]Addr, error) {
<a id="L115"></a><span class="ln">   115</span>		var ifat []Addr
<a id="L116"></a><span class="ln">   116</span>		for _, m := range msgs {
<a id="L117"></a><span class="ln">   117</span>			switch m.Header.Type {
<a id="L118"></a><span class="ln">   118</span>			case syscall.NLMSG_DONE:
<a id="L119"></a><span class="ln">   119</span>				goto done
<a id="L120"></a><span class="ln">   120</span>			case syscall.RTM_NEWADDR:
<a id="L121"></a><span class="ln">   121</span>				ifam := (*syscall.IfAddrmsg)(unsafe.Pointer(&amp;m.Data[0]))
<a id="L122"></a><span class="ln">   122</span>				if ifindex == 0 || ifindex == int(ifam.Index) {
<a id="L123"></a><span class="ln">   123</span>					attrs, err := syscall.ParseNetlinkRouteAttr(&amp;m)
<a id="L124"></a><span class="ln">   124</span>					if err != nil {
<a id="L125"></a><span class="ln">   125</span>						return nil, os.NewSyscallError(&#34;netlink routeattr&#34;, err)
<a id="L126"></a><span class="ln">   126</span>					}
<a id="L127"></a><span class="ln">   127</span>					ifat = append(ifat, newAddr(attrs, int(ifam.Family), int(ifam.Prefixlen)))
<a id="L128"></a><span class="ln">   128</span>				}
<a id="L129"></a><span class="ln">   129</span>			}
<a id="L130"></a><span class="ln">   130</span>		}
<a id="L131"></a><span class="ln">   131</span>	done:
<a id="L132"></a><span class="ln">   132</span>		return ifat, nil
<a id="L133"></a><span class="ln">   133</span>	}
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>	func newAddr(attrs []syscall.NetlinkRouteAttr, family, pfxlen int) Addr {
<a id="L136"></a><span class="ln">   136</span>		ifa := &amp;IPNet{}
<a id="L137"></a><span class="ln">   137</span>		for _, a := range attrs {
<a id="L138"></a><span class="ln">   138</span>			switch a.Attr.Type {
<a id="L139"></a><span class="ln">   139</span>			case syscall.IFA_ADDRESS:
<a id="L140"></a><span class="ln">   140</span>				switch family {
<a id="L141"></a><span class="ln">   141</span>				case syscall.AF_INET:
<a id="L142"></a><span class="ln">   142</span>					ifa.IP = IPv4(a.Value[0], a.Value[1], a.Value[2], a.Value[3])
<a id="L143"></a><span class="ln">   143</span>					ifa.Mask = CIDRMask(pfxlen, 8*IPv4len)
<a id="L144"></a><span class="ln">   144</span>				case syscall.AF_INET6:
<a id="L145"></a><span class="ln">   145</span>					ifa.IP = make(IP, IPv6len)
<a id="L146"></a><span class="ln">   146</span>					copy(ifa.IP, a.Value[:])
<a id="L147"></a><span class="ln">   147</span>					ifa.Mask = CIDRMask(pfxlen, 8*IPv6len)
<a id="L148"></a><span class="ln">   148</span>				}
<a id="L149"></a><span class="ln">   149</span>			}
<a id="L150"></a><span class="ln">   150</span>		}
<a id="L151"></a><span class="ln">   151</span>		return ifa
<a id="L152"></a><span class="ln">   152</span>	}
<a id="L153"></a><span class="ln">   153</span>	
<a id="L154"></a><span class="ln">   154</span>	<span class="comment">// If the ifindex is zero, interfaceMulticastAddrTable returns</span>
<a id="L155"></a><span class="ln">   155</span>	<span class="comment">// addresses for all network interfaces.  Otherwise it returns</span>
<a id="L156"></a><span class="ln">   156</span>	<span class="comment">// addresses for a specific interface.</span>
<a id="L157"></a><span class="ln">   157</span>	func interfaceMulticastAddrTable(ifindex int) ([]Addr, error) {
<a id="L158"></a><span class="ln">   158</span>		var (
<a id="L159"></a><span class="ln">   159</span>			err error
<a id="L160"></a><span class="ln">   160</span>			ifi *Interface
<a id="L161"></a><span class="ln">   161</span>		)
<a id="L162"></a><span class="ln">   162</span>		if ifindex &gt; 0 {
<a id="L163"></a><span class="ln">   163</span>			ifi, err = InterfaceByIndex(ifindex)
<a id="L164"></a><span class="ln">   164</span>			if err != nil {
<a id="L165"></a><span class="ln">   165</span>				return nil, err
<a id="L166"></a><span class="ln">   166</span>			}
<a id="L167"></a><span class="ln">   167</span>		}
<a id="L168"></a><span class="ln">   168</span>		ifmat4 := parseProcNetIGMP(&#34;/proc/net/igmp&#34;, ifi)
<a id="L169"></a><span class="ln">   169</span>		ifmat6 := parseProcNetIGMP6(&#34;/proc/net/igmp6&#34;, ifi)
<a id="L170"></a><span class="ln">   170</span>		return append(ifmat4, ifmat6...), nil
<a id="L171"></a><span class="ln">   171</span>	}
<a id="L172"></a><span class="ln">   172</span>	
<a id="L173"></a><span class="ln">   173</span>	func parseProcNetIGMP(path string, ifi *Interface) []Addr {
<a id="L174"></a><span class="ln">   174</span>		fd, err := open(path)
<a id="L175"></a><span class="ln">   175</span>		if err != nil {
<a id="L176"></a><span class="ln">   176</span>			return nil
<a id="L177"></a><span class="ln">   177</span>		}
<a id="L178"></a><span class="ln">   178</span>		defer fd.close()
<a id="L179"></a><span class="ln">   179</span>	
<a id="L180"></a><span class="ln">   180</span>		var (
<a id="L181"></a><span class="ln">   181</span>			ifmat []Addr
<a id="L182"></a><span class="ln">   182</span>			name  string
<a id="L183"></a><span class="ln">   183</span>		)
<a id="L184"></a><span class="ln">   184</span>		fd.readLine() <span class="comment">// skip first line</span>
<a id="L185"></a><span class="ln">   185</span>		b := make([]byte, IPv4len)
<a id="L186"></a><span class="ln">   186</span>		for l, ok := fd.readLine(); ok; l, ok = fd.readLine() {
<a id="L187"></a><span class="ln">   187</span>			f := splitAtBytes(l, &#34; :\r\t\n&#34;)
<a id="L188"></a><span class="ln">   188</span>			if len(f) &lt; 4 {
<a id="L189"></a><span class="ln">   189</span>				continue
<a id="L190"></a><span class="ln">   190</span>			}
<a id="L191"></a><span class="ln">   191</span>			switch {
<a id="L192"></a><span class="ln">   192</span>			case l[0] != &#39; &#39; &amp;&amp; l[0] != &#39;\t&#39;: <span class="comment">// new interface line</span>
<a id="L193"></a><span class="ln">   193</span>				name = f[1]
<a id="L194"></a><span class="ln">   194</span>			case len(f[0]) == 8:
<a id="L195"></a><span class="ln">   195</span>				if ifi == nil || name == ifi.Name {
<a id="L196"></a><span class="ln">   196</span>					for i := 0; i+1 &lt; len(f[0]); i += 2 {
<a id="L197"></a><span class="ln">   197</span>						b[i/2], _ = xtoi2(f[0][i:i+2], 0)
<a id="L198"></a><span class="ln">   198</span>					}
<a id="L199"></a><span class="ln">   199</span>					ifma := IPAddr{IP: IPv4(b[3], b[2], b[1], b[0])}
<a id="L200"></a><span class="ln">   200</span>					ifmat = append(ifmat, ifma.toAddr())
<a id="L201"></a><span class="ln">   201</span>				}
<a id="L202"></a><span class="ln">   202</span>			}
<a id="L203"></a><span class="ln">   203</span>		}
<a id="L204"></a><span class="ln">   204</span>		return ifmat
<a id="L205"></a><span class="ln">   205</span>	}
<a id="L206"></a><span class="ln">   206</span>	
<a id="L207"></a><span class="ln">   207</span>	func parseProcNetIGMP6(path string, ifi *Interface) []Addr {
<a id="L208"></a><span class="ln">   208</span>		fd, err := open(path)
<a id="L209"></a><span class="ln">   209</span>		if err != nil {
<a id="L210"></a><span class="ln">   210</span>			return nil
<a id="L211"></a><span class="ln">   211</span>		}
<a id="L212"></a><span class="ln">   212</span>		defer fd.close()
<a id="L213"></a><span class="ln">   213</span>	
<a id="L214"></a><span class="ln">   214</span>		var ifmat []Addr
<a id="L215"></a><span class="ln">   215</span>		b := make([]byte, IPv6len)
<a id="L216"></a><span class="ln">   216</span>		for l, ok := fd.readLine(); ok; l, ok = fd.readLine() {
<a id="L217"></a><span class="ln">   217</span>			f := splitAtBytes(l, &#34; \r\t\n&#34;)
<a id="L218"></a><span class="ln">   218</span>			if len(f) &lt; 6 {
<a id="L219"></a><span class="ln">   219</span>				continue
<a id="L220"></a><span class="ln">   220</span>			}
<a id="L221"></a><span class="ln">   221</span>			if ifi == nil || f[1] == ifi.Name {
<a id="L222"></a><span class="ln">   222</span>				for i := 0; i+1 &lt; len(f[2]); i += 2 {
<a id="L223"></a><span class="ln">   223</span>					b[i/2], _ = xtoi2(f[2][i:i+2], 0)
<a id="L224"></a><span class="ln">   224</span>				}
<a id="L225"></a><span class="ln">   225</span>				ifma := IPAddr{IP: IP{b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], b[9], b[10], b[11], b[12], b[13], b[14], b[15]}}
<a id="L226"></a><span class="ln">   226</span>				ifmat = append(ifmat, ifma.toAddr())
<a id="L227"></a><span class="ln">   227</span>			}
<a id="L228"></a><span class="ln">   228</span>		}
<a id="L229"></a><span class="ln">   229</span>		return ifmat
<a id="L230"></a><span class="ln">   230</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

