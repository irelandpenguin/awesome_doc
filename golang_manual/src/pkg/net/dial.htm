<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/dial.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/dial.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package net
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;time&#34;
<a id="L9"></a><span class="ln">     9</span>	)
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	func parseDialNetwork(net string) (afnet string, proto int, err error) {
<a id="L12"></a><span class="ln">    12</span>		i := last(net, &#39;:&#39;)
<a id="L13"></a><span class="ln">    13</span>		if i &lt; 0 { <span class="comment">// no colon</span>
<a id="L14"></a><span class="ln">    14</span>			switch net {
<a id="L15"></a><span class="ln">    15</span>			case &#34;tcp&#34;, &#34;tcp4&#34;, &#34;tcp6&#34;:
<a id="L16"></a><span class="ln">    16</span>			case &#34;udp&#34;, &#34;udp4&#34;, &#34;udp6&#34;:
<a id="L17"></a><span class="ln">    17</span>			case &#34;unix&#34;, &#34;unixgram&#34;, &#34;unixpacket&#34;:
<a id="L18"></a><span class="ln">    18</span>			default:
<a id="L19"></a><span class="ln">    19</span>				return &#34;&#34;, 0, UnknownNetworkError(net)
<a id="L20"></a><span class="ln">    20</span>			}
<a id="L21"></a><span class="ln">    21</span>			return net, 0, nil
<a id="L22"></a><span class="ln">    22</span>		}
<a id="L23"></a><span class="ln">    23</span>		afnet = net[:i]
<a id="L24"></a><span class="ln">    24</span>		switch afnet {
<a id="L25"></a><span class="ln">    25</span>		case &#34;ip&#34;, &#34;ip4&#34;, &#34;ip6&#34;:
<a id="L26"></a><span class="ln">    26</span>			protostr := net[i+1:]
<a id="L27"></a><span class="ln">    27</span>			proto, i, ok := dtoi(protostr, 0)
<a id="L28"></a><span class="ln">    28</span>			if !ok || i != len(protostr) {
<a id="L29"></a><span class="ln">    29</span>				proto, err = lookupProtocol(protostr)
<a id="L30"></a><span class="ln">    30</span>				if err != nil {
<a id="L31"></a><span class="ln">    31</span>					return &#34;&#34;, 0, err
<a id="L32"></a><span class="ln">    32</span>				}
<a id="L33"></a><span class="ln">    33</span>			}
<a id="L34"></a><span class="ln">    34</span>			return afnet, proto, nil
<a id="L35"></a><span class="ln">    35</span>		}
<a id="L36"></a><span class="ln">    36</span>		return &#34;&#34;, 0, UnknownNetworkError(net)
<a id="L37"></a><span class="ln">    37</span>	}
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>	func resolveNetAddr(op, net, addr string) (afnet string, a Addr, err error) {
<a id="L40"></a><span class="ln">    40</span>		afnet, _, err = parseDialNetwork(net)
<a id="L41"></a><span class="ln">    41</span>		if err != nil {
<a id="L42"></a><span class="ln">    42</span>			return &#34;&#34;, nil, &amp;OpError{op, net, nil, err}
<a id="L43"></a><span class="ln">    43</span>		}
<a id="L44"></a><span class="ln">    44</span>		if op == &#34;dial&#34; &amp;&amp; addr == &#34;&#34; {
<a id="L45"></a><span class="ln">    45</span>			return &#34;&#34;, nil, &amp;OpError{op, net, nil, errMissingAddress}
<a id="L46"></a><span class="ln">    46</span>		}
<a id="L47"></a><span class="ln">    47</span>		switch afnet {
<a id="L48"></a><span class="ln">    48</span>		case &#34;tcp&#34;, &#34;tcp4&#34;, &#34;tcp6&#34;:
<a id="L49"></a><span class="ln">    49</span>			if addr != &#34;&#34; {
<a id="L50"></a><span class="ln">    50</span>				a, err = ResolveTCPAddr(afnet, addr)
<a id="L51"></a><span class="ln">    51</span>			}
<a id="L52"></a><span class="ln">    52</span>		case &#34;udp&#34;, &#34;udp4&#34;, &#34;udp6&#34;:
<a id="L53"></a><span class="ln">    53</span>			if addr != &#34;&#34; {
<a id="L54"></a><span class="ln">    54</span>				a, err = ResolveUDPAddr(afnet, addr)
<a id="L55"></a><span class="ln">    55</span>			}
<a id="L56"></a><span class="ln">    56</span>		case &#34;ip&#34;, &#34;ip4&#34;, &#34;ip6&#34;:
<a id="L57"></a><span class="ln">    57</span>			if addr != &#34;&#34; {
<a id="L58"></a><span class="ln">    58</span>				a, err = ResolveIPAddr(afnet, addr)
<a id="L59"></a><span class="ln">    59</span>			}
<a id="L60"></a><span class="ln">    60</span>		case &#34;unix&#34;, &#34;unixgram&#34;, &#34;unixpacket&#34;:
<a id="L61"></a><span class="ln">    61</span>			if addr != &#34;&#34; {
<a id="L62"></a><span class="ln">    62</span>				a, err = ResolveUnixAddr(afnet, addr)
<a id="L63"></a><span class="ln">    63</span>			}
<a id="L64"></a><span class="ln">    64</span>		}
<a id="L65"></a><span class="ln">    65</span>		return
<a id="L66"></a><span class="ln">    66</span>	}
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// Dial connects to the address addr on the network net.</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">//</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// Known networks are &#34;tcp&#34;, &#34;tcp4&#34; (IPv4-only), &#34;tcp6&#34; (IPv6-only),</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">// &#34;udp&#34;, &#34;udp4&#34; (IPv4-only), &#34;udp6&#34; (IPv6-only), &#34;ip&#34;, &#34;ip4&#34;</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">// (IPv4-only), &#34;ip6&#34; (IPv6-only), &#34;unix&#34; and &#34;unixpacket&#34;.</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">//</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">// For TCP and UDP networks, addresses have the form host:port.</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">// If host is a literal IPv6 address, it must be enclosed</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">// in square brackets.  The functions JoinHostPort and SplitHostPort</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// manipulate addresses in this form.</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">//</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// Examples:</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">//	Dial(&#34;tcp&#34;, &#34;12.34.56.78:80&#34;)</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">//	Dial(&#34;tcp&#34;, &#34;google.com:80&#34;)</span>
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">//	Dial(&#34;tcp&#34;, &#34;[de:ad:be:ef::ca:fe]:80&#34;)</span>
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">//</span>
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">// For IP networks, addr must be &#34;ip&#34;, &#34;ip4&#34; or &#34;ip6&#34; followed</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">// by a colon and a protocol number or name.</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">//</span>
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">// Examples:</span>
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">//	Dial(&#34;ip4:1&#34;, &#34;127.0.0.1&#34;)</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">//	Dial(&#34;ip6:ospf&#34;, &#34;::1&#34;)</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">//</span>
<a id="L91"></a><span class="ln">    91</span>	func Dial(net, addr string) (Conn, error) {
<a id="L92"></a><span class="ln">    92</span>		_, addri, err := resolveNetAddr(&#34;dial&#34;, net, addr)
<a id="L93"></a><span class="ln">    93</span>		if err != nil {
<a id="L94"></a><span class="ln">    94</span>			return nil, err
<a id="L95"></a><span class="ln">    95</span>		}
<a id="L96"></a><span class="ln">    96</span>		return dialAddr(net, addr, addri)
<a id="L97"></a><span class="ln">    97</span>	}
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>	func dialAddr(net, addr string, addri Addr) (c Conn, err error) {
<a id="L100"></a><span class="ln">   100</span>		switch ra := addri.(type) {
<a id="L101"></a><span class="ln">   101</span>		case *TCPAddr:
<a id="L102"></a><span class="ln">   102</span>			c, err = DialTCP(net, nil, ra)
<a id="L103"></a><span class="ln">   103</span>		case *UDPAddr:
<a id="L104"></a><span class="ln">   104</span>			c, err = DialUDP(net, nil, ra)
<a id="L105"></a><span class="ln">   105</span>		case *IPAddr:
<a id="L106"></a><span class="ln">   106</span>			c, err = DialIP(net, nil, ra)
<a id="L107"></a><span class="ln">   107</span>		case *UnixAddr:
<a id="L108"></a><span class="ln">   108</span>			c, err = DialUnix(net, nil, ra)
<a id="L109"></a><span class="ln">   109</span>		default:
<a id="L110"></a><span class="ln">   110</span>			err = &amp;OpError{&#34;dial&#34;, net + &#34; &#34; + addr, nil, UnknownNetworkError(net)}
<a id="L111"></a><span class="ln">   111</span>		}
<a id="L112"></a><span class="ln">   112</span>		if err != nil {
<a id="L113"></a><span class="ln">   113</span>			return nil, err
<a id="L114"></a><span class="ln">   114</span>		}
<a id="L115"></a><span class="ln">   115</span>		return
<a id="L116"></a><span class="ln">   116</span>	}
<a id="L117"></a><span class="ln">   117</span>	
<a id="L118"></a><span class="ln">   118</span>	<span class="comment">// DialTimeout acts like Dial but takes a timeout.</span>
<a id="L119"></a><span class="ln">   119</span>	<span class="comment">// The timeout includes name resolution, if required.</span>
<a id="L120"></a><span class="ln">   120</span>	func DialTimeout(net, addr string, timeout time.Duration) (Conn, error) {
<a id="L121"></a><span class="ln">   121</span>		<span class="comment">// TODO(bradfitz): the timeout should be pushed down into the</span>
<a id="L122"></a><span class="ln">   122</span>		<span class="comment">// net package&#39;s event loop, so on timeout to dead hosts we</span>
<a id="L123"></a><span class="ln">   123</span>		<span class="comment">// don&#39;t have a goroutine sticking around for the default of</span>
<a id="L124"></a><span class="ln">   124</span>		<span class="comment">// ~3 minutes.</span>
<a id="L125"></a><span class="ln">   125</span>		t := time.NewTimer(timeout)
<a id="L126"></a><span class="ln">   126</span>		defer t.Stop()
<a id="L127"></a><span class="ln">   127</span>		type pair struct {
<a id="L128"></a><span class="ln">   128</span>			Conn
<a id="L129"></a><span class="ln">   129</span>			error
<a id="L130"></a><span class="ln">   130</span>		}
<a id="L131"></a><span class="ln">   131</span>		ch := make(chan pair, 1)
<a id="L132"></a><span class="ln">   132</span>		resolvedAddr := make(chan Addr, 1)
<a id="L133"></a><span class="ln">   133</span>		go func() {
<a id="L134"></a><span class="ln">   134</span>			_, addri, err := resolveNetAddr(&#34;dial&#34;, net, addr)
<a id="L135"></a><span class="ln">   135</span>			if err != nil {
<a id="L136"></a><span class="ln">   136</span>				ch &lt;- pair{nil, err}
<a id="L137"></a><span class="ln">   137</span>				return
<a id="L138"></a><span class="ln">   138</span>			}
<a id="L139"></a><span class="ln">   139</span>			resolvedAddr &lt;- addri <span class="comment">// in case we need it for OpError</span>
<a id="L140"></a><span class="ln">   140</span>			c, err := dialAddr(net, addr, addri)
<a id="L141"></a><span class="ln">   141</span>			ch &lt;- pair{c, err}
<a id="L142"></a><span class="ln">   142</span>		}()
<a id="L143"></a><span class="ln">   143</span>		select {
<a id="L144"></a><span class="ln">   144</span>		case &lt;-t.C:
<a id="L145"></a><span class="ln">   145</span>			<span class="comment">// Try to use the real Addr in our OpError, if we resolved it</span>
<a id="L146"></a><span class="ln">   146</span>			<span class="comment">// before the timeout. Otherwise we just use stringAddr.</span>
<a id="L147"></a><span class="ln">   147</span>			var addri Addr
<a id="L148"></a><span class="ln">   148</span>			select {
<a id="L149"></a><span class="ln">   149</span>			case a := &lt;-resolvedAddr:
<a id="L150"></a><span class="ln">   150</span>				addri = a
<a id="L151"></a><span class="ln">   151</span>			default:
<a id="L152"></a><span class="ln">   152</span>				addri = &amp;stringAddr{net, addr}
<a id="L153"></a><span class="ln">   153</span>			}
<a id="L154"></a><span class="ln">   154</span>			err := &amp;OpError{
<a id="L155"></a><span class="ln">   155</span>				Op:   &#34;dial&#34;,
<a id="L156"></a><span class="ln">   156</span>				Net:  net,
<a id="L157"></a><span class="ln">   157</span>				Addr: addri,
<a id="L158"></a><span class="ln">   158</span>				Err:  &amp;timeoutError{},
<a id="L159"></a><span class="ln">   159</span>			}
<a id="L160"></a><span class="ln">   160</span>			return nil, err
<a id="L161"></a><span class="ln">   161</span>		case p := &lt;-ch:
<a id="L162"></a><span class="ln">   162</span>			return p.Conn, p.error
<a id="L163"></a><span class="ln">   163</span>		}
<a id="L164"></a><span class="ln">   164</span>		panic(&#34;unreachable&#34;)
<a id="L165"></a><span class="ln">   165</span>	}
<a id="L166"></a><span class="ln">   166</span>	
<a id="L167"></a><span class="ln">   167</span>	type stringAddr struct {
<a id="L168"></a><span class="ln">   168</span>		net, addr string
<a id="L169"></a><span class="ln">   169</span>	}
<a id="L170"></a><span class="ln">   170</span>	
<a id="L171"></a><span class="ln">   171</span>	func (a stringAddr) Network() string { return a.net }
<a id="L172"></a><span class="ln">   172</span>	func (a stringAddr) String() string  { return a.addr }
<a id="L173"></a><span class="ln">   173</span>	
<a id="L174"></a><span class="ln">   174</span>	<span class="comment">// Listen announces on the local network address laddr.</span>
<a id="L175"></a><span class="ln">   175</span>	<span class="comment">// The network string net must be a stream-oriented network:</span>
<a id="L176"></a><span class="ln">   176</span>	<span class="comment">// &#34;tcp&#34;, &#34;tcp4&#34;, &#34;tcp6&#34;, or &#34;unix&#34;, or &#34;unixpacket&#34;.</span>
<a id="L177"></a><span class="ln">   177</span>	func Listen(net, laddr string) (Listener, error) {
<a id="L178"></a><span class="ln">   178</span>		afnet, a, err := resolveNetAddr(&#34;listen&#34;, net, laddr)
<a id="L179"></a><span class="ln">   179</span>		if err != nil {
<a id="L180"></a><span class="ln">   180</span>			return nil, err
<a id="L181"></a><span class="ln">   181</span>		}
<a id="L182"></a><span class="ln">   182</span>		switch afnet {
<a id="L183"></a><span class="ln">   183</span>		case &#34;tcp&#34;, &#34;tcp4&#34;, &#34;tcp6&#34;:
<a id="L184"></a><span class="ln">   184</span>			var la *TCPAddr
<a id="L185"></a><span class="ln">   185</span>			if a != nil {
<a id="L186"></a><span class="ln">   186</span>				la = a.(*TCPAddr)
<a id="L187"></a><span class="ln">   187</span>			}
<a id="L188"></a><span class="ln">   188</span>			return ListenTCP(net, la)
<a id="L189"></a><span class="ln">   189</span>		case &#34;unix&#34;, &#34;unixpacket&#34;:
<a id="L190"></a><span class="ln">   190</span>			var la *UnixAddr
<a id="L191"></a><span class="ln">   191</span>			if a != nil {
<a id="L192"></a><span class="ln">   192</span>				la = a.(*UnixAddr)
<a id="L193"></a><span class="ln">   193</span>			}
<a id="L194"></a><span class="ln">   194</span>			return ListenUnix(net, la)
<a id="L195"></a><span class="ln">   195</span>		}
<a id="L196"></a><span class="ln">   196</span>		return nil, UnknownNetworkError(net)
<a id="L197"></a><span class="ln">   197</span>	}
<a id="L198"></a><span class="ln">   198</span>	
<a id="L199"></a><span class="ln">   199</span>	<span class="comment">// ListenPacket announces on the local network address laddr.</span>
<a id="L200"></a><span class="ln">   200</span>	<span class="comment">// The network string net must be a packet-oriented network:</span>
<a id="L201"></a><span class="ln">   201</span>	<span class="comment">// &#34;udp&#34;, &#34;udp4&#34;, &#34;udp6&#34;, &#34;ip&#34;, &#34;ip4&#34;, &#34;ip6&#34; or &#34;unixgram&#34;.</span>
<a id="L202"></a><span class="ln">   202</span>	func ListenPacket(net, addr string) (PacketConn, error) {
<a id="L203"></a><span class="ln">   203</span>		afnet, a, err := resolveNetAddr(&#34;listen&#34;, net, addr)
<a id="L204"></a><span class="ln">   204</span>		if err != nil {
<a id="L205"></a><span class="ln">   205</span>			return nil, err
<a id="L206"></a><span class="ln">   206</span>		}
<a id="L207"></a><span class="ln">   207</span>		switch afnet {
<a id="L208"></a><span class="ln">   208</span>		case &#34;udp&#34;, &#34;udp4&#34;, &#34;udp6&#34;:
<a id="L209"></a><span class="ln">   209</span>			var la *UDPAddr
<a id="L210"></a><span class="ln">   210</span>			if a != nil {
<a id="L211"></a><span class="ln">   211</span>				la = a.(*UDPAddr)
<a id="L212"></a><span class="ln">   212</span>			}
<a id="L213"></a><span class="ln">   213</span>			return ListenUDP(net, la)
<a id="L214"></a><span class="ln">   214</span>		case &#34;ip&#34;, &#34;ip4&#34;, &#34;ip6&#34;:
<a id="L215"></a><span class="ln">   215</span>			var la *IPAddr
<a id="L216"></a><span class="ln">   216</span>			if a != nil {
<a id="L217"></a><span class="ln">   217</span>				la = a.(*IPAddr)
<a id="L218"></a><span class="ln">   218</span>			}
<a id="L219"></a><span class="ln">   219</span>			return ListenIP(net, la)
<a id="L220"></a><span class="ln">   220</span>		case &#34;unixgram&#34;:
<a id="L221"></a><span class="ln">   221</span>			var la *UnixAddr
<a id="L222"></a><span class="ln">   222</span>			if a != nil {
<a id="L223"></a><span class="ln">   223</span>				la = a.(*UnixAddr)
<a id="L224"></a><span class="ln">   224</span>			}
<a id="L225"></a><span class="ln">   225</span>			return DialUnix(net, la, nil)
<a id="L226"></a><span class="ln">   226</span>		}
<a id="L227"></a><span class="ln">   227</span>		return nil, UnknownNetworkError(net)
<a id="L228"></a><span class="ln">   228</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

