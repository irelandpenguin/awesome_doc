<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/mail/message.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/mail/message.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">/*
</span><a id="L6"></a><span class="ln">     6</span>	<span class="comment">Package mail implements parsing of mail messages.
</span><a id="L7"></a><span class="ln">     7</span>	<span class="comment">
</span><a id="L8"></a><span class="ln">     8</span>	<span class="comment">For the most part, this package follows the syntax as specified by RFC 5322.
</span><a id="L9"></a><span class="ln">     9</span>	<span class="comment">Notable divergences:
</span><a id="L10"></a><span class="ln">    10</span>	<span class="comment">	* Obsolete address formats are not parsed, including addresses with
</span><a id="L11"></a><span class="ln">    11</span>	<span class="comment">	  embedded route information.
</span><a id="L12"></a><span class="ln">    12</span>	<span class="comment">	* Group addresses are not parsed.
</span><a id="L13"></a><span class="ln">    13</span>	<span class="comment">	* The full range of spacing (the CFWS syntax element) is not supported,
</span><a id="L14"></a><span class="ln">    14</span>	<span class="comment">	  such as breaking addresses across lines.
</span><a id="L15"></a><span class="ln">    15</span>	<span class="comment">*/</span>
<a id="L16"></a><span class="ln">    16</span>	package mail
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	import (
<a id="L19"></a><span class="ln">    19</span>		&#34;bufio&#34;
<a id="L20"></a><span class="ln">    20</span>		&#34;bytes&#34;
<a id="L21"></a><span class="ln">    21</span>		&#34;encoding/base64&#34;
<a id="L22"></a><span class="ln">    22</span>		&#34;errors&#34;
<a id="L23"></a><span class="ln">    23</span>		&#34;fmt&#34;
<a id="L24"></a><span class="ln">    24</span>		&#34;io&#34;
<a id="L25"></a><span class="ln">    25</span>		&#34;io/ioutil&#34;
<a id="L26"></a><span class="ln">    26</span>		&#34;log&#34;
<a id="L27"></a><span class="ln">    27</span>		&#34;net/textproto&#34;
<a id="L28"></a><span class="ln">    28</span>		&#34;strconv&#34;
<a id="L29"></a><span class="ln">    29</span>		&#34;strings&#34;
<a id="L30"></a><span class="ln">    30</span>		&#34;time&#34;
<a id="L31"></a><span class="ln">    31</span>	)
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	var debug = debugT(false)
<a id="L34"></a><span class="ln">    34</span>	
<a id="L35"></a><span class="ln">    35</span>	type debugT bool
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>	func (d debugT) Printf(format string, args ...interface{}) {
<a id="L38"></a><span class="ln">    38</span>		if d {
<a id="L39"></a><span class="ln">    39</span>			log.Printf(format, args...)
<a id="L40"></a><span class="ln">    40</span>		}
<a id="L41"></a><span class="ln">    41</span>	}
<a id="L42"></a><span class="ln">    42</span>	
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">// A Message represents a parsed mail message.</span>
<a id="L44"></a><span class="ln">    44</span>	type Message struct {
<a id="L45"></a><span class="ln">    45</span>		Header Header
<a id="L46"></a><span class="ln">    46</span>		Body   io.Reader
<a id="L47"></a><span class="ln">    47</span>	}
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">// ReadMessage reads a message from r.</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// The headers are parsed, and the body of the message will be reading from r.</span>
<a id="L51"></a><span class="ln">    51</span>	func ReadMessage(r io.Reader) (msg *Message, err error) {
<a id="L52"></a><span class="ln">    52</span>		tp := textproto.NewReader(bufio.NewReader(r))
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>		hdr, err := tp.ReadMIMEHeader()
<a id="L55"></a><span class="ln">    55</span>		if err != nil {
<a id="L56"></a><span class="ln">    56</span>			return nil, err
<a id="L57"></a><span class="ln">    57</span>		}
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>		return &amp;Message{
<a id="L60"></a><span class="ln">    60</span>			Header: Header(hdr),
<a id="L61"></a><span class="ln">    61</span>			Body:   tp.R,
<a id="L62"></a><span class="ln">    62</span>		}, nil
<a id="L63"></a><span class="ln">    63</span>	}
<a id="L64"></a><span class="ln">    64</span>	
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// Layouts suitable for passing to time.Parse.</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">// These are tried in order.</span>
<a id="L67"></a><span class="ln">    67</span>	var dateLayouts []string
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>	func init() {
<a id="L70"></a><span class="ln">    70</span>		<span class="comment">// Generate layouts based on RFC 5322, section 3.3.</span>
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>		dows := [...]string{&#34;&#34;, &#34;Mon, &#34;}     <span class="comment">// day-of-week</span>
<a id="L73"></a><span class="ln">    73</span>		days := [...]string{&#34;2&#34;, &#34;02&#34;}       <span class="comment">// day = 1*2DIGIT</span>
<a id="L74"></a><span class="ln">    74</span>		years := [...]string{&#34;2006&#34;, &#34;06&#34;}   <span class="comment">// year = 4*DIGIT / 2*DIGIT</span>
<a id="L75"></a><span class="ln">    75</span>		seconds := [...]string{&#34;:05&#34;, &#34;&#34;}    <span class="comment">// second</span>
<a id="L76"></a><span class="ln">    76</span>		zones := [...]string{&#34;-0700&#34;, &#34;MST&#34;} <span class="comment">// zone = ((&#34;+&#34; / &#34;-&#34;) 4DIGIT) / &#34;GMT&#34; / ...</span>
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>		for _, dow := range dows {
<a id="L79"></a><span class="ln">    79</span>			for _, day := range days {
<a id="L80"></a><span class="ln">    80</span>				for _, year := range years {
<a id="L81"></a><span class="ln">    81</span>					for _, second := range seconds {
<a id="L82"></a><span class="ln">    82</span>						for _, zone := range zones {
<a id="L83"></a><span class="ln">    83</span>							s := dow + day + &#34; Jan &#34; + year + &#34; 15:04&#34; + second + &#34; &#34; + zone
<a id="L84"></a><span class="ln">    84</span>							dateLayouts = append(dateLayouts, s)
<a id="L85"></a><span class="ln">    85</span>						}
<a id="L86"></a><span class="ln">    86</span>					}
<a id="L87"></a><span class="ln">    87</span>				}
<a id="L88"></a><span class="ln">    88</span>			}
<a id="L89"></a><span class="ln">    89</span>		}
<a id="L90"></a><span class="ln">    90</span>	}
<a id="L91"></a><span class="ln">    91</span>	
<a id="L92"></a><span class="ln">    92</span>	func parseDate(date string) (time.Time, error) {
<a id="L93"></a><span class="ln">    93</span>		for _, layout := range dateLayouts {
<a id="L94"></a><span class="ln">    94</span>			t, err := time.Parse(layout, date)
<a id="L95"></a><span class="ln">    95</span>			if err == nil {
<a id="L96"></a><span class="ln">    96</span>				return t, nil
<a id="L97"></a><span class="ln">    97</span>			}
<a id="L98"></a><span class="ln">    98</span>		}
<a id="L99"></a><span class="ln">    99</span>		return time.Time{}, errors.New(&#34;mail: header could not be parsed&#34;)
<a id="L100"></a><span class="ln">   100</span>	}
<a id="L101"></a><span class="ln">   101</span>	
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">// A Header represents the key-value pairs in a mail message header.</span>
<a id="L103"></a><span class="ln">   103</span>	type Header map[string][]string
<a id="L104"></a><span class="ln">   104</span>	
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// Get gets the first value associated with the given key.</span>
<a id="L106"></a><span class="ln">   106</span>	<span class="comment">// If there are no values associated with the key, Get returns &#34;&#34;.</span>
<a id="L107"></a><span class="ln">   107</span>	func (h Header) Get(key string) string {
<a id="L108"></a><span class="ln">   108</span>		return textproto.MIMEHeader(h).Get(key)
<a id="L109"></a><span class="ln">   109</span>	}
<a id="L110"></a><span class="ln">   110</span>	
<a id="L111"></a><span class="ln">   111</span>	var ErrHeaderNotPresent = errors.New(&#34;mail: header not in message&#34;)
<a id="L112"></a><span class="ln">   112</span>	
<a id="L113"></a><span class="ln">   113</span>	<span class="comment">// Date parses the Date header field.</span>
<a id="L114"></a><span class="ln">   114</span>	func (h Header) Date() (time.Time, error) {
<a id="L115"></a><span class="ln">   115</span>		hdr := h.Get(&#34;Date&#34;)
<a id="L116"></a><span class="ln">   116</span>		if hdr == &#34;&#34; {
<a id="L117"></a><span class="ln">   117</span>			return time.Time{}, ErrHeaderNotPresent
<a id="L118"></a><span class="ln">   118</span>		}
<a id="L119"></a><span class="ln">   119</span>		return parseDate(hdr)
<a id="L120"></a><span class="ln">   120</span>	}
<a id="L121"></a><span class="ln">   121</span>	
<a id="L122"></a><span class="ln">   122</span>	<span class="comment">// AddressList parses the named header field as a list of addresses.</span>
<a id="L123"></a><span class="ln">   123</span>	func (h Header) AddressList(key string) ([]*Address, error) {
<a id="L124"></a><span class="ln">   124</span>		hdr := h.Get(key)
<a id="L125"></a><span class="ln">   125</span>		if hdr == &#34;&#34; {
<a id="L126"></a><span class="ln">   126</span>			return nil, ErrHeaderNotPresent
<a id="L127"></a><span class="ln">   127</span>		}
<a id="L128"></a><span class="ln">   128</span>		return newAddrParser(hdr).parseAddressList()
<a id="L129"></a><span class="ln">   129</span>	}
<a id="L130"></a><span class="ln">   130</span>	
<a id="L131"></a><span class="ln">   131</span>	<span class="comment">// Address represents a single mail address.</span>
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">// An address such as &#34;Barry Gibbs &lt;bg@example.com&gt;&#34; is represented</span>
<a id="L133"></a><span class="ln">   133</span>	<span class="comment">// as Address{Name: &#34;Barry Gibbs&#34;, Address: &#34;bg@example.com&#34;}.</span>
<a id="L134"></a><span class="ln">   134</span>	type Address struct {
<a id="L135"></a><span class="ln">   135</span>		Name    string <span class="comment">// Proper name; may be empty.</span>
<a id="L136"></a><span class="ln">   136</span>		Address string <span class="comment">// user@domain</span>
<a id="L137"></a><span class="ln">   137</span>	}
<a id="L138"></a><span class="ln">   138</span>	
<a id="L139"></a><span class="ln">   139</span>	<span class="comment">// String formats the address as a valid RFC 5322 address.</span>
<a id="L140"></a><span class="ln">   140</span>	<span class="comment">// If the address&#39;s name contains non-ASCII characters</span>
<a id="L141"></a><span class="ln">   141</span>	<span class="comment">// the name will be rendered according to RFC 2047.</span>
<a id="L142"></a><span class="ln">   142</span>	func (a *Address) String() string {
<a id="L143"></a><span class="ln">   143</span>		s := &#34;&lt;&#34; + a.Address + &#34;&gt;&#34;
<a id="L144"></a><span class="ln">   144</span>		if a.Name == &#34;&#34; {
<a id="L145"></a><span class="ln">   145</span>			return s
<a id="L146"></a><span class="ln">   146</span>		}
<a id="L147"></a><span class="ln">   147</span>		<span class="comment">// If every character is printable ASCII, quoting is simple.</span>
<a id="L148"></a><span class="ln">   148</span>		allPrintable := true
<a id="L149"></a><span class="ln">   149</span>		for i := 0; i &lt; len(a.Name); i++ {
<a id="L150"></a><span class="ln">   150</span>			if !isVchar(a.Name[i]) {
<a id="L151"></a><span class="ln">   151</span>				allPrintable = false
<a id="L152"></a><span class="ln">   152</span>				break
<a id="L153"></a><span class="ln">   153</span>			}
<a id="L154"></a><span class="ln">   154</span>		}
<a id="L155"></a><span class="ln">   155</span>		if allPrintable {
<a id="L156"></a><span class="ln">   156</span>			b := bytes.NewBufferString(`&#34;`)
<a id="L157"></a><span class="ln">   157</span>			for i := 0; i &lt; len(a.Name); i++ {
<a id="L158"></a><span class="ln">   158</span>				if !isQtext(a.Name[i]) {
<a id="L159"></a><span class="ln">   159</span>					b.WriteByte(&#39;\\&#39;)
<a id="L160"></a><span class="ln">   160</span>				}
<a id="L161"></a><span class="ln">   161</span>				b.WriteByte(a.Name[i])
<a id="L162"></a><span class="ln">   162</span>			}
<a id="L163"></a><span class="ln">   163</span>			b.WriteString(`&#34; `)
<a id="L164"></a><span class="ln">   164</span>			b.WriteString(s)
<a id="L165"></a><span class="ln">   165</span>			return b.String()
<a id="L166"></a><span class="ln">   166</span>		}
<a id="L167"></a><span class="ln">   167</span>	
<a id="L168"></a><span class="ln">   168</span>		<span class="comment">// UTF-8 &#34;Q&#34; encoding</span>
<a id="L169"></a><span class="ln">   169</span>		b := bytes.NewBufferString(&#34;=?utf-8?q?&#34;)
<a id="L170"></a><span class="ln">   170</span>		for i := 0; i &lt; len(a.Name); i++ {
<a id="L171"></a><span class="ln">   171</span>			switch c := a.Name[i]; {
<a id="L172"></a><span class="ln">   172</span>			case c == &#39; &#39;:
<a id="L173"></a><span class="ln">   173</span>				b.WriteByte(&#39;_&#39;)
<a id="L174"></a><span class="ln">   174</span>			case isVchar(c) &amp;&amp; c != &#39;=&#39; &amp;&amp; c != &#39;?&#39; &amp;&amp; c != &#39;_&#39;:
<a id="L175"></a><span class="ln">   175</span>				b.WriteByte(c)
<a id="L176"></a><span class="ln">   176</span>			default:
<a id="L177"></a><span class="ln">   177</span>				fmt.Fprintf(b, &#34;=%02X&#34;, c)
<a id="L178"></a><span class="ln">   178</span>			}
<a id="L179"></a><span class="ln">   179</span>		}
<a id="L180"></a><span class="ln">   180</span>		b.WriteString(&#34;?= &#34;)
<a id="L181"></a><span class="ln">   181</span>		b.WriteString(s)
<a id="L182"></a><span class="ln">   182</span>		return b.String()
<a id="L183"></a><span class="ln">   183</span>	}
<a id="L184"></a><span class="ln">   184</span>	
<a id="L185"></a><span class="ln">   185</span>	type addrParser []byte
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>	func newAddrParser(s string) *addrParser {
<a id="L188"></a><span class="ln">   188</span>		p := addrParser(s)
<a id="L189"></a><span class="ln">   189</span>		return &amp;p
<a id="L190"></a><span class="ln">   190</span>	}
<a id="L191"></a><span class="ln">   191</span>	
<a id="L192"></a><span class="ln">   192</span>	func (p *addrParser) parseAddressList() ([]*Address, error) {
<a id="L193"></a><span class="ln">   193</span>		var list []*Address
<a id="L194"></a><span class="ln">   194</span>		for {
<a id="L195"></a><span class="ln">   195</span>			p.skipSpace()
<a id="L196"></a><span class="ln">   196</span>			addr, err := p.parseAddress()
<a id="L197"></a><span class="ln">   197</span>			if err != nil {
<a id="L198"></a><span class="ln">   198</span>				return nil, err
<a id="L199"></a><span class="ln">   199</span>			}
<a id="L200"></a><span class="ln">   200</span>			list = append(list, addr)
<a id="L201"></a><span class="ln">   201</span>	
<a id="L202"></a><span class="ln">   202</span>			p.skipSpace()
<a id="L203"></a><span class="ln">   203</span>			if p.empty() {
<a id="L204"></a><span class="ln">   204</span>				break
<a id="L205"></a><span class="ln">   205</span>			}
<a id="L206"></a><span class="ln">   206</span>			if !p.consume(&#39;,&#39;) {
<a id="L207"></a><span class="ln">   207</span>				return nil, errors.New(&#34;mail: expected comma&#34;)
<a id="L208"></a><span class="ln">   208</span>			}
<a id="L209"></a><span class="ln">   209</span>		}
<a id="L210"></a><span class="ln">   210</span>		return list, nil
<a id="L211"></a><span class="ln">   211</span>	}
<a id="L212"></a><span class="ln">   212</span>	
<a id="L213"></a><span class="ln">   213</span>	<span class="comment">// parseAddress parses a single RFC 5322 address at the start of p.</span>
<a id="L214"></a><span class="ln">   214</span>	func (p *addrParser) parseAddress() (addr *Address, err error) {
<a id="L215"></a><span class="ln">   215</span>		debug.Printf(&#34;parseAddress: %q&#34;, *p)
<a id="L216"></a><span class="ln">   216</span>		p.skipSpace()
<a id="L217"></a><span class="ln">   217</span>		if p.empty() {
<a id="L218"></a><span class="ln">   218</span>			return nil, errors.New(&#34;mail: no address&#34;)
<a id="L219"></a><span class="ln">   219</span>		}
<a id="L220"></a><span class="ln">   220</span>	
<a id="L221"></a><span class="ln">   221</span>		<span class="comment">// address = name-addr / addr-spec</span>
<a id="L222"></a><span class="ln">   222</span>		<span class="comment">// TODO(dsymonds): Support parsing group address.</span>
<a id="L223"></a><span class="ln">   223</span>	
<a id="L224"></a><span class="ln">   224</span>		<span class="comment">// addr-spec has a more restricted grammar than name-addr,</span>
<a id="L225"></a><span class="ln">   225</span>		<span class="comment">// so try parsing it first, and fallback to name-addr.</span>
<a id="L226"></a><span class="ln">   226</span>		<span class="comment">// TODO(dsymonds): Is this really correct?</span>
<a id="L227"></a><span class="ln">   227</span>		spec, err := p.consumeAddrSpec()
<a id="L228"></a><span class="ln">   228</span>		if err == nil {
<a id="L229"></a><span class="ln">   229</span>			return &amp;Address{
<a id="L230"></a><span class="ln">   230</span>				Address: spec,
<a id="L231"></a><span class="ln">   231</span>			}, err
<a id="L232"></a><span class="ln">   232</span>		}
<a id="L233"></a><span class="ln">   233</span>		debug.Printf(&#34;parseAddress: not an addr-spec: %v&#34;, err)
<a id="L234"></a><span class="ln">   234</span>		debug.Printf(&#34;parseAddress: state is now %q&#34;, *p)
<a id="L235"></a><span class="ln">   235</span>	
<a id="L236"></a><span class="ln">   236</span>		<span class="comment">// display-name</span>
<a id="L237"></a><span class="ln">   237</span>		var displayName string
<a id="L238"></a><span class="ln">   238</span>		if p.peek() != &#39;&lt;&#39; {
<a id="L239"></a><span class="ln">   239</span>			displayName, err = p.consumePhrase()
<a id="L240"></a><span class="ln">   240</span>			if err != nil {
<a id="L241"></a><span class="ln">   241</span>				return nil, err
<a id="L242"></a><span class="ln">   242</span>			}
<a id="L243"></a><span class="ln">   243</span>		}
<a id="L244"></a><span class="ln">   244</span>		debug.Printf(&#34;parseAddress: displayName=%q&#34;, displayName)
<a id="L245"></a><span class="ln">   245</span>	
<a id="L246"></a><span class="ln">   246</span>		<span class="comment">// angle-addr = &#34;&lt;&#34; addr-spec &#34;&gt;&#34;</span>
<a id="L247"></a><span class="ln">   247</span>		p.skipSpace()
<a id="L248"></a><span class="ln">   248</span>		if !p.consume(&#39;&lt;&#39;) {
<a id="L249"></a><span class="ln">   249</span>			return nil, errors.New(&#34;mail: no angle-addr&#34;)
<a id="L250"></a><span class="ln">   250</span>		}
<a id="L251"></a><span class="ln">   251</span>		spec, err = p.consumeAddrSpec()
<a id="L252"></a><span class="ln">   252</span>		if err != nil {
<a id="L253"></a><span class="ln">   253</span>			return nil, err
<a id="L254"></a><span class="ln">   254</span>		}
<a id="L255"></a><span class="ln">   255</span>		if !p.consume(&#39;&gt;&#39;) {
<a id="L256"></a><span class="ln">   256</span>			return nil, errors.New(&#34;mail: unclosed angle-addr&#34;)
<a id="L257"></a><span class="ln">   257</span>		}
<a id="L258"></a><span class="ln">   258</span>		debug.Printf(&#34;parseAddress: spec=%q&#34;, spec)
<a id="L259"></a><span class="ln">   259</span>	
<a id="L260"></a><span class="ln">   260</span>		return &amp;Address{
<a id="L261"></a><span class="ln">   261</span>			Name:    displayName,
<a id="L262"></a><span class="ln">   262</span>			Address: spec,
<a id="L263"></a><span class="ln">   263</span>		}, nil
<a id="L264"></a><span class="ln">   264</span>	}
<a id="L265"></a><span class="ln">   265</span>	
<a id="L266"></a><span class="ln">   266</span>	<span class="comment">// consumeAddrSpec parses a single RFC 5322 addr-spec at the start of p.</span>
<a id="L267"></a><span class="ln">   267</span>	func (p *addrParser) consumeAddrSpec() (spec string, err error) {
<a id="L268"></a><span class="ln">   268</span>		debug.Printf(&#34;consumeAddrSpec: %q&#34;, *p)
<a id="L269"></a><span class="ln">   269</span>	
<a id="L270"></a><span class="ln">   270</span>		orig := *p
<a id="L271"></a><span class="ln">   271</span>		defer func() {
<a id="L272"></a><span class="ln">   272</span>			if err != nil {
<a id="L273"></a><span class="ln">   273</span>				*p = orig
<a id="L274"></a><span class="ln">   274</span>			}
<a id="L275"></a><span class="ln">   275</span>		}()
<a id="L276"></a><span class="ln">   276</span>	
<a id="L277"></a><span class="ln">   277</span>		<span class="comment">// local-part = dot-atom / quoted-string</span>
<a id="L278"></a><span class="ln">   278</span>		var localPart string
<a id="L279"></a><span class="ln">   279</span>		p.skipSpace()
<a id="L280"></a><span class="ln">   280</span>		if p.empty() {
<a id="L281"></a><span class="ln">   281</span>			return &#34;&#34;, errors.New(&#34;mail: no addr-spec&#34;)
<a id="L282"></a><span class="ln">   282</span>		}
<a id="L283"></a><span class="ln">   283</span>		if p.peek() == &#39;&#34;&#39; {
<a id="L284"></a><span class="ln">   284</span>			<span class="comment">// quoted-string</span>
<a id="L285"></a><span class="ln">   285</span>			debug.Printf(&#34;consumeAddrSpec: parsing quoted-string&#34;)
<a id="L286"></a><span class="ln">   286</span>			localPart, err = p.consumeQuotedString()
<a id="L287"></a><span class="ln">   287</span>		} else {
<a id="L288"></a><span class="ln">   288</span>			<span class="comment">// dot-atom</span>
<a id="L289"></a><span class="ln">   289</span>			debug.Printf(&#34;consumeAddrSpec: parsing dot-atom&#34;)
<a id="L290"></a><span class="ln">   290</span>			localPart, err = p.consumeAtom(true)
<a id="L291"></a><span class="ln">   291</span>		}
<a id="L292"></a><span class="ln">   292</span>		if err != nil {
<a id="L293"></a><span class="ln">   293</span>			debug.Printf(&#34;consumeAddrSpec: failed: %v&#34;, err)
<a id="L294"></a><span class="ln">   294</span>			return &#34;&#34;, err
<a id="L295"></a><span class="ln">   295</span>		}
<a id="L296"></a><span class="ln">   296</span>	
<a id="L297"></a><span class="ln">   297</span>		if !p.consume(&#39;@&#39;) {
<a id="L298"></a><span class="ln">   298</span>			return &#34;&#34;, errors.New(&#34;mail: missing @ in addr-spec&#34;)
<a id="L299"></a><span class="ln">   299</span>		}
<a id="L300"></a><span class="ln">   300</span>	
<a id="L301"></a><span class="ln">   301</span>		<span class="comment">// domain = dot-atom / domain-literal</span>
<a id="L302"></a><span class="ln">   302</span>		var domain string
<a id="L303"></a><span class="ln">   303</span>		p.skipSpace()
<a id="L304"></a><span class="ln">   304</span>		if p.empty() {
<a id="L305"></a><span class="ln">   305</span>			return &#34;&#34;, errors.New(&#34;mail: no domain in addr-spec&#34;)
<a id="L306"></a><span class="ln">   306</span>		}
<a id="L307"></a><span class="ln">   307</span>		<span class="comment">// TODO(dsymonds): Handle domain-literal</span>
<a id="L308"></a><span class="ln">   308</span>		domain, err = p.consumeAtom(true)
<a id="L309"></a><span class="ln">   309</span>		if err != nil {
<a id="L310"></a><span class="ln">   310</span>			return &#34;&#34;, err
<a id="L311"></a><span class="ln">   311</span>		}
<a id="L312"></a><span class="ln">   312</span>	
<a id="L313"></a><span class="ln">   313</span>		return localPart + &#34;@&#34; + domain, nil
<a id="L314"></a><span class="ln">   314</span>	}
<a id="L315"></a><span class="ln">   315</span>	
<a id="L316"></a><span class="ln">   316</span>	<span class="comment">// consumePhrase parses the RFC 5322 phrase at the start of p.</span>
<a id="L317"></a><span class="ln">   317</span>	func (p *addrParser) consumePhrase() (phrase string, err error) {
<a id="L318"></a><span class="ln">   318</span>		debug.Printf(&#34;consumePhrase: [%s]&#34;, *p)
<a id="L319"></a><span class="ln">   319</span>		<span class="comment">// phrase = 1*word</span>
<a id="L320"></a><span class="ln">   320</span>		var words []string
<a id="L321"></a><span class="ln">   321</span>		for {
<a id="L322"></a><span class="ln">   322</span>			<span class="comment">// word = atom / quoted-string</span>
<a id="L323"></a><span class="ln">   323</span>			var word string
<a id="L324"></a><span class="ln">   324</span>			p.skipSpace()
<a id="L325"></a><span class="ln">   325</span>			if p.empty() {
<a id="L326"></a><span class="ln">   326</span>				return &#34;&#34;, errors.New(&#34;mail: missing phrase&#34;)
<a id="L327"></a><span class="ln">   327</span>			}
<a id="L328"></a><span class="ln">   328</span>			if p.peek() == &#39;&#34;&#39; {
<a id="L329"></a><span class="ln">   329</span>				<span class="comment">// quoted-string</span>
<a id="L330"></a><span class="ln">   330</span>				word, err = p.consumeQuotedString()
<a id="L331"></a><span class="ln">   331</span>			} else {
<a id="L332"></a><span class="ln">   332</span>				<span class="comment">// atom</span>
<a id="L333"></a><span class="ln">   333</span>				word, err = p.consumeAtom(false)
<a id="L334"></a><span class="ln">   334</span>			}
<a id="L335"></a><span class="ln">   335</span>	
<a id="L336"></a><span class="ln">   336</span>			<span class="comment">// RFC 2047 encoded-word starts with =?, ends with ?=, and has two other ?s.</span>
<a id="L337"></a><span class="ln">   337</span>			if err == nil &amp;&amp; strings.HasPrefix(word, &#34;=?&#34;) &amp;&amp; strings.HasSuffix(word, &#34;?=&#34;) &amp;&amp; strings.Count(word, &#34;?&#34;) == 4 {
<a id="L338"></a><span class="ln">   338</span>				word, err = decodeRFC2047Word(word)
<a id="L339"></a><span class="ln">   339</span>			}
<a id="L340"></a><span class="ln">   340</span>	
<a id="L341"></a><span class="ln">   341</span>			if err != nil {
<a id="L342"></a><span class="ln">   342</span>				break
<a id="L343"></a><span class="ln">   343</span>			}
<a id="L344"></a><span class="ln">   344</span>			debug.Printf(&#34;consumePhrase: consumed %q&#34;, word)
<a id="L345"></a><span class="ln">   345</span>			words = append(words, word)
<a id="L346"></a><span class="ln">   346</span>		}
<a id="L347"></a><span class="ln">   347</span>		<span class="comment">// Ignore any error if we got at least one word.</span>
<a id="L348"></a><span class="ln">   348</span>		if err != nil &amp;&amp; len(words) == 0 {
<a id="L349"></a><span class="ln">   349</span>			debug.Printf(&#34;consumePhrase: hit err: %v&#34;, err)
<a id="L350"></a><span class="ln">   350</span>			return &#34;&#34;, errors.New(&#34;mail: missing word in phrase&#34;)
<a id="L351"></a><span class="ln">   351</span>		}
<a id="L352"></a><span class="ln">   352</span>		phrase = strings.Join(words, &#34; &#34;)
<a id="L353"></a><span class="ln">   353</span>		return phrase, nil
<a id="L354"></a><span class="ln">   354</span>	}
<a id="L355"></a><span class="ln">   355</span>	
<a id="L356"></a><span class="ln">   356</span>	<span class="comment">// consumeQuotedString parses the quoted string at the start of p.</span>
<a id="L357"></a><span class="ln">   357</span>	func (p *addrParser) consumeQuotedString() (qs string, err error) {
<a id="L358"></a><span class="ln">   358</span>		<span class="comment">// Assume first byte is &#39;&#34;&#39;.</span>
<a id="L359"></a><span class="ln">   359</span>		i := 1
<a id="L360"></a><span class="ln">   360</span>		qsb := make([]byte, 0, 10)
<a id="L361"></a><span class="ln">   361</span>	Loop:
<a id="L362"></a><span class="ln">   362</span>		for {
<a id="L363"></a><span class="ln">   363</span>			if i &gt;= p.len() {
<a id="L364"></a><span class="ln">   364</span>				return &#34;&#34;, errors.New(&#34;mail: unclosed quoted-string&#34;)
<a id="L365"></a><span class="ln">   365</span>			}
<a id="L366"></a><span class="ln">   366</span>			switch c := (*p)[i]; {
<a id="L367"></a><span class="ln">   367</span>			case c == &#39;&#34;&#39;:
<a id="L368"></a><span class="ln">   368</span>				break Loop
<a id="L369"></a><span class="ln">   369</span>			case c == &#39;\\&#39;:
<a id="L370"></a><span class="ln">   370</span>				if i+1 == p.len() {
<a id="L371"></a><span class="ln">   371</span>					return &#34;&#34;, errors.New(&#34;mail: unclosed quoted-string&#34;)
<a id="L372"></a><span class="ln">   372</span>				}
<a id="L373"></a><span class="ln">   373</span>				qsb = append(qsb, (*p)[i+1])
<a id="L374"></a><span class="ln">   374</span>				i += 2
<a id="L375"></a><span class="ln">   375</span>			case isQtext(c), c == &#39; &#39; || c == &#39;\t&#39;:
<a id="L376"></a><span class="ln">   376</span>				<span class="comment">// qtext (printable US-ASCII excluding &#34; and \), or</span>
<a id="L377"></a><span class="ln">   377</span>				<span class="comment">// FWS (almost; we&#39;re ignoring CRLF)</span>
<a id="L378"></a><span class="ln">   378</span>				qsb = append(qsb, c)
<a id="L379"></a><span class="ln">   379</span>				i++
<a id="L380"></a><span class="ln">   380</span>			default:
<a id="L381"></a><span class="ln">   381</span>				return &#34;&#34;, fmt.Errorf(&#34;mail: bad character in quoted-string: %q&#34;, c)
<a id="L382"></a><span class="ln">   382</span>			}
<a id="L383"></a><span class="ln">   383</span>		}
<a id="L384"></a><span class="ln">   384</span>		*p = (*p)[i+1:]
<a id="L385"></a><span class="ln">   385</span>		return string(qsb), nil
<a id="L386"></a><span class="ln">   386</span>	}
<a id="L387"></a><span class="ln">   387</span>	
<a id="L388"></a><span class="ln">   388</span>	<span class="comment">// consumeAtom parses an RFC 5322 atom at the start of p.</span>
<a id="L389"></a><span class="ln">   389</span>	<span class="comment">// If dot is true, consumeAtom parses an RFC 5322 dot-atom instead.</span>
<a id="L390"></a><span class="ln">   390</span>	func (p *addrParser) consumeAtom(dot bool) (atom string, err error) {
<a id="L391"></a><span class="ln">   391</span>		if !isAtext(p.peek(), false) {
<a id="L392"></a><span class="ln">   392</span>			return &#34;&#34;, errors.New(&#34;mail: invalid string&#34;)
<a id="L393"></a><span class="ln">   393</span>		}
<a id="L394"></a><span class="ln">   394</span>		i := 1
<a id="L395"></a><span class="ln">   395</span>		for ; i &lt; p.len() &amp;&amp; isAtext((*p)[i], dot); i++ {
<a id="L396"></a><span class="ln">   396</span>		}
<a id="L397"></a><span class="ln">   397</span>		atom, *p = string((*p)[:i]), (*p)[i:]
<a id="L398"></a><span class="ln">   398</span>		return atom, nil
<a id="L399"></a><span class="ln">   399</span>	}
<a id="L400"></a><span class="ln">   400</span>	
<a id="L401"></a><span class="ln">   401</span>	func (p *addrParser) consume(c byte) bool {
<a id="L402"></a><span class="ln">   402</span>		if p.empty() || p.peek() != c {
<a id="L403"></a><span class="ln">   403</span>			return false
<a id="L404"></a><span class="ln">   404</span>		}
<a id="L405"></a><span class="ln">   405</span>		*p = (*p)[1:]
<a id="L406"></a><span class="ln">   406</span>		return true
<a id="L407"></a><span class="ln">   407</span>	}
<a id="L408"></a><span class="ln">   408</span>	
<a id="L409"></a><span class="ln">   409</span>	<span class="comment">// skipSpace skips the leading space and tab characters.</span>
<a id="L410"></a><span class="ln">   410</span>	func (p *addrParser) skipSpace() {
<a id="L411"></a><span class="ln">   411</span>		*p = bytes.TrimLeft(*p, &#34; \t&#34;)
<a id="L412"></a><span class="ln">   412</span>	}
<a id="L413"></a><span class="ln">   413</span>	
<a id="L414"></a><span class="ln">   414</span>	func (p *addrParser) peek() byte {
<a id="L415"></a><span class="ln">   415</span>		return (*p)[0]
<a id="L416"></a><span class="ln">   416</span>	}
<a id="L417"></a><span class="ln">   417</span>	
<a id="L418"></a><span class="ln">   418</span>	func (p *addrParser) empty() bool {
<a id="L419"></a><span class="ln">   419</span>		return p.len() == 0
<a id="L420"></a><span class="ln">   420</span>	}
<a id="L421"></a><span class="ln">   421</span>	
<a id="L422"></a><span class="ln">   422</span>	func (p *addrParser) len() int {
<a id="L423"></a><span class="ln">   423</span>		return len(*p)
<a id="L424"></a><span class="ln">   424</span>	}
<a id="L425"></a><span class="ln">   425</span>	
<a id="L426"></a><span class="ln">   426</span>	func decodeRFC2047Word(s string) (string, error) {
<a id="L427"></a><span class="ln">   427</span>		fields := strings.Split(s, &#34;?&#34;)
<a id="L428"></a><span class="ln">   428</span>		if len(fields) != 5 || fields[0] != &#34;=&#34; || fields[4] != &#34;=&#34; {
<a id="L429"></a><span class="ln">   429</span>			return &#34;&#34;, errors.New(&#34;mail: address not RFC 2047 encoded&#34;)
<a id="L430"></a><span class="ln">   430</span>		}
<a id="L431"></a><span class="ln">   431</span>		charset, enc := strings.ToLower(fields[1]), strings.ToLower(fields[2])
<a id="L432"></a><span class="ln">   432</span>		if charset != &#34;iso-8859-1&#34; &amp;&amp; charset != &#34;utf-8&#34; {
<a id="L433"></a><span class="ln">   433</span>			return &#34;&#34;, fmt.Errorf(&#34;mail: charset not supported: %q&#34;, charset)
<a id="L434"></a><span class="ln">   434</span>		}
<a id="L435"></a><span class="ln">   435</span>	
<a id="L436"></a><span class="ln">   436</span>		in := bytes.NewBufferString(fields[3])
<a id="L437"></a><span class="ln">   437</span>		var r io.Reader
<a id="L438"></a><span class="ln">   438</span>		switch enc {
<a id="L439"></a><span class="ln">   439</span>		case &#34;b&#34;:
<a id="L440"></a><span class="ln">   440</span>			r = base64.NewDecoder(base64.StdEncoding, in)
<a id="L441"></a><span class="ln">   441</span>		case &#34;q&#34;:
<a id="L442"></a><span class="ln">   442</span>			r = qDecoder{r: in}
<a id="L443"></a><span class="ln">   443</span>		default:
<a id="L444"></a><span class="ln">   444</span>			return &#34;&#34;, fmt.Errorf(&#34;mail: RFC 2047 encoding not supported: %q&#34;, enc)
<a id="L445"></a><span class="ln">   445</span>		}
<a id="L446"></a><span class="ln">   446</span>	
<a id="L447"></a><span class="ln">   447</span>		dec, err := ioutil.ReadAll(r)
<a id="L448"></a><span class="ln">   448</span>		if err != nil {
<a id="L449"></a><span class="ln">   449</span>			return &#34;&#34;, err
<a id="L450"></a><span class="ln">   450</span>		}
<a id="L451"></a><span class="ln">   451</span>	
<a id="L452"></a><span class="ln">   452</span>		switch charset {
<a id="L453"></a><span class="ln">   453</span>		case &#34;iso-8859-1&#34;:
<a id="L454"></a><span class="ln">   454</span>			b := new(bytes.Buffer)
<a id="L455"></a><span class="ln">   455</span>			for _, c := range dec {
<a id="L456"></a><span class="ln">   456</span>				b.WriteRune(rune(c))
<a id="L457"></a><span class="ln">   457</span>			}
<a id="L458"></a><span class="ln">   458</span>			return b.String(), nil
<a id="L459"></a><span class="ln">   459</span>		case &#34;utf-8&#34;:
<a id="L460"></a><span class="ln">   460</span>			return string(dec), nil
<a id="L461"></a><span class="ln">   461</span>		}
<a id="L462"></a><span class="ln">   462</span>		panic(&#34;unreachable&#34;)
<a id="L463"></a><span class="ln">   463</span>	}
<a id="L464"></a><span class="ln">   464</span>	
<a id="L465"></a><span class="ln">   465</span>	type qDecoder struct {
<a id="L466"></a><span class="ln">   466</span>		r       io.Reader
<a id="L467"></a><span class="ln">   467</span>		scratch [2]byte
<a id="L468"></a><span class="ln">   468</span>	}
<a id="L469"></a><span class="ln">   469</span>	
<a id="L470"></a><span class="ln">   470</span>	func (qd qDecoder) Read(p []byte) (n int, err error) {
<a id="L471"></a><span class="ln">   471</span>		<span class="comment">// This method writes at most one byte into p.</span>
<a id="L472"></a><span class="ln">   472</span>		if len(p) == 0 {
<a id="L473"></a><span class="ln">   473</span>			return 0, nil
<a id="L474"></a><span class="ln">   474</span>		}
<a id="L475"></a><span class="ln">   475</span>		if _, err := qd.r.Read(qd.scratch[:1]); err != nil {
<a id="L476"></a><span class="ln">   476</span>			return 0, err
<a id="L477"></a><span class="ln">   477</span>		}
<a id="L478"></a><span class="ln">   478</span>		switch c := qd.scratch[0]; {
<a id="L479"></a><span class="ln">   479</span>		case c == &#39;=&#39;:
<a id="L480"></a><span class="ln">   480</span>			if _, err := io.ReadFull(qd.r, qd.scratch[:2]); err != nil {
<a id="L481"></a><span class="ln">   481</span>				return 0, err
<a id="L482"></a><span class="ln">   482</span>			}
<a id="L483"></a><span class="ln">   483</span>			x, err := strconv.ParseInt(string(qd.scratch[:2]), 16, 64)
<a id="L484"></a><span class="ln">   484</span>			if err != nil {
<a id="L485"></a><span class="ln">   485</span>				return 0, fmt.Errorf(&#34;mail: invalid RFC 2047 encoding: %q&#34;, qd.scratch[:2])
<a id="L486"></a><span class="ln">   486</span>			}
<a id="L487"></a><span class="ln">   487</span>			p[0] = byte(x)
<a id="L488"></a><span class="ln">   488</span>		case c == &#39;_&#39;:
<a id="L489"></a><span class="ln">   489</span>			p[0] = &#39; &#39;
<a id="L490"></a><span class="ln">   490</span>		default:
<a id="L491"></a><span class="ln">   491</span>			p[0] = c
<a id="L492"></a><span class="ln">   492</span>		}
<a id="L493"></a><span class="ln">   493</span>		return 1, nil
<a id="L494"></a><span class="ln">   494</span>	}
<a id="L495"></a><span class="ln">   495</span>	
<a id="L496"></a><span class="ln">   496</span>	var atextChars = []byte(&#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#34; +
<a id="L497"></a><span class="ln">   497</span>		&#34;abcdefghijklmnopqrstuvwxyz&#34; +
<a id="L498"></a><span class="ln">   498</span>		&#34;0123456789&#34; +
<a id="L499"></a><span class="ln">   499</span>		&#34;!#$%&amp;&#39;*+-/=?^_`{|}~&#34;)
<a id="L500"></a><span class="ln">   500</span>	
<a id="L501"></a><span class="ln">   501</span>	<span class="comment">// isAtext returns true if c is an RFC 5322 atext character.</span>
<a id="L502"></a><span class="ln">   502</span>	<span class="comment">// If dot is true, period is included.</span>
<a id="L503"></a><span class="ln">   503</span>	func isAtext(c byte, dot bool) bool {
<a id="L504"></a><span class="ln">   504</span>		if dot &amp;&amp; c == &#39;.&#39; {
<a id="L505"></a><span class="ln">   505</span>			return true
<a id="L506"></a><span class="ln">   506</span>		}
<a id="L507"></a><span class="ln">   507</span>		return bytes.IndexByte(atextChars, c) &gt;= 0
<a id="L508"></a><span class="ln">   508</span>	}
<a id="L509"></a><span class="ln">   509</span>	
<a id="L510"></a><span class="ln">   510</span>	<span class="comment">// isQtext returns true if c is an RFC 5322 qtest character.</span>
<a id="L511"></a><span class="ln">   511</span>	func isQtext(c byte) bool {
<a id="L512"></a><span class="ln">   512</span>		<span class="comment">// Printable US-ASCII, excluding backslash or quote.</span>
<a id="L513"></a><span class="ln">   513</span>		if c == &#39;\\&#39; || c == &#39;&#34;&#39; {
<a id="L514"></a><span class="ln">   514</span>			return false
<a id="L515"></a><span class="ln">   515</span>		}
<a id="L516"></a><span class="ln">   516</span>		return &#39;!&#39; &lt;= c &amp;&amp; c &lt;= &#39;~&#39;
<a id="L517"></a><span class="ln">   517</span>	}
<a id="L518"></a><span class="ln">   518</span>	
<a id="L519"></a><span class="ln">   519</span>	<span class="comment">// isVchar returns true if c is an RFC 5322 VCHAR character.</span>
<a id="L520"></a><span class="ln">   520</span>	func isVchar(c byte) bool {
<a id="L521"></a><span class="ln">   521</span>		<span class="comment">// Visible (printing) characters.</span>
<a id="L522"></a><span class="ln">   522</span>		return &#39;!&#39; &lt;= c &amp;&amp; c &lt;= &#39;~&#39;
<a id="L523"></a><span class="ln">   523</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

