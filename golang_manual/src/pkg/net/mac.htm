<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/mac.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/mac.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// MAC address manipulations</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package net
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import &#34;errors&#34;
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	const hexDigit = &#34;0123456789abcdef&#34;
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// A HardwareAddr represents a physical hardware address.</span>
<a id="L14"></a><span class="ln">    14</span>	type HardwareAddr []byte
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	func (a HardwareAddr) String() string {
<a id="L17"></a><span class="ln">    17</span>		if len(a) == 0 {
<a id="L18"></a><span class="ln">    18</span>			return &#34;&#34;
<a id="L19"></a><span class="ln">    19</span>		}
<a id="L20"></a><span class="ln">    20</span>		buf := make([]byte, 0, len(a)*3-1)
<a id="L21"></a><span class="ln">    21</span>		for i, b := range a {
<a id="L22"></a><span class="ln">    22</span>			if i &gt; 0 {
<a id="L23"></a><span class="ln">    23</span>				buf = append(buf, &#39;:&#39;)
<a id="L24"></a><span class="ln">    24</span>			}
<a id="L25"></a><span class="ln">    25</span>			buf = append(buf, hexDigit[b&gt;&gt;4])
<a id="L26"></a><span class="ln">    26</span>			buf = append(buf, hexDigit[b&amp;0xF])
<a id="L27"></a><span class="ln">    27</span>		}
<a id="L28"></a><span class="ln">    28</span>		return string(buf)
<a id="L29"></a><span class="ln">    29</span>	}
<a id="L30"></a><span class="ln">    30</span>	
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// ParseMAC parses s as an IEEE 802 MAC-48, EUI-48, or EUI-64 using one of the</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// following formats:</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">//   01:23:45:67:89:ab</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">//   01:23:45:67:89:ab:cd:ef</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//   01-23-45-67-89-ab</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//   01-23-45-67-89-ab-cd-ef</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">//   0123.4567.89ab</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//   0123.4567.89ab.cdef</span>
<a id="L39"></a><span class="ln">    39</span>	func ParseMAC(s string) (hw HardwareAddr, err error) {
<a id="L40"></a><span class="ln">    40</span>		if len(s) &lt; 14 {
<a id="L41"></a><span class="ln">    41</span>			goto error
<a id="L42"></a><span class="ln">    42</span>		}
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>		if s[2] == &#39;:&#39; || s[2] == &#39;-&#39; {
<a id="L45"></a><span class="ln">    45</span>			if (len(s)+1)%3 != 0 {
<a id="L46"></a><span class="ln">    46</span>				goto error
<a id="L47"></a><span class="ln">    47</span>			}
<a id="L48"></a><span class="ln">    48</span>			n := (len(s) + 1) / 3
<a id="L49"></a><span class="ln">    49</span>			if n != 6 &amp;&amp; n != 8 {
<a id="L50"></a><span class="ln">    50</span>				goto error
<a id="L51"></a><span class="ln">    51</span>			}
<a id="L52"></a><span class="ln">    52</span>			hw = make(HardwareAddr, n)
<a id="L53"></a><span class="ln">    53</span>			for x, i := 0, 0; i &lt; n; i++ {
<a id="L54"></a><span class="ln">    54</span>				var ok bool
<a id="L55"></a><span class="ln">    55</span>				if hw[i], ok = xtoi2(s[x:], s[2]); !ok {
<a id="L56"></a><span class="ln">    56</span>					goto error
<a id="L57"></a><span class="ln">    57</span>				}
<a id="L58"></a><span class="ln">    58</span>				x += 3
<a id="L59"></a><span class="ln">    59</span>			}
<a id="L60"></a><span class="ln">    60</span>		} else if s[4] == &#39;.&#39; {
<a id="L61"></a><span class="ln">    61</span>			if (len(s)+1)%5 != 0 {
<a id="L62"></a><span class="ln">    62</span>				goto error
<a id="L63"></a><span class="ln">    63</span>			}
<a id="L64"></a><span class="ln">    64</span>			n := 2 * (len(s) + 1) / 5
<a id="L65"></a><span class="ln">    65</span>			if n != 6 &amp;&amp; n != 8 {
<a id="L66"></a><span class="ln">    66</span>				goto error
<a id="L67"></a><span class="ln">    67</span>			}
<a id="L68"></a><span class="ln">    68</span>			hw = make(HardwareAddr, n)
<a id="L69"></a><span class="ln">    69</span>			for x, i := 0, 0; i &lt; n; i += 2 {
<a id="L70"></a><span class="ln">    70</span>				var ok bool
<a id="L71"></a><span class="ln">    71</span>				if hw[i], ok = xtoi2(s[x:x+2], 0); !ok {
<a id="L72"></a><span class="ln">    72</span>					goto error
<a id="L73"></a><span class="ln">    73</span>				}
<a id="L74"></a><span class="ln">    74</span>				if hw[i+1], ok = xtoi2(s[x+2:], s[4]); !ok {
<a id="L75"></a><span class="ln">    75</span>					goto error
<a id="L76"></a><span class="ln">    76</span>				}
<a id="L77"></a><span class="ln">    77</span>				x += 5
<a id="L78"></a><span class="ln">    78</span>			}
<a id="L79"></a><span class="ln">    79</span>		} else {
<a id="L80"></a><span class="ln">    80</span>			goto error
<a id="L81"></a><span class="ln">    81</span>		}
<a id="L82"></a><span class="ln">    82</span>		return hw, nil
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>	error:
<a id="L85"></a><span class="ln">    85</span>		return nil, errors.New(&#34;invalid MAC address: &#34; + s)
<a id="L86"></a><span class="ln">    86</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

