<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/ipsock_posix.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/ipsock_posix.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// +build darwin freebsd linux netbsd openbsd windows</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package net
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import &#34;syscall&#34;
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// Should we try to use the IPv4 socket interface if we&#39;re</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// only dealing with IPv4 sockets?  As long as the host system</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// understands IPv6, it&#39;s okay to pass IPv4 addresses to the IPv6</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// interface.  That simplifies our code and is most general.</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// Unfortunately, we need to run on kernels built without IPv6</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// support too.  So probe the kernel to figure it out.</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">//</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// probeIPv6Stack probes both basic IPv6 capability and IPv6 IPv4-</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// mapping capability which is controlled by IPV6_V6ONLY socket</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// option and/or kernel state &#34;net.inet6.ip6.v6only&#34;.</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// It returns two boolean values.  If the first boolean value is</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// true, kernel supports basic IPv6 functionality.  If the second</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// boolean value is true, kernel supports IPv6 IPv4-mapping.</span>
<a id="L24"></a><span class="ln">    24</span>	func probeIPv6Stack() (supportsIPv6, supportsIPv4map bool) {
<a id="L25"></a><span class="ln">    25</span>		var probes = []struct {
<a id="L26"></a><span class="ln">    26</span>			la TCPAddr
<a id="L27"></a><span class="ln">    27</span>			ok bool
<a id="L28"></a><span class="ln">    28</span>		}{
<a id="L29"></a><span class="ln">    29</span>			<span class="comment">// IPv6 communication capability</span>
<a id="L30"></a><span class="ln">    30</span>			{TCPAddr{IP: ParseIP(&#34;::1&#34;)}, false},
<a id="L31"></a><span class="ln">    31</span>			<span class="comment">// IPv6 IPv4-mapped address communication capability</span>
<a id="L32"></a><span class="ln">    32</span>			{TCPAddr{IP: IPv4(127, 0, 0, 1)}, false},
<a id="L33"></a><span class="ln">    33</span>		}
<a id="L34"></a><span class="ln">    34</span>	
<a id="L35"></a><span class="ln">    35</span>		for i := range probes {
<a id="L36"></a><span class="ln">    36</span>			s, err := syscall.Socket(syscall.AF_INET6, syscall.SOCK_STREAM, syscall.IPPROTO_TCP)
<a id="L37"></a><span class="ln">    37</span>			if err != nil {
<a id="L38"></a><span class="ln">    38</span>				continue
<a id="L39"></a><span class="ln">    39</span>			}
<a id="L40"></a><span class="ln">    40</span>			defer closesocket(s)
<a id="L41"></a><span class="ln">    41</span>			syscall.SetsockoptInt(s, syscall.IPPROTO_IPV6, syscall.IPV6_V6ONLY, 0)
<a id="L42"></a><span class="ln">    42</span>			sa, err := probes[i].la.toAddr().sockaddr(syscall.AF_INET6)
<a id="L43"></a><span class="ln">    43</span>			if err != nil {
<a id="L44"></a><span class="ln">    44</span>				continue
<a id="L45"></a><span class="ln">    45</span>			}
<a id="L46"></a><span class="ln">    46</span>			err = syscall.Bind(s, sa)
<a id="L47"></a><span class="ln">    47</span>			if err != nil {
<a id="L48"></a><span class="ln">    48</span>				continue
<a id="L49"></a><span class="ln">    49</span>			}
<a id="L50"></a><span class="ln">    50</span>			probes[i].ok = true
<a id="L51"></a><span class="ln">    51</span>		}
<a id="L52"></a><span class="ln">    52</span>	
<a id="L53"></a><span class="ln">    53</span>		return probes[0].ok, probes[1].ok
<a id="L54"></a><span class="ln">    54</span>	}
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// favoriteAddrFamily returns the appropriate address family to</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">// the given net, laddr, raddr and mode.  At first it figures</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// address family out from the net.  If mode indicates &#34;listen&#34;</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// and laddr is a wildcard, it assumes that the user wants to</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// make a passive connection with a wildcard address family, both</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">// AF_INET and AF_INET6, and a wildcard address like following:</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">//</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">//	1. A wild-wild listen, &#34;tcp&#34; + &#34;&#34;</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">//	If the platform supports both IPv6 and IPv6 IPv4-mapping</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">//	capabilities, we assume that the user want to listen on</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">//	both IPv4 and IPv6 wildcard address over an AF_INET6</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">//	socket with IPV6_V6ONLY=0.  Otherwise we prefer an IPv4</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">//	wildcard address listen over an AF_INET socket.</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">//</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">//	2. A wild-ipv4wild listen, &#34;tcp&#34; + &#34;0.0.0.0&#34;</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">//	Same as 1.</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">//</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">//	3. A wild-ipv6wild listen, &#34;tcp&#34; + &#34;[::]&#34;</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">//	Almost same as 1 but we prefer an IPv6 wildcard address</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">//	listen over an AF_INET6 socket with IPV6_V6ONLY=0 when</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">//	the platform supports IPv6 capability but not IPv6 IPv4-</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">//	mapping capability.</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">//</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">//	4. A ipv4-ipv4wild listen, &#34;tcp4&#34; + &#34;&#34; or &#34;0.0.0.0&#34;</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">//	We use an IPv4 (AF_INET) wildcard address listen.</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">//</span>
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">//	5. A ipv6-ipv6wild listen, &#34;tcp6&#34; + &#34;&#34; or &#34;[::]&#34;</span>
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">//	We use an IPv6 (AF_INET6, IPV6_V6ONLY=1) wildcard address</span>
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">//	listen.</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">//</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// Otherwise guess: if the addresses are IPv4 then returns AF_INET,</span>
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">// or else returns AF_INET6.  It also returns a boolean value what</span>
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// designates IPV6_V6ONLY option.</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">//</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// Note that OpenBSD allows neither &#34;net.inet6.ip6.v6only=1&#34; change</span>
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// nor IPPROTO_IPV6 level IPV6_V6ONLY socket option setting.</span>
<a id="L92"></a><span class="ln">    92</span>	func favoriteAddrFamily(net string, laddr, raddr sockaddr, mode string) (family int, ipv6only bool) {
<a id="L93"></a><span class="ln">    93</span>		switch net[len(net)-1] {
<a id="L94"></a><span class="ln">    94</span>		case &#39;4&#39;:
<a id="L95"></a><span class="ln">    95</span>			return syscall.AF_INET, false
<a id="L96"></a><span class="ln">    96</span>		case &#39;6&#39;:
<a id="L97"></a><span class="ln">    97</span>			return syscall.AF_INET6, true
<a id="L98"></a><span class="ln">    98</span>		}
<a id="L99"></a><span class="ln">    99</span>	
<a id="L100"></a><span class="ln">   100</span>		if mode == &#34;listen&#34; &amp;&amp; laddr.isWildcard() {
<a id="L101"></a><span class="ln">   101</span>			if supportsIPv4map {
<a id="L102"></a><span class="ln">   102</span>				return syscall.AF_INET6, false
<a id="L103"></a><span class="ln">   103</span>			}
<a id="L104"></a><span class="ln">   104</span>			return laddr.family(), false
<a id="L105"></a><span class="ln">   105</span>		}
<a id="L106"></a><span class="ln">   106</span>	
<a id="L107"></a><span class="ln">   107</span>		if (laddr == nil || laddr.family() == syscall.AF_INET) &amp;&amp;
<a id="L108"></a><span class="ln">   108</span>			(raddr == nil || raddr.family() == syscall.AF_INET) {
<a id="L109"></a><span class="ln">   109</span>			return syscall.AF_INET, false
<a id="L110"></a><span class="ln">   110</span>		}
<a id="L111"></a><span class="ln">   111</span>		return syscall.AF_INET6, false
<a id="L112"></a><span class="ln">   112</span>	}
<a id="L113"></a><span class="ln">   113</span>	
<a id="L114"></a><span class="ln">   114</span>	<span class="comment">// Internet sockets (TCP, UDP, IP)</span>
<a id="L115"></a><span class="ln">   115</span>	
<a id="L116"></a><span class="ln">   116</span>	<span class="comment">// A sockaddr represents a TCP, UDP or IP network address that can</span>
<a id="L117"></a><span class="ln">   117</span>	<span class="comment">// be converted into a syscall.Sockaddr.</span>
<a id="L118"></a><span class="ln">   118</span>	type sockaddr interface {
<a id="L119"></a><span class="ln">   119</span>		Addr
<a id="L120"></a><span class="ln">   120</span>		family() int
<a id="L121"></a><span class="ln">   121</span>		isWildcard() bool
<a id="L122"></a><span class="ln">   122</span>		sockaddr(family int) (syscall.Sockaddr, error)
<a id="L123"></a><span class="ln">   123</span>	}
<a id="L124"></a><span class="ln">   124</span>	
<a id="L125"></a><span class="ln">   125</span>	func internetSocket(net string, laddr, raddr sockaddr, sotype, proto int, mode string, toAddr func(syscall.Sockaddr) Addr) (fd *netFD, err error) {
<a id="L126"></a><span class="ln">   126</span>		var la, ra syscall.Sockaddr
<a id="L127"></a><span class="ln">   127</span>		family, ipv6only := favoriteAddrFamily(net, laddr, raddr, mode)
<a id="L128"></a><span class="ln">   128</span>		if laddr != nil {
<a id="L129"></a><span class="ln">   129</span>			if la, err = laddr.sockaddr(family); err != nil {
<a id="L130"></a><span class="ln">   130</span>				goto Error
<a id="L131"></a><span class="ln">   131</span>			}
<a id="L132"></a><span class="ln">   132</span>		}
<a id="L133"></a><span class="ln">   133</span>		if raddr != nil {
<a id="L134"></a><span class="ln">   134</span>			if ra, err = raddr.sockaddr(family); err != nil {
<a id="L135"></a><span class="ln">   135</span>				goto Error
<a id="L136"></a><span class="ln">   136</span>			}
<a id="L137"></a><span class="ln">   137</span>		}
<a id="L138"></a><span class="ln">   138</span>		fd, err = socket(net, family, sotype, proto, ipv6only, la, ra, toAddr)
<a id="L139"></a><span class="ln">   139</span>		if err != nil {
<a id="L140"></a><span class="ln">   140</span>			goto Error
<a id="L141"></a><span class="ln">   141</span>		}
<a id="L142"></a><span class="ln">   142</span>		return fd, nil
<a id="L143"></a><span class="ln">   143</span>	
<a id="L144"></a><span class="ln">   144</span>	Error:
<a id="L145"></a><span class="ln">   145</span>		addr := raddr
<a id="L146"></a><span class="ln">   146</span>		if mode == &#34;listen&#34; {
<a id="L147"></a><span class="ln">   147</span>			addr = laddr
<a id="L148"></a><span class="ln">   148</span>		}
<a id="L149"></a><span class="ln">   149</span>		return nil, &amp;OpError{mode, net, addr, err}
<a id="L150"></a><span class="ln">   150</span>	}
<a id="L151"></a><span class="ln">   151</span>	
<a id="L152"></a><span class="ln">   152</span>	func ipToSockaddr(family int, ip IP, port int) (syscall.Sockaddr, error) {
<a id="L153"></a><span class="ln">   153</span>		switch family {
<a id="L154"></a><span class="ln">   154</span>		case syscall.AF_INET:
<a id="L155"></a><span class="ln">   155</span>			if len(ip) == 0 {
<a id="L156"></a><span class="ln">   156</span>				ip = IPv4zero
<a id="L157"></a><span class="ln">   157</span>			}
<a id="L158"></a><span class="ln">   158</span>			if ip = ip.To4(); ip == nil {
<a id="L159"></a><span class="ln">   159</span>				return nil, InvalidAddrError(&#34;non-IPv4 address&#34;)
<a id="L160"></a><span class="ln">   160</span>			}
<a id="L161"></a><span class="ln">   161</span>			s := new(syscall.SockaddrInet4)
<a id="L162"></a><span class="ln">   162</span>			for i := 0; i &lt; IPv4len; i++ {
<a id="L163"></a><span class="ln">   163</span>				s.Addr[i] = ip[i]
<a id="L164"></a><span class="ln">   164</span>			}
<a id="L165"></a><span class="ln">   165</span>			s.Port = port
<a id="L166"></a><span class="ln">   166</span>			return s, nil
<a id="L167"></a><span class="ln">   167</span>		case syscall.AF_INET6:
<a id="L168"></a><span class="ln">   168</span>			if len(ip) == 0 {
<a id="L169"></a><span class="ln">   169</span>				ip = IPv6zero
<a id="L170"></a><span class="ln">   170</span>			}
<a id="L171"></a><span class="ln">   171</span>			<span class="comment">// IPv4 callers use 0.0.0.0 to mean &#34;announce on any available address&#34;.</span>
<a id="L172"></a><span class="ln">   172</span>			<span class="comment">// In IPv6 mode, Linux treats that as meaning &#34;announce on 0.0.0.0&#34;,</span>
<a id="L173"></a><span class="ln">   173</span>			<span class="comment">// which it refuses to do.  Rewrite to the IPv6 unspecified address.</span>
<a id="L174"></a><span class="ln">   174</span>			if ip.Equal(IPv4zero) {
<a id="L175"></a><span class="ln">   175</span>				ip = IPv6zero
<a id="L176"></a><span class="ln">   176</span>			}
<a id="L177"></a><span class="ln">   177</span>			if ip = ip.To16(); ip == nil {
<a id="L178"></a><span class="ln">   178</span>				return nil, InvalidAddrError(&#34;non-IPv6 address&#34;)
<a id="L179"></a><span class="ln">   179</span>			}
<a id="L180"></a><span class="ln">   180</span>			s := new(syscall.SockaddrInet6)
<a id="L181"></a><span class="ln">   181</span>			for i := 0; i &lt; IPv6len; i++ {
<a id="L182"></a><span class="ln">   182</span>				s.Addr[i] = ip[i]
<a id="L183"></a><span class="ln">   183</span>			}
<a id="L184"></a><span class="ln">   184</span>			s.Port = port
<a id="L185"></a><span class="ln">   185</span>			return s, nil
<a id="L186"></a><span class="ln">   186</span>		}
<a id="L187"></a><span class="ln">   187</span>		return nil, InvalidAddrError(&#34;unexpected socket family&#34;)
<a id="L188"></a><span class="ln">   188</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

