<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/udpsock_posix.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/udpsock_posix.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// +build darwin freebsd linux netbsd openbsd windows</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// UDP sockets</span>
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	package net
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	import (
<a id="L12"></a><span class="ln">    12</span>		&#34;errors&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;os&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;syscall&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;time&#34;
<a id="L16"></a><span class="ln">    16</span>	)
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	var ErrWriteToConnected = errors.New(&#34;use of WriteTo with pre-connected UDP&#34;)
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	func sockaddrToUDP(sa syscall.Sockaddr) Addr {
<a id="L21"></a><span class="ln">    21</span>		switch sa := sa.(type) {
<a id="L22"></a><span class="ln">    22</span>		case *syscall.SockaddrInet4:
<a id="L23"></a><span class="ln">    23</span>			return &amp;UDPAddr{sa.Addr[0:], sa.Port}
<a id="L24"></a><span class="ln">    24</span>		case *syscall.SockaddrInet6:
<a id="L25"></a><span class="ln">    25</span>			return &amp;UDPAddr{sa.Addr[0:], sa.Port}
<a id="L26"></a><span class="ln">    26</span>		}
<a id="L27"></a><span class="ln">    27</span>		return nil
<a id="L28"></a><span class="ln">    28</span>	}
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>	func (a *UDPAddr) family() int {
<a id="L31"></a><span class="ln">    31</span>		if a == nil || len(a.IP) &lt;= IPv4len {
<a id="L32"></a><span class="ln">    32</span>			return syscall.AF_INET
<a id="L33"></a><span class="ln">    33</span>		}
<a id="L34"></a><span class="ln">    34</span>		if a.IP.To4() != nil {
<a id="L35"></a><span class="ln">    35</span>			return syscall.AF_INET
<a id="L36"></a><span class="ln">    36</span>		}
<a id="L37"></a><span class="ln">    37</span>		return syscall.AF_INET6
<a id="L38"></a><span class="ln">    38</span>	}
<a id="L39"></a><span class="ln">    39</span>	
<a id="L40"></a><span class="ln">    40</span>	func (a *UDPAddr) isWildcard() bool {
<a id="L41"></a><span class="ln">    41</span>		if a == nil || a.IP == nil {
<a id="L42"></a><span class="ln">    42</span>			return true
<a id="L43"></a><span class="ln">    43</span>		}
<a id="L44"></a><span class="ln">    44</span>		return a.IP.IsUnspecified()
<a id="L45"></a><span class="ln">    45</span>	}
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>	func (a *UDPAddr) sockaddr(family int) (syscall.Sockaddr, error) {
<a id="L48"></a><span class="ln">    48</span>		return ipToSockaddr(family, a.IP, a.Port)
<a id="L49"></a><span class="ln">    49</span>	}
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>	func (a *UDPAddr) toAddr() sockaddr {
<a id="L52"></a><span class="ln">    52</span>		if a == nil { <span class="comment">// nil *UDPAddr</span>
<a id="L53"></a><span class="ln">    53</span>			return nil <span class="comment">// nil interface</span>
<a id="L54"></a><span class="ln">    54</span>		}
<a id="L55"></a><span class="ln">    55</span>		return a
<a id="L56"></a><span class="ln">    56</span>	}
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// UDPConn is the implementation of the Conn and PacketConn</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// interfaces for UDP network connections.</span>
<a id="L60"></a><span class="ln">    60</span>	type UDPConn struct {
<a id="L61"></a><span class="ln">    61</span>		fd *netFD
<a id="L62"></a><span class="ln">    62</span>	}
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>	func newUDPConn(fd *netFD) *UDPConn { return &amp;UDPConn{fd} }
<a id="L65"></a><span class="ln">    65</span>	
<a id="L66"></a><span class="ln">    66</span>	func (c *UDPConn) ok() bool { return c != nil &amp;&amp; c.fd != nil }
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// Implementation of the Conn interface - see Conn for documentation.</span>
<a id="L69"></a><span class="ln">    69</span>	
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// Read implements the Conn Read method.</span>
<a id="L71"></a><span class="ln">    71</span>	func (c *UDPConn) Read(b []byte) (int, error) {
<a id="L72"></a><span class="ln">    72</span>		if !c.ok() {
<a id="L73"></a><span class="ln">    73</span>			return 0, syscall.EINVAL
<a id="L74"></a><span class="ln">    74</span>		}
<a id="L75"></a><span class="ln">    75</span>		return c.fd.Read(b)
<a id="L76"></a><span class="ln">    76</span>	}
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// Write implements the Conn Write method.</span>
<a id="L79"></a><span class="ln">    79</span>	func (c *UDPConn) Write(b []byte) (int, error) {
<a id="L80"></a><span class="ln">    80</span>		if !c.ok() {
<a id="L81"></a><span class="ln">    81</span>			return 0, syscall.EINVAL
<a id="L82"></a><span class="ln">    82</span>		}
<a id="L83"></a><span class="ln">    83</span>		return c.fd.Write(b)
<a id="L84"></a><span class="ln">    84</span>	}
<a id="L85"></a><span class="ln">    85</span>	
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// Close closes the UDP connection.</span>
<a id="L87"></a><span class="ln">    87</span>	func (c *UDPConn) Close() error {
<a id="L88"></a><span class="ln">    88</span>		if !c.ok() {
<a id="L89"></a><span class="ln">    89</span>			return syscall.EINVAL
<a id="L90"></a><span class="ln">    90</span>		}
<a id="L91"></a><span class="ln">    91</span>		return c.fd.Close()
<a id="L92"></a><span class="ln">    92</span>	}
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// LocalAddr returns the local network address.</span>
<a id="L95"></a><span class="ln">    95</span>	func (c *UDPConn) LocalAddr() Addr {
<a id="L96"></a><span class="ln">    96</span>		if !c.ok() {
<a id="L97"></a><span class="ln">    97</span>			return nil
<a id="L98"></a><span class="ln">    98</span>		}
<a id="L99"></a><span class="ln">    99</span>		return c.fd.laddr
<a id="L100"></a><span class="ln">   100</span>	}
<a id="L101"></a><span class="ln">   101</span>	
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">// RemoteAddr returns the remote network address, a *UDPAddr.</span>
<a id="L103"></a><span class="ln">   103</span>	func (c *UDPConn) RemoteAddr() Addr {
<a id="L104"></a><span class="ln">   104</span>		if !c.ok() {
<a id="L105"></a><span class="ln">   105</span>			return nil
<a id="L106"></a><span class="ln">   106</span>		}
<a id="L107"></a><span class="ln">   107</span>		return c.fd.raddr
<a id="L108"></a><span class="ln">   108</span>	}
<a id="L109"></a><span class="ln">   109</span>	
<a id="L110"></a><span class="ln">   110</span>	<span class="comment">// SetDeadline implements the Conn SetDeadline method.</span>
<a id="L111"></a><span class="ln">   111</span>	func (c *UDPConn) SetDeadline(t time.Time) error {
<a id="L112"></a><span class="ln">   112</span>		if !c.ok() {
<a id="L113"></a><span class="ln">   113</span>			return syscall.EINVAL
<a id="L114"></a><span class="ln">   114</span>		}
<a id="L115"></a><span class="ln">   115</span>		return setDeadline(c.fd, t)
<a id="L116"></a><span class="ln">   116</span>	}
<a id="L117"></a><span class="ln">   117</span>	
<a id="L118"></a><span class="ln">   118</span>	<span class="comment">// SetReadDeadline implements the Conn SetReadDeadline method.</span>
<a id="L119"></a><span class="ln">   119</span>	func (c *UDPConn) SetReadDeadline(t time.Time) error {
<a id="L120"></a><span class="ln">   120</span>		if !c.ok() {
<a id="L121"></a><span class="ln">   121</span>			return syscall.EINVAL
<a id="L122"></a><span class="ln">   122</span>		}
<a id="L123"></a><span class="ln">   123</span>		return setReadDeadline(c.fd, t)
<a id="L124"></a><span class="ln">   124</span>	}
<a id="L125"></a><span class="ln">   125</span>	
<a id="L126"></a><span class="ln">   126</span>	<span class="comment">// SetWriteDeadline implements the Conn SetWriteDeadline method.</span>
<a id="L127"></a><span class="ln">   127</span>	func (c *UDPConn) SetWriteDeadline(t time.Time) error {
<a id="L128"></a><span class="ln">   128</span>		if !c.ok() {
<a id="L129"></a><span class="ln">   129</span>			return syscall.EINVAL
<a id="L130"></a><span class="ln">   130</span>		}
<a id="L131"></a><span class="ln">   131</span>		return setWriteDeadline(c.fd, t)
<a id="L132"></a><span class="ln">   132</span>	}
<a id="L133"></a><span class="ln">   133</span>	
<a id="L134"></a><span class="ln">   134</span>	<span class="comment">// SetReadBuffer sets the size of the operating system&#39;s</span>
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">// receive buffer associated with the connection.</span>
<a id="L136"></a><span class="ln">   136</span>	func (c *UDPConn) SetReadBuffer(bytes int) error {
<a id="L137"></a><span class="ln">   137</span>		if !c.ok() {
<a id="L138"></a><span class="ln">   138</span>			return syscall.EINVAL
<a id="L139"></a><span class="ln">   139</span>		}
<a id="L140"></a><span class="ln">   140</span>		return setReadBuffer(c.fd, bytes)
<a id="L141"></a><span class="ln">   141</span>	}
<a id="L142"></a><span class="ln">   142</span>	
<a id="L143"></a><span class="ln">   143</span>	<span class="comment">// SetWriteBuffer sets the size of the operating system&#39;s</span>
<a id="L144"></a><span class="ln">   144</span>	<span class="comment">// transmit buffer associated with the connection.</span>
<a id="L145"></a><span class="ln">   145</span>	func (c *UDPConn) SetWriteBuffer(bytes int) error {
<a id="L146"></a><span class="ln">   146</span>		if !c.ok() {
<a id="L147"></a><span class="ln">   147</span>			return syscall.EINVAL
<a id="L148"></a><span class="ln">   148</span>		}
<a id="L149"></a><span class="ln">   149</span>		return setWriteBuffer(c.fd, bytes)
<a id="L150"></a><span class="ln">   150</span>	}
<a id="L151"></a><span class="ln">   151</span>	
<a id="L152"></a><span class="ln">   152</span>	<span class="comment">// UDP-specific methods.</span>
<a id="L153"></a><span class="ln">   153</span>	
<a id="L154"></a><span class="ln">   154</span>	<span class="comment">// ReadFromUDP reads a UDP packet from c, copying the payload into b.</span>
<a id="L155"></a><span class="ln">   155</span>	<span class="comment">// It returns the number of bytes copied into b and the return address</span>
<a id="L156"></a><span class="ln">   156</span>	<span class="comment">// that was on the packet.</span>
<a id="L157"></a><span class="ln">   157</span>	<span class="comment">//</span>
<a id="L158"></a><span class="ln">   158</span>	<span class="comment">// ReadFromUDP can be made to time out and return an error with Timeout() == true</span>
<a id="L159"></a><span class="ln">   159</span>	<span class="comment">// after a fixed time limit; see SetDeadline and SetReadDeadline.</span>
<a id="L160"></a><span class="ln">   160</span>	func (c *UDPConn) ReadFromUDP(b []byte) (n int, addr *UDPAddr, err error) {
<a id="L161"></a><span class="ln">   161</span>		if !c.ok() {
<a id="L162"></a><span class="ln">   162</span>			return 0, nil, syscall.EINVAL
<a id="L163"></a><span class="ln">   163</span>		}
<a id="L164"></a><span class="ln">   164</span>		n, sa, err := c.fd.ReadFrom(b)
<a id="L165"></a><span class="ln">   165</span>		switch sa := sa.(type) {
<a id="L166"></a><span class="ln">   166</span>		case *syscall.SockaddrInet4:
<a id="L167"></a><span class="ln">   167</span>			addr = &amp;UDPAddr{sa.Addr[0:], sa.Port}
<a id="L168"></a><span class="ln">   168</span>		case *syscall.SockaddrInet6:
<a id="L169"></a><span class="ln">   169</span>			addr = &amp;UDPAddr{sa.Addr[0:], sa.Port}
<a id="L170"></a><span class="ln">   170</span>		}
<a id="L171"></a><span class="ln">   171</span>		return
<a id="L172"></a><span class="ln">   172</span>	}
<a id="L173"></a><span class="ln">   173</span>	
<a id="L174"></a><span class="ln">   174</span>	<span class="comment">// ReadFrom implements the PacketConn ReadFrom method.</span>
<a id="L175"></a><span class="ln">   175</span>	func (c *UDPConn) ReadFrom(b []byte) (int, Addr, error) {
<a id="L176"></a><span class="ln">   176</span>		if !c.ok() {
<a id="L177"></a><span class="ln">   177</span>			return 0, nil, syscall.EINVAL
<a id="L178"></a><span class="ln">   178</span>		}
<a id="L179"></a><span class="ln">   179</span>		n, uaddr, err := c.ReadFromUDP(b)
<a id="L180"></a><span class="ln">   180</span>		return n, uaddr.toAddr(), err
<a id="L181"></a><span class="ln">   181</span>	}
<a id="L182"></a><span class="ln">   182</span>	
<a id="L183"></a><span class="ln">   183</span>	<span class="comment">// WriteToUDP writes a UDP packet to addr via c, copying the payload from b.</span>
<a id="L184"></a><span class="ln">   184</span>	<span class="comment">//</span>
<a id="L185"></a><span class="ln">   185</span>	<span class="comment">// WriteToUDP can be made to time out and return</span>
<a id="L186"></a><span class="ln">   186</span>	<span class="comment">// an error with Timeout() == true after a fixed time limit;</span>
<a id="L187"></a><span class="ln">   187</span>	<span class="comment">// see SetDeadline and SetWriteDeadline.</span>
<a id="L188"></a><span class="ln">   188</span>	<span class="comment">// On packet-oriented connections, write timeouts are rare.</span>
<a id="L189"></a><span class="ln">   189</span>	func (c *UDPConn) WriteToUDP(b []byte, addr *UDPAddr) (int, error) {
<a id="L190"></a><span class="ln">   190</span>		if !c.ok() {
<a id="L191"></a><span class="ln">   191</span>			return 0, syscall.EINVAL
<a id="L192"></a><span class="ln">   192</span>		}
<a id="L193"></a><span class="ln">   193</span>		if c.fd.isConnected {
<a id="L194"></a><span class="ln">   194</span>			return 0, &amp;OpError{&#34;write&#34;, c.fd.net, addr, ErrWriteToConnected}
<a id="L195"></a><span class="ln">   195</span>		}
<a id="L196"></a><span class="ln">   196</span>		sa, err := addr.sockaddr(c.fd.family)
<a id="L197"></a><span class="ln">   197</span>		if err != nil {
<a id="L198"></a><span class="ln">   198</span>			return 0, &amp;OpError{&#34;write&#34;, c.fd.net, addr, err}
<a id="L199"></a><span class="ln">   199</span>		}
<a id="L200"></a><span class="ln">   200</span>		return c.fd.WriteTo(b, sa)
<a id="L201"></a><span class="ln">   201</span>	}
<a id="L202"></a><span class="ln">   202</span>	
<a id="L203"></a><span class="ln">   203</span>	<span class="comment">// WriteTo implements the PacketConn WriteTo method.</span>
<a id="L204"></a><span class="ln">   204</span>	func (c *UDPConn) WriteTo(b []byte, addr Addr) (int, error) {
<a id="L205"></a><span class="ln">   205</span>		if !c.ok() {
<a id="L206"></a><span class="ln">   206</span>			return 0, syscall.EINVAL
<a id="L207"></a><span class="ln">   207</span>		}
<a id="L208"></a><span class="ln">   208</span>		a, ok := addr.(*UDPAddr)
<a id="L209"></a><span class="ln">   209</span>		if !ok {
<a id="L210"></a><span class="ln">   210</span>			return 0, &amp;OpError{&#34;write&#34;, c.fd.net, addr, syscall.EINVAL}
<a id="L211"></a><span class="ln">   211</span>		}
<a id="L212"></a><span class="ln">   212</span>		return c.WriteToUDP(b, a)
<a id="L213"></a><span class="ln">   213</span>	}
<a id="L214"></a><span class="ln">   214</span>	
<a id="L215"></a><span class="ln">   215</span>	<span class="comment">// File returns a copy of the underlying os.File, set to blocking mode.</span>
<a id="L216"></a><span class="ln">   216</span>	<span class="comment">// It is the caller&#39;s responsibility to close f when finished.</span>
<a id="L217"></a><span class="ln">   217</span>	<span class="comment">// Closing c does not affect f, and closing f does not affect c.</span>
<a id="L218"></a><span class="ln">   218</span>	func (c *UDPConn) File() (f *os.File, err error) { return c.fd.dup() }
<a id="L219"></a><span class="ln">   219</span>	
<a id="L220"></a><span class="ln">   220</span>	<span class="comment">// DialUDP connects to the remote address raddr on the network net,</span>
<a id="L221"></a><span class="ln">   221</span>	<span class="comment">// which must be &#34;udp&#34;, &#34;udp4&#34;, or &#34;udp6&#34;.  If laddr is not nil, it is used</span>
<a id="L222"></a><span class="ln">   222</span>	<span class="comment">// as the local address for the connection.</span>
<a id="L223"></a><span class="ln">   223</span>	func DialUDP(net string, laddr, raddr *UDPAddr) (*UDPConn, error) {
<a id="L224"></a><span class="ln">   224</span>		switch net {
<a id="L225"></a><span class="ln">   225</span>		case &#34;udp&#34;, &#34;udp4&#34;, &#34;udp6&#34;:
<a id="L226"></a><span class="ln">   226</span>		default:
<a id="L227"></a><span class="ln">   227</span>			return nil, UnknownNetworkError(net)
<a id="L228"></a><span class="ln">   228</span>		}
<a id="L229"></a><span class="ln">   229</span>		if raddr == nil {
<a id="L230"></a><span class="ln">   230</span>			return nil, &amp;OpError{&#34;dial&#34;, net, nil, errMissingAddress}
<a id="L231"></a><span class="ln">   231</span>		}
<a id="L232"></a><span class="ln">   232</span>		fd, err := internetSocket(net, laddr.toAddr(), raddr.toAddr(), syscall.SOCK_DGRAM, 0, &#34;dial&#34;, sockaddrToUDP)
<a id="L233"></a><span class="ln">   233</span>		if err != nil {
<a id="L234"></a><span class="ln">   234</span>			return nil, err
<a id="L235"></a><span class="ln">   235</span>		}
<a id="L236"></a><span class="ln">   236</span>		return newUDPConn(fd), nil
<a id="L237"></a><span class="ln">   237</span>	}
<a id="L238"></a><span class="ln">   238</span>	
<a id="L239"></a><span class="ln">   239</span>	<span class="comment">// ListenUDP listens for incoming UDP packets addressed to the</span>
<a id="L240"></a><span class="ln">   240</span>	<span class="comment">// local address laddr.  The returned connection c&#39;s ReadFrom</span>
<a id="L241"></a><span class="ln">   241</span>	<span class="comment">// and WriteTo methods can be used to receive and send UDP</span>
<a id="L242"></a><span class="ln">   242</span>	<span class="comment">// packets with per-packet addressing.</span>
<a id="L243"></a><span class="ln">   243</span>	func ListenUDP(net string, laddr *UDPAddr) (*UDPConn, error) {
<a id="L244"></a><span class="ln">   244</span>		switch net {
<a id="L245"></a><span class="ln">   245</span>		case &#34;udp&#34;, &#34;udp4&#34;, &#34;udp6&#34;:
<a id="L246"></a><span class="ln">   246</span>		default:
<a id="L247"></a><span class="ln">   247</span>			return nil, UnknownNetworkError(net)
<a id="L248"></a><span class="ln">   248</span>		}
<a id="L249"></a><span class="ln">   249</span>		if laddr == nil {
<a id="L250"></a><span class="ln">   250</span>			return nil, &amp;OpError{&#34;listen&#34;, net, nil, errMissingAddress}
<a id="L251"></a><span class="ln">   251</span>		}
<a id="L252"></a><span class="ln">   252</span>		fd, err := internetSocket(net, laddr.toAddr(), nil, syscall.SOCK_DGRAM, 0, &#34;listen&#34;, sockaddrToUDP)
<a id="L253"></a><span class="ln">   253</span>		if err != nil {
<a id="L254"></a><span class="ln">   254</span>			return nil, err
<a id="L255"></a><span class="ln">   255</span>		}
<a id="L256"></a><span class="ln">   256</span>		return newUDPConn(fd), nil
<a id="L257"></a><span class="ln">   257</span>	}
<a id="L258"></a><span class="ln">   258</span>	
<a id="L259"></a><span class="ln">   259</span>	<span class="comment">// ListenMulticastUDP listens for incoming multicast UDP packets</span>
<a id="L260"></a><span class="ln">   260</span>	<span class="comment">// addressed to the group address gaddr on ifi, which specifies</span>
<a id="L261"></a><span class="ln">   261</span>	<span class="comment">// the interface to join.  ListenMulticastUDP uses default</span>
<a id="L262"></a><span class="ln">   262</span>	<span class="comment">// multicast interface if ifi is nil.</span>
<a id="L263"></a><span class="ln">   263</span>	func ListenMulticastUDP(net string, ifi *Interface, gaddr *UDPAddr) (*UDPConn, error) {
<a id="L264"></a><span class="ln">   264</span>		switch net {
<a id="L265"></a><span class="ln">   265</span>		case &#34;udp&#34;, &#34;udp4&#34;, &#34;udp6&#34;:
<a id="L266"></a><span class="ln">   266</span>		default:
<a id="L267"></a><span class="ln">   267</span>			return nil, UnknownNetworkError(net)
<a id="L268"></a><span class="ln">   268</span>		}
<a id="L269"></a><span class="ln">   269</span>		if gaddr == nil || gaddr.IP == nil {
<a id="L270"></a><span class="ln">   270</span>			return nil, &amp;OpError{&#34;listenmulticast&#34;, net, nil, errMissingAddress}
<a id="L271"></a><span class="ln">   271</span>		}
<a id="L272"></a><span class="ln">   272</span>		fd, err := internetSocket(net, gaddr.toAddr(), nil, syscall.SOCK_DGRAM, 0, &#34;listen&#34;, sockaddrToUDP)
<a id="L273"></a><span class="ln">   273</span>		if err != nil {
<a id="L274"></a><span class="ln">   274</span>			return nil, err
<a id="L275"></a><span class="ln">   275</span>		}
<a id="L276"></a><span class="ln">   276</span>		c := newUDPConn(fd)
<a id="L277"></a><span class="ln">   277</span>		ip4 := gaddr.IP.To4()
<a id="L278"></a><span class="ln">   278</span>		if ip4 != nil {
<a id="L279"></a><span class="ln">   279</span>			err := listenIPv4MulticastUDP(c, ifi, ip4)
<a id="L280"></a><span class="ln">   280</span>			if err != nil {
<a id="L281"></a><span class="ln">   281</span>				c.Close()
<a id="L282"></a><span class="ln">   282</span>				return nil, err
<a id="L283"></a><span class="ln">   283</span>			}
<a id="L284"></a><span class="ln">   284</span>		} else {
<a id="L285"></a><span class="ln">   285</span>			err := listenIPv6MulticastUDP(c, ifi, gaddr.IP)
<a id="L286"></a><span class="ln">   286</span>			if err != nil {
<a id="L287"></a><span class="ln">   287</span>				c.Close()
<a id="L288"></a><span class="ln">   288</span>				return nil, err
<a id="L289"></a><span class="ln">   289</span>			}
<a id="L290"></a><span class="ln">   290</span>		}
<a id="L291"></a><span class="ln">   291</span>		return c, nil
<a id="L292"></a><span class="ln">   292</span>	}
<a id="L293"></a><span class="ln">   293</span>	
<a id="L294"></a><span class="ln">   294</span>	func listenIPv4MulticastUDP(c *UDPConn, ifi *Interface, ip IP) error {
<a id="L295"></a><span class="ln">   295</span>		if ifi != nil {
<a id="L296"></a><span class="ln">   296</span>			err := setIPv4MulticastInterface(c.fd, ifi)
<a id="L297"></a><span class="ln">   297</span>			if err != nil {
<a id="L298"></a><span class="ln">   298</span>				return err
<a id="L299"></a><span class="ln">   299</span>			}
<a id="L300"></a><span class="ln">   300</span>		}
<a id="L301"></a><span class="ln">   301</span>		err := setIPv4MulticastLoopback(c.fd, false)
<a id="L302"></a><span class="ln">   302</span>		if err != nil {
<a id="L303"></a><span class="ln">   303</span>			return err
<a id="L304"></a><span class="ln">   304</span>		}
<a id="L305"></a><span class="ln">   305</span>		err = joinIPv4GroupUDP(c, ifi, ip)
<a id="L306"></a><span class="ln">   306</span>		if err != nil {
<a id="L307"></a><span class="ln">   307</span>			return err
<a id="L308"></a><span class="ln">   308</span>		}
<a id="L309"></a><span class="ln">   309</span>		return nil
<a id="L310"></a><span class="ln">   310</span>	}
<a id="L311"></a><span class="ln">   311</span>	
<a id="L312"></a><span class="ln">   312</span>	func listenIPv6MulticastUDP(c *UDPConn, ifi *Interface, ip IP) error {
<a id="L313"></a><span class="ln">   313</span>		if ifi != nil {
<a id="L314"></a><span class="ln">   314</span>			err := setIPv6MulticastInterface(c.fd, ifi)
<a id="L315"></a><span class="ln">   315</span>			if err != nil {
<a id="L316"></a><span class="ln">   316</span>				return err
<a id="L317"></a><span class="ln">   317</span>			}
<a id="L318"></a><span class="ln">   318</span>		}
<a id="L319"></a><span class="ln">   319</span>		err := setIPv6MulticastLoopback(c.fd, false)
<a id="L320"></a><span class="ln">   320</span>		if err != nil {
<a id="L321"></a><span class="ln">   321</span>			return err
<a id="L322"></a><span class="ln">   322</span>		}
<a id="L323"></a><span class="ln">   323</span>		err = joinIPv6GroupUDP(c, ifi, ip)
<a id="L324"></a><span class="ln">   324</span>		if err != nil {
<a id="L325"></a><span class="ln">   325</span>			return err
<a id="L326"></a><span class="ln">   326</span>		}
<a id="L327"></a><span class="ln">   327</span>		return nil
<a id="L328"></a><span class="ln">   328</span>	}
<a id="L329"></a><span class="ln">   329</span>	
<a id="L330"></a><span class="ln">   330</span>	func joinIPv4GroupUDP(c *UDPConn, ifi *Interface, ip IP) error {
<a id="L331"></a><span class="ln">   331</span>		err := joinIPv4Group(c.fd, ifi, ip)
<a id="L332"></a><span class="ln">   332</span>		if err != nil {
<a id="L333"></a><span class="ln">   333</span>			return &amp;OpError{&#34;joinipv4group&#34;, c.fd.net, &amp;IPAddr{ip}, err}
<a id="L334"></a><span class="ln">   334</span>		}
<a id="L335"></a><span class="ln">   335</span>		return nil
<a id="L336"></a><span class="ln">   336</span>	}
<a id="L337"></a><span class="ln">   337</span>	
<a id="L338"></a><span class="ln">   338</span>	func leaveIPv4GroupUDP(c *UDPConn, ifi *Interface, ip IP) error {
<a id="L339"></a><span class="ln">   339</span>		err := leaveIPv4Group(c.fd, ifi, ip)
<a id="L340"></a><span class="ln">   340</span>		if err != nil {
<a id="L341"></a><span class="ln">   341</span>			return &amp;OpError{&#34;leaveipv4group&#34;, c.fd.net, &amp;IPAddr{ip}, err}
<a id="L342"></a><span class="ln">   342</span>		}
<a id="L343"></a><span class="ln">   343</span>		return nil
<a id="L344"></a><span class="ln">   344</span>	}
<a id="L345"></a><span class="ln">   345</span>	
<a id="L346"></a><span class="ln">   346</span>	func joinIPv6GroupUDP(c *UDPConn, ifi *Interface, ip IP) error {
<a id="L347"></a><span class="ln">   347</span>		err := joinIPv6Group(c.fd, ifi, ip)
<a id="L348"></a><span class="ln">   348</span>		if err != nil {
<a id="L349"></a><span class="ln">   349</span>			return &amp;OpError{&#34;joinipv6group&#34;, c.fd.net, &amp;IPAddr{ip}, err}
<a id="L350"></a><span class="ln">   350</span>		}
<a id="L351"></a><span class="ln">   351</span>		return nil
<a id="L352"></a><span class="ln">   352</span>	}
<a id="L353"></a><span class="ln">   353</span>	
<a id="L354"></a><span class="ln">   354</span>	func leaveIPv6GroupUDP(c *UDPConn, ifi *Interface, ip IP) error {
<a id="L355"></a><span class="ln">   355</span>		err := leaveIPv6Group(c.fd, ifi, ip)
<a id="L356"></a><span class="ln">   356</span>		if err != nil {
<a id="L357"></a><span class="ln">   357</span>			return &amp;OpError{&#34;leaveipv6group&#34;, c.fd.net, &amp;IPAddr{ip}, err}
<a id="L358"></a><span class="ln">   358</span>		}
<a id="L359"></a><span class="ln">   359</span>		return nil
<a id="L360"></a><span class="ln">   360</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

