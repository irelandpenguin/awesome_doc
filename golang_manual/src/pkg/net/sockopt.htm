<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/sockopt.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/sockopt.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// +build darwin freebsd linux netbsd openbsd windows</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// Socket options</span>
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	package net
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	import (
<a id="L12"></a><span class="ln">    12</span>		&#34;os&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;syscall&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;time&#34;
<a id="L15"></a><span class="ln">    15</span>	)
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// Boolean to int.</span>
<a id="L18"></a><span class="ln">    18</span>	func boolint(b bool) int {
<a id="L19"></a><span class="ln">    19</span>		if b {
<a id="L20"></a><span class="ln">    20</span>			return 1
<a id="L21"></a><span class="ln">    21</span>		}
<a id="L22"></a><span class="ln">    22</span>		return 0
<a id="L23"></a><span class="ln">    23</span>	}
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	func ipv4AddrToInterface(ip IP) (*Interface, error) {
<a id="L26"></a><span class="ln">    26</span>		ift, err := Interfaces()
<a id="L27"></a><span class="ln">    27</span>		if err != nil {
<a id="L28"></a><span class="ln">    28</span>			return nil, err
<a id="L29"></a><span class="ln">    29</span>		}
<a id="L30"></a><span class="ln">    30</span>		for _, ifi := range ift {
<a id="L31"></a><span class="ln">    31</span>			ifat, err := ifi.Addrs()
<a id="L32"></a><span class="ln">    32</span>			if err != nil {
<a id="L33"></a><span class="ln">    33</span>				return nil, err
<a id="L34"></a><span class="ln">    34</span>			}
<a id="L35"></a><span class="ln">    35</span>			for _, ifa := range ifat {
<a id="L36"></a><span class="ln">    36</span>				switch v := ifa.(type) {
<a id="L37"></a><span class="ln">    37</span>				case *IPAddr:
<a id="L38"></a><span class="ln">    38</span>					if ip.Equal(v.IP) {
<a id="L39"></a><span class="ln">    39</span>						return &amp;ifi, nil
<a id="L40"></a><span class="ln">    40</span>					}
<a id="L41"></a><span class="ln">    41</span>				case *IPNet:
<a id="L42"></a><span class="ln">    42</span>					if ip.Equal(v.IP) {
<a id="L43"></a><span class="ln">    43</span>						return &amp;ifi, nil
<a id="L44"></a><span class="ln">    44</span>					}
<a id="L45"></a><span class="ln">    45</span>				}
<a id="L46"></a><span class="ln">    46</span>			}
<a id="L47"></a><span class="ln">    47</span>		}
<a id="L48"></a><span class="ln">    48</span>		if ip.Equal(IPv4zero) {
<a id="L49"></a><span class="ln">    49</span>			return nil, nil
<a id="L50"></a><span class="ln">    50</span>		}
<a id="L51"></a><span class="ln">    51</span>		return nil, errNoSuchInterface
<a id="L52"></a><span class="ln">    52</span>	}
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>	func interfaceToIPv4Addr(ifi *Interface) (IP, error) {
<a id="L55"></a><span class="ln">    55</span>		if ifi == nil {
<a id="L56"></a><span class="ln">    56</span>			return IPv4zero, nil
<a id="L57"></a><span class="ln">    57</span>		}
<a id="L58"></a><span class="ln">    58</span>		ifat, err := ifi.Addrs()
<a id="L59"></a><span class="ln">    59</span>		if err != nil {
<a id="L60"></a><span class="ln">    60</span>			return nil, err
<a id="L61"></a><span class="ln">    61</span>		}
<a id="L62"></a><span class="ln">    62</span>		for _, ifa := range ifat {
<a id="L63"></a><span class="ln">    63</span>			switch v := ifa.(type) {
<a id="L64"></a><span class="ln">    64</span>			case *IPAddr:
<a id="L65"></a><span class="ln">    65</span>				if v.IP.To4() != nil {
<a id="L66"></a><span class="ln">    66</span>					return v.IP, nil
<a id="L67"></a><span class="ln">    67</span>				}
<a id="L68"></a><span class="ln">    68</span>			case *IPNet:
<a id="L69"></a><span class="ln">    69</span>				if v.IP.To4() != nil {
<a id="L70"></a><span class="ln">    70</span>					return v.IP, nil
<a id="L71"></a><span class="ln">    71</span>				}
<a id="L72"></a><span class="ln">    72</span>			}
<a id="L73"></a><span class="ln">    73</span>		}
<a id="L74"></a><span class="ln">    74</span>		return nil, errNoSuchInterface
<a id="L75"></a><span class="ln">    75</span>	}
<a id="L76"></a><span class="ln">    76</span>	
<a id="L77"></a><span class="ln">    77</span>	func setIPv4MreqToInterface(mreq *syscall.IPMreq, ifi *Interface) error {
<a id="L78"></a><span class="ln">    78</span>		if ifi == nil {
<a id="L79"></a><span class="ln">    79</span>			return nil
<a id="L80"></a><span class="ln">    80</span>		}
<a id="L81"></a><span class="ln">    81</span>		ifat, err := ifi.Addrs()
<a id="L82"></a><span class="ln">    82</span>		if err != nil {
<a id="L83"></a><span class="ln">    83</span>			return err
<a id="L84"></a><span class="ln">    84</span>		}
<a id="L85"></a><span class="ln">    85</span>		for _, ifa := range ifat {
<a id="L86"></a><span class="ln">    86</span>			switch v := ifa.(type) {
<a id="L87"></a><span class="ln">    87</span>			case *IPAddr:
<a id="L88"></a><span class="ln">    88</span>				if a := v.IP.To4(); a != nil {
<a id="L89"></a><span class="ln">    89</span>					copy(mreq.Interface[:], a)
<a id="L90"></a><span class="ln">    90</span>					goto done
<a id="L91"></a><span class="ln">    91</span>				}
<a id="L92"></a><span class="ln">    92</span>			case *IPNet:
<a id="L93"></a><span class="ln">    93</span>				if a := v.IP.To4(); a != nil {
<a id="L94"></a><span class="ln">    94</span>					copy(mreq.Interface[:], a)
<a id="L95"></a><span class="ln">    95</span>					goto done
<a id="L96"></a><span class="ln">    96</span>				}
<a id="L97"></a><span class="ln">    97</span>			}
<a id="L98"></a><span class="ln">    98</span>		}
<a id="L99"></a><span class="ln">    99</span>	done:
<a id="L100"></a><span class="ln">   100</span>		if bytesEqual(mreq.Multiaddr[:], IPv4zero.To4()) {
<a id="L101"></a><span class="ln">   101</span>			return errNoSuchMulticastInterface
<a id="L102"></a><span class="ln">   102</span>		}
<a id="L103"></a><span class="ln">   103</span>		return nil
<a id="L104"></a><span class="ln">   104</span>	}
<a id="L105"></a><span class="ln">   105</span>	
<a id="L106"></a><span class="ln">   106</span>	func setReadBuffer(fd *netFD, bytes int) error {
<a id="L107"></a><span class="ln">   107</span>		if err := fd.incref(false); err != nil {
<a id="L108"></a><span class="ln">   108</span>			return err
<a id="L109"></a><span class="ln">   109</span>		}
<a id="L110"></a><span class="ln">   110</span>		defer fd.decref()
<a id="L111"></a><span class="ln">   111</span>		return os.NewSyscallError(&#34;setsockopt&#34;, syscall.SetsockoptInt(fd.sysfd, syscall.SOL_SOCKET, syscall.SO_RCVBUF, bytes))
<a id="L112"></a><span class="ln">   112</span>	}
<a id="L113"></a><span class="ln">   113</span>	
<a id="L114"></a><span class="ln">   114</span>	func setWriteBuffer(fd *netFD, bytes int) error {
<a id="L115"></a><span class="ln">   115</span>		if err := fd.incref(false); err != nil {
<a id="L116"></a><span class="ln">   116</span>			return err
<a id="L117"></a><span class="ln">   117</span>		}
<a id="L118"></a><span class="ln">   118</span>		defer fd.decref()
<a id="L119"></a><span class="ln">   119</span>		return os.NewSyscallError(&#34;setsockopt&#34;, syscall.SetsockoptInt(fd.sysfd, syscall.SOL_SOCKET, syscall.SO_SNDBUF, bytes))
<a id="L120"></a><span class="ln">   120</span>	}
<a id="L121"></a><span class="ln">   121</span>	
<a id="L122"></a><span class="ln">   122</span>	func setReadDeadline(fd *netFD, t time.Time) error {
<a id="L123"></a><span class="ln">   123</span>		if t.IsZero() {
<a id="L124"></a><span class="ln">   124</span>			fd.rdeadline = 0
<a id="L125"></a><span class="ln">   125</span>		} else {
<a id="L126"></a><span class="ln">   126</span>			fd.rdeadline = t.UnixNano()
<a id="L127"></a><span class="ln">   127</span>		}
<a id="L128"></a><span class="ln">   128</span>		return nil
<a id="L129"></a><span class="ln">   129</span>	}
<a id="L130"></a><span class="ln">   130</span>	
<a id="L131"></a><span class="ln">   131</span>	func setWriteDeadline(fd *netFD, t time.Time) error {
<a id="L132"></a><span class="ln">   132</span>		if t.IsZero() {
<a id="L133"></a><span class="ln">   133</span>			fd.wdeadline = 0
<a id="L134"></a><span class="ln">   134</span>		} else {
<a id="L135"></a><span class="ln">   135</span>			fd.wdeadline = t.UnixNano()
<a id="L136"></a><span class="ln">   136</span>		}
<a id="L137"></a><span class="ln">   137</span>		return nil
<a id="L138"></a><span class="ln">   138</span>	}
<a id="L139"></a><span class="ln">   139</span>	
<a id="L140"></a><span class="ln">   140</span>	func setDeadline(fd *netFD, t time.Time) error {
<a id="L141"></a><span class="ln">   141</span>		if err := setReadDeadline(fd, t); err != nil {
<a id="L142"></a><span class="ln">   142</span>			return err
<a id="L143"></a><span class="ln">   143</span>		}
<a id="L144"></a><span class="ln">   144</span>		return setWriteDeadline(fd, t)
<a id="L145"></a><span class="ln">   145</span>	}
<a id="L146"></a><span class="ln">   146</span>	
<a id="L147"></a><span class="ln">   147</span>	func setReuseAddr(fd *netFD, reuse bool) error {
<a id="L148"></a><span class="ln">   148</span>		if err := fd.incref(false); err != nil {
<a id="L149"></a><span class="ln">   149</span>			return err
<a id="L150"></a><span class="ln">   150</span>		}
<a id="L151"></a><span class="ln">   151</span>		defer fd.decref()
<a id="L152"></a><span class="ln">   152</span>		return os.NewSyscallError(&#34;setsockopt&#34;, syscall.SetsockoptInt(fd.sysfd, syscall.SOL_SOCKET, syscall.SO_REUSEADDR, boolint(reuse)))
<a id="L153"></a><span class="ln">   153</span>	}
<a id="L154"></a><span class="ln">   154</span>	
<a id="L155"></a><span class="ln">   155</span>	func setDontRoute(fd *netFD, dontroute bool) error {
<a id="L156"></a><span class="ln">   156</span>		if err := fd.incref(false); err != nil {
<a id="L157"></a><span class="ln">   157</span>			return err
<a id="L158"></a><span class="ln">   158</span>		}
<a id="L159"></a><span class="ln">   159</span>		defer fd.decref()
<a id="L160"></a><span class="ln">   160</span>		return os.NewSyscallError(&#34;setsockopt&#34;, syscall.SetsockoptInt(fd.sysfd, syscall.SOL_SOCKET, syscall.SO_DONTROUTE, boolint(dontroute)))
<a id="L161"></a><span class="ln">   161</span>	}
<a id="L162"></a><span class="ln">   162</span>	
<a id="L163"></a><span class="ln">   163</span>	func setKeepAlive(fd *netFD, keepalive bool) error {
<a id="L164"></a><span class="ln">   164</span>		if err := fd.incref(false); err != nil {
<a id="L165"></a><span class="ln">   165</span>			return err
<a id="L166"></a><span class="ln">   166</span>		}
<a id="L167"></a><span class="ln">   167</span>		defer fd.decref()
<a id="L168"></a><span class="ln">   168</span>		return os.NewSyscallError(&#34;setsockopt&#34;, syscall.SetsockoptInt(fd.sysfd, syscall.SOL_SOCKET, syscall.SO_KEEPALIVE, boolint(keepalive)))
<a id="L169"></a><span class="ln">   169</span>	}
<a id="L170"></a><span class="ln">   170</span>	
<a id="L171"></a><span class="ln">   171</span>	func setNoDelay(fd *netFD, noDelay bool) error {
<a id="L172"></a><span class="ln">   172</span>		if err := fd.incref(false); err != nil {
<a id="L173"></a><span class="ln">   173</span>			return err
<a id="L174"></a><span class="ln">   174</span>		}
<a id="L175"></a><span class="ln">   175</span>		defer fd.decref()
<a id="L176"></a><span class="ln">   176</span>		return os.NewSyscallError(&#34;setsockopt&#34;, syscall.SetsockoptInt(fd.sysfd, syscall.IPPROTO_TCP, syscall.TCP_NODELAY, boolint(noDelay)))
<a id="L177"></a><span class="ln">   177</span>	}
<a id="L178"></a><span class="ln">   178</span>	
<a id="L179"></a><span class="ln">   179</span>	func setLinger(fd *netFD, sec int) error {
<a id="L180"></a><span class="ln">   180</span>		var l syscall.Linger
<a id="L181"></a><span class="ln">   181</span>		if sec &gt;= 0 {
<a id="L182"></a><span class="ln">   182</span>			l.Onoff = 1
<a id="L183"></a><span class="ln">   183</span>			l.Linger = int32(sec)
<a id="L184"></a><span class="ln">   184</span>		} else {
<a id="L185"></a><span class="ln">   185</span>			l.Onoff = 0
<a id="L186"></a><span class="ln">   186</span>			l.Linger = 0
<a id="L187"></a><span class="ln">   187</span>		}
<a id="L188"></a><span class="ln">   188</span>		if err := fd.incref(false); err != nil {
<a id="L189"></a><span class="ln">   189</span>			return err
<a id="L190"></a><span class="ln">   190</span>		}
<a id="L191"></a><span class="ln">   191</span>		defer fd.decref()
<a id="L192"></a><span class="ln">   192</span>		return os.NewSyscallError(&#34;setsockopt&#34;, syscall.SetsockoptLinger(fd.sysfd, syscall.SOL_SOCKET, syscall.SO_LINGER, &amp;l))
<a id="L193"></a><span class="ln">   193</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

