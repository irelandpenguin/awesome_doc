<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/dnsconfig.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/dnsconfig.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// +build darwin freebsd linux netbsd openbsd</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// Read system DNS config from /etc/resolv.conf</span>
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	package net
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	type dnsConfig struct {
<a id="L12"></a><span class="ln">    12</span>		servers  []string <span class="comment">// servers to use</span>
<a id="L13"></a><span class="ln">    13</span>		search   []string <span class="comment">// suffixes to append to local name</span>
<a id="L14"></a><span class="ln">    14</span>		ndots    int      <span class="comment">// number of dots in name to trigger absolute lookup</span>
<a id="L15"></a><span class="ln">    15</span>		timeout  int      <span class="comment">// seconds before giving up on packet</span>
<a id="L16"></a><span class="ln">    16</span>		attempts int      <span class="comment">// lost packets before giving up on server</span>
<a id="L17"></a><span class="ln">    17</span>		rotate   bool     <span class="comment">// round robin among servers</span>
<a id="L18"></a><span class="ln">    18</span>	}
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// See resolv.conf(5) on a Linux machine.</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// TODO(rsc): Supposed to call uname() and chop the beginning</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// of the host name to get the default search domain.</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// We assume it&#39;s in resolv.conf anyway.</span>
<a id="L24"></a><span class="ln">    24</span>	func dnsReadConfig() (*dnsConfig, error) {
<a id="L25"></a><span class="ln">    25</span>		file, err := open(&#34;/etc/resolv.conf&#34;)
<a id="L26"></a><span class="ln">    26</span>		if err != nil {
<a id="L27"></a><span class="ln">    27</span>			return nil, &amp;DNSConfigError{err}
<a id="L28"></a><span class="ln">    28</span>		}
<a id="L29"></a><span class="ln">    29</span>		conf := new(dnsConfig)
<a id="L30"></a><span class="ln">    30</span>		conf.servers = make([]string, 3)[0:0] <span class="comment">// small, but the standard limit</span>
<a id="L31"></a><span class="ln">    31</span>		conf.search = make([]string, 0)
<a id="L32"></a><span class="ln">    32</span>		conf.ndots = 1
<a id="L33"></a><span class="ln">    33</span>		conf.timeout = 5
<a id="L34"></a><span class="ln">    34</span>		conf.attempts = 2
<a id="L35"></a><span class="ln">    35</span>		conf.rotate = false
<a id="L36"></a><span class="ln">    36</span>		for line, ok := file.readLine(); ok; line, ok = file.readLine() {
<a id="L37"></a><span class="ln">    37</span>			f := getFields(line)
<a id="L38"></a><span class="ln">    38</span>			if len(f) &lt; 1 {
<a id="L39"></a><span class="ln">    39</span>				continue
<a id="L40"></a><span class="ln">    40</span>			}
<a id="L41"></a><span class="ln">    41</span>			switch f[0] {
<a id="L42"></a><span class="ln">    42</span>			case &#34;nameserver&#34;: <span class="comment">// add one name server</span>
<a id="L43"></a><span class="ln">    43</span>				a := conf.servers
<a id="L44"></a><span class="ln">    44</span>				n := len(a)
<a id="L45"></a><span class="ln">    45</span>				if len(f) &gt; 1 &amp;&amp; n &lt; cap(a) {
<a id="L46"></a><span class="ln">    46</span>					<span class="comment">// One more check: make sure server name is</span>
<a id="L47"></a><span class="ln">    47</span>					<span class="comment">// just an IP address.  Otherwise we need DNS</span>
<a id="L48"></a><span class="ln">    48</span>					<span class="comment">// to look it up.</span>
<a id="L49"></a><span class="ln">    49</span>					name := f[1]
<a id="L50"></a><span class="ln">    50</span>					switch len(ParseIP(name)) {
<a id="L51"></a><span class="ln">    51</span>					case 16:
<a id="L52"></a><span class="ln">    52</span>						name = &#34;[&#34; + name + &#34;]&#34;
<a id="L53"></a><span class="ln">    53</span>						fallthrough
<a id="L54"></a><span class="ln">    54</span>					case 4:
<a id="L55"></a><span class="ln">    55</span>						a = a[0 : n+1]
<a id="L56"></a><span class="ln">    56</span>						a[n] = name
<a id="L57"></a><span class="ln">    57</span>						conf.servers = a
<a id="L58"></a><span class="ln">    58</span>					}
<a id="L59"></a><span class="ln">    59</span>				}
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>			case &#34;domain&#34;: <span class="comment">// set search path to just this domain</span>
<a id="L62"></a><span class="ln">    62</span>				if len(f) &gt; 1 {
<a id="L63"></a><span class="ln">    63</span>					conf.search = make([]string, 1)
<a id="L64"></a><span class="ln">    64</span>					conf.search[0] = f[1]
<a id="L65"></a><span class="ln">    65</span>				} else {
<a id="L66"></a><span class="ln">    66</span>					conf.search = make([]string, 0)
<a id="L67"></a><span class="ln">    67</span>				}
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>			case &#34;search&#34;: <span class="comment">// set search path to given servers</span>
<a id="L70"></a><span class="ln">    70</span>				conf.search = make([]string, len(f)-1)
<a id="L71"></a><span class="ln">    71</span>				for i := 0; i &lt; len(conf.search); i++ {
<a id="L72"></a><span class="ln">    72</span>					conf.search[i] = f[i+1]
<a id="L73"></a><span class="ln">    73</span>				}
<a id="L74"></a><span class="ln">    74</span>	
<a id="L75"></a><span class="ln">    75</span>			case &#34;options&#34;: <span class="comment">// magic options</span>
<a id="L76"></a><span class="ln">    76</span>				for i := 1; i &lt; len(f); i++ {
<a id="L77"></a><span class="ln">    77</span>					s := f[i]
<a id="L78"></a><span class="ln">    78</span>					switch {
<a id="L79"></a><span class="ln">    79</span>					case len(s) &gt;= 6 &amp;&amp; s[0:6] == &#34;ndots:&#34;:
<a id="L80"></a><span class="ln">    80</span>						n, _, _ := dtoi(s, 6)
<a id="L81"></a><span class="ln">    81</span>						if n &lt; 1 {
<a id="L82"></a><span class="ln">    82</span>							n = 1
<a id="L83"></a><span class="ln">    83</span>						}
<a id="L84"></a><span class="ln">    84</span>						conf.ndots = n
<a id="L85"></a><span class="ln">    85</span>					case len(s) &gt;= 8 &amp;&amp; s[0:8] == &#34;timeout:&#34;:
<a id="L86"></a><span class="ln">    86</span>						n, _, _ := dtoi(s, 8)
<a id="L87"></a><span class="ln">    87</span>						if n &lt; 1 {
<a id="L88"></a><span class="ln">    88</span>							n = 1
<a id="L89"></a><span class="ln">    89</span>						}
<a id="L90"></a><span class="ln">    90</span>						conf.timeout = n
<a id="L91"></a><span class="ln">    91</span>					case len(s) &gt;= 8 &amp;&amp; s[0:9] == &#34;attempts:&#34;:
<a id="L92"></a><span class="ln">    92</span>						n, _, _ := dtoi(s, 9)
<a id="L93"></a><span class="ln">    93</span>						if n &lt; 1 {
<a id="L94"></a><span class="ln">    94</span>							n = 1
<a id="L95"></a><span class="ln">    95</span>						}
<a id="L96"></a><span class="ln">    96</span>						conf.attempts = n
<a id="L97"></a><span class="ln">    97</span>					case s == &#34;rotate&#34;:
<a id="L98"></a><span class="ln">    98</span>						conf.rotate = true
<a id="L99"></a><span class="ln">    99</span>					}
<a id="L100"></a><span class="ln">   100</span>				}
<a id="L101"></a><span class="ln">   101</span>			}
<a id="L102"></a><span class="ln">   102</span>		}
<a id="L103"></a><span class="ln">   103</span>		file.close()
<a id="L104"></a><span class="ln">   104</span>	
<a id="L105"></a><span class="ln">   105</span>		return conf, nil
<a id="L106"></a><span class="ln">   106</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

