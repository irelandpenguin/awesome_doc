<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/ipsock.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/ipsock.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// IP sockets</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package net
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	var supportsIPv6, supportsIPv4map = probeIPv6Stack()
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	func firstFavoriteAddr(filter func(IP) IP, addrs []string) (addr IP) {
<a id="L12"></a><span class="ln">    12</span>		if filter == nil {
<a id="L13"></a><span class="ln">    13</span>			<span class="comment">// We&#39;ll take any IP address, but since the dialing code</span>
<a id="L14"></a><span class="ln">    14</span>			<span class="comment">// does not yet try multiple addresses, prefer to use</span>
<a id="L15"></a><span class="ln">    15</span>			<span class="comment">// an IPv4 address if possible.  This is especially relevant</span>
<a id="L16"></a><span class="ln">    16</span>			<span class="comment">// if localhost resolves to [ipv6-localhost, ipv4-localhost].</span>
<a id="L17"></a><span class="ln">    17</span>			<span class="comment">// Too much code assumes localhost == ipv4-localhost.</span>
<a id="L18"></a><span class="ln">    18</span>			addr = firstSupportedAddr(ipv4only, addrs)
<a id="L19"></a><span class="ln">    19</span>			if addr == nil {
<a id="L20"></a><span class="ln">    20</span>				addr = firstSupportedAddr(anyaddr, addrs)
<a id="L21"></a><span class="ln">    21</span>			}
<a id="L22"></a><span class="ln">    22</span>		} else {
<a id="L23"></a><span class="ln">    23</span>			addr = firstSupportedAddr(filter, addrs)
<a id="L24"></a><span class="ln">    24</span>		}
<a id="L25"></a><span class="ln">    25</span>		return
<a id="L26"></a><span class="ln">    26</span>	}
<a id="L27"></a><span class="ln">    27</span>	
<a id="L28"></a><span class="ln">    28</span>	func firstSupportedAddr(filter func(IP) IP, addrs []string) IP {
<a id="L29"></a><span class="ln">    29</span>		for _, s := range addrs {
<a id="L30"></a><span class="ln">    30</span>			if addr := filter(ParseIP(s)); addr != nil {
<a id="L31"></a><span class="ln">    31</span>				return addr
<a id="L32"></a><span class="ln">    32</span>			}
<a id="L33"></a><span class="ln">    33</span>		}
<a id="L34"></a><span class="ln">    34</span>		return nil
<a id="L35"></a><span class="ln">    35</span>	}
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>	func anyaddr(x IP) IP {
<a id="L38"></a><span class="ln">    38</span>		if x4 := x.To4(); x4 != nil {
<a id="L39"></a><span class="ln">    39</span>			return x4
<a id="L40"></a><span class="ln">    40</span>		}
<a id="L41"></a><span class="ln">    41</span>		if supportsIPv6 {
<a id="L42"></a><span class="ln">    42</span>			return x
<a id="L43"></a><span class="ln">    43</span>		}
<a id="L44"></a><span class="ln">    44</span>		return nil
<a id="L45"></a><span class="ln">    45</span>	}
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>	func ipv4only(x IP) IP { return x.To4() }
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>	func ipv6only(x IP) IP {
<a id="L50"></a><span class="ln">    50</span>		<span class="comment">// Only return addresses that we can use</span>
<a id="L51"></a><span class="ln">    51</span>		<span class="comment">// with the kernel&#39;s IPv6 addressing modes.</span>
<a id="L52"></a><span class="ln">    52</span>		if len(x) == IPv6len &amp;&amp; x.To4() == nil &amp;&amp; supportsIPv6 {
<a id="L53"></a><span class="ln">    53</span>			return x
<a id="L54"></a><span class="ln">    54</span>		}
<a id="L55"></a><span class="ln">    55</span>		return nil
<a id="L56"></a><span class="ln">    56</span>	}
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>	type InvalidAddrError string
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	func (e InvalidAddrError) Error() string   { return string(e) }
<a id="L61"></a><span class="ln">    61</span>	func (e InvalidAddrError) Timeout() bool   { return false }
<a id="L62"></a><span class="ln">    62</span>	func (e InvalidAddrError) Temporary() bool { return false }
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// SplitHostPort splits a network address of the form</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// &#34;host:port&#34; or &#34;[host]:port&#34; into host and port.</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">// The latter form must be used when host contains a colon.</span>
<a id="L67"></a><span class="ln">    67</span>	func SplitHostPort(hostport string) (host, port string, err error) {
<a id="L68"></a><span class="ln">    68</span>		<span class="comment">// The port starts after the last colon.</span>
<a id="L69"></a><span class="ln">    69</span>		i := last(hostport, &#39;:&#39;)
<a id="L70"></a><span class="ln">    70</span>		if i &lt; 0 {
<a id="L71"></a><span class="ln">    71</span>			err = &amp;AddrError{&#34;missing port in address&#34;, hostport}
<a id="L72"></a><span class="ln">    72</span>			return
<a id="L73"></a><span class="ln">    73</span>		}
<a id="L74"></a><span class="ln">    74</span>	
<a id="L75"></a><span class="ln">    75</span>		host, port = hostport[0:i], hostport[i+1:]
<a id="L76"></a><span class="ln">    76</span>	
<a id="L77"></a><span class="ln">    77</span>		<span class="comment">// Can put brackets around host ...</span>
<a id="L78"></a><span class="ln">    78</span>		if len(host) &gt; 0 &amp;&amp; host[0] == &#39;[&#39; &amp;&amp; host[len(host)-1] == &#39;]&#39; {
<a id="L79"></a><span class="ln">    79</span>			host = host[1 : len(host)-1]
<a id="L80"></a><span class="ln">    80</span>		} else {
<a id="L81"></a><span class="ln">    81</span>			<span class="comment">// ... but if there are no brackets, no colons.</span>
<a id="L82"></a><span class="ln">    82</span>			if byteIndex(host, &#39;:&#39;) &gt;= 0 {
<a id="L83"></a><span class="ln">    83</span>				err = &amp;AddrError{&#34;too many colons in address&#34;, hostport}
<a id="L84"></a><span class="ln">    84</span>				return
<a id="L85"></a><span class="ln">    85</span>			}
<a id="L86"></a><span class="ln">    86</span>		}
<a id="L87"></a><span class="ln">    87</span>		return
<a id="L88"></a><span class="ln">    88</span>	}
<a id="L89"></a><span class="ln">    89</span>	
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// JoinHostPort combines host and port into a network address</span>
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// of the form &#34;host:port&#34; or, if host contains a colon, &#34;[host]:port&#34;.</span>
<a id="L92"></a><span class="ln">    92</span>	func JoinHostPort(host, port string) string {
<a id="L93"></a><span class="ln">    93</span>		<span class="comment">// If host has colons, have to bracket it.</span>
<a id="L94"></a><span class="ln">    94</span>		if byteIndex(host, &#39;:&#39;) &gt;= 0 {
<a id="L95"></a><span class="ln">    95</span>			return &#34;[&#34; + host + &#34;]:&#34; + port
<a id="L96"></a><span class="ln">    96</span>		}
<a id="L97"></a><span class="ln">    97</span>		return host + &#34;:&#34; + port
<a id="L98"></a><span class="ln">    98</span>	}
<a id="L99"></a><span class="ln">    99</span>	
<a id="L100"></a><span class="ln">   100</span>	<span class="comment">// Convert &#34;host:port&#34; into IP address and port.</span>
<a id="L101"></a><span class="ln">   101</span>	func hostPortToIP(net, hostport string) (ip IP, iport int, err error) {
<a id="L102"></a><span class="ln">   102</span>		host, port, err := SplitHostPort(hostport)
<a id="L103"></a><span class="ln">   103</span>		if err != nil {
<a id="L104"></a><span class="ln">   104</span>			return nil, 0, err
<a id="L105"></a><span class="ln">   105</span>		}
<a id="L106"></a><span class="ln">   106</span>	
<a id="L107"></a><span class="ln">   107</span>		var addr IP
<a id="L108"></a><span class="ln">   108</span>		if host != &#34;&#34; {
<a id="L109"></a><span class="ln">   109</span>			<span class="comment">// Try as an IP address.</span>
<a id="L110"></a><span class="ln">   110</span>			addr = ParseIP(host)
<a id="L111"></a><span class="ln">   111</span>			if addr == nil {
<a id="L112"></a><span class="ln">   112</span>				var filter func(IP) IP
<a id="L113"></a><span class="ln">   113</span>				if net != &#34;&#34; &amp;&amp; net[len(net)-1] == &#39;4&#39; {
<a id="L114"></a><span class="ln">   114</span>					filter = ipv4only
<a id="L115"></a><span class="ln">   115</span>				}
<a id="L116"></a><span class="ln">   116</span>				if net != &#34;&#34; &amp;&amp; net[len(net)-1] == &#39;6&#39; {
<a id="L117"></a><span class="ln">   117</span>					filter = ipv6only
<a id="L118"></a><span class="ln">   118</span>				}
<a id="L119"></a><span class="ln">   119</span>				<span class="comment">// Not an IP address.  Try as a DNS name.</span>
<a id="L120"></a><span class="ln">   120</span>				addrs, err := LookupHost(host)
<a id="L121"></a><span class="ln">   121</span>				if err != nil {
<a id="L122"></a><span class="ln">   122</span>					return nil, 0, err
<a id="L123"></a><span class="ln">   123</span>				}
<a id="L124"></a><span class="ln">   124</span>				addr = firstFavoriteAddr(filter, addrs)
<a id="L125"></a><span class="ln">   125</span>				if addr == nil {
<a id="L126"></a><span class="ln">   126</span>					<span class="comment">// should not happen</span>
<a id="L127"></a><span class="ln">   127</span>					return nil, 0, &amp;AddrError{&#34;LookupHost returned no suitable address&#34;, addrs[0]}
<a id="L128"></a><span class="ln">   128</span>				}
<a id="L129"></a><span class="ln">   129</span>			}
<a id="L130"></a><span class="ln">   130</span>		}
<a id="L131"></a><span class="ln">   131</span>	
<a id="L132"></a><span class="ln">   132</span>		p, i, ok := dtoi(port, 0)
<a id="L133"></a><span class="ln">   133</span>		if !ok || i != len(port) {
<a id="L134"></a><span class="ln">   134</span>			p, err = LookupPort(net, port)
<a id="L135"></a><span class="ln">   135</span>			if err != nil {
<a id="L136"></a><span class="ln">   136</span>				return nil, 0, err
<a id="L137"></a><span class="ln">   137</span>			}
<a id="L138"></a><span class="ln">   138</span>		}
<a id="L139"></a><span class="ln">   139</span>		if p &lt; 0 || p &gt; 0xFFFF {
<a id="L140"></a><span class="ln">   140</span>			return nil, 0, &amp;AddrError{&#34;invalid port&#34;, port}
<a id="L141"></a><span class="ln">   141</span>		}
<a id="L142"></a><span class="ln">   142</span>	
<a id="L143"></a><span class="ln">   143</span>		return addr, p, nil
<a id="L144"></a><span class="ln">   144</span>	
<a id="L145"></a><span class="ln">   145</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

