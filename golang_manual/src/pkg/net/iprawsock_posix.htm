<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/iprawsock_posix.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/iprawsock_posix.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// +build darwin freebsd linux netbsd openbsd windows</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// (Raw) IP sockets</span>
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	package net
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	import (
<a id="L12"></a><span class="ln">    12</span>		&#34;os&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;syscall&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;time&#34;
<a id="L15"></a><span class="ln">    15</span>	)
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	func sockaddrToIP(sa syscall.Sockaddr) Addr {
<a id="L18"></a><span class="ln">    18</span>		switch sa := sa.(type) {
<a id="L19"></a><span class="ln">    19</span>		case *syscall.SockaddrInet4:
<a id="L20"></a><span class="ln">    20</span>			return &amp;IPAddr{sa.Addr[0:]}
<a id="L21"></a><span class="ln">    21</span>		case *syscall.SockaddrInet6:
<a id="L22"></a><span class="ln">    22</span>			return &amp;IPAddr{sa.Addr[0:]}
<a id="L23"></a><span class="ln">    23</span>		}
<a id="L24"></a><span class="ln">    24</span>		return nil
<a id="L25"></a><span class="ln">    25</span>	}
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>	func (a *IPAddr) family() int {
<a id="L28"></a><span class="ln">    28</span>		if a == nil || len(a.IP) &lt;= IPv4len {
<a id="L29"></a><span class="ln">    29</span>			return syscall.AF_INET
<a id="L30"></a><span class="ln">    30</span>		}
<a id="L31"></a><span class="ln">    31</span>		if a.IP.To4() != nil {
<a id="L32"></a><span class="ln">    32</span>			return syscall.AF_INET
<a id="L33"></a><span class="ln">    33</span>		}
<a id="L34"></a><span class="ln">    34</span>		return syscall.AF_INET6
<a id="L35"></a><span class="ln">    35</span>	}
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>	func (a *IPAddr) isWildcard() bool {
<a id="L38"></a><span class="ln">    38</span>		if a == nil || a.IP == nil {
<a id="L39"></a><span class="ln">    39</span>			return true
<a id="L40"></a><span class="ln">    40</span>		}
<a id="L41"></a><span class="ln">    41</span>		return a.IP.IsUnspecified()
<a id="L42"></a><span class="ln">    42</span>	}
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	func (a *IPAddr) sockaddr(family int) (syscall.Sockaddr, error) {
<a id="L45"></a><span class="ln">    45</span>		return ipToSockaddr(family, a.IP, 0)
<a id="L46"></a><span class="ln">    46</span>	}
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>	func (a *IPAddr) toAddr() sockaddr {
<a id="L49"></a><span class="ln">    49</span>		if a == nil { <span class="comment">// nil *IPAddr</span>
<a id="L50"></a><span class="ln">    50</span>			return nil <span class="comment">// nil interface</span>
<a id="L51"></a><span class="ln">    51</span>		}
<a id="L52"></a><span class="ln">    52</span>		return a
<a id="L53"></a><span class="ln">    53</span>	}
<a id="L54"></a><span class="ln">    54</span>	
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// IPConn is the implementation of the Conn and PacketConn</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// interfaces for IP network connections.</span>
<a id="L57"></a><span class="ln">    57</span>	type IPConn struct {
<a id="L58"></a><span class="ln">    58</span>		fd *netFD
<a id="L59"></a><span class="ln">    59</span>	}
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>	func newIPConn(fd *netFD) *IPConn { return &amp;IPConn{fd} }
<a id="L62"></a><span class="ln">    62</span>	
<a id="L63"></a><span class="ln">    63</span>	func (c *IPConn) ok() bool { return c != nil &amp;&amp; c.fd != nil }
<a id="L64"></a><span class="ln">    64</span>	
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// Implementation of the Conn interface - see Conn for documentation.</span>
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// Read implements the Conn Read method.</span>
<a id="L68"></a><span class="ln">    68</span>	func (c *IPConn) Read(b []byte) (int, error) {
<a id="L69"></a><span class="ln">    69</span>		n, _, err := c.ReadFrom(b)
<a id="L70"></a><span class="ln">    70</span>		return n, err
<a id="L71"></a><span class="ln">    71</span>	}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// Write implements the Conn Write method.</span>
<a id="L74"></a><span class="ln">    74</span>	func (c *IPConn) Write(b []byte) (int, error) {
<a id="L75"></a><span class="ln">    75</span>		if !c.ok() {
<a id="L76"></a><span class="ln">    76</span>			return 0, syscall.EINVAL
<a id="L77"></a><span class="ln">    77</span>		}
<a id="L78"></a><span class="ln">    78</span>		return c.fd.Write(b)
<a id="L79"></a><span class="ln">    79</span>	}
<a id="L80"></a><span class="ln">    80</span>	
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// Close closes the IP connection.</span>
<a id="L82"></a><span class="ln">    82</span>	func (c *IPConn) Close() error {
<a id="L83"></a><span class="ln">    83</span>		if !c.ok() {
<a id="L84"></a><span class="ln">    84</span>			return syscall.EINVAL
<a id="L85"></a><span class="ln">    85</span>		}
<a id="L86"></a><span class="ln">    86</span>		return c.fd.Close()
<a id="L87"></a><span class="ln">    87</span>	}
<a id="L88"></a><span class="ln">    88</span>	
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">// LocalAddr returns the local network address.</span>
<a id="L90"></a><span class="ln">    90</span>	func (c *IPConn) LocalAddr() Addr {
<a id="L91"></a><span class="ln">    91</span>		if !c.ok() {
<a id="L92"></a><span class="ln">    92</span>			return nil
<a id="L93"></a><span class="ln">    93</span>		}
<a id="L94"></a><span class="ln">    94</span>		return c.fd.laddr
<a id="L95"></a><span class="ln">    95</span>	}
<a id="L96"></a><span class="ln">    96</span>	
<a id="L97"></a><span class="ln">    97</span>	<span class="comment">// RemoteAddr returns the remote network address, a *IPAddr.</span>
<a id="L98"></a><span class="ln">    98</span>	func (c *IPConn) RemoteAddr() Addr {
<a id="L99"></a><span class="ln">    99</span>		if !c.ok() {
<a id="L100"></a><span class="ln">   100</span>			return nil
<a id="L101"></a><span class="ln">   101</span>		}
<a id="L102"></a><span class="ln">   102</span>		return c.fd.raddr
<a id="L103"></a><span class="ln">   103</span>	}
<a id="L104"></a><span class="ln">   104</span>	
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// SetDeadline implements the Conn SetDeadline method.</span>
<a id="L106"></a><span class="ln">   106</span>	func (c *IPConn) SetDeadline(t time.Time) error {
<a id="L107"></a><span class="ln">   107</span>		if !c.ok() {
<a id="L108"></a><span class="ln">   108</span>			return syscall.EINVAL
<a id="L109"></a><span class="ln">   109</span>		}
<a id="L110"></a><span class="ln">   110</span>		return setDeadline(c.fd, t)
<a id="L111"></a><span class="ln">   111</span>	}
<a id="L112"></a><span class="ln">   112</span>	
<a id="L113"></a><span class="ln">   113</span>	<span class="comment">// SetReadDeadline implements the Conn SetReadDeadline method.</span>
<a id="L114"></a><span class="ln">   114</span>	func (c *IPConn) SetReadDeadline(t time.Time) error {
<a id="L115"></a><span class="ln">   115</span>		if !c.ok() {
<a id="L116"></a><span class="ln">   116</span>			return syscall.EINVAL
<a id="L117"></a><span class="ln">   117</span>		}
<a id="L118"></a><span class="ln">   118</span>		return setReadDeadline(c.fd, t)
<a id="L119"></a><span class="ln">   119</span>	}
<a id="L120"></a><span class="ln">   120</span>	
<a id="L121"></a><span class="ln">   121</span>	<span class="comment">// SetWriteDeadline implements the Conn SetWriteDeadline method.</span>
<a id="L122"></a><span class="ln">   122</span>	func (c *IPConn) SetWriteDeadline(t time.Time) error {
<a id="L123"></a><span class="ln">   123</span>		if !c.ok() {
<a id="L124"></a><span class="ln">   124</span>			return syscall.EINVAL
<a id="L125"></a><span class="ln">   125</span>		}
<a id="L126"></a><span class="ln">   126</span>		return setWriteDeadline(c.fd, t)
<a id="L127"></a><span class="ln">   127</span>	}
<a id="L128"></a><span class="ln">   128</span>	
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// SetReadBuffer sets the size of the operating system&#39;s</span>
<a id="L130"></a><span class="ln">   130</span>	<span class="comment">// receive buffer associated with the connection.</span>
<a id="L131"></a><span class="ln">   131</span>	func (c *IPConn) SetReadBuffer(bytes int) error {
<a id="L132"></a><span class="ln">   132</span>		if !c.ok() {
<a id="L133"></a><span class="ln">   133</span>			return syscall.EINVAL
<a id="L134"></a><span class="ln">   134</span>		}
<a id="L135"></a><span class="ln">   135</span>		return setReadBuffer(c.fd, bytes)
<a id="L136"></a><span class="ln">   136</span>	}
<a id="L137"></a><span class="ln">   137</span>	
<a id="L138"></a><span class="ln">   138</span>	<span class="comment">// SetWriteBuffer sets the size of the operating system&#39;s</span>
<a id="L139"></a><span class="ln">   139</span>	<span class="comment">// transmit buffer associated with the connection.</span>
<a id="L140"></a><span class="ln">   140</span>	func (c *IPConn) SetWriteBuffer(bytes int) error {
<a id="L141"></a><span class="ln">   141</span>		if !c.ok() {
<a id="L142"></a><span class="ln">   142</span>			return syscall.EINVAL
<a id="L143"></a><span class="ln">   143</span>		}
<a id="L144"></a><span class="ln">   144</span>		return setWriteBuffer(c.fd, bytes)
<a id="L145"></a><span class="ln">   145</span>	}
<a id="L146"></a><span class="ln">   146</span>	
<a id="L147"></a><span class="ln">   147</span>	<span class="comment">// IP-specific methods.</span>
<a id="L148"></a><span class="ln">   148</span>	
<a id="L149"></a><span class="ln">   149</span>	<span class="comment">// ReadFromIP reads a IP packet from c, copying the payload into b.</span>
<a id="L150"></a><span class="ln">   150</span>	<span class="comment">// It returns the number of bytes copied into b and the return address</span>
<a id="L151"></a><span class="ln">   151</span>	<span class="comment">// that was on the packet.</span>
<a id="L152"></a><span class="ln">   152</span>	<span class="comment">//</span>
<a id="L153"></a><span class="ln">   153</span>	<span class="comment">// ReadFromIP can be made to time out and return an error with</span>
<a id="L154"></a><span class="ln">   154</span>	<span class="comment">// Timeout() == true after a fixed time limit; see SetDeadline and</span>
<a id="L155"></a><span class="ln">   155</span>	<span class="comment">// SetReadDeadline.</span>
<a id="L156"></a><span class="ln">   156</span>	func (c *IPConn) ReadFromIP(b []byte) (int, *IPAddr, error) {
<a id="L157"></a><span class="ln">   157</span>		if !c.ok() {
<a id="L158"></a><span class="ln">   158</span>			return 0, nil, syscall.EINVAL
<a id="L159"></a><span class="ln">   159</span>		}
<a id="L160"></a><span class="ln">   160</span>		<span class="comment">// TODO(cw,rsc): consider using readv if we know the family</span>
<a id="L161"></a><span class="ln">   161</span>		<span class="comment">// type to avoid the header trim/copy</span>
<a id="L162"></a><span class="ln">   162</span>		var addr *IPAddr
<a id="L163"></a><span class="ln">   163</span>		n, sa, err := c.fd.ReadFrom(b)
<a id="L164"></a><span class="ln">   164</span>		switch sa := sa.(type) {
<a id="L165"></a><span class="ln">   165</span>		case *syscall.SockaddrInet4:
<a id="L166"></a><span class="ln">   166</span>			addr = &amp;IPAddr{sa.Addr[0:]}
<a id="L167"></a><span class="ln">   167</span>			if len(b) &gt;= IPv4len { <span class="comment">// discard ipv4 header</span>
<a id="L168"></a><span class="ln">   168</span>				hsize := (int(b[0]) &amp; 0xf) * 4
<a id="L169"></a><span class="ln">   169</span>				copy(b, b[hsize:])
<a id="L170"></a><span class="ln">   170</span>				n -= hsize
<a id="L171"></a><span class="ln">   171</span>			}
<a id="L172"></a><span class="ln">   172</span>		case *syscall.SockaddrInet6:
<a id="L173"></a><span class="ln">   173</span>			addr = &amp;IPAddr{sa.Addr[0:]}
<a id="L174"></a><span class="ln">   174</span>		}
<a id="L175"></a><span class="ln">   175</span>		return n, addr, err
<a id="L176"></a><span class="ln">   176</span>	}
<a id="L177"></a><span class="ln">   177</span>	
<a id="L178"></a><span class="ln">   178</span>	<span class="comment">// ReadFrom implements the PacketConn ReadFrom method.</span>
<a id="L179"></a><span class="ln">   179</span>	func (c *IPConn) ReadFrom(b []byte) (int, Addr, error) {
<a id="L180"></a><span class="ln">   180</span>		if !c.ok() {
<a id="L181"></a><span class="ln">   181</span>			return 0, nil, syscall.EINVAL
<a id="L182"></a><span class="ln">   182</span>		}
<a id="L183"></a><span class="ln">   183</span>		n, uaddr, err := c.ReadFromIP(b)
<a id="L184"></a><span class="ln">   184</span>		return n, uaddr.toAddr(), err
<a id="L185"></a><span class="ln">   185</span>	}
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>	<span class="comment">// WriteToIP writes a IP packet to addr via c, copying the payload from b.</span>
<a id="L188"></a><span class="ln">   188</span>	<span class="comment">//</span>
<a id="L189"></a><span class="ln">   189</span>	<span class="comment">// WriteToIP can be made to time out and return</span>
<a id="L190"></a><span class="ln">   190</span>	<span class="comment">// an error with Timeout() == true after a fixed time limit;</span>
<a id="L191"></a><span class="ln">   191</span>	<span class="comment">// see SetDeadline and SetWriteDeadline.</span>
<a id="L192"></a><span class="ln">   192</span>	<span class="comment">// On packet-oriented connections, write timeouts are rare.</span>
<a id="L193"></a><span class="ln">   193</span>	func (c *IPConn) WriteToIP(b []byte, addr *IPAddr) (int, error) {
<a id="L194"></a><span class="ln">   194</span>		if !c.ok() {
<a id="L195"></a><span class="ln">   195</span>			return 0, syscall.EINVAL
<a id="L196"></a><span class="ln">   196</span>		}
<a id="L197"></a><span class="ln">   197</span>		sa, err := addr.sockaddr(c.fd.family)
<a id="L198"></a><span class="ln">   198</span>		if err != nil {
<a id="L199"></a><span class="ln">   199</span>			return 0, &amp;OpError{&#34;write&#34;, c.fd.net, addr, err}
<a id="L200"></a><span class="ln">   200</span>		}
<a id="L201"></a><span class="ln">   201</span>		return c.fd.WriteTo(b, sa)
<a id="L202"></a><span class="ln">   202</span>	}
<a id="L203"></a><span class="ln">   203</span>	
<a id="L204"></a><span class="ln">   204</span>	<span class="comment">// WriteTo implements the PacketConn WriteTo method.</span>
<a id="L205"></a><span class="ln">   205</span>	func (c *IPConn) WriteTo(b []byte, addr Addr) (int, error) {
<a id="L206"></a><span class="ln">   206</span>		if !c.ok() {
<a id="L207"></a><span class="ln">   207</span>			return 0, syscall.EINVAL
<a id="L208"></a><span class="ln">   208</span>		}
<a id="L209"></a><span class="ln">   209</span>		a, ok := addr.(*IPAddr)
<a id="L210"></a><span class="ln">   210</span>		if !ok {
<a id="L211"></a><span class="ln">   211</span>			return 0, &amp;OpError{&#34;write&#34;, c.fd.net, addr, syscall.EINVAL}
<a id="L212"></a><span class="ln">   212</span>		}
<a id="L213"></a><span class="ln">   213</span>		return c.WriteToIP(b, a)
<a id="L214"></a><span class="ln">   214</span>	}
<a id="L215"></a><span class="ln">   215</span>	
<a id="L216"></a><span class="ln">   216</span>	<span class="comment">// DialIP connects to the remote address raddr on the network protocol netProto,</span>
<a id="L217"></a><span class="ln">   217</span>	<span class="comment">// which must be &#34;ip&#34;, &#34;ip4&#34;, or &#34;ip6&#34; followed by a colon and a protocol number or name.</span>
<a id="L218"></a><span class="ln">   218</span>	func DialIP(netProto string, laddr, raddr *IPAddr) (*IPConn, error) {
<a id="L219"></a><span class="ln">   219</span>		net, proto, err := parseDialNetwork(netProto)
<a id="L220"></a><span class="ln">   220</span>		if err != nil {
<a id="L221"></a><span class="ln">   221</span>			return nil, err
<a id="L222"></a><span class="ln">   222</span>		}
<a id="L223"></a><span class="ln">   223</span>		switch net {
<a id="L224"></a><span class="ln">   224</span>		case &#34;ip&#34;, &#34;ip4&#34;, &#34;ip6&#34;:
<a id="L225"></a><span class="ln">   225</span>		default:
<a id="L226"></a><span class="ln">   226</span>			return nil, UnknownNetworkError(net)
<a id="L227"></a><span class="ln">   227</span>		}
<a id="L228"></a><span class="ln">   228</span>		if raddr == nil {
<a id="L229"></a><span class="ln">   229</span>			return nil, &amp;OpError{&#34;dial&#34;, netProto, nil, errMissingAddress}
<a id="L230"></a><span class="ln">   230</span>		}
<a id="L231"></a><span class="ln">   231</span>		fd, err := internetSocket(net, laddr.toAddr(), raddr.toAddr(), syscall.SOCK_RAW, proto, &#34;dial&#34;, sockaddrToIP)
<a id="L232"></a><span class="ln">   232</span>		if err != nil {
<a id="L233"></a><span class="ln">   233</span>			return nil, err
<a id="L234"></a><span class="ln">   234</span>		}
<a id="L235"></a><span class="ln">   235</span>		return newIPConn(fd), nil
<a id="L236"></a><span class="ln">   236</span>	}
<a id="L237"></a><span class="ln">   237</span>	
<a id="L238"></a><span class="ln">   238</span>	<span class="comment">// ListenIP listens for incoming IP packets addressed to the</span>
<a id="L239"></a><span class="ln">   239</span>	<span class="comment">// local address laddr.  The returned connection c&#39;s ReadFrom</span>
<a id="L240"></a><span class="ln">   240</span>	<span class="comment">// and WriteTo methods can be used to receive and send IP</span>
<a id="L241"></a><span class="ln">   241</span>	<span class="comment">// packets with per-packet addressing.</span>
<a id="L242"></a><span class="ln">   242</span>	func ListenIP(netProto string, laddr *IPAddr) (*IPConn, error) {
<a id="L243"></a><span class="ln">   243</span>		net, proto, err := parseDialNetwork(netProto)
<a id="L244"></a><span class="ln">   244</span>		if err != nil {
<a id="L245"></a><span class="ln">   245</span>			return nil, err
<a id="L246"></a><span class="ln">   246</span>		}
<a id="L247"></a><span class="ln">   247</span>		switch net {
<a id="L248"></a><span class="ln">   248</span>		case &#34;ip&#34;, &#34;ip4&#34;, &#34;ip6&#34;:
<a id="L249"></a><span class="ln">   249</span>		default:
<a id="L250"></a><span class="ln">   250</span>			return nil, UnknownNetworkError(net)
<a id="L251"></a><span class="ln">   251</span>		}
<a id="L252"></a><span class="ln">   252</span>		fd, err := internetSocket(net, laddr.toAddr(), nil, syscall.SOCK_RAW, proto, &#34;listen&#34;, sockaddrToIP)
<a id="L253"></a><span class="ln">   253</span>		if err != nil {
<a id="L254"></a><span class="ln">   254</span>			return nil, err
<a id="L255"></a><span class="ln">   255</span>		}
<a id="L256"></a><span class="ln">   256</span>		return newIPConn(fd), nil
<a id="L257"></a><span class="ln">   257</span>	}
<a id="L258"></a><span class="ln">   258</span>	
<a id="L259"></a><span class="ln">   259</span>	<span class="comment">// File returns a copy of the underlying os.File, set to blocking mode.</span>
<a id="L260"></a><span class="ln">   260</span>	<span class="comment">// It is the caller&#39;s responsibility to close f when finished.</span>
<a id="L261"></a><span class="ln">   261</span>	<span class="comment">// Closing c does not affect f, and closing f does not affect c.</span>
<a id="L262"></a><span class="ln">   262</span>	func (c *IPConn) File() (f *os.File, err error) { return c.fd.dup() }
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

