<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/tcpsock_posix.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/tcpsock_posix.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// +build darwin freebsd linux netbsd openbsd windows</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// TCP sockets</span>
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	package net
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	import (
<a id="L12"></a><span class="ln">    12</span>		&#34;io&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;os&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;syscall&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;time&#34;
<a id="L16"></a><span class="ln">    16</span>	)
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// BUG(rsc): On OpenBSD, listening on the &#34;tcp&#34; network does not listen for</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// both IPv4 and IPv6 connections. This is due to the fact that IPv4 traffic</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// will not be routed to an IPv6 socket - two separate sockets are required</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// if both AFs are to be supported. See inet6(4) on OpenBSD for details.</span>
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	func sockaddrToTCP(sa syscall.Sockaddr) Addr {
<a id="L24"></a><span class="ln">    24</span>		switch sa := sa.(type) {
<a id="L25"></a><span class="ln">    25</span>		case *syscall.SockaddrInet4:
<a id="L26"></a><span class="ln">    26</span>			return &amp;TCPAddr{sa.Addr[0:], sa.Port}
<a id="L27"></a><span class="ln">    27</span>		case *syscall.SockaddrInet6:
<a id="L28"></a><span class="ln">    28</span>			return &amp;TCPAddr{sa.Addr[0:], sa.Port}
<a id="L29"></a><span class="ln">    29</span>		default:
<a id="L30"></a><span class="ln">    30</span>			if sa != nil {
<a id="L31"></a><span class="ln">    31</span>				<span class="comment">// Diagnose when we will turn a non-nil sockaddr into a nil.</span>
<a id="L32"></a><span class="ln">    32</span>				panic(&#34;unexpected type in sockaddrToTCP&#34;)
<a id="L33"></a><span class="ln">    33</span>			}
<a id="L34"></a><span class="ln">    34</span>		}
<a id="L35"></a><span class="ln">    35</span>		return nil
<a id="L36"></a><span class="ln">    36</span>	}
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>	func (a *TCPAddr) family() int {
<a id="L39"></a><span class="ln">    39</span>		if a == nil || len(a.IP) &lt;= IPv4len {
<a id="L40"></a><span class="ln">    40</span>			return syscall.AF_INET
<a id="L41"></a><span class="ln">    41</span>		}
<a id="L42"></a><span class="ln">    42</span>		if a.IP.To4() != nil {
<a id="L43"></a><span class="ln">    43</span>			return syscall.AF_INET
<a id="L44"></a><span class="ln">    44</span>		}
<a id="L45"></a><span class="ln">    45</span>		return syscall.AF_INET6
<a id="L46"></a><span class="ln">    46</span>	}
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>	func (a *TCPAddr) isWildcard() bool {
<a id="L49"></a><span class="ln">    49</span>		if a == nil || a.IP == nil {
<a id="L50"></a><span class="ln">    50</span>			return true
<a id="L51"></a><span class="ln">    51</span>		}
<a id="L52"></a><span class="ln">    52</span>		return a.IP.IsUnspecified()
<a id="L53"></a><span class="ln">    53</span>	}
<a id="L54"></a><span class="ln">    54</span>	
<a id="L55"></a><span class="ln">    55</span>	func (a *TCPAddr) sockaddr(family int) (syscall.Sockaddr, error) {
<a id="L56"></a><span class="ln">    56</span>		return ipToSockaddr(family, a.IP, a.Port)
<a id="L57"></a><span class="ln">    57</span>	}
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>	func (a *TCPAddr) toAddr() sockaddr {
<a id="L60"></a><span class="ln">    60</span>		if a == nil { <span class="comment">// nil *TCPAddr</span>
<a id="L61"></a><span class="ln">    61</span>			return nil <span class="comment">// nil interface</span>
<a id="L62"></a><span class="ln">    62</span>		}
<a id="L63"></a><span class="ln">    63</span>		return a
<a id="L64"></a><span class="ln">    64</span>	}
<a id="L65"></a><span class="ln">    65</span>	
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">// TCPConn is an implementation of the Conn interface</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// for TCP network connections.</span>
<a id="L68"></a><span class="ln">    68</span>	type TCPConn struct {
<a id="L69"></a><span class="ln">    69</span>		fd *netFD
<a id="L70"></a><span class="ln">    70</span>	}
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>	func newTCPConn(fd *netFD) *TCPConn {
<a id="L73"></a><span class="ln">    73</span>		c := &amp;TCPConn{fd}
<a id="L74"></a><span class="ln">    74</span>		c.SetNoDelay(true)
<a id="L75"></a><span class="ln">    75</span>		return c
<a id="L76"></a><span class="ln">    76</span>	}
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>	func (c *TCPConn) ok() bool { return c != nil &amp;&amp; c.fd != nil }
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// Implementation of the Conn interface - see Conn for documentation.</span>
<a id="L81"></a><span class="ln">    81</span>	
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">// Read implements the Conn Read method.</span>
<a id="L83"></a><span class="ln">    83</span>	func (c *TCPConn) Read(b []byte) (n int, err error) {
<a id="L84"></a><span class="ln">    84</span>		if !c.ok() {
<a id="L85"></a><span class="ln">    85</span>			return 0, syscall.EINVAL
<a id="L86"></a><span class="ln">    86</span>		}
<a id="L87"></a><span class="ln">    87</span>		return c.fd.Read(b)
<a id="L88"></a><span class="ln">    88</span>	}
<a id="L89"></a><span class="ln">    89</span>	
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// ReadFrom implements the io.ReaderFrom ReadFrom method.</span>
<a id="L91"></a><span class="ln">    91</span>	func (c *TCPConn) ReadFrom(r io.Reader) (int64, error) {
<a id="L92"></a><span class="ln">    92</span>		if n, err, handled := sendFile(c.fd, r); handled {
<a id="L93"></a><span class="ln">    93</span>			return n, err
<a id="L94"></a><span class="ln">    94</span>		}
<a id="L95"></a><span class="ln">    95</span>		return genericReadFrom(c, r)
<a id="L96"></a><span class="ln">    96</span>	}
<a id="L97"></a><span class="ln">    97</span>	
<a id="L98"></a><span class="ln">    98</span>	<span class="comment">// Write implements the Conn Write method.</span>
<a id="L99"></a><span class="ln">    99</span>	func (c *TCPConn) Write(b []byte) (n int, err error) {
<a id="L100"></a><span class="ln">   100</span>		if !c.ok() {
<a id="L101"></a><span class="ln">   101</span>			return 0, syscall.EINVAL
<a id="L102"></a><span class="ln">   102</span>		}
<a id="L103"></a><span class="ln">   103</span>		return c.fd.Write(b)
<a id="L104"></a><span class="ln">   104</span>	}
<a id="L105"></a><span class="ln">   105</span>	
<a id="L106"></a><span class="ln">   106</span>	<span class="comment">// Close closes the TCP connection.</span>
<a id="L107"></a><span class="ln">   107</span>	func (c *TCPConn) Close() error {
<a id="L108"></a><span class="ln">   108</span>		if !c.ok() {
<a id="L109"></a><span class="ln">   109</span>			return syscall.EINVAL
<a id="L110"></a><span class="ln">   110</span>		}
<a id="L111"></a><span class="ln">   111</span>		return c.fd.Close()
<a id="L112"></a><span class="ln">   112</span>	}
<a id="L113"></a><span class="ln">   113</span>	
<a id="L114"></a><span class="ln">   114</span>	<span class="comment">// CloseRead shuts down the reading side of the TCP connection.</span>
<a id="L115"></a><span class="ln">   115</span>	<span class="comment">// Most callers should just use Close.</span>
<a id="L116"></a><span class="ln">   116</span>	func (c *TCPConn) CloseRead() error {
<a id="L117"></a><span class="ln">   117</span>		if !c.ok() {
<a id="L118"></a><span class="ln">   118</span>			return syscall.EINVAL
<a id="L119"></a><span class="ln">   119</span>		}
<a id="L120"></a><span class="ln">   120</span>		return c.fd.CloseRead()
<a id="L121"></a><span class="ln">   121</span>	}
<a id="L122"></a><span class="ln">   122</span>	
<a id="L123"></a><span class="ln">   123</span>	<span class="comment">// CloseWrite shuts down the writing side of the TCP connection.</span>
<a id="L124"></a><span class="ln">   124</span>	<span class="comment">// Most callers should just use Close.</span>
<a id="L125"></a><span class="ln">   125</span>	func (c *TCPConn) CloseWrite() error {
<a id="L126"></a><span class="ln">   126</span>		if !c.ok() {
<a id="L127"></a><span class="ln">   127</span>			return syscall.EINVAL
<a id="L128"></a><span class="ln">   128</span>		}
<a id="L129"></a><span class="ln">   129</span>		return c.fd.CloseWrite()
<a id="L130"></a><span class="ln">   130</span>	}
<a id="L131"></a><span class="ln">   131</span>	
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">// LocalAddr returns the local network address, a *TCPAddr.</span>
<a id="L133"></a><span class="ln">   133</span>	func (c *TCPConn) LocalAddr() Addr {
<a id="L134"></a><span class="ln">   134</span>		if !c.ok() {
<a id="L135"></a><span class="ln">   135</span>			return nil
<a id="L136"></a><span class="ln">   136</span>		}
<a id="L137"></a><span class="ln">   137</span>		return c.fd.laddr
<a id="L138"></a><span class="ln">   138</span>	}
<a id="L139"></a><span class="ln">   139</span>	
<a id="L140"></a><span class="ln">   140</span>	<span class="comment">// RemoteAddr returns the remote network address, a *TCPAddr.</span>
<a id="L141"></a><span class="ln">   141</span>	func (c *TCPConn) RemoteAddr() Addr {
<a id="L142"></a><span class="ln">   142</span>		if !c.ok() {
<a id="L143"></a><span class="ln">   143</span>			return nil
<a id="L144"></a><span class="ln">   144</span>		}
<a id="L145"></a><span class="ln">   145</span>		return c.fd.raddr
<a id="L146"></a><span class="ln">   146</span>	}
<a id="L147"></a><span class="ln">   147</span>	
<a id="L148"></a><span class="ln">   148</span>	<span class="comment">// SetDeadline implements the Conn SetDeadline method.</span>
<a id="L149"></a><span class="ln">   149</span>	func (c *TCPConn) SetDeadline(t time.Time) error {
<a id="L150"></a><span class="ln">   150</span>		if !c.ok() {
<a id="L151"></a><span class="ln">   151</span>			return syscall.EINVAL
<a id="L152"></a><span class="ln">   152</span>		}
<a id="L153"></a><span class="ln">   153</span>		return setDeadline(c.fd, t)
<a id="L154"></a><span class="ln">   154</span>	}
<a id="L155"></a><span class="ln">   155</span>	
<a id="L156"></a><span class="ln">   156</span>	<span class="comment">// SetReadDeadline implements the Conn SetReadDeadline method.</span>
<a id="L157"></a><span class="ln">   157</span>	func (c *TCPConn) SetReadDeadline(t time.Time) error {
<a id="L158"></a><span class="ln">   158</span>		if !c.ok() {
<a id="L159"></a><span class="ln">   159</span>			return syscall.EINVAL
<a id="L160"></a><span class="ln">   160</span>		}
<a id="L161"></a><span class="ln">   161</span>		return setReadDeadline(c.fd, t)
<a id="L162"></a><span class="ln">   162</span>	}
<a id="L163"></a><span class="ln">   163</span>	
<a id="L164"></a><span class="ln">   164</span>	<span class="comment">// SetWriteDeadline implements the Conn SetWriteDeadline method.</span>
<a id="L165"></a><span class="ln">   165</span>	func (c *TCPConn) SetWriteDeadline(t time.Time) error {
<a id="L166"></a><span class="ln">   166</span>		if !c.ok() {
<a id="L167"></a><span class="ln">   167</span>			return syscall.EINVAL
<a id="L168"></a><span class="ln">   168</span>		}
<a id="L169"></a><span class="ln">   169</span>		return setWriteDeadline(c.fd, t)
<a id="L170"></a><span class="ln">   170</span>	}
<a id="L171"></a><span class="ln">   171</span>	
<a id="L172"></a><span class="ln">   172</span>	<span class="comment">// SetReadBuffer sets the size of the operating system&#39;s</span>
<a id="L173"></a><span class="ln">   173</span>	<span class="comment">// receive buffer associated with the connection.</span>
<a id="L174"></a><span class="ln">   174</span>	func (c *TCPConn) SetReadBuffer(bytes int) error {
<a id="L175"></a><span class="ln">   175</span>		if !c.ok() {
<a id="L176"></a><span class="ln">   176</span>			return syscall.EINVAL
<a id="L177"></a><span class="ln">   177</span>		}
<a id="L178"></a><span class="ln">   178</span>		return setReadBuffer(c.fd, bytes)
<a id="L179"></a><span class="ln">   179</span>	}
<a id="L180"></a><span class="ln">   180</span>	
<a id="L181"></a><span class="ln">   181</span>	<span class="comment">// SetWriteBuffer sets the size of the operating system&#39;s</span>
<a id="L182"></a><span class="ln">   182</span>	<span class="comment">// transmit buffer associated with the connection.</span>
<a id="L183"></a><span class="ln">   183</span>	func (c *TCPConn) SetWriteBuffer(bytes int) error {
<a id="L184"></a><span class="ln">   184</span>		if !c.ok() {
<a id="L185"></a><span class="ln">   185</span>			return syscall.EINVAL
<a id="L186"></a><span class="ln">   186</span>		}
<a id="L187"></a><span class="ln">   187</span>		return setWriteBuffer(c.fd, bytes)
<a id="L188"></a><span class="ln">   188</span>	}
<a id="L189"></a><span class="ln">   189</span>	
<a id="L190"></a><span class="ln">   190</span>	<span class="comment">// SetLinger sets the behavior of Close() on a connection</span>
<a id="L191"></a><span class="ln">   191</span>	<span class="comment">// which still has data waiting to be sent or to be acknowledged.</span>
<a id="L192"></a><span class="ln">   192</span>	<span class="comment">//</span>
<a id="L193"></a><span class="ln">   193</span>	<span class="comment">// If sec &lt; 0 (the default), Close returns immediately and</span>
<a id="L194"></a><span class="ln">   194</span>	<span class="comment">// the operating system finishes sending the data in the background.</span>
<a id="L195"></a><span class="ln">   195</span>	<span class="comment">//</span>
<a id="L196"></a><span class="ln">   196</span>	<span class="comment">// If sec == 0, Close returns immediately and the operating system</span>
<a id="L197"></a><span class="ln">   197</span>	<span class="comment">// discards any unsent or unacknowledged data.</span>
<a id="L198"></a><span class="ln">   198</span>	<span class="comment">//</span>
<a id="L199"></a><span class="ln">   199</span>	<span class="comment">// If sec &gt; 0, Close blocks for at most sec seconds waiting for</span>
<a id="L200"></a><span class="ln">   200</span>	<span class="comment">// data to be sent and acknowledged.</span>
<a id="L201"></a><span class="ln">   201</span>	func (c *TCPConn) SetLinger(sec int) error {
<a id="L202"></a><span class="ln">   202</span>		if !c.ok() {
<a id="L203"></a><span class="ln">   203</span>			return syscall.EINVAL
<a id="L204"></a><span class="ln">   204</span>		}
<a id="L205"></a><span class="ln">   205</span>		return setLinger(c.fd, sec)
<a id="L206"></a><span class="ln">   206</span>	}
<a id="L207"></a><span class="ln">   207</span>	
<a id="L208"></a><span class="ln">   208</span>	<span class="comment">// SetKeepAlive sets whether the operating system should send</span>
<a id="L209"></a><span class="ln">   209</span>	<span class="comment">// keepalive messages on the connection.</span>
<a id="L210"></a><span class="ln">   210</span>	func (c *TCPConn) SetKeepAlive(keepalive bool) error {
<a id="L211"></a><span class="ln">   211</span>		if !c.ok() {
<a id="L212"></a><span class="ln">   212</span>			return syscall.EINVAL
<a id="L213"></a><span class="ln">   213</span>		}
<a id="L214"></a><span class="ln">   214</span>		return setKeepAlive(c.fd, keepalive)
<a id="L215"></a><span class="ln">   215</span>	}
<a id="L216"></a><span class="ln">   216</span>	
<a id="L217"></a><span class="ln">   217</span>	<span class="comment">// SetNoDelay controls whether the operating system should delay</span>
<a id="L218"></a><span class="ln">   218</span>	<span class="comment">// packet transmission in hopes of sending fewer packets</span>
<a id="L219"></a><span class="ln">   219</span>	<span class="comment">// (Nagle&#39;s algorithm).  The default is true (no delay), meaning</span>
<a id="L220"></a><span class="ln">   220</span>	<span class="comment">// that data is sent as soon as possible after a Write.</span>
<a id="L221"></a><span class="ln">   221</span>	func (c *TCPConn) SetNoDelay(noDelay bool) error {
<a id="L222"></a><span class="ln">   222</span>		if !c.ok() {
<a id="L223"></a><span class="ln">   223</span>			return syscall.EINVAL
<a id="L224"></a><span class="ln">   224</span>		}
<a id="L225"></a><span class="ln">   225</span>		return setNoDelay(c.fd, noDelay)
<a id="L226"></a><span class="ln">   226</span>	}
<a id="L227"></a><span class="ln">   227</span>	
<a id="L228"></a><span class="ln">   228</span>	<span class="comment">// File returns a copy of the underlying os.File, set to blocking mode.</span>
<a id="L229"></a><span class="ln">   229</span>	<span class="comment">// It is the caller&#39;s responsibility to close f when finished.</span>
<a id="L230"></a><span class="ln">   230</span>	<span class="comment">// Closing c does not affect f, and closing f does not affect c.</span>
<a id="L231"></a><span class="ln">   231</span>	func (c *TCPConn) File() (f *os.File, err error) { return c.fd.dup() }
<a id="L232"></a><span class="ln">   232</span>	
<a id="L233"></a><span class="ln">   233</span>	<span class="comment">// DialTCP connects to the remote address raddr on the network net,</span>
<a id="L234"></a><span class="ln">   234</span>	<span class="comment">// which must be &#34;tcp&#34;, &#34;tcp4&#34;, or &#34;tcp6&#34;.  If laddr is not nil, it is used</span>
<a id="L235"></a><span class="ln">   235</span>	<span class="comment">// as the local address for the connection.</span>
<a id="L236"></a><span class="ln">   236</span>	func DialTCP(net string, laddr, raddr *TCPAddr) (*TCPConn, error) {
<a id="L237"></a><span class="ln">   237</span>		if raddr == nil {
<a id="L238"></a><span class="ln">   238</span>			return nil, &amp;OpError{&#34;dial&#34;, net, nil, errMissingAddress}
<a id="L239"></a><span class="ln">   239</span>		}
<a id="L240"></a><span class="ln">   240</span>	
<a id="L241"></a><span class="ln">   241</span>		fd, err := internetSocket(net, laddr.toAddr(), raddr.toAddr(), syscall.SOCK_STREAM, 0, &#34;dial&#34;, sockaddrToTCP)
<a id="L242"></a><span class="ln">   242</span>	
<a id="L243"></a><span class="ln">   243</span>		<span class="comment">// TCP has a rarely used mechanism called a &#39;simultaneous connection&#39; in</span>
<a id="L244"></a><span class="ln">   244</span>		<span class="comment">// which Dial(&#34;tcp&#34;, addr1, addr2) run on the machine at addr1 can</span>
<a id="L245"></a><span class="ln">   245</span>		<span class="comment">// connect to a simultaneous Dial(&#34;tcp&#34;, addr2, addr1) run on the machine</span>
<a id="L246"></a><span class="ln">   246</span>		<span class="comment">// at addr2, without either machine executing Listen.  If laddr == nil,</span>
<a id="L247"></a><span class="ln">   247</span>		<span class="comment">// it means we want the kernel to pick an appropriate originating local</span>
<a id="L248"></a><span class="ln">   248</span>		<span class="comment">// address.  Some Linux kernels cycle blindly through a fixed range of</span>
<a id="L249"></a><span class="ln">   249</span>		<span class="comment">// local ports, regardless of destination port.  If a kernel happens to</span>
<a id="L250"></a><span class="ln">   250</span>		<span class="comment">// pick local port 50001 as the source for a Dial(&#34;tcp&#34;, &#34;&#34;, &#34;localhost:50001&#34;),</span>
<a id="L251"></a><span class="ln">   251</span>		<span class="comment">// then the Dial will succeed, having simultaneously connected to itself.</span>
<a id="L252"></a><span class="ln">   252</span>		<span class="comment">// This can only happen when we are letting the kernel pick a port (laddr == nil)</span>
<a id="L253"></a><span class="ln">   253</span>		<span class="comment">// and when there is no listener for the destination address.</span>
<a id="L254"></a><span class="ln">   254</span>		<span class="comment">// It&#39;s hard to argue this is anything other than a kernel bug.  If we</span>
<a id="L255"></a><span class="ln">   255</span>		<span class="comment">// see this happen, rather than expose the buggy effect to users, we</span>
<a id="L256"></a><span class="ln">   256</span>		<span class="comment">// close the fd and try again.  If it happens twice more, we relent and</span>
<a id="L257"></a><span class="ln">   257</span>		<span class="comment">// use the result.  See also:</span>
<a id="L258"></a><span class="ln">   258</span>		<span class="comment">//	http://golang.org/issue/2690</span>
<a id="L259"></a><span class="ln">   259</span>		<span class="comment">//	http://stackoverflow.com/questions/4949858/</span>
<a id="L260"></a><span class="ln">   260</span>		for i := 0; i &lt; 2 &amp;&amp; err == nil &amp;&amp; laddr == nil &amp;&amp; selfConnect(fd); i++ {
<a id="L261"></a><span class="ln">   261</span>			fd.Close()
<a id="L262"></a><span class="ln">   262</span>			fd, err = internetSocket(net, laddr.toAddr(), raddr.toAddr(), syscall.SOCK_STREAM, 0, &#34;dial&#34;, sockaddrToTCP)
<a id="L263"></a><span class="ln">   263</span>		}
<a id="L264"></a><span class="ln">   264</span>	
<a id="L265"></a><span class="ln">   265</span>		if err != nil {
<a id="L266"></a><span class="ln">   266</span>			return nil, err
<a id="L267"></a><span class="ln">   267</span>		}
<a id="L268"></a><span class="ln">   268</span>		return newTCPConn(fd), nil
<a id="L269"></a><span class="ln">   269</span>	}
<a id="L270"></a><span class="ln">   270</span>	
<a id="L271"></a><span class="ln">   271</span>	func selfConnect(fd *netFD) bool {
<a id="L272"></a><span class="ln">   272</span>		<span class="comment">// The socket constructor can return an fd with raddr nil under certain</span>
<a id="L273"></a><span class="ln">   273</span>		<span class="comment">// unknown conditions. The errors in the calls there to Getpeername</span>
<a id="L274"></a><span class="ln">   274</span>		<span class="comment">// are discarded, but we can&#39;t catch the problem there because those</span>
<a id="L275"></a><span class="ln">   275</span>		<span class="comment">// calls are sometimes legally erroneous with a &#34;socket not connected&#34;.</span>
<a id="L276"></a><span class="ln">   276</span>		<span class="comment">// Since this code (selfConnect) is already trying to work around</span>
<a id="L277"></a><span class="ln">   277</span>		<span class="comment">// a problem, we make sure if this happens we recognize trouble and</span>
<a id="L278"></a><span class="ln">   278</span>		<span class="comment">// ask the DialTCP routine to try again.</span>
<a id="L279"></a><span class="ln">   279</span>		<span class="comment">// TODO: try to understand what&#39;s really going on.</span>
<a id="L280"></a><span class="ln">   280</span>		if fd.laddr == nil || fd.raddr == nil {
<a id="L281"></a><span class="ln">   281</span>			return true
<a id="L282"></a><span class="ln">   282</span>		}
<a id="L283"></a><span class="ln">   283</span>		l := fd.laddr.(*TCPAddr)
<a id="L284"></a><span class="ln">   284</span>		r := fd.raddr.(*TCPAddr)
<a id="L285"></a><span class="ln">   285</span>		return l.Port == r.Port &amp;&amp; l.IP.Equal(r.IP)
<a id="L286"></a><span class="ln">   286</span>	}
<a id="L287"></a><span class="ln">   287</span>	
<a id="L288"></a><span class="ln">   288</span>	<span class="comment">// TCPListener is a TCP network listener.</span>
<a id="L289"></a><span class="ln">   289</span>	<span class="comment">// Clients should typically use variables of type Listener</span>
<a id="L290"></a><span class="ln">   290</span>	<span class="comment">// instead of assuming TCP.</span>
<a id="L291"></a><span class="ln">   291</span>	type TCPListener struct {
<a id="L292"></a><span class="ln">   292</span>		fd *netFD
<a id="L293"></a><span class="ln">   293</span>	}
<a id="L294"></a><span class="ln">   294</span>	
<a id="L295"></a><span class="ln">   295</span>	<span class="comment">// ListenTCP announces on the TCP address laddr and returns a TCP listener.</span>
<a id="L296"></a><span class="ln">   296</span>	<span class="comment">// Net must be &#34;tcp&#34;, &#34;tcp4&#34;, or &#34;tcp6&#34;.</span>
<a id="L297"></a><span class="ln">   297</span>	<span class="comment">// If laddr has a port of 0, it means to listen on some available port.</span>
<a id="L298"></a><span class="ln">   298</span>	<span class="comment">// The caller can use l.Addr() to retrieve the chosen address.</span>
<a id="L299"></a><span class="ln">   299</span>	func ListenTCP(net string, laddr *TCPAddr) (*TCPListener, error) {
<a id="L300"></a><span class="ln">   300</span>		fd, err := internetSocket(net, laddr.toAddr(), nil, syscall.SOCK_STREAM, 0, &#34;listen&#34;, sockaddrToTCP)
<a id="L301"></a><span class="ln">   301</span>		if err != nil {
<a id="L302"></a><span class="ln">   302</span>			return nil, err
<a id="L303"></a><span class="ln">   303</span>		}
<a id="L304"></a><span class="ln">   304</span>		err = syscall.Listen(fd.sysfd, listenerBacklog)
<a id="L305"></a><span class="ln">   305</span>		if err != nil {
<a id="L306"></a><span class="ln">   306</span>			closesocket(fd.sysfd)
<a id="L307"></a><span class="ln">   307</span>			return nil, &amp;OpError{&#34;listen&#34;, net, laddr, err}
<a id="L308"></a><span class="ln">   308</span>		}
<a id="L309"></a><span class="ln">   309</span>		l := new(TCPListener)
<a id="L310"></a><span class="ln">   310</span>		l.fd = fd
<a id="L311"></a><span class="ln">   311</span>		return l, nil
<a id="L312"></a><span class="ln">   312</span>	}
<a id="L313"></a><span class="ln">   313</span>	
<a id="L314"></a><span class="ln">   314</span>	<span class="comment">// AcceptTCP accepts the next incoming call and returns the new connection</span>
<a id="L315"></a><span class="ln">   315</span>	<span class="comment">// and the remote address.</span>
<a id="L316"></a><span class="ln">   316</span>	func (l *TCPListener) AcceptTCP() (c *TCPConn, err error) {
<a id="L317"></a><span class="ln">   317</span>		if l == nil || l.fd == nil || l.fd.sysfd &lt; 0 {
<a id="L318"></a><span class="ln">   318</span>			return nil, syscall.EINVAL
<a id="L319"></a><span class="ln">   319</span>		}
<a id="L320"></a><span class="ln">   320</span>		fd, err := l.fd.accept(sockaddrToTCP)
<a id="L321"></a><span class="ln">   321</span>		if err != nil {
<a id="L322"></a><span class="ln">   322</span>			return nil, err
<a id="L323"></a><span class="ln">   323</span>		}
<a id="L324"></a><span class="ln">   324</span>		return newTCPConn(fd), nil
<a id="L325"></a><span class="ln">   325</span>	}
<a id="L326"></a><span class="ln">   326</span>	
<a id="L327"></a><span class="ln">   327</span>	<span class="comment">// Accept implements the Accept method in the Listener interface;</span>
<a id="L328"></a><span class="ln">   328</span>	<span class="comment">// it waits for the next call and returns a generic Conn.</span>
<a id="L329"></a><span class="ln">   329</span>	func (l *TCPListener) Accept() (c Conn, err error) {
<a id="L330"></a><span class="ln">   330</span>		c1, err := l.AcceptTCP()
<a id="L331"></a><span class="ln">   331</span>		if err != nil {
<a id="L332"></a><span class="ln">   332</span>			return nil, err
<a id="L333"></a><span class="ln">   333</span>		}
<a id="L334"></a><span class="ln">   334</span>		return c1, nil
<a id="L335"></a><span class="ln">   335</span>	}
<a id="L336"></a><span class="ln">   336</span>	
<a id="L337"></a><span class="ln">   337</span>	<span class="comment">// Close stops listening on the TCP address.</span>
<a id="L338"></a><span class="ln">   338</span>	<span class="comment">// Already Accepted connections are not closed.</span>
<a id="L339"></a><span class="ln">   339</span>	func (l *TCPListener) Close() error {
<a id="L340"></a><span class="ln">   340</span>		if l == nil || l.fd == nil {
<a id="L341"></a><span class="ln">   341</span>			return syscall.EINVAL
<a id="L342"></a><span class="ln">   342</span>		}
<a id="L343"></a><span class="ln">   343</span>		return l.fd.Close()
<a id="L344"></a><span class="ln">   344</span>	}
<a id="L345"></a><span class="ln">   345</span>	
<a id="L346"></a><span class="ln">   346</span>	<span class="comment">// Addr returns the listener&#39;s network address, a *TCPAddr.</span>
<a id="L347"></a><span class="ln">   347</span>	func (l *TCPListener) Addr() Addr { return l.fd.laddr }
<a id="L348"></a><span class="ln">   348</span>	
<a id="L349"></a><span class="ln">   349</span>	<span class="comment">// SetDeadline sets the deadline associated with the listener.</span>
<a id="L350"></a><span class="ln">   350</span>	<span class="comment">// A zero time value disables the deadline.</span>
<a id="L351"></a><span class="ln">   351</span>	func (l *TCPListener) SetDeadline(t time.Time) error {
<a id="L352"></a><span class="ln">   352</span>		if l == nil || l.fd == nil {
<a id="L353"></a><span class="ln">   353</span>			return syscall.EINVAL
<a id="L354"></a><span class="ln">   354</span>		}
<a id="L355"></a><span class="ln">   355</span>		return setDeadline(l.fd, t)
<a id="L356"></a><span class="ln">   356</span>	}
<a id="L357"></a><span class="ln">   357</span>	
<a id="L358"></a><span class="ln">   358</span>	<span class="comment">// File returns a copy of the underlying os.File, set to blocking mode.</span>
<a id="L359"></a><span class="ln">   359</span>	<span class="comment">// It is the caller&#39;s responsibility to close f when finished.</span>
<a id="L360"></a><span class="ln">   360</span>	<span class="comment">// Closing l does not affect f, and closing f does not affect l.</span>
<a id="L361"></a><span class="ln">   361</span>	func (l *TCPListener) File() (f *os.File, err error) { return l.fd.dup() }
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

