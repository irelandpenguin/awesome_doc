<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/cgo_unix.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/cgo_unix.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// +build darwin freebsd linux</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package net
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">/*
</span><a id="L10"></a><span class="ln">    10</span>	<span class="comment">#include &lt;sys/types.h&gt;
</span><a id="L11"></a><span class="ln">    11</span>	<span class="comment">#include &lt;sys/socket.h&gt;
</span><a id="L12"></a><span class="ln">    12</span>	<span class="comment">#include &lt;netinet/in.h&gt;
</span><a id="L13"></a><span class="ln">    13</span>	<span class="comment">#include &lt;netdb.h&gt;
</span><a id="L14"></a><span class="ln">    14</span>	<span class="comment">#include &lt;stdlib.h&gt;
</span><a id="L15"></a><span class="ln">    15</span>	<span class="comment">#include &lt;unistd.h&gt;
</span><a id="L16"></a><span class="ln">    16</span>	<span class="comment">#include &lt;string.h&gt;
</span><a id="L17"></a><span class="ln">    17</span>	<span class="comment">*/</span>
<a id="L18"></a><span class="ln">    18</span>	import &#34;C&#34;
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	import (
<a id="L21"></a><span class="ln">    21</span>		&#34;syscall&#34;
<a id="L22"></a><span class="ln">    22</span>		&#34;unsafe&#34;
<a id="L23"></a><span class="ln">    23</span>	)
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	func cgoLookupHost(name string) (addrs []string, err error, completed bool) {
<a id="L26"></a><span class="ln">    26</span>		ip, err, completed := cgoLookupIP(name)
<a id="L27"></a><span class="ln">    27</span>		for _, p := range ip {
<a id="L28"></a><span class="ln">    28</span>			addrs = append(addrs, p.String())
<a id="L29"></a><span class="ln">    29</span>		}
<a id="L30"></a><span class="ln">    30</span>		return
<a id="L31"></a><span class="ln">    31</span>	}
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	func cgoLookupPort(net, service string) (port int, err error, completed bool) {
<a id="L34"></a><span class="ln">    34</span>		var res *C.struct_addrinfo
<a id="L35"></a><span class="ln">    35</span>		var hints C.struct_addrinfo
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>		switch net {
<a id="L38"></a><span class="ln">    38</span>		case &#34;&#34;:
<a id="L39"></a><span class="ln">    39</span>			<span class="comment">// no hints</span>
<a id="L40"></a><span class="ln">    40</span>		case &#34;tcp&#34;, &#34;tcp4&#34;, &#34;tcp6&#34;:
<a id="L41"></a><span class="ln">    41</span>			hints.ai_socktype = C.SOCK_STREAM
<a id="L42"></a><span class="ln">    42</span>			hints.ai_protocol = C.IPPROTO_TCP
<a id="L43"></a><span class="ln">    43</span>		case &#34;udp&#34;, &#34;udp4&#34;, &#34;udp6&#34;:
<a id="L44"></a><span class="ln">    44</span>			hints.ai_socktype = C.SOCK_DGRAM
<a id="L45"></a><span class="ln">    45</span>			hints.ai_protocol = C.IPPROTO_UDP
<a id="L46"></a><span class="ln">    46</span>		default:
<a id="L47"></a><span class="ln">    47</span>			return 0, UnknownNetworkError(net), true
<a id="L48"></a><span class="ln">    48</span>		}
<a id="L49"></a><span class="ln">    49</span>		if len(net) &gt;= 4 {
<a id="L50"></a><span class="ln">    50</span>			switch net[3] {
<a id="L51"></a><span class="ln">    51</span>			case &#39;4&#39;:
<a id="L52"></a><span class="ln">    52</span>				hints.ai_family = C.AF_INET
<a id="L53"></a><span class="ln">    53</span>			case &#39;6&#39;:
<a id="L54"></a><span class="ln">    54</span>				hints.ai_family = C.AF_INET6
<a id="L55"></a><span class="ln">    55</span>			}
<a id="L56"></a><span class="ln">    56</span>		}
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>		s := C.CString(service)
<a id="L59"></a><span class="ln">    59</span>		defer C.free(unsafe.Pointer(s))
<a id="L60"></a><span class="ln">    60</span>		if C.getaddrinfo(nil, s, &amp;hints, &amp;res) == 0 {
<a id="L61"></a><span class="ln">    61</span>			defer C.freeaddrinfo(res)
<a id="L62"></a><span class="ln">    62</span>			for r := res; r != nil; r = r.ai_next {
<a id="L63"></a><span class="ln">    63</span>				switch r.ai_family {
<a id="L64"></a><span class="ln">    64</span>				default:
<a id="L65"></a><span class="ln">    65</span>					continue
<a id="L66"></a><span class="ln">    66</span>				case C.AF_INET:
<a id="L67"></a><span class="ln">    67</span>					sa := (*syscall.RawSockaddrInet4)(unsafe.Pointer(r.ai_addr))
<a id="L68"></a><span class="ln">    68</span>					p := (*[2]byte)(unsafe.Pointer(&amp;sa.Port))
<a id="L69"></a><span class="ln">    69</span>					return int(p[0])&lt;&lt;8 | int(p[1]), nil, true
<a id="L70"></a><span class="ln">    70</span>				case C.AF_INET6:
<a id="L71"></a><span class="ln">    71</span>					sa := (*syscall.RawSockaddrInet6)(unsafe.Pointer(r.ai_addr))
<a id="L72"></a><span class="ln">    72</span>					p := (*[2]byte)(unsafe.Pointer(&amp;sa.Port))
<a id="L73"></a><span class="ln">    73</span>					return int(p[0])&lt;&lt;8 | int(p[1]), nil, true
<a id="L74"></a><span class="ln">    74</span>				}
<a id="L75"></a><span class="ln">    75</span>			}
<a id="L76"></a><span class="ln">    76</span>		}
<a id="L77"></a><span class="ln">    77</span>		return 0, &amp;AddrError{&#34;unknown port&#34;, net + &#34;/&#34; + service}, true
<a id="L78"></a><span class="ln">    78</span>	}
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>	func cgoLookupIPCNAME(name string) (addrs []IP, cname string, err error, completed bool) {
<a id="L81"></a><span class="ln">    81</span>		var res *C.struct_addrinfo
<a id="L82"></a><span class="ln">    82</span>		var hints C.struct_addrinfo
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>		<span class="comment">// NOTE(rsc): In theory there are approximately balanced</span>
<a id="L85"></a><span class="ln">    85</span>		<span class="comment">// arguments for and against including AI_ADDRCONFIG</span>
<a id="L86"></a><span class="ln">    86</span>		<span class="comment">// in the flags (it includes IPv4 results only on IPv4 systems,</span>
<a id="L87"></a><span class="ln">    87</span>		<span class="comment">// and similarly for IPv6), but in practice setting it causes</span>
<a id="L88"></a><span class="ln">    88</span>		<span class="comment">// getaddrinfo to return the wrong canonical name on Linux.</span>
<a id="L89"></a><span class="ln">    89</span>		<span class="comment">// So definitely leave it out.</span>
<a id="L90"></a><span class="ln">    90</span>		hints.ai_flags = (C.AI_ALL | C.AI_V4MAPPED | C.AI_CANONNAME) &amp; cgoAddrInfoMask()
<a id="L91"></a><span class="ln">    91</span>	
<a id="L92"></a><span class="ln">    92</span>		h := C.CString(name)
<a id="L93"></a><span class="ln">    93</span>		defer C.free(unsafe.Pointer(h))
<a id="L94"></a><span class="ln">    94</span>		gerrno, err := C.getaddrinfo(h, nil, &amp;hints, &amp;res)
<a id="L95"></a><span class="ln">    95</span>		if gerrno != 0 {
<a id="L96"></a><span class="ln">    96</span>			var str string
<a id="L97"></a><span class="ln">    97</span>			if gerrno == C.EAI_NONAME {
<a id="L98"></a><span class="ln">    98</span>				str = noSuchHost
<a id="L99"></a><span class="ln">    99</span>			} else if gerrno == C.EAI_SYSTEM {
<a id="L100"></a><span class="ln">   100</span>				str = err.Error()
<a id="L101"></a><span class="ln">   101</span>			} else {
<a id="L102"></a><span class="ln">   102</span>				str = C.GoString(C.gai_strerror(gerrno))
<a id="L103"></a><span class="ln">   103</span>			}
<a id="L104"></a><span class="ln">   104</span>			return nil, &#34;&#34;, &amp;DNSError{Err: str, Name: name}, true
<a id="L105"></a><span class="ln">   105</span>		}
<a id="L106"></a><span class="ln">   106</span>		defer C.freeaddrinfo(res)
<a id="L107"></a><span class="ln">   107</span>		if res != nil {
<a id="L108"></a><span class="ln">   108</span>			cname = C.GoString(res.ai_canonname)
<a id="L109"></a><span class="ln">   109</span>			if cname == &#34;&#34; {
<a id="L110"></a><span class="ln">   110</span>				cname = name
<a id="L111"></a><span class="ln">   111</span>			}
<a id="L112"></a><span class="ln">   112</span>			if len(cname) &gt; 0 &amp;&amp; cname[len(cname)-1] != &#39;.&#39; {
<a id="L113"></a><span class="ln">   113</span>				cname += &#34;.&#34;
<a id="L114"></a><span class="ln">   114</span>			}
<a id="L115"></a><span class="ln">   115</span>		}
<a id="L116"></a><span class="ln">   116</span>		for r := res; r != nil; r = r.ai_next {
<a id="L117"></a><span class="ln">   117</span>			<span class="comment">// Everything comes back twice, once for UDP and once for TCP.</span>
<a id="L118"></a><span class="ln">   118</span>			if r.ai_socktype != C.SOCK_STREAM {
<a id="L119"></a><span class="ln">   119</span>				continue
<a id="L120"></a><span class="ln">   120</span>			}
<a id="L121"></a><span class="ln">   121</span>			switch r.ai_family {
<a id="L122"></a><span class="ln">   122</span>			default:
<a id="L123"></a><span class="ln">   123</span>				continue
<a id="L124"></a><span class="ln">   124</span>			case C.AF_INET:
<a id="L125"></a><span class="ln">   125</span>				sa := (*syscall.RawSockaddrInet4)(unsafe.Pointer(r.ai_addr))
<a id="L126"></a><span class="ln">   126</span>				addrs = append(addrs, copyIP(sa.Addr[:]))
<a id="L127"></a><span class="ln">   127</span>			case C.AF_INET6:
<a id="L128"></a><span class="ln">   128</span>				sa := (*syscall.RawSockaddrInet6)(unsafe.Pointer(r.ai_addr))
<a id="L129"></a><span class="ln">   129</span>				addrs = append(addrs, copyIP(sa.Addr[:]))
<a id="L130"></a><span class="ln">   130</span>			}
<a id="L131"></a><span class="ln">   131</span>		}
<a id="L132"></a><span class="ln">   132</span>		return addrs, cname, nil, true
<a id="L133"></a><span class="ln">   133</span>	}
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>	func cgoLookupIP(name string) (addrs []IP, err error, completed bool) {
<a id="L136"></a><span class="ln">   136</span>		addrs, _, err, completed = cgoLookupIPCNAME(name)
<a id="L137"></a><span class="ln">   137</span>		return
<a id="L138"></a><span class="ln">   138</span>	}
<a id="L139"></a><span class="ln">   139</span>	
<a id="L140"></a><span class="ln">   140</span>	func cgoLookupCNAME(name string) (cname string, err error, completed bool) {
<a id="L141"></a><span class="ln">   141</span>		_, cname, err, completed = cgoLookupIPCNAME(name)
<a id="L142"></a><span class="ln">   142</span>		return
<a id="L143"></a><span class="ln">   143</span>	}
<a id="L144"></a><span class="ln">   144</span>	
<a id="L145"></a><span class="ln">   145</span>	func copyIP(x IP) IP {
<a id="L146"></a><span class="ln">   146</span>		y := make(IP, len(x))
<a id="L147"></a><span class="ln">   147</span>		copy(y, x)
<a id="L148"></a><span class="ln">   148</span>		return y
<a id="L149"></a><span class="ln">   149</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

