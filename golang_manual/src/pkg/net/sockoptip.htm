<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/sockoptip.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/sockoptip.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// +build darwin freebsd linux netbsd openbsd windows</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// IP-level socket options</span>
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	package net
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	import (
<a id="L12"></a><span class="ln">    12</span>		&#34;os&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;syscall&#34;
<a id="L14"></a><span class="ln">    14</span>	)
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	func ipv4TOS(fd *netFD) (int, error) {
<a id="L17"></a><span class="ln">    17</span>		if err := fd.incref(false); err != nil {
<a id="L18"></a><span class="ln">    18</span>			return 0, err
<a id="L19"></a><span class="ln">    19</span>		}
<a id="L20"></a><span class="ln">    20</span>		defer fd.decref()
<a id="L21"></a><span class="ln">    21</span>		v, err := syscall.GetsockoptInt(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_TOS)
<a id="L22"></a><span class="ln">    22</span>		if err != nil {
<a id="L23"></a><span class="ln">    23</span>			return 0, os.NewSyscallError(&#34;getsockopt&#34;, err)
<a id="L24"></a><span class="ln">    24</span>		}
<a id="L25"></a><span class="ln">    25</span>		return v, nil
<a id="L26"></a><span class="ln">    26</span>	}
<a id="L27"></a><span class="ln">    27</span>	
<a id="L28"></a><span class="ln">    28</span>	func setIPv4TOS(fd *netFD, v int) error {
<a id="L29"></a><span class="ln">    29</span>		if err := fd.incref(false); err != nil {
<a id="L30"></a><span class="ln">    30</span>			return err
<a id="L31"></a><span class="ln">    31</span>		}
<a id="L32"></a><span class="ln">    32</span>		defer fd.decref()
<a id="L33"></a><span class="ln">    33</span>		err := syscall.SetsockoptInt(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_TOS, v)
<a id="L34"></a><span class="ln">    34</span>		if err != nil {
<a id="L35"></a><span class="ln">    35</span>			return os.NewSyscallError(&#34;setsockopt&#34;, err)
<a id="L36"></a><span class="ln">    36</span>		}
<a id="L37"></a><span class="ln">    37</span>		return nil
<a id="L38"></a><span class="ln">    38</span>	}
<a id="L39"></a><span class="ln">    39</span>	
<a id="L40"></a><span class="ln">    40</span>	func ipv4TTL(fd *netFD) (int, error) {
<a id="L41"></a><span class="ln">    41</span>		if err := fd.incref(false); err != nil {
<a id="L42"></a><span class="ln">    42</span>			return 0, err
<a id="L43"></a><span class="ln">    43</span>		}
<a id="L44"></a><span class="ln">    44</span>		defer fd.decref()
<a id="L45"></a><span class="ln">    45</span>		v, err := syscall.GetsockoptInt(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_TTL)
<a id="L46"></a><span class="ln">    46</span>		if err != nil {
<a id="L47"></a><span class="ln">    47</span>			return 0, os.NewSyscallError(&#34;getsockopt&#34;, err)
<a id="L48"></a><span class="ln">    48</span>		}
<a id="L49"></a><span class="ln">    49</span>		return v, nil
<a id="L50"></a><span class="ln">    50</span>	}
<a id="L51"></a><span class="ln">    51</span>	
<a id="L52"></a><span class="ln">    52</span>	func setIPv4TTL(fd *netFD, v int) error {
<a id="L53"></a><span class="ln">    53</span>		if err := fd.incref(false); err != nil {
<a id="L54"></a><span class="ln">    54</span>			return err
<a id="L55"></a><span class="ln">    55</span>		}
<a id="L56"></a><span class="ln">    56</span>		defer fd.decref()
<a id="L57"></a><span class="ln">    57</span>		err := syscall.SetsockoptInt(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_TTL, v)
<a id="L58"></a><span class="ln">    58</span>		if err != nil {
<a id="L59"></a><span class="ln">    59</span>			return os.NewSyscallError(&#34;setsockopt&#34;, err)
<a id="L60"></a><span class="ln">    60</span>		}
<a id="L61"></a><span class="ln">    61</span>		return nil
<a id="L62"></a><span class="ln">    62</span>	}
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>	func joinIPv4Group(fd *netFD, ifi *Interface, ip IP) error {
<a id="L65"></a><span class="ln">    65</span>		mreq := &amp;syscall.IPMreq{Multiaddr: [4]byte{ip[0], ip[1], ip[2], ip[3]}}
<a id="L66"></a><span class="ln">    66</span>		if err := setIPv4MreqToInterface(mreq, ifi); err != nil {
<a id="L67"></a><span class="ln">    67</span>			return err
<a id="L68"></a><span class="ln">    68</span>		}
<a id="L69"></a><span class="ln">    69</span>		if err := fd.incref(false); err != nil {
<a id="L70"></a><span class="ln">    70</span>			return err
<a id="L71"></a><span class="ln">    71</span>		}
<a id="L72"></a><span class="ln">    72</span>		defer fd.decref()
<a id="L73"></a><span class="ln">    73</span>		return os.NewSyscallError(&#34;setsockopt&#34;, syscall.SetsockoptIPMreq(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_ADD_MEMBERSHIP, mreq))
<a id="L74"></a><span class="ln">    74</span>	}
<a id="L75"></a><span class="ln">    75</span>	
<a id="L76"></a><span class="ln">    76</span>	func leaveIPv4Group(fd *netFD, ifi *Interface, ip IP) error {
<a id="L77"></a><span class="ln">    77</span>		mreq := &amp;syscall.IPMreq{Multiaddr: [4]byte{ip[0], ip[1], ip[2], ip[3]}}
<a id="L78"></a><span class="ln">    78</span>		if err := setIPv4MreqToInterface(mreq, ifi); err != nil {
<a id="L79"></a><span class="ln">    79</span>			return err
<a id="L80"></a><span class="ln">    80</span>		}
<a id="L81"></a><span class="ln">    81</span>		if err := fd.incref(false); err != nil {
<a id="L82"></a><span class="ln">    82</span>			return err
<a id="L83"></a><span class="ln">    83</span>		}
<a id="L84"></a><span class="ln">    84</span>		defer fd.decref()
<a id="L85"></a><span class="ln">    85</span>		return os.NewSyscallError(&#34;setsockopt&#34;, syscall.SetsockoptIPMreq(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_DROP_MEMBERSHIP, mreq))
<a id="L86"></a><span class="ln">    86</span>	}
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>	func ipv6HopLimit(fd *netFD) (int, error) {
<a id="L89"></a><span class="ln">    89</span>		if err := fd.incref(false); err != nil {
<a id="L90"></a><span class="ln">    90</span>			return 0, err
<a id="L91"></a><span class="ln">    91</span>		}
<a id="L92"></a><span class="ln">    92</span>		defer fd.decref()
<a id="L93"></a><span class="ln">    93</span>		v, err := syscall.GetsockoptInt(fd.sysfd, syscall.IPPROTO_IPV6, syscall.IPV6_UNICAST_HOPS)
<a id="L94"></a><span class="ln">    94</span>		if err != nil {
<a id="L95"></a><span class="ln">    95</span>			return 0, os.NewSyscallError(&#34;getsockopt&#34;, err)
<a id="L96"></a><span class="ln">    96</span>		}
<a id="L97"></a><span class="ln">    97</span>		return v, nil
<a id="L98"></a><span class="ln">    98</span>	}
<a id="L99"></a><span class="ln">    99</span>	
<a id="L100"></a><span class="ln">   100</span>	func setIPv6HopLimit(fd *netFD, v int) error {
<a id="L101"></a><span class="ln">   101</span>		if err := fd.incref(false); err != nil {
<a id="L102"></a><span class="ln">   102</span>			return err
<a id="L103"></a><span class="ln">   103</span>		}
<a id="L104"></a><span class="ln">   104</span>		defer fd.decref()
<a id="L105"></a><span class="ln">   105</span>		err := syscall.SetsockoptInt(fd.sysfd, syscall.IPPROTO_IPV6, syscall.IPV6_UNICAST_HOPS, v)
<a id="L106"></a><span class="ln">   106</span>		if err != nil {
<a id="L107"></a><span class="ln">   107</span>			return os.NewSyscallError(&#34;setsockopt&#34;, err)
<a id="L108"></a><span class="ln">   108</span>		}
<a id="L109"></a><span class="ln">   109</span>		return nil
<a id="L110"></a><span class="ln">   110</span>	}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>	func ipv6MulticastInterface(fd *netFD) (*Interface, error) {
<a id="L113"></a><span class="ln">   113</span>		if err := fd.incref(false); err != nil {
<a id="L114"></a><span class="ln">   114</span>			return nil, err
<a id="L115"></a><span class="ln">   115</span>		}
<a id="L116"></a><span class="ln">   116</span>		defer fd.decref()
<a id="L117"></a><span class="ln">   117</span>		v, err := syscall.GetsockoptInt(fd.sysfd, syscall.IPPROTO_IPV6, syscall.IPV6_MULTICAST_IF)
<a id="L118"></a><span class="ln">   118</span>		if err != nil {
<a id="L119"></a><span class="ln">   119</span>			return nil, os.NewSyscallError(&#34;getsockopt&#34;, err)
<a id="L120"></a><span class="ln">   120</span>		}
<a id="L121"></a><span class="ln">   121</span>		if v == 0 {
<a id="L122"></a><span class="ln">   122</span>			return nil, nil
<a id="L123"></a><span class="ln">   123</span>		}
<a id="L124"></a><span class="ln">   124</span>		ifi, err := InterfaceByIndex(v)
<a id="L125"></a><span class="ln">   125</span>		if err != nil {
<a id="L126"></a><span class="ln">   126</span>			return nil, err
<a id="L127"></a><span class="ln">   127</span>		}
<a id="L128"></a><span class="ln">   128</span>		return ifi, nil
<a id="L129"></a><span class="ln">   129</span>	}
<a id="L130"></a><span class="ln">   130</span>	
<a id="L131"></a><span class="ln">   131</span>	func setIPv6MulticastInterface(fd *netFD, ifi *Interface) error {
<a id="L132"></a><span class="ln">   132</span>		var v int
<a id="L133"></a><span class="ln">   133</span>		if ifi != nil {
<a id="L134"></a><span class="ln">   134</span>			v = ifi.Index
<a id="L135"></a><span class="ln">   135</span>		}
<a id="L136"></a><span class="ln">   136</span>		if err := fd.incref(false); err != nil {
<a id="L137"></a><span class="ln">   137</span>			return err
<a id="L138"></a><span class="ln">   138</span>		}
<a id="L139"></a><span class="ln">   139</span>		defer fd.decref()
<a id="L140"></a><span class="ln">   140</span>		err := syscall.SetsockoptInt(fd.sysfd, syscall.IPPROTO_IPV6, syscall.IPV6_MULTICAST_IF, v)
<a id="L141"></a><span class="ln">   141</span>		if err != nil {
<a id="L142"></a><span class="ln">   142</span>			return os.NewSyscallError(&#34;setsockopt&#34;, err)
<a id="L143"></a><span class="ln">   143</span>		}
<a id="L144"></a><span class="ln">   144</span>		return nil
<a id="L145"></a><span class="ln">   145</span>	}
<a id="L146"></a><span class="ln">   146</span>	
<a id="L147"></a><span class="ln">   147</span>	func ipv6MulticastHopLimit(fd *netFD) (int, error) {
<a id="L148"></a><span class="ln">   148</span>		if err := fd.incref(false); err != nil {
<a id="L149"></a><span class="ln">   149</span>			return 0, err
<a id="L150"></a><span class="ln">   150</span>		}
<a id="L151"></a><span class="ln">   151</span>		defer fd.decref()
<a id="L152"></a><span class="ln">   152</span>		v, err := syscall.GetsockoptInt(fd.sysfd, syscall.IPPROTO_IPV6, syscall.IPV6_MULTICAST_HOPS)
<a id="L153"></a><span class="ln">   153</span>		if err != nil {
<a id="L154"></a><span class="ln">   154</span>			return 0, os.NewSyscallError(&#34;getsockopt&#34;, err)
<a id="L155"></a><span class="ln">   155</span>		}
<a id="L156"></a><span class="ln">   156</span>		return v, nil
<a id="L157"></a><span class="ln">   157</span>	}
<a id="L158"></a><span class="ln">   158</span>	
<a id="L159"></a><span class="ln">   159</span>	func setIPv6MulticastHopLimit(fd *netFD, v int) error {
<a id="L160"></a><span class="ln">   160</span>		if err := fd.incref(false); err != nil {
<a id="L161"></a><span class="ln">   161</span>			return err
<a id="L162"></a><span class="ln">   162</span>		}
<a id="L163"></a><span class="ln">   163</span>		defer fd.decref()
<a id="L164"></a><span class="ln">   164</span>		err := syscall.SetsockoptInt(fd.sysfd, syscall.IPPROTO_IPV6, syscall.IPV6_MULTICAST_HOPS, v)
<a id="L165"></a><span class="ln">   165</span>		if err != nil {
<a id="L166"></a><span class="ln">   166</span>			return os.NewSyscallError(&#34;setsockopt&#34;, err)
<a id="L167"></a><span class="ln">   167</span>		}
<a id="L168"></a><span class="ln">   168</span>		return nil
<a id="L169"></a><span class="ln">   169</span>	}
<a id="L170"></a><span class="ln">   170</span>	
<a id="L171"></a><span class="ln">   171</span>	func ipv6MulticastLoopback(fd *netFD) (bool, error) {
<a id="L172"></a><span class="ln">   172</span>		if err := fd.incref(false); err != nil {
<a id="L173"></a><span class="ln">   173</span>			return false, err
<a id="L174"></a><span class="ln">   174</span>		}
<a id="L175"></a><span class="ln">   175</span>		defer fd.decref()
<a id="L176"></a><span class="ln">   176</span>		v, err := syscall.GetsockoptInt(fd.sysfd, syscall.IPPROTO_IPV6, syscall.IPV6_MULTICAST_LOOP)
<a id="L177"></a><span class="ln">   177</span>		if err != nil {
<a id="L178"></a><span class="ln">   178</span>			return false, os.NewSyscallError(&#34;getsockopt&#34;, err)
<a id="L179"></a><span class="ln">   179</span>		}
<a id="L180"></a><span class="ln">   180</span>		return v == 1, nil
<a id="L181"></a><span class="ln">   181</span>	}
<a id="L182"></a><span class="ln">   182</span>	
<a id="L183"></a><span class="ln">   183</span>	func setIPv6MulticastLoopback(fd *netFD, v bool) error {
<a id="L184"></a><span class="ln">   184</span>		if err := fd.incref(false); err != nil {
<a id="L185"></a><span class="ln">   185</span>			return err
<a id="L186"></a><span class="ln">   186</span>		}
<a id="L187"></a><span class="ln">   187</span>		defer fd.decref()
<a id="L188"></a><span class="ln">   188</span>		err := syscall.SetsockoptInt(fd.sysfd, syscall.IPPROTO_IPV6, syscall.IPV6_MULTICAST_LOOP, boolint(v))
<a id="L189"></a><span class="ln">   189</span>		if err != nil {
<a id="L190"></a><span class="ln">   190</span>			return os.NewSyscallError(&#34;setsockopt&#34;, err)
<a id="L191"></a><span class="ln">   191</span>		}
<a id="L192"></a><span class="ln">   192</span>		return nil
<a id="L193"></a><span class="ln">   193</span>	}
<a id="L194"></a><span class="ln">   194</span>	
<a id="L195"></a><span class="ln">   195</span>	func joinIPv6Group(fd *netFD, ifi *Interface, ip IP) error {
<a id="L196"></a><span class="ln">   196</span>		mreq := &amp;syscall.IPv6Mreq{}
<a id="L197"></a><span class="ln">   197</span>		copy(mreq.Multiaddr[:], ip)
<a id="L198"></a><span class="ln">   198</span>		if ifi != nil {
<a id="L199"></a><span class="ln">   199</span>			mreq.Interface = uint32(ifi.Index)
<a id="L200"></a><span class="ln">   200</span>		}
<a id="L201"></a><span class="ln">   201</span>		if err := fd.incref(false); err != nil {
<a id="L202"></a><span class="ln">   202</span>			return err
<a id="L203"></a><span class="ln">   203</span>		}
<a id="L204"></a><span class="ln">   204</span>		defer fd.decref()
<a id="L205"></a><span class="ln">   205</span>		return os.NewSyscallError(&#34;setsockopt&#34;, syscall.SetsockoptIPv6Mreq(fd.sysfd, syscall.IPPROTO_IPV6, syscall.IPV6_JOIN_GROUP, mreq))
<a id="L206"></a><span class="ln">   206</span>	}
<a id="L207"></a><span class="ln">   207</span>	
<a id="L208"></a><span class="ln">   208</span>	func leaveIPv6Group(fd *netFD, ifi *Interface, ip IP) error {
<a id="L209"></a><span class="ln">   209</span>		mreq := &amp;syscall.IPv6Mreq{}
<a id="L210"></a><span class="ln">   210</span>		copy(mreq.Multiaddr[:], ip)
<a id="L211"></a><span class="ln">   211</span>		if ifi != nil {
<a id="L212"></a><span class="ln">   212</span>			mreq.Interface = uint32(ifi.Index)
<a id="L213"></a><span class="ln">   213</span>		}
<a id="L214"></a><span class="ln">   214</span>		if err := fd.incref(false); err != nil {
<a id="L215"></a><span class="ln">   215</span>			return err
<a id="L216"></a><span class="ln">   216</span>		}
<a id="L217"></a><span class="ln">   217</span>		defer fd.decref()
<a id="L218"></a><span class="ln">   218</span>		return os.NewSyscallError(&#34;setsockopt&#34;, syscall.SetsockoptIPv6Mreq(fd.sysfd, syscall.IPPROTO_IPV6, syscall.IPV6_LEAVE_GROUP, mreq))
<a id="L219"></a><span class="ln">   219</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

