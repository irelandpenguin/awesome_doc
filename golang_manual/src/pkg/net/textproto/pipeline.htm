<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/textproto/pipeline.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/textproto/pipeline.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package textproto
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;sync&#34;
<a id="L9"></a><span class="ln">     9</span>	)
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// A Pipeline manages a pipelined in-order request/response sequence.</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">//</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// To use a Pipeline p to manage multiple clients on a connection,</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// each client should run:</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">//</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">//	id := p.Next()	// take a number</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">//</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">//	p.StartRequest(id)	// wait for turn to send request</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">//	«send request»</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">//	p.EndRequest(id)	// notify Pipeline that request is sent</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">//</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">//	p.StartResponse(id)	// wait for turn to read response</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">//	«read response»</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//	p.EndResponse(id)	// notify Pipeline that response is read</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">//</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// A pipelined server can use the same calls to ensure that</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// responses computed in parallel are written in the correct order.</span>
<a id="L28"></a><span class="ln">    28</span>	type Pipeline struct {
<a id="L29"></a><span class="ln">    29</span>		mu       sync.Mutex
<a id="L30"></a><span class="ln">    30</span>		id       uint
<a id="L31"></a><span class="ln">    31</span>		request  sequencer
<a id="L32"></a><span class="ln">    32</span>		response sequencer
<a id="L33"></a><span class="ln">    33</span>	}
<a id="L34"></a><span class="ln">    34</span>	
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// Next returns the next id for a request/response pair.</span>
<a id="L36"></a><span class="ln">    36</span>	func (p *Pipeline) Next() uint {
<a id="L37"></a><span class="ln">    37</span>		p.mu.Lock()
<a id="L38"></a><span class="ln">    38</span>		id := p.id
<a id="L39"></a><span class="ln">    39</span>		p.id++
<a id="L40"></a><span class="ln">    40</span>		p.mu.Unlock()
<a id="L41"></a><span class="ln">    41</span>		return id
<a id="L42"></a><span class="ln">    42</span>	}
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">// StartRequest blocks until it is time to send (or, if this is a server, receive)</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">// the request with the given id.</span>
<a id="L46"></a><span class="ln">    46</span>	func (p *Pipeline) StartRequest(id uint) {
<a id="L47"></a><span class="ln">    47</span>		p.request.Start(id)
<a id="L48"></a><span class="ln">    48</span>	}
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// EndRequest notifies p that the request with the given id has been sent</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// (or, if this is a server, received).</span>
<a id="L52"></a><span class="ln">    52</span>	func (p *Pipeline) EndRequest(id uint) {
<a id="L53"></a><span class="ln">    53</span>		p.request.End(id)
<a id="L54"></a><span class="ln">    54</span>	}
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// StartResponse blocks until it is time to receive (or, if this is a server, send)</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">// the request with the given id.</span>
<a id="L58"></a><span class="ln">    58</span>	func (p *Pipeline) StartResponse(id uint) {
<a id="L59"></a><span class="ln">    59</span>		p.response.Start(id)
<a id="L60"></a><span class="ln">    60</span>	}
<a id="L61"></a><span class="ln">    61</span>	
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">// EndResponse notifies p that the response with the given id has been received</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">// (or, if this is a server, sent).</span>
<a id="L64"></a><span class="ln">    64</span>	func (p *Pipeline) EndResponse(id uint) {
<a id="L65"></a><span class="ln">    65</span>		p.response.End(id)
<a id="L66"></a><span class="ln">    66</span>	}
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// A sequencer schedules a sequence of numbered events that must</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// happen in order, one after the other.  The event numbering must start</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// at 0 and increment without skipping.  The event number wraps around</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">// safely as long as there are not 2^32 simultaneous events pending.</span>
<a id="L72"></a><span class="ln">    72</span>	type sequencer struct {
<a id="L73"></a><span class="ln">    73</span>		mu   sync.Mutex
<a id="L74"></a><span class="ln">    74</span>		id   uint
<a id="L75"></a><span class="ln">    75</span>		wait map[uint]chan uint
<a id="L76"></a><span class="ln">    76</span>	}
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// Start waits until it is time for the event numbered id to begin.</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// That is, except for the first event, it waits until End(id-1) has</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// been called.</span>
<a id="L81"></a><span class="ln">    81</span>	func (s *sequencer) Start(id uint) {
<a id="L82"></a><span class="ln">    82</span>		s.mu.Lock()
<a id="L83"></a><span class="ln">    83</span>		if s.id == id {
<a id="L84"></a><span class="ln">    84</span>			s.mu.Unlock()
<a id="L85"></a><span class="ln">    85</span>			return
<a id="L86"></a><span class="ln">    86</span>		}
<a id="L87"></a><span class="ln">    87</span>		c := make(chan uint)
<a id="L88"></a><span class="ln">    88</span>		if s.wait == nil {
<a id="L89"></a><span class="ln">    89</span>			s.wait = make(map[uint]chan uint)
<a id="L90"></a><span class="ln">    90</span>		}
<a id="L91"></a><span class="ln">    91</span>		s.wait[id] = c
<a id="L92"></a><span class="ln">    92</span>		s.mu.Unlock()
<a id="L93"></a><span class="ln">    93</span>		&lt;-c
<a id="L94"></a><span class="ln">    94</span>	}
<a id="L95"></a><span class="ln">    95</span>	
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">// End notifies the sequencer that the event numbered id has completed,</span>
<a id="L97"></a><span class="ln">    97</span>	<span class="comment">// allowing it to schedule the event numbered id+1.  It is a run-time error</span>
<a id="L98"></a><span class="ln">    98</span>	<span class="comment">// to call End with an id that is not the number of the active event.</span>
<a id="L99"></a><span class="ln">    99</span>	func (s *sequencer) End(id uint) {
<a id="L100"></a><span class="ln">   100</span>		s.mu.Lock()
<a id="L101"></a><span class="ln">   101</span>		if s.id != id {
<a id="L102"></a><span class="ln">   102</span>			panic(&#34;out of sync&#34;)
<a id="L103"></a><span class="ln">   103</span>		}
<a id="L104"></a><span class="ln">   104</span>		id++
<a id="L105"></a><span class="ln">   105</span>		s.id = id
<a id="L106"></a><span class="ln">   106</span>		if s.wait == nil {
<a id="L107"></a><span class="ln">   107</span>			s.wait = make(map[uint]chan uint)
<a id="L108"></a><span class="ln">   108</span>		}
<a id="L109"></a><span class="ln">   109</span>		c, ok := s.wait[id]
<a id="L110"></a><span class="ln">   110</span>		if ok {
<a id="L111"></a><span class="ln">   111</span>			delete(s.wait, id)
<a id="L112"></a><span class="ln">   112</span>		}
<a id="L113"></a><span class="ln">   113</span>		s.mu.Unlock()
<a id="L114"></a><span class="ln">   114</span>		if ok {
<a id="L115"></a><span class="ln">   115</span>			c &lt;- 1
<a id="L116"></a><span class="ln">   116</span>		}
<a id="L117"></a><span class="ln">   117</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

