<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/textproto/reader.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/textproto/reader.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package textproto
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bufio&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;bytes&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;io&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;io/ioutil&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;strconv&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;strings&#34;
<a id="L14"></a><span class="ln">    14</span>	)
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// BUG(rsc): To let callers manage exposure to denial of service</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// attacks, Reader should allow them to set and reset a limit on</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// the number of bytes read from the connection.</span>
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// A Reader implements convenience methods for reading requests</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// or responses from a text protocol network connection.</span>
<a id="L22"></a><span class="ln">    22</span>	type Reader struct {
<a id="L23"></a><span class="ln">    23</span>		R   *bufio.Reader
<a id="L24"></a><span class="ln">    24</span>		dot *dotReader
<a id="L25"></a><span class="ln">    25</span>		buf []byte <span class="comment">// a re-usable buffer for readContinuedLineSlice</span>
<a id="L26"></a><span class="ln">    26</span>	}
<a id="L27"></a><span class="ln">    27</span>	
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// NewReader returns a new Reader reading from r.</span>
<a id="L29"></a><span class="ln">    29</span>	func NewReader(r *bufio.Reader) *Reader {
<a id="L30"></a><span class="ln">    30</span>		return &amp;Reader{R: r}
<a id="L31"></a><span class="ln">    31</span>	}
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// ReadLine reads a single line from r,</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// eliding the final \n or \r\n from the returned string.</span>
<a id="L35"></a><span class="ln">    35</span>	func (r *Reader) ReadLine() (string, error) {
<a id="L36"></a><span class="ln">    36</span>		line, err := r.readLineSlice()
<a id="L37"></a><span class="ln">    37</span>		return string(line), err
<a id="L38"></a><span class="ln">    38</span>	}
<a id="L39"></a><span class="ln">    39</span>	
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// ReadLineBytes is like ReadLine but returns a []byte instead of a string.</span>
<a id="L41"></a><span class="ln">    41</span>	func (r *Reader) ReadLineBytes() ([]byte, error) {
<a id="L42"></a><span class="ln">    42</span>		line, err := r.readLineSlice()
<a id="L43"></a><span class="ln">    43</span>		if line != nil {
<a id="L44"></a><span class="ln">    44</span>			buf := make([]byte, len(line))
<a id="L45"></a><span class="ln">    45</span>			copy(buf, line)
<a id="L46"></a><span class="ln">    46</span>			line = buf
<a id="L47"></a><span class="ln">    47</span>		}
<a id="L48"></a><span class="ln">    48</span>		return line, err
<a id="L49"></a><span class="ln">    49</span>	}
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>	func (r *Reader) readLineSlice() ([]byte, error) {
<a id="L52"></a><span class="ln">    52</span>		r.closeDot()
<a id="L53"></a><span class="ln">    53</span>		var line []byte
<a id="L54"></a><span class="ln">    54</span>		for {
<a id="L55"></a><span class="ln">    55</span>			l, more, err := r.R.ReadLine()
<a id="L56"></a><span class="ln">    56</span>			if err != nil {
<a id="L57"></a><span class="ln">    57</span>				return nil, err
<a id="L58"></a><span class="ln">    58</span>			}
<a id="L59"></a><span class="ln">    59</span>			<span class="comment">// Avoid the copy if the first call produced a full line.</span>
<a id="L60"></a><span class="ln">    60</span>			if line == nil &amp;&amp; !more {
<a id="L61"></a><span class="ln">    61</span>				return l, nil
<a id="L62"></a><span class="ln">    62</span>			}
<a id="L63"></a><span class="ln">    63</span>			line = append(line, l...)
<a id="L64"></a><span class="ln">    64</span>			if !more {
<a id="L65"></a><span class="ln">    65</span>				break
<a id="L66"></a><span class="ln">    66</span>			}
<a id="L67"></a><span class="ln">    67</span>		}
<a id="L68"></a><span class="ln">    68</span>		return line, nil
<a id="L69"></a><span class="ln">    69</span>	}
<a id="L70"></a><span class="ln">    70</span>	
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">// ReadContinuedLine reads a possibly continued line from r,</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">// eliding the final trailing ASCII white space.</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// Lines after the first are considered continuations if they</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">// begin with a space or tab character.  In the returned data,</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">// continuation lines are separated from the previous line</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">// only by a single space: the newline and leading white space</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// are removed.</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">//</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// For example, consider this input:</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">//</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">//	Line 1</span>
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">//	  continued...</span>
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">//	Line 2</span>
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">//</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">// The first call to ReadContinuedLine will return &#34;Line 1 continued...&#34;</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// and the second will return &#34;Line 2&#34;.</span>
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">//</span>
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// A line consisting of only white space is never continued.</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">//</span>
<a id="L90"></a><span class="ln">    90</span>	func (r *Reader) ReadContinuedLine() (string, error) {
<a id="L91"></a><span class="ln">    91</span>		line, err := r.readContinuedLineSlice()
<a id="L92"></a><span class="ln">    92</span>		return string(line), err
<a id="L93"></a><span class="ln">    93</span>	}
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">// trim returns s with leading and trailing spaces and tabs removed.</span>
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">// It does not assume Unicode or UTF-8.</span>
<a id="L97"></a><span class="ln">    97</span>	func trim(s []byte) []byte {
<a id="L98"></a><span class="ln">    98</span>		i := 0
<a id="L99"></a><span class="ln">    99</span>		for i &lt; len(s) &amp;&amp; (s[i] == &#39; &#39; || s[i] == &#39;\t&#39;) {
<a id="L100"></a><span class="ln">   100</span>			i++
<a id="L101"></a><span class="ln">   101</span>		}
<a id="L102"></a><span class="ln">   102</span>		n := len(s)
<a id="L103"></a><span class="ln">   103</span>		for n &gt; i &amp;&amp; (s[n-1] == &#39; &#39; || s[n-1] == &#39;\t&#39;) {
<a id="L104"></a><span class="ln">   104</span>			n--
<a id="L105"></a><span class="ln">   105</span>		}
<a id="L106"></a><span class="ln">   106</span>		return s[i:n]
<a id="L107"></a><span class="ln">   107</span>	}
<a id="L108"></a><span class="ln">   108</span>	
<a id="L109"></a><span class="ln">   109</span>	<span class="comment">// ReadContinuedLineBytes is like ReadContinuedLine but</span>
<a id="L110"></a><span class="ln">   110</span>	<span class="comment">// returns a []byte instead of a string.</span>
<a id="L111"></a><span class="ln">   111</span>	func (r *Reader) ReadContinuedLineBytes() ([]byte, error) {
<a id="L112"></a><span class="ln">   112</span>		line, err := r.readContinuedLineSlice()
<a id="L113"></a><span class="ln">   113</span>		if line != nil {
<a id="L114"></a><span class="ln">   114</span>			buf := make([]byte, len(line))
<a id="L115"></a><span class="ln">   115</span>			copy(buf, line)
<a id="L116"></a><span class="ln">   116</span>			line = buf
<a id="L117"></a><span class="ln">   117</span>		}
<a id="L118"></a><span class="ln">   118</span>		return line, err
<a id="L119"></a><span class="ln">   119</span>	}
<a id="L120"></a><span class="ln">   120</span>	
<a id="L121"></a><span class="ln">   121</span>	func (r *Reader) readContinuedLineSlice() ([]byte, error) {
<a id="L122"></a><span class="ln">   122</span>		<span class="comment">// Read the first line.</span>
<a id="L123"></a><span class="ln">   123</span>		line, err := r.readLineSlice()
<a id="L124"></a><span class="ln">   124</span>		if err != nil {
<a id="L125"></a><span class="ln">   125</span>			return nil, err
<a id="L126"></a><span class="ln">   126</span>		}
<a id="L127"></a><span class="ln">   127</span>		if len(line) == 0 { <span class="comment">// blank line - no continuation</span>
<a id="L128"></a><span class="ln">   128</span>			return line, nil
<a id="L129"></a><span class="ln">   129</span>		}
<a id="L130"></a><span class="ln">   130</span>	
<a id="L131"></a><span class="ln">   131</span>		<span class="comment">// ReadByte or the next readLineSlice will flush the read buffer;</span>
<a id="L132"></a><span class="ln">   132</span>		<span class="comment">// copy the slice into buf.</span>
<a id="L133"></a><span class="ln">   133</span>		r.buf = append(r.buf[:0], trim(line)...)
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>		<span class="comment">// Read continuation lines.</span>
<a id="L136"></a><span class="ln">   136</span>		for r.skipSpace() &gt; 0 {
<a id="L137"></a><span class="ln">   137</span>			line, err := r.readLineSlice()
<a id="L138"></a><span class="ln">   138</span>			if err != nil {
<a id="L139"></a><span class="ln">   139</span>				break
<a id="L140"></a><span class="ln">   140</span>			}
<a id="L141"></a><span class="ln">   141</span>			r.buf = append(r.buf, &#39; &#39;)
<a id="L142"></a><span class="ln">   142</span>			r.buf = append(r.buf, line...)
<a id="L143"></a><span class="ln">   143</span>		}
<a id="L144"></a><span class="ln">   144</span>		return r.buf, nil
<a id="L145"></a><span class="ln">   145</span>	}
<a id="L146"></a><span class="ln">   146</span>	
<a id="L147"></a><span class="ln">   147</span>	<span class="comment">// skipSpace skips R over all spaces and returns the number of bytes skipped.</span>
<a id="L148"></a><span class="ln">   148</span>	func (r *Reader) skipSpace() int {
<a id="L149"></a><span class="ln">   149</span>		n := 0
<a id="L150"></a><span class="ln">   150</span>		for {
<a id="L151"></a><span class="ln">   151</span>			c, err := r.R.ReadByte()
<a id="L152"></a><span class="ln">   152</span>			if err != nil {
<a id="L153"></a><span class="ln">   153</span>				<span class="comment">// Bufio will keep err until next read.</span>
<a id="L154"></a><span class="ln">   154</span>				break
<a id="L155"></a><span class="ln">   155</span>			}
<a id="L156"></a><span class="ln">   156</span>			if c != &#39; &#39; &amp;&amp; c != &#39;\t&#39; {
<a id="L157"></a><span class="ln">   157</span>				r.R.UnreadByte()
<a id="L158"></a><span class="ln">   158</span>				break
<a id="L159"></a><span class="ln">   159</span>			}
<a id="L160"></a><span class="ln">   160</span>			n++
<a id="L161"></a><span class="ln">   161</span>		}
<a id="L162"></a><span class="ln">   162</span>		return n
<a id="L163"></a><span class="ln">   163</span>	}
<a id="L164"></a><span class="ln">   164</span>	
<a id="L165"></a><span class="ln">   165</span>	func (r *Reader) readCodeLine(expectCode int) (code int, continued bool, message string, err error) {
<a id="L166"></a><span class="ln">   166</span>		line, err := r.ReadLine()
<a id="L167"></a><span class="ln">   167</span>		if err != nil {
<a id="L168"></a><span class="ln">   168</span>			return
<a id="L169"></a><span class="ln">   169</span>		}
<a id="L170"></a><span class="ln">   170</span>		return parseCodeLine(line, expectCode)
<a id="L171"></a><span class="ln">   171</span>	}
<a id="L172"></a><span class="ln">   172</span>	
<a id="L173"></a><span class="ln">   173</span>	func parseCodeLine(line string, expectCode int) (code int, continued bool, message string, err error) {
<a id="L174"></a><span class="ln">   174</span>		if len(line) &lt; 4 || line[3] != &#39; &#39; &amp;&amp; line[3] != &#39;-&#39; {
<a id="L175"></a><span class="ln">   175</span>			err = ProtocolError(&#34;short response: &#34; + line)
<a id="L176"></a><span class="ln">   176</span>			return
<a id="L177"></a><span class="ln">   177</span>		}
<a id="L178"></a><span class="ln">   178</span>		continued = line[3] == &#39;-&#39;
<a id="L179"></a><span class="ln">   179</span>		code, err = strconv.Atoi(line[0:3])
<a id="L180"></a><span class="ln">   180</span>		if err != nil || code &lt; 100 {
<a id="L181"></a><span class="ln">   181</span>			err = ProtocolError(&#34;invalid response code: &#34; + line)
<a id="L182"></a><span class="ln">   182</span>			return
<a id="L183"></a><span class="ln">   183</span>		}
<a id="L184"></a><span class="ln">   184</span>		message = line[4:]
<a id="L185"></a><span class="ln">   185</span>		if 1 &lt;= expectCode &amp;&amp; expectCode &lt; 10 &amp;&amp; code/100 != expectCode ||
<a id="L186"></a><span class="ln">   186</span>			10 &lt;= expectCode &amp;&amp; expectCode &lt; 100 &amp;&amp; code/10 != expectCode ||
<a id="L187"></a><span class="ln">   187</span>			100 &lt;= expectCode &amp;&amp; expectCode &lt; 1000 &amp;&amp; code != expectCode {
<a id="L188"></a><span class="ln">   188</span>			err = &amp;Error{code, message}
<a id="L189"></a><span class="ln">   189</span>		}
<a id="L190"></a><span class="ln">   190</span>		return
<a id="L191"></a><span class="ln">   191</span>	}
<a id="L192"></a><span class="ln">   192</span>	
<a id="L193"></a><span class="ln">   193</span>	<span class="comment">// ReadCodeLine reads a response code line of the form</span>
<a id="L194"></a><span class="ln">   194</span>	<span class="comment">//	code message</span>
<a id="L195"></a><span class="ln">   195</span>	<span class="comment">// where code is a 3-digit status code and the message</span>
<a id="L196"></a><span class="ln">   196</span>	<span class="comment">// extends to the rest of the line.  An example of such a line is:</span>
<a id="L197"></a><span class="ln">   197</span>	<span class="comment">//	220 plan9.bell-labs.com ESMTP</span>
<a id="L198"></a><span class="ln">   198</span>	<span class="comment">//</span>
<a id="L199"></a><span class="ln">   199</span>	<span class="comment">// If the prefix of the status does not match the digits in expectCode,</span>
<a id="L200"></a><span class="ln">   200</span>	<span class="comment">// ReadCodeLine returns with err set to &amp;Error{code, message}.</span>
<a id="L201"></a><span class="ln">   201</span>	<span class="comment">// For example, if expectCode is 31, an error will be returned if</span>
<a id="L202"></a><span class="ln">   202</span>	<span class="comment">// the status is not in the range [310,319].</span>
<a id="L203"></a><span class="ln">   203</span>	<span class="comment">//</span>
<a id="L204"></a><span class="ln">   204</span>	<span class="comment">// If the response is multi-line, ReadCodeLine returns an error.</span>
<a id="L205"></a><span class="ln">   205</span>	<span class="comment">//</span>
<a id="L206"></a><span class="ln">   206</span>	<span class="comment">// An expectCode &lt;= 0 disables the check of the status code.</span>
<a id="L207"></a><span class="ln">   207</span>	<span class="comment">//</span>
<a id="L208"></a><span class="ln">   208</span>	func (r *Reader) ReadCodeLine(expectCode int) (code int, message string, err error) {
<a id="L209"></a><span class="ln">   209</span>		code, continued, message, err := r.readCodeLine(expectCode)
<a id="L210"></a><span class="ln">   210</span>		if err == nil &amp;&amp; continued {
<a id="L211"></a><span class="ln">   211</span>			err = ProtocolError(&#34;unexpected multi-line response: &#34; + message)
<a id="L212"></a><span class="ln">   212</span>		}
<a id="L213"></a><span class="ln">   213</span>		return
<a id="L214"></a><span class="ln">   214</span>	}
<a id="L215"></a><span class="ln">   215</span>	
<a id="L216"></a><span class="ln">   216</span>	<span class="comment">// ReadResponse reads a multi-line response of the form:</span>
<a id="L217"></a><span class="ln">   217</span>	<span class="comment">//</span>
<a id="L218"></a><span class="ln">   218</span>	<span class="comment">//	code-message line 1</span>
<a id="L219"></a><span class="ln">   219</span>	<span class="comment">//	code-message line 2</span>
<a id="L220"></a><span class="ln">   220</span>	<span class="comment">//	...</span>
<a id="L221"></a><span class="ln">   221</span>	<span class="comment">//	code message line n</span>
<a id="L222"></a><span class="ln">   222</span>	<span class="comment">//</span>
<a id="L223"></a><span class="ln">   223</span>	<span class="comment">// where code is a 3-digit status code. The first line starts with the</span>
<a id="L224"></a><span class="ln">   224</span>	<span class="comment">// code and a hyphen. The response is terminated by a line that starts</span>
<a id="L225"></a><span class="ln">   225</span>	<span class="comment">// with the same code followed by a space. Each line in message is</span>
<a id="L226"></a><span class="ln">   226</span>	<span class="comment">// separated by a newline (\n).</span>
<a id="L227"></a><span class="ln">   227</span>	<span class="comment">//</span>
<a id="L228"></a><span class="ln">   228</span>	<span class="comment">// See page 36 of RFC 959 (http://www.ietf.org/rfc/rfc959.txt) for</span>
<a id="L229"></a><span class="ln">   229</span>	<span class="comment">// details.</span>
<a id="L230"></a><span class="ln">   230</span>	<span class="comment">//</span>
<a id="L231"></a><span class="ln">   231</span>	<span class="comment">// If the prefix of the status does not match the digits in expectCode,</span>
<a id="L232"></a><span class="ln">   232</span>	<span class="comment">// ReadResponse returns with err set to &amp;Error{code, message}.</span>
<a id="L233"></a><span class="ln">   233</span>	<span class="comment">// For example, if expectCode is 31, an error will be returned if</span>
<a id="L234"></a><span class="ln">   234</span>	<span class="comment">// the status is not in the range [310,319].</span>
<a id="L235"></a><span class="ln">   235</span>	<span class="comment">//</span>
<a id="L236"></a><span class="ln">   236</span>	<span class="comment">// An expectCode &lt;= 0 disables the check of the status code.</span>
<a id="L237"></a><span class="ln">   237</span>	<span class="comment">//</span>
<a id="L238"></a><span class="ln">   238</span>	func (r *Reader) ReadResponse(expectCode int) (code int, message string, err error) {
<a id="L239"></a><span class="ln">   239</span>		code, continued, message, err := r.readCodeLine(expectCode)
<a id="L240"></a><span class="ln">   240</span>		for err == nil &amp;&amp; continued {
<a id="L241"></a><span class="ln">   241</span>			line, err := r.ReadLine()
<a id="L242"></a><span class="ln">   242</span>			if err != nil {
<a id="L243"></a><span class="ln">   243</span>				return 0, &#34;&#34;, err
<a id="L244"></a><span class="ln">   244</span>			}
<a id="L245"></a><span class="ln">   245</span>	
<a id="L246"></a><span class="ln">   246</span>			var code2 int
<a id="L247"></a><span class="ln">   247</span>			var moreMessage string
<a id="L248"></a><span class="ln">   248</span>			code2, continued, moreMessage, err = parseCodeLine(line, expectCode)
<a id="L249"></a><span class="ln">   249</span>			if err != nil || code2 != code {
<a id="L250"></a><span class="ln">   250</span>				message += &#34;\n&#34; + strings.TrimRight(line, &#34;\r\n&#34;)
<a id="L251"></a><span class="ln">   251</span>				continued = true
<a id="L252"></a><span class="ln">   252</span>				continue
<a id="L253"></a><span class="ln">   253</span>			}
<a id="L254"></a><span class="ln">   254</span>			message += &#34;\n&#34; + moreMessage
<a id="L255"></a><span class="ln">   255</span>		}
<a id="L256"></a><span class="ln">   256</span>		return
<a id="L257"></a><span class="ln">   257</span>	}
<a id="L258"></a><span class="ln">   258</span>	
<a id="L259"></a><span class="ln">   259</span>	<span class="comment">// DotReader returns a new Reader that satisfies Reads using the</span>
<a id="L260"></a><span class="ln">   260</span>	<span class="comment">// decoded text of a dot-encoded block read from r.</span>
<a id="L261"></a><span class="ln">   261</span>	<span class="comment">// The returned Reader is only valid until the next call</span>
<a id="L262"></a><span class="ln">   262</span>	<span class="comment">// to a method on r.</span>
<a id="L263"></a><span class="ln">   263</span>	<span class="comment">//</span>
<a id="L264"></a><span class="ln">   264</span>	<span class="comment">// Dot encoding is a common framing used for data blocks</span>
<a id="L265"></a><span class="ln">   265</span>	<span class="comment">// in text protocols such as SMTP.  The data consists of a sequence</span>
<a id="L266"></a><span class="ln">   266</span>	<span class="comment">// of lines, each of which ends in &#34;\r\n&#34;.  The sequence itself</span>
<a id="L267"></a><span class="ln">   267</span>	<span class="comment">// ends at a line containing just a dot: &#34;.\r\n&#34;.  Lines beginning</span>
<a id="L268"></a><span class="ln">   268</span>	<span class="comment">// with a dot are escaped with an additional dot to avoid</span>
<a id="L269"></a><span class="ln">   269</span>	<span class="comment">// looking like the end of the sequence.</span>
<a id="L270"></a><span class="ln">   270</span>	<span class="comment">//</span>
<a id="L271"></a><span class="ln">   271</span>	<span class="comment">// The decoded form returned by the Reader&#39;s Read method</span>
<a id="L272"></a><span class="ln">   272</span>	<span class="comment">// rewrites the &#34;\r\n&#34; line endings into the simpler &#34;\n&#34;,</span>
<a id="L273"></a><span class="ln">   273</span>	<span class="comment">// removes leading dot escapes if present, and stops with error io.EOF</span>
<a id="L274"></a><span class="ln">   274</span>	<span class="comment">// after consuming (and discarding) the end-of-sequence line.</span>
<a id="L275"></a><span class="ln">   275</span>	func (r *Reader) DotReader() io.Reader {
<a id="L276"></a><span class="ln">   276</span>		r.closeDot()
<a id="L277"></a><span class="ln">   277</span>		r.dot = &amp;dotReader{r: r}
<a id="L278"></a><span class="ln">   278</span>		return r.dot
<a id="L279"></a><span class="ln">   279</span>	}
<a id="L280"></a><span class="ln">   280</span>	
<a id="L281"></a><span class="ln">   281</span>	type dotReader struct {
<a id="L282"></a><span class="ln">   282</span>		r     *Reader
<a id="L283"></a><span class="ln">   283</span>		state int
<a id="L284"></a><span class="ln">   284</span>	}
<a id="L285"></a><span class="ln">   285</span>	
<a id="L286"></a><span class="ln">   286</span>	<span class="comment">// Read satisfies reads by decoding dot-encoded data read from d.r.</span>
<a id="L287"></a><span class="ln">   287</span>	func (d *dotReader) Read(b []byte) (n int, err error) {
<a id="L288"></a><span class="ln">   288</span>		<span class="comment">// Run data through a simple state machine to</span>
<a id="L289"></a><span class="ln">   289</span>		<span class="comment">// elide leading dots, rewrite trailing \r\n into \n,</span>
<a id="L290"></a><span class="ln">   290</span>		<span class="comment">// and detect ending .\r\n line.</span>
<a id="L291"></a><span class="ln">   291</span>		const (
<a id="L292"></a><span class="ln">   292</span>			stateBeginLine = iota <span class="comment">// beginning of line; initial state; must be zero</span>
<a id="L293"></a><span class="ln">   293</span>			stateDot              <span class="comment">// read . at beginning of line</span>
<a id="L294"></a><span class="ln">   294</span>			stateDotCR            <span class="comment">// read .\r at beginning of line</span>
<a id="L295"></a><span class="ln">   295</span>			stateCR               <span class="comment">// read \r (possibly at end of line)</span>
<a id="L296"></a><span class="ln">   296</span>			stateData             <span class="comment">// reading data in middle of line</span>
<a id="L297"></a><span class="ln">   297</span>			stateEOF              <span class="comment">// reached .\r\n end marker line</span>
<a id="L298"></a><span class="ln">   298</span>		)
<a id="L299"></a><span class="ln">   299</span>		br := d.r.R
<a id="L300"></a><span class="ln">   300</span>		for n &lt; len(b) &amp;&amp; d.state != stateEOF {
<a id="L301"></a><span class="ln">   301</span>			var c byte
<a id="L302"></a><span class="ln">   302</span>			c, err = br.ReadByte()
<a id="L303"></a><span class="ln">   303</span>			if err != nil {
<a id="L304"></a><span class="ln">   304</span>				if err == io.EOF {
<a id="L305"></a><span class="ln">   305</span>					err = io.ErrUnexpectedEOF
<a id="L306"></a><span class="ln">   306</span>				}
<a id="L307"></a><span class="ln">   307</span>				break
<a id="L308"></a><span class="ln">   308</span>			}
<a id="L309"></a><span class="ln">   309</span>			switch d.state {
<a id="L310"></a><span class="ln">   310</span>			case stateBeginLine:
<a id="L311"></a><span class="ln">   311</span>				if c == &#39;.&#39; {
<a id="L312"></a><span class="ln">   312</span>					d.state = stateDot
<a id="L313"></a><span class="ln">   313</span>					continue
<a id="L314"></a><span class="ln">   314</span>				}
<a id="L315"></a><span class="ln">   315</span>				if c == &#39;\r&#39; {
<a id="L316"></a><span class="ln">   316</span>					d.state = stateCR
<a id="L317"></a><span class="ln">   317</span>					continue
<a id="L318"></a><span class="ln">   318</span>				}
<a id="L319"></a><span class="ln">   319</span>				d.state = stateData
<a id="L320"></a><span class="ln">   320</span>	
<a id="L321"></a><span class="ln">   321</span>			case stateDot:
<a id="L322"></a><span class="ln">   322</span>				if c == &#39;\r&#39; {
<a id="L323"></a><span class="ln">   323</span>					d.state = stateDotCR
<a id="L324"></a><span class="ln">   324</span>					continue
<a id="L325"></a><span class="ln">   325</span>				}
<a id="L326"></a><span class="ln">   326</span>				if c == &#39;\n&#39; {
<a id="L327"></a><span class="ln">   327</span>					d.state = stateEOF
<a id="L328"></a><span class="ln">   328</span>					continue
<a id="L329"></a><span class="ln">   329</span>				}
<a id="L330"></a><span class="ln">   330</span>				d.state = stateData
<a id="L331"></a><span class="ln">   331</span>	
<a id="L332"></a><span class="ln">   332</span>			case stateDotCR:
<a id="L333"></a><span class="ln">   333</span>				if c == &#39;\n&#39; {
<a id="L334"></a><span class="ln">   334</span>					d.state = stateEOF
<a id="L335"></a><span class="ln">   335</span>					continue
<a id="L336"></a><span class="ln">   336</span>				}
<a id="L337"></a><span class="ln">   337</span>				<span class="comment">// Not part of .\r\n.</span>
<a id="L338"></a><span class="ln">   338</span>				<span class="comment">// Consume leading dot and emit saved \r.</span>
<a id="L339"></a><span class="ln">   339</span>				br.UnreadByte()
<a id="L340"></a><span class="ln">   340</span>				c = &#39;\r&#39;
<a id="L341"></a><span class="ln">   341</span>				d.state = stateData
<a id="L342"></a><span class="ln">   342</span>	
<a id="L343"></a><span class="ln">   343</span>			case stateCR:
<a id="L344"></a><span class="ln">   344</span>				if c == &#39;\n&#39; {
<a id="L345"></a><span class="ln">   345</span>					d.state = stateBeginLine
<a id="L346"></a><span class="ln">   346</span>					break
<a id="L347"></a><span class="ln">   347</span>				}
<a id="L348"></a><span class="ln">   348</span>				<span class="comment">// Not part of \r\n.  Emit saved \r</span>
<a id="L349"></a><span class="ln">   349</span>				br.UnreadByte()
<a id="L350"></a><span class="ln">   350</span>				c = &#39;\r&#39;
<a id="L351"></a><span class="ln">   351</span>				d.state = stateData
<a id="L352"></a><span class="ln">   352</span>	
<a id="L353"></a><span class="ln">   353</span>			case stateData:
<a id="L354"></a><span class="ln">   354</span>				if c == &#39;\r&#39; {
<a id="L355"></a><span class="ln">   355</span>					d.state = stateCR
<a id="L356"></a><span class="ln">   356</span>					continue
<a id="L357"></a><span class="ln">   357</span>				}
<a id="L358"></a><span class="ln">   358</span>				if c == &#39;\n&#39; {
<a id="L359"></a><span class="ln">   359</span>					d.state = stateBeginLine
<a id="L360"></a><span class="ln">   360</span>				}
<a id="L361"></a><span class="ln">   361</span>			}
<a id="L362"></a><span class="ln">   362</span>			b[n] = c
<a id="L363"></a><span class="ln">   363</span>			n++
<a id="L364"></a><span class="ln">   364</span>		}
<a id="L365"></a><span class="ln">   365</span>		if err == nil &amp;&amp; d.state == stateEOF {
<a id="L366"></a><span class="ln">   366</span>			err = io.EOF
<a id="L367"></a><span class="ln">   367</span>		}
<a id="L368"></a><span class="ln">   368</span>		if err != nil &amp;&amp; d.r.dot == d {
<a id="L369"></a><span class="ln">   369</span>			d.r.dot = nil
<a id="L370"></a><span class="ln">   370</span>		}
<a id="L371"></a><span class="ln">   371</span>		return
<a id="L372"></a><span class="ln">   372</span>	}
<a id="L373"></a><span class="ln">   373</span>	
<a id="L374"></a><span class="ln">   374</span>	<span class="comment">// closeDot drains the current DotReader if any,</span>
<a id="L375"></a><span class="ln">   375</span>	<span class="comment">// making sure that it reads until the ending dot line.</span>
<a id="L376"></a><span class="ln">   376</span>	func (r *Reader) closeDot() {
<a id="L377"></a><span class="ln">   377</span>		if r.dot == nil {
<a id="L378"></a><span class="ln">   378</span>			return
<a id="L379"></a><span class="ln">   379</span>		}
<a id="L380"></a><span class="ln">   380</span>		buf := make([]byte, 128)
<a id="L381"></a><span class="ln">   381</span>		for r.dot != nil {
<a id="L382"></a><span class="ln">   382</span>			<span class="comment">// When Read reaches EOF or an error,</span>
<a id="L383"></a><span class="ln">   383</span>			<span class="comment">// it will set r.dot == nil.</span>
<a id="L384"></a><span class="ln">   384</span>			r.dot.Read(buf)
<a id="L385"></a><span class="ln">   385</span>		}
<a id="L386"></a><span class="ln">   386</span>	}
<a id="L387"></a><span class="ln">   387</span>	
<a id="L388"></a><span class="ln">   388</span>	<span class="comment">// ReadDotBytes reads a dot-encoding and returns the decoded data.</span>
<a id="L389"></a><span class="ln">   389</span>	<span class="comment">//</span>
<a id="L390"></a><span class="ln">   390</span>	<span class="comment">// See the documentation for the DotReader method for details about dot-encoding.</span>
<a id="L391"></a><span class="ln">   391</span>	func (r *Reader) ReadDotBytes() ([]byte, error) {
<a id="L392"></a><span class="ln">   392</span>		return ioutil.ReadAll(r.DotReader())
<a id="L393"></a><span class="ln">   393</span>	}
<a id="L394"></a><span class="ln">   394</span>	
<a id="L395"></a><span class="ln">   395</span>	<span class="comment">// ReadDotLines reads a dot-encoding and returns a slice</span>
<a id="L396"></a><span class="ln">   396</span>	<span class="comment">// containing the decoded lines, with the final \r\n or \n elided from each.</span>
<a id="L397"></a><span class="ln">   397</span>	<span class="comment">//</span>
<a id="L398"></a><span class="ln">   398</span>	<span class="comment">// See the documentation for the DotReader method for details about dot-encoding.</span>
<a id="L399"></a><span class="ln">   399</span>	func (r *Reader) ReadDotLines() ([]string, error) {
<a id="L400"></a><span class="ln">   400</span>		<span class="comment">// We could use ReadDotBytes and then Split it,</span>
<a id="L401"></a><span class="ln">   401</span>		<span class="comment">// but reading a line at a time avoids needing a</span>
<a id="L402"></a><span class="ln">   402</span>		<span class="comment">// large contiguous block of memory and is simpler.</span>
<a id="L403"></a><span class="ln">   403</span>		var v []string
<a id="L404"></a><span class="ln">   404</span>		var err error
<a id="L405"></a><span class="ln">   405</span>		for {
<a id="L406"></a><span class="ln">   406</span>			var line string
<a id="L407"></a><span class="ln">   407</span>			line, err = r.ReadLine()
<a id="L408"></a><span class="ln">   408</span>			if err != nil {
<a id="L409"></a><span class="ln">   409</span>				if err == io.EOF {
<a id="L410"></a><span class="ln">   410</span>					err = io.ErrUnexpectedEOF
<a id="L411"></a><span class="ln">   411</span>				}
<a id="L412"></a><span class="ln">   412</span>				break
<a id="L413"></a><span class="ln">   413</span>			}
<a id="L414"></a><span class="ln">   414</span>	
<a id="L415"></a><span class="ln">   415</span>			<span class="comment">// Dot by itself marks end; otherwise cut one dot.</span>
<a id="L416"></a><span class="ln">   416</span>			if len(line) &gt; 0 &amp;&amp; line[0] == &#39;.&#39; {
<a id="L417"></a><span class="ln">   417</span>				if len(line) == 1 {
<a id="L418"></a><span class="ln">   418</span>					break
<a id="L419"></a><span class="ln">   419</span>				}
<a id="L420"></a><span class="ln">   420</span>				line = line[1:]
<a id="L421"></a><span class="ln">   421</span>			}
<a id="L422"></a><span class="ln">   422</span>			v = append(v, line)
<a id="L423"></a><span class="ln">   423</span>		}
<a id="L424"></a><span class="ln">   424</span>		return v, err
<a id="L425"></a><span class="ln">   425</span>	}
<a id="L426"></a><span class="ln">   426</span>	
<a id="L427"></a><span class="ln">   427</span>	<span class="comment">// ReadMIMEHeader reads a MIME-style header from r.</span>
<a id="L428"></a><span class="ln">   428</span>	<span class="comment">// The header is a sequence of possibly continued Key: Value lines</span>
<a id="L429"></a><span class="ln">   429</span>	<span class="comment">// ending in a blank line.</span>
<a id="L430"></a><span class="ln">   430</span>	<span class="comment">// The returned map m maps CanonicalMIMEHeaderKey(key) to a</span>
<a id="L431"></a><span class="ln">   431</span>	<span class="comment">// sequence of values in the same order encountered in the input.</span>
<a id="L432"></a><span class="ln">   432</span>	<span class="comment">//</span>
<a id="L433"></a><span class="ln">   433</span>	<span class="comment">// For example, consider this input:</span>
<a id="L434"></a><span class="ln">   434</span>	<span class="comment">//</span>
<a id="L435"></a><span class="ln">   435</span>	<span class="comment">//	My-Key: Value 1</span>
<a id="L436"></a><span class="ln">   436</span>	<span class="comment">//	Long-Key: Even</span>
<a id="L437"></a><span class="ln">   437</span>	<span class="comment">//	       Longer Value</span>
<a id="L438"></a><span class="ln">   438</span>	<span class="comment">//	My-Key: Value 2</span>
<a id="L439"></a><span class="ln">   439</span>	<span class="comment">//</span>
<a id="L440"></a><span class="ln">   440</span>	<span class="comment">// Given that input, ReadMIMEHeader returns the map:</span>
<a id="L441"></a><span class="ln">   441</span>	<span class="comment">//</span>
<a id="L442"></a><span class="ln">   442</span>	<span class="comment">//	map[string][]string{</span>
<a id="L443"></a><span class="ln">   443</span>	<span class="comment">//		&#34;My-Key&#34;: {&#34;Value 1&#34;, &#34;Value 2&#34;},</span>
<a id="L444"></a><span class="ln">   444</span>	<span class="comment">//		&#34;Long-Key&#34;: {&#34;Even Longer Value&#34;},</span>
<a id="L445"></a><span class="ln">   445</span>	<span class="comment">//	}</span>
<a id="L446"></a><span class="ln">   446</span>	<span class="comment">//</span>
<a id="L447"></a><span class="ln">   447</span>	func (r *Reader) ReadMIMEHeader() (MIMEHeader, error) {
<a id="L448"></a><span class="ln">   448</span>		m := make(MIMEHeader)
<a id="L449"></a><span class="ln">   449</span>		for {
<a id="L450"></a><span class="ln">   450</span>			kv, err := r.readContinuedLineSlice()
<a id="L451"></a><span class="ln">   451</span>			if len(kv) == 0 {
<a id="L452"></a><span class="ln">   452</span>				return m, err
<a id="L453"></a><span class="ln">   453</span>			}
<a id="L454"></a><span class="ln">   454</span>	
<a id="L455"></a><span class="ln">   455</span>			<span class="comment">// Key ends at first colon; must not have spaces.</span>
<a id="L456"></a><span class="ln">   456</span>			i := bytes.IndexByte(kv, &#39;:&#39;)
<a id="L457"></a><span class="ln">   457</span>			if i &lt; 0 {
<a id="L458"></a><span class="ln">   458</span>				return m, ProtocolError(&#34;malformed MIME header line: &#34; + string(kv))
<a id="L459"></a><span class="ln">   459</span>			}
<a id="L460"></a><span class="ln">   460</span>			key := string(kv[0:i])
<a id="L461"></a><span class="ln">   461</span>			if strings.Index(key, &#34; &#34;) &gt;= 0 {
<a id="L462"></a><span class="ln">   462</span>				key = strings.TrimRight(key, &#34; &#34;)
<a id="L463"></a><span class="ln">   463</span>			}
<a id="L464"></a><span class="ln">   464</span>			key = CanonicalMIMEHeaderKey(key)
<a id="L465"></a><span class="ln">   465</span>	
<a id="L466"></a><span class="ln">   466</span>			<span class="comment">// Skip initial spaces in value.</span>
<a id="L467"></a><span class="ln">   467</span>			i++ <span class="comment">// skip colon</span>
<a id="L468"></a><span class="ln">   468</span>			for i &lt; len(kv) &amp;&amp; (kv[i] == &#39; &#39; || kv[i] == &#39;\t&#39;) {
<a id="L469"></a><span class="ln">   469</span>				i++
<a id="L470"></a><span class="ln">   470</span>			}
<a id="L471"></a><span class="ln">   471</span>			value := string(kv[i:])
<a id="L472"></a><span class="ln">   472</span>	
<a id="L473"></a><span class="ln">   473</span>			m[key] = append(m[key], value)
<a id="L474"></a><span class="ln">   474</span>	
<a id="L475"></a><span class="ln">   475</span>			if err != nil {
<a id="L476"></a><span class="ln">   476</span>				return m, err
<a id="L477"></a><span class="ln">   477</span>			}
<a id="L478"></a><span class="ln">   478</span>		}
<a id="L479"></a><span class="ln">   479</span>		panic(&#34;unreachable&#34;)
<a id="L480"></a><span class="ln">   480</span>	}
<a id="L481"></a><span class="ln">   481</span>	
<a id="L482"></a><span class="ln">   482</span>	<span class="comment">// CanonicalMIMEHeaderKey returns the canonical format of the</span>
<a id="L483"></a><span class="ln">   483</span>	<span class="comment">// MIME header key s.  The canonicalization converts the first</span>
<a id="L484"></a><span class="ln">   484</span>	<span class="comment">// letter and any letter following a hyphen to upper case;</span>
<a id="L485"></a><span class="ln">   485</span>	<span class="comment">// the rest are converted to lowercase.  For example, the</span>
<a id="L486"></a><span class="ln">   486</span>	<span class="comment">// canonical key for &#34;accept-encoding&#34; is &#34;Accept-Encoding&#34;.</span>
<a id="L487"></a><span class="ln">   487</span>	func CanonicalMIMEHeaderKey(s string) string {
<a id="L488"></a><span class="ln">   488</span>		<span class="comment">// Quick check for canonical encoding.</span>
<a id="L489"></a><span class="ln">   489</span>		needUpper := true
<a id="L490"></a><span class="ln">   490</span>		for i := 0; i &lt; len(s); i++ {
<a id="L491"></a><span class="ln">   491</span>			c := s[i]
<a id="L492"></a><span class="ln">   492</span>			if needUpper &amp;&amp; &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39; {
<a id="L493"></a><span class="ln">   493</span>				goto MustRewrite
<a id="L494"></a><span class="ln">   494</span>			}
<a id="L495"></a><span class="ln">   495</span>			if !needUpper &amp;&amp; &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39; {
<a id="L496"></a><span class="ln">   496</span>				goto MustRewrite
<a id="L497"></a><span class="ln">   497</span>			}
<a id="L498"></a><span class="ln">   498</span>			needUpper = c == &#39;-&#39;
<a id="L499"></a><span class="ln">   499</span>		}
<a id="L500"></a><span class="ln">   500</span>		return s
<a id="L501"></a><span class="ln">   501</span>	
<a id="L502"></a><span class="ln">   502</span>	MustRewrite:
<a id="L503"></a><span class="ln">   503</span>		<span class="comment">// Canonicalize: first letter upper case</span>
<a id="L504"></a><span class="ln">   504</span>		<span class="comment">// and upper case after each dash.</span>
<a id="L505"></a><span class="ln">   505</span>		<span class="comment">// (Host, User-Agent, If-Modified-Since).</span>
<a id="L506"></a><span class="ln">   506</span>		<span class="comment">// MIME headers are ASCII only, so no Unicode issues.</span>
<a id="L507"></a><span class="ln">   507</span>		a := []byte(s)
<a id="L508"></a><span class="ln">   508</span>		upper := true
<a id="L509"></a><span class="ln">   509</span>		for i, v := range a {
<a id="L510"></a><span class="ln">   510</span>			if v == &#39; &#39; {
<a id="L511"></a><span class="ln">   511</span>				a[i] = &#39;-&#39;
<a id="L512"></a><span class="ln">   512</span>				upper = true
<a id="L513"></a><span class="ln">   513</span>				continue
<a id="L514"></a><span class="ln">   514</span>			}
<a id="L515"></a><span class="ln">   515</span>			if upper &amp;&amp; &#39;a&#39; &lt;= v &amp;&amp; v &lt;= &#39;z&#39; {
<a id="L516"></a><span class="ln">   516</span>				a[i] = v + &#39;A&#39; - &#39;a&#39;
<a id="L517"></a><span class="ln">   517</span>			}
<a id="L518"></a><span class="ln">   518</span>			if !upper &amp;&amp; &#39;A&#39; &lt;= v &amp;&amp; v &lt;= &#39;Z&#39; {
<a id="L519"></a><span class="ln">   519</span>				a[i] = v + &#39;a&#39; - &#39;A&#39;
<a id="L520"></a><span class="ln">   520</span>			}
<a id="L521"></a><span class="ln">   521</span>			upper = v == &#39;-&#39;
<a id="L522"></a><span class="ln">   522</span>		}
<a id="L523"></a><span class="ln">   523</span>		return string(a)
<a id="L524"></a><span class="ln">   524</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

