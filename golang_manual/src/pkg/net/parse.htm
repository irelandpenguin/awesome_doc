<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/parse.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/parse.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Simple file i/o and string manipulation, to avoid</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// depending on strconv and bufio and strings.</span>
<a id="L7"></a><span class="ln">     7</span>	
<a id="L8"></a><span class="ln">     8</span>	package net
<a id="L9"></a><span class="ln">     9</span>	
<a id="L10"></a><span class="ln">    10</span>	import (
<a id="L11"></a><span class="ln">    11</span>		&#34;io&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;os&#34;
<a id="L13"></a><span class="ln">    13</span>	)
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	type file struct {
<a id="L16"></a><span class="ln">    16</span>		file  *os.File
<a id="L17"></a><span class="ln">    17</span>		data  []byte
<a id="L18"></a><span class="ln">    18</span>		atEOF bool
<a id="L19"></a><span class="ln">    19</span>	}
<a id="L20"></a><span class="ln">    20</span>	
<a id="L21"></a><span class="ln">    21</span>	func (f *file) close() { f.file.Close() }
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	func (f *file) getLineFromData() (s string, ok bool) {
<a id="L24"></a><span class="ln">    24</span>		data := f.data
<a id="L25"></a><span class="ln">    25</span>		i := 0
<a id="L26"></a><span class="ln">    26</span>		for i = 0; i &lt; len(data); i++ {
<a id="L27"></a><span class="ln">    27</span>			if data[i] == &#39;\n&#39; {
<a id="L28"></a><span class="ln">    28</span>				s = string(data[0:i])
<a id="L29"></a><span class="ln">    29</span>				ok = true
<a id="L30"></a><span class="ln">    30</span>				<span class="comment">// move data</span>
<a id="L31"></a><span class="ln">    31</span>				i++
<a id="L32"></a><span class="ln">    32</span>				n := len(data) - i
<a id="L33"></a><span class="ln">    33</span>				copy(data[0:], data[i:])
<a id="L34"></a><span class="ln">    34</span>				f.data = data[0:n]
<a id="L35"></a><span class="ln">    35</span>				return
<a id="L36"></a><span class="ln">    36</span>			}
<a id="L37"></a><span class="ln">    37</span>		}
<a id="L38"></a><span class="ln">    38</span>		if f.atEOF &amp;&amp; len(f.data) &gt; 0 {
<a id="L39"></a><span class="ln">    39</span>			<span class="comment">// EOF, return all we have</span>
<a id="L40"></a><span class="ln">    40</span>			s = string(data)
<a id="L41"></a><span class="ln">    41</span>			f.data = f.data[0:0]
<a id="L42"></a><span class="ln">    42</span>			ok = true
<a id="L43"></a><span class="ln">    43</span>		}
<a id="L44"></a><span class="ln">    44</span>		return
<a id="L45"></a><span class="ln">    45</span>	}
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>	func (f *file) readLine() (s string, ok bool) {
<a id="L48"></a><span class="ln">    48</span>		if s, ok = f.getLineFromData(); ok {
<a id="L49"></a><span class="ln">    49</span>			return
<a id="L50"></a><span class="ln">    50</span>		}
<a id="L51"></a><span class="ln">    51</span>		if len(f.data) &lt; cap(f.data) {
<a id="L52"></a><span class="ln">    52</span>			ln := len(f.data)
<a id="L53"></a><span class="ln">    53</span>			n, err := io.ReadFull(f.file, f.data[ln:cap(f.data)])
<a id="L54"></a><span class="ln">    54</span>			if n &gt;= 0 {
<a id="L55"></a><span class="ln">    55</span>				f.data = f.data[0 : ln+n]
<a id="L56"></a><span class="ln">    56</span>			}
<a id="L57"></a><span class="ln">    57</span>			if err == io.EOF {
<a id="L58"></a><span class="ln">    58</span>				f.atEOF = true
<a id="L59"></a><span class="ln">    59</span>			}
<a id="L60"></a><span class="ln">    60</span>		}
<a id="L61"></a><span class="ln">    61</span>		s, ok = f.getLineFromData()
<a id="L62"></a><span class="ln">    62</span>		return
<a id="L63"></a><span class="ln">    63</span>	}
<a id="L64"></a><span class="ln">    64</span>	
<a id="L65"></a><span class="ln">    65</span>	func open(name string) (*file, error) {
<a id="L66"></a><span class="ln">    66</span>		fd, err := os.Open(name)
<a id="L67"></a><span class="ln">    67</span>		if err != nil {
<a id="L68"></a><span class="ln">    68</span>			return nil, err
<a id="L69"></a><span class="ln">    69</span>		}
<a id="L70"></a><span class="ln">    70</span>		return &amp;file{fd, make([]byte, os.Getpagesize())[0:0], false}, nil
<a id="L71"></a><span class="ln">    71</span>	}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>	func byteIndex(s string, c byte) int {
<a id="L74"></a><span class="ln">    74</span>		for i := 0; i &lt; len(s); i++ {
<a id="L75"></a><span class="ln">    75</span>			if s[i] == c {
<a id="L76"></a><span class="ln">    76</span>				return i
<a id="L77"></a><span class="ln">    77</span>			}
<a id="L78"></a><span class="ln">    78</span>		}
<a id="L79"></a><span class="ln">    79</span>		return -1
<a id="L80"></a><span class="ln">    80</span>	}
<a id="L81"></a><span class="ln">    81</span>	
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">// Count occurrences in s of any bytes in t.</span>
<a id="L83"></a><span class="ln">    83</span>	func countAnyByte(s string, t string) int {
<a id="L84"></a><span class="ln">    84</span>		n := 0
<a id="L85"></a><span class="ln">    85</span>		for i := 0; i &lt; len(s); i++ {
<a id="L86"></a><span class="ln">    86</span>			if byteIndex(t, s[i]) &gt;= 0 {
<a id="L87"></a><span class="ln">    87</span>				n++
<a id="L88"></a><span class="ln">    88</span>			}
<a id="L89"></a><span class="ln">    89</span>		}
<a id="L90"></a><span class="ln">    90</span>		return n
<a id="L91"></a><span class="ln">    91</span>	}
<a id="L92"></a><span class="ln">    92</span>	
<a id="L93"></a><span class="ln">    93</span>	<span class="comment">// Split s at any bytes in t.</span>
<a id="L94"></a><span class="ln">    94</span>	func splitAtBytes(s string, t string) []string {
<a id="L95"></a><span class="ln">    95</span>		a := make([]string, 1+countAnyByte(s, t))
<a id="L96"></a><span class="ln">    96</span>		n := 0
<a id="L97"></a><span class="ln">    97</span>		last := 0
<a id="L98"></a><span class="ln">    98</span>		for i := 0; i &lt; len(s); i++ {
<a id="L99"></a><span class="ln">    99</span>			if byteIndex(t, s[i]) &gt;= 0 {
<a id="L100"></a><span class="ln">   100</span>				if last &lt; i {
<a id="L101"></a><span class="ln">   101</span>					a[n] = string(s[last:i])
<a id="L102"></a><span class="ln">   102</span>					n++
<a id="L103"></a><span class="ln">   103</span>				}
<a id="L104"></a><span class="ln">   104</span>				last = i + 1
<a id="L105"></a><span class="ln">   105</span>			}
<a id="L106"></a><span class="ln">   106</span>		}
<a id="L107"></a><span class="ln">   107</span>		if last &lt; len(s) {
<a id="L108"></a><span class="ln">   108</span>			a[n] = string(s[last:])
<a id="L109"></a><span class="ln">   109</span>			n++
<a id="L110"></a><span class="ln">   110</span>		}
<a id="L111"></a><span class="ln">   111</span>		return a[0:n]
<a id="L112"></a><span class="ln">   112</span>	}
<a id="L113"></a><span class="ln">   113</span>	
<a id="L114"></a><span class="ln">   114</span>	func getFields(s string) []string { return splitAtBytes(s, &#34; \r\t\n&#34;) }
<a id="L115"></a><span class="ln">   115</span>	
<a id="L116"></a><span class="ln">   116</span>	<span class="comment">// Bigger than we need, not too big to worry about overflow</span>
<a id="L117"></a><span class="ln">   117</span>	const big = 0xFFFFFF
<a id="L118"></a><span class="ln">   118</span>	
<a id="L119"></a><span class="ln">   119</span>	<span class="comment">// Decimal to integer starting at &amp;s[i0].</span>
<a id="L120"></a><span class="ln">   120</span>	<span class="comment">// Returns number, new offset, success.</span>
<a id="L121"></a><span class="ln">   121</span>	func dtoi(s string, i0 int) (n int, i int, ok bool) {
<a id="L122"></a><span class="ln">   122</span>		n = 0
<a id="L123"></a><span class="ln">   123</span>		for i = i0; i &lt; len(s) &amp;&amp; &#39;0&#39; &lt;= s[i] &amp;&amp; s[i] &lt;= &#39;9&#39;; i++ {
<a id="L124"></a><span class="ln">   124</span>			n = n*10 + int(s[i]-&#39;0&#39;)
<a id="L125"></a><span class="ln">   125</span>			if n &gt;= big {
<a id="L126"></a><span class="ln">   126</span>				return 0, i, false
<a id="L127"></a><span class="ln">   127</span>			}
<a id="L128"></a><span class="ln">   128</span>		}
<a id="L129"></a><span class="ln">   129</span>		if i == i0 {
<a id="L130"></a><span class="ln">   130</span>			return 0, i, false
<a id="L131"></a><span class="ln">   131</span>		}
<a id="L132"></a><span class="ln">   132</span>		return n, i, true
<a id="L133"></a><span class="ln">   133</span>	}
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">// Hexadecimal to integer starting at &amp;s[i0].</span>
<a id="L136"></a><span class="ln">   136</span>	<span class="comment">// Returns number, new offset, success.</span>
<a id="L137"></a><span class="ln">   137</span>	func xtoi(s string, i0 int) (n int, i int, ok bool) {
<a id="L138"></a><span class="ln">   138</span>		n = 0
<a id="L139"></a><span class="ln">   139</span>		for i = i0; i &lt; len(s); i++ {
<a id="L140"></a><span class="ln">   140</span>			if &#39;0&#39; &lt;= s[i] &amp;&amp; s[i] &lt;= &#39;9&#39; {
<a id="L141"></a><span class="ln">   141</span>				n *= 16
<a id="L142"></a><span class="ln">   142</span>				n += int(s[i] - &#39;0&#39;)
<a id="L143"></a><span class="ln">   143</span>			} else if &#39;a&#39; &lt;= s[i] &amp;&amp; s[i] &lt;= &#39;f&#39; {
<a id="L144"></a><span class="ln">   144</span>				n *= 16
<a id="L145"></a><span class="ln">   145</span>				n += int(s[i]-&#39;a&#39;) + 10
<a id="L146"></a><span class="ln">   146</span>			} else if &#39;A&#39; &lt;= s[i] &amp;&amp; s[i] &lt;= &#39;F&#39; {
<a id="L147"></a><span class="ln">   147</span>				n *= 16
<a id="L148"></a><span class="ln">   148</span>				n += int(s[i]-&#39;A&#39;) + 10
<a id="L149"></a><span class="ln">   149</span>			} else {
<a id="L150"></a><span class="ln">   150</span>				break
<a id="L151"></a><span class="ln">   151</span>			}
<a id="L152"></a><span class="ln">   152</span>			if n &gt;= big {
<a id="L153"></a><span class="ln">   153</span>				return 0, i, false
<a id="L154"></a><span class="ln">   154</span>			}
<a id="L155"></a><span class="ln">   155</span>		}
<a id="L156"></a><span class="ln">   156</span>		if i == i0 {
<a id="L157"></a><span class="ln">   157</span>			return 0, i, false
<a id="L158"></a><span class="ln">   158</span>		}
<a id="L159"></a><span class="ln">   159</span>		return n, i, true
<a id="L160"></a><span class="ln">   160</span>	}
<a id="L161"></a><span class="ln">   161</span>	
<a id="L162"></a><span class="ln">   162</span>	<span class="comment">// xtoi2 converts the next two hex digits of s into a byte.</span>
<a id="L163"></a><span class="ln">   163</span>	<span class="comment">// If s is longer than 2 bytes then the third byte must be e.</span>
<a id="L164"></a><span class="ln">   164</span>	<span class="comment">// If the first two bytes of s are not hex digits or the third byte</span>
<a id="L165"></a><span class="ln">   165</span>	<span class="comment">// does not match e, false is returned.</span>
<a id="L166"></a><span class="ln">   166</span>	func xtoi2(s string, e byte) (byte, bool) {
<a id="L167"></a><span class="ln">   167</span>		if len(s) &gt; 2 &amp;&amp; s[2] != e {
<a id="L168"></a><span class="ln">   168</span>			return 0, false
<a id="L169"></a><span class="ln">   169</span>		}
<a id="L170"></a><span class="ln">   170</span>		n, ei, ok := xtoi(s[:2], 0)
<a id="L171"></a><span class="ln">   171</span>		return byte(n), ok &amp;&amp; ei == 2
<a id="L172"></a><span class="ln">   172</span>	}
<a id="L173"></a><span class="ln">   173</span>	
<a id="L174"></a><span class="ln">   174</span>	<span class="comment">// Integer to decimal.</span>
<a id="L175"></a><span class="ln">   175</span>	func itoa(i int) string {
<a id="L176"></a><span class="ln">   176</span>		var buf [30]byte
<a id="L177"></a><span class="ln">   177</span>		n := len(buf)
<a id="L178"></a><span class="ln">   178</span>		neg := false
<a id="L179"></a><span class="ln">   179</span>		if i &lt; 0 {
<a id="L180"></a><span class="ln">   180</span>			i = -i
<a id="L181"></a><span class="ln">   181</span>			neg = true
<a id="L182"></a><span class="ln">   182</span>		}
<a id="L183"></a><span class="ln">   183</span>		ui := uint(i)
<a id="L184"></a><span class="ln">   184</span>		for ui &gt; 0 || n == len(buf) {
<a id="L185"></a><span class="ln">   185</span>			n--
<a id="L186"></a><span class="ln">   186</span>			buf[n] = byte(&#39;0&#39; + ui%10)
<a id="L187"></a><span class="ln">   187</span>			ui /= 10
<a id="L188"></a><span class="ln">   188</span>		}
<a id="L189"></a><span class="ln">   189</span>		if neg {
<a id="L190"></a><span class="ln">   190</span>			n--
<a id="L191"></a><span class="ln">   191</span>			buf[n] = &#39;-&#39;
<a id="L192"></a><span class="ln">   192</span>		}
<a id="L193"></a><span class="ln">   193</span>		return string(buf[n:])
<a id="L194"></a><span class="ln">   194</span>	}
<a id="L195"></a><span class="ln">   195</span>	
<a id="L196"></a><span class="ln">   196</span>	<span class="comment">// Convert i to decimal string.</span>
<a id="L197"></a><span class="ln">   197</span>	func itod(i uint) string {
<a id="L198"></a><span class="ln">   198</span>		if i == 0 {
<a id="L199"></a><span class="ln">   199</span>			return &#34;0&#34;
<a id="L200"></a><span class="ln">   200</span>		}
<a id="L201"></a><span class="ln">   201</span>	
<a id="L202"></a><span class="ln">   202</span>		<span class="comment">// Assemble decimal in reverse order.</span>
<a id="L203"></a><span class="ln">   203</span>		var b [32]byte
<a id="L204"></a><span class="ln">   204</span>		bp := len(b)
<a id="L205"></a><span class="ln">   205</span>		for ; i &gt; 0; i /= 10 {
<a id="L206"></a><span class="ln">   206</span>			bp--
<a id="L207"></a><span class="ln">   207</span>			b[bp] = byte(i%10) + &#39;0&#39;
<a id="L208"></a><span class="ln">   208</span>		}
<a id="L209"></a><span class="ln">   209</span>	
<a id="L210"></a><span class="ln">   210</span>		return string(b[bp:])
<a id="L211"></a><span class="ln">   211</span>	}
<a id="L212"></a><span class="ln">   212</span>	
<a id="L213"></a><span class="ln">   213</span>	<span class="comment">// Convert i to hexadecimal string.</span>
<a id="L214"></a><span class="ln">   214</span>	func itox(i uint, min int) string {
<a id="L215"></a><span class="ln">   215</span>		<span class="comment">// Assemble hexadecimal in reverse order.</span>
<a id="L216"></a><span class="ln">   216</span>		var b [32]byte
<a id="L217"></a><span class="ln">   217</span>		bp := len(b)
<a id="L218"></a><span class="ln">   218</span>		for ; i &gt; 0 || min &gt; 0; i /= 16 {
<a id="L219"></a><span class="ln">   219</span>			bp--
<a id="L220"></a><span class="ln">   220</span>			b[bp] = &#34;0123456789abcdef&#34;[byte(i%16)]
<a id="L221"></a><span class="ln">   221</span>			min--
<a id="L222"></a><span class="ln">   222</span>		}
<a id="L223"></a><span class="ln">   223</span>	
<a id="L224"></a><span class="ln">   224</span>		return string(b[bp:])
<a id="L225"></a><span class="ln">   225</span>	}
<a id="L226"></a><span class="ln">   226</span>	
<a id="L227"></a><span class="ln">   227</span>	<span class="comment">// Number of occurrences of b in s.</span>
<a id="L228"></a><span class="ln">   228</span>	func count(s string, b byte) int {
<a id="L229"></a><span class="ln">   229</span>		n := 0
<a id="L230"></a><span class="ln">   230</span>		for i := 0; i &lt; len(s); i++ {
<a id="L231"></a><span class="ln">   231</span>			if s[i] == b {
<a id="L232"></a><span class="ln">   232</span>				n++
<a id="L233"></a><span class="ln">   233</span>			}
<a id="L234"></a><span class="ln">   234</span>		}
<a id="L235"></a><span class="ln">   235</span>		return n
<a id="L236"></a><span class="ln">   236</span>	}
<a id="L237"></a><span class="ln">   237</span>	
<a id="L238"></a><span class="ln">   238</span>	<span class="comment">// Index of rightmost occurrence of b in s.</span>
<a id="L239"></a><span class="ln">   239</span>	func last(s string, b byte) int {
<a id="L240"></a><span class="ln">   240</span>		i := len(s)
<a id="L241"></a><span class="ln">   241</span>		for i--; i &gt;= 0; i-- {
<a id="L242"></a><span class="ln">   242</span>			if s[i] == b {
<a id="L243"></a><span class="ln">   243</span>				break
<a id="L244"></a><span class="ln">   244</span>			}
<a id="L245"></a><span class="ln">   245</span>		}
<a id="L246"></a><span class="ln">   246</span>		return i
<a id="L247"></a><span class="ln">   247</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

