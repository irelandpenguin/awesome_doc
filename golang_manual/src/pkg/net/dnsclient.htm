<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/net/dnsclient.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/net/dnsclient.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package net
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;math/rand&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;sort&#34;
<a id="L10"></a><span class="ln">    10</span>	)
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// DNSError represents a DNS lookup error.</span>
<a id="L13"></a><span class="ln">    13</span>	type DNSError struct {
<a id="L14"></a><span class="ln">    14</span>		Err       string <span class="comment">// description of the error</span>
<a id="L15"></a><span class="ln">    15</span>		Name      string <span class="comment">// name looked for</span>
<a id="L16"></a><span class="ln">    16</span>		Server    string <span class="comment">// server used</span>
<a id="L17"></a><span class="ln">    17</span>		IsTimeout bool
<a id="L18"></a><span class="ln">    18</span>	}
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	func (e *DNSError) Error() string {
<a id="L21"></a><span class="ln">    21</span>		if e == nil {
<a id="L22"></a><span class="ln">    22</span>			return &#34;&lt;nil&gt;&#34;
<a id="L23"></a><span class="ln">    23</span>		}
<a id="L24"></a><span class="ln">    24</span>		s := &#34;lookup &#34; + e.Name
<a id="L25"></a><span class="ln">    25</span>		if e.Server != &#34;&#34; {
<a id="L26"></a><span class="ln">    26</span>			s += &#34; on &#34; + e.Server
<a id="L27"></a><span class="ln">    27</span>		}
<a id="L28"></a><span class="ln">    28</span>		s += &#34;: &#34; + e.Err
<a id="L29"></a><span class="ln">    29</span>		return s
<a id="L30"></a><span class="ln">    30</span>	}
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>	func (e *DNSError) Timeout() bool   { return e.IsTimeout }
<a id="L33"></a><span class="ln">    33</span>	func (e *DNSError) Temporary() bool { return e.IsTimeout }
<a id="L34"></a><span class="ln">    34</span>	
<a id="L35"></a><span class="ln">    35</span>	const noSuchHost = &#34;no such host&#34;
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// reverseaddr returns the in-addr.arpa. or ip6.arpa. hostname of the IP</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// address addr suitable for rDNS (PTR) record lookup or an error if it fails</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// to parse the IP address.</span>
<a id="L40"></a><span class="ln">    40</span>	func reverseaddr(addr string) (arpa string, err error) {
<a id="L41"></a><span class="ln">    41</span>		ip := ParseIP(addr)
<a id="L42"></a><span class="ln">    42</span>		if ip == nil {
<a id="L43"></a><span class="ln">    43</span>			return &#34;&#34;, &amp;DNSError{Err: &#34;unrecognized address&#34;, Name: addr}
<a id="L44"></a><span class="ln">    44</span>		}
<a id="L45"></a><span class="ln">    45</span>		if ip.To4() != nil {
<a id="L46"></a><span class="ln">    46</span>			return itoa(int(ip[15])) + &#34;.&#34; + itoa(int(ip[14])) + &#34;.&#34; + itoa(int(ip[13])) + &#34;.&#34; +
<a id="L47"></a><span class="ln">    47</span>				itoa(int(ip[12])) + &#34;.in-addr.arpa.&#34;, nil
<a id="L48"></a><span class="ln">    48</span>		}
<a id="L49"></a><span class="ln">    49</span>		<span class="comment">// Must be IPv6</span>
<a id="L50"></a><span class="ln">    50</span>		buf := make([]byte, 0, len(ip)*4+len(&#34;ip6.arpa.&#34;))
<a id="L51"></a><span class="ln">    51</span>		<span class="comment">// Add it, in reverse, to the buffer</span>
<a id="L52"></a><span class="ln">    52</span>		for i := len(ip) - 1; i &gt;= 0; i-- {
<a id="L53"></a><span class="ln">    53</span>			v := ip[i]
<a id="L54"></a><span class="ln">    54</span>			buf = append(buf, hexDigit[v&amp;0xF])
<a id="L55"></a><span class="ln">    55</span>			buf = append(buf, &#39;.&#39;)
<a id="L56"></a><span class="ln">    56</span>			buf = append(buf, hexDigit[v&gt;&gt;4])
<a id="L57"></a><span class="ln">    57</span>			buf = append(buf, &#39;.&#39;)
<a id="L58"></a><span class="ln">    58</span>		}
<a id="L59"></a><span class="ln">    59</span>		<span class="comment">// Append &#34;ip6.arpa.&#34; and return (buf already has the final .)</span>
<a id="L60"></a><span class="ln">    60</span>		buf = append(buf, &#34;ip6.arpa.&#34;...)
<a id="L61"></a><span class="ln">    61</span>		return string(buf), nil
<a id="L62"></a><span class="ln">    62</span>	}
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// Find answer for name in dns message.</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// On return, if err == nil, addrs != nil.</span>
<a id="L66"></a><span class="ln">    66</span>	func answer(name, server string, dns *dnsMsg, qtype uint16) (cname string, addrs []dnsRR, err error) {
<a id="L67"></a><span class="ln">    67</span>		addrs = make([]dnsRR, 0, len(dns.answer))
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>		if dns.rcode == dnsRcodeNameError &amp;&amp; dns.recursion_available {
<a id="L70"></a><span class="ln">    70</span>			return &#34;&#34;, nil, &amp;DNSError{Err: noSuchHost, Name: name}
<a id="L71"></a><span class="ln">    71</span>		}
<a id="L72"></a><span class="ln">    72</span>		if dns.rcode != dnsRcodeSuccess {
<a id="L73"></a><span class="ln">    73</span>			<span class="comment">// None of the error codes make sense</span>
<a id="L74"></a><span class="ln">    74</span>			<span class="comment">// for the query we sent.  If we didn&#39;t get</span>
<a id="L75"></a><span class="ln">    75</span>			<span class="comment">// a name error and we didn&#39;t get success,</span>
<a id="L76"></a><span class="ln">    76</span>			<span class="comment">// the server is behaving incorrectly.</span>
<a id="L77"></a><span class="ln">    77</span>			return &#34;&#34;, nil, &amp;DNSError{Err: &#34;server misbehaving&#34;, Name: name, Server: server}
<a id="L78"></a><span class="ln">    78</span>		}
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>		<span class="comment">// Look for the name.</span>
<a id="L81"></a><span class="ln">    81</span>		<span class="comment">// Presotto says it&#39;s okay to assume that servers listed in</span>
<a id="L82"></a><span class="ln">    82</span>		<span class="comment">// /etc/resolv.conf are recursive resolvers.</span>
<a id="L83"></a><span class="ln">    83</span>		<span class="comment">// We asked for recursion, so it should have included</span>
<a id="L84"></a><span class="ln">    84</span>		<span class="comment">// all the answers we need in this one packet.</span>
<a id="L85"></a><span class="ln">    85</span>	Cname:
<a id="L86"></a><span class="ln">    86</span>		for cnameloop := 0; cnameloop &lt; 10; cnameloop++ {
<a id="L87"></a><span class="ln">    87</span>			addrs = addrs[0:0]
<a id="L88"></a><span class="ln">    88</span>			for _, rr := range dns.answer {
<a id="L89"></a><span class="ln">    89</span>				if _, justHeader := rr.(*dnsRR_Header); justHeader {
<a id="L90"></a><span class="ln">    90</span>					<span class="comment">// Corrupt record: we only have a</span>
<a id="L91"></a><span class="ln">    91</span>					<span class="comment">// header. That header might say it&#39;s</span>
<a id="L92"></a><span class="ln">    92</span>					<span class="comment">// of type qtype, but we don&#39;t</span>
<a id="L93"></a><span class="ln">    93</span>					<span class="comment">// actually have it. Skip.</span>
<a id="L94"></a><span class="ln">    94</span>					continue
<a id="L95"></a><span class="ln">    95</span>				}
<a id="L96"></a><span class="ln">    96</span>				h := rr.Header()
<a id="L97"></a><span class="ln">    97</span>				if h.Class == dnsClassINET &amp;&amp; h.Name == name {
<a id="L98"></a><span class="ln">    98</span>					switch h.Rrtype {
<a id="L99"></a><span class="ln">    99</span>					case qtype:
<a id="L100"></a><span class="ln">   100</span>						addrs = append(addrs, rr)
<a id="L101"></a><span class="ln">   101</span>					case dnsTypeCNAME:
<a id="L102"></a><span class="ln">   102</span>						<span class="comment">// redirect to cname</span>
<a id="L103"></a><span class="ln">   103</span>						name = rr.(*dnsRR_CNAME).Cname
<a id="L104"></a><span class="ln">   104</span>						continue Cname
<a id="L105"></a><span class="ln">   105</span>					}
<a id="L106"></a><span class="ln">   106</span>				}
<a id="L107"></a><span class="ln">   107</span>			}
<a id="L108"></a><span class="ln">   108</span>			if len(addrs) == 0 {
<a id="L109"></a><span class="ln">   109</span>				return &#34;&#34;, nil, &amp;DNSError{Err: noSuchHost, Name: name, Server: server}
<a id="L110"></a><span class="ln">   110</span>			}
<a id="L111"></a><span class="ln">   111</span>			return name, addrs, nil
<a id="L112"></a><span class="ln">   112</span>		}
<a id="L113"></a><span class="ln">   113</span>	
<a id="L114"></a><span class="ln">   114</span>		return &#34;&#34;, nil, &amp;DNSError{Err: &#34;too many redirects&#34;, Name: name, Server: server}
<a id="L115"></a><span class="ln">   115</span>	}
<a id="L116"></a><span class="ln">   116</span>	
<a id="L117"></a><span class="ln">   117</span>	func isDomainName(s string) bool {
<a id="L118"></a><span class="ln">   118</span>		<span class="comment">// See RFC 1035, RFC 3696.</span>
<a id="L119"></a><span class="ln">   119</span>		if len(s) == 0 {
<a id="L120"></a><span class="ln">   120</span>			return false
<a id="L121"></a><span class="ln">   121</span>		}
<a id="L122"></a><span class="ln">   122</span>		if len(s) &gt; 255 {
<a id="L123"></a><span class="ln">   123</span>			return false
<a id="L124"></a><span class="ln">   124</span>		}
<a id="L125"></a><span class="ln">   125</span>		if s[len(s)-1] != &#39;.&#39; { <span class="comment">// simplify checking loop: make name end in dot</span>
<a id="L126"></a><span class="ln">   126</span>			s += &#34;.&#34;
<a id="L127"></a><span class="ln">   127</span>		}
<a id="L128"></a><span class="ln">   128</span>	
<a id="L129"></a><span class="ln">   129</span>		last := byte(&#39;.&#39;)
<a id="L130"></a><span class="ln">   130</span>		ok := false <span class="comment">// ok once we&#39;ve seen a letter</span>
<a id="L131"></a><span class="ln">   131</span>		partlen := 0
<a id="L132"></a><span class="ln">   132</span>		for i := 0; i &lt; len(s); i++ {
<a id="L133"></a><span class="ln">   133</span>			c := s[i]
<a id="L134"></a><span class="ln">   134</span>			switch {
<a id="L135"></a><span class="ln">   135</span>			default:
<a id="L136"></a><span class="ln">   136</span>				return false
<a id="L137"></a><span class="ln">   137</span>			case &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39; || &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39; || c == &#39;_&#39;:
<a id="L138"></a><span class="ln">   138</span>				ok = true
<a id="L139"></a><span class="ln">   139</span>				partlen++
<a id="L140"></a><span class="ln">   140</span>			case &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39;:
<a id="L141"></a><span class="ln">   141</span>				<span class="comment">// fine</span>
<a id="L142"></a><span class="ln">   142</span>				partlen++
<a id="L143"></a><span class="ln">   143</span>			case c == &#39;-&#39;:
<a id="L144"></a><span class="ln">   144</span>				<span class="comment">// byte before dash cannot be dot</span>
<a id="L145"></a><span class="ln">   145</span>				if last == &#39;.&#39; {
<a id="L146"></a><span class="ln">   146</span>					return false
<a id="L147"></a><span class="ln">   147</span>				}
<a id="L148"></a><span class="ln">   148</span>				partlen++
<a id="L149"></a><span class="ln">   149</span>			case c == &#39;.&#39;:
<a id="L150"></a><span class="ln">   150</span>				<span class="comment">// byte before dot cannot be dot, dash</span>
<a id="L151"></a><span class="ln">   151</span>				if last == &#39;.&#39; || last == &#39;-&#39; {
<a id="L152"></a><span class="ln">   152</span>					return false
<a id="L153"></a><span class="ln">   153</span>				}
<a id="L154"></a><span class="ln">   154</span>				if partlen &gt; 63 || partlen == 0 {
<a id="L155"></a><span class="ln">   155</span>					return false
<a id="L156"></a><span class="ln">   156</span>				}
<a id="L157"></a><span class="ln">   157</span>				partlen = 0
<a id="L158"></a><span class="ln">   158</span>			}
<a id="L159"></a><span class="ln">   159</span>			last = c
<a id="L160"></a><span class="ln">   160</span>		}
<a id="L161"></a><span class="ln">   161</span>	
<a id="L162"></a><span class="ln">   162</span>		return ok
<a id="L163"></a><span class="ln">   163</span>	}
<a id="L164"></a><span class="ln">   164</span>	
<a id="L165"></a><span class="ln">   165</span>	<span class="comment">// An SRV represents a single DNS SRV record.</span>
<a id="L166"></a><span class="ln">   166</span>	type SRV struct {
<a id="L167"></a><span class="ln">   167</span>		Target   string
<a id="L168"></a><span class="ln">   168</span>		Port     uint16
<a id="L169"></a><span class="ln">   169</span>		Priority uint16
<a id="L170"></a><span class="ln">   170</span>		Weight   uint16
<a id="L171"></a><span class="ln">   171</span>	}
<a id="L172"></a><span class="ln">   172</span>	
<a id="L173"></a><span class="ln">   173</span>	<span class="comment">// byPriorityWeight sorts SRV records by ascending priority and weight.</span>
<a id="L174"></a><span class="ln">   174</span>	type byPriorityWeight []*SRV
<a id="L175"></a><span class="ln">   175</span>	
<a id="L176"></a><span class="ln">   176</span>	func (s byPriorityWeight) Len() int { return len(s) }
<a id="L177"></a><span class="ln">   177</span>	
<a id="L178"></a><span class="ln">   178</span>	func (s byPriorityWeight) Swap(i, j int) { s[i], s[j] = s[j], s[i] }
<a id="L179"></a><span class="ln">   179</span>	
<a id="L180"></a><span class="ln">   180</span>	func (s byPriorityWeight) Less(i, j int) bool {
<a id="L181"></a><span class="ln">   181</span>		return s[i].Priority &lt; s[j].Priority ||
<a id="L182"></a><span class="ln">   182</span>			(s[i].Priority == s[j].Priority &amp;&amp; s[i].Weight &lt; s[j].Weight)
<a id="L183"></a><span class="ln">   183</span>	}
<a id="L184"></a><span class="ln">   184</span>	
<a id="L185"></a><span class="ln">   185</span>	<span class="comment">// shuffleByWeight shuffles SRV records by weight using the algorithm</span>
<a id="L186"></a><span class="ln">   186</span>	<span class="comment">// described in RFC 2782.  </span>
<a id="L187"></a><span class="ln">   187</span>	func (addrs byPriorityWeight) shuffleByWeight() {
<a id="L188"></a><span class="ln">   188</span>		sum := 0
<a id="L189"></a><span class="ln">   189</span>		for _, addr := range addrs {
<a id="L190"></a><span class="ln">   190</span>			sum += int(addr.Weight)
<a id="L191"></a><span class="ln">   191</span>		}
<a id="L192"></a><span class="ln">   192</span>		for sum &gt; 0 &amp;&amp; len(addrs) &gt; 1 {
<a id="L193"></a><span class="ln">   193</span>			s := 0
<a id="L194"></a><span class="ln">   194</span>			n := rand.Intn(sum + 1)
<a id="L195"></a><span class="ln">   195</span>			for i := range addrs {
<a id="L196"></a><span class="ln">   196</span>				s += int(addrs[i].Weight)
<a id="L197"></a><span class="ln">   197</span>				if s &gt;= n {
<a id="L198"></a><span class="ln">   198</span>					if i &gt; 0 {
<a id="L199"></a><span class="ln">   199</span>						t := addrs[i]
<a id="L200"></a><span class="ln">   200</span>						copy(addrs[1:i+1], addrs[0:i])
<a id="L201"></a><span class="ln">   201</span>						addrs[0] = t
<a id="L202"></a><span class="ln">   202</span>					}
<a id="L203"></a><span class="ln">   203</span>					break
<a id="L204"></a><span class="ln">   204</span>				}
<a id="L205"></a><span class="ln">   205</span>			}
<a id="L206"></a><span class="ln">   206</span>			sum -= int(addrs[0].Weight)
<a id="L207"></a><span class="ln">   207</span>			addrs = addrs[1:]
<a id="L208"></a><span class="ln">   208</span>		}
<a id="L209"></a><span class="ln">   209</span>	}
<a id="L210"></a><span class="ln">   210</span>	
<a id="L211"></a><span class="ln">   211</span>	<span class="comment">// sort reorders SRV records as specified in RFC 2782.</span>
<a id="L212"></a><span class="ln">   212</span>	func (addrs byPriorityWeight) sort() {
<a id="L213"></a><span class="ln">   213</span>		sort.Sort(addrs)
<a id="L214"></a><span class="ln">   214</span>		i := 0
<a id="L215"></a><span class="ln">   215</span>		for j := 1; j &lt; len(addrs); j++ {
<a id="L216"></a><span class="ln">   216</span>			if addrs[i].Priority != addrs[j].Priority {
<a id="L217"></a><span class="ln">   217</span>				addrs[i:j].shuffleByWeight()
<a id="L218"></a><span class="ln">   218</span>				i = j
<a id="L219"></a><span class="ln">   219</span>			}
<a id="L220"></a><span class="ln">   220</span>		}
<a id="L221"></a><span class="ln">   221</span>		addrs[i:].shuffleByWeight()
<a id="L222"></a><span class="ln">   222</span>	}
<a id="L223"></a><span class="ln">   223</span>	
<a id="L224"></a><span class="ln">   224</span>	<span class="comment">// An MX represents a single DNS MX record.</span>
<a id="L225"></a><span class="ln">   225</span>	type MX struct {
<a id="L226"></a><span class="ln">   226</span>		Host string
<a id="L227"></a><span class="ln">   227</span>		Pref uint16
<a id="L228"></a><span class="ln">   228</span>	}
<a id="L229"></a><span class="ln">   229</span>	
<a id="L230"></a><span class="ln">   230</span>	<span class="comment">// byPref implements sort.Interface to sort MX records by preference</span>
<a id="L231"></a><span class="ln">   231</span>	type byPref []*MX
<a id="L232"></a><span class="ln">   232</span>	
<a id="L233"></a><span class="ln">   233</span>	func (s byPref) Len() int { return len(s) }
<a id="L234"></a><span class="ln">   234</span>	
<a id="L235"></a><span class="ln">   235</span>	func (s byPref) Less(i, j int) bool { return s[i].Pref &lt; s[j].Pref }
<a id="L236"></a><span class="ln">   236</span>	
<a id="L237"></a><span class="ln">   237</span>	func (s byPref) Swap(i, j int) { s[i], s[j] = s[j], s[i] }
<a id="L238"></a><span class="ln">   238</span>	
<a id="L239"></a><span class="ln">   239</span>	<span class="comment">// sort reorders MX records as specified in RFC 5321.</span>
<a id="L240"></a><span class="ln">   240</span>	func (s byPref) sort() {
<a id="L241"></a><span class="ln">   241</span>		for i := range s {
<a id="L242"></a><span class="ln">   242</span>			j := rand.Intn(i + 1)
<a id="L243"></a><span class="ln">   243</span>			s[i], s[j] = s[j], s[i]
<a id="L244"></a><span class="ln">   244</span>		}
<a id="L245"></a><span class="ln">   245</span>		sort.Sort(s)
<a id="L246"></a><span class="ln">   246</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

