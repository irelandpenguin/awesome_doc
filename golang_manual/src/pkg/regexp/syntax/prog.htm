<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/regexp/syntax/prog.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/regexp/syntax/prog.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package syntax
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bytes&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;strconv&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;unicode&#34;
<a id="L11"></a><span class="ln">    11</span>	)
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// Compiled program.</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// May not belong in this package, but convenient for now.</span>
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// A Prog is a compiled regular expression program.</span>
<a id="L17"></a><span class="ln">    17</span>	type Prog struct {
<a id="L18"></a><span class="ln">    18</span>		Inst   []Inst
<a id="L19"></a><span class="ln">    19</span>		Start  int <span class="comment">// index of start instruction</span>
<a id="L20"></a><span class="ln">    20</span>		NumCap int <span class="comment">// number of InstCapture insts in re</span>
<a id="L21"></a><span class="ln">    21</span>	}
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// An InstOp is an instruction opcode.</span>
<a id="L24"></a><span class="ln">    24</span>	type InstOp uint8
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>	const (
<a id="L27"></a><span class="ln">    27</span>		InstAlt InstOp = iota
<a id="L28"></a><span class="ln">    28</span>		InstAltMatch
<a id="L29"></a><span class="ln">    29</span>		InstCapture
<a id="L30"></a><span class="ln">    30</span>		InstEmptyWidth
<a id="L31"></a><span class="ln">    31</span>		InstMatch
<a id="L32"></a><span class="ln">    32</span>		InstFail
<a id="L33"></a><span class="ln">    33</span>		InstNop
<a id="L34"></a><span class="ln">    34</span>		InstRune
<a id="L35"></a><span class="ln">    35</span>		InstRune1
<a id="L36"></a><span class="ln">    36</span>		InstRuneAny
<a id="L37"></a><span class="ln">    37</span>		InstRuneAnyNotNL
<a id="L38"></a><span class="ln">    38</span>	)
<a id="L39"></a><span class="ln">    39</span>	
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// An EmptyOp specifies a kind or mixture of zero-width assertions.</span>
<a id="L41"></a><span class="ln">    41</span>	type EmptyOp uint8
<a id="L42"></a><span class="ln">    42</span>	
<a id="L43"></a><span class="ln">    43</span>	const (
<a id="L44"></a><span class="ln">    44</span>		EmptyBeginLine EmptyOp = 1 &lt;&lt; iota
<a id="L45"></a><span class="ln">    45</span>		EmptyEndLine
<a id="L46"></a><span class="ln">    46</span>		EmptyBeginText
<a id="L47"></a><span class="ln">    47</span>		EmptyEndText
<a id="L48"></a><span class="ln">    48</span>		EmptyWordBoundary
<a id="L49"></a><span class="ln">    49</span>		EmptyNoWordBoundary
<a id="L50"></a><span class="ln">    50</span>	)
<a id="L51"></a><span class="ln">    51</span>	
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// EmptyOpContext returns the zero-width assertions</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">// satisfied at the position between the runes r1 and r2.</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">// Passing r1 == -1 indicates that the position is</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// at the beginning of the text.</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// Passing r2 == -1 indicates that the position is</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">// at the end of the text.</span>
<a id="L58"></a><span class="ln">    58</span>	func EmptyOpContext(r1, r2 rune) EmptyOp {
<a id="L59"></a><span class="ln">    59</span>		var op EmptyOp
<a id="L60"></a><span class="ln">    60</span>		if r1 &lt; 0 {
<a id="L61"></a><span class="ln">    61</span>			op |= EmptyBeginText | EmptyBeginLine
<a id="L62"></a><span class="ln">    62</span>		}
<a id="L63"></a><span class="ln">    63</span>		if r1 == &#39;\n&#39; {
<a id="L64"></a><span class="ln">    64</span>			op |= EmptyBeginLine
<a id="L65"></a><span class="ln">    65</span>		}
<a id="L66"></a><span class="ln">    66</span>		if r2 &lt; 0 {
<a id="L67"></a><span class="ln">    67</span>			op |= EmptyEndText | EmptyEndLine
<a id="L68"></a><span class="ln">    68</span>		}
<a id="L69"></a><span class="ln">    69</span>		if r2 == &#39;\n&#39; {
<a id="L70"></a><span class="ln">    70</span>			op |= EmptyEndLine
<a id="L71"></a><span class="ln">    71</span>		}
<a id="L72"></a><span class="ln">    72</span>		if IsWordChar(r1) != IsWordChar(r2) {
<a id="L73"></a><span class="ln">    73</span>			op |= EmptyWordBoundary
<a id="L74"></a><span class="ln">    74</span>		} else {
<a id="L75"></a><span class="ln">    75</span>			op |= EmptyNoWordBoundary
<a id="L76"></a><span class="ln">    76</span>		}
<a id="L77"></a><span class="ln">    77</span>		return op
<a id="L78"></a><span class="ln">    78</span>	}
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// IsWordChar reports whether r is consider a ``word character&#39;&#39;</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// during the evaluation of the \b and \B zero-width assertions.</span>
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">// These assertions are ASCII-only: the word characters are [A-Za-z0-9_].</span>
<a id="L83"></a><span class="ln">    83</span>	func IsWordChar(r rune) bool {
<a id="L84"></a><span class="ln">    84</span>		return &#39;A&#39; &lt;= r &amp;&amp; r &lt;= &#39;Z&#39; || &#39;a&#39; &lt;= r &amp;&amp; r &lt;= &#39;z&#39; || &#39;0&#39; &lt;= r &amp;&amp; r &lt;= &#39;9&#39; || r == &#39;_&#39;
<a id="L85"></a><span class="ln">    85</span>	}
<a id="L86"></a><span class="ln">    86</span>	
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">// An Inst is a single instruction in a regular expression program.</span>
<a id="L88"></a><span class="ln">    88</span>	type Inst struct {
<a id="L89"></a><span class="ln">    89</span>		Op   InstOp
<a id="L90"></a><span class="ln">    90</span>		Out  uint32 <span class="comment">// all but InstMatch, InstFail</span>
<a id="L91"></a><span class="ln">    91</span>		Arg  uint32 <span class="comment">// InstAlt, InstAltMatch, InstCapture, InstEmptyWidth</span>
<a id="L92"></a><span class="ln">    92</span>		Rune []rune
<a id="L93"></a><span class="ln">    93</span>	}
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>	func (p *Prog) String() string {
<a id="L96"></a><span class="ln">    96</span>		var b bytes.Buffer
<a id="L97"></a><span class="ln">    97</span>		dumpProg(&amp;b, p)
<a id="L98"></a><span class="ln">    98</span>		return b.String()
<a id="L99"></a><span class="ln">    99</span>	}
<a id="L100"></a><span class="ln">   100</span>	
<a id="L101"></a><span class="ln">   101</span>	<span class="comment">// skipNop follows any no-op or capturing instructions</span>
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">// and returns the resulting pc.</span>
<a id="L103"></a><span class="ln">   103</span>	func (p *Prog) skipNop(pc uint32) *Inst {
<a id="L104"></a><span class="ln">   104</span>		i := &amp;p.Inst[pc]
<a id="L105"></a><span class="ln">   105</span>		for i.Op == InstNop || i.Op == InstCapture {
<a id="L106"></a><span class="ln">   106</span>			pc = i.Out
<a id="L107"></a><span class="ln">   107</span>			i = &amp;p.Inst[pc]
<a id="L108"></a><span class="ln">   108</span>		}
<a id="L109"></a><span class="ln">   109</span>		return i
<a id="L110"></a><span class="ln">   110</span>	}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>	<span class="comment">// op returns i.Op but merges all the Rune special cases into InstRune</span>
<a id="L113"></a><span class="ln">   113</span>	func (i *Inst) op() InstOp {
<a id="L114"></a><span class="ln">   114</span>		op := i.Op
<a id="L115"></a><span class="ln">   115</span>		switch op {
<a id="L116"></a><span class="ln">   116</span>		case InstRune1, InstRuneAny, InstRuneAnyNotNL:
<a id="L117"></a><span class="ln">   117</span>			op = InstRune
<a id="L118"></a><span class="ln">   118</span>		}
<a id="L119"></a><span class="ln">   119</span>		return op
<a id="L120"></a><span class="ln">   120</span>	}
<a id="L121"></a><span class="ln">   121</span>	
<a id="L122"></a><span class="ln">   122</span>	<span class="comment">// Prefix returns a literal string that all matches for the</span>
<a id="L123"></a><span class="ln">   123</span>	<span class="comment">// regexp must start with.  Complete is true if the prefix</span>
<a id="L124"></a><span class="ln">   124</span>	<span class="comment">// is the entire match.</span>
<a id="L125"></a><span class="ln">   125</span>	func (p *Prog) Prefix() (prefix string, complete bool) {
<a id="L126"></a><span class="ln">   126</span>		i := p.skipNop(uint32(p.Start))
<a id="L127"></a><span class="ln">   127</span>	
<a id="L128"></a><span class="ln">   128</span>		<span class="comment">// Avoid allocation of buffer if prefix is empty.</span>
<a id="L129"></a><span class="ln">   129</span>		if i.op() != InstRune || len(i.Rune) != 1 {
<a id="L130"></a><span class="ln">   130</span>			return &#34;&#34;, i.Op == InstMatch
<a id="L131"></a><span class="ln">   131</span>		}
<a id="L132"></a><span class="ln">   132</span>	
<a id="L133"></a><span class="ln">   133</span>		<span class="comment">// Have prefix; gather characters.</span>
<a id="L134"></a><span class="ln">   134</span>		var buf bytes.Buffer
<a id="L135"></a><span class="ln">   135</span>		for i.op() == InstRune &amp;&amp; len(i.Rune) == 1 &amp;&amp; Flags(i.Arg)&amp;FoldCase == 0 {
<a id="L136"></a><span class="ln">   136</span>			buf.WriteRune(i.Rune[0])
<a id="L137"></a><span class="ln">   137</span>			i = p.skipNop(i.Out)
<a id="L138"></a><span class="ln">   138</span>		}
<a id="L139"></a><span class="ln">   139</span>		return buf.String(), i.Op == InstMatch
<a id="L140"></a><span class="ln">   140</span>	}
<a id="L141"></a><span class="ln">   141</span>	
<a id="L142"></a><span class="ln">   142</span>	<span class="comment">// StartCond returns the leading empty-width conditions that must</span>
<a id="L143"></a><span class="ln">   143</span>	<span class="comment">// be true in any match.  It returns ^EmptyOp(0) if no matches are possible.</span>
<a id="L144"></a><span class="ln">   144</span>	func (p *Prog) StartCond() EmptyOp {
<a id="L145"></a><span class="ln">   145</span>		var flag EmptyOp
<a id="L146"></a><span class="ln">   146</span>		pc := uint32(p.Start)
<a id="L147"></a><span class="ln">   147</span>		i := &amp;p.Inst[pc]
<a id="L148"></a><span class="ln">   148</span>	Loop:
<a id="L149"></a><span class="ln">   149</span>		for {
<a id="L150"></a><span class="ln">   150</span>			switch i.Op {
<a id="L151"></a><span class="ln">   151</span>			case InstEmptyWidth:
<a id="L152"></a><span class="ln">   152</span>				flag |= EmptyOp(i.Arg)
<a id="L153"></a><span class="ln">   153</span>			case InstFail:
<a id="L154"></a><span class="ln">   154</span>				return ^EmptyOp(0)
<a id="L155"></a><span class="ln">   155</span>			case InstCapture, InstNop:
<a id="L156"></a><span class="ln">   156</span>				<span class="comment">// skip</span>
<a id="L157"></a><span class="ln">   157</span>			default:
<a id="L158"></a><span class="ln">   158</span>				break Loop
<a id="L159"></a><span class="ln">   159</span>			}
<a id="L160"></a><span class="ln">   160</span>			pc = i.Out
<a id="L161"></a><span class="ln">   161</span>			i = &amp;p.Inst[pc]
<a id="L162"></a><span class="ln">   162</span>		}
<a id="L163"></a><span class="ln">   163</span>		return flag
<a id="L164"></a><span class="ln">   164</span>	}
<a id="L165"></a><span class="ln">   165</span>	
<a id="L166"></a><span class="ln">   166</span>	<span class="comment">// MatchRune returns true if the instruction matches (and consumes) r.</span>
<a id="L167"></a><span class="ln">   167</span>	<span class="comment">// It should only be called when i.Op == InstRune.</span>
<a id="L168"></a><span class="ln">   168</span>	func (i *Inst) MatchRune(r rune) bool {
<a id="L169"></a><span class="ln">   169</span>		rune := i.Rune
<a id="L170"></a><span class="ln">   170</span>	
<a id="L171"></a><span class="ln">   171</span>		<span class="comment">// Special case: single-rune slice is from literal string, not char class.</span>
<a id="L172"></a><span class="ln">   172</span>		if len(rune) == 1 {
<a id="L173"></a><span class="ln">   173</span>			r0 := rune[0]
<a id="L174"></a><span class="ln">   174</span>			if r == r0 {
<a id="L175"></a><span class="ln">   175</span>				return true
<a id="L176"></a><span class="ln">   176</span>			}
<a id="L177"></a><span class="ln">   177</span>			if Flags(i.Arg)&amp;FoldCase != 0 {
<a id="L178"></a><span class="ln">   178</span>				for r1 := unicode.SimpleFold(r0); r1 != r0; r1 = unicode.SimpleFold(r1) {
<a id="L179"></a><span class="ln">   179</span>					if r == r1 {
<a id="L180"></a><span class="ln">   180</span>						return true
<a id="L181"></a><span class="ln">   181</span>					}
<a id="L182"></a><span class="ln">   182</span>				}
<a id="L183"></a><span class="ln">   183</span>			}
<a id="L184"></a><span class="ln">   184</span>			return false
<a id="L185"></a><span class="ln">   185</span>		}
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>		<span class="comment">// Peek at the first few pairs.</span>
<a id="L188"></a><span class="ln">   188</span>		<span class="comment">// Should handle ASCII well.</span>
<a id="L189"></a><span class="ln">   189</span>		for j := 0; j &lt; len(rune) &amp;&amp; j &lt;= 8; j += 2 {
<a id="L190"></a><span class="ln">   190</span>			if r &lt; rune[j] {
<a id="L191"></a><span class="ln">   191</span>				return false
<a id="L192"></a><span class="ln">   192</span>			}
<a id="L193"></a><span class="ln">   193</span>			if r &lt;= rune[j+1] {
<a id="L194"></a><span class="ln">   194</span>				return true
<a id="L195"></a><span class="ln">   195</span>			}
<a id="L196"></a><span class="ln">   196</span>		}
<a id="L197"></a><span class="ln">   197</span>	
<a id="L198"></a><span class="ln">   198</span>		<span class="comment">// Otherwise binary search.</span>
<a id="L199"></a><span class="ln">   199</span>		lo := 0
<a id="L200"></a><span class="ln">   200</span>		hi := len(rune) / 2
<a id="L201"></a><span class="ln">   201</span>		for lo &lt; hi {
<a id="L202"></a><span class="ln">   202</span>			m := lo + (hi-lo)/2
<a id="L203"></a><span class="ln">   203</span>			if c := rune[2*m]; c &lt;= r {
<a id="L204"></a><span class="ln">   204</span>				if r &lt;= rune[2*m+1] {
<a id="L205"></a><span class="ln">   205</span>					return true
<a id="L206"></a><span class="ln">   206</span>				}
<a id="L207"></a><span class="ln">   207</span>				lo = m + 1
<a id="L208"></a><span class="ln">   208</span>			} else {
<a id="L209"></a><span class="ln">   209</span>				hi = m
<a id="L210"></a><span class="ln">   210</span>			}
<a id="L211"></a><span class="ln">   211</span>		}
<a id="L212"></a><span class="ln">   212</span>		return false
<a id="L213"></a><span class="ln">   213</span>	}
<a id="L214"></a><span class="ln">   214</span>	
<a id="L215"></a><span class="ln">   215</span>	<span class="comment">// As per re2&#39;s Prog::IsWordChar. Determines whether rune is an ASCII word char.</span>
<a id="L216"></a><span class="ln">   216</span>	<span class="comment">// Since we act on runes, it would be easy to support Unicode here.</span>
<a id="L217"></a><span class="ln">   217</span>	func wordRune(r rune) bool {
<a id="L218"></a><span class="ln">   218</span>		return r == &#39;_&#39; ||
<a id="L219"></a><span class="ln">   219</span>			(&#39;A&#39; &lt;= r &amp;&amp; r &lt;= &#39;Z&#39;) ||
<a id="L220"></a><span class="ln">   220</span>			(&#39;a&#39; &lt;= r &amp;&amp; r &lt;= &#39;z&#39;) ||
<a id="L221"></a><span class="ln">   221</span>			(&#39;0&#39; &lt;= r &amp;&amp; r &lt;= &#39;9&#39;)
<a id="L222"></a><span class="ln">   222</span>	}
<a id="L223"></a><span class="ln">   223</span>	
<a id="L224"></a><span class="ln">   224</span>	<span class="comment">// MatchEmptyWidth returns true if the instruction matches</span>
<a id="L225"></a><span class="ln">   225</span>	<span class="comment">// an empty string between the runes before and after.</span>
<a id="L226"></a><span class="ln">   226</span>	<span class="comment">// It should only be called when i.Op == InstEmptyWidth.</span>
<a id="L227"></a><span class="ln">   227</span>	func (i *Inst) MatchEmptyWidth(before rune, after rune) bool {
<a id="L228"></a><span class="ln">   228</span>		switch EmptyOp(i.Arg) {
<a id="L229"></a><span class="ln">   229</span>		case EmptyBeginLine:
<a id="L230"></a><span class="ln">   230</span>			return before == &#39;\n&#39; || before == -1
<a id="L231"></a><span class="ln">   231</span>		case EmptyEndLine:
<a id="L232"></a><span class="ln">   232</span>			return after == &#39;\n&#39; || after == -1
<a id="L233"></a><span class="ln">   233</span>		case EmptyBeginText:
<a id="L234"></a><span class="ln">   234</span>			return before == -1
<a id="L235"></a><span class="ln">   235</span>		case EmptyEndText:
<a id="L236"></a><span class="ln">   236</span>			return after == -1
<a id="L237"></a><span class="ln">   237</span>		case EmptyWordBoundary:
<a id="L238"></a><span class="ln">   238</span>			return wordRune(before) != wordRune(after)
<a id="L239"></a><span class="ln">   239</span>		case EmptyNoWordBoundary:
<a id="L240"></a><span class="ln">   240</span>			return wordRune(before) == wordRune(after)
<a id="L241"></a><span class="ln">   241</span>		}
<a id="L242"></a><span class="ln">   242</span>		panic(&#34;unknown empty width arg&#34;)
<a id="L243"></a><span class="ln">   243</span>	}
<a id="L244"></a><span class="ln">   244</span>	
<a id="L245"></a><span class="ln">   245</span>	func (i *Inst) String() string {
<a id="L246"></a><span class="ln">   246</span>		var b bytes.Buffer
<a id="L247"></a><span class="ln">   247</span>		dumpInst(&amp;b, i)
<a id="L248"></a><span class="ln">   248</span>		return b.String()
<a id="L249"></a><span class="ln">   249</span>	}
<a id="L250"></a><span class="ln">   250</span>	
<a id="L251"></a><span class="ln">   251</span>	func bw(b *bytes.Buffer, args ...string) {
<a id="L252"></a><span class="ln">   252</span>		for _, s := range args {
<a id="L253"></a><span class="ln">   253</span>			b.WriteString(s)
<a id="L254"></a><span class="ln">   254</span>		}
<a id="L255"></a><span class="ln">   255</span>	}
<a id="L256"></a><span class="ln">   256</span>	
<a id="L257"></a><span class="ln">   257</span>	func dumpProg(b *bytes.Buffer, p *Prog) {
<a id="L258"></a><span class="ln">   258</span>		for j := range p.Inst {
<a id="L259"></a><span class="ln">   259</span>			i := &amp;p.Inst[j]
<a id="L260"></a><span class="ln">   260</span>			pc := strconv.Itoa(j)
<a id="L261"></a><span class="ln">   261</span>			if len(pc) &lt; 3 {
<a id="L262"></a><span class="ln">   262</span>				b.WriteString(&#34;   &#34;[len(pc):])
<a id="L263"></a><span class="ln">   263</span>			}
<a id="L264"></a><span class="ln">   264</span>			if j == p.Start {
<a id="L265"></a><span class="ln">   265</span>				pc += &#34;*&#34;
<a id="L266"></a><span class="ln">   266</span>			}
<a id="L267"></a><span class="ln">   267</span>			bw(b, pc, &#34;\t&#34;)
<a id="L268"></a><span class="ln">   268</span>			dumpInst(b, i)
<a id="L269"></a><span class="ln">   269</span>			bw(b, &#34;\n&#34;)
<a id="L270"></a><span class="ln">   270</span>		}
<a id="L271"></a><span class="ln">   271</span>	}
<a id="L272"></a><span class="ln">   272</span>	
<a id="L273"></a><span class="ln">   273</span>	func u32(i uint32) string {
<a id="L274"></a><span class="ln">   274</span>		return strconv.FormatUint(uint64(i), 10)
<a id="L275"></a><span class="ln">   275</span>	}
<a id="L276"></a><span class="ln">   276</span>	
<a id="L277"></a><span class="ln">   277</span>	func dumpInst(b *bytes.Buffer, i *Inst) {
<a id="L278"></a><span class="ln">   278</span>		switch i.Op {
<a id="L279"></a><span class="ln">   279</span>		case InstAlt:
<a id="L280"></a><span class="ln">   280</span>			bw(b, &#34;alt -&gt; &#34;, u32(i.Out), &#34;, &#34;, u32(i.Arg))
<a id="L281"></a><span class="ln">   281</span>		case InstAltMatch:
<a id="L282"></a><span class="ln">   282</span>			bw(b, &#34;altmatch -&gt; &#34;, u32(i.Out), &#34;, &#34;, u32(i.Arg))
<a id="L283"></a><span class="ln">   283</span>		case InstCapture:
<a id="L284"></a><span class="ln">   284</span>			bw(b, &#34;cap &#34;, u32(i.Arg), &#34; -&gt; &#34;, u32(i.Out))
<a id="L285"></a><span class="ln">   285</span>		case InstEmptyWidth:
<a id="L286"></a><span class="ln">   286</span>			bw(b, &#34;empty &#34;, u32(i.Arg), &#34; -&gt; &#34;, u32(i.Out))
<a id="L287"></a><span class="ln">   287</span>		case InstMatch:
<a id="L288"></a><span class="ln">   288</span>			bw(b, &#34;match&#34;)
<a id="L289"></a><span class="ln">   289</span>		case InstFail:
<a id="L290"></a><span class="ln">   290</span>			bw(b, &#34;fail&#34;)
<a id="L291"></a><span class="ln">   291</span>		case InstNop:
<a id="L292"></a><span class="ln">   292</span>			bw(b, &#34;nop -&gt; &#34;, u32(i.Out))
<a id="L293"></a><span class="ln">   293</span>		case InstRune:
<a id="L294"></a><span class="ln">   294</span>			if i.Rune == nil {
<a id="L295"></a><span class="ln">   295</span>				<span class="comment">// shouldn&#39;t happen</span>
<a id="L296"></a><span class="ln">   296</span>				bw(b, &#34;rune &lt;nil&gt;&#34;)
<a id="L297"></a><span class="ln">   297</span>			}
<a id="L298"></a><span class="ln">   298</span>			bw(b, &#34;rune &#34;, strconv.QuoteToASCII(string(i.Rune)))
<a id="L299"></a><span class="ln">   299</span>			if Flags(i.Arg)&amp;FoldCase != 0 {
<a id="L300"></a><span class="ln">   300</span>				bw(b, &#34;/i&#34;)
<a id="L301"></a><span class="ln">   301</span>			}
<a id="L302"></a><span class="ln">   302</span>			bw(b, &#34; -&gt; &#34;, u32(i.Out))
<a id="L303"></a><span class="ln">   303</span>		case InstRune1:
<a id="L304"></a><span class="ln">   304</span>			bw(b, &#34;rune1 &#34;, strconv.QuoteToASCII(string(i.Rune)), &#34; -&gt; &#34;, u32(i.Out))
<a id="L305"></a><span class="ln">   305</span>		case InstRuneAny:
<a id="L306"></a><span class="ln">   306</span>			bw(b, &#34;any -&gt; &#34;, u32(i.Out))
<a id="L307"></a><span class="ln">   307</span>		case InstRuneAnyNotNL:
<a id="L308"></a><span class="ln">   308</span>			bw(b, &#34;anynotnl -&gt; &#34;, u32(i.Out))
<a id="L309"></a><span class="ln">   309</span>		}
<a id="L310"></a><span class="ln">   310</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

