<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/regexp/syntax/parse.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/regexp/syntax/parse.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package syntax parses regular expressions into parse trees and compiles</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// parse trees into programs. Most clients of regular expressions will use</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// the facilities of package regexp (such as Compile and Match) instead of</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// this package.</span>
<a id="L9"></a><span class="ln">     9</span>	package syntax
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	import (
<a id="L12"></a><span class="ln">    12</span>		&#34;sort&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;strings&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;unicode&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;unicode/utf8&#34;
<a id="L16"></a><span class="ln">    16</span>	)
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// An Error describes a failure to parse a regular expression</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// and gives the offending expression.</span>
<a id="L20"></a><span class="ln">    20</span>	type Error struct {
<a id="L21"></a><span class="ln">    21</span>		Code ErrorCode
<a id="L22"></a><span class="ln">    22</span>		Expr string
<a id="L23"></a><span class="ln">    23</span>	}
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	func (e *Error) Error() string {
<a id="L26"></a><span class="ln">    26</span>		return &#34;error parsing regexp: &#34; + e.Code.String() + &#34;: `&#34; + e.Expr + &#34;`&#34;
<a id="L27"></a><span class="ln">    27</span>	}
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// An ErrorCode describes a failure to parse a regular expression.</span>
<a id="L30"></a><span class="ln">    30</span>	type ErrorCode string
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>	const (
<a id="L33"></a><span class="ln">    33</span>		<span class="comment">// Unexpected error</span>
<a id="L34"></a><span class="ln">    34</span>		ErrInternalError ErrorCode = &#34;regexp/syntax: internal error&#34;
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>		<span class="comment">// Parse errors</span>
<a id="L37"></a><span class="ln">    37</span>		ErrInvalidCharClass      ErrorCode = &#34;invalid character class&#34;
<a id="L38"></a><span class="ln">    38</span>		ErrInvalidCharRange      ErrorCode = &#34;invalid character class range&#34;
<a id="L39"></a><span class="ln">    39</span>		ErrInvalidEscape         ErrorCode = &#34;invalid escape sequence&#34;
<a id="L40"></a><span class="ln">    40</span>		ErrInvalidNamedCapture   ErrorCode = &#34;invalid named capture&#34;
<a id="L41"></a><span class="ln">    41</span>		ErrInvalidPerlOp         ErrorCode = &#34;invalid or unsupported Perl syntax&#34;
<a id="L42"></a><span class="ln">    42</span>		ErrInvalidRepeatOp       ErrorCode = &#34;invalid nested repetition operator&#34;
<a id="L43"></a><span class="ln">    43</span>		ErrInvalidRepeatSize     ErrorCode = &#34;invalid repeat count&#34;
<a id="L44"></a><span class="ln">    44</span>		ErrInvalidUTF8           ErrorCode = &#34;invalid UTF-8&#34;
<a id="L45"></a><span class="ln">    45</span>		ErrMissingBracket        ErrorCode = &#34;missing closing ]&#34;
<a id="L46"></a><span class="ln">    46</span>		ErrMissingParen          ErrorCode = &#34;missing closing )&#34;
<a id="L47"></a><span class="ln">    47</span>		ErrMissingRepeatArgument ErrorCode = &#34;missing argument to repetition operator&#34;
<a id="L48"></a><span class="ln">    48</span>		ErrTrailingBackslash     ErrorCode = &#34;trailing backslash at end of expression&#34;
<a id="L49"></a><span class="ln">    49</span>	)
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>	func (e ErrorCode) String() string {
<a id="L52"></a><span class="ln">    52</span>		return string(e)
<a id="L53"></a><span class="ln">    53</span>	}
<a id="L54"></a><span class="ln">    54</span>	
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// Flags control the behavior of the parser and record information about regexp context.</span>
<a id="L56"></a><span class="ln">    56</span>	type Flags uint16
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>	const (
<a id="L59"></a><span class="ln">    59</span>		FoldCase      Flags = 1 &lt;&lt; iota <span class="comment">// case-insensitive match</span>
<a id="L60"></a><span class="ln">    60</span>		Literal                         <span class="comment">// treat pattern as literal string</span>
<a id="L61"></a><span class="ln">    61</span>		ClassNL                         <span class="comment">// allow character classes like [^a-z] and [[:space:]] to match newline</span>
<a id="L62"></a><span class="ln">    62</span>		DotNL                           <span class="comment">// allow . to match newline</span>
<a id="L63"></a><span class="ln">    63</span>		OneLine                         <span class="comment">// treat ^ and $ as only matching at beginning and end of text</span>
<a id="L64"></a><span class="ln">    64</span>		NonGreedy                       <span class="comment">// make repetition operators default to non-greedy</span>
<a id="L65"></a><span class="ln">    65</span>		PerlX                           <span class="comment">// allow Perl extensions</span>
<a id="L66"></a><span class="ln">    66</span>		UnicodeGroups                   <span class="comment">// allow \p{Han}, \P{Han} for Unicode group and negation</span>
<a id="L67"></a><span class="ln">    67</span>		WasDollar                       <span class="comment">// regexp OpEndText was $, not \z</span>
<a id="L68"></a><span class="ln">    68</span>		Simple                          <span class="comment">// regexp contains no counted repetition</span>
<a id="L69"></a><span class="ln">    69</span>	
<a id="L70"></a><span class="ln">    70</span>		MatchNL = ClassNL | DotNL
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>		Perl        = ClassNL | OneLine | PerlX | UnicodeGroups <span class="comment">// as close to Perl as possible</span>
<a id="L73"></a><span class="ln">    73</span>		POSIX Flags = 0                                         <span class="comment">// POSIX syntax</span>
<a id="L74"></a><span class="ln">    74</span>	)
<a id="L75"></a><span class="ln">    75</span>	
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">// Pseudo-ops for parsing stack.</span>
<a id="L77"></a><span class="ln">    77</span>	const (
<a id="L78"></a><span class="ln">    78</span>		opLeftParen = opPseudo + iota
<a id="L79"></a><span class="ln">    79</span>		opVerticalBar
<a id="L80"></a><span class="ln">    80</span>	)
<a id="L81"></a><span class="ln">    81</span>	
<a id="L82"></a><span class="ln">    82</span>	type parser struct {
<a id="L83"></a><span class="ln">    83</span>		flags       Flags     <span class="comment">// parse mode flags</span>
<a id="L84"></a><span class="ln">    84</span>		stack       []*Regexp <span class="comment">// stack of parsed expressions</span>
<a id="L85"></a><span class="ln">    85</span>		free        *Regexp
<a id="L86"></a><span class="ln">    86</span>		numCap      int <span class="comment">// number of capturing groups seen</span>
<a id="L87"></a><span class="ln">    87</span>		wholeRegexp string
<a id="L88"></a><span class="ln">    88</span>		tmpClass    []rune <span class="comment">// temporary char class work space</span>
<a id="L89"></a><span class="ln">    89</span>	}
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>	func (p *parser) newRegexp(op Op) *Regexp {
<a id="L92"></a><span class="ln">    92</span>		re := p.free
<a id="L93"></a><span class="ln">    93</span>		if re != nil {
<a id="L94"></a><span class="ln">    94</span>			p.free = re.Sub0[0]
<a id="L95"></a><span class="ln">    95</span>			*re = Regexp{}
<a id="L96"></a><span class="ln">    96</span>		} else {
<a id="L97"></a><span class="ln">    97</span>			re = new(Regexp)
<a id="L98"></a><span class="ln">    98</span>		}
<a id="L99"></a><span class="ln">    99</span>		re.Op = op
<a id="L100"></a><span class="ln">   100</span>		return re
<a id="L101"></a><span class="ln">   101</span>	}
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>	func (p *parser) reuse(re *Regexp) {
<a id="L104"></a><span class="ln">   104</span>		re.Sub0[0] = p.free
<a id="L105"></a><span class="ln">   105</span>		p.free = re
<a id="L106"></a><span class="ln">   106</span>	}
<a id="L107"></a><span class="ln">   107</span>	
<a id="L108"></a><span class="ln">   108</span>	<span class="comment">// Parse stack manipulation.</span>
<a id="L109"></a><span class="ln">   109</span>	
<a id="L110"></a><span class="ln">   110</span>	<span class="comment">// push pushes the regexp re onto the parse stack and returns the regexp.</span>
<a id="L111"></a><span class="ln">   111</span>	func (p *parser) push(re *Regexp) *Regexp {
<a id="L112"></a><span class="ln">   112</span>		if re.Op == OpCharClass &amp;&amp; len(re.Rune) == 2 &amp;&amp; re.Rune[0] == re.Rune[1] {
<a id="L113"></a><span class="ln">   113</span>			<span class="comment">// Single rune.</span>
<a id="L114"></a><span class="ln">   114</span>			if p.maybeConcat(re.Rune[0], p.flags&amp;^FoldCase) {
<a id="L115"></a><span class="ln">   115</span>				return nil
<a id="L116"></a><span class="ln">   116</span>			}
<a id="L117"></a><span class="ln">   117</span>			re.Op = OpLiteral
<a id="L118"></a><span class="ln">   118</span>			re.Rune = re.Rune[:1]
<a id="L119"></a><span class="ln">   119</span>			re.Flags = p.flags &amp;^ FoldCase
<a id="L120"></a><span class="ln">   120</span>		} else if re.Op == OpCharClass &amp;&amp; len(re.Rune) == 4 &amp;&amp;
<a id="L121"></a><span class="ln">   121</span>			re.Rune[0] == re.Rune[1] &amp;&amp; re.Rune[2] == re.Rune[3] &amp;&amp;
<a id="L122"></a><span class="ln">   122</span>			unicode.SimpleFold(re.Rune[0]) == re.Rune[2] &amp;&amp;
<a id="L123"></a><span class="ln">   123</span>			unicode.SimpleFold(re.Rune[2]) == re.Rune[0] ||
<a id="L124"></a><span class="ln">   124</span>			re.Op == OpCharClass &amp;&amp; len(re.Rune) == 2 &amp;&amp;
<a id="L125"></a><span class="ln">   125</span>				re.Rune[0]+1 == re.Rune[1] &amp;&amp;
<a id="L126"></a><span class="ln">   126</span>				unicode.SimpleFold(re.Rune[0]) == re.Rune[1] &amp;&amp;
<a id="L127"></a><span class="ln">   127</span>				unicode.SimpleFold(re.Rune[1]) == re.Rune[0] {
<a id="L128"></a><span class="ln">   128</span>			<span class="comment">// Case-insensitive rune like [Aa] or [Δδ].</span>
<a id="L129"></a><span class="ln">   129</span>			if p.maybeConcat(re.Rune[0], p.flags|FoldCase) {
<a id="L130"></a><span class="ln">   130</span>				return nil
<a id="L131"></a><span class="ln">   131</span>			}
<a id="L132"></a><span class="ln">   132</span>	
<a id="L133"></a><span class="ln">   133</span>			<span class="comment">// Rewrite as (case-insensitive) literal.</span>
<a id="L134"></a><span class="ln">   134</span>			re.Op = OpLiteral
<a id="L135"></a><span class="ln">   135</span>			re.Rune = re.Rune[:1]
<a id="L136"></a><span class="ln">   136</span>			re.Flags = p.flags | FoldCase
<a id="L137"></a><span class="ln">   137</span>		} else {
<a id="L138"></a><span class="ln">   138</span>			<span class="comment">// Incremental concatenation.</span>
<a id="L139"></a><span class="ln">   139</span>			p.maybeConcat(-1, 0)
<a id="L140"></a><span class="ln">   140</span>		}
<a id="L141"></a><span class="ln">   141</span>	
<a id="L142"></a><span class="ln">   142</span>		p.stack = append(p.stack, re)
<a id="L143"></a><span class="ln">   143</span>		return re
<a id="L144"></a><span class="ln">   144</span>	}
<a id="L145"></a><span class="ln">   145</span>	
<a id="L146"></a><span class="ln">   146</span>	<span class="comment">// maybeConcat implements incremental concatenation</span>
<a id="L147"></a><span class="ln">   147</span>	<span class="comment">// of literal runes into string nodes.  The parser calls this</span>
<a id="L148"></a><span class="ln">   148</span>	<span class="comment">// before each push, so only the top fragment of the stack</span>
<a id="L149"></a><span class="ln">   149</span>	<span class="comment">// might need processing.  Since this is called before a push,</span>
<a id="L150"></a><span class="ln">   150</span>	<span class="comment">// the topmost literal is no longer subject to operators like *</span>
<a id="L151"></a><span class="ln">   151</span>	<span class="comment">// (Otherwise ab* would turn into (ab)*.)</span>
<a id="L152"></a><span class="ln">   152</span>	<span class="comment">// If r &gt;= 0 and there&#39;s a node left over, maybeConcat uses it</span>
<a id="L153"></a><span class="ln">   153</span>	<span class="comment">// to push r with the given flags.</span>
<a id="L154"></a><span class="ln">   154</span>	<span class="comment">// maybeConcat reports whether r was pushed.</span>
<a id="L155"></a><span class="ln">   155</span>	func (p *parser) maybeConcat(r rune, flags Flags) bool {
<a id="L156"></a><span class="ln">   156</span>		n := len(p.stack)
<a id="L157"></a><span class="ln">   157</span>		if n &lt; 2 {
<a id="L158"></a><span class="ln">   158</span>			return false
<a id="L159"></a><span class="ln">   159</span>		}
<a id="L160"></a><span class="ln">   160</span>	
<a id="L161"></a><span class="ln">   161</span>		re1 := p.stack[n-1]
<a id="L162"></a><span class="ln">   162</span>		re2 := p.stack[n-2]
<a id="L163"></a><span class="ln">   163</span>		if re1.Op != OpLiteral || re2.Op != OpLiteral || re1.Flags&amp;FoldCase != re2.Flags&amp;FoldCase {
<a id="L164"></a><span class="ln">   164</span>			return false
<a id="L165"></a><span class="ln">   165</span>		}
<a id="L166"></a><span class="ln">   166</span>	
<a id="L167"></a><span class="ln">   167</span>		<span class="comment">// Push re1 into re2.</span>
<a id="L168"></a><span class="ln">   168</span>		re2.Rune = append(re2.Rune, re1.Rune...)
<a id="L169"></a><span class="ln">   169</span>	
<a id="L170"></a><span class="ln">   170</span>		<span class="comment">// Reuse re1 if possible.</span>
<a id="L171"></a><span class="ln">   171</span>		if r &gt;= 0 {
<a id="L172"></a><span class="ln">   172</span>			re1.Rune = re1.Rune0[:1]
<a id="L173"></a><span class="ln">   173</span>			re1.Rune[0] = r
<a id="L174"></a><span class="ln">   174</span>			re1.Flags = flags
<a id="L175"></a><span class="ln">   175</span>			return true
<a id="L176"></a><span class="ln">   176</span>		}
<a id="L177"></a><span class="ln">   177</span>	
<a id="L178"></a><span class="ln">   178</span>		p.stack = p.stack[:n-1]
<a id="L179"></a><span class="ln">   179</span>		p.reuse(re1)
<a id="L180"></a><span class="ln">   180</span>		return false <span class="comment">// did not push r</span>
<a id="L181"></a><span class="ln">   181</span>	}
<a id="L182"></a><span class="ln">   182</span>	
<a id="L183"></a><span class="ln">   183</span>	<span class="comment">// newLiteral returns a new OpLiteral Regexp with the given flags</span>
<a id="L184"></a><span class="ln">   184</span>	func (p *parser) newLiteral(r rune, flags Flags) *Regexp {
<a id="L185"></a><span class="ln">   185</span>		re := p.newRegexp(OpLiteral)
<a id="L186"></a><span class="ln">   186</span>		re.Flags = flags
<a id="L187"></a><span class="ln">   187</span>		if flags&amp;FoldCase != 0 {
<a id="L188"></a><span class="ln">   188</span>			r = minFoldRune(r)
<a id="L189"></a><span class="ln">   189</span>		}
<a id="L190"></a><span class="ln">   190</span>		re.Rune0[0] = r
<a id="L191"></a><span class="ln">   191</span>		re.Rune = re.Rune0[:1]
<a id="L192"></a><span class="ln">   192</span>		return re
<a id="L193"></a><span class="ln">   193</span>	}
<a id="L194"></a><span class="ln">   194</span>	
<a id="L195"></a><span class="ln">   195</span>	<span class="comment">// minFoldRune returns the minimum rune fold-equivalent to r.</span>
<a id="L196"></a><span class="ln">   196</span>	func minFoldRune(r rune) rune {
<a id="L197"></a><span class="ln">   197</span>		if r &lt; minFold || r &gt; maxFold {
<a id="L198"></a><span class="ln">   198</span>			return r
<a id="L199"></a><span class="ln">   199</span>		}
<a id="L200"></a><span class="ln">   200</span>		min := r
<a id="L201"></a><span class="ln">   201</span>		r0 := r
<a id="L202"></a><span class="ln">   202</span>		for r = unicode.SimpleFold(r); r != r0; r = unicode.SimpleFold(r) {
<a id="L203"></a><span class="ln">   203</span>			if min &gt; r {
<a id="L204"></a><span class="ln">   204</span>				min = r
<a id="L205"></a><span class="ln">   205</span>			}
<a id="L206"></a><span class="ln">   206</span>		}
<a id="L207"></a><span class="ln">   207</span>		return min
<a id="L208"></a><span class="ln">   208</span>	}
<a id="L209"></a><span class="ln">   209</span>	
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// literal pushes a literal regexp for the rune r on the stack</span>
<a id="L211"></a><span class="ln">   211</span>	<span class="comment">// and returns that regexp.</span>
<a id="L212"></a><span class="ln">   212</span>	func (p *parser) literal(r rune) {
<a id="L213"></a><span class="ln">   213</span>		p.push(p.newLiteral(r, p.flags))
<a id="L214"></a><span class="ln">   214</span>	}
<a id="L215"></a><span class="ln">   215</span>	
<a id="L216"></a><span class="ln">   216</span>	<span class="comment">// op pushes a regexp with the given op onto the stack</span>
<a id="L217"></a><span class="ln">   217</span>	<span class="comment">// and returns that regexp.</span>
<a id="L218"></a><span class="ln">   218</span>	func (p *parser) op(op Op) *Regexp {
<a id="L219"></a><span class="ln">   219</span>		re := p.newRegexp(op)
<a id="L220"></a><span class="ln">   220</span>		re.Flags = p.flags
<a id="L221"></a><span class="ln">   221</span>		return p.push(re)
<a id="L222"></a><span class="ln">   222</span>	}
<a id="L223"></a><span class="ln">   223</span>	
<a id="L224"></a><span class="ln">   224</span>	<span class="comment">// repeat replaces the top stack element with itself repeated according to op, min, max.</span>
<a id="L225"></a><span class="ln">   225</span>	<span class="comment">// before is the regexp suffix starting at the repetition operator.</span>
<a id="L226"></a><span class="ln">   226</span>	<span class="comment">// after is the regexp suffix following after the repetition operator.</span>
<a id="L227"></a><span class="ln">   227</span>	<span class="comment">// repeat returns an updated &#39;after&#39; and an error, if any.</span>
<a id="L228"></a><span class="ln">   228</span>	func (p *parser) repeat(op Op, min, max int, before, after, lastRepeat string) (string, error) {
<a id="L229"></a><span class="ln">   229</span>		flags := p.flags
<a id="L230"></a><span class="ln">   230</span>		if p.flags&amp;PerlX != 0 {
<a id="L231"></a><span class="ln">   231</span>			if len(after) &gt; 0 &amp;&amp; after[0] == &#39;?&#39; {
<a id="L232"></a><span class="ln">   232</span>				after = after[1:]
<a id="L233"></a><span class="ln">   233</span>				flags ^= NonGreedy
<a id="L234"></a><span class="ln">   234</span>			}
<a id="L235"></a><span class="ln">   235</span>			if lastRepeat != &#34;&#34; {
<a id="L236"></a><span class="ln">   236</span>				<span class="comment">// In Perl it is not allowed to stack repetition operators:</span>
<a id="L237"></a><span class="ln">   237</span>				<span class="comment">// a** is a syntax error, not a doubled star, and a++ means</span>
<a id="L238"></a><span class="ln">   238</span>				<span class="comment">// something else entirely, which we don&#39;t support!</span>
<a id="L239"></a><span class="ln">   239</span>				return &#34;&#34;, &amp;Error{ErrInvalidRepeatOp, lastRepeat[:len(lastRepeat)-len(after)]}
<a id="L240"></a><span class="ln">   240</span>			}
<a id="L241"></a><span class="ln">   241</span>		}
<a id="L242"></a><span class="ln">   242</span>		n := len(p.stack)
<a id="L243"></a><span class="ln">   243</span>		if n == 0 {
<a id="L244"></a><span class="ln">   244</span>			return &#34;&#34;, &amp;Error{ErrMissingRepeatArgument, before[:len(before)-len(after)]}
<a id="L245"></a><span class="ln">   245</span>		}
<a id="L246"></a><span class="ln">   246</span>		sub := p.stack[n-1]
<a id="L247"></a><span class="ln">   247</span>		if sub.Op &gt;= opPseudo {
<a id="L248"></a><span class="ln">   248</span>			return &#34;&#34;, &amp;Error{ErrMissingRepeatArgument, before[:len(before)-len(after)]}
<a id="L249"></a><span class="ln">   249</span>		}
<a id="L250"></a><span class="ln">   250</span>		re := p.newRegexp(op)
<a id="L251"></a><span class="ln">   251</span>		re.Min = min
<a id="L252"></a><span class="ln">   252</span>		re.Max = max
<a id="L253"></a><span class="ln">   253</span>		re.Flags = flags
<a id="L254"></a><span class="ln">   254</span>		re.Sub = re.Sub0[:1]
<a id="L255"></a><span class="ln">   255</span>		re.Sub[0] = sub
<a id="L256"></a><span class="ln">   256</span>		p.stack[n-1] = re
<a id="L257"></a><span class="ln">   257</span>		return after, nil
<a id="L258"></a><span class="ln">   258</span>	}
<a id="L259"></a><span class="ln">   259</span>	
<a id="L260"></a><span class="ln">   260</span>	<span class="comment">// concat replaces the top of the stack (above the topmost &#39;|&#39; or &#39;(&#39;) with its concatenation.</span>
<a id="L261"></a><span class="ln">   261</span>	func (p *parser) concat() *Regexp {
<a id="L262"></a><span class="ln">   262</span>		p.maybeConcat(-1, 0)
<a id="L263"></a><span class="ln">   263</span>	
<a id="L264"></a><span class="ln">   264</span>		<span class="comment">// Scan down to find pseudo-operator | or (.</span>
<a id="L265"></a><span class="ln">   265</span>		i := len(p.stack)
<a id="L266"></a><span class="ln">   266</span>		for i &gt; 0 &amp;&amp; p.stack[i-1].Op &lt; opPseudo {
<a id="L267"></a><span class="ln">   267</span>			i--
<a id="L268"></a><span class="ln">   268</span>		}
<a id="L269"></a><span class="ln">   269</span>		subs := p.stack[i:]
<a id="L270"></a><span class="ln">   270</span>		p.stack = p.stack[:i]
<a id="L271"></a><span class="ln">   271</span>	
<a id="L272"></a><span class="ln">   272</span>		<span class="comment">// Empty concatenation is special case.</span>
<a id="L273"></a><span class="ln">   273</span>		if len(subs) == 0 {
<a id="L274"></a><span class="ln">   274</span>			return p.push(p.newRegexp(OpEmptyMatch))
<a id="L275"></a><span class="ln">   275</span>		}
<a id="L276"></a><span class="ln">   276</span>	
<a id="L277"></a><span class="ln">   277</span>		return p.push(p.collapse(subs, OpConcat))
<a id="L278"></a><span class="ln">   278</span>	}
<a id="L279"></a><span class="ln">   279</span>	
<a id="L280"></a><span class="ln">   280</span>	<span class="comment">// alternate replaces the top of the stack (above the topmost &#39;(&#39;) with its alternation.</span>
<a id="L281"></a><span class="ln">   281</span>	func (p *parser) alternate() *Regexp {
<a id="L282"></a><span class="ln">   282</span>		<span class="comment">// Scan down to find pseudo-operator (.</span>
<a id="L283"></a><span class="ln">   283</span>		<span class="comment">// There are no | above (.</span>
<a id="L284"></a><span class="ln">   284</span>		i := len(p.stack)
<a id="L285"></a><span class="ln">   285</span>		for i &gt; 0 &amp;&amp; p.stack[i-1].Op &lt; opPseudo {
<a id="L286"></a><span class="ln">   286</span>			i--
<a id="L287"></a><span class="ln">   287</span>		}
<a id="L288"></a><span class="ln">   288</span>		subs := p.stack[i:]
<a id="L289"></a><span class="ln">   289</span>		p.stack = p.stack[:i]
<a id="L290"></a><span class="ln">   290</span>	
<a id="L291"></a><span class="ln">   291</span>		<span class="comment">// Make sure top class is clean.</span>
<a id="L292"></a><span class="ln">   292</span>		<span class="comment">// All the others already are (see swapVerticalBar).</span>
<a id="L293"></a><span class="ln">   293</span>		if len(subs) &gt; 0 {
<a id="L294"></a><span class="ln">   294</span>			cleanAlt(subs[len(subs)-1])
<a id="L295"></a><span class="ln">   295</span>		}
<a id="L296"></a><span class="ln">   296</span>	
<a id="L297"></a><span class="ln">   297</span>		<span class="comment">// Empty alternate is special case</span>
<a id="L298"></a><span class="ln">   298</span>		<span class="comment">// (shouldn&#39;t happen but easy to handle).</span>
<a id="L299"></a><span class="ln">   299</span>		if len(subs) == 0 {
<a id="L300"></a><span class="ln">   300</span>			return p.push(p.newRegexp(OpNoMatch))
<a id="L301"></a><span class="ln">   301</span>		}
<a id="L302"></a><span class="ln">   302</span>	
<a id="L303"></a><span class="ln">   303</span>		return p.push(p.collapse(subs, OpAlternate))
<a id="L304"></a><span class="ln">   304</span>	}
<a id="L305"></a><span class="ln">   305</span>	
<a id="L306"></a><span class="ln">   306</span>	<span class="comment">// cleanAlt cleans re for eventual inclusion in an alternation.</span>
<a id="L307"></a><span class="ln">   307</span>	func cleanAlt(re *Regexp) {
<a id="L308"></a><span class="ln">   308</span>		switch re.Op {
<a id="L309"></a><span class="ln">   309</span>		case OpCharClass:
<a id="L310"></a><span class="ln">   310</span>			re.Rune = cleanClass(&amp;re.Rune)
<a id="L311"></a><span class="ln">   311</span>			if len(re.Rune) == 2 &amp;&amp; re.Rune[0] == 0 &amp;&amp; re.Rune[1] == unicode.MaxRune {
<a id="L312"></a><span class="ln">   312</span>				re.Rune = nil
<a id="L313"></a><span class="ln">   313</span>				re.Op = OpAnyChar
<a id="L314"></a><span class="ln">   314</span>				return
<a id="L315"></a><span class="ln">   315</span>			}
<a id="L316"></a><span class="ln">   316</span>			if len(re.Rune) == 4 &amp;&amp; re.Rune[0] == 0 &amp;&amp; re.Rune[1] == &#39;\n&#39;-1 &amp;&amp; re.Rune[2] == &#39;\n&#39;+1 &amp;&amp; re.Rune[3] == unicode.MaxRune {
<a id="L317"></a><span class="ln">   317</span>				re.Rune = nil
<a id="L318"></a><span class="ln">   318</span>				re.Op = OpAnyCharNotNL
<a id="L319"></a><span class="ln">   319</span>				return
<a id="L320"></a><span class="ln">   320</span>			}
<a id="L321"></a><span class="ln">   321</span>			if cap(re.Rune)-len(re.Rune) &gt; 100 {
<a id="L322"></a><span class="ln">   322</span>				<span class="comment">// re.Rune will not grow any more.</span>
<a id="L323"></a><span class="ln">   323</span>				<span class="comment">// Make a copy or inline to reclaim storage.</span>
<a id="L324"></a><span class="ln">   324</span>				re.Rune = append(re.Rune0[:0], re.Rune...)
<a id="L325"></a><span class="ln">   325</span>			}
<a id="L326"></a><span class="ln">   326</span>		}
<a id="L327"></a><span class="ln">   327</span>	}
<a id="L328"></a><span class="ln">   328</span>	
<a id="L329"></a><span class="ln">   329</span>	<span class="comment">// collapse returns the result of applying op to sub.</span>
<a id="L330"></a><span class="ln">   330</span>	<span class="comment">// If sub contains op nodes, they all get hoisted up</span>
<a id="L331"></a><span class="ln">   331</span>	<span class="comment">// so that there is never a concat of a concat or an</span>
<a id="L332"></a><span class="ln">   332</span>	<span class="comment">// alternate of an alternate.</span>
<a id="L333"></a><span class="ln">   333</span>	func (p *parser) collapse(subs []*Regexp, op Op) *Regexp {
<a id="L334"></a><span class="ln">   334</span>		if len(subs) == 1 {
<a id="L335"></a><span class="ln">   335</span>			return subs[0]
<a id="L336"></a><span class="ln">   336</span>		}
<a id="L337"></a><span class="ln">   337</span>		re := p.newRegexp(op)
<a id="L338"></a><span class="ln">   338</span>		re.Sub = re.Sub0[:0]
<a id="L339"></a><span class="ln">   339</span>		for _, sub := range subs {
<a id="L340"></a><span class="ln">   340</span>			if sub.Op == op {
<a id="L341"></a><span class="ln">   341</span>				re.Sub = append(re.Sub, sub.Sub...)
<a id="L342"></a><span class="ln">   342</span>				p.reuse(sub)
<a id="L343"></a><span class="ln">   343</span>			} else {
<a id="L344"></a><span class="ln">   344</span>				re.Sub = append(re.Sub, sub)
<a id="L345"></a><span class="ln">   345</span>			}
<a id="L346"></a><span class="ln">   346</span>		}
<a id="L347"></a><span class="ln">   347</span>		if op == OpAlternate {
<a id="L348"></a><span class="ln">   348</span>			re.Sub = p.factor(re.Sub, re.Flags)
<a id="L349"></a><span class="ln">   349</span>			if len(re.Sub) == 1 {
<a id="L350"></a><span class="ln">   350</span>				old := re
<a id="L351"></a><span class="ln">   351</span>				re = re.Sub[0]
<a id="L352"></a><span class="ln">   352</span>				p.reuse(old)
<a id="L353"></a><span class="ln">   353</span>			}
<a id="L354"></a><span class="ln">   354</span>		}
<a id="L355"></a><span class="ln">   355</span>		return re
<a id="L356"></a><span class="ln">   356</span>	}
<a id="L357"></a><span class="ln">   357</span>	
<a id="L358"></a><span class="ln">   358</span>	<span class="comment">// factor factors common prefixes from the alternation list sub.</span>
<a id="L359"></a><span class="ln">   359</span>	<span class="comment">// It returns a replacement list that reuses the same storage and</span>
<a id="L360"></a><span class="ln">   360</span>	<span class="comment">// frees (passes to p.reuse) any removed *Regexps.</span>
<a id="L361"></a><span class="ln">   361</span>	<span class="comment">//</span>
<a id="L362"></a><span class="ln">   362</span>	<span class="comment">// For example,</span>
<a id="L363"></a><span class="ln">   363</span>	<span class="comment">//     ABC|ABD|AEF|BCX|BCY</span>
<a id="L364"></a><span class="ln">   364</span>	<span class="comment">// simplifies by literal prefix extraction to</span>
<a id="L365"></a><span class="ln">   365</span>	<span class="comment">//     A(B(C|D)|EF)|BC(X|Y)</span>
<a id="L366"></a><span class="ln">   366</span>	<span class="comment">// which simplifies by character class introduction to</span>
<a id="L367"></a><span class="ln">   367</span>	<span class="comment">//     A(B[CD]|EF)|BC[XY]</span>
<a id="L368"></a><span class="ln">   368</span>	<span class="comment">//</span>
<a id="L369"></a><span class="ln">   369</span>	func (p *parser) factor(sub []*Regexp, flags Flags) []*Regexp {
<a id="L370"></a><span class="ln">   370</span>		if len(sub) &lt; 2 {
<a id="L371"></a><span class="ln">   371</span>			return sub
<a id="L372"></a><span class="ln">   372</span>		}
<a id="L373"></a><span class="ln">   373</span>	
<a id="L374"></a><span class="ln">   374</span>		<span class="comment">// Round 1: Factor out common literal prefixes.</span>
<a id="L375"></a><span class="ln">   375</span>		var str []rune
<a id="L376"></a><span class="ln">   376</span>		var strflags Flags
<a id="L377"></a><span class="ln">   377</span>		start := 0
<a id="L378"></a><span class="ln">   378</span>		out := sub[:0]
<a id="L379"></a><span class="ln">   379</span>		for i := 0; i &lt;= len(sub); i++ {
<a id="L380"></a><span class="ln">   380</span>			<span class="comment">// Invariant: the Regexps that were in sub[0:start] have been</span>
<a id="L381"></a><span class="ln">   381</span>			<span class="comment">// used or marked for reuse, and the slice space has been reused</span>
<a id="L382"></a><span class="ln">   382</span>			<span class="comment">// for out (len(out) &lt;= start).</span>
<a id="L383"></a><span class="ln">   383</span>			<span class="comment">//</span>
<a id="L384"></a><span class="ln">   384</span>			<span class="comment">// Invariant: sub[start:i] consists of regexps that all begin</span>
<a id="L385"></a><span class="ln">   385</span>			<span class="comment">// with str as modified by strflags.</span>
<a id="L386"></a><span class="ln">   386</span>			var istr []rune
<a id="L387"></a><span class="ln">   387</span>			var iflags Flags
<a id="L388"></a><span class="ln">   388</span>			if i &lt; len(sub) {
<a id="L389"></a><span class="ln">   389</span>				istr, iflags = p.leadingString(sub[i])
<a id="L390"></a><span class="ln">   390</span>				if iflags == strflags {
<a id="L391"></a><span class="ln">   391</span>					same := 0
<a id="L392"></a><span class="ln">   392</span>					for same &lt; len(str) &amp;&amp; same &lt; len(istr) &amp;&amp; str[same] == istr[same] {
<a id="L393"></a><span class="ln">   393</span>						same++
<a id="L394"></a><span class="ln">   394</span>					}
<a id="L395"></a><span class="ln">   395</span>					if same &gt; 0 {
<a id="L396"></a><span class="ln">   396</span>						<span class="comment">// Matches at least one rune in current range.</span>
<a id="L397"></a><span class="ln">   397</span>						<span class="comment">// Keep going around.</span>
<a id="L398"></a><span class="ln">   398</span>						str = str[:same]
<a id="L399"></a><span class="ln">   399</span>						continue
<a id="L400"></a><span class="ln">   400</span>					}
<a id="L401"></a><span class="ln">   401</span>				}
<a id="L402"></a><span class="ln">   402</span>			}
<a id="L403"></a><span class="ln">   403</span>	
<a id="L404"></a><span class="ln">   404</span>			<span class="comment">// Found end of a run with common leading literal string:</span>
<a id="L405"></a><span class="ln">   405</span>			<span class="comment">// sub[start:i] all begin with str[0:len(str)], but sub[i]</span>
<a id="L406"></a><span class="ln">   406</span>			<span class="comment">// does not even begin with str[0].</span>
<a id="L407"></a><span class="ln">   407</span>			<span class="comment">//</span>
<a id="L408"></a><span class="ln">   408</span>			<span class="comment">// Factor out common string and append factored expression to out.</span>
<a id="L409"></a><span class="ln">   409</span>			if i == start {
<a id="L410"></a><span class="ln">   410</span>				<span class="comment">// Nothing to do - run of length 0.</span>
<a id="L411"></a><span class="ln">   411</span>			} else if i == start+1 {
<a id="L412"></a><span class="ln">   412</span>				<span class="comment">// Just one: don&#39;t bother factoring.</span>
<a id="L413"></a><span class="ln">   413</span>				out = append(out, sub[start])
<a id="L414"></a><span class="ln">   414</span>			} else {
<a id="L415"></a><span class="ln">   415</span>				<span class="comment">// Construct factored form: prefix(suffix1|suffix2|...)</span>
<a id="L416"></a><span class="ln">   416</span>				prefix := p.newRegexp(OpLiteral)
<a id="L417"></a><span class="ln">   417</span>				prefix.Flags = strflags
<a id="L418"></a><span class="ln">   418</span>				prefix.Rune = append(prefix.Rune[:0], str...)
<a id="L419"></a><span class="ln">   419</span>	
<a id="L420"></a><span class="ln">   420</span>				for j := start; j &lt; i; j++ {
<a id="L421"></a><span class="ln">   421</span>					sub[j] = p.removeLeadingString(sub[j], len(str))
<a id="L422"></a><span class="ln">   422</span>				}
<a id="L423"></a><span class="ln">   423</span>				suffix := p.collapse(sub[start:i], OpAlternate) <span class="comment">// recurse</span>
<a id="L424"></a><span class="ln">   424</span>	
<a id="L425"></a><span class="ln">   425</span>				re := p.newRegexp(OpConcat)
<a id="L426"></a><span class="ln">   426</span>				re.Sub = append(re.Sub[:0], prefix, suffix)
<a id="L427"></a><span class="ln">   427</span>				out = append(out, re)
<a id="L428"></a><span class="ln">   428</span>			}
<a id="L429"></a><span class="ln">   429</span>	
<a id="L430"></a><span class="ln">   430</span>			<span class="comment">// Prepare for next iteration.</span>
<a id="L431"></a><span class="ln">   431</span>			start = i
<a id="L432"></a><span class="ln">   432</span>			str = istr
<a id="L433"></a><span class="ln">   433</span>			strflags = iflags
<a id="L434"></a><span class="ln">   434</span>		}
<a id="L435"></a><span class="ln">   435</span>		sub = out
<a id="L436"></a><span class="ln">   436</span>	
<a id="L437"></a><span class="ln">   437</span>		<span class="comment">// Round 2: Factor out common complex prefixes,</span>
<a id="L438"></a><span class="ln">   438</span>		<span class="comment">// just the first piece of each concatenation,</span>
<a id="L439"></a><span class="ln">   439</span>		<span class="comment">// whatever it is.  This is good enough a lot of the time.</span>
<a id="L440"></a><span class="ln">   440</span>		start = 0
<a id="L441"></a><span class="ln">   441</span>		out = sub[:0]
<a id="L442"></a><span class="ln">   442</span>		var first *Regexp
<a id="L443"></a><span class="ln">   443</span>		for i := 0; i &lt;= len(sub); i++ {
<a id="L444"></a><span class="ln">   444</span>			<span class="comment">// Invariant: the Regexps that were in sub[0:start] have been</span>
<a id="L445"></a><span class="ln">   445</span>			<span class="comment">// used or marked for reuse, and the slice space has been reused</span>
<a id="L446"></a><span class="ln">   446</span>			<span class="comment">// for out (len(out) &lt;= start).</span>
<a id="L447"></a><span class="ln">   447</span>			<span class="comment">//</span>
<a id="L448"></a><span class="ln">   448</span>			<span class="comment">// Invariant: sub[start:i] consists of regexps that all begin with ifirst.</span>
<a id="L449"></a><span class="ln">   449</span>			var ifirst *Regexp
<a id="L450"></a><span class="ln">   450</span>			if i &lt; len(sub) {
<a id="L451"></a><span class="ln">   451</span>				ifirst = p.leadingRegexp(sub[i])
<a id="L452"></a><span class="ln">   452</span>				if first != nil &amp;&amp; first.Equal(ifirst) {
<a id="L453"></a><span class="ln">   453</span>					continue
<a id="L454"></a><span class="ln">   454</span>				}
<a id="L455"></a><span class="ln">   455</span>			}
<a id="L456"></a><span class="ln">   456</span>	
<a id="L457"></a><span class="ln">   457</span>			<span class="comment">// Found end of a run with common leading regexp:</span>
<a id="L458"></a><span class="ln">   458</span>			<span class="comment">// sub[start:i] all begin with first but sub[i] does not.</span>
<a id="L459"></a><span class="ln">   459</span>			<span class="comment">//</span>
<a id="L460"></a><span class="ln">   460</span>			<span class="comment">// Factor out common regexp and append factored expression to out.</span>
<a id="L461"></a><span class="ln">   461</span>			if i == start {
<a id="L462"></a><span class="ln">   462</span>				<span class="comment">// Nothing to do - run of length 0.</span>
<a id="L463"></a><span class="ln">   463</span>			} else if i == start+1 {
<a id="L464"></a><span class="ln">   464</span>				<span class="comment">// Just one: don&#39;t bother factoring.</span>
<a id="L465"></a><span class="ln">   465</span>				out = append(out, sub[start])
<a id="L466"></a><span class="ln">   466</span>			} else {
<a id="L467"></a><span class="ln">   467</span>				<span class="comment">// Construct factored form: prefix(suffix1|suffix2|...)</span>
<a id="L468"></a><span class="ln">   468</span>				prefix := first
<a id="L469"></a><span class="ln">   469</span>				for j := start; j &lt; i; j++ {
<a id="L470"></a><span class="ln">   470</span>					reuse := j != start <span class="comment">// prefix came from sub[start] </span>
<a id="L471"></a><span class="ln">   471</span>					sub[j] = p.removeLeadingRegexp(sub[j], reuse)
<a id="L472"></a><span class="ln">   472</span>				}
<a id="L473"></a><span class="ln">   473</span>				suffix := p.collapse(sub[start:i], OpAlternate) <span class="comment">// recurse</span>
<a id="L474"></a><span class="ln">   474</span>	
<a id="L475"></a><span class="ln">   475</span>				re := p.newRegexp(OpConcat)
<a id="L476"></a><span class="ln">   476</span>				re.Sub = append(re.Sub[:0], prefix, suffix)
<a id="L477"></a><span class="ln">   477</span>				out = append(out, re)
<a id="L478"></a><span class="ln">   478</span>			}
<a id="L479"></a><span class="ln">   479</span>	
<a id="L480"></a><span class="ln">   480</span>			<span class="comment">// Prepare for next iteration.</span>
<a id="L481"></a><span class="ln">   481</span>			start = i
<a id="L482"></a><span class="ln">   482</span>			first = ifirst
<a id="L483"></a><span class="ln">   483</span>		}
<a id="L484"></a><span class="ln">   484</span>		sub = out
<a id="L485"></a><span class="ln">   485</span>	
<a id="L486"></a><span class="ln">   486</span>		<span class="comment">// Round 3: Collapse runs of single literals into character classes.</span>
<a id="L487"></a><span class="ln">   487</span>		start = 0
<a id="L488"></a><span class="ln">   488</span>		out = sub[:0]
<a id="L489"></a><span class="ln">   489</span>		for i := 0; i &lt;= len(sub); i++ {
<a id="L490"></a><span class="ln">   490</span>			<span class="comment">// Invariant: the Regexps that were in sub[0:start] have been</span>
<a id="L491"></a><span class="ln">   491</span>			<span class="comment">// used or marked for reuse, and the slice space has been reused</span>
<a id="L492"></a><span class="ln">   492</span>			<span class="comment">// for out (len(out) &lt;= start).</span>
<a id="L493"></a><span class="ln">   493</span>			<span class="comment">//</span>
<a id="L494"></a><span class="ln">   494</span>			<span class="comment">// Invariant: sub[start:i] consists of regexps that are either</span>
<a id="L495"></a><span class="ln">   495</span>			<span class="comment">// literal runes or character classes.</span>
<a id="L496"></a><span class="ln">   496</span>			if i &lt; len(sub) &amp;&amp; isCharClass(sub[i]) {
<a id="L497"></a><span class="ln">   497</span>				continue
<a id="L498"></a><span class="ln">   498</span>			}
<a id="L499"></a><span class="ln">   499</span>	
<a id="L500"></a><span class="ln">   500</span>			<span class="comment">// sub[i] is not a char or char class;</span>
<a id="L501"></a><span class="ln">   501</span>			<span class="comment">// emit char class for sub[start:i]...</span>
<a id="L502"></a><span class="ln">   502</span>			if i == start {
<a id="L503"></a><span class="ln">   503</span>				<span class="comment">// Nothing to do - run of length 0.</span>
<a id="L504"></a><span class="ln">   504</span>			} else if i == start+1 {
<a id="L505"></a><span class="ln">   505</span>				out = append(out, sub[start])
<a id="L506"></a><span class="ln">   506</span>			} else {
<a id="L507"></a><span class="ln">   507</span>				<span class="comment">// Make new char class.</span>
<a id="L508"></a><span class="ln">   508</span>				<span class="comment">// Start with most complex regexp in sub[start].</span>
<a id="L509"></a><span class="ln">   509</span>				max := start
<a id="L510"></a><span class="ln">   510</span>				for j := start + 1; j &lt; i; j++ {
<a id="L511"></a><span class="ln">   511</span>					if sub[max].Op &lt; sub[j].Op || sub[max].Op == sub[j].Op &amp;&amp; len(sub[max].Rune) &lt; len(sub[j].Rune) {
<a id="L512"></a><span class="ln">   512</span>						max = j
<a id="L513"></a><span class="ln">   513</span>					}
<a id="L514"></a><span class="ln">   514</span>				}
<a id="L515"></a><span class="ln">   515</span>				sub[start], sub[max] = sub[max], sub[start]
<a id="L516"></a><span class="ln">   516</span>	
<a id="L517"></a><span class="ln">   517</span>				for j := start + 1; j &lt; i; j++ {
<a id="L518"></a><span class="ln">   518</span>					mergeCharClass(sub[start], sub[j])
<a id="L519"></a><span class="ln">   519</span>					p.reuse(sub[j])
<a id="L520"></a><span class="ln">   520</span>				}
<a id="L521"></a><span class="ln">   521</span>				cleanAlt(sub[start])
<a id="L522"></a><span class="ln">   522</span>				out = append(out, sub[start])
<a id="L523"></a><span class="ln">   523</span>			}
<a id="L524"></a><span class="ln">   524</span>	
<a id="L525"></a><span class="ln">   525</span>			<span class="comment">// ... and then emit sub[i].</span>
<a id="L526"></a><span class="ln">   526</span>			if i &lt; len(sub) {
<a id="L527"></a><span class="ln">   527</span>				out = append(out, sub[i])
<a id="L528"></a><span class="ln">   528</span>			}
<a id="L529"></a><span class="ln">   529</span>			start = i + 1
<a id="L530"></a><span class="ln">   530</span>		}
<a id="L531"></a><span class="ln">   531</span>		sub = out
<a id="L532"></a><span class="ln">   532</span>	
<a id="L533"></a><span class="ln">   533</span>		<span class="comment">// Round 4: Collapse runs of empty matches into a single empty match.</span>
<a id="L534"></a><span class="ln">   534</span>		start = 0
<a id="L535"></a><span class="ln">   535</span>		out = sub[:0]
<a id="L536"></a><span class="ln">   536</span>		for i := range sub {
<a id="L537"></a><span class="ln">   537</span>			if i+1 &lt; len(sub) &amp;&amp; sub[i].Op == OpEmptyMatch &amp;&amp; sub[i+1].Op == OpEmptyMatch {
<a id="L538"></a><span class="ln">   538</span>				continue
<a id="L539"></a><span class="ln">   539</span>			}
<a id="L540"></a><span class="ln">   540</span>			out = append(out, sub[i])
<a id="L541"></a><span class="ln">   541</span>		}
<a id="L542"></a><span class="ln">   542</span>		sub = out
<a id="L543"></a><span class="ln">   543</span>	
<a id="L544"></a><span class="ln">   544</span>		return sub
<a id="L545"></a><span class="ln">   545</span>	}
<a id="L546"></a><span class="ln">   546</span>	
<a id="L547"></a><span class="ln">   547</span>	<span class="comment">// leadingString returns the leading literal string that re begins with.</span>
<a id="L548"></a><span class="ln">   548</span>	<span class="comment">// The string refers to storage in re or its children.</span>
<a id="L549"></a><span class="ln">   549</span>	func (p *parser) leadingString(re *Regexp) ([]rune, Flags) {
<a id="L550"></a><span class="ln">   550</span>		if re.Op == OpConcat &amp;&amp; len(re.Sub) &gt; 0 {
<a id="L551"></a><span class="ln">   551</span>			re = re.Sub[0]
<a id="L552"></a><span class="ln">   552</span>		}
<a id="L553"></a><span class="ln">   553</span>		if re.Op != OpLiteral {
<a id="L554"></a><span class="ln">   554</span>			return nil, 0
<a id="L555"></a><span class="ln">   555</span>		}
<a id="L556"></a><span class="ln">   556</span>		return re.Rune, re.Flags &amp; FoldCase
<a id="L557"></a><span class="ln">   557</span>	}
<a id="L558"></a><span class="ln">   558</span>	
<a id="L559"></a><span class="ln">   559</span>	<span class="comment">// removeLeadingString removes the first n leading runes</span>
<a id="L560"></a><span class="ln">   560</span>	<span class="comment">// from the beginning of re.  It returns the replacement for re.</span>
<a id="L561"></a><span class="ln">   561</span>	func (p *parser) removeLeadingString(re *Regexp, n int) *Regexp {
<a id="L562"></a><span class="ln">   562</span>		if re.Op == OpConcat &amp;&amp; len(re.Sub) &gt; 0 {
<a id="L563"></a><span class="ln">   563</span>			<span class="comment">// Removing a leading string in a concatenation</span>
<a id="L564"></a><span class="ln">   564</span>			<span class="comment">// might simplify the concatenation.</span>
<a id="L565"></a><span class="ln">   565</span>			sub := re.Sub[0]
<a id="L566"></a><span class="ln">   566</span>			sub = p.removeLeadingString(sub, n)
<a id="L567"></a><span class="ln">   567</span>			re.Sub[0] = sub
<a id="L568"></a><span class="ln">   568</span>			if sub.Op == OpEmptyMatch {
<a id="L569"></a><span class="ln">   569</span>				p.reuse(sub)
<a id="L570"></a><span class="ln">   570</span>				switch len(re.Sub) {
<a id="L571"></a><span class="ln">   571</span>				case 0, 1:
<a id="L572"></a><span class="ln">   572</span>					<span class="comment">// Impossible but handle.</span>
<a id="L573"></a><span class="ln">   573</span>					re.Op = OpEmptyMatch
<a id="L574"></a><span class="ln">   574</span>					re.Sub = nil
<a id="L575"></a><span class="ln">   575</span>				case 2:
<a id="L576"></a><span class="ln">   576</span>					old := re
<a id="L577"></a><span class="ln">   577</span>					re = re.Sub[1]
<a id="L578"></a><span class="ln">   578</span>					p.reuse(old)
<a id="L579"></a><span class="ln">   579</span>				default:
<a id="L580"></a><span class="ln">   580</span>					copy(re.Sub, re.Sub[1:])
<a id="L581"></a><span class="ln">   581</span>					re.Sub = re.Sub[:len(re.Sub)-1]
<a id="L582"></a><span class="ln">   582</span>				}
<a id="L583"></a><span class="ln">   583</span>			}
<a id="L584"></a><span class="ln">   584</span>			return re
<a id="L585"></a><span class="ln">   585</span>		}
<a id="L586"></a><span class="ln">   586</span>	
<a id="L587"></a><span class="ln">   587</span>		if re.Op == OpLiteral {
<a id="L588"></a><span class="ln">   588</span>			re.Rune = re.Rune[:copy(re.Rune, re.Rune[n:])]
<a id="L589"></a><span class="ln">   589</span>			if len(re.Rune) == 0 {
<a id="L590"></a><span class="ln">   590</span>				re.Op = OpEmptyMatch
<a id="L591"></a><span class="ln">   591</span>			}
<a id="L592"></a><span class="ln">   592</span>		}
<a id="L593"></a><span class="ln">   593</span>		return re
<a id="L594"></a><span class="ln">   594</span>	}
<a id="L595"></a><span class="ln">   595</span>	
<a id="L596"></a><span class="ln">   596</span>	<span class="comment">// leadingRegexp returns the leading regexp that re begins with.</span>
<a id="L597"></a><span class="ln">   597</span>	<span class="comment">// The regexp refers to storage in re or its children.</span>
<a id="L598"></a><span class="ln">   598</span>	func (p *parser) leadingRegexp(re *Regexp) *Regexp {
<a id="L599"></a><span class="ln">   599</span>		if re.Op == OpEmptyMatch {
<a id="L600"></a><span class="ln">   600</span>			return nil
<a id="L601"></a><span class="ln">   601</span>		}
<a id="L602"></a><span class="ln">   602</span>		if re.Op == OpConcat &amp;&amp; len(re.Sub) &gt; 0 {
<a id="L603"></a><span class="ln">   603</span>			sub := re.Sub[0]
<a id="L604"></a><span class="ln">   604</span>			if sub.Op == OpEmptyMatch {
<a id="L605"></a><span class="ln">   605</span>				return nil
<a id="L606"></a><span class="ln">   606</span>			}
<a id="L607"></a><span class="ln">   607</span>			return sub
<a id="L608"></a><span class="ln">   608</span>		}
<a id="L609"></a><span class="ln">   609</span>		return re
<a id="L610"></a><span class="ln">   610</span>	}
<a id="L611"></a><span class="ln">   611</span>	
<a id="L612"></a><span class="ln">   612</span>	<span class="comment">// removeLeadingRegexp removes the leading regexp in re.</span>
<a id="L613"></a><span class="ln">   613</span>	<span class="comment">// It returns the replacement for re.</span>
<a id="L614"></a><span class="ln">   614</span>	<span class="comment">// If reuse is true, it passes the removed regexp (if no longer needed) to p.reuse.</span>
<a id="L615"></a><span class="ln">   615</span>	func (p *parser) removeLeadingRegexp(re *Regexp, reuse bool) *Regexp {
<a id="L616"></a><span class="ln">   616</span>		if re.Op == OpConcat &amp;&amp; len(re.Sub) &gt; 0 {
<a id="L617"></a><span class="ln">   617</span>			if reuse {
<a id="L618"></a><span class="ln">   618</span>				p.reuse(re.Sub[0])
<a id="L619"></a><span class="ln">   619</span>			}
<a id="L620"></a><span class="ln">   620</span>			re.Sub = re.Sub[:copy(re.Sub, re.Sub[1:])]
<a id="L621"></a><span class="ln">   621</span>			switch len(re.Sub) {
<a id="L622"></a><span class="ln">   622</span>			case 0:
<a id="L623"></a><span class="ln">   623</span>				re.Op = OpEmptyMatch
<a id="L624"></a><span class="ln">   624</span>				re.Sub = nil
<a id="L625"></a><span class="ln">   625</span>			case 1:
<a id="L626"></a><span class="ln">   626</span>				old := re
<a id="L627"></a><span class="ln">   627</span>				re = re.Sub[0]
<a id="L628"></a><span class="ln">   628</span>				p.reuse(old)
<a id="L629"></a><span class="ln">   629</span>			}
<a id="L630"></a><span class="ln">   630</span>			return re
<a id="L631"></a><span class="ln">   631</span>		}
<a id="L632"></a><span class="ln">   632</span>		if reuse {
<a id="L633"></a><span class="ln">   633</span>			p.reuse(re)
<a id="L634"></a><span class="ln">   634</span>		}
<a id="L635"></a><span class="ln">   635</span>		return p.newRegexp(OpEmptyMatch)
<a id="L636"></a><span class="ln">   636</span>	}
<a id="L637"></a><span class="ln">   637</span>	
<a id="L638"></a><span class="ln">   638</span>	func literalRegexp(s string, flags Flags) *Regexp {
<a id="L639"></a><span class="ln">   639</span>		re := &amp;Regexp{Op: OpLiteral}
<a id="L640"></a><span class="ln">   640</span>		re.Flags = flags
<a id="L641"></a><span class="ln">   641</span>		re.Rune = re.Rune0[:0] <span class="comment">// use local storage for small strings</span>
<a id="L642"></a><span class="ln">   642</span>		for _, c := range s {
<a id="L643"></a><span class="ln">   643</span>			if len(re.Rune) &gt;= cap(re.Rune) {
<a id="L644"></a><span class="ln">   644</span>				<span class="comment">// string is too long to fit in Rune0.  let Go handle it</span>
<a id="L645"></a><span class="ln">   645</span>				re.Rune = []rune(s)
<a id="L646"></a><span class="ln">   646</span>				break
<a id="L647"></a><span class="ln">   647</span>			}
<a id="L648"></a><span class="ln">   648</span>			re.Rune = append(re.Rune, c)
<a id="L649"></a><span class="ln">   649</span>		}
<a id="L650"></a><span class="ln">   650</span>		return re
<a id="L651"></a><span class="ln">   651</span>	}
<a id="L652"></a><span class="ln">   652</span>	
<a id="L653"></a><span class="ln">   653</span>	<span class="comment">// Parsing.</span>
<a id="L654"></a><span class="ln">   654</span>	
<a id="L655"></a><span class="ln">   655</span>	<span class="comment">// Parse parses a regular expression string s, controlled by the specified</span>
<a id="L656"></a><span class="ln">   656</span>	<span class="comment">// Flags, and returns a regular expression parse tree. The syntax is</span>
<a id="L657"></a><span class="ln">   657</span>	<span class="comment">// described in the top-level comment for package regexp.</span>
<a id="L658"></a><span class="ln">   658</span>	func Parse(s string, flags Flags) (*Regexp, error) {
<a id="L659"></a><span class="ln">   659</span>		if flags&amp;Literal != 0 {
<a id="L660"></a><span class="ln">   660</span>			<span class="comment">// Trivial parser for literal string.</span>
<a id="L661"></a><span class="ln">   661</span>			if err := checkUTF8(s); err != nil {
<a id="L662"></a><span class="ln">   662</span>				return nil, err
<a id="L663"></a><span class="ln">   663</span>			}
<a id="L664"></a><span class="ln">   664</span>			return literalRegexp(s, flags), nil
<a id="L665"></a><span class="ln">   665</span>		}
<a id="L666"></a><span class="ln">   666</span>	
<a id="L667"></a><span class="ln">   667</span>		<span class="comment">// Otherwise, must do real work.</span>
<a id="L668"></a><span class="ln">   668</span>		var (
<a id="L669"></a><span class="ln">   669</span>			p          parser
<a id="L670"></a><span class="ln">   670</span>			err        error
<a id="L671"></a><span class="ln">   671</span>			c          rune
<a id="L672"></a><span class="ln">   672</span>			op         Op
<a id="L673"></a><span class="ln">   673</span>			lastRepeat string
<a id="L674"></a><span class="ln">   674</span>			min, max   int
<a id="L675"></a><span class="ln">   675</span>		)
<a id="L676"></a><span class="ln">   676</span>		p.flags = flags
<a id="L677"></a><span class="ln">   677</span>		p.wholeRegexp = s
<a id="L678"></a><span class="ln">   678</span>		t := s
<a id="L679"></a><span class="ln">   679</span>		for t != &#34;&#34; {
<a id="L680"></a><span class="ln">   680</span>			repeat := &#34;&#34;
<a id="L681"></a><span class="ln">   681</span>		BigSwitch:
<a id="L682"></a><span class="ln">   682</span>			switch t[0] {
<a id="L683"></a><span class="ln">   683</span>			default:
<a id="L684"></a><span class="ln">   684</span>				if c, t, err = nextRune(t); err != nil {
<a id="L685"></a><span class="ln">   685</span>					return nil, err
<a id="L686"></a><span class="ln">   686</span>				}
<a id="L687"></a><span class="ln">   687</span>				p.literal(c)
<a id="L688"></a><span class="ln">   688</span>	
<a id="L689"></a><span class="ln">   689</span>			case &#39;(&#39;:
<a id="L690"></a><span class="ln">   690</span>				if p.flags&amp;PerlX != 0 &amp;&amp; len(t) &gt;= 2 &amp;&amp; t[1] == &#39;?&#39; {
<a id="L691"></a><span class="ln">   691</span>					<span class="comment">// Flag changes and non-capturing groups.</span>
<a id="L692"></a><span class="ln">   692</span>					if t, err = p.parsePerlFlags(t); err != nil {
<a id="L693"></a><span class="ln">   693</span>						return nil, err
<a id="L694"></a><span class="ln">   694</span>					}
<a id="L695"></a><span class="ln">   695</span>					break
<a id="L696"></a><span class="ln">   696</span>				}
<a id="L697"></a><span class="ln">   697</span>				p.numCap++
<a id="L698"></a><span class="ln">   698</span>				p.op(opLeftParen).Cap = p.numCap
<a id="L699"></a><span class="ln">   699</span>				t = t[1:]
<a id="L700"></a><span class="ln">   700</span>			case &#39;|&#39;:
<a id="L701"></a><span class="ln">   701</span>				if err = p.parseVerticalBar(); err != nil {
<a id="L702"></a><span class="ln">   702</span>					return nil, err
<a id="L703"></a><span class="ln">   703</span>				}
<a id="L704"></a><span class="ln">   704</span>				t = t[1:]
<a id="L705"></a><span class="ln">   705</span>			case &#39;)&#39;:
<a id="L706"></a><span class="ln">   706</span>				if err = p.parseRightParen(); err != nil {
<a id="L707"></a><span class="ln">   707</span>					return nil, err
<a id="L708"></a><span class="ln">   708</span>				}
<a id="L709"></a><span class="ln">   709</span>				t = t[1:]
<a id="L710"></a><span class="ln">   710</span>			case &#39;^&#39;:
<a id="L711"></a><span class="ln">   711</span>				if p.flags&amp;OneLine != 0 {
<a id="L712"></a><span class="ln">   712</span>					p.op(OpBeginText)
<a id="L713"></a><span class="ln">   713</span>				} else {
<a id="L714"></a><span class="ln">   714</span>					p.op(OpBeginLine)
<a id="L715"></a><span class="ln">   715</span>				}
<a id="L716"></a><span class="ln">   716</span>				t = t[1:]
<a id="L717"></a><span class="ln">   717</span>			case &#39;$&#39;:
<a id="L718"></a><span class="ln">   718</span>				if p.flags&amp;OneLine != 0 {
<a id="L719"></a><span class="ln">   719</span>					p.op(OpEndText).Flags |= WasDollar
<a id="L720"></a><span class="ln">   720</span>				} else {
<a id="L721"></a><span class="ln">   721</span>					p.op(OpEndLine)
<a id="L722"></a><span class="ln">   722</span>				}
<a id="L723"></a><span class="ln">   723</span>				t = t[1:]
<a id="L724"></a><span class="ln">   724</span>			case &#39;.&#39;:
<a id="L725"></a><span class="ln">   725</span>				if p.flags&amp;DotNL != 0 {
<a id="L726"></a><span class="ln">   726</span>					p.op(OpAnyChar)
<a id="L727"></a><span class="ln">   727</span>				} else {
<a id="L728"></a><span class="ln">   728</span>					p.op(OpAnyCharNotNL)
<a id="L729"></a><span class="ln">   729</span>				}
<a id="L730"></a><span class="ln">   730</span>				t = t[1:]
<a id="L731"></a><span class="ln">   731</span>			case &#39;[&#39;:
<a id="L732"></a><span class="ln">   732</span>				if t, err = p.parseClass(t); err != nil {
<a id="L733"></a><span class="ln">   733</span>					return nil, err
<a id="L734"></a><span class="ln">   734</span>				}
<a id="L735"></a><span class="ln">   735</span>			case &#39;*&#39;, &#39;+&#39;, &#39;?&#39;:
<a id="L736"></a><span class="ln">   736</span>				before := t
<a id="L737"></a><span class="ln">   737</span>				switch t[0] {
<a id="L738"></a><span class="ln">   738</span>				case &#39;*&#39;:
<a id="L739"></a><span class="ln">   739</span>					op = OpStar
<a id="L740"></a><span class="ln">   740</span>				case &#39;+&#39;:
<a id="L741"></a><span class="ln">   741</span>					op = OpPlus
<a id="L742"></a><span class="ln">   742</span>				case &#39;?&#39;:
<a id="L743"></a><span class="ln">   743</span>					op = OpQuest
<a id="L744"></a><span class="ln">   744</span>				}
<a id="L745"></a><span class="ln">   745</span>				after := t[1:]
<a id="L746"></a><span class="ln">   746</span>				if after, err = p.repeat(op, min, max, before, after, lastRepeat); err != nil {
<a id="L747"></a><span class="ln">   747</span>					return nil, err
<a id="L748"></a><span class="ln">   748</span>				}
<a id="L749"></a><span class="ln">   749</span>				repeat = before
<a id="L750"></a><span class="ln">   750</span>				t = after
<a id="L751"></a><span class="ln">   751</span>			case &#39;{&#39;:
<a id="L752"></a><span class="ln">   752</span>				op = OpRepeat
<a id="L753"></a><span class="ln">   753</span>				before := t
<a id="L754"></a><span class="ln">   754</span>				min, max, after, ok := p.parseRepeat(t)
<a id="L755"></a><span class="ln">   755</span>				if !ok {
<a id="L756"></a><span class="ln">   756</span>					<span class="comment">// If the repeat cannot be parsed, { is a literal.</span>
<a id="L757"></a><span class="ln">   757</span>					p.literal(&#39;{&#39;)
<a id="L758"></a><span class="ln">   758</span>					t = t[1:]
<a id="L759"></a><span class="ln">   759</span>					break
<a id="L760"></a><span class="ln">   760</span>				}
<a id="L761"></a><span class="ln">   761</span>				if min &lt; 0 || min &gt; 1000 || max &gt; 1000 || max &gt;= 0 &amp;&amp; min &gt; max {
<a id="L762"></a><span class="ln">   762</span>					<span class="comment">// Numbers were too big, or max is present and min &gt; max.</span>
<a id="L763"></a><span class="ln">   763</span>					return nil, &amp;Error{ErrInvalidRepeatSize, before[:len(before)-len(after)]}
<a id="L764"></a><span class="ln">   764</span>				}
<a id="L765"></a><span class="ln">   765</span>				if after, err = p.repeat(op, min, max, before, after, lastRepeat); err != nil {
<a id="L766"></a><span class="ln">   766</span>					return nil, err
<a id="L767"></a><span class="ln">   767</span>				}
<a id="L768"></a><span class="ln">   768</span>				repeat = before
<a id="L769"></a><span class="ln">   769</span>				t = after
<a id="L770"></a><span class="ln">   770</span>			case &#39;\\&#39;:
<a id="L771"></a><span class="ln">   771</span>				if p.flags&amp;PerlX != 0 &amp;&amp; len(t) &gt;= 2 {
<a id="L772"></a><span class="ln">   772</span>					switch t[1] {
<a id="L773"></a><span class="ln">   773</span>					case &#39;A&#39;:
<a id="L774"></a><span class="ln">   774</span>						p.op(OpBeginText)
<a id="L775"></a><span class="ln">   775</span>						t = t[2:]
<a id="L776"></a><span class="ln">   776</span>						break BigSwitch
<a id="L777"></a><span class="ln">   777</span>					case &#39;b&#39;:
<a id="L778"></a><span class="ln">   778</span>						p.op(OpWordBoundary)
<a id="L779"></a><span class="ln">   779</span>						t = t[2:]
<a id="L780"></a><span class="ln">   780</span>						break BigSwitch
<a id="L781"></a><span class="ln">   781</span>					case &#39;B&#39;:
<a id="L782"></a><span class="ln">   782</span>						p.op(OpNoWordBoundary)
<a id="L783"></a><span class="ln">   783</span>						t = t[2:]
<a id="L784"></a><span class="ln">   784</span>						break BigSwitch
<a id="L785"></a><span class="ln">   785</span>					case &#39;C&#39;:
<a id="L786"></a><span class="ln">   786</span>						<span class="comment">// any byte; not supported</span>
<a id="L787"></a><span class="ln">   787</span>						return nil, &amp;Error{ErrInvalidEscape, t[:2]}
<a id="L788"></a><span class="ln">   788</span>					case &#39;Q&#39;:
<a id="L789"></a><span class="ln">   789</span>						<span class="comment">// \Q ... \E: the ... is always literals</span>
<a id="L790"></a><span class="ln">   790</span>						var lit string
<a id="L791"></a><span class="ln">   791</span>						if i := strings.Index(t, `\E`); i &lt; 0 {
<a id="L792"></a><span class="ln">   792</span>							lit = t[2:]
<a id="L793"></a><span class="ln">   793</span>							t = &#34;&#34;
<a id="L794"></a><span class="ln">   794</span>						} else {
<a id="L795"></a><span class="ln">   795</span>							lit = t[2:i]
<a id="L796"></a><span class="ln">   796</span>							t = t[i+2:]
<a id="L797"></a><span class="ln">   797</span>						}
<a id="L798"></a><span class="ln">   798</span>						p.push(literalRegexp(lit, p.flags))
<a id="L799"></a><span class="ln">   799</span>						break BigSwitch
<a id="L800"></a><span class="ln">   800</span>					case &#39;z&#39;:
<a id="L801"></a><span class="ln">   801</span>						p.op(OpEndText)
<a id="L802"></a><span class="ln">   802</span>						t = t[2:]
<a id="L803"></a><span class="ln">   803</span>						break BigSwitch
<a id="L804"></a><span class="ln">   804</span>					}
<a id="L805"></a><span class="ln">   805</span>				}
<a id="L806"></a><span class="ln">   806</span>	
<a id="L807"></a><span class="ln">   807</span>				re := p.newRegexp(OpCharClass)
<a id="L808"></a><span class="ln">   808</span>				re.Flags = p.flags
<a id="L809"></a><span class="ln">   809</span>	
<a id="L810"></a><span class="ln">   810</span>				<span class="comment">// Look for Unicode character group like \p{Han}</span>
<a id="L811"></a><span class="ln">   811</span>				if len(t) &gt;= 2 &amp;&amp; (t[1] == &#39;p&#39; || t[1] == &#39;P&#39;) {
<a id="L812"></a><span class="ln">   812</span>					r, rest, err := p.parseUnicodeClass(t, re.Rune0[:0])
<a id="L813"></a><span class="ln">   813</span>					if err != nil {
<a id="L814"></a><span class="ln">   814</span>						return nil, err
<a id="L815"></a><span class="ln">   815</span>					}
<a id="L816"></a><span class="ln">   816</span>					if r != nil {
<a id="L817"></a><span class="ln">   817</span>						re.Rune = r
<a id="L818"></a><span class="ln">   818</span>						t = rest
<a id="L819"></a><span class="ln">   819</span>						p.push(re)
<a id="L820"></a><span class="ln">   820</span>						break BigSwitch
<a id="L821"></a><span class="ln">   821</span>					}
<a id="L822"></a><span class="ln">   822</span>				}
<a id="L823"></a><span class="ln">   823</span>	
<a id="L824"></a><span class="ln">   824</span>				<span class="comment">// Perl character class escape.</span>
<a id="L825"></a><span class="ln">   825</span>				if r, rest := p.parsePerlClassEscape(t, re.Rune0[:0]); r != nil {
<a id="L826"></a><span class="ln">   826</span>					re.Rune = r
<a id="L827"></a><span class="ln">   827</span>					t = rest
<a id="L828"></a><span class="ln">   828</span>					p.push(re)
<a id="L829"></a><span class="ln">   829</span>					break BigSwitch
<a id="L830"></a><span class="ln">   830</span>				}
<a id="L831"></a><span class="ln">   831</span>				p.reuse(re)
<a id="L832"></a><span class="ln">   832</span>	
<a id="L833"></a><span class="ln">   833</span>				<span class="comment">// Ordinary single-character escape.</span>
<a id="L834"></a><span class="ln">   834</span>				if c, t, err = p.parseEscape(t); err != nil {
<a id="L835"></a><span class="ln">   835</span>					return nil, err
<a id="L836"></a><span class="ln">   836</span>				}
<a id="L837"></a><span class="ln">   837</span>				p.literal(c)
<a id="L838"></a><span class="ln">   838</span>			}
<a id="L839"></a><span class="ln">   839</span>			lastRepeat = repeat
<a id="L840"></a><span class="ln">   840</span>		}
<a id="L841"></a><span class="ln">   841</span>	
<a id="L842"></a><span class="ln">   842</span>		p.concat()
<a id="L843"></a><span class="ln">   843</span>		if p.swapVerticalBar() {
<a id="L844"></a><span class="ln">   844</span>			<span class="comment">// pop vertical bar</span>
<a id="L845"></a><span class="ln">   845</span>			p.stack = p.stack[:len(p.stack)-1]
<a id="L846"></a><span class="ln">   846</span>		}
<a id="L847"></a><span class="ln">   847</span>		p.alternate()
<a id="L848"></a><span class="ln">   848</span>	
<a id="L849"></a><span class="ln">   849</span>		n := len(p.stack)
<a id="L850"></a><span class="ln">   850</span>		if n != 1 {
<a id="L851"></a><span class="ln">   851</span>			return nil, &amp;Error{ErrMissingParen, s}
<a id="L852"></a><span class="ln">   852</span>		}
<a id="L853"></a><span class="ln">   853</span>		return p.stack[0], nil
<a id="L854"></a><span class="ln">   854</span>	}
<a id="L855"></a><span class="ln">   855</span>	
<a id="L856"></a><span class="ln">   856</span>	<span class="comment">// parseRepeat parses {min} (max=min) or {min,} (max=-1) or {min,max}.</span>
<a id="L857"></a><span class="ln">   857</span>	<span class="comment">// If s is not of that form, it returns ok == false.</span>
<a id="L858"></a><span class="ln">   858</span>	<span class="comment">// If s has the right form but the values are too big, it returns min == -1, ok == true.</span>
<a id="L859"></a><span class="ln">   859</span>	func (p *parser) parseRepeat(s string) (min, max int, rest string, ok bool) {
<a id="L860"></a><span class="ln">   860</span>		if s == &#34;&#34; || s[0] != &#39;{&#39; {
<a id="L861"></a><span class="ln">   861</span>			return
<a id="L862"></a><span class="ln">   862</span>		}
<a id="L863"></a><span class="ln">   863</span>		s = s[1:]
<a id="L864"></a><span class="ln">   864</span>		var ok1 bool
<a id="L865"></a><span class="ln">   865</span>		if min, s, ok1 = p.parseInt(s); !ok1 {
<a id="L866"></a><span class="ln">   866</span>			return
<a id="L867"></a><span class="ln">   867</span>		}
<a id="L868"></a><span class="ln">   868</span>		if s == &#34;&#34; {
<a id="L869"></a><span class="ln">   869</span>			return
<a id="L870"></a><span class="ln">   870</span>		}
<a id="L871"></a><span class="ln">   871</span>		if s[0] != &#39;,&#39; {
<a id="L872"></a><span class="ln">   872</span>			max = min
<a id="L873"></a><span class="ln">   873</span>		} else {
<a id="L874"></a><span class="ln">   874</span>			s = s[1:]
<a id="L875"></a><span class="ln">   875</span>			if s == &#34;&#34; {
<a id="L876"></a><span class="ln">   876</span>				return
<a id="L877"></a><span class="ln">   877</span>			}
<a id="L878"></a><span class="ln">   878</span>			if s[0] == &#39;}&#39; {
<a id="L879"></a><span class="ln">   879</span>				max = -1
<a id="L880"></a><span class="ln">   880</span>			} else if max, s, ok1 = p.parseInt(s); !ok1 {
<a id="L881"></a><span class="ln">   881</span>				return
<a id="L882"></a><span class="ln">   882</span>			} else if max &lt; 0 {
<a id="L883"></a><span class="ln">   883</span>				<span class="comment">// parseInt found too big a number</span>
<a id="L884"></a><span class="ln">   884</span>				min = -1
<a id="L885"></a><span class="ln">   885</span>			}
<a id="L886"></a><span class="ln">   886</span>		}
<a id="L887"></a><span class="ln">   887</span>		if s == &#34;&#34; || s[0] != &#39;}&#39; {
<a id="L888"></a><span class="ln">   888</span>			return
<a id="L889"></a><span class="ln">   889</span>		}
<a id="L890"></a><span class="ln">   890</span>		rest = s[1:]
<a id="L891"></a><span class="ln">   891</span>		ok = true
<a id="L892"></a><span class="ln">   892</span>		return
<a id="L893"></a><span class="ln">   893</span>	}
<a id="L894"></a><span class="ln">   894</span>	
<a id="L895"></a><span class="ln">   895</span>	<span class="comment">// parsePerlFlags parses a Perl flag setting or non-capturing group or both,</span>
<a id="L896"></a><span class="ln">   896</span>	<span class="comment">// like (?i) or (?: or (?i:.  It removes the prefix from s and updates the parse state.</span>
<a id="L897"></a><span class="ln">   897</span>	<span class="comment">// The caller must have ensured that s begins with &#34;(?&#34;.</span>
<a id="L898"></a><span class="ln">   898</span>	func (p *parser) parsePerlFlags(s string) (rest string, err error) {
<a id="L899"></a><span class="ln">   899</span>		t := s
<a id="L900"></a><span class="ln">   900</span>	
<a id="L901"></a><span class="ln">   901</span>		<span class="comment">// Check for named captures, first introduced in Python&#39;s regexp library.</span>
<a id="L902"></a><span class="ln">   902</span>		<span class="comment">// As usual, there are three slightly different syntaxes:</span>
<a id="L903"></a><span class="ln">   903</span>		<span class="comment">//</span>
<a id="L904"></a><span class="ln">   904</span>		<span class="comment">//   (?P&lt;name&gt;expr)   the original, introduced by Python</span>
<a id="L905"></a><span class="ln">   905</span>		<span class="comment">//   (?&lt;name&gt;expr)    the .NET alteration, adopted by Perl 5.10</span>
<a id="L906"></a><span class="ln">   906</span>		<span class="comment">//   (?&#39;name&#39;expr)    another .NET alteration, adopted by Perl 5.10</span>
<a id="L907"></a><span class="ln">   907</span>		<span class="comment">//</span>
<a id="L908"></a><span class="ln">   908</span>		<span class="comment">// Perl 5.10 gave in and implemented the Python version too,</span>
<a id="L909"></a><span class="ln">   909</span>		<span class="comment">// but they claim that the last two are the preferred forms.</span>
<a id="L910"></a><span class="ln">   910</span>		<span class="comment">// PCRE and languages based on it (specifically, PHP and Ruby)</span>
<a id="L911"></a><span class="ln">   911</span>		<span class="comment">// support all three as well.  EcmaScript 4 uses only the Python form.</span>
<a id="L912"></a><span class="ln">   912</span>		<span class="comment">//</span>
<a id="L913"></a><span class="ln">   913</span>		<span class="comment">// In both the open source world (via Code Search) and the</span>
<a id="L914"></a><span class="ln">   914</span>		<span class="comment">// Google source tree, (?P&lt;expr&gt;name) is the dominant form,</span>
<a id="L915"></a><span class="ln">   915</span>		<span class="comment">// so that&#39;s the one we implement.  One is enough.</span>
<a id="L916"></a><span class="ln">   916</span>		if len(t) &gt; 4 &amp;&amp; t[2] == &#39;P&#39; &amp;&amp; t[3] == &#39;&lt;&#39; {
<a id="L917"></a><span class="ln">   917</span>			<span class="comment">// Pull out name.</span>
<a id="L918"></a><span class="ln">   918</span>			end := strings.IndexRune(t, &#39;&gt;&#39;)
<a id="L919"></a><span class="ln">   919</span>			if end &lt; 0 {
<a id="L920"></a><span class="ln">   920</span>				if err = checkUTF8(t); err != nil {
<a id="L921"></a><span class="ln">   921</span>					return &#34;&#34;, err
<a id="L922"></a><span class="ln">   922</span>				}
<a id="L923"></a><span class="ln">   923</span>				return &#34;&#34;, &amp;Error{ErrInvalidNamedCapture, s}
<a id="L924"></a><span class="ln">   924</span>			}
<a id="L925"></a><span class="ln">   925</span>	
<a id="L926"></a><span class="ln">   926</span>			capture := t[:end+1] <span class="comment">// &#34;(?P&lt;name&gt;&#34;</span>
<a id="L927"></a><span class="ln">   927</span>			name := t[4:end]     <span class="comment">// &#34;name&#34;</span>
<a id="L928"></a><span class="ln">   928</span>			if err = checkUTF8(name); err != nil {
<a id="L929"></a><span class="ln">   929</span>				return &#34;&#34;, err
<a id="L930"></a><span class="ln">   930</span>			}
<a id="L931"></a><span class="ln">   931</span>			if !isValidCaptureName(name) {
<a id="L932"></a><span class="ln">   932</span>				return &#34;&#34;, &amp;Error{ErrInvalidNamedCapture, capture}
<a id="L933"></a><span class="ln">   933</span>			}
<a id="L934"></a><span class="ln">   934</span>	
<a id="L935"></a><span class="ln">   935</span>			<span class="comment">// Like ordinary capture, but named.</span>
<a id="L936"></a><span class="ln">   936</span>			p.numCap++
<a id="L937"></a><span class="ln">   937</span>			re := p.op(opLeftParen)
<a id="L938"></a><span class="ln">   938</span>			re.Cap = p.numCap
<a id="L939"></a><span class="ln">   939</span>			re.Name = name
<a id="L940"></a><span class="ln">   940</span>			return t[end+1:], nil
<a id="L941"></a><span class="ln">   941</span>		}
<a id="L942"></a><span class="ln">   942</span>	
<a id="L943"></a><span class="ln">   943</span>		<span class="comment">// Non-capturing group.  Might also twiddle Perl flags.</span>
<a id="L944"></a><span class="ln">   944</span>		var c rune
<a id="L945"></a><span class="ln">   945</span>		t = t[2:] <span class="comment">// skip (?</span>
<a id="L946"></a><span class="ln">   946</span>		flags := p.flags
<a id="L947"></a><span class="ln">   947</span>		sign := +1
<a id="L948"></a><span class="ln">   948</span>		sawFlag := false
<a id="L949"></a><span class="ln">   949</span>	Loop:
<a id="L950"></a><span class="ln">   950</span>		for t != &#34;&#34; {
<a id="L951"></a><span class="ln">   951</span>			if c, t, err = nextRune(t); err != nil {
<a id="L952"></a><span class="ln">   952</span>				return &#34;&#34;, err
<a id="L953"></a><span class="ln">   953</span>			}
<a id="L954"></a><span class="ln">   954</span>			switch c {
<a id="L955"></a><span class="ln">   955</span>			default:
<a id="L956"></a><span class="ln">   956</span>				break Loop
<a id="L957"></a><span class="ln">   957</span>	
<a id="L958"></a><span class="ln">   958</span>			<span class="comment">// Flags.</span>
<a id="L959"></a><span class="ln">   959</span>			case &#39;i&#39;:
<a id="L960"></a><span class="ln">   960</span>				flags |= FoldCase
<a id="L961"></a><span class="ln">   961</span>				sawFlag = true
<a id="L962"></a><span class="ln">   962</span>			case &#39;m&#39;:
<a id="L963"></a><span class="ln">   963</span>				flags &amp;^= OneLine
<a id="L964"></a><span class="ln">   964</span>				sawFlag = true
<a id="L965"></a><span class="ln">   965</span>			case &#39;s&#39;:
<a id="L966"></a><span class="ln">   966</span>				flags |= DotNL
<a id="L967"></a><span class="ln">   967</span>				sawFlag = true
<a id="L968"></a><span class="ln">   968</span>			case &#39;U&#39;:
<a id="L969"></a><span class="ln">   969</span>				flags |= NonGreedy
<a id="L970"></a><span class="ln">   970</span>				sawFlag = true
<a id="L971"></a><span class="ln">   971</span>	
<a id="L972"></a><span class="ln">   972</span>			<span class="comment">// Switch to negation.</span>
<a id="L973"></a><span class="ln">   973</span>			case &#39;-&#39;:
<a id="L974"></a><span class="ln">   974</span>				if sign &lt; 0 {
<a id="L975"></a><span class="ln">   975</span>					break Loop
<a id="L976"></a><span class="ln">   976</span>				}
<a id="L977"></a><span class="ln">   977</span>				sign = -1
<a id="L978"></a><span class="ln">   978</span>				<span class="comment">// Invert flags so that | above turn into &amp;^ and vice versa.</span>
<a id="L979"></a><span class="ln">   979</span>				<span class="comment">// We&#39;ll invert flags again before using it below.</span>
<a id="L980"></a><span class="ln">   980</span>				flags = ^flags
<a id="L981"></a><span class="ln">   981</span>				sawFlag = false
<a id="L982"></a><span class="ln">   982</span>	
<a id="L983"></a><span class="ln">   983</span>			<span class="comment">// End of flags, starting group or not.</span>
<a id="L984"></a><span class="ln">   984</span>			case &#39;:&#39;, &#39;)&#39;:
<a id="L985"></a><span class="ln">   985</span>				if sign &lt; 0 {
<a id="L986"></a><span class="ln">   986</span>					if !sawFlag {
<a id="L987"></a><span class="ln">   987</span>						break Loop
<a id="L988"></a><span class="ln">   988</span>					}
<a id="L989"></a><span class="ln">   989</span>					flags = ^flags
<a id="L990"></a><span class="ln">   990</span>				}
<a id="L991"></a><span class="ln">   991</span>				if c == &#39;:&#39; {
<a id="L992"></a><span class="ln">   992</span>					<span class="comment">// Open new group</span>
<a id="L993"></a><span class="ln">   993</span>					p.op(opLeftParen)
<a id="L994"></a><span class="ln">   994</span>				}
<a id="L995"></a><span class="ln">   995</span>				p.flags = flags
<a id="L996"></a><span class="ln">   996</span>				return t, nil
<a id="L997"></a><span class="ln">   997</span>			}
<a id="L998"></a><span class="ln">   998</span>		}
<a id="L999"></a><span class="ln">   999</span>	
<a id="L1000"></a><span class="ln">  1000</span>		return &#34;&#34;, &amp;Error{ErrInvalidPerlOp, s[:len(s)-len(t)]}
<a id="L1001"></a><span class="ln">  1001</span>	}
<a id="L1002"></a><span class="ln">  1002</span>	
<a id="L1003"></a><span class="ln">  1003</span>	<span class="comment">// isValidCaptureName reports whether name</span>
<a id="L1004"></a><span class="ln">  1004</span>	<span class="comment">// is a valid capture name: [A-Za-z0-9_]+.</span>
<a id="L1005"></a><span class="ln">  1005</span>	<span class="comment">// PCRE limits names to 32 bytes.</span>
<a id="L1006"></a><span class="ln">  1006</span>	<span class="comment">// Python rejects names starting with digits.</span>
<a id="L1007"></a><span class="ln">  1007</span>	<span class="comment">// We don&#39;t enforce either of those.</span>
<a id="L1008"></a><span class="ln">  1008</span>	func isValidCaptureName(name string) bool {
<a id="L1009"></a><span class="ln">  1009</span>		if name == &#34;&#34; {
<a id="L1010"></a><span class="ln">  1010</span>			return false
<a id="L1011"></a><span class="ln">  1011</span>		}
<a id="L1012"></a><span class="ln">  1012</span>		for _, c := range name {
<a id="L1013"></a><span class="ln">  1013</span>			if c != &#39;_&#39; &amp;&amp; !isalnum(c) {
<a id="L1014"></a><span class="ln">  1014</span>				return false
<a id="L1015"></a><span class="ln">  1015</span>			}
<a id="L1016"></a><span class="ln">  1016</span>		}
<a id="L1017"></a><span class="ln">  1017</span>		return true
<a id="L1018"></a><span class="ln">  1018</span>	}
<a id="L1019"></a><span class="ln">  1019</span>	
<a id="L1020"></a><span class="ln">  1020</span>	<span class="comment">// parseInt parses a decimal integer.</span>
<a id="L1021"></a><span class="ln">  1021</span>	func (p *parser) parseInt(s string) (n int, rest string, ok bool) {
<a id="L1022"></a><span class="ln">  1022</span>		if s == &#34;&#34; || s[0] &lt; &#39;0&#39; || &#39;9&#39; &lt; s[0] {
<a id="L1023"></a><span class="ln">  1023</span>			return
<a id="L1024"></a><span class="ln">  1024</span>		}
<a id="L1025"></a><span class="ln">  1025</span>		<span class="comment">// Disallow leading zeros.</span>
<a id="L1026"></a><span class="ln">  1026</span>		if len(s) &gt;= 2 &amp;&amp; s[0] == &#39;0&#39; &amp;&amp; &#39;0&#39; &lt;= s[1] &amp;&amp; s[1] &lt;= &#39;9&#39; {
<a id="L1027"></a><span class="ln">  1027</span>			return
<a id="L1028"></a><span class="ln">  1028</span>		}
<a id="L1029"></a><span class="ln">  1029</span>		t := s
<a id="L1030"></a><span class="ln">  1030</span>		for s != &#34;&#34; &amp;&amp; &#39;0&#39; &lt;= s[0] &amp;&amp; s[0] &lt;= &#39;9&#39; {
<a id="L1031"></a><span class="ln">  1031</span>			s = s[1:]
<a id="L1032"></a><span class="ln">  1032</span>		}
<a id="L1033"></a><span class="ln">  1033</span>		rest = s
<a id="L1034"></a><span class="ln">  1034</span>		ok = true
<a id="L1035"></a><span class="ln">  1035</span>		<span class="comment">// Have digits, compute value.</span>
<a id="L1036"></a><span class="ln">  1036</span>		t = t[:len(t)-len(s)]
<a id="L1037"></a><span class="ln">  1037</span>		for i := 0; i &lt; len(t); i++ {
<a id="L1038"></a><span class="ln">  1038</span>			<span class="comment">// Avoid overflow.</span>
<a id="L1039"></a><span class="ln">  1039</span>			if n &gt;= 1e8 {
<a id="L1040"></a><span class="ln">  1040</span>				n = -1
<a id="L1041"></a><span class="ln">  1041</span>				break
<a id="L1042"></a><span class="ln">  1042</span>			}
<a id="L1043"></a><span class="ln">  1043</span>			n = n*10 + int(t[i]) - &#39;0&#39;
<a id="L1044"></a><span class="ln">  1044</span>		}
<a id="L1045"></a><span class="ln">  1045</span>		return
<a id="L1046"></a><span class="ln">  1046</span>	}
<a id="L1047"></a><span class="ln">  1047</span>	
<a id="L1048"></a><span class="ln">  1048</span>	<span class="comment">// can this be represented as a character class?</span>
<a id="L1049"></a><span class="ln">  1049</span>	<span class="comment">// single-rune literal string, char class, ., and .|\n.</span>
<a id="L1050"></a><span class="ln">  1050</span>	func isCharClass(re *Regexp) bool {
<a id="L1051"></a><span class="ln">  1051</span>		return re.Op == OpLiteral &amp;&amp; len(re.Rune) == 1 ||
<a id="L1052"></a><span class="ln">  1052</span>			re.Op == OpCharClass ||
<a id="L1053"></a><span class="ln">  1053</span>			re.Op == OpAnyCharNotNL ||
<a id="L1054"></a><span class="ln">  1054</span>			re.Op == OpAnyChar
<a id="L1055"></a><span class="ln">  1055</span>	}
<a id="L1056"></a><span class="ln">  1056</span>	
<a id="L1057"></a><span class="ln">  1057</span>	<span class="comment">// does re match r?</span>
<a id="L1058"></a><span class="ln">  1058</span>	func matchRune(re *Regexp, r rune) bool {
<a id="L1059"></a><span class="ln">  1059</span>		switch re.Op {
<a id="L1060"></a><span class="ln">  1060</span>		case OpLiteral:
<a id="L1061"></a><span class="ln">  1061</span>			return len(re.Rune) == 1 &amp;&amp; re.Rune[0] == r
<a id="L1062"></a><span class="ln">  1062</span>		case OpCharClass:
<a id="L1063"></a><span class="ln">  1063</span>			for i := 0; i &lt; len(re.Rune); i += 2 {
<a id="L1064"></a><span class="ln">  1064</span>				if re.Rune[i] &lt;= r &amp;&amp; r &lt;= re.Rune[i+1] {
<a id="L1065"></a><span class="ln">  1065</span>					return true
<a id="L1066"></a><span class="ln">  1066</span>				}
<a id="L1067"></a><span class="ln">  1067</span>			}
<a id="L1068"></a><span class="ln">  1068</span>			return false
<a id="L1069"></a><span class="ln">  1069</span>		case OpAnyCharNotNL:
<a id="L1070"></a><span class="ln">  1070</span>			return r != &#39;\n&#39;
<a id="L1071"></a><span class="ln">  1071</span>		case OpAnyChar:
<a id="L1072"></a><span class="ln">  1072</span>			return true
<a id="L1073"></a><span class="ln">  1073</span>		}
<a id="L1074"></a><span class="ln">  1074</span>		return false
<a id="L1075"></a><span class="ln">  1075</span>	}
<a id="L1076"></a><span class="ln">  1076</span>	
<a id="L1077"></a><span class="ln">  1077</span>	<span class="comment">// parseVerticalBar handles a | in the input.</span>
<a id="L1078"></a><span class="ln">  1078</span>	func (p *parser) parseVerticalBar() error {
<a id="L1079"></a><span class="ln">  1079</span>		p.concat()
<a id="L1080"></a><span class="ln">  1080</span>	
<a id="L1081"></a><span class="ln">  1081</span>		<span class="comment">// The concatenation we just parsed is on top of the stack.</span>
<a id="L1082"></a><span class="ln">  1082</span>		<span class="comment">// If it sits above an opVerticalBar, swap it below</span>
<a id="L1083"></a><span class="ln">  1083</span>		<span class="comment">// (things below an opVerticalBar become an alternation).</span>
<a id="L1084"></a><span class="ln">  1084</span>		<span class="comment">// Otherwise, push a new vertical bar.</span>
<a id="L1085"></a><span class="ln">  1085</span>		if !p.swapVerticalBar() {
<a id="L1086"></a><span class="ln">  1086</span>			p.op(opVerticalBar)
<a id="L1087"></a><span class="ln">  1087</span>		}
<a id="L1088"></a><span class="ln">  1088</span>	
<a id="L1089"></a><span class="ln">  1089</span>		return nil
<a id="L1090"></a><span class="ln">  1090</span>	}
<a id="L1091"></a><span class="ln">  1091</span>	
<a id="L1092"></a><span class="ln">  1092</span>	<span class="comment">// mergeCharClass makes dst = dst|src.</span>
<a id="L1093"></a><span class="ln">  1093</span>	<span class="comment">// The caller must ensure that dst.Op &gt;= src.Op,</span>
<a id="L1094"></a><span class="ln">  1094</span>	<span class="comment">// to reduce the amount of copying.</span>
<a id="L1095"></a><span class="ln">  1095</span>	func mergeCharClass(dst, src *Regexp) {
<a id="L1096"></a><span class="ln">  1096</span>		switch dst.Op {
<a id="L1097"></a><span class="ln">  1097</span>		case OpAnyChar:
<a id="L1098"></a><span class="ln">  1098</span>			<span class="comment">// src doesn&#39;t add anything.</span>
<a id="L1099"></a><span class="ln">  1099</span>		case OpAnyCharNotNL:
<a id="L1100"></a><span class="ln">  1100</span>			<span class="comment">// src might add \n</span>
<a id="L1101"></a><span class="ln">  1101</span>			if matchRune(src, &#39;\n&#39;) {
<a id="L1102"></a><span class="ln">  1102</span>				dst.Op = OpAnyChar
<a id="L1103"></a><span class="ln">  1103</span>			}
<a id="L1104"></a><span class="ln">  1104</span>		case OpCharClass:
<a id="L1105"></a><span class="ln">  1105</span>			<span class="comment">// src is simpler, so either literal or char class</span>
<a id="L1106"></a><span class="ln">  1106</span>			if src.Op == OpLiteral {
<a id="L1107"></a><span class="ln">  1107</span>				dst.Rune = appendLiteral(dst.Rune, src.Rune[0], src.Flags)
<a id="L1108"></a><span class="ln">  1108</span>			} else {
<a id="L1109"></a><span class="ln">  1109</span>				dst.Rune = appendClass(dst.Rune, src.Rune)
<a id="L1110"></a><span class="ln">  1110</span>			}
<a id="L1111"></a><span class="ln">  1111</span>		case OpLiteral:
<a id="L1112"></a><span class="ln">  1112</span>			<span class="comment">// both literal</span>
<a id="L1113"></a><span class="ln">  1113</span>			if src.Rune[0] == dst.Rune[0] &amp;&amp; src.Flags == dst.Flags {
<a id="L1114"></a><span class="ln">  1114</span>				break
<a id="L1115"></a><span class="ln">  1115</span>			}
<a id="L1116"></a><span class="ln">  1116</span>			dst.Op = OpCharClass
<a id="L1117"></a><span class="ln">  1117</span>			dst.Rune = appendLiteral(dst.Rune[:0], dst.Rune[0], dst.Flags)
<a id="L1118"></a><span class="ln">  1118</span>			dst.Rune = appendLiteral(dst.Rune, src.Rune[0], src.Flags)
<a id="L1119"></a><span class="ln">  1119</span>		}
<a id="L1120"></a><span class="ln">  1120</span>	}
<a id="L1121"></a><span class="ln">  1121</span>	
<a id="L1122"></a><span class="ln">  1122</span>	<span class="comment">// If the top of the stack is an element followed by an opVerticalBar</span>
<a id="L1123"></a><span class="ln">  1123</span>	<span class="comment">// swapVerticalBar swaps the two and returns true.</span>
<a id="L1124"></a><span class="ln">  1124</span>	<span class="comment">// Otherwise it returns false.</span>
<a id="L1125"></a><span class="ln">  1125</span>	func (p *parser) swapVerticalBar() bool {
<a id="L1126"></a><span class="ln">  1126</span>		<span class="comment">// If above and below vertical bar are literal or char class,</span>
<a id="L1127"></a><span class="ln">  1127</span>		<span class="comment">// can merge into a single char class.</span>
<a id="L1128"></a><span class="ln">  1128</span>		n := len(p.stack)
<a id="L1129"></a><span class="ln">  1129</span>		if n &gt;= 3 &amp;&amp; p.stack[n-2].Op == opVerticalBar &amp;&amp; isCharClass(p.stack[n-1]) &amp;&amp; isCharClass(p.stack[n-3]) {
<a id="L1130"></a><span class="ln">  1130</span>			re1 := p.stack[n-1]
<a id="L1131"></a><span class="ln">  1131</span>			re3 := p.stack[n-3]
<a id="L1132"></a><span class="ln">  1132</span>			<span class="comment">// Make re3 the more complex of the two.</span>
<a id="L1133"></a><span class="ln">  1133</span>			if re1.Op &gt; re3.Op {
<a id="L1134"></a><span class="ln">  1134</span>				re1, re3 = re3, re1
<a id="L1135"></a><span class="ln">  1135</span>				p.stack[n-3] = re3
<a id="L1136"></a><span class="ln">  1136</span>			}
<a id="L1137"></a><span class="ln">  1137</span>			mergeCharClass(re3, re1)
<a id="L1138"></a><span class="ln">  1138</span>			p.reuse(re1)
<a id="L1139"></a><span class="ln">  1139</span>			p.stack = p.stack[:n-1]
<a id="L1140"></a><span class="ln">  1140</span>			return true
<a id="L1141"></a><span class="ln">  1141</span>		}
<a id="L1142"></a><span class="ln">  1142</span>	
<a id="L1143"></a><span class="ln">  1143</span>		if n &gt;= 2 {
<a id="L1144"></a><span class="ln">  1144</span>			re1 := p.stack[n-1]
<a id="L1145"></a><span class="ln">  1145</span>			re2 := p.stack[n-2]
<a id="L1146"></a><span class="ln">  1146</span>			if re2.Op == opVerticalBar {
<a id="L1147"></a><span class="ln">  1147</span>				if n &gt;= 3 {
<a id="L1148"></a><span class="ln">  1148</span>					<span class="comment">// Now out of reach.</span>
<a id="L1149"></a><span class="ln">  1149</span>					<span class="comment">// Clean opportunistically.</span>
<a id="L1150"></a><span class="ln">  1150</span>					cleanAlt(p.stack[n-3])
<a id="L1151"></a><span class="ln">  1151</span>				}
<a id="L1152"></a><span class="ln">  1152</span>				p.stack[n-2] = re1
<a id="L1153"></a><span class="ln">  1153</span>				p.stack[n-1] = re2
<a id="L1154"></a><span class="ln">  1154</span>				return true
<a id="L1155"></a><span class="ln">  1155</span>			}
<a id="L1156"></a><span class="ln">  1156</span>		}
<a id="L1157"></a><span class="ln">  1157</span>		return false
<a id="L1158"></a><span class="ln">  1158</span>	}
<a id="L1159"></a><span class="ln">  1159</span>	
<a id="L1160"></a><span class="ln">  1160</span>	<span class="comment">// parseRightParen handles a ) in the input.</span>
<a id="L1161"></a><span class="ln">  1161</span>	func (p *parser) parseRightParen() error {
<a id="L1162"></a><span class="ln">  1162</span>		p.concat()
<a id="L1163"></a><span class="ln">  1163</span>		if p.swapVerticalBar() {
<a id="L1164"></a><span class="ln">  1164</span>			<span class="comment">// pop vertical bar</span>
<a id="L1165"></a><span class="ln">  1165</span>			p.stack = p.stack[:len(p.stack)-1]
<a id="L1166"></a><span class="ln">  1166</span>		}
<a id="L1167"></a><span class="ln">  1167</span>		p.alternate()
<a id="L1168"></a><span class="ln">  1168</span>	
<a id="L1169"></a><span class="ln">  1169</span>		n := len(p.stack)
<a id="L1170"></a><span class="ln">  1170</span>		if n &lt; 2 {
<a id="L1171"></a><span class="ln">  1171</span>			return &amp;Error{ErrInternalError, &#34;&#34;}
<a id="L1172"></a><span class="ln">  1172</span>		}
<a id="L1173"></a><span class="ln">  1173</span>		re1 := p.stack[n-1]
<a id="L1174"></a><span class="ln">  1174</span>		re2 := p.stack[n-2]
<a id="L1175"></a><span class="ln">  1175</span>		p.stack = p.stack[:n-2]
<a id="L1176"></a><span class="ln">  1176</span>		if re2.Op != opLeftParen {
<a id="L1177"></a><span class="ln">  1177</span>			return &amp;Error{ErrMissingParen, p.wholeRegexp}
<a id="L1178"></a><span class="ln">  1178</span>		}
<a id="L1179"></a><span class="ln">  1179</span>		<span class="comment">// Restore flags at time of paren.</span>
<a id="L1180"></a><span class="ln">  1180</span>		p.flags = re2.Flags
<a id="L1181"></a><span class="ln">  1181</span>		if re2.Cap == 0 {
<a id="L1182"></a><span class="ln">  1182</span>			<span class="comment">// Just for grouping.</span>
<a id="L1183"></a><span class="ln">  1183</span>			p.push(re1)
<a id="L1184"></a><span class="ln">  1184</span>		} else {
<a id="L1185"></a><span class="ln">  1185</span>			re2.Op = OpCapture
<a id="L1186"></a><span class="ln">  1186</span>			re2.Sub = re2.Sub0[:1]
<a id="L1187"></a><span class="ln">  1187</span>			re2.Sub[0] = re1
<a id="L1188"></a><span class="ln">  1188</span>			p.push(re2)
<a id="L1189"></a><span class="ln">  1189</span>		}
<a id="L1190"></a><span class="ln">  1190</span>		return nil
<a id="L1191"></a><span class="ln">  1191</span>	}
<a id="L1192"></a><span class="ln">  1192</span>	
<a id="L1193"></a><span class="ln">  1193</span>	<span class="comment">// parseEscape parses an escape sequence at the beginning of s</span>
<a id="L1194"></a><span class="ln">  1194</span>	<span class="comment">// and returns the rune.</span>
<a id="L1195"></a><span class="ln">  1195</span>	func (p *parser) parseEscape(s string) (r rune, rest string, err error) {
<a id="L1196"></a><span class="ln">  1196</span>		t := s[1:]
<a id="L1197"></a><span class="ln">  1197</span>		if t == &#34;&#34; {
<a id="L1198"></a><span class="ln">  1198</span>			return 0, &#34;&#34;, &amp;Error{ErrTrailingBackslash, &#34;&#34;}
<a id="L1199"></a><span class="ln">  1199</span>		}
<a id="L1200"></a><span class="ln">  1200</span>		c, t, err := nextRune(t)
<a id="L1201"></a><span class="ln">  1201</span>		if err != nil {
<a id="L1202"></a><span class="ln">  1202</span>			return 0, &#34;&#34;, err
<a id="L1203"></a><span class="ln">  1203</span>		}
<a id="L1204"></a><span class="ln">  1204</span>	
<a id="L1205"></a><span class="ln">  1205</span>	Switch:
<a id="L1206"></a><span class="ln">  1206</span>		switch c {
<a id="L1207"></a><span class="ln">  1207</span>		default:
<a id="L1208"></a><span class="ln">  1208</span>			if c &lt; utf8.RuneSelf &amp;&amp; !isalnum(c) {
<a id="L1209"></a><span class="ln">  1209</span>				<span class="comment">// Escaped non-word characters are always themselves.</span>
<a id="L1210"></a><span class="ln">  1210</span>				<span class="comment">// PCRE is not quite so rigorous: it accepts things like</span>
<a id="L1211"></a><span class="ln">  1211</span>				<span class="comment">// \q, but we don&#39;t.  We once rejected \_, but too many</span>
<a id="L1212"></a><span class="ln">  1212</span>				<span class="comment">// programs and people insist on using it, so allow \_.</span>
<a id="L1213"></a><span class="ln">  1213</span>				return c, t, nil
<a id="L1214"></a><span class="ln">  1214</span>			}
<a id="L1215"></a><span class="ln">  1215</span>	
<a id="L1216"></a><span class="ln">  1216</span>		<span class="comment">// Octal escapes.</span>
<a id="L1217"></a><span class="ln">  1217</span>		case &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;:
<a id="L1218"></a><span class="ln">  1218</span>			<span class="comment">// Single non-zero digit is a backreference; not supported</span>
<a id="L1219"></a><span class="ln">  1219</span>			if t == &#34;&#34; || t[0] &lt; &#39;0&#39; || t[0] &gt; &#39;7&#39; {
<a id="L1220"></a><span class="ln">  1220</span>				break
<a id="L1221"></a><span class="ln">  1221</span>			}
<a id="L1222"></a><span class="ln">  1222</span>			fallthrough
<a id="L1223"></a><span class="ln">  1223</span>		case &#39;0&#39;:
<a id="L1224"></a><span class="ln">  1224</span>			<span class="comment">// Consume up to three octal digits; already have one.</span>
<a id="L1225"></a><span class="ln">  1225</span>			r = c - &#39;0&#39;
<a id="L1226"></a><span class="ln">  1226</span>			for i := 1; i &lt; 3; i++ {
<a id="L1227"></a><span class="ln">  1227</span>				if t == &#34;&#34; || t[0] &lt; &#39;0&#39; || t[0] &gt; &#39;7&#39; {
<a id="L1228"></a><span class="ln">  1228</span>					break
<a id="L1229"></a><span class="ln">  1229</span>				}
<a id="L1230"></a><span class="ln">  1230</span>				r = r*8 + rune(t[0]) - &#39;0&#39;
<a id="L1231"></a><span class="ln">  1231</span>				t = t[1:]
<a id="L1232"></a><span class="ln">  1232</span>			}
<a id="L1233"></a><span class="ln">  1233</span>			return r, t, nil
<a id="L1234"></a><span class="ln">  1234</span>	
<a id="L1235"></a><span class="ln">  1235</span>		<span class="comment">// Hexadecimal escapes.</span>
<a id="L1236"></a><span class="ln">  1236</span>		case &#39;x&#39;:
<a id="L1237"></a><span class="ln">  1237</span>			if t == &#34;&#34; {
<a id="L1238"></a><span class="ln">  1238</span>				break
<a id="L1239"></a><span class="ln">  1239</span>			}
<a id="L1240"></a><span class="ln">  1240</span>			if c, t, err = nextRune(t); err != nil {
<a id="L1241"></a><span class="ln">  1241</span>				return 0, &#34;&#34;, err
<a id="L1242"></a><span class="ln">  1242</span>			}
<a id="L1243"></a><span class="ln">  1243</span>			if c == &#39;{&#39; {
<a id="L1244"></a><span class="ln">  1244</span>				<span class="comment">// Any number of digits in braces.</span>
<a id="L1245"></a><span class="ln">  1245</span>				<span class="comment">// Perl accepts any text at all; it ignores all text</span>
<a id="L1246"></a><span class="ln">  1246</span>				<span class="comment">// after the first non-hex digit.  We require only hex digits,</span>
<a id="L1247"></a><span class="ln">  1247</span>				<span class="comment">// and at least one.</span>
<a id="L1248"></a><span class="ln">  1248</span>				nhex := 0
<a id="L1249"></a><span class="ln">  1249</span>				r = 0
<a id="L1250"></a><span class="ln">  1250</span>				for {
<a id="L1251"></a><span class="ln">  1251</span>					if t == &#34;&#34; {
<a id="L1252"></a><span class="ln">  1252</span>						break Switch
<a id="L1253"></a><span class="ln">  1253</span>					}
<a id="L1254"></a><span class="ln">  1254</span>					if c, t, err = nextRune(t); err != nil {
<a id="L1255"></a><span class="ln">  1255</span>						return 0, &#34;&#34;, err
<a id="L1256"></a><span class="ln">  1256</span>					}
<a id="L1257"></a><span class="ln">  1257</span>					if c == &#39;}&#39; {
<a id="L1258"></a><span class="ln">  1258</span>						break
<a id="L1259"></a><span class="ln">  1259</span>					}
<a id="L1260"></a><span class="ln">  1260</span>					v := unhex(c)
<a id="L1261"></a><span class="ln">  1261</span>					if v &lt; 0 {
<a id="L1262"></a><span class="ln">  1262</span>						break Switch
<a id="L1263"></a><span class="ln">  1263</span>					}
<a id="L1264"></a><span class="ln">  1264</span>					r = r*16 + v
<a id="L1265"></a><span class="ln">  1265</span>					if r &gt; unicode.MaxRune {
<a id="L1266"></a><span class="ln">  1266</span>						break Switch
<a id="L1267"></a><span class="ln">  1267</span>					}
<a id="L1268"></a><span class="ln">  1268</span>					nhex++
<a id="L1269"></a><span class="ln">  1269</span>				}
<a id="L1270"></a><span class="ln">  1270</span>				if nhex == 0 {
<a id="L1271"></a><span class="ln">  1271</span>					break Switch
<a id="L1272"></a><span class="ln">  1272</span>				}
<a id="L1273"></a><span class="ln">  1273</span>				return r, t, nil
<a id="L1274"></a><span class="ln">  1274</span>			}
<a id="L1275"></a><span class="ln">  1275</span>	
<a id="L1276"></a><span class="ln">  1276</span>			<span class="comment">// Easy case: two hex digits.</span>
<a id="L1277"></a><span class="ln">  1277</span>			x := unhex(c)
<a id="L1278"></a><span class="ln">  1278</span>			if c, t, err = nextRune(t); err != nil {
<a id="L1279"></a><span class="ln">  1279</span>				return 0, &#34;&#34;, err
<a id="L1280"></a><span class="ln">  1280</span>			}
<a id="L1281"></a><span class="ln">  1281</span>			y := unhex(c)
<a id="L1282"></a><span class="ln">  1282</span>			if x &lt; 0 || y &lt; 0 {
<a id="L1283"></a><span class="ln">  1283</span>				break
<a id="L1284"></a><span class="ln">  1284</span>			}
<a id="L1285"></a><span class="ln">  1285</span>			return x*16 + y, t, nil
<a id="L1286"></a><span class="ln">  1286</span>	
<a id="L1287"></a><span class="ln">  1287</span>		<span class="comment">// C escapes.  There is no case &#39;b&#39;, to avoid misparsing</span>
<a id="L1288"></a><span class="ln">  1288</span>		<span class="comment">// the Perl word-boundary \b as the C backspace \b</span>
<a id="L1289"></a><span class="ln">  1289</span>		<span class="comment">// when in POSIX mode.  In Perl, /\b/ means word-boundary</span>
<a id="L1290"></a><span class="ln">  1290</span>		<span class="comment">// but /[\b]/ means backspace.  We don&#39;t support that.</span>
<a id="L1291"></a><span class="ln">  1291</span>		<span class="comment">// If you want a backspace, embed a literal backspace</span>
<a id="L1292"></a><span class="ln">  1292</span>		<span class="comment">// character or use \x08.</span>
<a id="L1293"></a><span class="ln">  1293</span>		case &#39;a&#39;:
<a id="L1294"></a><span class="ln">  1294</span>			return &#39;\a&#39;, t, err
<a id="L1295"></a><span class="ln">  1295</span>		case &#39;f&#39;:
<a id="L1296"></a><span class="ln">  1296</span>			return &#39;\f&#39;, t, err
<a id="L1297"></a><span class="ln">  1297</span>		case &#39;n&#39;:
<a id="L1298"></a><span class="ln">  1298</span>			return &#39;\n&#39;, t, err
<a id="L1299"></a><span class="ln">  1299</span>		case &#39;r&#39;:
<a id="L1300"></a><span class="ln">  1300</span>			return &#39;\r&#39;, t, err
<a id="L1301"></a><span class="ln">  1301</span>		case &#39;t&#39;:
<a id="L1302"></a><span class="ln">  1302</span>			return &#39;\t&#39;, t, err
<a id="L1303"></a><span class="ln">  1303</span>		case &#39;v&#39;:
<a id="L1304"></a><span class="ln">  1304</span>			return &#39;\v&#39;, t, err
<a id="L1305"></a><span class="ln">  1305</span>		}
<a id="L1306"></a><span class="ln">  1306</span>		return 0, &#34;&#34;, &amp;Error{ErrInvalidEscape, s[:len(s)-len(t)]}
<a id="L1307"></a><span class="ln">  1307</span>	}
<a id="L1308"></a><span class="ln">  1308</span>	
<a id="L1309"></a><span class="ln">  1309</span>	<span class="comment">// parseClassChar parses a character class character at the beginning of s</span>
<a id="L1310"></a><span class="ln">  1310</span>	<span class="comment">// and returns it.</span>
<a id="L1311"></a><span class="ln">  1311</span>	func (p *parser) parseClassChar(s, wholeClass string) (r rune, rest string, err error) {
<a id="L1312"></a><span class="ln">  1312</span>		if s == &#34;&#34; {
<a id="L1313"></a><span class="ln">  1313</span>			return 0, &#34;&#34;, &amp;Error{Code: ErrMissingBracket, Expr: wholeClass}
<a id="L1314"></a><span class="ln">  1314</span>		}
<a id="L1315"></a><span class="ln">  1315</span>	
<a id="L1316"></a><span class="ln">  1316</span>		<span class="comment">// Allow regular escape sequences even though</span>
<a id="L1317"></a><span class="ln">  1317</span>		<span class="comment">// many need not be escaped in this context.</span>
<a id="L1318"></a><span class="ln">  1318</span>		if s[0] == &#39;\\&#39; {
<a id="L1319"></a><span class="ln">  1319</span>			return p.parseEscape(s)
<a id="L1320"></a><span class="ln">  1320</span>		}
<a id="L1321"></a><span class="ln">  1321</span>	
<a id="L1322"></a><span class="ln">  1322</span>		return nextRune(s)
<a id="L1323"></a><span class="ln">  1323</span>	}
<a id="L1324"></a><span class="ln">  1324</span>	
<a id="L1325"></a><span class="ln">  1325</span>	type charGroup struct {
<a id="L1326"></a><span class="ln">  1326</span>		sign  int
<a id="L1327"></a><span class="ln">  1327</span>		class []rune
<a id="L1328"></a><span class="ln">  1328</span>	}
<a id="L1329"></a><span class="ln">  1329</span>	
<a id="L1330"></a><span class="ln">  1330</span>	<span class="comment">// parsePerlClassEscape parses a leading Perl character class escape like \d</span>
<a id="L1331"></a><span class="ln">  1331</span>	<span class="comment">// from the beginning of s.  If one is present, it appends the characters to r</span>
<a id="L1332"></a><span class="ln">  1332</span>	<span class="comment">// and returns the new slice r and the remainder of the string.</span>
<a id="L1333"></a><span class="ln">  1333</span>	func (p *parser) parsePerlClassEscape(s string, r []rune) (out []rune, rest string) {
<a id="L1334"></a><span class="ln">  1334</span>		if p.flags&amp;PerlX == 0 || len(s) &lt; 2 || s[0] != &#39;\\&#39; {
<a id="L1335"></a><span class="ln">  1335</span>			return
<a id="L1336"></a><span class="ln">  1336</span>		}
<a id="L1337"></a><span class="ln">  1337</span>		g := perlGroup[s[0:2]]
<a id="L1338"></a><span class="ln">  1338</span>		if g.sign == 0 {
<a id="L1339"></a><span class="ln">  1339</span>			return
<a id="L1340"></a><span class="ln">  1340</span>		}
<a id="L1341"></a><span class="ln">  1341</span>		return p.appendGroup(r, g), s[2:]
<a id="L1342"></a><span class="ln">  1342</span>	}
<a id="L1343"></a><span class="ln">  1343</span>	
<a id="L1344"></a><span class="ln">  1344</span>	<span class="comment">// parseNamedClass parses a leading POSIX named character class like [:alnum:]</span>
<a id="L1345"></a><span class="ln">  1345</span>	<span class="comment">// from the beginning of s.  If one is present, it appends the characters to r</span>
<a id="L1346"></a><span class="ln">  1346</span>	<span class="comment">// and returns the new slice r and the remainder of the string.</span>
<a id="L1347"></a><span class="ln">  1347</span>	func (p *parser) parseNamedClass(s string, r []rune) (out []rune, rest string, err error) {
<a id="L1348"></a><span class="ln">  1348</span>		if len(s) &lt; 2 || s[0] != &#39;[&#39; || s[1] != &#39;:&#39; {
<a id="L1349"></a><span class="ln">  1349</span>			return
<a id="L1350"></a><span class="ln">  1350</span>		}
<a id="L1351"></a><span class="ln">  1351</span>	
<a id="L1352"></a><span class="ln">  1352</span>		i := strings.Index(s[2:], &#34;:]&#34;)
<a id="L1353"></a><span class="ln">  1353</span>		if i &lt; 0 {
<a id="L1354"></a><span class="ln">  1354</span>			return
<a id="L1355"></a><span class="ln">  1355</span>		}
<a id="L1356"></a><span class="ln">  1356</span>		i += 2
<a id="L1357"></a><span class="ln">  1357</span>		name, s := s[0:i+2], s[i+2:]
<a id="L1358"></a><span class="ln">  1358</span>		g := posixGroup[name]
<a id="L1359"></a><span class="ln">  1359</span>		if g.sign == 0 {
<a id="L1360"></a><span class="ln">  1360</span>			return nil, &#34;&#34;, &amp;Error{ErrInvalidCharRange, name}
<a id="L1361"></a><span class="ln">  1361</span>		}
<a id="L1362"></a><span class="ln">  1362</span>		return p.appendGroup(r, g), s, nil
<a id="L1363"></a><span class="ln">  1363</span>	}
<a id="L1364"></a><span class="ln">  1364</span>	
<a id="L1365"></a><span class="ln">  1365</span>	func (p *parser) appendGroup(r []rune, g charGroup) []rune {
<a id="L1366"></a><span class="ln">  1366</span>		if p.flags&amp;FoldCase == 0 {
<a id="L1367"></a><span class="ln">  1367</span>			if g.sign &lt; 0 {
<a id="L1368"></a><span class="ln">  1368</span>				r = appendNegatedClass(r, g.class)
<a id="L1369"></a><span class="ln">  1369</span>			} else {
<a id="L1370"></a><span class="ln">  1370</span>				r = appendClass(r, g.class)
<a id="L1371"></a><span class="ln">  1371</span>			}
<a id="L1372"></a><span class="ln">  1372</span>		} else {
<a id="L1373"></a><span class="ln">  1373</span>			tmp := p.tmpClass[:0]
<a id="L1374"></a><span class="ln">  1374</span>			tmp = appendFoldedClass(tmp, g.class)
<a id="L1375"></a><span class="ln">  1375</span>			p.tmpClass = tmp
<a id="L1376"></a><span class="ln">  1376</span>			tmp = cleanClass(&amp;p.tmpClass)
<a id="L1377"></a><span class="ln">  1377</span>			if g.sign &lt; 0 {
<a id="L1378"></a><span class="ln">  1378</span>				r = appendNegatedClass(r, tmp)
<a id="L1379"></a><span class="ln">  1379</span>			} else {
<a id="L1380"></a><span class="ln">  1380</span>				r = appendClass(r, tmp)
<a id="L1381"></a><span class="ln">  1381</span>			}
<a id="L1382"></a><span class="ln">  1382</span>		}
<a id="L1383"></a><span class="ln">  1383</span>		return r
<a id="L1384"></a><span class="ln">  1384</span>	}
<a id="L1385"></a><span class="ln">  1385</span>	
<a id="L1386"></a><span class="ln">  1386</span>	var anyTable = &amp;unicode.RangeTable{
<a id="L1387"></a><span class="ln">  1387</span>		R16: []unicode.Range16{{Lo: 0, Hi: 1&lt;&lt;16 - 1, Stride: 1}},
<a id="L1388"></a><span class="ln">  1388</span>		R32: []unicode.Range32{{Lo: 1 &lt;&lt; 16, Hi: unicode.MaxRune, Stride: 1}},
<a id="L1389"></a><span class="ln">  1389</span>	}
<a id="L1390"></a><span class="ln">  1390</span>	
<a id="L1391"></a><span class="ln">  1391</span>	<span class="comment">// unicodeTable returns the unicode.RangeTable identified by name</span>
<a id="L1392"></a><span class="ln">  1392</span>	<span class="comment">// and the table of additional fold-equivalent code points.</span>
<a id="L1393"></a><span class="ln">  1393</span>	func unicodeTable(name string) (*unicode.RangeTable, *unicode.RangeTable) {
<a id="L1394"></a><span class="ln">  1394</span>		<span class="comment">// Special case: &#34;Any&#34; means any.</span>
<a id="L1395"></a><span class="ln">  1395</span>		if name == &#34;Any&#34; {
<a id="L1396"></a><span class="ln">  1396</span>			return anyTable, anyTable
<a id="L1397"></a><span class="ln">  1397</span>		}
<a id="L1398"></a><span class="ln">  1398</span>		if t := unicode.Categories[name]; t != nil {
<a id="L1399"></a><span class="ln">  1399</span>			return t, unicode.FoldCategory[name]
<a id="L1400"></a><span class="ln">  1400</span>		}
<a id="L1401"></a><span class="ln">  1401</span>		if t := unicode.Scripts[name]; t != nil {
<a id="L1402"></a><span class="ln">  1402</span>			return t, unicode.FoldScript[name]
<a id="L1403"></a><span class="ln">  1403</span>		}
<a id="L1404"></a><span class="ln">  1404</span>		return nil, nil
<a id="L1405"></a><span class="ln">  1405</span>	}
<a id="L1406"></a><span class="ln">  1406</span>	
<a id="L1407"></a><span class="ln">  1407</span>	<span class="comment">// parseUnicodeClass parses a leading Unicode character class like \p{Han}</span>
<a id="L1408"></a><span class="ln">  1408</span>	<span class="comment">// from the beginning of s.  If one is present, it appends the characters to r</span>
<a id="L1409"></a><span class="ln">  1409</span>	<span class="comment">// and returns the new slice r and the remainder of the string.</span>
<a id="L1410"></a><span class="ln">  1410</span>	func (p *parser) parseUnicodeClass(s string, r []rune) (out []rune, rest string, err error) {
<a id="L1411"></a><span class="ln">  1411</span>		if p.flags&amp;UnicodeGroups == 0 || len(s) &lt; 2 || s[0] != &#39;\\&#39; || s[1] != &#39;p&#39; &amp;&amp; s[1] != &#39;P&#39; {
<a id="L1412"></a><span class="ln">  1412</span>			return
<a id="L1413"></a><span class="ln">  1413</span>		}
<a id="L1414"></a><span class="ln">  1414</span>	
<a id="L1415"></a><span class="ln">  1415</span>		<span class="comment">// Committed to parse or return error.</span>
<a id="L1416"></a><span class="ln">  1416</span>		sign := +1
<a id="L1417"></a><span class="ln">  1417</span>		if s[1] == &#39;P&#39; {
<a id="L1418"></a><span class="ln">  1418</span>			sign = -1
<a id="L1419"></a><span class="ln">  1419</span>		}
<a id="L1420"></a><span class="ln">  1420</span>		t := s[2:]
<a id="L1421"></a><span class="ln">  1421</span>		c, t, err := nextRune(t)
<a id="L1422"></a><span class="ln">  1422</span>		if err != nil {
<a id="L1423"></a><span class="ln">  1423</span>			return
<a id="L1424"></a><span class="ln">  1424</span>		}
<a id="L1425"></a><span class="ln">  1425</span>		var seq, name string
<a id="L1426"></a><span class="ln">  1426</span>		if c != &#39;{&#39; {
<a id="L1427"></a><span class="ln">  1427</span>			<span class="comment">// Single-letter name.</span>
<a id="L1428"></a><span class="ln">  1428</span>			seq = s[:len(s)-len(t)]
<a id="L1429"></a><span class="ln">  1429</span>			name = seq[2:]
<a id="L1430"></a><span class="ln">  1430</span>		} else {
<a id="L1431"></a><span class="ln">  1431</span>			<span class="comment">// Name is in braces.</span>
<a id="L1432"></a><span class="ln">  1432</span>			end := strings.IndexRune(s, &#39;}&#39;)
<a id="L1433"></a><span class="ln">  1433</span>			if end &lt; 0 {
<a id="L1434"></a><span class="ln">  1434</span>				if err = checkUTF8(s); err != nil {
<a id="L1435"></a><span class="ln">  1435</span>					return
<a id="L1436"></a><span class="ln">  1436</span>				}
<a id="L1437"></a><span class="ln">  1437</span>				return nil, &#34;&#34;, &amp;Error{ErrInvalidCharRange, s}
<a id="L1438"></a><span class="ln">  1438</span>			}
<a id="L1439"></a><span class="ln">  1439</span>			seq, t = s[:end+1], s[end+1:]
<a id="L1440"></a><span class="ln">  1440</span>			name = s[3:end]
<a id="L1441"></a><span class="ln">  1441</span>			if err = checkUTF8(name); err != nil {
<a id="L1442"></a><span class="ln">  1442</span>				return
<a id="L1443"></a><span class="ln">  1443</span>			}
<a id="L1444"></a><span class="ln">  1444</span>		}
<a id="L1445"></a><span class="ln">  1445</span>	
<a id="L1446"></a><span class="ln">  1446</span>		<span class="comment">// Group can have leading negation too.  \p{^Han} == \P{Han}, \P{^Han} == \p{Han}.</span>
<a id="L1447"></a><span class="ln">  1447</span>		if name != &#34;&#34; &amp;&amp; name[0] == &#39;^&#39; {
<a id="L1448"></a><span class="ln">  1448</span>			sign = -sign
<a id="L1449"></a><span class="ln">  1449</span>			name = name[1:]
<a id="L1450"></a><span class="ln">  1450</span>		}
<a id="L1451"></a><span class="ln">  1451</span>	
<a id="L1452"></a><span class="ln">  1452</span>		tab, fold := unicodeTable(name)
<a id="L1453"></a><span class="ln">  1453</span>		if tab == nil {
<a id="L1454"></a><span class="ln">  1454</span>			return nil, &#34;&#34;, &amp;Error{ErrInvalidCharRange, seq}
<a id="L1455"></a><span class="ln">  1455</span>		}
<a id="L1456"></a><span class="ln">  1456</span>	
<a id="L1457"></a><span class="ln">  1457</span>		if p.flags&amp;FoldCase == 0 || fold == nil {
<a id="L1458"></a><span class="ln">  1458</span>			if sign &gt; 0 {
<a id="L1459"></a><span class="ln">  1459</span>				r = appendTable(r, tab)
<a id="L1460"></a><span class="ln">  1460</span>			} else {
<a id="L1461"></a><span class="ln">  1461</span>				r = appendNegatedTable(r, tab)
<a id="L1462"></a><span class="ln">  1462</span>			}
<a id="L1463"></a><span class="ln">  1463</span>		} else {
<a id="L1464"></a><span class="ln">  1464</span>			<span class="comment">// Merge and clean tab and fold in a temporary buffer.</span>
<a id="L1465"></a><span class="ln">  1465</span>			<span class="comment">// This is necessary for the negative case and just tidy</span>
<a id="L1466"></a><span class="ln">  1466</span>			<span class="comment">// for the positive case.</span>
<a id="L1467"></a><span class="ln">  1467</span>			tmp := p.tmpClass[:0]
<a id="L1468"></a><span class="ln">  1468</span>			tmp = appendTable(tmp, tab)
<a id="L1469"></a><span class="ln">  1469</span>			tmp = appendTable(tmp, fold)
<a id="L1470"></a><span class="ln">  1470</span>			p.tmpClass = tmp
<a id="L1471"></a><span class="ln">  1471</span>			tmp = cleanClass(&amp;p.tmpClass)
<a id="L1472"></a><span class="ln">  1472</span>			if sign &gt; 0 {
<a id="L1473"></a><span class="ln">  1473</span>				r = appendClass(r, tmp)
<a id="L1474"></a><span class="ln">  1474</span>			} else {
<a id="L1475"></a><span class="ln">  1475</span>				r = appendNegatedClass(r, tmp)
<a id="L1476"></a><span class="ln">  1476</span>			}
<a id="L1477"></a><span class="ln">  1477</span>		}
<a id="L1478"></a><span class="ln">  1478</span>		return r, t, nil
<a id="L1479"></a><span class="ln">  1479</span>	}
<a id="L1480"></a><span class="ln">  1480</span>	
<a id="L1481"></a><span class="ln">  1481</span>	<span class="comment">// parseClass parses a character class at the beginning of s</span>
<a id="L1482"></a><span class="ln">  1482</span>	<span class="comment">// and pushes it onto the parse stack.</span>
<a id="L1483"></a><span class="ln">  1483</span>	func (p *parser) parseClass(s string) (rest string, err error) {
<a id="L1484"></a><span class="ln">  1484</span>		t := s[1:] <span class="comment">// chop [</span>
<a id="L1485"></a><span class="ln">  1485</span>		re := p.newRegexp(OpCharClass)
<a id="L1486"></a><span class="ln">  1486</span>		re.Flags = p.flags
<a id="L1487"></a><span class="ln">  1487</span>		re.Rune = re.Rune0[:0]
<a id="L1488"></a><span class="ln">  1488</span>	
<a id="L1489"></a><span class="ln">  1489</span>		sign := +1
<a id="L1490"></a><span class="ln">  1490</span>		if t != &#34;&#34; &amp;&amp; t[0] == &#39;^&#39; {
<a id="L1491"></a><span class="ln">  1491</span>			sign = -1
<a id="L1492"></a><span class="ln">  1492</span>			t = t[1:]
<a id="L1493"></a><span class="ln">  1493</span>	
<a id="L1494"></a><span class="ln">  1494</span>			<span class="comment">// If character class does not match \n, add it here,</span>
<a id="L1495"></a><span class="ln">  1495</span>			<span class="comment">// so that negation later will do the right thing.</span>
<a id="L1496"></a><span class="ln">  1496</span>			if p.flags&amp;ClassNL == 0 {
<a id="L1497"></a><span class="ln">  1497</span>				re.Rune = append(re.Rune, &#39;\n&#39;, &#39;\n&#39;)
<a id="L1498"></a><span class="ln">  1498</span>			}
<a id="L1499"></a><span class="ln">  1499</span>		}
<a id="L1500"></a><span class="ln">  1500</span>	
<a id="L1501"></a><span class="ln">  1501</span>		class := re.Rune
<a id="L1502"></a><span class="ln">  1502</span>		first := true <span class="comment">// ] and - are okay as first char in class</span>
<a id="L1503"></a><span class="ln">  1503</span>		for t == &#34;&#34; || t[0] != &#39;]&#39; || first {
<a id="L1504"></a><span class="ln">  1504</span>			<span class="comment">// POSIX: - is only okay unescaped as first or last in class.</span>
<a id="L1505"></a><span class="ln">  1505</span>			<span class="comment">// Perl: - is okay anywhere.</span>
<a id="L1506"></a><span class="ln">  1506</span>			if t != &#34;&#34; &amp;&amp; t[0] == &#39;-&#39; &amp;&amp; p.flags&amp;PerlX == 0 &amp;&amp; !first &amp;&amp; (len(t) == 1 || t[1] != &#39;]&#39;) {
<a id="L1507"></a><span class="ln">  1507</span>				_, size := utf8.DecodeRuneInString(t[1:])
<a id="L1508"></a><span class="ln">  1508</span>				return &#34;&#34;, &amp;Error{Code: ErrInvalidCharRange, Expr: t[:1+size]}
<a id="L1509"></a><span class="ln">  1509</span>			}
<a id="L1510"></a><span class="ln">  1510</span>			first = false
<a id="L1511"></a><span class="ln">  1511</span>	
<a id="L1512"></a><span class="ln">  1512</span>			<span class="comment">// Look for POSIX [:alnum:] etc.</span>
<a id="L1513"></a><span class="ln">  1513</span>			if len(t) &gt; 2 &amp;&amp; t[0] == &#39;[&#39; &amp;&amp; t[1] == &#39;:&#39; {
<a id="L1514"></a><span class="ln">  1514</span>				nclass, nt, err := p.parseNamedClass(t, class)
<a id="L1515"></a><span class="ln">  1515</span>				if err != nil {
<a id="L1516"></a><span class="ln">  1516</span>					return &#34;&#34;, err
<a id="L1517"></a><span class="ln">  1517</span>				}
<a id="L1518"></a><span class="ln">  1518</span>				if nclass != nil {
<a id="L1519"></a><span class="ln">  1519</span>					class, t = nclass, nt
<a id="L1520"></a><span class="ln">  1520</span>					continue
<a id="L1521"></a><span class="ln">  1521</span>				}
<a id="L1522"></a><span class="ln">  1522</span>			}
<a id="L1523"></a><span class="ln">  1523</span>	
<a id="L1524"></a><span class="ln">  1524</span>			<span class="comment">// Look for Unicode character group like \p{Han}.</span>
<a id="L1525"></a><span class="ln">  1525</span>			nclass, nt, err := p.parseUnicodeClass(t, class)
<a id="L1526"></a><span class="ln">  1526</span>			if err != nil {
<a id="L1527"></a><span class="ln">  1527</span>				return &#34;&#34;, err
<a id="L1528"></a><span class="ln">  1528</span>			}
<a id="L1529"></a><span class="ln">  1529</span>			if nclass != nil {
<a id="L1530"></a><span class="ln">  1530</span>				class, t = nclass, nt
<a id="L1531"></a><span class="ln">  1531</span>				continue
<a id="L1532"></a><span class="ln">  1532</span>			}
<a id="L1533"></a><span class="ln">  1533</span>	
<a id="L1534"></a><span class="ln">  1534</span>			<span class="comment">// Look for Perl character class symbols (extension).</span>
<a id="L1535"></a><span class="ln">  1535</span>			if nclass, nt := p.parsePerlClassEscape(t, class); nclass != nil {
<a id="L1536"></a><span class="ln">  1536</span>				class, t = nclass, nt
<a id="L1537"></a><span class="ln">  1537</span>				continue
<a id="L1538"></a><span class="ln">  1538</span>			}
<a id="L1539"></a><span class="ln">  1539</span>	
<a id="L1540"></a><span class="ln">  1540</span>			<span class="comment">// Single character or simple range.</span>
<a id="L1541"></a><span class="ln">  1541</span>			rng := t
<a id="L1542"></a><span class="ln">  1542</span>			var lo, hi rune
<a id="L1543"></a><span class="ln">  1543</span>			if lo, t, err = p.parseClassChar(t, s); err != nil {
<a id="L1544"></a><span class="ln">  1544</span>				return &#34;&#34;, err
<a id="L1545"></a><span class="ln">  1545</span>			}
<a id="L1546"></a><span class="ln">  1546</span>			hi = lo
<a id="L1547"></a><span class="ln">  1547</span>			<span class="comment">// [a-] means (a|-) so check for final ].</span>
<a id="L1548"></a><span class="ln">  1548</span>			if len(t) &gt;= 2 &amp;&amp; t[0] == &#39;-&#39; &amp;&amp; t[1] != &#39;]&#39; {
<a id="L1549"></a><span class="ln">  1549</span>				t = t[1:]
<a id="L1550"></a><span class="ln">  1550</span>				if hi, t, err = p.parseClassChar(t, s); err != nil {
<a id="L1551"></a><span class="ln">  1551</span>					return &#34;&#34;, err
<a id="L1552"></a><span class="ln">  1552</span>				}
<a id="L1553"></a><span class="ln">  1553</span>				if hi &lt; lo {
<a id="L1554"></a><span class="ln">  1554</span>					rng = rng[:len(rng)-len(t)]
<a id="L1555"></a><span class="ln">  1555</span>					return &#34;&#34;, &amp;Error{Code: ErrInvalidCharRange, Expr: rng}
<a id="L1556"></a><span class="ln">  1556</span>				}
<a id="L1557"></a><span class="ln">  1557</span>			}
<a id="L1558"></a><span class="ln">  1558</span>			if p.flags&amp;FoldCase == 0 {
<a id="L1559"></a><span class="ln">  1559</span>				class = appendRange(class, lo, hi)
<a id="L1560"></a><span class="ln">  1560</span>			} else {
<a id="L1561"></a><span class="ln">  1561</span>				class = appendFoldedRange(class, lo, hi)
<a id="L1562"></a><span class="ln">  1562</span>			}
<a id="L1563"></a><span class="ln">  1563</span>		}
<a id="L1564"></a><span class="ln">  1564</span>		t = t[1:] <span class="comment">// chop ]</span>
<a id="L1565"></a><span class="ln">  1565</span>	
<a id="L1566"></a><span class="ln">  1566</span>		<span class="comment">// Use &amp;re.Rune instead of &amp;class to avoid allocation.</span>
<a id="L1567"></a><span class="ln">  1567</span>		re.Rune = class
<a id="L1568"></a><span class="ln">  1568</span>		class = cleanClass(&amp;re.Rune)
<a id="L1569"></a><span class="ln">  1569</span>		if sign &lt; 0 {
<a id="L1570"></a><span class="ln">  1570</span>			class = negateClass(class)
<a id="L1571"></a><span class="ln">  1571</span>		}
<a id="L1572"></a><span class="ln">  1572</span>		re.Rune = class
<a id="L1573"></a><span class="ln">  1573</span>		p.push(re)
<a id="L1574"></a><span class="ln">  1574</span>		return t, nil
<a id="L1575"></a><span class="ln">  1575</span>	}
<a id="L1576"></a><span class="ln">  1576</span>	
<a id="L1577"></a><span class="ln">  1577</span>	<span class="comment">// cleanClass sorts the ranges (pairs of elements of r),</span>
<a id="L1578"></a><span class="ln">  1578</span>	<span class="comment">// merges them, and eliminates duplicates.</span>
<a id="L1579"></a><span class="ln">  1579</span>	func cleanClass(rp *[]rune) []rune {
<a id="L1580"></a><span class="ln">  1580</span>	
<a id="L1581"></a><span class="ln">  1581</span>		<span class="comment">// Sort by lo increasing, hi decreasing to break ties.</span>
<a id="L1582"></a><span class="ln">  1582</span>		sort.Sort(ranges{rp})
<a id="L1583"></a><span class="ln">  1583</span>	
<a id="L1584"></a><span class="ln">  1584</span>		r := *rp
<a id="L1585"></a><span class="ln">  1585</span>		if len(r) &lt; 2 {
<a id="L1586"></a><span class="ln">  1586</span>			return r
<a id="L1587"></a><span class="ln">  1587</span>		}
<a id="L1588"></a><span class="ln">  1588</span>	
<a id="L1589"></a><span class="ln">  1589</span>		<span class="comment">// Merge abutting, overlapping.</span>
<a id="L1590"></a><span class="ln">  1590</span>		w := 2 <span class="comment">// write index</span>
<a id="L1591"></a><span class="ln">  1591</span>		for i := 2; i &lt; len(r); i += 2 {
<a id="L1592"></a><span class="ln">  1592</span>			lo, hi := r[i], r[i+1]
<a id="L1593"></a><span class="ln">  1593</span>			if lo &lt;= r[w-1]+1 {
<a id="L1594"></a><span class="ln">  1594</span>				<span class="comment">// merge with previous range</span>
<a id="L1595"></a><span class="ln">  1595</span>				if hi &gt; r[w-1] {
<a id="L1596"></a><span class="ln">  1596</span>					r[w-1] = hi
<a id="L1597"></a><span class="ln">  1597</span>				}
<a id="L1598"></a><span class="ln">  1598</span>				continue
<a id="L1599"></a><span class="ln">  1599</span>			}
<a id="L1600"></a><span class="ln">  1600</span>			<span class="comment">// new disjoint range</span>
<a id="L1601"></a><span class="ln">  1601</span>			r[w] = lo
<a id="L1602"></a><span class="ln">  1602</span>			r[w+1] = hi
<a id="L1603"></a><span class="ln">  1603</span>			w += 2
<a id="L1604"></a><span class="ln">  1604</span>		}
<a id="L1605"></a><span class="ln">  1605</span>	
<a id="L1606"></a><span class="ln">  1606</span>		return r[:w]
<a id="L1607"></a><span class="ln">  1607</span>	}
<a id="L1608"></a><span class="ln">  1608</span>	
<a id="L1609"></a><span class="ln">  1609</span>	<span class="comment">// appendLiteral returns the result of appending the literal x to the class r.</span>
<a id="L1610"></a><span class="ln">  1610</span>	func appendLiteral(r []rune, x rune, flags Flags) []rune {
<a id="L1611"></a><span class="ln">  1611</span>		if flags&amp;FoldCase != 0 {
<a id="L1612"></a><span class="ln">  1612</span>			return appendFoldedRange(r, x, x)
<a id="L1613"></a><span class="ln">  1613</span>		}
<a id="L1614"></a><span class="ln">  1614</span>		return appendRange(r, x, x)
<a id="L1615"></a><span class="ln">  1615</span>	}
<a id="L1616"></a><span class="ln">  1616</span>	
<a id="L1617"></a><span class="ln">  1617</span>	<span class="comment">// appendRange returns the result of appending the range lo-hi to the class r.</span>
<a id="L1618"></a><span class="ln">  1618</span>	func appendRange(r []rune, lo, hi rune) []rune {
<a id="L1619"></a><span class="ln">  1619</span>		<span class="comment">// Expand last range or next to last range if it overlaps or abuts.</span>
<a id="L1620"></a><span class="ln">  1620</span>		<span class="comment">// Checking two ranges helps when appending case-folded</span>
<a id="L1621"></a><span class="ln">  1621</span>		<span class="comment">// alphabets, so that one range can be expanding A-Z and the</span>
<a id="L1622"></a><span class="ln">  1622</span>		<span class="comment">// other expanding a-z.</span>
<a id="L1623"></a><span class="ln">  1623</span>		n := len(r)
<a id="L1624"></a><span class="ln">  1624</span>		for i := 2; i &lt;= 4; i += 2 { <span class="comment">// twice, using i=2, i=4</span>
<a id="L1625"></a><span class="ln">  1625</span>			if n &gt;= i {
<a id="L1626"></a><span class="ln">  1626</span>				rlo, rhi := r[n-i], r[n-i+1]
<a id="L1627"></a><span class="ln">  1627</span>				if lo &lt;= rhi+1 &amp;&amp; rlo &lt;= hi+1 {
<a id="L1628"></a><span class="ln">  1628</span>					if lo &lt; rlo {
<a id="L1629"></a><span class="ln">  1629</span>						r[n-i] = lo
<a id="L1630"></a><span class="ln">  1630</span>					}
<a id="L1631"></a><span class="ln">  1631</span>					if hi &gt; rhi {
<a id="L1632"></a><span class="ln">  1632</span>						r[n-i+1] = hi
<a id="L1633"></a><span class="ln">  1633</span>					}
<a id="L1634"></a><span class="ln">  1634</span>					return r
<a id="L1635"></a><span class="ln">  1635</span>				}
<a id="L1636"></a><span class="ln">  1636</span>			}
<a id="L1637"></a><span class="ln">  1637</span>		}
<a id="L1638"></a><span class="ln">  1638</span>	
<a id="L1639"></a><span class="ln">  1639</span>		return append(r, lo, hi)
<a id="L1640"></a><span class="ln">  1640</span>	}
<a id="L1641"></a><span class="ln">  1641</span>	
<a id="L1642"></a><span class="ln">  1642</span>	const (
<a id="L1643"></a><span class="ln">  1643</span>		<span class="comment">// minimum and maximum runes involved in folding.</span>
<a id="L1644"></a><span class="ln">  1644</span>		<span class="comment">// checked during test.</span>
<a id="L1645"></a><span class="ln">  1645</span>		minFold = 0x0041
<a id="L1646"></a><span class="ln">  1646</span>		maxFold = 0x1044f
<a id="L1647"></a><span class="ln">  1647</span>	)
<a id="L1648"></a><span class="ln">  1648</span>	
<a id="L1649"></a><span class="ln">  1649</span>	<span class="comment">// appendFoldedRange returns the result of appending the range lo-hi</span>
<a id="L1650"></a><span class="ln">  1650</span>	<span class="comment">// and its case folding-equivalent runes to the class r.</span>
<a id="L1651"></a><span class="ln">  1651</span>	func appendFoldedRange(r []rune, lo, hi rune) []rune {
<a id="L1652"></a><span class="ln">  1652</span>		<span class="comment">// Optimizations.</span>
<a id="L1653"></a><span class="ln">  1653</span>		if lo &lt;= minFold &amp;&amp; hi &gt;= maxFold {
<a id="L1654"></a><span class="ln">  1654</span>			<span class="comment">// Range is full: folding can&#39;t add more.</span>
<a id="L1655"></a><span class="ln">  1655</span>			return appendRange(r, lo, hi)
<a id="L1656"></a><span class="ln">  1656</span>		}
<a id="L1657"></a><span class="ln">  1657</span>		if hi &lt; minFold || lo &gt; maxFold {
<a id="L1658"></a><span class="ln">  1658</span>			<span class="comment">// Range is outside folding possibilities.</span>
<a id="L1659"></a><span class="ln">  1659</span>			return appendRange(r, lo, hi)
<a id="L1660"></a><span class="ln">  1660</span>		}
<a id="L1661"></a><span class="ln">  1661</span>		if lo &lt; minFold {
<a id="L1662"></a><span class="ln">  1662</span>			<span class="comment">// [lo, minFold-1] needs no folding.</span>
<a id="L1663"></a><span class="ln">  1663</span>			r = appendRange(r, lo, minFold-1)
<a id="L1664"></a><span class="ln">  1664</span>			lo = minFold
<a id="L1665"></a><span class="ln">  1665</span>		}
<a id="L1666"></a><span class="ln">  1666</span>		if hi &gt; maxFold {
<a id="L1667"></a><span class="ln">  1667</span>			<span class="comment">// [maxFold+1, hi] needs no folding.</span>
<a id="L1668"></a><span class="ln">  1668</span>			r = appendRange(r, maxFold+1, hi)
<a id="L1669"></a><span class="ln">  1669</span>			hi = maxFold
<a id="L1670"></a><span class="ln">  1670</span>		}
<a id="L1671"></a><span class="ln">  1671</span>	
<a id="L1672"></a><span class="ln">  1672</span>		<span class="comment">// Brute force.  Depend on appendRange to coalesce ranges on the fly.</span>
<a id="L1673"></a><span class="ln">  1673</span>		for c := lo; c &lt;= hi; c++ {
<a id="L1674"></a><span class="ln">  1674</span>			r = appendRange(r, c, c)
<a id="L1675"></a><span class="ln">  1675</span>			f := unicode.SimpleFold(c)
<a id="L1676"></a><span class="ln">  1676</span>			for f != c {
<a id="L1677"></a><span class="ln">  1677</span>				r = appendRange(r, f, f)
<a id="L1678"></a><span class="ln">  1678</span>				f = unicode.SimpleFold(f)
<a id="L1679"></a><span class="ln">  1679</span>			}
<a id="L1680"></a><span class="ln">  1680</span>		}
<a id="L1681"></a><span class="ln">  1681</span>		return r
<a id="L1682"></a><span class="ln">  1682</span>	}
<a id="L1683"></a><span class="ln">  1683</span>	
<a id="L1684"></a><span class="ln">  1684</span>	<span class="comment">// appendClass returns the result of appending the class x to the class r.</span>
<a id="L1685"></a><span class="ln">  1685</span>	<span class="comment">// It assume x is clean.</span>
<a id="L1686"></a><span class="ln">  1686</span>	func appendClass(r []rune, x []rune) []rune {
<a id="L1687"></a><span class="ln">  1687</span>		for i := 0; i &lt; len(x); i += 2 {
<a id="L1688"></a><span class="ln">  1688</span>			r = appendRange(r, x[i], x[i+1])
<a id="L1689"></a><span class="ln">  1689</span>		}
<a id="L1690"></a><span class="ln">  1690</span>		return r
<a id="L1691"></a><span class="ln">  1691</span>	}
<a id="L1692"></a><span class="ln">  1692</span>	
<a id="L1693"></a><span class="ln">  1693</span>	<span class="comment">// appendFolded returns the result of appending the case folding of the class x to the class r.</span>
<a id="L1694"></a><span class="ln">  1694</span>	func appendFoldedClass(r []rune, x []rune) []rune {
<a id="L1695"></a><span class="ln">  1695</span>		for i := 0; i &lt; len(x); i += 2 {
<a id="L1696"></a><span class="ln">  1696</span>			r = appendFoldedRange(r, x[i], x[i+1])
<a id="L1697"></a><span class="ln">  1697</span>		}
<a id="L1698"></a><span class="ln">  1698</span>		return r
<a id="L1699"></a><span class="ln">  1699</span>	}
<a id="L1700"></a><span class="ln">  1700</span>	
<a id="L1701"></a><span class="ln">  1701</span>	<span class="comment">// appendNegatedClass returns the result of appending the negation of the class x to the class r.</span>
<a id="L1702"></a><span class="ln">  1702</span>	<span class="comment">// It assumes x is clean.</span>
<a id="L1703"></a><span class="ln">  1703</span>	func appendNegatedClass(r []rune, x []rune) []rune {
<a id="L1704"></a><span class="ln">  1704</span>		nextLo := &#39;\u0000&#39;
<a id="L1705"></a><span class="ln">  1705</span>		for i := 0; i &lt; len(x); i += 2 {
<a id="L1706"></a><span class="ln">  1706</span>			lo, hi := x[i], x[i+1]
<a id="L1707"></a><span class="ln">  1707</span>			if nextLo &lt;= lo-1 {
<a id="L1708"></a><span class="ln">  1708</span>				r = appendRange(r, nextLo, lo-1)
<a id="L1709"></a><span class="ln">  1709</span>			}
<a id="L1710"></a><span class="ln">  1710</span>			nextLo = hi + 1
<a id="L1711"></a><span class="ln">  1711</span>		}
<a id="L1712"></a><span class="ln">  1712</span>		if nextLo &lt;= unicode.MaxRune {
<a id="L1713"></a><span class="ln">  1713</span>			r = appendRange(r, nextLo, unicode.MaxRune)
<a id="L1714"></a><span class="ln">  1714</span>		}
<a id="L1715"></a><span class="ln">  1715</span>		return r
<a id="L1716"></a><span class="ln">  1716</span>	}
<a id="L1717"></a><span class="ln">  1717</span>	
<a id="L1718"></a><span class="ln">  1718</span>	<span class="comment">// appendTable returns the result of appending x to the class r.</span>
<a id="L1719"></a><span class="ln">  1719</span>	func appendTable(r []rune, x *unicode.RangeTable) []rune {
<a id="L1720"></a><span class="ln">  1720</span>		for _, xr := range x.R16 {
<a id="L1721"></a><span class="ln">  1721</span>			lo, hi, stride := rune(xr.Lo), rune(xr.Hi), rune(xr.Stride)
<a id="L1722"></a><span class="ln">  1722</span>			if stride == 1 {
<a id="L1723"></a><span class="ln">  1723</span>				r = appendRange(r, lo, hi)
<a id="L1724"></a><span class="ln">  1724</span>				continue
<a id="L1725"></a><span class="ln">  1725</span>			}
<a id="L1726"></a><span class="ln">  1726</span>			for c := lo; c &lt;= hi; c += stride {
<a id="L1727"></a><span class="ln">  1727</span>				r = appendRange(r, c, c)
<a id="L1728"></a><span class="ln">  1728</span>			}
<a id="L1729"></a><span class="ln">  1729</span>		}
<a id="L1730"></a><span class="ln">  1730</span>		for _, xr := range x.R32 {
<a id="L1731"></a><span class="ln">  1731</span>			lo, hi, stride := rune(xr.Lo), rune(xr.Hi), rune(xr.Stride)
<a id="L1732"></a><span class="ln">  1732</span>			if stride == 1 {
<a id="L1733"></a><span class="ln">  1733</span>				r = appendRange(r, lo, hi)
<a id="L1734"></a><span class="ln">  1734</span>				continue
<a id="L1735"></a><span class="ln">  1735</span>			}
<a id="L1736"></a><span class="ln">  1736</span>			for c := lo; c &lt;= hi; c += stride {
<a id="L1737"></a><span class="ln">  1737</span>				r = appendRange(r, c, c)
<a id="L1738"></a><span class="ln">  1738</span>			}
<a id="L1739"></a><span class="ln">  1739</span>		}
<a id="L1740"></a><span class="ln">  1740</span>		return r
<a id="L1741"></a><span class="ln">  1741</span>	}
<a id="L1742"></a><span class="ln">  1742</span>	
<a id="L1743"></a><span class="ln">  1743</span>	<span class="comment">// appendNegatedTable returns the result of appending the negation of x to the class r.</span>
<a id="L1744"></a><span class="ln">  1744</span>	func appendNegatedTable(r []rune, x *unicode.RangeTable) []rune {
<a id="L1745"></a><span class="ln">  1745</span>		nextLo := &#39;\u0000&#39; <span class="comment">// lo end of next class to add</span>
<a id="L1746"></a><span class="ln">  1746</span>		for _, xr := range x.R16 {
<a id="L1747"></a><span class="ln">  1747</span>			lo, hi, stride := rune(xr.Lo), rune(xr.Hi), rune(xr.Stride)
<a id="L1748"></a><span class="ln">  1748</span>			if stride == 1 {
<a id="L1749"></a><span class="ln">  1749</span>				if nextLo &lt;= lo-1 {
<a id="L1750"></a><span class="ln">  1750</span>					r = appendRange(r, nextLo, lo-1)
<a id="L1751"></a><span class="ln">  1751</span>				}
<a id="L1752"></a><span class="ln">  1752</span>				nextLo = hi + 1
<a id="L1753"></a><span class="ln">  1753</span>				continue
<a id="L1754"></a><span class="ln">  1754</span>			}
<a id="L1755"></a><span class="ln">  1755</span>			for c := lo; c &lt;= hi; c += stride {
<a id="L1756"></a><span class="ln">  1756</span>				if nextLo &lt;= c-1 {
<a id="L1757"></a><span class="ln">  1757</span>					r = appendRange(r, nextLo, c-1)
<a id="L1758"></a><span class="ln">  1758</span>				}
<a id="L1759"></a><span class="ln">  1759</span>				nextLo = c + 1
<a id="L1760"></a><span class="ln">  1760</span>			}
<a id="L1761"></a><span class="ln">  1761</span>		}
<a id="L1762"></a><span class="ln">  1762</span>		for _, xr := range x.R32 {
<a id="L1763"></a><span class="ln">  1763</span>			lo, hi, stride := rune(xr.Lo), rune(xr.Hi), rune(xr.Stride)
<a id="L1764"></a><span class="ln">  1764</span>			if stride == 1 {
<a id="L1765"></a><span class="ln">  1765</span>				if nextLo &lt;= lo-1 {
<a id="L1766"></a><span class="ln">  1766</span>					r = appendRange(r, nextLo, lo-1)
<a id="L1767"></a><span class="ln">  1767</span>				}
<a id="L1768"></a><span class="ln">  1768</span>				nextLo = hi + 1
<a id="L1769"></a><span class="ln">  1769</span>				continue
<a id="L1770"></a><span class="ln">  1770</span>			}
<a id="L1771"></a><span class="ln">  1771</span>			for c := lo; c &lt;= hi; c += stride {
<a id="L1772"></a><span class="ln">  1772</span>				if nextLo &lt;= c-1 {
<a id="L1773"></a><span class="ln">  1773</span>					r = appendRange(r, nextLo, c-1)
<a id="L1774"></a><span class="ln">  1774</span>				}
<a id="L1775"></a><span class="ln">  1775</span>				nextLo = c + 1
<a id="L1776"></a><span class="ln">  1776</span>			}
<a id="L1777"></a><span class="ln">  1777</span>		}
<a id="L1778"></a><span class="ln">  1778</span>		if nextLo &lt;= unicode.MaxRune {
<a id="L1779"></a><span class="ln">  1779</span>			r = appendRange(r, nextLo, unicode.MaxRune)
<a id="L1780"></a><span class="ln">  1780</span>		}
<a id="L1781"></a><span class="ln">  1781</span>		return r
<a id="L1782"></a><span class="ln">  1782</span>	}
<a id="L1783"></a><span class="ln">  1783</span>	
<a id="L1784"></a><span class="ln">  1784</span>	<span class="comment">// negateClass overwrites r and returns r&#39;s negation.</span>
<a id="L1785"></a><span class="ln">  1785</span>	<span class="comment">// It assumes the class r is already clean.</span>
<a id="L1786"></a><span class="ln">  1786</span>	func negateClass(r []rune) []rune {
<a id="L1787"></a><span class="ln">  1787</span>		nextLo := &#39;\u0000&#39; <span class="comment">// lo end of next class to add</span>
<a id="L1788"></a><span class="ln">  1788</span>		w := 0             <span class="comment">// write index</span>
<a id="L1789"></a><span class="ln">  1789</span>		for i := 0; i &lt; len(r); i += 2 {
<a id="L1790"></a><span class="ln">  1790</span>			lo, hi := r[i], r[i+1]
<a id="L1791"></a><span class="ln">  1791</span>			if nextLo &lt;= lo-1 {
<a id="L1792"></a><span class="ln">  1792</span>				r[w] = nextLo
<a id="L1793"></a><span class="ln">  1793</span>				r[w+1] = lo - 1
<a id="L1794"></a><span class="ln">  1794</span>				w += 2
<a id="L1795"></a><span class="ln">  1795</span>			}
<a id="L1796"></a><span class="ln">  1796</span>			nextLo = hi + 1
<a id="L1797"></a><span class="ln">  1797</span>		}
<a id="L1798"></a><span class="ln">  1798</span>		r = r[:w]
<a id="L1799"></a><span class="ln">  1799</span>		if nextLo &lt;= unicode.MaxRune {
<a id="L1800"></a><span class="ln">  1800</span>			<span class="comment">// It&#39;s possible for the negation to have one more</span>
<a id="L1801"></a><span class="ln">  1801</span>			<span class="comment">// range - this one - than the original class, so use append.</span>
<a id="L1802"></a><span class="ln">  1802</span>			r = append(r, nextLo, unicode.MaxRune)
<a id="L1803"></a><span class="ln">  1803</span>		}
<a id="L1804"></a><span class="ln">  1804</span>		return r
<a id="L1805"></a><span class="ln">  1805</span>	}
<a id="L1806"></a><span class="ln">  1806</span>	
<a id="L1807"></a><span class="ln">  1807</span>	<span class="comment">// ranges implements sort.Interface on a []rune.</span>
<a id="L1808"></a><span class="ln">  1808</span>	<span class="comment">// The choice of receiver type definition is strange</span>
<a id="L1809"></a><span class="ln">  1809</span>	<span class="comment">// but avoids an allocation since we already have</span>
<a id="L1810"></a><span class="ln">  1810</span>	<span class="comment">// a *[]rune.</span>
<a id="L1811"></a><span class="ln">  1811</span>	type ranges struct {
<a id="L1812"></a><span class="ln">  1812</span>		p *[]rune
<a id="L1813"></a><span class="ln">  1813</span>	}
<a id="L1814"></a><span class="ln">  1814</span>	
<a id="L1815"></a><span class="ln">  1815</span>	func (ra ranges) Less(i, j int) bool {
<a id="L1816"></a><span class="ln">  1816</span>		p := *ra.p
<a id="L1817"></a><span class="ln">  1817</span>		i *= 2
<a id="L1818"></a><span class="ln">  1818</span>		j *= 2
<a id="L1819"></a><span class="ln">  1819</span>		return p[i] &lt; p[j] || p[i] == p[j] &amp;&amp; p[i+1] &gt; p[j+1]
<a id="L1820"></a><span class="ln">  1820</span>	}
<a id="L1821"></a><span class="ln">  1821</span>	
<a id="L1822"></a><span class="ln">  1822</span>	func (ra ranges) Len() int {
<a id="L1823"></a><span class="ln">  1823</span>		return len(*ra.p) / 2
<a id="L1824"></a><span class="ln">  1824</span>	}
<a id="L1825"></a><span class="ln">  1825</span>	
<a id="L1826"></a><span class="ln">  1826</span>	func (ra ranges) Swap(i, j int) {
<a id="L1827"></a><span class="ln">  1827</span>		p := *ra.p
<a id="L1828"></a><span class="ln">  1828</span>		i *= 2
<a id="L1829"></a><span class="ln">  1829</span>		j *= 2
<a id="L1830"></a><span class="ln">  1830</span>		p[i], p[i+1], p[j], p[j+1] = p[j], p[j+1], p[i], p[i+1]
<a id="L1831"></a><span class="ln">  1831</span>	}
<a id="L1832"></a><span class="ln">  1832</span>	
<a id="L1833"></a><span class="ln">  1833</span>	func checkUTF8(s string) error {
<a id="L1834"></a><span class="ln">  1834</span>		for s != &#34;&#34; {
<a id="L1835"></a><span class="ln">  1835</span>			rune, size := utf8.DecodeRuneInString(s)
<a id="L1836"></a><span class="ln">  1836</span>			if rune == utf8.RuneError &amp;&amp; size == 1 {
<a id="L1837"></a><span class="ln">  1837</span>				return &amp;Error{Code: ErrInvalidUTF8, Expr: s}
<a id="L1838"></a><span class="ln">  1838</span>			}
<a id="L1839"></a><span class="ln">  1839</span>			s = s[size:]
<a id="L1840"></a><span class="ln">  1840</span>		}
<a id="L1841"></a><span class="ln">  1841</span>		return nil
<a id="L1842"></a><span class="ln">  1842</span>	}
<a id="L1843"></a><span class="ln">  1843</span>	
<a id="L1844"></a><span class="ln">  1844</span>	func nextRune(s string) (c rune, t string, err error) {
<a id="L1845"></a><span class="ln">  1845</span>		c, size := utf8.DecodeRuneInString(s)
<a id="L1846"></a><span class="ln">  1846</span>		if c == utf8.RuneError &amp;&amp; size == 1 {
<a id="L1847"></a><span class="ln">  1847</span>			return 0, &#34;&#34;, &amp;Error{Code: ErrInvalidUTF8, Expr: s}
<a id="L1848"></a><span class="ln">  1848</span>		}
<a id="L1849"></a><span class="ln">  1849</span>		return c, s[size:], nil
<a id="L1850"></a><span class="ln">  1850</span>	}
<a id="L1851"></a><span class="ln">  1851</span>	
<a id="L1852"></a><span class="ln">  1852</span>	func isalnum(c rune) bool {
<a id="L1853"></a><span class="ln">  1853</span>		return &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; || &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39; || &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39;
<a id="L1854"></a><span class="ln">  1854</span>	}
<a id="L1855"></a><span class="ln">  1855</span>	
<a id="L1856"></a><span class="ln">  1856</span>	func unhex(c rune) rune {
<a id="L1857"></a><span class="ln">  1857</span>		if &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; {
<a id="L1858"></a><span class="ln">  1858</span>			return c - &#39;0&#39;
<a id="L1859"></a><span class="ln">  1859</span>		}
<a id="L1860"></a><span class="ln">  1860</span>		if &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;f&#39; {
<a id="L1861"></a><span class="ln">  1861</span>			return c - &#39;a&#39; + 10
<a id="L1862"></a><span class="ln">  1862</span>		}
<a id="L1863"></a><span class="ln">  1863</span>		if &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;F&#39; {
<a id="L1864"></a><span class="ln">  1864</span>			return c - &#39;A&#39; + 10
<a id="L1865"></a><span class="ln">  1865</span>		}
<a id="L1866"></a><span class="ln">  1866</span>		return -1
<a id="L1867"></a><span class="ln">  1867</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

