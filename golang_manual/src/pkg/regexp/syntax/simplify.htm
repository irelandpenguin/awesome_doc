<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/regexp/syntax/simplify.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/regexp/syntax/simplify.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package syntax
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// Simplify returns a regexp equivalent to re but without counted repetitions</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// and with various other simplifications, such as rewriting /(?:a+)+/ to /a+/.</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// The resulting regexp will execute correctly but its string representation</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// will not produce the same parse tree, because capturing parentheses</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// may have been duplicated or removed.  For example, the simplified form</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// for /(x){1,2}/ is /(x)(x)?/ but both parentheses capture as $1.</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// The returned regexp may share structure with or be the original.</span>
<a id="L14"></a><span class="ln">    14</span>	func (re *Regexp) Simplify() *Regexp {
<a id="L15"></a><span class="ln">    15</span>		if re == nil {
<a id="L16"></a><span class="ln">    16</span>			return nil
<a id="L17"></a><span class="ln">    17</span>		}
<a id="L18"></a><span class="ln">    18</span>		switch re.Op {
<a id="L19"></a><span class="ln">    19</span>		case OpCapture, OpConcat, OpAlternate:
<a id="L20"></a><span class="ln">    20</span>			<span class="comment">// Simplify children, building new Regexp if children change.</span>
<a id="L21"></a><span class="ln">    21</span>			nre := re
<a id="L22"></a><span class="ln">    22</span>			for i, sub := range re.Sub {
<a id="L23"></a><span class="ln">    23</span>				nsub := sub.Simplify()
<a id="L24"></a><span class="ln">    24</span>				if nre == re &amp;&amp; nsub != sub {
<a id="L25"></a><span class="ln">    25</span>					<span class="comment">// Start a copy.</span>
<a id="L26"></a><span class="ln">    26</span>					nre = new(Regexp)
<a id="L27"></a><span class="ln">    27</span>					*nre = *re
<a id="L28"></a><span class="ln">    28</span>					nre.Rune = nil
<a id="L29"></a><span class="ln">    29</span>					nre.Sub = append(nre.Sub0[:0], re.Sub[:i]...)
<a id="L30"></a><span class="ln">    30</span>				}
<a id="L31"></a><span class="ln">    31</span>				if nre != re {
<a id="L32"></a><span class="ln">    32</span>					nre.Sub = append(nre.Sub, nsub)
<a id="L33"></a><span class="ln">    33</span>				}
<a id="L34"></a><span class="ln">    34</span>			}
<a id="L35"></a><span class="ln">    35</span>			return nre
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>		case OpStar, OpPlus, OpQuest:
<a id="L38"></a><span class="ln">    38</span>			sub := re.Sub[0].Simplify()
<a id="L39"></a><span class="ln">    39</span>			return simplify1(re.Op, re.Flags, sub, re)
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>		case OpRepeat:
<a id="L42"></a><span class="ln">    42</span>			<span class="comment">// Special special case: x{0} matches the empty string</span>
<a id="L43"></a><span class="ln">    43</span>			<span class="comment">// and doesn&#39;t even need to consider x.</span>
<a id="L44"></a><span class="ln">    44</span>			if re.Min == 0 &amp;&amp; re.Max == 0 {
<a id="L45"></a><span class="ln">    45</span>				return &amp;Regexp{Op: OpEmptyMatch}
<a id="L46"></a><span class="ln">    46</span>			}
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>			<span class="comment">// The fun begins.</span>
<a id="L49"></a><span class="ln">    49</span>			sub := re.Sub[0].Simplify()
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>			<span class="comment">// x{n,} means at least n matches of x.</span>
<a id="L52"></a><span class="ln">    52</span>			if re.Max == -1 {
<a id="L53"></a><span class="ln">    53</span>				<span class="comment">// Special case: x{0,} is x*.</span>
<a id="L54"></a><span class="ln">    54</span>				if re.Min == 0 {
<a id="L55"></a><span class="ln">    55</span>					return simplify1(OpStar, re.Flags, sub, nil)
<a id="L56"></a><span class="ln">    56</span>				}
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>				<span class="comment">// Special case: x{1,} is x+.</span>
<a id="L59"></a><span class="ln">    59</span>				if re.Min == 1 {
<a id="L60"></a><span class="ln">    60</span>					return simplify1(OpPlus, re.Flags, sub, nil)
<a id="L61"></a><span class="ln">    61</span>				}
<a id="L62"></a><span class="ln">    62</span>	
<a id="L63"></a><span class="ln">    63</span>				<span class="comment">// General case: x{4,} is xxxx+.</span>
<a id="L64"></a><span class="ln">    64</span>				nre := &amp;Regexp{Op: OpConcat}
<a id="L65"></a><span class="ln">    65</span>				nre.Sub = nre.Sub0[:0]
<a id="L66"></a><span class="ln">    66</span>				for i := 0; i &lt; re.Min-1; i++ {
<a id="L67"></a><span class="ln">    67</span>					nre.Sub = append(nre.Sub, sub)
<a id="L68"></a><span class="ln">    68</span>				}
<a id="L69"></a><span class="ln">    69</span>				nre.Sub = append(nre.Sub, simplify1(OpPlus, re.Flags, sub, nil))
<a id="L70"></a><span class="ln">    70</span>				return nre
<a id="L71"></a><span class="ln">    71</span>			}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>			<span class="comment">// Special case x{0} handled above.</span>
<a id="L74"></a><span class="ln">    74</span>	
<a id="L75"></a><span class="ln">    75</span>			<span class="comment">// Special case: x{1} is just x.</span>
<a id="L76"></a><span class="ln">    76</span>			if re.Min == 1 &amp;&amp; re.Max == 1 {
<a id="L77"></a><span class="ln">    77</span>				return sub
<a id="L78"></a><span class="ln">    78</span>			}
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>			<span class="comment">// General case: x{n,m} means n copies of x and m copies of x?</span>
<a id="L81"></a><span class="ln">    81</span>			<span class="comment">// The machine will do less work if we nest the final m copies,</span>
<a id="L82"></a><span class="ln">    82</span>			<span class="comment">// so that x{2,5} = xx(x(x(x)?)?)?</span>
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>			<span class="comment">// Build leading prefix: xx.</span>
<a id="L85"></a><span class="ln">    85</span>			var prefix *Regexp
<a id="L86"></a><span class="ln">    86</span>			if re.Min &gt; 0 {
<a id="L87"></a><span class="ln">    87</span>				prefix = &amp;Regexp{Op: OpConcat}
<a id="L88"></a><span class="ln">    88</span>				prefix.Sub = prefix.Sub0[:0]
<a id="L89"></a><span class="ln">    89</span>				for i := 0; i &lt; re.Min; i++ {
<a id="L90"></a><span class="ln">    90</span>					prefix.Sub = append(prefix.Sub, sub)
<a id="L91"></a><span class="ln">    91</span>				}
<a id="L92"></a><span class="ln">    92</span>			}
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>			<span class="comment">// Build and attach suffix: (x(x(x)?)?)?</span>
<a id="L95"></a><span class="ln">    95</span>			if re.Max &gt; re.Min {
<a id="L96"></a><span class="ln">    96</span>				suffix := simplify1(OpQuest, re.Flags, sub, nil)
<a id="L97"></a><span class="ln">    97</span>				for i := re.Min + 1; i &lt; re.Max; i++ {
<a id="L98"></a><span class="ln">    98</span>					nre2 := &amp;Regexp{Op: OpConcat}
<a id="L99"></a><span class="ln">    99</span>					nre2.Sub = append(nre2.Sub0[:0], sub, suffix)
<a id="L100"></a><span class="ln">   100</span>					suffix = simplify1(OpQuest, re.Flags, nre2, nil)
<a id="L101"></a><span class="ln">   101</span>				}
<a id="L102"></a><span class="ln">   102</span>				if prefix == nil {
<a id="L103"></a><span class="ln">   103</span>					return suffix
<a id="L104"></a><span class="ln">   104</span>				}
<a id="L105"></a><span class="ln">   105</span>				prefix.Sub = append(prefix.Sub, suffix)
<a id="L106"></a><span class="ln">   106</span>			}
<a id="L107"></a><span class="ln">   107</span>			if prefix != nil {
<a id="L108"></a><span class="ln">   108</span>				return prefix
<a id="L109"></a><span class="ln">   109</span>			}
<a id="L110"></a><span class="ln">   110</span>	
<a id="L111"></a><span class="ln">   111</span>			<span class="comment">// Some degenerate case like min &gt; max or min &lt; max &lt; 0.</span>
<a id="L112"></a><span class="ln">   112</span>			<span class="comment">// Handle as impossible match.</span>
<a id="L113"></a><span class="ln">   113</span>			return &amp;Regexp{Op: OpNoMatch}
<a id="L114"></a><span class="ln">   114</span>		}
<a id="L115"></a><span class="ln">   115</span>	
<a id="L116"></a><span class="ln">   116</span>		return re
<a id="L117"></a><span class="ln">   117</span>	}
<a id="L118"></a><span class="ln">   118</span>	
<a id="L119"></a><span class="ln">   119</span>	<span class="comment">// simplify1 implements Simplify for the unary OpStar,</span>
<a id="L120"></a><span class="ln">   120</span>	<span class="comment">// OpPlus, and OpQuest operators.  It returns the simple regexp</span>
<a id="L121"></a><span class="ln">   121</span>	<span class="comment">// equivalent to</span>
<a id="L122"></a><span class="ln">   122</span>	<span class="comment">//</span>
<a id="L123"></a><span class="ln">   123</span>	<span class="comment">//	Regexp{Op: op, Flags: flags, Sub: {sub}}</span>
<a id="L124"></a><span class="ln">   124</span>	<span class="comment">//</span>
<a id="L125"></a><span class="ln">   125</span>	<span class="comment">// under the assumption that sub is already simple, and</span>
<a id="L126"></a><span class="ln">   126</span>	<span class="comment">// without first allocating that structure.  If the regexp</span>
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// to be returned turns out to be equivalent to re, simplify1</span>
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// returns re instead.</span>
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">//</span>
<a id="L130"></a><span class="ln">   130</span>	<span class="comment">// simplify1 is factored out of Simplify because the implementation</span>
<a id="L131"></a><span class="ln">   131</span>	<span class="comment">// for other operators generates these unary expressions.</span>
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">// Letting them call simplify1 makes sure the expressions they</span>
<a id="L133"></a><span class="ln">   133</span>	<span class="comment">// generate are simple.</span>
<a id="L134"></a><span class="ln">   134</span>	func simplify1(op Op, flags Flags, sub, re *Regexp) *Regexp {
<a id="L135"></a><span class="ln">   135</span>		<span class="comment">// Special case: repeat the empty string as much as</span>
<a id="L136"></a><span class="ln">   136</span>		<span class="comment">// you want, but it&#39;s still the empty string.</span>
<a id="L137"></a><span class="ln">   137</span>		if sub.Op == OpEmptyMatch {
<a id="L138"></a><span class="ln">   138</span>			return sub
<a id="L139"></a><span class="ln">   139</span>		}
<a id="L140"></a><span class="ln">   140</span>		<span class="comment">// The operators are idempotent if the flags match.</span>
<a id="L141"></a><span class="ln">   141</span>		if op == sub.Op &amp;&amp; flags&amp;NonGreedy == sub.Flags&amp;NonGreedy {
<a id="L142"></a><span class="ln">   142</span>			return sub
<a id="L143"></a><span class="ln">   143</span>		}
<a id="L144"></a><span class="ln">   144</span>		if re != nil &amp;&amp; re.Op == op &amp;&amp; re.Flags&amp;NonGreedy == flags&amp;NonGreedy &amp;&amp; sub == re.Sub[0] {
<a id="L145"></a><span class="ln">   145</span>			return re
<a id="L146"></a><span class="ln">   146</span>		}
<a id="L147"></a><span class="ln">   147</span>	
<a id="L148"></a><span class="ln">   148</span>		re = &amp;Regexp{Op: op, Flags: flags}
<a id="L149"></a><span class="ln">   149</span>		re.Sub = append(re.Sub0[:0], sub)
<a id="L150"></a><span class="ln">   150</span>		return re
<a id="L151"></a><span class="ln">   151</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

