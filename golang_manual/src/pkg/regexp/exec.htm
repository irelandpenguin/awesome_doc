<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/regexp/exec.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/regexp/exec.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package regexp
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;io&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;regexp/syntax&#34;
<a id="L10"></a><span class="ln">    10</span>	)
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// A queue is a &#39;sparse array&#39; holding pending threads of execution.</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// See http://research.swtch.com/2008/03/using-uninitialized-memory-for-fun-and.html</span>
<a id="L14"></a><span class="ln">    14</span>	type queue struct {
<a id="L15"></a><span class="ln">    15</span>		sparse []uint32
<a id="L16"></a><span class="ln">    16</span>		dense  []entry
<a id="L17"></a><span class="ln">    17</span>	}
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// A entry is an entry on a queue.</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// It holds both the instruction pc and the actual thread.</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// Some queue entries are just place holders so that the machine</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// knows it has considered that pc.  Such entries have t == nil.</span>
<a id="L23"></a><span class="ln">    23</span>	type entry struct {
<a id="L24"></a><span class="ln">    24</span>		pc uint32
<a id="L25"></a><span class="ln">    25</span>		t  *thread
<a id="L26"></a><span class="ln">    26</span>	}
<a id="L27"></a><span class="ln">    27</span>	
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// A thread is the state of a single path through the machine:</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// an instruction and a corresponding capture array.</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// See http://swtch.com/~rsc/regexp/regexp2.html</span>
<a id="L31"></a><span class="ln">    31</span>	type thread struct {
<a id="L32"></a><span class="ln">    32</span>		inst *syntax.Inst
<a id="L33"></a><span class="ln">    33</span>		cap  []int
<a id="L34"></a><span class="ln">    34</span>	}
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// A machine holds all the state during an NFA simulation for p.</span>
<a id="L37"></a><span class="ln">    37</span>	type machine struct {
<a id="L38"></a><span class="ln">    38</span>		re       *Regexp      <span class="comment">// corresponding Regexp</span>
<a id="L39"></a><span class="ln">    39</span>		p        *syntax.Prog <span class="comment">// compiled program</span>
<a id="L40"></a><span class="ln">    40</span>		q0, q1   queue        <span class="comment">// two queues for runq, nextq</span>
<a id="L41"></a><span class="ln">    41</span>		pool     []*thread    <span class="comment">// pool of available threads</span>
<a id="L42"></a><span class="ln">    42</span>		matched  bool         <span class="comment">// whether a match was found</span>
<a id="L43"></a><span class="ln">    43</span>		matchcap []int        <span class="comment">// capture information for the match</span>
<a id="L44"></a><span class="ln">    44</span>	
<a id="L45"></a><span class="ln">    45</span>		<span class="comment">// cached inputs, to avoid allocation</span>
<a id="L46"></a><span class="ln">    46</span>		inputBytes  inputBytes
<a id="L47"></a><span class="ln">    47</span>		inputString inputString
<a id="L48"></a><span class="ln">    48</span>		inputReader inputReader
<a id="L49"></a><span class="ln">    49</span>	}
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>	func (m *machine) newInputBytes(b []byte) input {
<a id="L52"></a><span class="ln">    52</span>		m.inputBytes.str = b
<a id="L53"></a><span class="ln">    53</span>		return &amp;m.inputBytes
<a id="L54"></a><span class="ln">    54</span>	}
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>	func (m *machine) newInputString(s string) input {
<a id="L57"></a><span class="ln">    57</span>		m.inputString.str = s
<a id="L58"></a><span class="ln">    58</span>		return &amp;m.inputString
<a id="L59"></a><span class="ln">    59</span>	}
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>	func (m *machine) newInputReader(r io.RuneReader) input {
<a id="L62"></a><span class="ln">    62</span>		m.inputReader.r = r
<a id="L63"></a><span class="ln">    63</span>		m.inputReader.atEOT = false
<a id="L64"></a><span class="ln">    64</span>		m.inputReader.pos = 0
<a id="L65"></a><span class="ln">    65</span>		return &amp;m.inputReader
<a id="L66"></a><span class="ln">    66</span>	}
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// progMachine returns a new machine running the prog p.</span>
<a id="L69"></a><span class="ln">    69</span>	func progMachine(p *syntax.Prog) *machine {
<a id="L70"></a><span class="ln">    70</span>		m := &amp;machine{p: p}
<a id="L71"></a><span class="ln">    71</span>		n := len(m.p.Inst)
<a id="L72"></a><span class="ln">    72</span>		m.q0 = queue{make([]uint32, n), make([]entry, 0, n)}
<a id="L73"></a><span class="ln">    73</span>		m.q1 = queue{make([]uint32, n), make([]entry, 0, n)}
<a id="L74"></a><span class="ln">    74</span>		ncap := p.NumCap
<a id="L75"></a><span class="ln">    75</span>		if ncap &lt; 2 {
<a id="L76"></a><span class="ln">    76</span>			ncap = 2
<a id="L77"></a><span class="ln">    77</span>		}
<a id="L78"></a><span class="ln">    78</span>		m.matchcap = make([]int, ncap)
<a id="L79"></a><span class="ln">    79</span>		return m
<a id="L80"></a><span class="ln">    80</span>	}
<a id="L81"></a><span class="ln">    81</span>	
<a id="L82"></a><span class="ln">    82</span>	func (m *machine) init(ncap int) {
<a id="L83"></a><span class="ln">    83</span>		for _, t := range m.pool {
<a id="L84"></a><span class="ln">    84</span>			t.cap = t.cap[:ncap]
<a id="L85"></a><span class="ln">    85</span>		}
<a id="L86"></a><span class="ln">    86</span>		m.matchcap = m.matchcap[:ncap]
<a id="L87"></a><span class="ln">    87</span>	}
<a id="L88"></a><span class="ln">    88</span>	
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">// alloc allocates a new thread with the given instruction.</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// It uses the free pool if possible.</span>
<a id="L91"></a><span class="ln">    91</span>	func (m *machine) alloc(i *syntax.Inst) *thread {
<a id="L92"></a><span class="ln">    92</span>		var t *thread
<a id="L93"></a><span class="ln">    93</span>		if n := len(m.pool); n &gt; 0 {
<a id="L94"></a><span class="ln">    94</span>			t = m.pool[n-1]
<a id="L95"></a><span class="ln">    95</span>			m.pool = m.pool[:n-1]
<a id="L96"></a><span class="ln">    96</span>		} else {
<a id="L97"></a><span class="ln">    97</span>			t = new(thread)
<a id="L98"></a><span class="ln">    98</span>			t.cap = make([]int, len(m.matchcap), cap(m.matchcap))
<a id="L99"></a><span class="ln">    99</span>		}
<a id="L100"></a><span class="ln">   100</span>		t.inst = i
<a id="L101"></a><span class="ln">   101</span>		return t
<a id="L102"></a><span class="ln">   102</span>	}
<a id="L103"></a><span class="ln">   103</span>	
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">// free returns t to the free pool.</span>
<a id="L105"></a><span class="ln">   105</span>	func (m *machine) free(t *thread) {
<a id="L106"></a><span class="ln">   106</span>		m.inputBytes.str = nil
<a id="L107"></a><span class="ln">   107</span>		m.inputString.str = &#34;&#34;
<a id="L108"></a><span class="ln">   108</span>		m.inputReader.r = nil
<a id="L109"></a><span class="ln">   109</span>		m.pool = append(m.pool, t)
<a id="L110"></a><span class="ln">   110</span>	}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>	<span class="comment">// match runs the machine over the input starting at pos.</span>
<a id="L113"></a><span class="ln">   113</span>	<span class="comment">// It reports whether a match was found.</span>
<a id="L114"></a><span class="ln">   114</span>	<span class="comment">// If so, m.matchcap holds the submatch information.</span>
<a id="L115"></a><span class="ln">   115</span>	func (m *machine) match(i input, pos int) bool {
<a id="L116"></a><span class="ln">   116</span>		startCond := m.re.cond
<a id="L117"></a><span class="ln">   117</span>		if startCond == ^syntax.EmptyOp(0) { <span class="comment">// impossible</span>
<a id="L118"></a><span class="ln">   118</span>			return false
<a id="L119"></a><span class="ln">   119</span>		}
<a id="L120"></a><span class="ln">   120</span>		m.matched = false
<a id="L121"></a><span class="ln">   121</span>		for i := range m.matchcap {
<a id="L122"></a><span class="ln">   122</span>			m.matchcap[i] = -1
<a id="L123"></a><span class="ln">   123</span>		}
<a id="L124"></a><span class="ln">   124</span>		runq, nextq := &amp;m.q0, &amp;m.q1
<a id="L125"></a><span class="ln">   125</span>		r, r1 := endOfText, endOfText
<a id="L126"></a><span class="ln">   126</span>		width, width1 := 0, 0
<a id="L127"></a><span class="ln">   127</span>		r, width = i.step(pos)
<a id="L128"></a><span class="ln">   128</span>		if r != endOfText {
<a id="L129"></a><span class="ln">   129</span>			r1, width1 = i.step(pos + width)
<a id="L130"></a><span class="ln">   130</span>		}
<a id="L131"></a><span class="ln">   131</span>		var flag syntax.EmptyOp
<a id="L132"></a><span class="ln">   132</span>		if pos == 0 {
<a id="L133"></a><span class="ln">   133</span>			flag = syntax.EmptyOpContext(-1, r)
<a id="L134"></a><span class="ln">   134</span>		} else {
<a id="L135"></a><span class="ln">   135</span>			flag = i.context(pos)
<a id="L136"></a><span class="ln">   136</span>		}
<a id="L137"></a><span class="ln">   137</span>		for {
<a id="L138"></a><span class="ln">   138</span>			if len(runq.dense) == 0 {
<a id="L139"></a><span class="ln">   139</span>				if startCond&amp;syntax.EmptyBeginText != 0 &amp;&amp; pos != 0 {
<a id="L140"></a><span class="ln">   140</span>					<span class="comment">// Anchored match, past beginning of text.</span>
<a id="L141"></a><span class="ln">   141</span>					break
<a id="L142"></a><span class="ln">   142</span>				}
<a id="L143"></a><span class="ln">   143</span>				if m.matched {
<a id="L144"></a><span class="ln">   144</span>					<span class="comment">// Have match; finished exploring alternatives.</span>
<a id="L145"></a><span class="ln">   145</span>					break
<a id="L146"></a><span class="ln">   146</span>				}
<a id="L147"></a><span class="ln">   147</span>				if len(m.re.prefix) &gt; 0 &amp;&amp; r1 != m.re.prefixRune &amp;&amp; i.canCheckPrefix() {
<a id="L148"></a><span class="ln">   148</span>					<span class="comment">// Match requires literal prefix; fast search for it.</span>
<a id="L149"></a><span class="ln">   149</span>					advance := i.index(m.re, pos)
<a id="L150"></a><span class="ln">   150</span>					if advance &lt; 0 {
<a id="L151"></a><span class="ln">   151</span>						break
<a id="L152"></a><span class="ln">   152</span>					}
<a id="L153"></a><span class="ln">   153</span>					pos += advance
<a id="L154"></a><span class="ln">   154</span>					r, width = i.step(pos)
<a id="L155"></a><span class="ln">   155</span>					r1, width1 = i.step(pos + width)
<a id="L156"></a><span class="ln">   156</span>				}
<a id="L157"></a><span class="ln">   157</span>			}
<a id="L158"></a><span class="ln">   158</span>			if !m.matched {
<a id="L159"></a><span class="ln">   159</span>				if len(m.matchcap) &gt; 0 {
<a id="L160"></a><span class="ln">   160</span>					m.matchcap[0] = pos
<a id="L161"></a><span class="ln">   161</span>				}
<a id="L162"></a><span class="ln">   162</span>				m.add(runq, uint32(m.p.Start), pos, m.matchcap, flag, nil)
<a id="L163"></a><span class="ln">   163</span>			}
<a id="L164"></a><span class="ln">   164</span>			flag = syntax.EmptyOpContext(r, r1)
<a id="L165"></a><span class="ln">   165</span>			m.step(runq, nextq, pos, pos+width, r, flag)
<a id="L166"></a><span class="ln">   166</span>			if width == 0 {
<a id="L167"></a><span class="ln">   167</span>				break
<a id="L168"></a><span class="ln">   168</span>			}
<a id="L169"></a><span class="ln">   169</span>			if len(m.matchcap) == 0 &amp;&amp; m.matched {
<a id="L170"></a><span class="ln">   170</span>				<span class="comment">// Found a match and not paying attention</span>
<a id="L171"></a><span class="ln">   171</span>				<span class="comment">// to where it is, so any match will do.</span>
<a id="L172"></a><span class="ln">   172</span>				break
<a id="L173"></a><span class="ln">   173</span>			}
<a id="L174"></a><span class="ln">   174</span>			pos += width
<a id="L175"></a><span class="ln">   175</span>			r, width = r1, width1
<a id="L176"></a><span class="ln">   176</span>			if r != endOfText {
<a id="L177"></a><span class="ln">   177</span>				r1, width1 = i.step(pos + width)
<a id="L178"></a><span class="ln">   178</span>			}
<a id="L179"></a><span class="ln">   179</span>			runq, nextq = nextq, runq
<a id="L180"></a><span class="ln">   180</span>		}
<a id="L181"></a><span class="ln">   181</span>		m.clear(nextq)
<a id="L182"></a><span class="ln">   182</span>		return m.matched
<a id="L183"></a><span class="ln">   183</span>	}
<a id="L184"></a><span class="ln">   184</span>	
<a id="L185"></a><span class="ln">   185</span>	<span class="comment">// clear frees all threads on the thread queue.</span>
<a id="L186"></a><span class="ln">   186</span>	func (m *machine) clear(q *queue) {
<a id="L187"></a><span class="ln">   187</span>		for _, d := range q.dense {
<a id="L188"></a><span class="ln">   188</span>			if d.t != nil {
<a id="L189"></a><span class="ln">   189</span>				<span class="comment">// m.free(d.t)</span>
<a id="L190"></a><span class="ln">   190</span>				m.pool = append(m.pool, d.t)
<a id="L191"></a><span class="ln">   191</span>			}
<a id="L192"></a><span class="ln">   192</span>		}
<a id="L193"></a><span class="ln">   193</span>		q.dense = q.dense[:0]
<a id="L194"></a><span class="ln">   194</span>	}
<a id="L195"></a><span class="ln">   195</span>	
<a id="L196"></a><span class="ln">   196</span>	<span class="comment">// step executes one step of the machine, running each of the threads</span>
<a id="L197"></a><span class="ln">   197</span>	<span class="comment">// on runq and appending new threads to nextq.</span>
<a id="L198"></a><span class="ln">   198</span>	<span class="comment">// The step processes the rune c (which may be endOfText),</span>
<a id="L199"></a><span class="ln">   199</span>	<span class="comment">// which starts at position pos and ends at nextPos.</span>
<a id="L200"></a><span class="ln">   200</span>	<span class="comment">// nextCond gives the setting for the empty-width flags after c.</span>
<a id="L201"></a><span class="ln">   201</span>	func (m *machine) step(runq, nextq *queue, pos, nextPos int, c rune, nextCond syntax.EmptyOp) {
<a id="L202"></a><span class="ln">   202</span>		longest := m.re.longest
<a id="L203"></a><span class="ln">   203</span>		for j := 0; j &lt; len(runq.dense); j++ {
<a id="L204"></a><span class="ln">   204</span>			d := &amp;runq.dense[j]
<a id="L205"></a><span class="ln">   205</span>			t := d.t
<a id="L206"></a><span class="ln">   206</span>			if t == nil {
<a id="L207"></a><span class="ln">   207</span>				continue
<a id="L208"></a><span class="ln">   208</span>			}
<a id="L209"></a><span class="ln">   209</span>			if longest &amp;&amp; m.matched &amp;&amp; len(t.cap) &gt; 0 &amp;&amp; m.matchcap[0] &lt; t.cap[0] {
<a id="L210"></a><span class="ln">   210</span>				<span class="comment">// m.free(t)</span>
<a id="L211"></a><span class="ln">   211</span>				m.pool = append(m.pool, t)
<a id="L212"></a><span class="ln">   212</span>				continue
<a id="L213"></a><span class="ln">   213</span>			}
<a id="L214"></a><span class="ln">   214</span>			i := t.inst
<a id="L215"></a><span class="ln">   215</span>			add := false
<a id="L216"></a><span class="ln">   216</span>			switch i.Op {
<a id="L217"></a><span class="ln">   217</span>			default:
<a id="L218"></a><span class="ln">   218</span>				panic(&#34;bad inst&#34;)
<a id="L219"></a><span class="ln">   219</span>	
<a id="L220"></a><span class="ln">   220</span>			case syntax.InstMatch:
<a id="L221"></a><span class="ln">   221</span>				if len(t.cap) &gt; 0 &amp;&amp; (!longest || !m.matched || m.matchcap[1] &lt; pos) {
<a id="L222"></a><span class="ln">   222</span>					t.cap[1] = pos
<a id="L223"></a><span class="ln">   223</span>					copy(m.matchcap, t.cap)
<a id="L224"></a><span class="ln">   224</span>				}
<a id="L225"></a><span class="ln">   225</span>				if !longest {
<a id="L226"></a><span class="ln">   226</span>					<span class="comment">// First-match mode: cut off all lower-priority threads.</span>
<a id="L227"></a><span class="ln">   227</span>					for _, d := range runq.dense[j+1:] {
<a id="L228"></a><span class="ln">   228</span>						if d.t != nil {
<a id="L229"></a><span class="ln">   229</span>							<span class="comment">// m.free(d.t)</span>
<a id="L230"></a><span class="ln">   230</span>							m.pool = append(m.pool, d.t)
<a id="L231"></a><span class="ln">   231</span>						}
<a id="L232"></a><span class="ln">   232</span>					}
<a id="L233"></a><span class="ln">   233</span>					runq.dense = runq.dense[:0]
<a id="L234"></a><span class="ln">   234</span>				}
<a id="L235"></a><span class="ln">   235</span>				m.matched = true
<a id="L236"></a><span class="ln">   236</span>	
<a id="L237"></a><span class="ln">   237</span>			case syntax.InstRune:
<a id="L238"></a><span class="ln">   238</span>				add = i.MatchRune(c)
<a id="L239"></a><span class="ln">   239</span>			case syntax.InstRune1:
<a id="L240"></a><span class="ln">   240</span>				add = c == i.Rune[0]
<a id="L241"></a><span class="ln">   241</span>			case syntax.InstRuneAny:
<a id="L242"></a><span class="ln">   242</span>				add = true
<a id="L243"></a><span class="ln">   243</span>			case syntax.InstRuneAnyNotNL:
<a id="L244"></a><span class="ln">   244</span>				add = c != &#39;\n&#39;
<a id="L245"></a><span class="ln">   245</span>			}
<a id="L246"></a><span class="ln">   246</span>			if add {
<a id="L247"></a><span class="ln">   247</span>				t = m.add(nextq, i.Out, nextPos, t.cap, nextCond, t)
<a id="L248"></a><span class="ln">   248</span>			}
<a id="L249"></a><span class="ln">   249</span>			if t != nil {
<a id="L250"></a><span class="ln">   250</span>				<span class="comment">// m.free(t)</span>
<a id="L251"></a><span class="ln">   251</span>				m.pool = append(m.pool, t)
<a id="L252"></a><span class="ln">   252</span>			}
<a id="L253"></a><span class="ln">   253</span>		}
<a id="L254"></a><span class="ln">   254</span>		runq.dense = runq.dense[:0]
<a id="L255"></a><span class="ln">   255</span>	}
<a id="L256"></a><span class="ln">   256</span>	
<a id="L257"></a><span class="ln">   257</span>	<span class="comment">// add adds an entry to q for pc, unless the q already has such an entry.</span>
<a id="L258"></a><span class="ln">   258</span>	<span class="comment">// It also recursively adds an entry for all instructions reachable from pc by following</span>
<a id="L259"></a><span class="ln">   259</span>	<span class="comment">// empty-width conditions satisfied by cond.  pos gives the current position</span>
<a id="L260"></a><span class="ln">   260</span>	<span class="comment">// in the input.</span>
<a id="L261"></a><span class="ln">   261</span>	func (m *machine) add(q *queue, pc uint32, pos int, cap []int, cond syntax.EmptyOp, t *thread) *thread {
<a id="L262"></a><span class="ln">   262</span>		if pc == 0 {
<a id="L263"></a><span class="ln">   263</span>			return t
<a id="L264"></a><span class="ln">   264</span>		}
<a id="L265"></a><span class="ln">   265</span>		if j := q.sparse[pc]; j &lt; uint32(len(q.dense)) &amp;&amp; q.dense[j].pc == pc {
<a id="L266"></a><span class="ln">   266</span>			return t
<a id="L267"></a><span class="ln">   267</span>		}
<a id="L268"></a><span class="ln">   268</span>	
<a id="L269"></a><span class="ln">   269</span>		j := len(q.dense)
<a id="L270"></a><span class="ln">   270</span>		q.dense = q.dense[:j+1]
<a id="L271"></a><span class="ln">   271</span>		d := &amp;q.dense[j]
<a id="L272"></a><span class="ln">   272</span>		d.t = nil
<a id="L273"></a><span class="ln">   273</span>		d.pc = pc
<a id="L274"></a><span class="ln">   274</span>		q.sparse[pc] = uint32(j)
<a id="L275"></a><span class="ln">   275</span>	
<a id="L276"></a><span class="ln">   276</span>		i := &amp;m.p.Inst[pc]
<a id="L277"></a><span class="ln">   277</span>		switch i.Op {
<a id="L278"></a><span class="ln">   278</span>		default:
<a id="L279"></a><span class="ln">   279</span>			panic(&#34;unhandled&#34;)
<a id="L280"></a><span class="ln">   280</span>		case syntax.InstFail:
<a id="L281"></a><span class="ln">   281</span>			<span class="comment">// nothing</span>
<a id="L282"></a><span class="ln">   282</span>		case syntax.InstAlt, syntax.InstAltMatch:
<a id="L283"></a><span class="ln">   283</span>			t = m.add(q, i.Out, pos, cap, cond, t)
<a id="L284"></a><span class="ln">   284</span>			t = m.add(q, i.Arg, pos, cap, cond, t)
<a id="L285"></a><span class="ln">   285</span>		case syntax.InstEmptyWidth:
<a id="L286"></a><span class="ln">   286</span>			if syntax.EmptyOp(i.Arg)&amp;^cond == 0 {
<a id="L287"></a><span class="ln">   287</span>				t = m.add(q, i.Out, pos, cap, cond, t)
<a id="L288"></a><span class="ln">   288</span>			}
<a id="L289"></a><span class="ln">   289</span>		case syntax.InstNop:
<a id="L290"></a><span class="ln">   290</span>			t = m.add(q, i.Out, pos, cap, cond, t)
<a id="L291"></a><span class="ln">   291</span>		case syntax.InstCapture:
<a id="L292"></a><span class="ln">   292</span>			if int(i.Arg) &lt; len(cap) {
<a id="L293"></a><span class="ln">   293</span>				opos := cap[i.Arg]
<a id="L294"></a><span class="ln">   294</span>				cap[i.Arg] = pos
<a id="L295"></a><span class="ln">   295</span>				m.add(q, i.Out, pos, cap, cond, nil)
<a id="L296"></a><span class="ln">   296</span>				cap[i.Arg] = opos
<a id="L297"></a><span class="ln">   297</span>			} else {
<a id="L298"></a><span class="ln">   298</span>				t = m.add(q, i.Out, pos, cap, cond, t)
<a id="L299"></a><span class="ln">   299</span>			}
<a id="L300"></a><span class="ln">   300</span>		case syntax.InstMatch, syntax.InstRune, syntax.InstRune1, syntax.InstRuneAny, syntax.InstRuneAnyNotNL:
<a id="L301"></a><span class="ln">   301</span>			if t == nil {
<a id="L302"></a><span class="ln">   302</span>				t = m.alloc(i)
<a id="L303"></a><span class="ln">   303</span>			} else {
<a id="L304"></a><span class="ln">   304</span>				t.inst = i
<a id="L305"></a><span class="ln">   305</span>			}
<a id="L306"></a><span class="ln">   306</span>			if len(cap) &gt; 0 &amp;&amp; &amp;t.cap[0] != &amp;cap[0] {
<a id="L307"></a><span class="ln">   307</span>				copy(t.cap, cap)
<a id="L308"></a><span class="ln">   308</span>			}
<a id="L309"></a><span class="ln">   309</span>			d.t = t
<a id="L310"></a><span class="ln">   310</span>			t = nil
<a id="L311"></a><span class="ln">   311</span>		}
<a id="L312"></a><span class="ln">   312</span>		return t
<a id="L313"></a><span class="ln">   313</span>	}
<a id="L314"></a><span class="ln">   314</span>	
<a id="L315"></a><span class="ln">   315</span>	<span class="comment">// empty is a non-nil 0-element slice,</span>
<a id="L316"></a><span class="ln">   316</span>	<span class="comment">// so doExecute can avoid an allocation</span>
<a id="L317"></a><span class="ln">   317</span>	<span class="comment">// when 0 captures are requested from a successful match.</span>
<a id="L318"></a><span class="ln">   318</span>	var empty = make([]int, 0)
<a id="L319"></a><span class="ln">   319</span>	
<a id="L320"></a><span class="ln">   320</span>	<span class="comment">// doExecute finds the leftmost match in the input and returns</span>
<a id="L321"></a><span class="ln">   321</span>	<span class="comment">// the position of its subexpressions.</span>
<a id="L322"></a><span class="ln">   322</span>	func (re *Regexp) doExecute(r io.RuneReader, b []byte, s string, pos int, ncap int) []int {
<a id="L323"></a><span class="ln">   323</span>		m := re.get()
<a id="L324"></a><span class="ln">   324</span>		var i input
<a id="L325"></a><span class="ln">   325</span>		if r != nil {
<a id="L326"></a><span class="ln">   326</span>			i = m.newInputReader(r)
<a id="L327"></a><span class="ln">   327</span>		} else if b != nil {
<a id="L328"></a><span class="ln">   328</span>			i = m.newInputBytes(b)
<a id="L329"></a><span class="ln">   329</span>		} else {
<a id="L330"></a><span class="ln">   330</span>			i = m.newInputString(s)
<a id="L331"></a><span class="ln">   331</span>		}
<a id="L332"></a><span class="ln">   332</span>		m.init(ncap)
<a id="L333"></a><span class="ln">   333</span>		if !m.match(i, pos) {
<a id="L334"></a><span class="ln">   334</span>			re.put(m)
<a id="L335"></a><span class="ln">   335</span>			return nil
<a id="L336"></a><span class="ln">   336</span>		}
<a id="L337"></a><span class="ln">   337</span>		if ncap == 0 {
<a id="L338"></a><span class="ln">   338</span>			re.put(m)
<a id="L339"></a><span class="ln">   339</span>			return empty <span class="comment">// empty but not nil</span>
<a id="L340"></a><span class="ln">   340</span>		}
<a id="L341"></a><span class="ln">   341</span>		cap := make([]int, ncap)
<a id="L342"></a><span class="ln">   342</span>		copy(cap, m.matchcap)
<a id="L343"></a><span class="ln">   343</span>		re.put(m)
<a id="L344"></a><span class="ln">   344</span>		return cap
<a id="L345"></a><span class="ln">   345</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

