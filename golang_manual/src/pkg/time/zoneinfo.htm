<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/time/zoneinfo.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/time/zoneinfo.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package time
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;sync&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;syscall&#34;
<a id="L10"></a><span class="ln">    10</span>	)
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// A Location maps time instants to the zone in use at that time.</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// Typically, the Location represents the collection of time offsets</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// in use in a geographical area, such as CEST and CET for central Europe.</span>
<a id="L15"></a><span class="ln">    15</span>	type Location struct {
<a id="L16"></a><span class="ln">    16</span>		name string
<a id="L17"></a><span class="ln">    17</span>		zone []zone
<a id="L18"></a><span class="ln">    18</span>		tx   []zoneTrans
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>		<span class="comment">// Most lookups will be for the current time.</span>
<a id="L21"></a><span class="ln">    21</span>		<span class="comment">// To avoid the binary search through tx, keep a</span>
<a id="L22"></a><span class="ln">    22</span>		<span class="comment">// static one-element cache that gives the correct</span>
<a id="L23"></a><span class="ln">    23</span>		<span class="comment">// zone for the time when the Location was created.</span>
<a id="L24"></a><span class="ln">    24</span>		<span class="comment">// if cacheStart &lt;= t &lt;= cacheEnd,</span>
<a id="L25"></a><span class="ln">    25</span>		<span class="comment">// lookup can return cacheZone.</span>
<a id="L26"></a><span class="ln">    26</span>		<span class="comment">// The units for cacheStart and cacheEnd are seconds</span>
<a id="L27"></a><span class="ln">    27</span>		<span class="comment">// since January 1, 1970 UTC, to match the argument</span>
<a id="L28"></a><span class="ln">    28</span>		<span class="comment">// to lookup.</span>
<a id="L29"></a><span class="ln">    29</span>		cacheStart int64
<a id="L30"></a><span class="ln">    30</span>		cacheEnd   int64
<a id="L31"></a><span class="ln">    31</span>		cacheZone  *zone
<a id="L32"></a><span class="ln">    32</span>	}
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// A zone represents a single time zone such as CEST or CET.</span>
<a id="L35"></a><span class="ln">    35</span>	type zone struct {
<a id="L36"></a><span class="ln">    36</span>		name   string <span class="comment">// abbreviated name, &#34;CET&#34;</span>
<a id="L37"></a><span class="ln">    37</span>		offset int    <span class="comment">// seconds east of UTC</span>
<a id="L38"></a><span class="ln">    38</span>		isDST  bool   <span class="comment">// is this zone Daylight Savings Time?</span>
<a id="L39"></a><span class="ln">    39</span>	}
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// A zoneTrans represents a single time zone transition.</span>
<a id="L42"></a><span class="ln">    42</span>	type zoneTrans struct {
<a id="L43"></a><span class="ln">    43</span>		when         int64 <span class="comment">// transition time, in seconds since 1970 GMT</span>
<a id="L44"></a><span class="ln">    44</span>		index        uint8 <span class="comment">// the index of the zone that goes into effect at that time</span>
<a id="L45"></a><span class="ln">    45</span>		isstd, isutc bool  <span class="comment">// ignored - no idea what these mean</span>
<a id="L46"></a><span class="ln">    46</span>	}
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">// UTC represents Universal Coordinated Time (UTC).</span>
<a id="L49"></a><span class="ln">    49</span>	var UTC *Location = &amp;utcLoc
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// utcLoc is separate so that get can refer to &amp;utcLoc</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// and ensure that it never returns a nil *Location,</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">// even if a badly behaved client has changed UTC.</span>
<a id="L54"></a><span class="ln">    54</span>	var utcLoc = Location{name: &#34;UTC&#34;}
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// Local represents the system&#39;s local time zone.</span>
<a id="L57"></a><span class="ln">    57</span>	var Local *Location = &amp;localLoc
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// localLoc is separate so that initLocal can initialize</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// it even if a client has changed Local.</span>
<a id="L61"></a><span class="ln">    61</span>	var localLoc Location
<a id="L62"></a><span class="ln">    62</span>	var localOnce sync.Once
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>	func (l *Location) get() *Location {
<a id="L65"></a><span class="ln">    65</span>		if l == nil {
<a id="L66"></a><span class="ln">    66</span>			return &amp;utcLoc
<a id="L67"></a><span class="ln">    67</span>		}
<a id="L68"></a><span class="ln">    68</span>		if l == &amp;localLoc {
<a id="L69"></a><span class="ln">    69</span>			localOnce.Do(initLocal)
<a id="L70"></a><span class="ln">    70</span>		}
<a id="L71"></a><span class="ln">    71</span>		return l
<a id="L72"></a><span class="ln">    72</span>	}
<a id="L73"></a><span class="ln">    73</span>	
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">// String returns a descriptive name for the time zone information,</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">// corresponding to the argument to LoadLocation.</span>
<a id="L76"></a><span class="ln">    76</span>	func (l *Location) String() string {
<a id="L77"></a><span class="ln">    77</span>		return l.get().name
<a id="L78"></a><span class="ln">    78</span>	}
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// FixedZone returns a Location that always uses</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// the given zone name and offset (seconds east of UTC).</span>
<a id="L82"></a><span class="ln">    82</span>	func FixedZone(name string, offset int) *Location {
<a id="L83"></a><span class="ln">    83</span>		l := &amp;Location{
<a id="L84"></a><span class="ln">    84</span>			name:       name,
<a id="L85"></a><span class="ln">    85</span>			zone:       []zone{{name, offset, false}},
<a id="L86"></a><span class="ln">    86</span>			tx:         []zoneTrans{{-1 &lt;&lt; 63, 0, false, false}},
<a id="L87"></a><span class="ln">    87</span>			cacheStart: -1 &lt;&lt; 63,
<a id="L88"></a><span class="ln">    88</span>			cacheEnd:   1&lt;&lt;63 - 1,
<a id="L89"></a><span class="ln">    89</span>		}
<a id="L90"></a><span class="ln">    90</span>		l.cacheZone = &amp;l.zone[0]
<a id="L91"></a><span class="ln">    91</span>		return l
<a id="L92"></a><span class="ln">    92</span>	}
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// lookup returns information about the time zone in use at an</span>
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">// instant in time expressed as seconds since January 1, 1970 00:00:00 UTC.</span>
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">//</span>
<a id="L97"></a><span class="ln">    97</span>	<span class="comment">// The returned information gives the name of the zone (such as &#34;CET&#34;),</span>
<a id="L98"></a><span class="ln">    98</span>	<span class="comment">// the start and end times bracketing sec when that zone is in effect,</span>
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">// the offset in seconds east of UTC (such as -5*60*60), and whether</span>
<a id="L100"></a><span class="ln">   100</span>	<span class="comment">// the daylight savings is being observed at that time.</span>
<a id="L101"></a><span class="ln">   101</span>	func (l *Location) lookup(sec int64) (name string, offset int, isDST bool, start, end int64) {
<a id="L102"></a><span class="ln">   102</span>		l = l.get()
<a id="L103"></a><span class="ln">   103</span>	
<a id="L104"></a><span class="ln">   104</span>		if len(l.tx) == 0 {
<a id="L105"></a><span class="ln">   105</span>			name = &#34;UTC&#34;
<a id="L106"></a><span class="ln">   106</span>			offset = 0
<a id="L107"></a><span class="ln">   107</span>			isDST = false
<a id="L108"></a><span class="ln">   108</span>			start = -1 &lt;&lt; 63
<a id="L109"></a><span class="ln">   109</span>			end = 1&lt;&lt;63 - 1
<a id="L110"></a><span class="ln">   110</span>			return
<a id="L111"></a><span class="ln">   111</span>		}
<a id="L112"></a><span class="ln">   112</span>	
<a id="L113"></a><span class="ln">   113</span>		if zone := l.cacheZone; zone != nil &amp;&amp; l.cacheStart &lt;= sec &amp;&amp; sec &lt; l.cacheEnd {
<a id="L114"></a><span class="ln">   114</span>			name = zone.name
<a id="L115"></a><span class="ln">   115</span>			offset = zone.offset
<a id="L116"></a><span class="ln">   116</span>			isDST = zone.isDST
<a id="L117"></a><span class="ln">   117</span>			start = l.cacheStart
<a id="L118"></a><span class="ln">   118</span>			end = l.cacheEnd
<a id="L119"></a><span class="ln">   119</span>			return
<a id="L120"></a><span class="ln">   120</span>		}
<a id="L121"></a><span class="ln">   121</span>	
<a id="L122"></a><span class="ln">   122</span>		<span class="comment">// Binary search for entry with largest time &lt;= sec.</span>
<a id="L123"></a><span class="ln">   123</span>		<span class="comment">// Not using sort.Search to avoid dependencies.</span>
<a id="L124"></a><span class="ln">   124</span>		tx := l.tx
<a id="L125"></a><span class="ln">   125</span>		end = 1&lt;&lt;63 - 1
<a id="L126"></a><span class="ln">   126</span>		for len(tx) &gt; 1 {
<a id="L127"></a><span class="ln">   127</span>			m := len(tx) / 2
<a id="L128"></a><span class="ln">   128</span>			lim := tx[m].when
<a id="L129"></a><span class="ln">   129</span>			if sec &lt; lim {
<a id="L130"></a><span class="ln">   130</span>				end = lim
<a id="L131"></a><span class="ln">   131</span>				tx = tx[0:m]
<a id="L132"></a><span class="ln">   132</span>			} else {
<a id="L133"></a><span class="ln">   133</span>				tx = tx[m:]
<a id="L134"></a><span class="ln">   134</span>			}
<a id="L135"></a><span class="ln">   135</span>		}
<a id="L136"></a><span class="ln">   136</span>		zone := &amp;l.zone[tx[0].index]
<a id="L137"></a><span class="ln">   137</span>		name = zone.name
<a id="L138"></a><span class="ln">   138</span>		offset = zone.offset
<a id="L139"></a><span class="ln">   139</span>		isDST = zone.isDST
<a id="L140"></a><span class="ln">   140</span>		start = tx[0].when
<a id="L141"></a><span class="ln">   141</span>		<span class="comment">// end = maintained during the search</span>
<a id="L142"></a><span class="ln">   142</span>		return
<a id="L143"></a><span class="ln">   143</span>	}
<a id="L144"></a><span class="ln">   144</span>	
<a id="L145"></a><span class="ln">   145</span>	<span class="comment">// lookupName returns information about the time zone with</span>
<a id="L146"></a><span class="ln">   146</span>	<span class="comment">// the given name (such as &#34;EST&#34;).</span>
<a id="L147"></a><span class="ln">   147</span>	func (l *Location) lookupName(name string) (offset int, isDST bool, ok bool) {
<a id="L148"></a><span class="ln">   148</span>		l = l.get()
<a id="L149"></a><span class="ln">   149</span>		for i := range l.zone {
<a id="L150"></a><span class="ln">   150</span>			zone := &amp;l.zone[i]
<a id="L151"></a><span class="ln">   151</span>			if zone.name == name {
<a id="L152"></a><span class="ln">   152</span>				return zone.offset, zone.isDST, true
<a id="L153"></a><span class="ln">   153</span>			}
<a id="L154"></a><span class="ln">   154</span>		}
<a id="L155"></a><span class="ln">   155</span>		return
<a id="L156"></a><span class="ln">   156</span>	}
<a id="L157"></a><span class="ln">   157</span>	
<a id="L158"></a><span class="ln">   158</span>	<span class="comment">// lookupOffset returns information about the time zone with</span>
<a id="L159"></a><span class="ln">   159</span>	<span class="comment">// the given offset (such as -5*60*60).</span>
<a id="L160"></a><span class="ln">   160</span>	func (l *Location) lookupOffset(offset int) (name string, isDST bool, ok bool) {
<a id="L161"></a><span class="ln">   161</span>		l = l.get()
<a id="L162"></a><span class="ln">   162</span>		for i := range l.zone {
<a id="L163"></a><span class="ln">   163</span>			zone := &amp;l.zone[i]
<a id="L164"></a><span class="ln">   164</span>			if zone.offset == offset {
<a id="L165"></a><span class="ln">   165</span>				return zone.name, zone.isDST, true
<a id="L166"></a><span class="ln">   166</span>			}
<a id="L167"></a><span class="ln">   167</span>		}
<a id="L168"></a><span class="ln">   168</span>		return
<a id="L169"></a><span class="ln">   169</span>	}
<a id="L170"></a><span class="ln">   170</span>	
<a id="L171"></a><span class="ln">   171</span>	<span class="comment">// NOTE(rsc): Eventually we will need to accept the POSIX TZ environment</span>
<a id="L172"></a><span class="ln">   172</span>	<span class="comment">// syntax too, but I don&#39;t feel like implementing it today.</span>
<a id="L173"></a><span class="ln">   173</span>	
<a id="L174"></a><span class="ln">   174</span>	var zoneinfo, _ = syscall.Getenv(&#34;ZONEINFO&#34;)
<a id="L175"></a><span class="ln">   175</span>	
<a id="L176"></a><span class="ln">   176</span>	<span class="comment">// LoadLocation returns the Location with the given name.</span>
<a id="L177"></a><span class="ln">   177</span>	<span class="comment">//</span>
<a id="L178"></a><span class="ln">   178</span>	<span class="comment">// If the name is &#34;&#34; or &#34;UTC&#34;, LoadLocation returns UTC.</span>
<a id="L179"></a><span class="ln">   179</span>	<span class="comment">// If the name is &#34;Local&#34;, LoadLocation returns Local.</span>
<a id="L180"></a><span class="ln">   180</span>	<span class="comment">//</span>
<a id="L181"></a><span class="ln">   181</span>	<span class="comment">// Otherwise, the name is taken to be a location name corresponding to a file</span>
<a id="L182"></a><span class="ln">   182</span>	<span class="comment">// in the IANA Time Zone database, such as &#34;America/New_York&#34;.</span>
<a id="L183"></a><span class="ln">   183</span>	<span class="comment">//</span>
<a id="L184"></a><span class="ln">   184</span>	<span class="comment">// The time zone database needed by LoadLocation may not be</span>
<a id="L185"></a><span class="ln">   185</span>	<span class="comment">// present on all systems, especially non-Unix systems.</span>
<a id="L186"></a><span class="ln">   186</span>	<span class="comment">// LoadLocation looks in the directory or uncompressed zip file</span>
<a id="L187"></a><span class="ln">   187</span>	<span class="comment">// named by the ZONEINFO environment variable, if any, then looks in</span>
<a id="L188"></a><span class="ln">   188</span>	<span class="comment">// known installation locations on Unix systems,</span>
<a id="L189"></a><span class="ln">   189</span>	<span class="comment">// and finally looks in $GOROOT/lib/time/zoneinfo.zip.</span>
<a id="L190"></a><span class="ln">   190</span>	func LoadLocation(name string) (*Location, error) {
<a id="L191"></a><span class="ln">   191</span>		if name == &#34;&#34; || name == &#34;UTC&#34; {
<a id="L192"></a><span class="ln">   192</span>			return UTC, nil
<a id="L193"></a><span class="ln">   193</span>		}
<a id="L194"></a><span class="ln">   194</span>		if name == &#34;Local&#34; {
<a id="L195"></a><span class="ln">   195</span>			return Local, nil
<a id="L196"></a><span class="ln">   196</span>		}
<a id="L197"></a><span class="ln">   197</span>		if zoneinfo != &#34;&#34; {
<a id="L198"></a><span class="ln">   198</span>			if z, err := loadZoneFile(zoneinfo, name); err == nil {
<a id="L199"></a><span class="ln">   199</span>				z.name = name
<a id="L200"></a><span class="ln">   200</span>				return z, nil
<a id="L201"></a><span class="ln">   201</span>			}
<a id="L202"></a><span class="ln">   202</span>		}
<a id="L203"></a><span class="ln">   203</span>		return loadLocation(name)
<a id="L204"></a><span class="ln">   204</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

