<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/time/sleep.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/time/sleep.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package time
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// Sleep pauses the current goroutine for the duration d.</span>
<a id="L8"></a><span class="ln">     8</span>	func Sleep(d Duration)
<a id="L9"></a><span class="ln">     9</span>	
<a id="L10"></a><span class="ln">    10</span>	func nano() int64 {
<a id="L11"></a><span class="ln">    11</span>		sec, nsec := now()
<a id="L12"></a><span class="ln">    12</span>		return sec*1e9 + int64(nsec)
<a id="L13"></a><span class="ln">    13</span>	}
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// Interface to timers implemented in package runtime.</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// Must be in sync with ../runtime/runtime.h:/^struct.Timer$</span>
<a id="L17"></a><span class="ln">    17</span>	type runtimeTimer struct {
<a id="L18"></a><span class="ln">    18</span>		i      int32
<a id="L19"></a><span class="ln">    19</span>		when   int64
<a id="L20"></a><span class="ln">    20</span>		period int64
<a id="L21"></a><span class="ln">    21</span>		f      func(int64, interface{})
<a id="L22"></a><span class="ln">    22</span>		arg    interface{}
<a id="L23"></a><span class="ln">    23</span>	}
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	func startTimer(*runtimeTimer)
<a id="L26"></a><span class="ln">    26</span>	func stopTimer(*runtimeTimer) bool
<a id="L27"></a><span class="ln">    27</span>	
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// The Timer type represents a single event.</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// When the Timer expires, the current time will be sent on C,</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// unless the Timer was created by AfterFunc.</span>
<a id="L31"></a><span class="ln">    31</span>	type Timer struct {
<a id="L32"></a><span class="ln">    32</span>		C &lt;-chan Time
<a id="L33"></a><span class="ln">    33</span>		r runtimeTimer
<a id="L34"></a><span class="ln">    34</span>	}
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// Stop prevents the Timer from firing.</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// It returns true if the call stops the timer, false if the timer has already</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// expired or stopped.</span>
<a id="L39"></a><span class="ln">    39</span>	func (t *Timer) Stop() (ok bool) {
<a id="L40"></a><span class="ln">    40</span>		return stopTimer(&amp;t.r)
<a id="L41"></a><span class="ln">    41</span>	}
<a id="L42"></a><span class="ln">    42</span>	
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">// NewTimer creates a new Timer that will send</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">// the current time on its channel after at least duration d.</span>
<a id="L45"></a><span class="ln">    45</span>	func NewTimer(d Duration) *Timer {
<a id="L46"></a><span class="ln">    46</span>		c := make(chan Time, 1)
<a id="L47"></a><span class="ln">    47</span>		t := &amp;Timer{
<a id="L48"></a><span class="ln">    48</span>			C: c,
<a id="L49"></a><span class="ln">    49</span>			r: runtimeTimer{
<a id="L50"></a><span class="ln">    50</span>				when: nano() + int64(d),
<a id="L51"></a><span class="ln">    51</span>				f:    sendTime,
<a id="L52"></a><span class="ln">    52</span>				arg:  c,
<a id="L53"></a><span class="ln">    53</span>			},
<a id="L54"></a><span class="ln">    54</span>		}
<a id="L55"></a><span class="ln">    55</span>		startTimer(&amp;t.r)
<a id="L56"></a><span class="ln">    56</span>		return t
<a id="L57"></a><span class="ln">    57</span>	}
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>	func sendTime(now int64, c interface{}) {
<a id="L60"></a><span class="ln">    60</span>		<span class="comment">// Non-blocking send of time on c.</span>
<a id="L61"></a><span class="ln">    61</span>		<span class="comment">// Used in NewTimer, it cannot block anyway (buffer).</span>
<a id="L62"></a><span class="ln">    62</span>		<span class="comment">// Used in NewTicker, dropping sends on the floor is</span>
<a id="L63"></a><span class="ln">    63</span>		<span class="comment">// the desired behavior when the reader gets behind,</span>
<a id="L64"></a><span class="ln">    64</span>		<span class="comment">// because the sends are periodic.</span>
<a id="L65"></a><span class="ln">    65</span>		select {
<a id="L66"></a><span class="ln">    66</span>		case c.(chan Time) &lt;- Unix(0, now):
<a id="L67"></a><span class="ln">    67</span>		default:
<a id="L68"></a><span class="ln">    68</span>		}
<a id="L69"></a><span class="ln">    69</span>	}
<a id="L70"></a><span class="ln">    70</span>	
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">// After waits for the duration to elapse and then sends the current time</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">// on the returned channel.</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// It is equivalent to NewTimer(d).C.</span>
<a id="L74"></a><span class="ln">    74</span>	func After(d Duration) &lt;-chan Time {
<a id="L75"></a><span class="ln">    75</span>		return NewTimer(d).C
<a id="L76"></a><span class="ln">    76</span>	}
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// AfterFunc waits for the duration to elapse and then calls f</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// in its own goroutine. It returns a Timer that can</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// be used to cancel the call using its Stop method.</span>
<a id="L81"></a><span class="ln">    81</span>	func AfterFunc(d Duration, f func()) *Timer {
<a id="L82"></a><span class="ln">    82</span>		t := &amp;Timer{
<a id="L83"></a><span class="ln">    83</span>			r: runtimeTimer{
<a id="L84"></a><span class="ln">    84</span>				when: nano() + int64(d),
<a id="L85"></a><span class="ln">    85</span>				f:    goFunc,
<a id="L86"></a><span class="ln">    86</span>				arg:  f,
<a id="L87"></a><span class="ln">    87</span>			},
<a id="L88"></a><span class="ln">    88</span>		}
<a id="L89"></a><span class="ln">    89</span>		startTimer(&amp;t.r)
<a id="L90"></a><span class="ln">    90</span>		return t
<a id="L91"></a><span class="ln">    91</span>	}
<a id="L92"></a><span class="ln">    92</span>	
<a id="L93"></a><span class="ln">    93</span>	func goFunc(now int64, arg interface{}) {
<a id="L94"></a><span class="ln">    94</span>		go arg.(func())()
<a id="L95"></a><span class="ln">    95</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

