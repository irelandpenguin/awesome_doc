<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/time/zoneinfo_read.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/time/zoneinfo_read.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Parse &#34;zoneinfo&#34; time zone file.</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// This is a fairly standard file format used on OS X, Linux, BSD, Sun, and others.</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// See tzfile(5), http://en.wikipedia.org/wiki/Zoneinfo,</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// and ftp://munnari.oz.au/pub/oldtz/</span>
<a id="L9"></a><span class="ln">     9</span>	
<a id="L10"></a><span class="ln">    10</span>	package time
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	import &#34;errors&#34;
<a id="L13"></a><span class="ln">    13</span>	
<a id="L14"></a><span class="ln">    14</span>	const (
<a id="L15"></a><span class="ln">    15</span>		headerSize = 4 + 16 + 4*7
<a id="L16"></a><span class="ln">    16</span>	)
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// Simple I/O interface to binary blob of data.</span>
<a id="L19"></a><span class="ln">    19</span>	type data struct {
<a id="L20"></a><span class="ln">    20</span>		p     []byte
<a id="L21"></a><span class="ln">    21</span>		error bool
<a id="L22"></a><span class="ln">    22</span>	}
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>	func (d *data) read(n int) []byte {
<a id="L25"></a><span class="ln">    25</span>		if len(d.p) &lt; n {
<a id="L26"></a><span class="ln">    26</span>			d.p = nil
<a id="L27"></a><span class="ln">    27</span>			d.error = true
<a id="L28"></a><span class="ln">    28</span>			return nil
<a id="L29"></a><span class="ln">    29</span>		}
<a id="L30"></a><span class="ln">    30</span>		p := d.p[0:n]
<a id="L31"></a><span class="ln">    31</span>		d.p = d.p[n:]
<a id="L32"></a><span class="ln">    32</span>		return p
<a id="L33"></a><span class="ln">    33</span>	}
<a id="L34"></a><span class="ln">    34</span>	
<a id="L35"></a><span class="ln">    35</span>	func (d *data) big4() (n uint32, ok bool) {
<a id="L36"></a><span class="ln">    36</span>		p := d.read(4)
<a id="L37"></a><span class="ln">    37</span>		if len(p) &lt; 4 {
<a id="L38"></a><span class="ln">    38</span>			d.error = true
<a id="L39"></a><span class="ln">    39</span>			return 0, false
<a id="L40"></a><span class="ln">    40</span>		}
<a id="L41"></a><span class="ln">    41</span>		return uint32(p[0])&lt;&lt;24 | uint32(p[1])&lt;&lt;16 | uint32(p[2])&lt;&lt;8 | uint32(p[3]), true
<a id="L42"></a><span class="ln">    42</span>	}
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	func (d *data) byte() (n byte, ok bool) {
<a id="L45"></a><span class="ln">    45</span>		p := d.read(1)
<a id="L46"></a><span class="ln">    46</span>		if len(p) &lt; 1 {
<a id="L47"></a><span class="ln">    47</span>			d.error = true
<a id="L48"></a><span class="ln">    48</span>			return 0, false
<a id="L49"></a><span class="ln">    49</span>		}
<a id="L50"></a><span class="ln">    50</span>		return p[0], true
<a id="L51"></a><span class="ln">    51</span>	}
<a id="L52"></a><span class="ln">    52</span>	
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">// Make a string by stopping at the first NUL</span>
<a id="L54"></a><span class="ln">    54</span>	func byteString(p []byte) string {
<a id="L55"></a><span class="ln">    55</span>		for i := 0; i &lt; len(p); i++ {
<a id="L56"></a><span class="ln">    56</span>			if p[i] == 0 {
<a id="L57"></a><span class="ln">    57</span>				return string(p[0:i])
<a id="L58"></a><span class="ln">    58</span>			}
<a id="L59"></a><span class="ln">    59</span>		}
<a id="L60"></a><span class="ln">    60</span>		return string(p)
<a id="L61"></a><span class="ln">    61</span>	}
<a id="L62"></a><span class="ln">    62</span>	
<a id="L63"></a><span class="ln">    63</span>	var badData = errors.New(&#34;malformed time zone information&#34;)
<a id="L64"></a><span class="ln">    64</span>	
<a id="L65"></a><span class="ln">    65</span>	func loadZoneData(bytes []byte) (l *Location, err error) {
<a id="L66"></a><span class="ln">    66</span>		d := data{bytes, false}
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>		<span class="comment">// 4-byte magic &#34;TZif&#34;</span>
<a id="L69"></a><span class="ln">    69</span>		if magic := d.read(4); string(magic) != &#34;TZif&#34; {
<a id="L70"></a><span class="ln">    70</span>			return nil, badData
<a id="L71"></a><span class="ln">    71</span>		}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>		<span class="comment">// 1-byte version, then 15 bytes of padding</span>
<a id="L74"></a><span class="ln">    74</span>		var p []byte
<a id="L75"></a><span class="ln">    75</span>		if p = d.read(16); len(p) != 16 || p[0] != 0 &amp;&amp; p[0] != &#39;2&#39; {
<a id="L76"></a><span class="ln">    76</span>			return nil, badData
<a id="L77"></a><span class="ln">    77</span>		}
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>		<span class="comment">// six big-endian 32-bit integers:</span>
<a id="L80"></a><span class="ln">    80</span>		<span class="comment">//	number of UTC/local indicators</span>
<a id="L81"></a><span class="ln">    81</span>		<span class="comment">//	number of standard/wall indicators</span>
<a id="L82"></a><span class="ln">    82</span>		<span class="comment">//	number of leap seconds</span>
<a id="L83"></a><span class="ln">    83</span>		<span class="comment">//	number of transition times</span>
<a id="L84"></a><span class="ln">    84</span>		<span class="comment">//	number of local time zones</span>
<a id="L85"></a><span class="ln">    85</span>		<span class="comment">//	number of characters of time zone abbrev strings</span>
<a id="L86"></a><span class="ln">    86</span>		const (
<a id="L87"></a><span class="ln">    87</span>			NUTCLocal = iota
<a id="L88"></a><span class="ln">    88</span>			NStdWall
<a id="L89"></a><span class="ln">    89</span>			NLeap
<a id="L90"></a><span class="ln">    90</span>			NTime
<a id="L91"></a><span class="ln">    91</span>			NZone
<a id="L92"></a><span class="ln">    92</span>			NChar
<a id="L93"></a><span class="ln">    93</span>		)
<a id="L94"></a><span class="ln">    94</span>		var n [6]int
<a id="L95"></a><span class="ln">    95</span>		for i := 0; i &lt; 6; i++ {
<a id="L96"></a><span class="ln">    96</span>			nn, ok := d.big4()
<a id="L97"></a><span class="ln">    97</span>			if !ok {
<a id="L98"></a><span class="ln">    98</span>				return nil, badData
<a id="L99"></a><span class="ln">    99</span>			}
<a id="L100"></a><span class="ln">   100</span>			n[i] = int(nn)
<a id="L101"></a><span class="ln">   101</span>		}
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>		<span class="comment">// Transition times.</span>
<a id="L104"></a><span class="ln">   104</span>		txtimes := data{d.read(n[NTime] * 4), false}
<a id="L105"></a><span class="ln">   105</span>	
<a id="L106"></a><span class="ln">   106</span>		<span class="comment">// Time zone indices for transition times.</span>
<a id="L107"></a><span class="ln">   107</span>		txzones := d.read(n[NTime])
<a id="L108"></a><span class="ln">   108</span>	
<a id="L109"></a><span class="ln">   109</span>		<span class="comment">// Zone info structures</span>
<a id="L110"></a><span class="ln">   110</span>		zonedata := data{d.read(n[NZone] * 6), false}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>		<span class="comment">// Time zone abbreviations.</span>
<a id="L113"></a><span class="ln">   113</span>		abbrev := d.read(n[NChar])
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>		<span class="comment">// Leap-second time pairs</span>
<a id="L116"></a><span class="ln">   116</span>		d.read(n[NLeap] * 8)
<a id="L117"></a><span class="ln">   117</span>	
<a id="L118"></a><span class="ln">   118</span>		<span class="comment">// Whether tx times associated with local time types</span>
<a id="L119"></a><span class="ln">   119</span>		<span class="comment">// are specified as standard time or wall time.</span>
<a id="L120"></a><span class="ln">   120</span>		isstd := d.read(n[NStdWall])
<a id="L121"></a><span class="ln">   121</span>	
<a id="L122"></a><span class="ln">   122</span>		<span class="comment">// Whether tx times associated with local time types</span>
<a id="L123"></a><span class="ln">   123</span>		<span class="comment">// are specified as UTC or local time.</span>
<a id="L124"></a><span class="ln">   124</span>		isutc := d.read(n[NUTCLocal])
<a id="L125"></a><span class="ln">   125</span>	
<a id="L126"></a><span class="ln">   126</span>		if d.error { <span class="comment">// ran out of data</span>
<a id="L127"></a><span class="ln">   127</span>			return nil, badData
<a id="L128"></a><span class="ln">   128</span>		}
<a id="L129"></a><span class="ln">   129</span>	
<a id="L130"></a><span class="ln">   130</span>		<span class="comment">// If version == 2, the entire file repeats, this time using</span>
<a id="L131"></a><span class="ln">   131</span>		<span class="comment">// 8-byte ints for txtimes and leap seconds.</span>
<a id="L132"></a><span class="ln">   132</span>		<span class="comment">// We won&#39;t need those until 2106.</span>
<a id="L133"></a><span class="ln">   133</span>	
<a id="L134"></a><span class="ln">   134</span>		<span class="comment">// Now we can build up a useful data structure.</span>
<a id="L135"></a><span class="ln">   135</span>		<span class="comment">// First the zone information.</span>
<a id="L136"></a><span class="ln">   136</span>		<span class="comment">//	utcoff[4] isdst[1] nameindex[1]</span>
<a id="L137"></a><span class="ln">   137</span>		zone := make([]zone, n[NZone])
<a id="L138"></a><span class="ln">   138</span>		for i := range zone {
<a id="L139"></a><span class="ln">   139</span>			var ok bool
<a id="L140"></a><span class="ln">   140</span>			var n uint32
<a id="L141"></a><span class="ln">   141</span>			if n, ok = zonedata.big4(); !ok {
<a id="L142"></a><span class="ln">   142</span>				return nil, badData
<a id="L143"></a><span class="ln">   143</span>			}
<a id="L144"></a><span class="ln">   144</span>			zone[i].offset = int(n)
<a id="L145"></a><span class="ln">   145</span>			var b byte
<a id="L146"></a><span class="ln">   146</span>			if b, ok = zonedata.byte(); !ok {
<a id="L147"></a><span class="ln">   147</span>				return nil, badData
<a id="L148"></a><span class="ln">   148</span>			}
<a id="L149"></a><span class="ln">   149</span>			zone[i].isDST = b != 0
<a id="L150"></a><span class="ln">   150</span>			if b, ok = zonedata.byte(); !ok || int(b) &gt;= len(abbrev) {
<a id="L151"></a><span class="ln">   151</span>				return nil, badData
<a id="L152"></a><span class="ln">   152</span>			}
<a id="L153"></a><span class="ln">   153</span>			zone[i].name = byteString(abbrev[b:])
<a id="L154"></a><span class="ln">   154</span>		}
<a id="L155"></a><span class="ln">   155</span>	
<a id="L156"></a><span class="ln">   156</span>		<span class="comment">// Now the transition time info.</span>
<a id="L157"></a><span class="ln">   157</span>		tx := make([]zoneTrans, n[NTime])
<a id="L158"></a><span class="ln">   158</span>		for i := range tx {
<a id="L159"></a><span class="ln">   159</span>			var ok bool
<a id="L160"></a><span class="ln">   160</span>			var n uint32
<a id="L161"></a><span class="ln">   161</span>			if n, ok = txtimes.big4(); !ok {
<a id="L162"></a><span class="ln">   162</span>				return nil, badData
<a id="L163"></a><span class="ln">   163</span>			}
<a id="L164"></a><span class="ln">   164</span>			tx[i].when = int64(int32(n))
<a id="L165"></a><span class="ln">   165</span>			if int(txzones[i]) &gt;= len(zone) {
<a id="L166"></a><span class="ln">   166</span>				return nil, badData
<a id="L167"></a><span class="ln">   167</span>			}
<a id="L168"></a><span class="ln">   168</span>			tx[i].index = txzones[i]
<a id="L169"></a><span class="ln">   169</span>			if i &lt; len(isstd) {
<a id="L170"></a><span class="ln">   170</span>				tx[i].isstd = isstd[i] != 0
<a id="L171"></a><span class="ln">   171</span>			}
<a id="L172"></a><span class="ln">   172</span>			if i &lt; len(isutc) {
<a id="L173"></a><span class="ln">   173</span>				tx[i].isutc = isutc[i] != 0
<a id="L174"></a><span class="ln">   174</span>			}
<a id="L175"></a><span class="ln">   175</span>		}
<a id="L176"></a><span class="ln">   176</span>	
<a id="L177"></a><span class="ln">   177</span>		<span class="comment">// Commited to succeed.</span>
<a id="L178"></a><span class="ln">   178</span>		l = &amp;Location{zone: zone, tx: tx}
<a id="L179"></a><span class="ln">   179</span>	
<a id="L180"></a><span class="ln">   180</span>		<span class="comment">// Fill in the cache with information about right now,</span>
<a id="L181"></a><span class="ln">   181</span>		<span class="comment">// since that will be the most common lookup.</span>
<a id="L182"></a><span class="ln">   182</span>		sec, _ := now()
<a id="L183"></a><span class="ln">   183</span>		for i := range tx {
<a id="L184"></a><span class="ln">   184</span>			if tx[i].when &lt;= sec &amp;&amp; (i+1 == len(tx) || sec &lt; tx[i+1].when) {
<a id="L185"></a><span class="ln">   185</span>				l.cacheStart = tx[i].when
<a id="L186"></a><span class="ln">   186</span>				l.cacheEnd = 1&lt;&lt;63 - 1
<a id="L187"></a><span class="ln">   187</span>				if i+1 &lt; len(tx) {
<a id="L188"></a><span class="ln">   188</span>					l.cacheEnd = tx[i+1].when
<a id="L189"></a><span class="ln">   189</span>				}
<a id="L190"></a><span class="ln">   190</span>				l.cacheZone = &amp;l.zone[tx[i].index]
<a id="L191"></a><span class="ln">   191</span>			}
<a id="L192"></a><span class="ln">   192</span>		}
<a id="L193"></a><span class="ln">   193</span>	
<a id="L194"></a><span class="ln">   194</span>		return l, nil
<a id="L195"></a><span class="ln">   195</span>	}
<a id="L196"></a><span class="ln">   196</span>	
<a id="L197"></a><span class="ln">   197</span>	func loadZoneFile(dir, name string) (l *Location, err error) {
<a id="L198"></a><span class="ln">   198</span>		if len(dir) &gt; 4 &amp;&amp; dir[len(dir)-4:] == &#34;.zip&#34; {
<a id="L199"></a><span class="ln">   199</span>			return loadZoneZip(dir, name)
<a id="L200"></a><span class="ln">   200</span>		}
<a id="L201"></a><span class="ln">   201</span>		if dir != &#34;&#34; {
<a id="L202"></a><span class="ln">   202</span>			name = dir + &#34;/&#34; + name
<a id="L203"></a><span class="ln">   203</span>		}
<a id="L204"></a><span class="ln">   204</span>		buf, err := readFile(name)
<a id="L205"></a><span class="ln">   205</span>		if err != nil {
<a id="L206"></a><span class="ln">   206</span>			return
<a id="L207"></a><span class="ln">   207</span>		}
<a id="L208"></a><span class="ln">   208</span>		return loadZoneData(buf)
<a id="L209"></a><span class="ln">   209</span>	}
<a id="L210"></a><span class="ln">   210</span>	
<a id="L211"></a><span class="ln">   211</span>	<span class="comment">// There are 500+ zoneinfo files.  Rather than distribute them all</span>
<a id="L212"></a><span class="ln">   212</span>	<span class="comment">// individually, we ship them in an uncompressed zip file.</span>
<a id="L213"></a><span class="ln">   213</span>	<span class="comment">// Used this way, the zip file format serves as a commonly readable</span>
<a id="L214"></a><span class="ln">   214</span>	<span class="comment">// container for the individual small files.  We choose zip over tar</span>
<a id="L215"></a><span class="ln">   215</span>	<span class="comment">// because zip files have a contiguous table of contents, making</span>
<a id="L216"></a><span class="ln">   216</span>	<span class="comment">// individual file lookups faster, and because the per-file overhead</span>
<a id="L217"></a><span class="ln">   217</span>	<span class="comment">// in a zip file is considerably less than tar&#39;s 512 bytes.</span>
<a id="L218"></a><span class="ln">   218</span>	
<a id="L219"></a><span class="ln">   219</span>	<span class="comment">// get4 returns the little-endian 32-bit value in b.</span>
<a id="L220"></a><span class="ln">   220</span>	func get4(b []byte) int {
<a id="L221"></a><span class="ln">   221</span>		if len(b) &lt; 4 {
<a id="L222"></a><span class="ln">   222</span>			return 0
<a id="L223"></a><span class="ln">   223</span>		}
<a id="L224"></a><span class="ln">   224</span>		return int(b[0]) | int(b[1])&lt;&lt;8 | int(b[2])&lt;&lt;16 | int(b[3])&lt;&lt;24
<a id="L225"></a><span class="ln">   225</span>	}
<a id="L226"></a><span class="ln">   226</span>	
<a id="L227"></a><span class="ln">   227</span>	<span class="comment">// get2 returns the little-endian 16-bit value in b.</span>
<a id="L228"></a><span class="ln">   228</span>	func get2(b []byte) int {
<a id="L229"></a><span class="ln">   229</span>		if len(b) &lt; 2 {
<a id="L230"></a><span class="ln">   230</span>			return 0
<a id="L231"></a><span class="ln">   231</span>		}
<a id="L232"></a><span class="ln">   232</span>		return int(b[0]) | int(b[1])&lt;&lt;8
<a id="L233"></a><span class="ln">   233</span>	}
<a id="L234"></a><span class="ln">   234</span>	
<a id="L235"></a><span class="ln">   235</span>	func loadZoneZip(zipfile, name string) (l *Location, err error) {
<a id="L236"></a><span class="ln">   236</span>		fd, err := open(zipfile)
<a id="L237"></a><span class="ln">   237</span>		if err != nil {
<a id="L238"></a><span class="ln">   238</span>			return nil, errors.New(&#34;open &#34; + zipfile + &#34;: &#34; + err.Error())
<a id="L239"></a><span class="ln">   239</span>		}
<a id="L240"></a><span class="ln">   240</span>		defer closefd(fd)
<a id="L241"></a><span class="ln">   241</span>	
<a id="L242"></a><span class="ln">   242</span>		const (
<a id="L243"></a><span class="ln">   243</span>			zecheader = 0x06054b50
<a id="L244"></a><span class="ln">   244</span>			zcheader  = 0x02014b50
<a id="L245"></a><span class="ln">   245</span>			ztailsize = 22
<a id="L246"></a><span class="ln">   246</span>	
<a id="L247"></a><span class="ln">   247</span>			zheadersize = 30
<a id="L248"></a><span class="ln">   248</span>			zheader     = 0x04034b50
<a id="L249"></a><span class="ln">   249</span>		)
<a id="L250"></a><span class="ln">   250</span>	
<a id="L251"></a><span class="ln">   251</span>		buf := make([]byte, ztailsize)
<a id="L252"></a><span class="ln">   252</span>		if err := preadn(fd, buf, -ztailsize); err != nil || get4(buf) != zecheader {
<a id="L253"></a><span class="ln">   253</span>			return nil, errors.New(&#34;corrupt zip file &#34; + zipfile)
<a id="L254"></a><span class="ln">   254</span>		}
<a id="L255"></a><span class="ln">   255</span>		n := get2(buf[10:])
<a id="L256"></a><span class="ln">   256</span>		size := get4(buf[12:])
<a id="L257"></a><span class="ln">   257</span>		off := get4(buf[16:])
<a id="L258"></a><span class="ln">   258</span>	
<a id="L259"></a><span class="ln">   259</span>		buf = make([]byte, size)
<a id="L260"></a><span class="ln">   260</span>		if err := preadn(fd, buf, off); err != nil {
<a id="L261"></a><span class="ln">   261</span>			return nil, errors.New(&#34;corrupt zip file &#34; + zipfile)
<a id="L262"></a><span class="ln">   262</span>		}
<a id="L263"></a><span class="ln">   263</span>	
<a id="L264"></a><span class="ln">   264</span>		for i := 0; i &lt; n; i++ {
<a id="L265"></a><span class="ln">   265</span>			<span class="comment">// zip entry layout:</span>
<a id="L266"></a><span class="ln">   266</span>			<span class="comment">//	0	magic[4]</span>
<a id="L267"></a><span class="ln">   267</span>			<span class="comment">//	4	madevers[1]</span>
<a id="L268"></a><span class="ln">   268</span>			<span class="comment">//	5	madeos[1]</span>
<a id="L269"></a><span class="ln">   269</span>			<span class="comment">//	6	extvers[1]</span>
<a id="L270"></a><span class="ln">   270</span>			<span class="comment">//	7	extos[1]</span>
<a id="L271"></a><span class="ln">   271</span>			<span class="comment">//	8	flags[2]</span>
<a id="L272"></a><span class="ln">   272</span>			<span class="comment">//	10	meth[2]</span>
<a id="L273"></a><span class="ln">   273</span>			<span class="comment">//	12	modtime[2]</span>
<a id="L274"></a><span class="ln">   274</span>			<span class="comment">//	14	moddate[2]</span>
<a id="L275"></a><span class="ln">   275</span>			<span class="comment">//	16	crc[4]</span>
<a id="L276"></a><span class="ln">   276</span>			<span class="comment">//	20	csize[4]</span>
<a id="L277"></a><span class="ln">   277</span>			<span class="comment">//	24	uncsize[4]</span>
<a id="L278"></a><span class="ln">   278</span>			<span class="comment">//	28	namelen[2]</span>
<a id="L279"></a><span class="ln">   279</span>			<span class="comment">//	30	xlen[2]</span>
<a id="L280"></a><span class="ln">   280</span>			<span class="comment">//	32	fclen[2]</span>
<a id="L281"></a><span class="ln">   281</span>			<span class="comment">//	34	disknum[2]</span>
<a id="L282"></a><span class="ln">   282</span>			<span class="comment">//	36	iattr[2]</span>
<a id="L283"></a><span class="ln">   283</span>			<span class="comment">//	38	eattr[4]</span>
<a id="L284"></a><span class="ln">   284</span>			<span class="comment">//	42	off[4]</span>
<a id="L285"></a><span class="ln">   285</span>			<span class="comment">//	46	name[namelen]</span>
<a id="L286"></a><span class="ln">   286</span>			<span class="comment">//	46+namelen+xlen+fclen - next header</span>
<a id="L287"></a><span class="ln">   287</span>			<span class="comment">//		</span>
<a id="L288"></a><span class="ln">   288</span>			if get4(buf) != zcheader {
<a id="L289"></a><span class="ln">   289</span>				break
<a id="L290"></a><span class="ln">   290</span>			}
<a id="L291"></a><span class="ln">   291</span>			meth := get2(buf[10:])
<a id="L292"></a><span class="ln">   292</span>			size := get4(buf[24:])
<a id="L293"></a><span class="ln">   293</span>			namelen := get2(buf[28:])
<a id="L294"></a><span class="ln">   294</span>			xlen := get2(buf[30:])
<a id="L295"></a><span class="ln">   295</span>			fclen := get2(buf[32:])
<a id="L296"></a><span class="ln">   296</span>			off := get4(buf[42:])
<a id="L297"></a><span class="ln">   297</span>			zname := buf[46 : 46+namelen]
<a id="L298"></a><span class="ln">   298</span>			buf = buf[46+namelen+xlen+fclen:]
<a id="L299"></a><span class="ln">   299</span>			if string(zname) != name {
<a id="L300"></a><span class="ln">   300</span>				continue
<a id="L301"></a><span class="ln">   301</span>			}
<a id="L302"></a><span class="ln">   302</span>			if meth != 0 {
<a id="L303"></a><span class="ln">   303</span>				return nil, errors.New(&#34;unsupported compression for &#34; + name + &#34; in &#34; + zipfile)
<a id="L304"></a><span class="ln">   304</span>			}
<a id="L305"></a><span class="ln">   305</span>	
<a id="L306"></a><span class="ln">   306</span>			<span class="comment">// zip per-file header layout:</span>
<a id="L307"></a><span class="ln">   307</span>			<span class="comment">//	0	magic[4]</span>
<a id="L308"></a><span class="ln">   308</span>			<span class="comment">//	4	extvers[1]</span>
<a id="L309"></a><span class="ln">   309</span>			<span class="comment">//	5	extos[1]</span>
<a id="L310"></a><span class="ln">   310</span>			<span class="comment">//	6	flags[2]</span>
<a id="L311"></a><span class="ln">   311</span>			<span class="comment">//	8	meth[2]</span>
<a id="L312"></a><span class="ln">   312</span>			<span class="comment">//	10	modtime[2]</span>
<a id="L313"></a><span class="ln">   313</span>			<span class="comment">//	12	moddate[2]</span>
<a id="L314"></a><span class="ln">   314</span>			<span class="comment">//	14	crc[4]</span>
<a id="L315"></a><span class="ln">   315</span>			<span class="comment">//	18	csize[4]</span>
<a id="L316"></a><span class="ln">   316</span>			<span class="comment">//	22	uncsize[4]</span>
<a id="L317"></a><span class="ln">   317</span>			<span class="comment">//	26	namelen[2]</span>
<a id="L318"></a><span class="ln">   318</span>			<span class="comment">//	28	xlen[2]</span>
<a id="L319"></a><span class="ln">   319</span>			<span class="comment">//	30	name[namelen]</span>
<a id="L320"></a><span class="ln">   320</span>			<span class="comment">//	30+namelen+xlen - file data</span>
<a id="L321"></a><span class="ln">   321</span>			<span class="comment">//</span>
<a id="L322"></a><span class="ln">   322</span>			buf = make([]byte, zheadersize+namelen)
<a id="L323"></a><span class="ln">   323</span>			if err := preadn(fd, buf, off); err != nil ||
<a id="L324"></a><span class="ln">   324</span>				get4(buf) != zheader ||
<a id="L325"></a><span class="ln">   325</span>				get2(buf[8:]) != meth ||
<a id="L326"></a><span class="ln">   326</span>				get2(buf[26:]) != namelen ||
<a id="L327"></a><span class="ln">   327</span>				string(buf[30:30+namelen]) != name {
<a id="L328"></a><span class="ln">   328</span>				return nil, errors.New(&#34;corrupt zip file &#34; + zipfile)
<a id="L329"></a><span class="ln">   329</span>			}
<a id="L330"></a><span class="ln">   330</span>			xlen = get2(buf[28:])
<a id="L331"></a><span class="ln">   331</span>	
<a id="L332"></a><span class="ln">   332</span>			buf = make([]byte, size)
<a id="L333"></a><span class="ln">   333</span>			if err := preadn(fd, buf, off+30+namelen+xlen); err != nil {
<a id="L334"></a><span class="ln">   334</span>				return nil, errors.New(&#34;corrupt zip file &#34; + zipfile)
<a id="L335"></a><span class="ln">   335</span>			}
<a id="L336"></a><span class="ln">   336</span>	
<a id="L337"></a><span class="ln">   337</span>			return loadZoneData(buf)
<a id="L338"></a><span class="ln">   338</span>		}
<a id="L339"></a><span class="ln">   339</span>	
<a id="L340"></a><span class="ln">   340</span>		return nil, errors.New(&#34;cannot find &#34; + name + &#34; in zip file &#34; + zipfile)
<a id="L341"></a><span class="ln">   341</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

