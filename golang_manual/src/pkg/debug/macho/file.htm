<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/debug/macho/file.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/debug/macho/file.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package macho implements access to Mach-O object files.</span>
<a id="L6"></a><span class="ln">     6</span>	package macho
<a id="L7"></a><span class="ln">     7</span>	
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// High level access to low level data structures.</span>
<a id="L9"></a><span class="ln">     9</span>	
<a id="L10"></a><span class="ln">    10</span>	import (
<a id="L11"></a><span class="ln">    11</span>		&#34;bytes&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;debug/dwarf&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;encoding/binary&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;errors&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;fmt&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;io&#34;
<a id="L17"></a><span class="ln">    17</span>		&#34;os&#34;
<a id="L18"></a><span class="ln">    18</span>	)
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// A File represents an open Mach-O file.</span>
<a id="L21"></a><span class="ln">    21</span>	type File struct {
<a id="L22"></a><span class="ln">    22</span>		FileHeader
<a id="L23"></a><span class="ln">    23</span>		ByteOrder binary.ByteOrder
<a id="L24"></a><span class="ln">    24</span>		Loads     []Load
<a id="L25"></a><span class="ln">    25</span>		Sections  []*Section
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>		Symtab   *Symtab
<a id="L28"></a><span class="ln">    28</span>		Dysymtab *Dysymtab
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>		closer io.Closer
<a id="L31"></a><span class="ln">    31</span>	}
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// A Load represents any Mach-O load command.</span>
<a id="L34"></a><span class="ln">    34</span>	type Load interface {
<a id="L35"></a><span class="ln">    35</span>		Raw() []byte
<a id="L36"></a><span class="ln">    36</span>	}
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// A LoadBytes is the uninterpreted bytes of a Mach-O load command.</span>
<a id="L39"></a><span class="ln">    39</span>	type LoadBytes []byte
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>	func (b LoadBytes) Raw() []byte { return b }
<a id="L42"></a><span class="ln">    42</span>	
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">// A SegmentHeader is the header for a Mach-O 32-bit or 64-bit load segment command.</span>
<a id="L44"></a><span class="ln">    44</span>	type SegmentHeader struct {
<a id="L45"></a><span class="ln">    45</span>		Cmd     LoadCmd
<a id="L46"></a><span class="ln">    46</span>		Len     uint32
<a id="L47"></a><span class="ln">    47</span>		Name    string
<a id="L48"></a><span class="ln">    48</span>		Addr    uint64
<a id="L49"></a><span class="ln">    49</span>		Memsz   uint64
<a id="L50"></a><span class="ln">    50</span>		Offset  uint64
<a id="L51"></a><span class="ln">    51</span>		Filesz  uint64
<a id="L52"></a><span class="ln">    52</span>		Maxprot uint32
<a id="L53"></a><span class="ln">    53</span>		Prot    uint32
<a id="L54"></a><span class="ln">    54</span>		Nsect   uint32
<a id="L55"></a><span class="ln">    55</span>		Flag    uint32
<a id="L56"></a><span class="ln">    56</span>	}
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// A Segment represents a Mach-O 32-bit or 64-bit load segment command.</span>
<a id="L59"></a><span class="ln">    59</span>	type Segment struct {
<a id="L60"></a><span class="ln">    60</span>		LoadBytes
<a id="L61"></a><span class="ln">    61</span>		SegmentHeader
<a id="L62"></a><span class="ln">    62</span>	
<a id="L63"></a><span class="ln">    63</span>		<span class="comment">// Embed ReaderAt for ReadAt method.</span>
<a id="L64"></a><span class="ln">    64</span>		<span class="comment">// Do not embed SectionReader directly</span>
<a id="L65"></a><span class="ln">    65</span>		<span class="comment">// to avoid having Read and Seek.</span>
<a id="L66"></a><span class="ln">    66</span>		<span class="comment">// If a client wants Read and Seek it must use</span>
<a id="L67"></a><span class="ln">    67</span>		<span class="comment">// Open() to avoid fighting over the seek offset</span>
<a id="L68"></a><span class="ln">    68</span>		<span class="comment">// with other clients.</span>
<a id="L69"></a><span class="ln">    69</span>		io.ReaderAt
<a id="L70"></a><span class="ln">    70</span>		sr *io.SectionReader
<a id="L71"></a><span class="ln">    71</span>	}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// Data reads and returns the contents of the segment.</span>
<a id="L74"></a><span class="ln">    74</span>	func (s *Segment) Data() ([]byte, error) {
<a id="L75"></a><span class="ln">    75</span>		dat := make([]byte, s.sr.Size())
<a id="L76"></a><span class="ln">    76</span>		n, err := s.sr.ReadAt(dat, 0)
<a id="L77"></a><span class="ln">    77</span>		return dat[0:n], err
<a id="L78"></a><span class="ln">    78</span>	}
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// Open returns a new ReadSeeker reading the segment.</span>
<a id="L81"></a><span class="ln">    81</span>	func (s *Segment) Open() io.ReadSeeker { return io.NewSectionReader(s.sr, 0, 1&lt;&lt;63-1) }
<a id="L82"></a><span class="ln">    82</span>	
<a id="L83"></a><span class="ln">    83</span>	type SectionHeader struct {
<a id="L84"></a><span class="ln">    84</span>		Name   string
<a id="L85"></a><span class="ln">    85</span>		Seg    string
<a id="L86"></a><span class="ln">    86</span>		Addr   uint64
<a id="L87"></a><span class="ln">    87</span>		Size   uint64
<a id="L88"></a><span class="ln">    88</span>		Offset uint32
<a id="L89"></a><span class="ln">    89</span>		Align  uint32
<a id="L90"></a><span class="ln">    90</span>		Reloff uint32
<a id="L91"></a><span class="ln">    91</span>		Nreloc uint32
<a id="L92"></a><span class="ln">    92</span>		Flags  uint32
<a id="L93"></a><span class="ln">    93</span>	}
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>	type Section struct {
<a id="L96"></a><span class="ln">    96</span>		SectionHeader
<a id="L97"></a><span class="ln">    97</span>	
<a id="L98"></a><span class="ln">    98</span>		<span class="comment">// Embed ReaderAt for ReadAt method.</span>
<a id="L99"></a><span class="ln">    99</span>		<span class="comment">// Do not embed SectionReader directly</span>
<a id="L100"></a><span class="ln">   100</span>		<span class="comment">// to avoid having Read and Seek.</span>
<a id="L101"></a><span class="ln">   101</span>		<span class="comment">// If a client wants Read and Seek it must use</span>
<a id="L102"></a><span class="ln">   102</span>		<span class="comment">// Open() to avoid fighting over the seek offset</span>
<a id="L103"></a><span class="ln">   103</span>		<span class="comment">// with other clients.</span>
<a id="L104"></a><span class="ln">   104</span>		io.ReaderAt
<a id="L105"></a><span class="ln">   105</span>		sr *io.SectionReader
<a id="L106"></a><span class="ln">   106</span>	}
<a id="L107"></a><span class="ln">   107</span>	
<a id="L108"></a><span class="ln">   108</span>	<span class="comment">// Data reads and returns the contents of the Mach-O section.</span>
<a id="L109"></a><span class="ln">   109</span>	func (s *Section) Data() ([]byte, error) {
<a id="L110"></a><span class="ln">   110</span>		dat := make([]byte, s.sr.Size())
<a id="L111"></a><span class="ln">   111</span>		n, err := s.sr.ReadAt(dat, 0)
<a id="L112"></a><span class="ln">   112</span>		return dat[0:n], err
<a id="L113"></a><span class="ln">   113</span>	}
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>	<span class="comment">// Open returns a new ReadSeeker reading the Mach-O section.</span>
<a id="L116"></a><span class="ln">   116</span>	func (s *Section) Open() io.ReadSeeker { return io.NewSectionReader(s.sr, 0, 1&lt;&lt;63-1) }
<a id="L117"></a><span class="ln">   117</span>	
<a id="L118"></a><span class="ln">   118</span>	<span class="comment">// A Dylib represents a Mach-O load dynamic library command.</span>
<a id="L119"></a><span class="ln">   119</span>	type Dylib struct {
<a id="L120"></a><span class="ln">   120</span>		LoadBytes
<a id="L121"></a><span class="ln">   121</span>		Name           string
<a id="L122"></a><span class="ln">   122</span>		Time           uint32
<a id="L123"></a><span class="ln">   123</span>		CurrentVersion uint32
<a id="L124"></a><span class="ln">   124</span>		CompatVersion  uint32
<a id="L125"></a><span class="ln">   125</span>	}
<a id="L126"></a><span class="ln">   126</span>	
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// A Symtab represents a Mach-O symbol table command.</span>
<a id="L128"></a><span class="ln">   128</span>	type Symtab struct {
<a id="L129"></a><span class="ln">   129</span>		LoadBytes
<a id="L130"></a><span class="ln">   130</span>		SymtabCmd
<a id="L131"></a><span class="ln">   131</span>		Syms []Symbol
<a id="L132"></a><span class="ln">   132</span>	}
<a id="L133"></a><span class="ln">   133</span>	
<a id="L134"></a><span class="ln">   134</span>	<span class="comment">// A Dysymtab represents a Mach-O dynamic symbol table command.</span>
<a id="L135"></a><span class="ln">   135</span>	type Dysymtab struct {
<a id="L136"></a><span class="ln">   136</span>		LoadBytes
<a id="L137"></a><span class="ln">   137</span>		DysymtabCmd
<a id="L138"></a><span class="ln">   138</span>		IndirectSyms []uint32 <span class="comment">// indices into Symtab.Syms</span>
<a id="L139"></a><span class="ln">   139</span>	}
<a id="L140"></a><span class="ln">   140</span>	
<a id="L141"></a><span class="ln">   141</span>	<span class="comment">/*
</span><a id="L142"></a><span class="ln">   142</span>	<span class="comment"> * Mach-O reader
</span><a id="L143"></a><span class="ln">   143</span>	<span class="comment"> */</span>
<a id="L144"></a><span class="ln">   144</span>	
<a id="L145"></a><span class="ln">   145</span>	type FormatError struct {
<a id="L146"></a><span class="ln">   146</span>		off int64
<a id="L147"></a><span class="ln">   147</span>		msg string
<a id="L148"></a><span class="ln">   148</span>		val interface{}
<a id="L149"></a><span class="ln">   149</span>	}
<a id="L150"></a><span class="ln">   150</span>	
<a id="L151"></a><span class="ln">   151</span>	func (e *FormatError) Error() string {
<a id="L152"></a><span class="ln">   152</span>		msg := e.msg
<a id="L153"></a><span class="ln">   153</span>		if e.val != nil {
<a id="L154"></a><span class="ln">   154</span>			msg += fmt.Sprintf(&#34; &#39;%v&#39;&#34;, e.val)
<a id="L155"></a><span class="ln">   155</span>		}
<a id="L156"></a><span class="ln">   156</span>		msg += fmt.Sprintf(&#34; in record at byte %#x&#34;, e.off)
<a id="L157"></a><span class="ln">   157</span>		return msg
<a id="L158"></a><span class="ln">   158</span>	}
<a id="L159"></a><span class="ln">   159</span>	
<a id="L160"></a><span class="ln">   160</span>	<span class="comment">// Open opens the named file using os.Open and prepares it for use as a Mach-O binary.</span>
<a id="L161"></a><span class="ln">   161</span>	func Open(name string) (*File, error) {
<a id="L162"></a><span class="ln">   162</span>		f, err := os.Open(name)
<a id="L163"></a><span class="ln">   163</span>		if err != nil {
<a id="L164"></a><span class="ln">   164</span>			return nil, err
<a id="L165"></a><span class="ln">   165</span>		}
<a id="L166"></a><span class="ln">   166</span>		ff, err := NewFile(f)
<a id="L167"></a><span class="ln">   167</span>		if err != nil {
<a id="L168"></a><span class="ln">   168</span>			f.Close()
<a id="L169"></a><span class="ln">   169</span>			return nil, err
<a id="L170"></a><span class="ln">   170</span>		}
<a id="L171"></a><span class="ln">   171</span>		ff.closer = f
<a id="L172"></a><span class="ln">   172</span>		return ff, nil
<a id="L173"></a><span class="ln">   173</span>	}
<a id="L174"></a><span class="ln">   174</span>	
<a id="L175"></a><span class="ln">   175</span>	<span class="comment">// Close closes the File.</span>
<a id="L176"></a><span class="ln">   176</span>	<span class="comment">// If the File was created using NewFile directly instead of Open,</span>
<a id="L177"></a><span class="ln">   177</span>	<span class="comment">// Close has no effect.</span>
<a id="L178"></a><span class="ln">   178</span>	func (f *File) Close() error {
<a id="L179"></a><span class="ln">   179</span>		var err error
<a id="L180"></a><span class="ln">   180</span>		if f.closer != nil {
<a id="L181"></a><span class="ln">   181</span>			err = f.closer.Close()
<a id="L182"></a><span class="ln">   182</span>			f.closer = nil
<a id="L183"></a><span class="ln">   183</span>		}
<a id="L184"></a><span class="ln">   184</span>		return err
<a id="L185"></a><span class="ln">   185</span>	}
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>	<span class="comment">// NewFile creates a new File for accessing a Mach-O binary in an underlying reader.</span>
<a id="L188"></a><span class="ln">   188</span>	<span class="comment">// The Mach-O binary is expected to start at position 0 in the ReaderAt.</span>
<a id="L189"></a><span class="ln">   189</span>	func NewFile(r io.ReaderAt) (*File, error) {
<a id="L190"></a><span class="ln">   190</span>		f := new(File)
<a id="L191"></a><span class="ln">   191</span>		sr := io.NewSectionReader(r, 0, 1&lt;&lt;63-1)
<a id="L192"></a><span class="ln">   192</span>	
<a id="L193"></a><span class="ln">   193</span>		<span class="comment">// Read and decode Mach magic to determine byte order, size.</span>
<a id="L194"></a><span class="ln">   194</span>		<span class="comment">// Magic32 and Magic64 differ only in the bottom bit.</span>
<a id="L195"></a><span class="ln">   195</span>		var ident [4]byte
<a id="L196"></a><span class="ln">   196</span>		if _, err := r.ReadAt(ident[0:], 0); err != nil {
<a id="L197"></a><span class="ln">   197</span>			return nil, err
<a id="L198"></a><span class="ln">   198</span>		}
<a id="L199"></a><span class="ln">   199</span>		be := binary.BigEndian.Uint32(ident[0:])
<a id="L200"></a><span class="ln">   200</span>		le := binary.LittleEndian.Uint32(ident[0:])
<a id="L201"></a><span class="ln">   201</span>		switch Magic32 &amp;^ 1 {
<a id="L202"></a><span class="ln">   202</span>		case be &amp;^ 1:
<a id="L203"></a><span class="ln">   203</span>			f.ByteOrder = binary.BigEndian
<a id="L204"></a><span class="ln">   204</span>			f.Magic = be
<a id="L205"></a><span class="ln">   205</span>		case le &amp;^ 1:
<a id="L206"></a><span class="ln">   206</span>			f.ByteOrder = binary.LittleEndian
<a id="L207"></a><span class="ln">   207</span>			f.Magic = le
<a id="L208"></a><span class="ln">   208</span>		default:
<a id="L209"></a><span class="ln">   209</span>			return nil, &amp;FormatError{0, &#34;invalid magic number&#34;, nil}
<a id="L210"></a><span class="ln">   210</span>		}
<a id="L211"></a><span class="ln">   211</span>	
<a id="L212"></a><span class="ln">   212</span>		<span class="comment">// Read entire file header.</span>
<a id="L213"></a><span class="ln">   213</span>		if err := binary.Read(sr, f.ByteOrder, &amp;f.FileHeader); err != nil {
<a id="L214"></a><span class="ln">   214</span>			return nil, err
<a id="L215"></a><span class="ln">   215</span>		}
<a id="L216"></a><span class="ln">   216</span>	
<a id="L217"></a><span class="ln">   217</span>		<span class="comment">// Then load commands.</span>
<a id="L218"></a><span class="ln">   218</span>		offset := int64(fileHeaderSize32)
<a id="L219"></a><span class="ln">   219</span>		if f.Magic == Magic64 {
<a id="L220"></a><span class="ln">   220</span>			offset = fileHeaderSize64
<a id="L221"></a><span class="ln">   221</span>		}
<a id="L222"></a><span class="ln">   222</span>		dat := make([]byte, f.Cmdsz)
<a id="L223"></a><span class="ln">   223</span>		if _, err := r.ReadAt(dat, offset); err != nil {
<a id="L224"></a><span class="ln">   224</span>			return nil, err
<a id="L225"></a><span class="ln">   225</span>		}
<a id="L226"></a><span class="ln">   226</span>		f.Loads = make([]Load, f.Ncmd)
<a id="L227"></a><span class="ln">   227</span>		bo := f.ByteOrder
<a id="L228"></a><span class="ln">   228</span>		for i := range f.Loads {
<a id="L229"></a><span class="ln">   229</span>			<span class="comment">// Each load command begins with uint32 command and length.</span>
<a id="L230"></a><span class="ln">   230</span>			if len(dat) &lt; 8 {
<a id="L231"></a><span class="ln">   231</span>				return nil, &amp;FormatError{offset, &#34;command block too small&#34;, nil}
<a id="L232"></a><span class="ln">   232</span>			}
<a id="L233"></a><span class="ln">   233</span>			cmd, siz := LoadCmd(bo.Uint32(dat[0:4])), bo.Uint32(dat[4:8])
<a id="L234"></a><span class="ln">   234</span>			if siz &lt; 8 || siz &gt; uint32(len(dat)) {
<a id="L235"></a><span class="ln">   235</span>				return nil, &amp;FormatError{offset, &#34;invalid command block size&#34;, nil}
<a id="L236"></a><span class="ln">   236</span>			}
<a id="L237"></a><span class="ln">   237</span>			var cmddat []byte
<a id="L238"></a><span class="ln">   238</span>			cmddat, dat = dat[0:siz], dat[siz:]
<a id="L239"></a><span class="ln">   239</span>			offset += int64(siz)
<a id="L240"></a><span class="ln">   240</span>			var s *Segment
<a id="L241"></a><span class="ln">   241</span>			switch cmd {
<a id="L242"></a><span class="ln">   242</span>			default:
<a id="L243"></a><span class="ln">   243</span>				f.Loads[i] = LoadBytes(cmddat)
<a id="L244"></a><span class="ln">   244</span>	
<a id="L245"></a><span class="ln">   245</span>			case LoadCmdDylib:
<a id="L246"></a><span class="ln">   246</span>				var hdr DylibCmd
<a id="L247"></a><span class="ln">   247</span>				b := bytes.NewBuffer(cmddat)
<a id="L248"></a><span class="ln">   248</span>				if err := binary.Read(b, bo, &amp;hdr); err != nil {
<a id="L249"></a><span class="ln">   249</span>					return nil, err
<a id="L250"></a><span class="ln">   250</span>				}
<a id="L251"></a><span class="ln">   251</span>				l := new(Dylib)
<a id="L252"></a><span class="ln">   252</span>				if hdr.Name &gt;= uint32(len(cmddat)) {
<a id="L253"></a><span class="ln">   253</span>					return nil, &amp;FormatError{offset, &#34;invalid name in dynamic library command&#34;, hdr.Name}
<a id="L254"></a><span class="ln">   254</span>				}
<a id="L255"></a><span class="ln">   255</span>				l.Name = cstring(cmddat[hdr.Name:])
<a id="L256"></a><span class="ln">   256</span>				l.Time = hdr.Time
<a id="L257"></a><span class="ln">   257</span>				l.CurrentVersion = hdr.CurrentVersion
<a id="L258"></a><span class="ln">   258</span>				l.CompatVersion = hdr.CompatVersion
<a id="L259"></a><span class="ln">   259</span>				l.LoadBytes = LoadBytes(cmddat)
<a id="L260"></a><span class="ln">   260</span>				f.Loads[i] = l
<a id="L261"></a><span class="ln">   261</span>	
<a id="L262"></a><span class="ln">   262</span>			case LoadCmdSymtab:
<a id="L263"></a><span class="ln">   263</span>				var hdr SymtabCmd
<a id="L264"></a><span class="ln">   264</span>				b := bytes.NewBuffer(cmddat)
<a id="L265"></a><span class="ln">   265</span>				if err := binary.Read(b, bo, &amp;hdr); err != nil {
<a id="L266"></a><span class="ln">   266</span>					return nil, err
<a id="L267"></a><span class="ln">   267</span>				}
<a id="L268"></a><span class="ln">   268</span>				strtab := make([]byte, hdr.Strsize)
<a id="L269"></a><span class="ln">   269</span>				if _, err := r.ReadAt(strtab, int64(hdr.Stroff)); err != nil {
<a id="L270"></a><span class="ln">   270</span>					return nil, err
<a id="L271"></a><span class="ln">   271</span>				}
<a id="L272"></a><span class="ln">   272</span>				var symsz int
<a id="L273"></a><span class="ln">   273</span>				if f.Magic == Magic64 {
<a id="L274"></a><span class="ln">   274</span>					symsz = 16
<a id="L275"></a><span class="ln">   275</span>				} else {
<a id="L276"></a><span class="ln">   276</span>					symsz = 12
<a id="L277"></a><span class="ln">   277</span>				}
<a id="L278"></a><span class="ln">   278</span>				symdat := make([]byte, int(hdr.Nsyms)*symsz)
<a id="L279"></a><span class="ln">   279</span>				if _, err := r.ReadAt(symdat, int64(hdr.Symoff)); err != nil {
<a id="L280"></a><span class="ln">   280</span>					return nil, err
<a id="L281"></a><span class="ln">   281</span>				}
<a id="L282"></a><span class="ln">   282</span>				st, err := f.parseSymtab(symdat, strtab, cmddat, &amp;hdr, offset)
<a id="L283"></a><span class="ln">   283</span>				if err != nil {
<a id="L284"></a><span class="ln">   284</span>					return nil, err
<a id="L285"></a><span class="ln">   285</span>				}
<a id="L286"></a><span class="ln">   286</span>				f.Loads[i] = st
<a id="L287"></a><span class="ln">   287</span>				f.Symtab = st
<a id="L288"></a><span class="ln">   288</span>	
<a id="L289"></a><span class="ln">   289</span>			case LoadCmdDysymtab:
<a id="L290"></a><span class="ln">   290</span>				var hdr DysymtabCmd
<a id="L291"></a><span class="ln">   291</span>				b := bytes.NewBuffer(cmddat)
<a id="L292"></a><span class="ln">   292</span>				if err := binary.Read(b, bo, &amp;hdr); err != nil {
<a id="L293"></a><span class="ln">   293</span>					return nil, err
<a id="L294"></a><span class="ln">   294</span>				}
<a id="L295"></a><span class="ln">   295</span>				dat := make([]byte, hdr.Nindirectsyms*4)
<a id="L296"></a><span class="ln">   296</span>				if _, err := r.ReadAt(dat, int64(hdr.Indirectsymoff)); err != nil {
<a id="L297"></a><span class="ln">   297</span>					return nil, err
<a id="L298"></a><span class="ln">   298</span>				}
<a id="L299"></a><span class="ln">   299</span>				x := make([]uint32, hdr.Nindirectsyms)
<a id="L300"></a><span class="ln">   300</span>				if err := binary.Read(bytes.NewBuffer(dat), bo, x); err != nil {
<a id="L301"></a><span class="ln">   301</span>					return nil, err
<a id="L302"></a><span class="ln">   302</span>				}
<a id="L303"></a><span class="ln">   303</span>				st := new(Dysymtab)
<a id="L304"></a><span class="ln">   304</span>				st.LoadBytes = LoadBytes(cmddat)
<a id="L305"></a><span class="ln">   305</span>				st.DysymtabCmd = hdr
<a id="L306"></a><span class="ln">   306</span>				st.IndirectSyms = x
<a id="L307"></a><span class="ln">   307</span>				f.Loads[i] = st
<a id="L308"></a><span class="ln">   308</span>				f.Dysymtab = st
<a id="L309"></a><span class="ln">   309</span>	
<a id="L310"></a><span class="ln">   310</span>			case LoadCmdSegment:
<a id="L311"></a><span class="ln">   311</span>				var seg32 Segment32
<a id="L312"></a><span class="ln">   312</span>				b := bytes.NewBuffer(cmddat)
<a id="L313"></a><span class="ln">   313</span>				if err := binary.Read(b, bo, &amp;seg32); err != nil {
<a id="L314"></a><span class="ln">   314</span>					return nil, err
<a id="L315"></a><span class="ln">   315</span>				}
<a id="L316"></a><span class="ln">   316</span>				s = new(Segment)
<a id="L317"></a><span class="ln">   317</span>				s.LoadBytes = cmddat
<a id="L318"></a><span class="ln">   318</span>				s.Cmd = cmd
<a id="L319"></a><span class="ln">   319</span>				s.Len = siz
<a id="L320"></a><span class="ln">   320</span>				s.Name = cstring(seg32.Name[0:])
<a id="L321"></a><span class="ln">   321</span>				s.Addr = uint64(seg32.Addr)
<a id="L322"></a><span class="ln">   322</span>				s.Memsz = uint64(seg32.Memsz)
<a id="L323"></a><span class="ln">   323</span>				s.Offset = uint64(seg32.Offset)
<a id="L324"></a><span class="ln">   324</span>				s.Filesz = uint64(seg32.Filesz)
<a id="L325"></a><span class="ln">   325</span>				s.Maxprot = seg32.Maxprot
<a id="L326"></a><span class="ln">   326</span>				s.Prot = seg32.Prot
<a id="L327"></a><span class="ln">   327</span>				s.Nsect = seg32.Nsect
<a id="L328"></a><span class="ln">   328</span>				s.Flag = seg32.Flag
<a id="L329"></a><span class="ln">   329</span>				f.Loads[i] = s
<a id="L330"></a><span class="ln">   330</span>				for i := 0; i &lt; int(s.Nsect); i++ {
<a id="L331"></a><span class="ln">   331</span>					var sh32 Section32
<a id="L332"></a><span class="ln">   332</span>					if err := binary.Read(b, bo, &amp;sh32); err != nil {
<a id="L333"></a><span class="ln">   333</span>						return nil, err
<a id="L334"></a><span class="ln">   334</span>					}
<a id="L335"></a><span class="ln">   335</span>					sh := new(Section)
<a id="L336"></a><span class="ln">   336</span>					sh.Name = cstring(sh32.Name[0:])
<a id="L337"></a><span class="ln">   337</span>					sh.Seg = cstring(sh32.Seg[0:])
<a id="L338"></a><span class="ln">   338</span>					sh.Addr = uint64(sh32.Addr)
<a id="L339"></a><span class="ln">   339</span>					sh.Size = uint64(sh32.Size)
<a id="L340"></a><span class="ln">   340</span>					sh.Offset = sh32.Offset
<a id="L341"></a><span class="ln">   341</span>					sh.Align = sh32.Align
<a id="L342"></a><span class="ln">   342</span>					sh.Reloff = sh32.Reloff
<a id="L343"></a><span class="ln">   343</span>					sh.Nreloc = sh32.Nreloc
<a id="L344"></a><span class="ln">   344</span>					sh.Flags = sh32.Flags
<a id="L345"></a><span class="ln">   345</span>					f.pushSection(sh, r)
<a id="L346"></a><span class="ln">   346</span>				}
<a id="L347"></a><span class="ln">   347</span>	
<a id="L348"></a><span class="ln">   348</span>			case LoadCmdSegment64:
<a id="L349"></a><span class="ln">   349</span>				var seg64 Segment64
<a id="L350"></a><span class="ln">   350</span>				b := bytes.NewBuffer(cmddat)
<a id="L351"></a><span class="ln">   351</span>				if err := binary.Read(b, bo, &amp;seg64); err != nil {
<a id="L352"></a><span class="ln">   352</span>					return nil, err
<a id="L353"></a><span class="ln">   353</span>				}
<a id="L354"></a><span class="ln">   354</span>				s = new(Segment)
<a id="L355"></a><span class="ln">   355</span>				s.LoadBytes = cmddat
<a id="L356"></a><span class="ln">   356</span>				s.Cmd = cmd
<a id="L357"></a><span class="ln">   357</span>				s.Len = siz
<a id="L358"></a><span class="ln">   358</span>				s.Name = cstring(seg64.Name[0:])
<a id="L359"></a><span class="ln">   359</span>				s.Addr = seg64.Addr
<a id="L360"></a><span class="ln">   360</span>				s.Memsz = seg64.Memsz
<a id="L361"></a><span class="ln">   361</span>				s.Offset = seg64.Offset
<a id="L362"></a><span class="ln">   362</span>				s.Filesz = seg64.Filesz
<a id="L363"></a><span class="ln">   363</span>				s.Maxprot = seg64.Maxprot
<a id="L364"></a><span class="ln">   364</span>				s.Prot = seg64.Prot
<a id="L365"></a><span class="ln">   365</span>				s.Nsect = seg64.Nsect
<a id="L366"></a><span class="ln">   366</span>				s.Flag = seg64.Flag
<a id="L367"></a><span class="ln">   367</span>				f.Loads[i] = s
<a id="L368"></a><span class="ln">   368</span>				for i := 0; i &lt; int(s.Nsect); i++ {
<a id="L369"></a><span class="ln">   369</span>					var sh64 Section64
<a id="L370"></a><span class="ln">   370</span>					if err := binary.Read(b, bo, &amp;sh64); err != nil {
<a id="L371"></a><span class="ln">   371</span>						return nil, err
<a id="L372"></a><span class="ln">   372</span>					}
<a id="L373"></a><span class="ln">   373</span>					sh := new(Section)
<a id="L374"></a><span class="ln">   374</span>					sh.Name = cstring(sh64.Name[0:])
<a id="L375"></a><span class="ln">   375</span>					sh.Seg = cstring(sh64.Seg[0:])
<a id="L376"></a><span class="ln">   376</span>					sh.Addr = sh64.Addr
<a id="L377"></a><span class="ln">   377</span>					sh.Size = sh64.Size
<a id="L378"></a><span class="ln">   378</span>					sh.Offset = sh64.Offset
<a id="L379"></a><span class="ln">   379</span>					sh.Align = sh64.Align
<a id="L380"></a><span class="ln">   380</span>					sh.Reloff = sh64.Reloff
<a id="L381"></a><span class="ln">   381</span>					sh.Nreloc = sh64.Nreloc
<a id="L382"></a><span class="ln">   382</span>					sh.Flags = sh64.Flags
<a id="L383"></a><span class="ln">   383</span>					f.pushSection(sh, r)
<a id="L384"></a><span class="ln">   384</span>				}
<a id="L385"></a><span class="ln">   385</span>			}
<a id="L386"></a><span class="ln">   386</span>			if s != nil {
<a id="L387"></a><span class="ln">   387</span>				s.sr = io.NewSectionReader(r, int64(s.Offset), int64(s.Filesz))
<a id="L388"></a><span class="ln">   388</span>				s.ReaderAt = s.sr
<a id="L389"></a><span class="ln">   389</span>			}
<a id="L390"></a><span class="ln">   390</span>		}
<a id="L391"></a><span class="ln">   391</span>		return f, nil
<a id="L392"></a><span class="ln">   392</span>	}
<a id="L393"></a><span class="ln">   393</span>	
<a id="L394"></a><span class="ln">   394</span>	func (f *File) parseSymtab(symdat, strtab, cmddat []byte, hdr *SymtabCmd, offset int64) (*Symtab, error) {
<a id="L395"></a><span class="ln">   395</span>		bo := f.ByteOrder
<a id="L396"></a><span class="ln">   396</span>		symtab := make([]Symbol, hdr.Nsyms)
<a id="L397"></a><span class="ln">   397</span>		b := bytes.NewBuffer(symdat)
<a id="L398"></a><span class="ln">   398</span>		for i := range symtab {
<a id="L399"></a><span class="ln">   399</span>			var n Nlist64
<a id="L400"></a><span class="ln">   400</span>			if f.Magic == Magic64 {
<a id="L401"></a><span class="ln">   401</span>				if err := binary.Read(b, bo, &amp;n); err != nil {
<a id="L402"></a><span class="ln">   402</span>					return nil, err
<a id="L403"></a><span class="ln">   403</span>				}
<a id="L404"></a><span class="ln">   404</span>			} else {
<a id="L405"></a><span class="ln">   405</span>				var n32 Nlist32
<a id="L406"></a><span class="ln">   406</span>				if err := binary.Read(b, bo, &amp;n32); err != nil {
<a id="L407"></a><span class="ln">   407</span>					return nil, err
<a id="L408"></a><span class="ln">   408</span>				}
<a id="L409"></a><span class="ln">   409</span>				n.Name = n32.Name
<a id="L410"></a><span class="ln">   410</span>				n.Type = n32.Type
<a id="L411"></a><span class="ln">   411</span>				n.Sect = n32.Sect
<a id="L412"></a><span class="ln">   412</span>				n.Desc = n32.Desc
<a id="L413"></a><span class="ln">   413</span>				n.Value = uint64(n32.Value)
<a id="L414"></a><span class="ln">   414</span>			}
<a id="L415"></a><span class="ln">   415</span>			sym := &amp;symtab[i]
<a id="L416"></a><span class="ln">   416</span>			if n.Name &gt;= uint32(len(strtab)) {
<a id="L417"></a><span class="ln">   417</span>				return nil, &amp;FormatError{offset, &#34;invalid name in symbol table&#34;, n.Name}
<a id="L418"></a><span class="ln">   418</span>			}
<a id="L419"></a><span class="ln">   419</span>			sym.Name = cstring(strtab[n.Name:])
<a id="L420"></a><span class="ln">   420</span>			sym.Type = n.Type
<a id="L421"></a><span class="ln">   421</span>			sym.Sect = n.Sect
<a id="L422"></a><span class="ln">   422</span>			sym.Desc = n.Desc
<a id="L423"></a><span class="ln">   423</span>			sym.Value = n.Value
<a id="L424"></a><span class="ln">   424</span>		}
<a id="L425"></a><span class="ln">   425</span>		st := new(Symtab)
<a id="L426"></a><span class="ln">   426</span>		st.LoadBytes = LoadBytes(cmddat)
<a id="L427"></a><span class="ln">   427</span>		st.Syms = symtab
<a id="L428"></a><span class="ln">   428</span>		return st, nil
<a id="L429"></a><span class="ln">   429</span>	}
<a id="L430"></a><span class="ln">   430</span>	
<a id="L431"></a><span class="ln">   431</span>	func (f *File) pushSection(sh *Section, r io.ReaderAt) {
<a id="L432"></a><span class="ln">   432</span>		f.Sections = append(f.Sections, sh)
<a id="L433"></a><span class="ln">   433</span>		sh.sr = io.NewSectionReader(r, int64(sh.Offset), int64(sh.Size))
<a id="L434"></a><span class="ln">   434</span>		sh.ReaderAt = sh.sr
<a id="L435"></a><span class="ln">   435</span>	}
<a id="L436"></a><span class="ln">   436</span>	
<a id="L437"></a><span class="ln">   437</span>	func cstring(b []byte) string {
<a id="L438"></a><span class="ln">   438</span>		var i int
<a id="L439"></a><span class="ln">   439</span>		for i = 0; i &lt; len(b) &amp;&amp; b[i] != 0; i++ {
<a id="L440"></a><span class="ln">   440</span>		}
<a id="L441"></a><span class="ln">   441</span>		return string(b[0:i])
<a id="L442"></a><span class="ln">   442</span>	}
<a id="L443"></a><span class="ln">   443</span>	
<a id="L444"></a><span class="ln">   444</span>	<span class="comment">// Segment returns the first Segment with the given name, or nil if no such segment exists.</span>
<a id="L445"></a><span class="ln">   445</span>	func (f *File) Segment(name string) *Segment {
<a id="L446"></a><span class="ln">   446</span>		for _, l := range f.Loads {
<a id="L447"></a><span class="ln">   447</span>			if s, ok := l.(*Segment); ok &amp;&amp; s.Name == name {
<a id="L448"></a><span class="ln">   448</span>				return s
<a id="L449"></a><span class="ln">   449</span>			}
<a id="L450"></a><span class="ln">   450</span>		}
<a id="L451"></a><span class="ln">   451</span>		return nil
<a id="L452"></a><span class="ln">   452</span>	}
<a id="L453"></a><span class="ln">   453</span>	
<a id="L454"></a><span class="ln">   454</span>	<span class="comment">// Section returns the first section with the given name, or nil if no such</span>
<a id="L455"></a><span class="ln">   455</span>	<span class="comment">// section exists.</span>
<a id="L456"></a><span class="ln">   456</span>	func (f *File) Section(name string) *Section {
<a id="L457"></a><span class="ln">   457</span>		for _, s := range f.Sections {
<a id="L458"></a><span class="ln">   458</span>			if s.Name == name {
<a id="L459"></a><span class="ln">   459</span>				return s
<a id="L460"></a><span class="ln">   460</span>			}
<a id="L461"></a><span class="ln">   461</span>		}
<a id="L462"></a><span class="ln">   462</span>		return nil
<a id="L463"></a><span class="ln">   463</span>	}
<a id="L464"></a><span class="ln">   464</span>	
<a id="L465"></a><span class="ln">   465</span>	<span class="comment">// DWARF returns the DWARF debug information for the Mach-O file.</span>
<a id="L466"></a><span class="ln">   466</span>	func (f *File) DWARF() (*dwarf.Data, error) {
<a id="L467"></a><span class="ln">   467</span>		<span class="comment">// There are many other DWARF sections, but these</span>
<a id="L468"></a><span class="ln">   468</span>		<span class="comment">// are the required ones, and the debug/dwarf package</span>
<a id="L469"></a><span class="ln">   469</span>		<span class="comment">// does not use the others, so don&#39;t bother loading them.</span>
<a id="L470"></a><span class="ln">   470</span>		var names = [...]string{&#34;abbrev&#34;, &#34;info&#34;, &#34;str&#34;}
<a id="L471"></a><span class="ln">   471</span>		var dat [len(names)][]byte
<a id="L472"></a><span class="ln">   472</span>		for i, name := range names {
<a id="L473"></a><span class="ln">   473</span>			name = &#34;__debug_&#34; + name
<a id="L474"></a><span class="ln">   474</span>			s := f.Section(name)
<a id="L475"></a><span class="ln">   475</span>			if s == nil {
<a id="L476"></a><span class="ln">   476</span>				return nil, errors.New(&#34;missing Mach-O section &#34; + name)
<a id="L477"></a><span class="ln">   477</span>			}
<a id="L478"></a><span class="ln">   478</span>			b, err := s.Data()
<a id="L479"></a><span class="ln">   479</span>			if err != nil &amp;&amp; uint64(len(b)) &lt; s.Size {
<a id="L480"></a><span class="ln">   480</span>				return nil, err
<a id="L481"></a><span class="ln">   481</span>			}
<a id="L482"></a><span class="ln">   482</span>			dat[i] = b
<a id="L483"></a><span class="ln">   483</span>		}
<a id="L484"></a><span class="ln">   484</span>	
<a id="L485"></a><span class="ln">   485</span>		abbrev, info, str := dat[0], dat[1], dat[2]
<a id="L486"></a><span class="ln">   486</span>		return dwarf.New(abbrev, nil, nil, info, nil, nil, nil, str)
<a id="L487"></a><span class="ln">   487</span>	}
<a id="L488"></a><span class="ln">   488</span>	
<a id="L489"></a><span class="ln">   489</span>	<span class="comment">// ImportedSymbols returns the names of all symbols</span>
<a id="L490"></a><span class="ln">   490</span>	<span class="comment">// referred to by the binary f that are expected to be</span>
<a id="L491"></a><span class="ln">   491</span>	<span class="comment">// satisfied by other libraries at dynamic load time.</span>
<a id="L492"></a><span class="ln">   492</span>	func (f *File) ImportedSymbols() ([]string, error) {
<a id="L493"></a><span class="ln">   493</span>		if f.Dysymtab == nil || f.Symtab == nil {
<a id="L494"></a><span class="ln">   494</span>			return nil, &amp;FormatError{0, &#34;missing symbol table&#34;, nil}
<a id="L495"></a><span class="ln">   495</span>		}
<a id="L496"></a><span class="ln">   496</span>	
<a id="L497"></a><span class="ln">   497</span>		st := f.Symtab
<a id="L498"></a><span class="ln">   498</span>		dt := f.Dysymtab
<a id="L499"></a><span class="ln">   499</span>		var all []string
<a id="L500"></a><span class="ln">   500</span>		for _, s := range st.Syms[dt.Iundefsym : dt.Iundefsym+dt.Nundefsym] {
<a id="L501"></a><span class="ln">   501</span>			all = append(all, s.Name)
<a id="L502"></a><span class="ln">   502</span>		}
<a id="L503"></a><span class="ln">   503</span>		return all, nil
<a id="L504"></a><span class="ln">   504</span>	}
<a id="L505"></a><span class="ln">   505</span>	
<a id="L506"></a><span class="ln">   506</span>	<span class="comment">// ImportedLibraries returns the paths of all libraries</span>
<a id="L507"></a><span class="ln">   507</span>	<span class="comment">// referred to by the binary f that are expected to be</span>
<a id="L508"></a><span class="ln">   508</span>	<span class="comment">// linked with the binary at dynamic link time.</span>
<a id="L509"></a><span class="ln">   509</span>	func (f *File) ImportedLibraries() ([]string, error) {
<a id="L510"></a><span class="ln">   510</span>		var all []string
<a id="L511"></a><span class="ln">   511</span>		for _, l := range f.Loads {
<a id="L512"></a><span class="ln">   512</span>			if lib, ok := l.(*Dylib); ok {
<a id="L513"></a><span class="ln">   513</span>				all = append(all, lib.Name)
<a id="L514"></a><span class="ln">   514</span>			}
<a id="L515"></a><span class="ln">   515</span>		}
<a id="L516"></a><span class="ln">   516</span>		return all, nil
<a id="L517"></a><span class="ln">   517</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

