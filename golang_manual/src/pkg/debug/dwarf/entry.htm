<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/debug/dwarf/entry.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/debug/dwarf/entry.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// DWARF debug information entry parser.</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// An entry is a sequence of data items of a given format.</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// The first word in the entry is an index into what DWARF</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// calls the ``abbreviation table.&#39;&#39;  An abbreviation is really</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// just a type descriptor: it&#39;s an array of attribute tag/value format pairs.</span>
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	package dwarf
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	import &#34;errors&#34;
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// a single entry&#39;s description: a sequence of attributes</span>
<a id="L16"></a><span class="ln">    16</span>	type abbrev struct {
<a id="L17"></a><span class="ln">    17</span>		tag      Tag
<a id="L18"></a><span class="ln">    18</span>		children bool
<a id="L19"></a><span class="ln">    19</span>		field    []afield
<a id="L20"></a><span class="ln">    20</span>	}
<a id="L21"></a><span class="ln">    21</span>	
<a id="L22"></a><span class="ln">    22</span>	type afield struct {
<a id="L23"></a><span class="ln">    23</span>		attr Attr
<a id="L24"></a><span class="ln">    24</span>		fmt  format
<a id="L25"></a><span class="ln">    25</span>	}
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// a map from entry format ids to their descriptions</span>
<a id="L28"></a><span class="ln">    28</span>	type abbrevTable map[uint32]abbrev
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// ParseAbbrev returns the abbreviation table that starts at byte off</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// in the .debug_abbrev section.</span>
<a id="L32"></a><span class="ln">    32</span>	func (d *Data) parseAbbrev(off uint32) (abbrevTable, error) {
<a id="L33"></a><span class="ln">    33</span>		if m, ok := d.abbrevCache[off]; ok {
<a id="L34"></a><span class="ln">    34</span>			return m, nil
<a id="L35"></a><span class="ln">    35</span>		}
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>		data := d.abbrev
<a id="L38"></a><span class="ln">    38</span>		if off &gt; uint32(len(data)) {
<a id="L39"></a><span class="ln">    39</span>			data = nil
<a id="L40"></a><span class="ln">    40</span>		} else {
<a id="L41"></a><span class="ln">    41</span>			data = data[off:]
<a id="L42"></a><span class="ln">    42</span>		}
<a id="L43"></a><span class="ln">    43</span>		b := makeBuf(d, &#34;abbrev&#34;, 0, data, 0)
<a id="L44"></a><span class="ln">    44</span>	
<a id="L45"></a><span class="ln">    45</span>		<span class="comment">// Error handling is simplified by the buf getters</span>
<a id="L46"></a><span class="ln">    46</span>		<span class="comment">// returning an endless stream of 0s after an error.</span>
<a id="L47"></a><span class="ln">    47</span>		m := make(abbrevTable)
<a id="L48"></a><span class="ln">    48</span>		for {
<a id="L49"></a><span class="ln">    49</span>			<span class="comment">// Table ends with id == 0.</span>
<a id="L50"></a><span class="ln">    50</span>			id := uint32(b.uint())
<a id="L51"></a><span class="ln">    51</span>			if id == 0 {
<a id="L52"></a><span class="ln">    52</span>				break
<a id="L53"></a><span class="ln">    53</span>			}
<a id="L54"></a><span class="ln">    54</span>	
<a id="L55"></a><span class="ln">    55</span>			<span class="comment">// Walk over attributes, counting.</span>
<a id="L56"></a><span class="ln">    56</span>			n := 0
<a id="L57"></a><span class="ln">    57</span>			b1 := b <span class="comment">// Read from copy of b.</span>
<a id="L58"></a><span class="ln">    58</span>			b1.uint()
<a id="L59"></a><span class="ln">    59</span>			b1.uint8()
<a id="L60"></a><span class="ln">    60</span>			for {
<a id="L61"></a><span class="ln">    61</span>				tag := b1.uint()
<a id="L62"></a><span class="ln">    62</span>				fmt := b1.uint()
<a id="L63"></a><span class="ln">    63</span>				if tag == 0 &amp;&amp; fmt == 0 {
<a id="L64"></a><span class="ln">    64</span>					break
<a id="L65"></a><span class="ln">    65</span>				}
<a id="L66"></a><span class="ln">    66</span>				n++
<a id="L67"></a><span class="ln">    67</span>			}
<a id="L68"></a><span class="ln">    68</span>			if b1.err != nil {
<a id="L69"></a><span class="ln">    69</span>				return nil, b1.err
<a id="L70"></a><span class="ln">    70</span>			}
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>			<span class="comment">// Walk over attributes again, this time writing them down.</span>
<a id="L73"></a><span class="ln">    73</span>			var a abbrev
<a id="L74"></a><span class="ln">    74</span>			a.tag = Tag(b.uint())
<a id="L75"></a><span class="ln">    75</span>			a.children = b.uint8() != 0
<a id="L76"></a><span class="ln">    76</span>			a.field = make([]afield, n)
<a id="L77"></a><span class="ln">    77</span>			for i := range a.field {
<a id="L78"></a><span class="ln">    78</span>				a.field[i].attr = Attr(b.uint())
<a id="L79"></a><span class="ln">    79</span>				a.field[i].fmt = format(b.uint())
<a id="L80"></a><span class="ln">    80</span>			}
<a id="L81"></a><span class="ln">    81</span>			b.uint()
<a id="L82"></a><span class="ln">    82</span>			b.uint()
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>			m[id] = a
<a id="L85"></a><span class="ln">    85</span>		}
<a id="L86"></a><span class="ln">    86</span>		if b.err != nil {
<a id="L87"></a><span class="ln">    87</span>			return nil, b.err
<a id="L88"></a><span class="ln">    88</span>		}
<a id="L89"></a><span class="ln">    89</span>		d.abbrevCache[off] = m
<a id="L90"></a><span class="ln">    90</span>		return m, nil
<a id="L91"></a><span class="ln">    91</span>	}
<a id="L92"></a><span class="ln">    92</span>	
<a id="L93"></a><span class="ln">    93</span>	<span class="comment">// An entry is a sequence of attribute/value pairs.</span>
<a id="L94"></a><span class="ln">    94</span>	type Entry struct {
<a id="L95"></a><span class="ln">    95</span>		Offset   Offset <span class="comment">// offset of Entry in DWARF info</span>
<a id="L96"></a><span class="ln">    96</span>		Tag      Tag    <span class="comment">// tag (kind of Entry)</span>
<a id="L97"></a><span class="ln">    97</span>		Children bool   <span class="comment">// whether Entry is followed by children</span>
<a id="L98"></a><span class="ln">    98</span>		Field    []Field
<a id="L99"></a><span class="ln">    99</span>	}
<a id="L100"></a><span class="ln">   100</span>	
<a id="L101"></a><span class="ln">   101</span>	<span class="comment">// A Field is a single attribute/value pair in an Entry.</span>
<a id="L102"></a><span class="ln">   102</span>	type Field struct {
<a id="L103"></a><span class="ln">   103</span>		Attr Attr
<a id="L104"></a><span class="ln">   104</span>		Val  interface{}
<a id="L105"></a><span class="ln">   105</span>	}
<a id="L106"></a><span class="ln">   106</span>	
<a id="L107"></a><span class="ln">   107</span>	<span class="comment">// Val returns the value associated with attribute Attr in Entry,</span>
<a id="L108"></a><span class="ln">   108</span>	<span class="comment">// or nil if there is no such attribute.</span>
<a id="L109"></a><span class="ln">   109</span>	<span class="comment">//</span>
<a id="L110"></a><span class="ln">   110</span>	<span class="comment">// A common idiom is to merge the check for nil return with</span>
<a id="L111"></a><span class="ln">   111</span>	<span class="comment">// the check that the value has the expected dynamic type, as in:</span>
<a id="L112"></a><span class="ln">   112</span>	<span class="comment">//	v, ok := e.Val(AttrSibling).(int64);</span>
<a id="L113"></a><span class="ln">   113</span>	<span class="comment">//</span>
<a id="L114"></a><span class="ln">   114</span>	func (e *Entry) Val(a Attr) interface{} {
<a id="L115"></a><span class="ln">   115</span>		for _, f := range e.Field {
<a id="L116"></a><span class="ln">   116</span>			if f.Attr == a {
<a id="L117"></a><span class="ln">   117</span>				return f.Val
<a id="L118"></a><span class="ln">   118</span>			}
<a id="L119"></a><span class="ln">   119</span>		}
<a id="L120"></a><span class="ln">   120</span>		return nil
<a id="L121"></a><span class="ln">   121</span>	}
<a id="L122"></a><span class="ln">   122</span>	
<a id="L123"></a><span class="ln">   123</span>	<span class="comment">// An Offset represents the location of an Entry within the DWARF info.</span>
<a id="L124"></a><span class="ln">   124</span>	<span class="comment">// (See Reader.Seek.)</span>
<a id="L125"></a><span class="ln">   125</span>	type Offset uint32
<a id="L126"></a><span class="ln">   126</span>	
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// Entry reads a single entry from buf, decoding</span>
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// according to the given abbreviation table.</span>
<a id="L129"></a><span class="ln">   129</span>	func (b *buf) entry(atab abbrevTable, ubase Offset) *Entry {
<a id="L130"></a><span class="ln">   130</span>		off := b.off
<a id="L131"></a><span class="ln">   131</span>		id := uint32(b.uint())
<a id="L132"></a><span class="ln">   132</span>		if id == 0 {
<a id="L133"></a><span class="ln">   133</span>			return &amp;Entry{}
<a id="L134"></a><span class="ln">   134</span>		}
<a id="L135"></a><span class="ln">   135</span>		a, ok := atab[id]
<a id="L136"></a><span class="ln">   136</span>		if !ok {
<a id="L137"></a><span class="ln">   137</span>			b.error(&#34;unknown abbreviation table index&#34;)
<a id="L138"></a><span class="ln">   138</span>			return nil
<a id="L139"></a><span class="ln">   139</span>		}
<a id="L140"></a><span class="ln">   140</span>		e := &amp;Entry{
<a id="L141"></a><span class="ln">   141</span>			Offset:   off,
<a id="L142"></a><span class="ln">   142</span>			Tag:      a.tag,
<a id="L143"></a><span class="ln">   143</span>			Children: a.children,
<a id="L144"></a><span class="ln">   144</span>			Field:    make([]Field, len(a.field)),
<a id="L145"></a><span class="ln">   145</span>		}
<a id="L146"></a><span class="ln">   146</span>		for i := range e.Field {
<a id="L147"></a><span class="ln">   147</span>			e.Field[i].Attr = a.field[i].attr
<a id="L148"></a><span class="ln">   148</span>			fmt := a.field[i].fmt
<a id="L149"></a><span class="ln">   149</span>			if fmt == formIndirect {
<a id="L150"></a><span class="ln">   150</span>				fmt = format(b.uint())
<a id="L151"></a><span class="ln">   151</span>			}
<a id="L152"></a><span class="ln">   152</span>			var val interface{}
<a id="L153"></a><span class="ln">   153</span>			switch fmt {
<a id="L154"></a><span class="ln">   154</span>			default:
<a id="L155"></a><span class="ln">   155</span>				b.error(&#34;unknown entry attr format&#34;)
<a id="L156"></a><span class="ln">   156</span>	
<a id="L157"></a><span class="ln">   157</span>			<span class="comment">// address</span>
<a id="L158"></a><span class="ln">   158</span>			case formAddr:
<a id="L159"></a><span class="ln">   159</span>				val = b.addr()
<a id="L160"></a><span class="ln">   160</span>	
<a id="L161"></a><span class="ln">   161</span>			<span class="comment">// block</span>
<a id="L162"></a><span class="ln">   162</span>			case formDwarfBlock1:
<a id="L163"></a><span class="ln">   163</span>				val = b.bytes(int(b.uint8()))
<a id="L164"></a><span class="ln">   164</span>			case formDwarfBlock2:
<a id="L165"></a><span class="ln">   165</span>				val = b.bytes(int(b.uint16()))
<a id="L166"></a><span class="ln">   166</span>			case formDwarfBlock4:
<a id="L167"></a><span class="ln">   167</span>				val = b.bytes(int(b.uint32()))
<a id="L168"></a><span class="ln">   168</span>			case formDwarfBlock:
<a id="L169"></a><span class="ln">   169</span>				val = b.bytes(int(b.uint()))
<a id="L170"></a><span class="ln">   170</span>	
<a id="L171"></a><span class="ln">   171</span>			<span class="comment">// constant</span>
<a id="L172"></a><span class="ln">   172</span>			case formData1:
<a id="L173"></a><span class="ln">   173</span>				val = int64(b.uint8())
<a id="L174"></a><span class="ln">   174</span>			case formData2:
<a id="L175"></a><span class="ln">   175</span>				val = int64(b.uint16())
<a id="L176"></a><span class="ln">   176</span>			case formData4:
<a id="L177"></a><span class="ln">   177</span>				val = int64(b.uint32())
<a id="L178"></a><span class="ln">   178</span>			case formData8:
<a id="L179"></a><span class="ln">   179</span>				val = int64(b.uint64())
<a id="L180"></a><span class="ln">   180</span>			case formSdata:
<a id="L181"></a><span class="ln">   181</span>				val = int64(b.int())
<a id="L182"></a><span class="ln">   182</span>			case formUdata:
<a id="L183"></a><span class="ln">   183</span>				val = int64(b.uint())
<a id="L184"></a><span class="ln">   184</span>	
<a id="L185"></a><span class="ln">   185</span>			<span class="comment">// flag</span>
<a id="L186"></a><span class="ln">   186</span>			case formFlag:
<a id="L187"></a><span class="ln">   187</span>				val = b.uint8() == 1
<a id="L188"></a><span class="ln">   188</span>	
<a id="L189"></a><span class="ln">   189</span>			<span class="comment">// reference to other entry</span>
<a id="L190"></a><span class="ln">   190</span>			case formRefAddr:
<a id="L191"></a><span class="ln">   191</span>				val = Offset(b.addr())
<a id="L192"></a><span class="ln">   192</span>			case formRef1:
<a id="L193"></a><span class="ln">   193</span>				val = Offset(b.uint8()) + ubase
<a id="L194"></a><span class="ln">   194</span>			case formRef2:
<a id="L195"></a><span class="ln">   195</span>				val = Offset(b.uint16()) + ubase
<a id="L196"></a><span class="ln">   196</span>			case formRef4:
<a id="L197"></a><span class="ln">   197</span>				val = Offset(b.uint32()) + ubase
<a id="L198"></a><span class="ln">   198</span>			case formRef8:
<a id="L199"></a><span class="ln">   199</span>				val = Offset(b.uint64()) + ubase
<a id="L200"></a><span class="ln">   200</span>			case formRefUdata:
<a id="L201"></a><span class="ln">   201</span>				val = Offset(b.uint()) + ubase
<a id="L202"></a><span class="ln">   202</span>	
<a id="L203"></a><span class="ln">   203</span>			<span class="comment">// string</span>
<a id="L204"></a><span class="ln">   204</span>			case formString:
<a id="L205"></a><span class="ln">   205</span>				val = b.string()
<a id="L206"></a><span class="ln">   206</span>			case formStrp:
<a id="L207"></a><span class="ln">   207</span>				off := b.uint32() <span class="comment">// offset into .debug_str</span>
<a id="L208"></a><span class="ln">   208</span>				if b.err != nil {
<a id="L209"></a><span class="ln">   209</span>					return nil
<a id="L210"></a><span class="ln">   210</span>				}
<a id="L211"></a><span class="ln">   211</span>				b1 := makeBuf(b.dwarf, &#34;str&#34;, 0, b.dwarf.str, 0)
<a id="L212"></a><span class="ln">   212</span>				b1.skip(int(off))
<a id="L213"></a><span class="ln">   213</span>				val = b1.string()
<a id="L214"></a><span class="ln">   214</span>				if b1.err != nil {
<a id="L215"></a><span class="ln">   215</span>					b.err = b1.err
<a id="L216"></a><span class="ln">   216</span>					return nil
<a id="L217"></a><span class="ln">   217</span>				}
<a id="L218"></a><span class="ln">   218</span>			}
<a id="L219"></a><span class="ln">   219</span>			e.Field[i].Val = val
<a id="L220"></a><span class="ln">   220</span>		}
<a id="L221"></a><span class="ln">   221</span>		if b.err != nil {
<a id="L222"></a><span class="ln">   222</span>			return nil
<a id="L223"></a><span class="ln">   223</span>		}
<a id="L224"></a><span class="ln">   224</span>		return e
<a id="L225"></a><span class="ln">   225</span>	}
<a id="L226"></a><span class="ln">   226</span>	
<a id="L227"></a><span class="ln">   227</span>	<span class="comment">// A Reader allows reading Entry structures from a DWARF ``info&#39;&#39; section.</span>
<a id="L228"></a><span class="ln">   228</span>	<span class="comment">// The Entry structures are arranged in a tree.  The Reader&#39;s Next function</span>
<a id="L229"></a><span class="ln">   229</span>	<span class="comment">// return successive entries from a pre-order traversal of the tree.</span>
<a id="L230"></a><span class="ln">   230</span>	<span class="comment">// If an entry has children, its Children field will be true, and the children</span>
<a id="L231"></a><span class="ln">   231</span>	<span class="comment">// follow, terminated by an Entry with Tag 0.</span>
<a id="L232"></a><span class="ln">   232</span>	type Reader struct {
<a id="L233"></a><span class="ln">   233</span>		b            buf
<a id="L234"></a><span class="ln">   234</span>		d            *Data
<a id="L235"></a><span class="ln">   235</span>		err          error
<a id="L236"></a><span class="ln">   236</span>		unit         int
<a id="L237"></a><span class="ln">   237</span>		lastChildren bool   <span class="comment">// .Children of last entry returned by Next</span>
<a id="L238"></a><span class="ln">   238</span>		lastSibling  Offset <span class="comment">// .Val(AttrSibling) of last entry returned by Next</span>
<a id="L239"></a><span class="ln">   239</span>	}
<a id="L240"></a><span class="ln">   240</span>	
<a id="L241"></a><span class="ln">   241</span>	<span class="comment">// Reader returns a new Reader for Data.</span>
<a id="L242"></a><span class="ln">   242</span>	<span class="comment">// The reader is positioned at byte offset 0 in the DWARF ``info&#39;&#39; section.</span>
<a id="L243"></a><span class="ln">   243</span>	func (d *Data) Reader() *Reader {
<a id="L244"></a><span class="ln">   244</span>		r := &amp;Reader{d: d}
<a id="L245"></a><span class="ln">   245</span>		r.Seek(0)
<a id="L246"></a><span class="ln">   246</span>		return r
<a id="L247"></a><span class="ln">   247</span>	}
<a id="L248"></a><span class="ln">   248</span>	
<a id="L249"></a><span class="ln">   249</span>	<span class="comment">// Seek positions the Reader at offset off in the encoded entry stream.</span>
<a id="L250"></a><span class="ln">   250</span>	<span class="comment">// Offset 0 can be used to denote the first entry.</span>
<a id="L251"></a><span class="ln">   251</span>	func (r *Reader) Seek(off Offset) {
<a id="L252"></a><span class="ln">   252</span>		d := r.d
<a id="L253"></a><span class="ln">   253</span>		r.err = nil
<a id="L254"></a><span class="ln">   254</span>		r.lastChildren = false
<a id="L255"></a><span class="ln">   255</span>		if off == 0 {
<a id="L256"></a><span class="ln">   256</span>			if len(d.unit) == 0 {
<a id="L257"></a><span class="ln">   257</span>				return
<a id="L258"></a><span class="ln">   258</span>			}
<a id="L259"></a><span class="ln">   259</span>			u := &amp;d.unit[0]
<a id="L260"></a><span class="ln">   260</span>			r.unit = 0
<a id="L261"></a><span class="ln">   261</span>			r.b = makeBuf(r.d, &#34;info&#34;, u.off, u.data, u.addrsize)
<a id="L262"></a><span class="ln">   262</span>			return
<a id="L263"></a><span class="ln">   263</span>		}
<a id="L264"></a><span class="ln">   264</span>	
<a id="L265"></a><span class="ln">   265</span>		<span class="comment">// TODO(rsc): binary search (maybe a new package)</span>
<a id="L266"></a><span class="ln">   266</span>		var i int
<a id="L267"></a><span class="ln">   267</span>		var u *unit
<a id="L268"></a><span class="ln">   268</span>		for i = range d.unit {
<a id="L269"></a><span class="ln">   269</span>			u = &amp;d.unit[i]
<a id="L270"></a><span class="ln">   270</span>			if u.off &lt;= off &amp;&amp; off &lt; u.off+Offset(len(u.data)) {
<a id="L271"></a><span class="ln">   271</span>				r.unit = i
<a id="L272"></a><span class="ln">   272</span>				r.b = makeBuf(r.d, &#34;info&#34;, off, u.data[off-u.off:], u.addrsize)
<a id="L273"></a><span class="ln">   273</span>				return
<a id="L274"></a><span class="ln">   274</span>			}
<a id="L275"></a><span class="ln">   275</span>		}
<a id="L276"></a><span class="ln">   276</span>		r.err = errors.New(&#34;offset out of range&#34;)
<a id="L277"></a><span class="ln">   277</span>	}
<a id="L278"></a><span class="ln">   278</span>	
<a id="L279"></a><span class="ln">   279</span>	<span class="comment">// maybeNextUnit advances to the next unit if this one is finished.</span>
<a id="L280"></a><span class="ln">   280</span>	func (r *Reader) maybeNextUnit() {
<a id="L281"></a><span class="ln">   281</span>		for len(r.b.data) == 0 &amp;&amp; r.unit+1 &lt; len(r.d.unit) {
<a id="L282"></a><span class="ln">   282</span>			r.unit++
<a id="L283"></a><span class="ln">   283</span>			u := &amp;r.d.unit[r.unit]
<a id="L284"></a><span class="ln">   284</span>			r.b = makeBuf(r.d, &#34;info&#34;, u.off, u.data, u.addrsize)
<a id="L285"></a><span class="ln">   285</span>		}
<a id="L286"></a><span class="ln">   286</span>	}
<a id="L287"></a><span class="ln">   287</span>	
<a id="L288"></a><span class="ln">   288</span>	<span class="comment">// Next reads the next entry from the encoded entry stream.</span>
<a id="L289"></a><span class="ln">   289</span>	<span class="comment">// It returns nil, nil when it reaches the end of the section.</span>
<a id="L290"></a><span class="ln">   290</span>	<span class="comment">// It returns an error if the current offset is invalid or the data at the</span>
<a id="L291"></a><span class="ln">   291</span>	<span class="comment">// offset cannot be decoded as a valid Entry.</span>
<a id="L292"></a><span class="ln">   292</span>	func (r *Reader) Next() (*Entry, error) {
<a id="L293"></a><span class="ln">   293</span>		if r.err != nil {
<a id="L294"></a><span class="ln">   294</span>			return nil, r.err
<a id="L295"></a><span class="ln">   295</span>		}
<a id="L296"></a><span class="ln">   296</span>		r.maybeNextUnit()
<a id="L297"></a><span class="ln">   297</span>		if len(r.b.data) == 0 {
<a id="L298"></a><span class="ln">   298</span>			return nil, nil
<a id="L299"></a><span class="ln">   299</span>		}
<a id="L300"></a><span class="ln">   300</span>		u := &amp;r.d.unit[r.unit]
<a id="L301"></a><span class="ln">   301</span>		e := r.b.entry(u.atable, u.base)
<a id="L302"></a><span class="ln">   302</span>		if r.b.err != nil {
<a id="L303"></a><span class="ln">   303</span>			r.err = r.b.err
<a id="L304"></a><span class="ln">   304</span>			return nil, r.err
<a id="L305"></a><span class="ln">   305</span>		}
<a id="L306"></a><span class="ln">   306</span>		if e != nil {
<a id="L307"></a><span class="ln">   307</span>			r.lastChildren = e.Children
<a id="L308"></a><span class="ln">   308</span>			if r.lastChildren {
<a id="L309"></a><span class="ln">   309</span>				r.lastSibling, _ = e.Val(AttrSibling).(Offset)
<a id="L310"></a><span class="ln">   310</span>			}
<a id="L311"></a><span class="ln">   311</span>		} else {
<a id="L312"></a><span class="ln">   312</span>			r.lastChildren = false
<a id="L313"></a><span class="ln">   313</span>		}
<a id="L314"></a><span class="ln">   314</span>		return e, nil
<a id="L315"></a><span class="ln">   315</span>	}
<a id="L316"></a><span class="ln">   316</span>	
<a id="L317"></a><span class="ln">   317</span>	<span class="comment">// SkipChildren skips over the child entries associated with</span>
<a id="L318"></a><span class="ln">   318</span>	<span class="comment">// the last Entry returned by Next.  If that Entry did not have</span>
<a id="L319"></a><span class="ln">   319</span>	<span class="comment">// children or Next has not been called, SkipChildren is a no-op.</span>
<a id="L320"></a><span class="ln">   320</span>	func (r *Reader) SkipChildren() {
<a id="L321"></a><span class="ln">   321</span>		if r.err != nil || !r.lastChildren {
<a id="L322"></a><span class="ln">   322</span>			return
<a id="L323"></a><span class="ln">   323</span>		}
<a id="L324"></a><span class="ln">   324</span>	
<a id="L325"></a><span class="ln">   325</span>		<span class="comment">// If the last entry had a sibling attribute,</span>
<a id="L326"></a><span class="ln">   326</span>		<span class="comment">// that attribute gives the offset of the next</span>
<a id="L327"></a><span class="ln">   327</span>		<span class="comment">// sibling, so we can avoid decoding the</span>
<a id="L328"></a><span class="ln">   328</span>		<span class="comment">// child subtrees.</span>
<a id="L329"></a><span class="ln">   329</span>		if r.lastSibling &gt;= r.b.off {
<a id="L330"></a><span class="ln">   330</span>			r.Seek(r.lastSibling)
<a id="L331"></a><span class="ln">   331</span>			return
<a id="L332"></a><span class="ln">   332</span>		}
<a id="L333"></a><span class="ln">   333</span>	
<a id="L334"></a><span class="ln">   334</span>		for {
<a id="L335"></a><span class="ln">   335</span>			e, err := r.Next()
<a id="L336"></a><span class="ln">   336</span>			if err != nil || e == nil || e.Tag == 0 {
<a id="L337"></a><span class="ln">   337</span>				break
<a id="L338"></a><span class="ln">   338</span>			}
<a id="L339"></a><span class="ln">   339</span>			if e.Children {
<a id="L340"></a><span class="ln">   340</span>				r.SkipChildren()
<a id="L341"></a><span class="ln">   341</span>			}
<a id="L342"></a><span class="ln">   342</span>		}
<a id="L343"></a><span class="ln">   343</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

