<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/debug/dwarf/const.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/debug/dwarf/const.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Constants</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package dwarf
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import &#34;strconv&#34;
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// An Attr identifies the attribute type in a DWARF Entry&#39;s Field.</span>
<a id="L12"></a><span class="ln">    12</span>	type Attr uint32
<a id="L13"></a><span class="ln">    13</span>	
<a id="L14"></a><span class="ln">    14</span>	const (
<a id="L15"></a><span class="ln">    15</span>		AttrSibling        Attr = 0x01
<a id="L16"></a><span class="ln">    16</span>		AttrLocation       Attr = 0x02
<a id="L17"></a><span class="ln">    17</span>		AttrName           Attr = 0x03
<a id="L18"></a><span class="ln">    18</span>		AttrOrdering       Attr = 0x09
<a id="L19"></a><span class="ln">    19</span>		AttrByteSize       Attr = 0x0B
<a id="L20"></a><span class="ln">    20</span>		AttrBitOffset      Attr = 0x0C
<a id="L21"></a><span class="ln">    21</span>		AttrBitSize        Attr = 0x0D
<a id="L22"></a><span class="ln">    22</span>		AttrStmtList       Attr = 0x10
<a id="L23"></a><span class="ln">    23</span>		AttrLowpc          Attr = 0x11
<a id="L24"></a><span class="ln">    24</span>		AttrHighpc         Attr = 0x12
<a id="L25"></a><span class="ln">    25</span>		AttrLanguage       Attr = 0x13
<a id="L26"></a><span class="ln">    26</span>		AttrDiscr          Attr = 0x15
<a id="L27"></a><span class="ln">    27</span>		AttrDiscrValue     Attr = 0x16
<a id="L28"></a><span class="ln">    28</span>		AttrVisibility     Attr = 0x17
<a id="L29"></a><span class="ln">    29</span>		AttrImport         Attr = 0x18
<a id="L30"></a><span class="ln">    30</span>		AttrStringLength   Attr = 0x19
<a id="L31"></a><span class="ln">    31</span>		AttrCommonRef      Attr = 0x1A
<a id="L32"></a><span class="ln">    32</span>		AttrCompDir        Attr = 0x1B
<a id="L33"></a><span class="ln">    33</span>		AttrConstValue     Attr = 0x1C
<a id="L34"></a><span class="ln">    34</span>		AttrContainingType Attr = 0x1D
<a id="L35"></a><span class="ln">    35</span>		AttrDefaultValue   Attr = 0x1E
<a id="L36"></a><span class="ln">    36</span>		AttrInline         Attr = 0x20
<a id="L37"></a><span class="ln">    37</span>		AttrIsOptional     Attr = 0x21
<a id="L38"></a><span class="ln">    38</span>		AttrLowerBound     Attr = 0x22
<a id="L39"></a><span class="ln">    39</span>		AttrProducer       Attr = 0x25
<a id="L40"></a><span class="ln">    40</span>		AttrPrototyped     Attr = 0x27
<a id="L41"></a><span class="ln">    41</span>		AttrReturnAddr     Attr = 0x2A
<a id="L42"></a><span class="ln">    42</span>		AttrStartScope     Attr = 0x2C
<a id="L43"></a><span class="ln">    43</span>		AttrStrideSize     Attr = 0x2E
<a id="L44"></a><span class="ln">    44</span>		AttrUpperBound     Attr = 0x2F
<a id="L45"></a><span class="ln">    45</span>		AttrAbstractOrigin Attr = 0x31
<a id="L46"></a><span class="ln">    46</span>		AttrAccessibility  Attr = 0x32
<a id="L47"></a><span class="ln">    47</span>		AttrAddrClass      Attr = 0x33
<a id="L48"></a><span class="ln">    48</span>		AttrArtificial     Attr = 0x34
<a id="L49"></a><span class="ln">    49</span>		AttrBaseTypes      Attr = 0x35
<a id="L50"></a><span class="ln">    50</span>		AttrCalling        Attr = 0x36
<a id="L51"></a><span class="ln">    51</span>		AttrCount          Attr = 0x37
<a id="L52"></a><span class="ln">    52</span>		AttrDataMemberLoc  Attr = 0x38
<a id="L53"></a><span class="ln">    53</span>		AttrDeclColumn     Attr = 0x39
<a id="L54"></a><span class="ln">    54</span>		AttrDeclFile       Attr = 0x3A
<a id="L55"></a><span class="ln">    55</span>		AttrDeclLine       Attr = 0x3B
<a id="L56"></a><span class="ln">    56</span>		AttrDeclaration    Attr = 0x3C
<a id="L57"></a><span class="ln">    57</span>		AttrDiscrList      Attr = 0x3D
<a id="L58"></a><span class="ln">    58</span>		AttrEncoding       Attr = 0x3E
<a id="L59"></a><span class="ln">    59</span>		AttrExternal       Attr = 0x3F
<a id="L60"></a><span class="ln">    60</span>		AttrFrameBase      Attr = 0x40
<a id="L61"></a><span class="ln">    61</span>		AttrFriend         Attr = 0x41
<a id="L62"></a><span class="ln">    62</span>		AttrIdentifierCase Attr = 0x42
<a id="L63"></a><span class="ln">    63</span>		AttrMacroInfo      Attr = 0x43
<a id="L64"></a><span class="ln">    64</span>		AttrNamelistItem   Attr = 0x44
<a id="L65"></a><span class="ln">    65</span>		AttrPriority       Attr = 0x45
<a id="L66"></a><span class="ln">    66</span>		AttrSegment        Attr = 0x46
<a id="L67"></a><span class="ln">    67</span>		AttrSpecification  Attr = 0x47
<a id="L68"></a><span class="ln">    68</span>		AttrStaticLink     Attr = 0x48
<a id="L69"></a><span class="ln">    69</span>		AttrType           Attr = 0x49
<a id="L70"></a><span class="ln">    70</span>		AttrUseLocation    Attr = 0x4A
<a id="L71"></a><span class="ln">    71</span>		AttrVarParam       Attr = 0x4B
<a id="L72"></a><span class="ln">    72</span>		AttrVirtuality     Attr = 0x4C
<a id="L73"></a><span class="ln">    73</span>		AttrVtableElemLoc  Attr = 0x4D
<a id="L74"></a><span class="ln">    74</span>		AttrAllocated      Attr = 0x4E
<a id="L75"></a><span class="ln">    75</span>		AttrAssociated     Attr = 0x4F
<a id="L76"></a><span class="ln">    76</span>		AttrDataLocation   Attr = 0x50
<a id="L77"></a><span class="ln">    77</span>		AttrStride         Attr = 0x51
<a id="L78"></a><span class="ln">    78</span>		AttrEntrypc        Attr = 0x52
<a id="L79"></a><span class="ln">    79</span>		AttrUseUTF8        Attr = 0x53
<a id="L80"></a><span class="ln">    80</span>		AttrExtension      Attr = 0x54
<a id="L81"></a><span class="ln">    81</span>		AttrRanges         Attr = 0x55
<a id="L82"></a><span class="ln">    82</span>		AttrTrampoline     Attr = 0x56
<a id="L83"></a><span class="ln">    83</span>		AttrCallColumn     Attr = 0x57
<a id="L84"></a><span class="ln">    84</span>		AttrCallFile       Attr = 0x58
<a id="L85"></a><span class="ln">    85</span>		AttrCallLine       Attr = 0x59
<a id="L86"></a><span class="ln">    86</span>		AttrDescription    Attr = 0x5A
<a id="L87"></a><span class="ln">    87</span>	)
<a id="L88"></a><span class="ln">    88</span>	
<a id="L89"></a><span class="ln">    89</span>	var attrNames = [...]string{
<a id="L90"></a><span class="ln">    90</span>		AttrSibling:        &#34;Sibling&#34;,
<a id="L91"></a><span class="ln">    91</span>		AttrLocation:       &#34;Location&#34;,
<a id="L92"></a><span class="ln">    92</span>		AttrName:           &#34;Name&#34;,
<a id="L93"></a><span class="ln">    93</span>		AttrOrdering:       &#34;Ordering&#34;,
<a id="L94"></a><span class="ln">    94</span>		AttrByteSize:       &#34;ByteSize&#34;,
<a id="L95"></a><span class="ln">    95</span>		AttrBitOffset:      &#34;BitOffset&#34;,
<a id="L96"></a><span class="ln">    96</span>		AttrBitSize:        &#34;BitSize&#34;,
<a id="L97"></a><span class="ln">    97</span>		AttrStmtList:       &#34;StmtList&#34;,
<a id="L98"></a><span class="ln">    98</span>		AttrLowpc:          &#34;Lowpc&#34;,
<a id="L99"></a><span class="ln">    99</span>		AttrHighpc:         &#34;Highpc&#34;,
<a id="L100"></a><span class="ln">   100</span>		AttrLanguage:       &#34;Language&#34;,
<a id="L101"></a><span class="ln">   101</span>		AttrDiscr:          &#34;Discr&#34;,
<a id="L102"></a><span class="ln">   102</span>		AttrDiscrValue:     &#34;DiscrValue&#34;,
<a id="L103"></a><span class="ln">   103</span>		AttrVisibility:     &#34;Visibility&#34;,
<a id="L104"></a><span class="ln">   104</span>		AttrImport:         &#34;Import&#34;,
<a id="L105"></a><span class="ln">   105</span>		AttrStringLength:   &#34;StringLength&#34;,
<a id="L106"></a><span class="ln">   106</span>		AttrCommonRef:      &#34;CommonRef&#34;,
<a id="L107"></a><span class="ln">   107</span>		AttrCompDir:        &#34;CompDir&#34;,
<a id="L108"></a><span class="ln">   108</span>		AttrConstValue:     &#34;ConstValue&#34;,
<a id="L109"></a><span class="ln">   109</span>		AttrContainingType: &#34;ContainingType&#34;,
<a id="L110"></a><span class="ln">   110</span>		AttrDefaultValue:   &#34;DefaultValue&#34;,
<a id="L111"></a><span class="ln">   111</span>		AttrInline:         &#34;Inline&#34;,
<a id="L112"></a><span class="ln">   112</span>		AttrIsOptional:     &#34;IsOptional&#34;,
<a id="L113"></a><span class="ln">   113</span>		AttrLowerBound:     &#34;LowerBound&#34;,
<a id="L114"></a><span class="ln">   114</span>		AttrProducer:       &#34;Producer&#34;,
<a id="L115"></a><span class="ln">   115</span>		AttrPrototyped:     &#34;Prototyped&#34;,
<a id="L116"></a><span class="ln">   116</span>		AttrReturnAddr:     &#34;ReturnAddr&#34;,
<a id="L117"></a><span class="ln">   117</span>		AttrStartScope:     &#34;StartScope&#34;,
<a id="L118"></a><span class="ln">   118</span>		AttrStrideSize:     &#34;StrideSize&#34;,
<a id="L119"></a><span class="ln">   119</span>		AttrUpperBound:     &#34;UpperBound&#34;,
<a id="L120"></a><span class="ln">   120</span>		AttrAbstractOrigin: &#34;AbstractOrigin&#34;,
<a id="L121"></a><span class="ln">   121</span>		AttrAccessibility:  &#34;Accessibility&#34;,
<a id="L122"></a><span class="ln">   122</span>		AttrAddrClass:      &#34;AddrClass&#34;,
<a id="L123"></a><span class="ln">   123</span>		AttrArtificial:     &#34;Artificial&#34;,
<a id="L124"></a><span class="ln">   124</span>		AttrBaseTypes:      &#34;BaseTypes&#34;,
<a id="L125"></a><span class="ln">   125</span>		AttrCalling:        &#34;Calling&#34;,
<a id="L126"></a><span class="ln">   126</span>		AttrCount:          &#34;Count&#34;,
<a id="L127"></a><span class="ln">   127</span>		AttrDataMemberLoc:  &#34;DataMemberLoc&#34;,
<a id="L128"></a><span class="ln">   128</span>		AttrDeclColumn:     &#34;DeclColumn&#34;,
<a id="L129"></a><span class="ln">   129</span>		AttrDeclFile:       &#34;DeclFile&#34;,
<a id="L130"></a><span class="ln">   130</span>		AttrDeclLine:       &#34;DeclLine&#34;,
<a id="L131"></a><span class="ln">   131</span>		AttrDeclaration:    &#34;Declaration&#34;,
<a id="L132"></a><span class="ln">   132</span>		AttrDiscrList:      &#34;DiscrList&#34;,
<a id="L133"></a><span class="ln">   133</span>		AttrEncoding:       &#34;Encoding&#34;,
<a id="L134"></a><span class="ln">   134</span>		AttrExternal:       &#34;External&#34;,
<a id="L135"></a><span class="ln">   135</span>		AttrFrameBase:      &#34;FrameBase&#34;,
<a id="L136"></a><span class="ln">   136</span>		AttrFriend:         &#34;Friend&#34;,
<a id="L137"></a><span class="ln">   137</span>		AttrIdentifierCase: &#34;IdentifierCase&#34;,
<a id="L138"></a><span class="ln">   138</span>		AttrMacroInfo:      &#34;MacroInfo&#34;,
<a id="L139"></a><span class="ln">   139</span>		AttrNamelistItem:   &#34;NamelistItem&#34;,
<a id="L140"></a><span class="ln">   140</span>		AttrPriority:       &#34;Priority&#34;,
<a id="L141"></a><span class="ln">   141</span>		AttrSegment:        &#34;Segment&#34;,
<a id="L142"></a><span class="ln">   142</span>		AttrSpecification:  &#34;Specification&#34;,
<a id="L143"></a><span class="ln">   143</span>		AttrStaticLink:     &#34;StaticLink&#34;,
<a id="L144"></a><span class="ln">   144</span>		AttrType:           &#34;Type&#34;,
<a id="L145"></a><span class="ln">   145</span>		AttrUseLocation:    &#34;UseLocation&#34;,
<a id="L146"></a><span class="ln">   146</span>		AttrVarParam:       &#34;VarParam&#34;,
<a id="L147"></a><span class="ln">   147</span>		AttrVirtuality:     &#34;Virtuality&#34;,
<a id="L148"></a><span class="ln">   148</span>		AttrVtableElemLoc:  &#34;VtableElemLoc&#34;,
<a id="L149"></a><span class="ln">   149</span>		AttrAllocated:      &#34;Allocated&#34;,
<a id="L150"></a><span class="ln">   150</span>		AttrAssociated:     &#34;Associated&#34;,
<a id="L151"></a><span class="ln">   151</span>		AttrDataLocation:   &#34;DataLocation&#34;,
<a id="L152"></a><span class="ln">   152</span>		AttrStride:         &#34;Stride&#34;,
<a id="L153"></a><span class="ln">   153</span>		AttrEntrypc:        &#34;Entrypc&#34;,
<a id="L154"></a><span class="ln">   154</span>		AttrUseUTF8:        &#34;UseUTF8&#34;,
<a id="L155"></a><span class="ln">   155</span>		AttrExtension:      &#34;Extension&#34;,
<a id="L156"></a><span class="ln">   156</span>		AttrRanges:         &#34;Ranges&#34;,
<a id="L157"></a><span class="ln">   157</span>		AttrTrampoline:     &#34;Trampoline&#34;,
<a id="L158"></a><span class="ln">   158</span>		AttrCallColumn:     &#34;CallColumn&#34;,
<a id="L159"></a><span class="ln">   159</span>		AttrCallFile:       &#34;CallFile&#34;,
<a id="L160"></a><span class="ln">   160</span>		AttrCallLine:       &#34;CallLine&#34;,
<a id="L161"></a><span class="ln">   161</span>		AttrDescription:    &#34;Description&#34;,
<a id="L162"></a><span class="ln">   162</span>	}
<a id="L163"></a><span class="ln">   163</span>	
<a id="L164"></a><span class="ln">   164</span>	func (a Attr) String() string {
<a id="L165"></a><span class="ln">   165</span>		if int(a) &lt; len(attrNames) {
<a id="L166"></a><span class="ln">   166</span>			s := attrNames[a]
<a id="L167"></a><span class="ln">   167</span>			if s != &#34;&#34; {
<a id="L168"></a><span class="ln">   168</span>				return s
<a id="L169"></a><span class="ln">   169</span>			}
<a id="L170"></a><span class="ln">   170</span>		}
<a id="L171"></a><span class="ln">   171</span>		return strconv.Itoa(int(a))
<a id="L172"></a><span class="ln">   172</span>	}
<a id="L173"></a><span class="ln">   173</span>	
<a id="L174"></a><span class="ln">   174</span>	func (a Attr) GoString() string {
<a id="L175"></a><span class="ln">   175</span>		if int(a) &lt; len(attrNames) {
<a id="L176"></a><span class="ln">   176</span>			s := attrNames[a]
<a id="L177"></a><span class="ln">   177</span>			if s != &#34;&#34; {
<a id="L178"></a><span class="ln">   178</span>				return &#34;dwarf.Attr&#34; + s
<a id="L179"></a><span class="ln">   179</span>			}
<a id="L180"></a><span class="ln">   180</span>		}
<a id="L181"></a><span class="ln">   181</span>		return &#34;dwarf.Attr(&#34; + strconv.FormatInt(int64(a), 10) + &#34;)&#34;
<a id="L182"></a><span class="ln">   182</span>	}
<a id="L183"></a><span class="ln">   183</span>	
<a id="L184"></a><span class="ln">   184</span>	<span class="comment">// A format is a DWARF data encoding format.</span>
<a id="L185"></a><span class="ln">   185</span>	type format uint32
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>	const (
<a id="L188"></a><span class="ln">   188</span>		<span class="comment">// value formats</span>
<a id="L189"></a><span class="ln">   189</span>		formAddr        format = 0x01
<a id="L190"></a><span class="ln">   190</span>		formDwarfBlock2 format = 0x03
<a id="L191"></a><span class="ln">   191</span>		formDwarfBlock4 format = 0x04
<a id="L192"></a><span class="ln">   192</span>		formData2       format = 0x05
<a id="L193"></a><span class="ln">   193</span>		formData4       format = 0x06
<a id="L194"></a><span class="ln">   194</span>		formData8       format = 0x07
<a id="L195"></a><span class="ln">   195</span>		formString      format = 0x08
<a id="L196"></a><span class="ln">   196</span>		formDwarfBlock  format = 0x09
<a id="L197"></a><span class="ln">   197</span>		formDwarfBlock1 format = 0x0A
<a id="L198"></a><span class="ln">   198</span>		formData1       format = 0x0B
<a id="L199"></a><span class="ln">   199</span>		formFlag        format = 0x0C
<a id="L200"></a><span class="ln">   200</span>		formSdata       format = 0x0D
<a id="L201"></a><span class="ln">   201</span>		formStrp        format = 0x0E
<a id="L202"></a><span class="ln">   202</span>		formUdata       format = 0x0F
<a id="L203"></a><span class="ln">   203</span>		formRefAddr     format = 0x10
<a id="L204"></a><span class="ln">   204</span>		formRef1        format = 0x11
<a id="L205"></a><span class="ln">   205</span>		formRef2        format = 0x12
<a id="L206"></a><span class="ln">   206</span>		formRef4        format = 0x13
<a id="L207"></a><span class="ln">   207</span>		formRef8        format = 0x14
<a id="L208"></a><span class="ln">   208</span>		formRefUdata    format = 0x15
<a id="L209"></a><span class="ln">   209</span>		formIndirect    format = 0x16
<a id="L210"></a><span class="ln">   210</span>	)
<a id="L211"></a><span class="ln">   211</span>	
<a id="L212"></a><span class="ln">   212</span>	<span class="comment">// A Tag is the classification (the type) of an Entry.</span>
<a id="L213"></a><span class="ln">   213</span>	type Tag uint32
<a id="L214"></a><span class="ln">   214</span>	
<a id="L215"></a><span class="ln">   215</span>	const (
<a id="L216"></a><span class="ln">   216</span>		TagArrayType              Tag = 0x01
<a id="L217"></a><span class="ln">   217</span>		TagClassType              Tag = 0x02
<a id="L218"></a><span class="ln">   218</span>		TagEntryPoint             Tag = 0x03
<a id="L219"></a><span class="ln">   219</span>		TagEnumerationType        Tag = 0x04
<a id="L220"></a><span class="ln">   220</span>		TagFormalParameter        Tag = 0x05
<a id="L221"></a><span class="ln">   221</span>		TagImportedDeclaration    Tag = 0x08
<a id="L222"></a><span class="ln">   222</span>		TagLabel                  Tag = 0x0A
<a id="L223"></a><span class="ln">   223</span>		TagLexDwarfBlock          Tag = 0x0B
<a id="L224"></a><span class="ln">   224</span>		TagMember                 Tag = 0x0D
<a id="L225"></a><span class="ln">   225</span>		TagPointerType            Tag = 0x0F
<a id="L226"></a><span class="ln">   226</span>		TagReferenceType          Tag = 0x10
<a id="L227"></a><span class="ln">   227</span>		TagCompileUnit            Tag = 0x11
<a id="L228"></a><span class="ln">   228</span>		TagStringType             Tag = 0x12
<a id="L229"></a><span class="ln">   229</span>		TagStructType             Tag = 0x13
<a id="L230"></a><span class="ln">   230</span>		TagSubroutineType         Tag = 0x15
<a id="L231"></a><span class="ln">   231</span>		TagTypedef                Tag = 0x16
<a id="L232"></a><span class="ln">   232</span>		TagUnionType              Tag = 0x17
<a id="L233"></a><span class="ln">   233</span>		TagUnspecifiedParameters  Tag = 0x18
<a id="L234"></a><span class="ln">   234</span>		TagVariant                Tag = 0x19
<a id="L235"></a><span class="ln">   235</span>		TagCommonDwarfBlock       Tag = 0x1A
<a id="L236"></a><span class="ln">   236</span>		TagCommonInclusion        Tag = 0x1B
<a id="L237"></a><span class="ln">   237</span>		TagInheritance            Tag = 0x1C
<a id="L238"></a><span class="ln">   238</span>		TagInlinedSubroutine      Tag = 0x1D
<a id="L239"></a><span class="ln">   239</span>		TagModule                 Tag = 0x1E
<a id="L240"></a><span class="ln">   240</span>		TagPtrToMemberType        Tag = 0x1F
<a id="L241"></a><span class="ln">   241</span>		TagSetType                Tag = 0x20
<a id="L242"></a><span class="ln">   242</span>		TagSubrangeType           Tag = 0x21
<a id="L243"></a><span class="ln">   243</span>		TagWithStmt               Tag = 0x22
<a id="L244"></a><span class="ln">   244</span>		TagAccessDeclaration      Tag = 0x23
<a id="L245"></a><span class="ln">   245</span>		TagBaseType               Tag = 0x24
<a id="L246"></a><span class="ln">   246</span>		TagCatchDwarfBlock        Tag = 0x25
<a id="L247"></a><span class="ln">   247</span>		TagConstType              Tag = 0x26
<a id="L248"></a><span class="ln">   248</span>		TagConstant               Tag = 0x27
<a id="L249"></a><span class="ln">   249</span>		TagEnumerator             Tag = 0x28
<a id="L250"></a><span class="ln">   250</span>		TagFileType               Tag = 0x29
<a id="L251"></a><span class="ln">   251</span>		TagFriend                 Tag = 0x2A
<a id="L252"></a><span class="ln">   252</span>		TagNamelist               Tag = 0x2B
<a id="L253"></a><span class="ln">   253</span>		TagNamelistItem           Tag = 0x2C
<a id="L254"></a><span class="ln">   254</span>		TagPackedType             Tag = 0x2D
<a id="L255"></a><span class="ln">   255</span>		TagSubprogram             Tag = 0x2E
<a id="L256"></a><span class="ln">   256</span>		TagTemplateTypeParameter  Tag = 0x2F
<a id="L257"></a><span class="ln">   257</span>		TagTemplateValueParameter Tag = 0x30
<a id="L258"></a><span class="ln">   258</span>		TagThrownType             Tag = 0x31
<a id="L259"></a><span class="ln">   259</span>		TagTryDwarfBlock          Tag = 0x32
<a id="L260"></a><span class="ln">   260</span>		TagVariantPart            Tag = 0x33
<a id="L261"></a><span class="ln">   261</span>		TagVariable               Tag = 0x34
<a id="L262"></a><span class="ln">   262</span>		TagVolatileType           Tag = 0x35
<a id="L263"></a><span class="ln">   263</span>		TagDwarfProcedure         Tag = 0x36
<a id="L264"></a><span class="ln">   264</span>		TagRestrictType           Tag = 0x37
<a id="L265"></a><span class="ln">   265</span>		TagInterfaceType          Tag = 0x38
<a id="L266"></a><span class="ln">   266</span>		TagNamespace              Tag = 0x39
<a id="L267"></a><span class="ln">   267</span>		TagImportedModule         Tag = 0x3A
<a id="L268"></a><span class="ln">   268</span>		TagUnspecifiedType        Tag = 0x3B
<a id="L269"></a><span class="ln">   269</span>		TagPartialUnit            Tag = 0x3C
<a id="L270"></a><span class="ln">   270</span>		TagImportedUnit           Tag = 0x3D
<a id="L271"></a><span class="ln">   271</span>		TagMutableType            Tag = 0x3E
<a id="L272"></a><span class="ln">   272</span>	)
<a id="L273"></a><span class="ln">   273</span>	
<a id="L274"></a><span class="ln">   274</span>	var tagNames = [...]string{
<a id="L275"></a><span class="ln">   275</span>		TagArrayType:              &#34;ArrayType&#34;,
<a id="L276"></a><span class="ln">   276</span>		TagClassType:              &#34;ClassType&#34;,
<a id="L277"></a><span class="ln">   277</span>		TagEntryPoint:             &#34;EntryPoint&#34;,
<a id="L278"></a><span class="ln">   278</span>		TagEnumerationType:        &#34;EnumerationType&#34;,
<a id="L279"></a><span class="ln">   279</span>		TagFormalParameter:        &#34;FormalParameter&#34;,
<a id="L280"></a><span class="ln">   280</span>		TagImportedDeclaration:    &#34;ImportedDeclaration&#34;,
<a id="L281"></a><span class="ln">   281</span>		TagLabel:                  &#34;Label&#34;,
<a id="L282"></a><span class="ln">   282</span>		TagLexDwarfBlock:          &#34;LexDwarfBlock&#34;,
<a id="L283"></a><span class="ln">   283</span>		TagMember:                 &#34;Member&#34;,
<a id="L284"></a><span class="ln">   284</span>		TagPointerType:            &#34;PointerType&#34;,
<a id="L285"></a><span class="ln">   285</span>		TagReferenceType:          &#34;ReferenceType&#34;,
<a id="L286"></a><span class="ln">   286</span>		TagCompileUnit:            &#34;CompileUnit&#34;,
<a id="L287"></a><span class="ln">   287</span>		TagStringType:             &#34;StringType&#34;,
<a id="L288"></a><span class="ln">   288</span>		TagStructType:             &#34;StructType&#34;,
<a id="L289"></a><span class="ln">   289</span>		TagSubroutineType:         &#34;SubroutineType&#34;,
<a id="L290"></a><span class="ln">   290</span>		TagTypedef:                &#34;Typedef&#34;,
<a id="L291"></a><span class="ln">   291</span>		TagUnionType:              &#34;UnionType&#34;,
<a id="L292"></a><span class="ln">   292</span>		TagUnspecifiedParameters:  &#34;UnspecifiedParameters&#34;,
<a id="L293"></a><span class="ln">   293</span>		TagVariant:                &#34;Variant&#34;,
<a id="L294"></a><span class="ln">   294</span>		TagCommonDwarfBlock:       &#34;CommonDwarfBlock&#34;,
<a id="L295"></a><span class="ln">   295</span>		TagCommonInclusion:        &#34;CommonInclusion&#34;,
<a id="L296"></a><span class="ln">   296</span>		TagInheritance:            &#34;Inheritance&#34;,
<a id="L297"></a><span class="ln">   297</span>		TagInlinedSubroutine:      &#34;InlinedSubroutine&#34;,
<a id="L298"></a><span class="ln">   298</span>		TagModule:                 &#34;Module&#34;,
<a id="L299"></a><span class="ln">   299</span>		TagPtrToMemberType:        &#34;PtrToMemberType&#34;,
<a id="L300"></a><span class="ln">   300</span>		TagSetType:                &#34;SetType&#34;,
<a id="L301"></a><span class="ln">   301</span>		TagSubrangeType:           &#34;SubrangeType&#34;,
<a id="L302"></a><span class="ln">   302</span>		TagWithStmt:               &#34;WithStmt&#34;,
<a id="L303"></a><span class="ln">   303</span>		TagAccessDeclaration:      &#34;AccessDeclaration&#34;,
<a id="L304"></a><span class="ln">   304</span>		TagBaseType:               &#34;BaseType&#34;,
<a id="L305"></a><span class="ln">   305</span>		TagCatchDwarfBlock:        &#34;CatchDwarfBlock&#34;,
<a id="L306"></a><span class="ln">   306</span>		TagConstType:              &#34;ConstType&#34;,
<a id="L307"></a><span class="ln">   307</span>		TagConstant:               &#34;Constant&#34;,
<a id="L308"></a><span class="ln">   308</span>		TagEnumerator:             &#34;Enumerator&#34;,
<a id="L309"></a><span class="ln">   309</span>		TagFileType:               &#34;FileType&#34;,
<a id="L310"></a><span class="ln">   310</span>		TagFriend:                 &#34;Friend&#34;,
<a id="L311"></a><span class="ln">   311</span>		TagNamelist:               &#34;Namelist&#34;,
<a id="L312"></a><span class="ln">   312</span>		TagNamelistItem:           &#34;NamelistItem&#34;,
<a id="L313"></a><span class="ln">   313</span>		TagPackedType:             &#34;PackedType&#34;,
<a id="L314"></a><span class="ln">   314</span>		TagSubprogram:             &#34;Subprogram&#34;,
<a id="L315"></a><span class="ln">   315</span>		TagTemplateTypeParameter:  &#34;TemplateTypeParameter&#34;,
<a id="L316"></a><span class="ln">   316</span>		TagTemplateValueParameter: &#34;TemplateValueParameter&#34;,
<a id="L317"></a><span class="ln">   317</span>		TagThrownType:             &#34;ThrownType&#34;,
<a id="L318"></a><span class="ln">   318</span>		TagTryDwarfBlock:          &#34;TryDwarfBlock&#34;,
<a id="L319"></a><span class="ln">   319</span>		TagVariantPart:            &#34;VariantPart&#34;,
<a id="L320"></a><span class="ln">   320</span>		TagVariable:               &#34;Variable&#34;,
<a id="L321"></a><span class="ln">   321</span>		TagVolatileType:           &#34;VolatileType&#34;,
<a id="L322"></a><span class="ln">   322</span>		TagDwarfProcedure:         &#34;DwarfProcedure&#34;,
<a id="L323"></a><span class="ln">   323</span>		TagRestrictType:           &#34;RestrictType&#34;,
<a id="L324"></a><span class="ln">   324</span>		TagInterfaceType:          &#34;InterfaceType&#34;,
<a id="L325"></a><span class="ln">   325</span>		TagNamespace:              &#34;Namespace&#34;,
<a id="L326"></a><span class="ln">   326</span>		TagImportedModule:         &#34;ImportedModule&#34;,
<a id="L327"></a><span class="ln">   327</span>		TagUnspecifiedType:        &#34;UnspecifiedType&#34;,
<a id="L328"></a><span class="ln">   328</span>		TagPartialUnit:            &#34;PartialUnit&#34;,
<a id="L329"></a><span class="ln">   329</span>		TagImportedUnit:           &#34;ImportedUnit&#34;,
<a id="L330"></a><span class="ln">   330</span>		TagMutableType:            &#34;MutableType&#34;,
<a id="L331"></a><span class="ln">   331</span>	}
<a id="L332"></a><span class="ln">   332</span>	
<a id="L333"></a><span class="ln">   333</span>	func (t Tag) String() string {
<a id="L334"></a><span class="ln">   334</span>		if int(t) &lt; len(tagNames) {
<a id="L335"></a><span class="ln">   335</span>			s := tagNames[t]
<a id="L336"></a><span class="ln">   336</span>			if s != &#34;&#34; {
<a id="L337"></a><span class="ln">   337</span>				return s
<a id="L338"></a><span class="ln">   338</span>			}
<a id="L339"></a><span class="ln">   339</span>		}
<a id="L340"></a><span class="ln">   340</span>		return strconv.Itoa(int(t))
<a id="L341"></a><span class="ln">   341</span>	}
<a id="L342"></a><span class="ln">   342</span>	
<a id="L343"></a><span class="ln">   343</span>	func (t Tag) GoString() string {
<a id="L344"></a><span class="ln">   344</span>		if int(t) &lt; len(tagNames) {
<a id="L345"></a><span class="ln">   345</span>			s := tagNames[t]
<a id="L346"></a><span class="ln">   346</span>			if s != &#34;&#34; {
<a id="L347"></a><span class="ln">   347</span>				return &#34;dwarf.Tag&#34; + s
<a id="L348"></a><span class="ln">   348</span>			}
<a id="L349"></a><span class="ln">   349</span>		}
<a id="L350"></a><span class="ln">   350</span>		return &#34;dwarf.Tag(&#34; + strconv.FormatInt(int64(t), 10) + &#34;)&#34;
<a id="L351"></a><span class="ln">   351</span>	}
<a id="L352"></a><span class="ln">   352</span>	
<a id="L353"></a><span class="ln">   353</span>	<span class="comment">// Location expression operators.</span>
<a id="L354"></a><span class="ln">   354</span>	<span class="comment">// The debug info encodes value locations like 8(R3)</span>
<a id="L355"></a><span class="ln">   355</span>	<span class="comment">// as a sequence of these op codes.</span>
<a id="L356"></a><span class="ln">   356</span>	<span class="comment">// This package does not implement full expressions;</span>
<a id="L357"></a><span class="ln">   357</span>	<span class="comment">// the opPlusUconst operator is expected by the type parser.</span>
<a id="L358"></a><span class="ln">   358</span>	const (
<a id="L359"></a><span class="ln">   359</span>		opAddr       = 0x03 <span class="comment">/* 1 op, const addr */</span>
<a id="L360"></a><span class="ln">   360</span>		opDeref      = 0x06
<a id="L361"></a><span class="ln">   361</span>		opConst1u    = 0x08 <span class="comment">/* 1 op, 1 byte const */</span>
<a id="L362"></a><span class="ln">   362</span>		opConst1s    = 0x09 <span class="comment">/*	&#34; signed */</span>
<a id="L363"></a><span class="ln">   363</span>		opConst2u    = 0x0A <span class="comment">/* 1 op, 2 byte const  */</span>
<a id="L364"></a><span class="ln">   364</span>		opConst2s    = 0x0B <span class="comment">/*	&#34; signed */</span>
<a id="L365"></a><span class="ln">   365</span>		opConst4u    = 0x0C <span class="comment">/* 1 op, 4 byte const */</span>
<a id="L366"></a><span class="ln">   366</span>		opConst4s    = 0x0D <span class="comment">/*	&#34; signed */</span>
<a id="L367"></a><span class="ln">   367</span>		opConst8u    = 0x0E <span class="comment">/* 1 op, 8 byte const */</span>
<a id="L368"></a><span class="ln">   368</span>		opConst8s    = 0x0F <span class="comment">/*	&#34; signed */</span>
<a id="L369"></a><span class="ln">   369</span>		opConstu     = 0x10 <span class="comment">/* 1 op, LEB128 const */</span>
<a id="L370"></a><span class="ln">   370</span>		opConsts     = 0x11 <span class="comment">/*	&#34; signed */</span>
<a id="L371"></a><span class="ln">   371</span>		opDup        = 0x12
<a id="L372"></a><span class="ln">   372</span>		opDrop       = 0x13
<a id="L373"></a><span class="ln">   373</span>		opOver       = 0x14
<a id="L374"></a><span class="ln">   374</span>		opPick       = 0x15 <span class="comment">/* 1 op, 1 byte stack index */</span>
<a id="L375"></a><span class="ln">   375</span>		opSwap       = 0x16
<a id="L376"></a><span class="ln">   376</span>		opRot        = 0x17
<a id="L377"></a><span class="ln">   377</span>		opXderef     = 0x18
<a id="L378"></a><span class="ln">   378</span>		opAbs        = 0x19
<a id="L379"></a><span class="ln">   379</span>		opAnd        = 0x1A
<a id="L380"></a><span class="ln">   380</span>		opDiv        = 0x1B
<a id="L381"></a><span class="ln">   381</span>		opMinus      = 0x1C
<a id="L382"></a><span class="ln">   382</span>		opMod        = 0x1D
<a id="L383"></a><span class="ln">   383</span>		opMul        = 0x1E
<a id="L384"></a><span class="ln">   384</span>		opNeg        = 0x1F
<a id="L385"></a><span class="ln">   385</span>		opNot        = 0x20
<a id="L386"></a><span class="ln">   386</span>		opOr         = 0x21
<a id="L387"></a><span class="ln">   387</span>		opPlus       = 0x22
<a id="L388"></a><span class="ln">   388</span>		opPlusUconst = 0x23 <span class="comment">/* 1 op, ULEB128 addend */</span>
<a id="L389"></a><span class="ln">   389</span>		opShl        = 0x24
<a id="L390"></a><span class="ln">   390</span>		opShr        = 0x25
<a id="L391"></a><span class="ln">   391</span>		opShra       = 0x26
<a id="L392"></a><span class="ln">   392</span>		opXor        = 0x27
<a id="L393"></a><span class="ln">   393</span>		opSkip       = 0x2F <span class="comment">/* 1 op, signed 2-byte constant */</span>
<a id="L394"></a><span class="ln">   394</span>		opBra        = 0x28 <span class="comment">/* 1 op, signed 2-byte constant */</span>
<a id="L395"></a><span class="ln">   395</span>		opEq         = 0x29
<a id="L396"></a><span class="ln">   396</span>		opGe         = 0x2A
<a id="L397"></a><span class="ln">   397</span>		opGt         = 0x2B
<a id="L398"></a><span class="ln">   398</span>		opLe         = 0x2C
<a id="L399"></a><span class="ln">   399</span>		opLt         = 0x2D
<a id="L400"></a><span class="ln">   400</span>		opNe         = 0x2E
<a id="L401"></a><span class="ln">   401</span>		opLit0       = 0x30
<a id="L402"></a><span class="ln">   402</span>		<span class="comment">/* OpLitN = OpLit0 + N for N = 0..31 */</span>
<a id="L403"></a><span class="ln">   403</span>		opReg0 = 0x50
<a id="L404"></a><span class="ln">   404</span>		<span class="comment">/* OpRegN = OpReg0 + N for N = 0..31 */</span>
<a id="L405"></a><span class="ln">   405</span>		opBreg0 = 0x70 <span class="comment">/* 1 op, signed LEB128 constant */</span>
<a id="L406"></a><span class="ln">   406</span>		<span class="comment">/* OpBregN = OpBreg0 + N for N = 0..31 */</span>
<a id="L407"></a><span class="ln">   407</span>		opRegx       = 0x90 <span class="comment">/* 1 op, ULEB128 register */</span>
<a id="L408"></a><span class="ln">   408</span>		opFbreg      = 0x91 <span class="comment">/* 1 op, SLEB128 offset */</span>
<a id="L409"></a><span class="ln">   409</span>		opBregx      = 0x92 <span class="comment">/* 2 op, ULEB128 reg; SLEB128 off */</span>
<a id="L410"></a><span class="ln">   410</span>		opPiece      = 0x93 <span class="comment">/* 1 op, ULEB128 size of piece */</span>
<a id="L411"></a><span class="ln">   411</span>		opDerefSize  = 0x94 <span class="comment">/* 1-byte size of data retrieved */</span>
<a id="L412"></a><span class="ln">   412</span>		opXderefSize = 0x95 <span class="comment">/* 1-byte size of data retrieved */</span>
<a id="L413"></a><span class="ln">   413</span>		opNop        = 0x96
<a id="L414"></a><span class="ln">   414</span>		<span class="comment">/* next four new in Dwarf v3 */</span>
<a id="L415"></a><span class="ln">   415</span>		opPushObjAddr = 0x97
<a id="L416"></a><span class="ln">   416</span>		opCall2       = 0x98 <span class="comment">/* 2-byte offset of DIE */</span>
<a id="L417"></a><span class="ln">   417</span>		opCall4       = 0x99 <span class="comment">/* 4-byte offset of DIE */</span>
<a id="L418"></a><span class="ln">   418</span>		opCallRef     = 0x9A <span class="comment">/* 4- or 8- byte offset of DIE */</span>
<a id="L419"></a><span class="ln">   419</span>		<span class="comment">/* 0xE0-0xFF reserved for user-specific */</span>
<a id="L420"></a><span class="ln">   420</span>	)
<a id="L421"></a><span class="ln">   421</span>	
<a id="L422"></a><span class="ln">   422</span>	<span class="comment">// Basic type encodings -- the value for AttrEncoding in a TagBaseType Entry.</span>
<a id="L423"></a><span class="ln">   423</span>	const (
<a id="L424"></a><span class="ln">   424</span>		encAddress        = 0x01
<a id="L425"></a><span class="ln">   425</span>		encBoolean        = 0x02
<a id="L426"></a><span class="ln">   426</span>		encComplexFloat   = 0x03
<a id="L427"></a><span class="ln">   427</span>		encFloat          = 0x04
<a id="L428"></a><span class="ln">   428</span>		encSigned         = 0x05
<a id="L429"></a><span class="ln">   429</span>		encSignedChar     = 0x06
<a id="L430"></a><span class="ln">   430</span>		encUnsigned       = 0x07
<a id="L431"></a><span class="ln">   431</span>		encUnsignedChar   = 0x08
<a id="L432"></a><span class="ln">   432</span>		encImaginaryFloat = 0x09
<a id="L433"></a><span class="ln">   433</span>	)
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

