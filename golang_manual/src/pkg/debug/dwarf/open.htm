<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/debug/dwarf/open.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/debug/dwarf/open.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package dwarf provides access to DWARF debugging information loaded from</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// executable files, as defined in the DWARF 2.0 Standard at</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// http://dwarfstd.org/doc/dwarf-2.0.0.pdf</span>
<a id="L8"></a><span class="ln">     8</span>	package dwarf
<a id="L9"></a><span class="ln">     9</span>	
<a id="L10"></a><span class="ln">    10</span>	import &#34;encoding/binary&#34;
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// Data represents the DWARF debugging information</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// loaded from an executable file (for example, an ELF or Mach-O executable).</span>
<a id="L14"></a><span class="ln">    14</span>	type Data struct {
<a id="L15"></a><span class="ln">    15</span>		<span class="comment">// raw data</span>
<a id="L16"></a><span class="ln">    16</span>		abbrev   []byte
<a id="L17"></a><span class="ln">    17</span>		aranges  []byte
<a id="L18"></a><span class="ln">    18</span>		frame    []byte
<a id="L19"></a><span class="ln">    19</span>		info     []byte
<a id="L20"></a><span class="ln">    20</span>		line     []byte
<a id="L21"></a><span class="ln">    21</span>		pubnames []byte
<a id="L22"></a><span class="ln">    22</span>		ranges   []byte
<a id="L23"></a><span class="ln">    23</span>		str      []byte
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>		<span class="comment">// parsed data</span>
<a id="L26"></a><span class="ln">    26</span>		abbrevCache map[uint32]abbrevTable
<a id="L27"></a><span class="ln">    27</span>		addrsize    int
<a id="L28"></a><span class="ln">    28</span>		order       binary.ByteOrder
<a id="L29"></a><span class="ln">    29</span>		typeCache   map[Offset]Type
<a id="L30"></a><span class="ln">    30</span>		unit        []unit
<a id="L31"></a><span class="ln">    31</span>	}
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// New returns a new Data object initialized from the given parameters.</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// Rather than calling this function directly, clients should typically use</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// the DWARF method of the File type of the appropriate package debug/elf,</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// debug/macho, or debug/pe.</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">//</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// The []byte arguments are the data from the corresponding debug section</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// in the object file; for example, for an ELF object, abbrev is the contents of</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// the &#34;.debug_abbrev&#34; section.</span>
<a id="L41"></a><span class="ln">    41</span>	func New(abbrev, aranges, frame, info, line, pubnames, ranges, str []byte) (*Data, error) {
<a id="L42"></a><span class="ln">    42</span>		d := &amp;Data{
<a id="L43"></a><span class="ln">    43</span>			abbrev:      abbrev,
<a id="L44"></a><span class="ln">    44</span>			aranges:     aranges,
<a id="L45"></a><span class="ln">    45</span>			frame:       frame,
<a id="L46"></a><span class="ln">    46</span>			info:        info,
<a id="L47"></a><span class="ln">    47</span>			line:        line,
<a id="L48"></a><span class="ln">    48</span>			pubnames:    pubnames,
<a id="L49"></a><span class="ln">    49</span>			ranges:      ranges,
<a id="L50"></a><span class="ln">    50</span>			str:         str,
<a id="L51"></a><span class="ln">    51</span>			abbrevCache: make(map[uint32]abbrevTable),
<a id="L52"></a><span class="ln">    52</span>			typeCache:   make(map[Offset]Type),
<a id="L53"></a><span class="ln">    53</span>		}
<a id="L54"></a><span class="ln">    54</span>	
<a id="L55"></a><span class="ln">    55</span>		<span class="comment">// Sniff .debug_info to figure out byte order.</span>
<a id="L56"></a><span class="ln">    56</span>		<span class="comment">// bytes 4:6 are the version, a tiny 16-bit number (1, 2, 3).</span>
<a id="L57"></a><span class="ln">    57</span>		if len(d.info) &lt; 6 {
<a id="L58"></a><span class="ln">    58</span>			return nil, DecodeError{&#34;info&#34;, Offset(len(d.info)), &#34;too short&#34;}
<a id="L59"></a><span class="ln">    59</span>		}
<a id="L60"></a><span class="ln">    60</span>		x, y := d.info[4], d.info[5]
<a id="L61"></a><span class="ln">    61</span>		switch {
<a id="L62"></a><span class="ln">    62</span>		case x == 0 &amp;&amp; y == 0:
<a id="L63"></a><span class="ln">    63</span>			return nil, DecodeError{&#34;info&#34;, 4, &#34;unsupported version 0&#34;}
<a id="L64"></a><span class="ln">    64</span>		case x == 0:
<a id="L65"></a><span class="ln">    65</span>			d.order = binary.BigEndian
<a id="L66"></a><span class="ln">    66</span>		case y == 0:
<a id="L67"></a><span class="ln">    67</span>			d.order = binary.LittleEndian
<a id="L68"></a><span class="ln">    68</span>		default:
<a id="L69"></a><span class="ln">    69</span>			return nil, DecodeError{&#34;info&#34;, 4, &#34;cannot determine byte order&#34;}
<a id="L70"></a><span class="ln">    70</span>		}
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>		u, err := d.parseUnits()
<a id="L73"></a><span class="ln">    73</span>		if err != nil {
<a id="L74"></a><span class="ln">    74</span>			return nil, err
<a id="L75"></a><span class="ln">    75</span>		}
<a id="L76"></a><span class="ln">    76</span>		d.unit = u
<a id="L77"></a><span class="ln">    77</span>		return d, nil
<a id="L78"></a><span class="ln">    78</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

