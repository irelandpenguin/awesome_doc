<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/debug/pe/file.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/debug/pe/file.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package pe implements access to PE (Microsoft Windows Portable Executable) files.</span>
<a id="L6"></a><span class="ln">     6</span>	package pe
<a id="L7"></a><span class="ln">     7</span>	
<a id="L8"></a><span class="ln">     8</span>	import (
<a id="L9"></a><span class="ln">     9</span>		&#34;debug/dwarf&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;encoding/binary&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;errors&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;fmt&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;io&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;os&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;strconv&#34;
<a id="L16"></a><span class="ln">    16</span>	)
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// A File represents an open PE file.</span>
<a id="L19"></a><span class="ln">    19</span>	type File struct {
<a id="L20"></a><span class="ln">    20</span>		FileHeader
<a id="L21"></a><span class="ln">    21</span>		Sections []*Section
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>		closer io.Closer
<a id="L24"></a><span class="ln">    24</span>	}
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>	type SectionHeader struct {
<a id="L27"></a><span class="ln">    27</span>		Name                 string
<a id="L28"></a><span class="ln">    28</span>		VirtualSize          uint32
<a id="L29"></a><span class="ln">    29</span>		VirtualAddress       uint32
<a id="L30"></a><span class="ln">    30</span>		Size                 uint32
<a id="L31"></a><span class="ln">    31</span>		Offset               uint32
<a id="L32"></a><span class="ln">    32</span>		PointerToRelocations uint32
<a id="L33"></a><span class="ln">    33</span>		PointerToLineNumbers uint32
<a id="L34"></a><span class="ln">    34</span>		NumberOfRelocations  uint16
<a id="L35"></a><span class="ln">    35</span>		NumberOfLineNumbers  uint16
<a id="L36"></a><span class="ln">    36</span>		Characteristics      uint32
<a id="L37"></a><span class="ln">    37</span>	}
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>	type Section struct {
<a id="L40"></a><span class="ln">    40</span>		SectionHeader
<a id="L41"></a><span class="ln">    41</span>	
<a id="L42"></a><span class="ln">    42</span>		<span class="comment">// Embed ReaderAt for ReadAt method.</span>
<a id="L43"></a><span class="ln">    43</span>		<span class="comment">// Do not embed SectionReader directly</span>
<a id="L44"></a><span class="ln">    44</span>		<span class="comment">// to avoid having Read and Seek.</span>
<a id="L45"></a><span class="ln">    45</span>		<span class="comment">// If a client wants Read and Seek it must use</span>
<a id="L46"></a><span class="ln">    46</span>		<span class="comment">// Open() to avoid fighting over the seek offset</span>
<a id="L47"></a><span class="ln">    47</span>		<span class="comment">// with other clients.</span>
<a id="L48"></a><span class="ln">    48</span>		io.ReaderAt
<a id="L49"></a><span class="ln">    49</span>		sr *io.SectionReader
<a id="L50"></a><span class="ln">    50</span>	}
<a id="L51"></a><span class="ln">    51</span>	
<a id="L52"></a><span class="ln">    52</span>	type ImportDirectory struct {
<a id="L53"></a><span class="ln">    53</span>		OriginalFirstThunk uint32
<a id="L54"></a><span class="ln">    54</span>		TimeDateStamp      uint32
<a id="L55"></a><span class="ln">    55</span>		ForwarderChain     uint32
<a id="L56"></a><span class="ln">    56</span>		Name               uint32
<a id="L57"></a><span class="ln">    57</span>		FirstThunk         uint32
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>		dll string
<a id="L60"></a><span class="ln">    60</span>	}
<a id="L61"></a><span class="ln">    61</span>	
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">// Data reads and returns the contents of the PE section.</span>
<a id="L63"></a><span class="ln">    63</span>	func (s *Section) Data() ([]byte, error) {
<a id="L64"></a><span class="ln">    64</span>		dat := make([]byte, s.sr.Size())
<a id="L65"></a><span class="ln">    65</span>		n, err := s.sr.ReadAt(dat, 0)
<a id="L66"></a><span class="ln">    66</span>		return dat[0:n], err
<a id="L67"></a><span class="ln">    67</span>	}
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// Open returns a new ReadSeeker reading the PE section.</span>
<a id="L70"></a><span class="ln">    70</span>	func (s *Section) Open() io.ReadSeeker { return io.NewSectionReader(s.sr, 0, 1&lt;&lt;63-1) }
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>	type FormatError struct {
<a id="L73"></a><span class="ln">    73</span>		off int64
<a id="L74"></a><span class="ln">    74</span>		msg string
<a id="L75"></a><span class="ln">    75</span>		val interface{}
<a id="L76"></a><span class="ln">    76</span>	}
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>	func (e *FormatError) Error() string {
<a id="L79"></a><span class="ln">    79</span>		msg := e.msg
<a id="L80"></a><span class="ln">    80</span>		if e.val != nil {
<a id="L81"></a><span class="ln">    81</span>			msg += fmt.Sprintf(&#34; &#39;%v&#39;&#34;, e.val)
<a id="L82"></a><span class="ln">    82</span>		}
<a id="L83"></a><span class="ln">    83</span>		msg += fmt.Sprintf(&#34; in record at byte %#x&#34;, e.off)
<a id="L84"></a><span class="ln">    84</span>		return msg
<a id="L85"></a><span class="ln">    85</span>	}
<a id="L86"></a><span class="ln">    86</span>	
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">// Open opens the named file using os.Open and prepares it for use as a PE binary.</span>
<a id="L88"></a><span class="ln">    88</span>	func Open(name string) (*File, error) {
<a id="L89"></a><span class="ln">    89</span>		f, err := os.Open(name)
<a id="L90"></a><span class="ln">    90</span>		if err != nil {
<a id="L91"></a><span class="ln">    91</span>			return nil, err
<a id="L92"></a><span class="ln">    92</span>		}
<a id="L93"></a><span class="ln">    93</span>		ff, err := NewFile(f)
<a id="L94"></a><span class="ln">    94</span>		if err != nil {
<a id="L95"></a><span class="ln">    95</span>			f.Close()
<a id="L96"></a><span class="ln">    96</span>			return nil, err
<a id="L97"></a><span class="ln">    97</span>		}
<a id="L98"></a><span class="ln">    98</span>		ff.closer = f
<a id="L99"></a><span class="ln">    99</span>		return ff, nil
<a id="L100"></a><span class="ln">   100</span>	}
<a id="L101"></a><span class="ln">   101</span>	
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">// Close closes the File.</span>
<a id="L103"></a><span class="ln">   103</span>	<span class="comment">// If the File was created using NewFile directly instead of Open,</span>
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">// Close has no effect.</span>
<a id="L105"></a><span class="ln">   105</span>	func (f *File) Close() error {
<a id="L106"></a><span class="ln">   106</span>		var err error
<a id="L107"></a><span class="ln">   107</span>		if f.closer != nil {
<a id="L108"></a><span class="ln">   108</span>			err = f.closer.Close()
<a id="L109"></a><span class="ln">   109</span>			f.closer = nil
<a id="L110"></a><span class="ln">   110</span>		}
<a id="L111"></a><span class="ln">   111</span>		return err
<a id="L112"></a><span class="ln">   112</span>	}
<a id="L113"></a><span class="ln">   113</span>	
<a id="L114"></a><span class="ln">   114</span>	<span class="comment">// NewFile creates a new File for accessing a PE binary in an underlying reader.</span>
<a id="L115"></a><span class="ln">   115</span>	func NewFile(r io.ReaderAt) (*File, error) {
<a id="L116"></a><span class="ln">   116</span>		f := new(File)
<a id="L117"></a><span class="ln">   117</span>		sr := io.NewSectionReader(r, 0, 1&lt;&lt;63-1)
<a id="L118"></a><span class="ln">   118</span>	
<a id="L119"></a><span class="ln">   119</span>		var dosheader [96]byte
<a id="L120"></a><span class="ln">   120</span>		if _, err := r.ReadAt(dosheader[0:], 0); err != nil {
<a id="L121"></a><span class="ln">   121</span>			return nil, err
<a id="L122"></a><span class="ln">   122</span>		}
<a id="L123"></a><span class="ln">   123</span>		var base int64
<a id="L124"></a><span class="ln">   124</span>		if dosheader[0] == &#39;M&#39; &amp;&amp; dosheader[1] == &#39;Z&#39; {
<a id="L125"></a><span class="ln">   125</span>			var sign [4]byte
<a id="L126"></a><span class="ln">   126</span>			r.ReadAt(sign[0:], int64(dosheader[0x3c]))
<a id="L127"></a><span class="ln">   127</span>			if !(sign[0] == &#39;P&#39; &amp;&amp; sign[1] == &#39;E&#39; &amp;&amp; sign[2] == 0 &amp;&amp; sign[3] == 0) {
<a id="L128"></a><span class="ln">   128</span>				return nil, errors.New(&#34;Invalid PE File Format.&#34;)
<a id="L129"></a><span class="ln">   129</span>			}
<a id="L130"></a><span class="ln">   130</span>			base = int64(dosheader[0x3c]) + 4
<a id="L131"></a><span class="ln">   131</span>		} else {
<a id="L132"></a><span class="ln">   132</span>			base = int64(0)
<a id="L133"></a><span class="ln">   133</span>		}
<a id="L134"></a><span class="ln">   134</span>		sr.Seek(base, os.SEEK_SET)
<a id="L135"></a><span class="ln">   135</span>		if err := binary.Read(sr, binary.LittleEndian, &amp;f.FileHeader); err != nil {
<a id="L136"></a><span class="ln">   136</span>			return nil, err
<a id="L137"></a><span class="ln">   137</span>		}
<a id="L138"></a><span class="ln">   138</span>		if f.FileHeader.Machine != IMAGE_FILE_MACHINE_UNKNOWN &amp;&amp; f.FileHeader.Machine != IMAGE_FILE_MACHINE_AMD64 &amp;&amp; f.FileHeader.Machine != IMAGE_FILE_MACHINE_I386 {
<a id="L139"></a><span class="ln">   139</span>			return nil, errors.New(&#34;Invalid PE File Format.&#34;)
<a id="L140"></a><span class="ln">   140</span>		}
<a id="L141"></a><span class="ln">   141</span>		<span class="comment">// get symbol string table</span>
<a id="L142"></a><span class="ln">   142</span>		sr.Seek(int64(f.FileHeader.PointerToSymbolTable+18*f.FileHeader.NumberOfSymbols), os.SEEK_SET)
<a id="L143"></a><span class="ln">   143</span>		var l uint32
<a id="L144"></a><span class="ln">   144</span>		if err := binary.Read(sr, binary.LittleEndian, &amp;l); err != nil {
<a id="L145"></a><span class="ln">   145</span>			return nil, err
<a id="L146"></a><span class="ln">   146</span>		}
<a id="L147"></a><span class="ln">   147</span>		ss := make([]byte, l)
<a id="L148"></a><span class="ln">   148</span>		if _, err := r.ReadAt(ss, int64(f.FileHeader.PointerToSymbolTable+18*f.FileHeader.NumberOfSymbols)); err != nil {
<a id="L149"></a><span class="ln">   149</span>			return nil, err
<a id="L150"></a><span class="ln">   150</span>		}
<a id="L151"></a><span class="ln">   151</span>		sr.Seek(base, os.SEEK_SET)
<a id="L152"></a><span class="ln">   152</span>		binary.Read(sr, binary.LittleEndian, &amp;f.FileHeader)
<a id="L153"></a><span class="ln">   153</span>		sr.Seek(int64(f.FileHeader.SizeOfOptionalHeader), os.SEEK_CUR) <span class="comment">//Skip OptionalHeader</span>
<a id="L154"></a><span class="ln">   154</span>		f.Sections = make([]*Section, f.FileHeader.NumberOfSections)
<a id="L155"></a><span class="ln">   155</span>		for i := 0; i &lt; int(f.FileHeader.NumberOfSections); i++ {
<a id="L156"></a><span class="ln">   156</span>			sh := new(SectionHeader32)
<a id="L157"></a><span class="ln">   157</span>			if err := binary.Read(sr, binary.LittleEndian, sh); err != nil {
<a id="L158"></a><span class="ln">   158</span>				return nil, err
<a id="L159"></a><span class="ln">   159</span>			}
<a id="L160"></a><span class="ln">   160</span>			var name string
<a id="L161"></a><span class="ln">   161</span>			if sh.Name[0] == &#39;\x2F&#39; {
<a id="L162"></a><span class="ln">   162</span>				si, _ := strconv.Atoi(cstring(sh.Name[1:]))
<a id="L163"></a><span class="ln">   163</span>				name, _ = getString(ss, si)
<a id="L164"></a><span class="ln">   164</span>			} else {
<a id="L165"></a><span class="ln">   165</span>				name = cstring(sh.Name[0:])
<a id="L166"></a><span class="ln">   166</span>			}
<a id="L167"></a><span class="ln">   167</span>			s := new(Section)
<a id="L168"></a><span class="ln">   168</span>			s.SectionHeader = SectionHeader{
<a id="L169"></a><span class="ln">   169</span>				Name:                 name,
<a id="L170"></a><span class="ln">   170</span>				VirtualSize:          uint32(sh.VirtualSize),
<a id="L171"></a><span class="ln">   171</span>				VirtualAddress:       uint32(sh.VirtualAddress),
<a id="L172"></a><span class="ln">   172</span>				Size:                 uint32(sh.SizeOfRawData),
<a id="L173"></a><span class="ln">   173</span>				Offset:               uint32(sh.PointerToRawData),
<a id="L174"></a><span class="ln">   174</span>				PointerToRelocations: uint32(sh.PointerToRelocations),
<a id="L175"></a><span class="ln">   175</span>				PointerToLineNumbers: uint32(sh.PointerToLineNumbers),
<a id="L176"></a><span class="ln">   176</span>				NumberOfRelocations:  uint16(sh.NumberOfRelocations),
<a id="L177"></a><span class="ln">   177</span>				NumberOfLineNumbers:  uint16(sh.NumberOfLineNumbers),
<a id="L178"></a><span class="ln">   178</span>				Characteristics:      uint32(sh.Characteristics),
<a id="L179"></a><span class="ln">   179</span>			}
<a id="L180"></a><span class="ln">   180</span>			s.sr = io.NewSectionReader(r, int64(s.SectionHeader.Offset), int64(s.SectionHeader.Size))
<a id="L181"></a><span class="ln">   181</span>			s.ReaderAt = s.sr
<a id="L182"></a><span class="ln">   182</span>			f.Sections[i] = s
<a id="L183"></a><span class="ln">   183</span>		}
<a id="L184"></a><span class="ln">   184</span>		return f, nil
<a id="L185"></a><span class="ln">   185</span>	}
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>	func cstring(b []byte) string {
<a id="L188"></a><span class="ln">   188</span>		var i int
<a id="L189"></a><span class="ln">   189</span>		for i = 0; i &lt; len(b) &amp;&amp; b[i] != 0; i++ {
<a id="L190"></a><span class="ln">   190</span>		}
<a id="L191"></a><span class="ln">   191</span>		return string(b[0:i])
<a id="L192"></a><span class="ln">   192</span>	}
<a id="L193"></a><span class="ln">   193</span>	
<a id="L194"></a><span class="ln">   194</span>	<span class="comment">// getString extracts a string from symbol string table.</span>
<a id="L195"></a><span class="ln">   195</span>	func getString(section []byte, start int) (string, bool) {
<a id="L196"></a><span class="ln">   196</span>		if start &lt; 0 || start &gt;= len(section) {
<a id="L197"></a><span class="ln">   197</span>			return &#34;&#34;, false
<a id="L198"></a><span class="ln">   198</span>		}
<a id="L199"></a><span class="ln">   199</span>	
<a id="L200"></a><span class="ln">   200</span>		for end := start; end &lt; len(section); end++ {
<a id="L201"></a><span class="ln">   201</span>			if section[end] == 0 {
<a id="L202"></a><span class="ln">   202</span>				return string(section[start:end]), true
<a id="L203"></a><span class="ln">   203</span>			}
<a id="L204"></a><span class="ln">   204</span>		}
<a id="L205"></a><span class="ln">   205</span>		return &#34;&#34;, false
<a id="L206"></a><span class="ln">   206</span>	}
<a id="L207"></a><span class="ln">   207</span>	
<a id="L208"></a><span class="ln">   208</span>	<span class="comment">// Section returns the first section with the given name, or nil if no such</span>
<a id="L209"></a><span class="ln">   209</span>	<span class="comment">// section exists.</span>
<a id="L210"></a><span class="ln">   210</span>	func (f *File) Section(name string) *Section {
<a id="L211"></a><span class="ln">   211</span>		for _, s := range f.Sections {
<a id="L212"></a><span class="ln">   212</span>			if s.Name == name {
<a id="L213"></a><span class="ln">   213</span>				return s
<a id="L214"></a><span class="ln">   214</span>			}
<a id="L215"></a><span class="ln">   215</span>		}
<a id="L216"></a><span class="ln">   216</span>		return nil
<a id="L217"></a><span class="ln">   217</span>	}
<a id="L218"></a><span class="ln">   218</span>	
<a id="L219"></a><span class="ln">   219</span>	func (f *File) DWARF() (*dwarf.Data, error) {
<a id="L220"></a><span class="ln">   220</span>		<span class="comment">// There are many other DWARF sections, but these</span>
<a id="L221"></a><span class="ln">   221</span>		<span class="comment">// are the required ones, and the debug/dwarf package</span>
<a id="L222"></a><span class="ln">   222</span>		<span class="comment">// does not use the others, so don&#39;t bother loading them.</span>
<a id="L223"></a><span class="ln">   223</span>		var names = [...]string{&#34;abbrev&#34;, &#34;info&#34;, &#34;str&#34;}
<a id="L224"></a><span class="ln">   224</span>		var dat [len(names)][]byte
<a id="L225"></a><span class="ln">   225</span>		for i, name := range names {
<a id="L226"></a><span class="ln">   226</span>			name = &#34;.debug_&#34; + name
<a id="L227"></a><span class="ln">   227</span>			s := f.Section(name)
<a id="L228"></a><span class="ln">   228</span>			if s == nil {
<a id="L229"></a><span class="ln">   229</span>				continue
<a id="L230"></a><span class="ln">   230</span>			}
<a id="L231"></a><span class="ln">   231</span>			b, err := s.Data()
<a id="L232"></a><span class="ln">   232</span>			if err != nil &amp;&amp; uint32(len(b)) &lt; s.Size {
<a id="L233"></a><span class="ln">   233</span>				return nil, err
<a id="L234"></a><span class="ln">   234</span>			}
<a id="L235"></a><span class="ln">   235</span>			dat[i] = b
<a id="L236"></a><span class="ln">   236</span>		}
<a id="L237"></a><span class="ln">   237</span>	
<a id="L238"></a><span class="ln">   238</span>		abbrev, info, str := dat[0], dat[1], dat[2]
<a id="L239"></a><span class="ln">   239</span>		return dwarf.New(abbrev, nil, nil, info, nil, nil, nil, str)
<a id="L240"></a><span class="ln">   240</span>	}
<a id="L241"></a><span class="ln">   241</span>	
<a id="L242"></a><span class="ln">   242</span>	<span class="comment">// ImportedSymbols returns the names of all symbols</span>
<a id="L243"></a><span class="ln">   243</span>	<span class="comment">// referred to by the binary f that are expected to be</span>
<a id="L244"></a><span class="ln">   244</span>	<span class="comment">// satisfied by other libraries at dynamic load time.</span>
<a id="L245"></a><span class="ln">   245</span>	<span class="comment">// It does not return weak symbols.</span>
<a id="L246"></a><span class="ln">   246</span>	func (f *File) ImportedSymbols() ([]string, error) {
<a id="L247"></a><span class="ln">   247</span>		pe64 := f.Machine == IMAGE_FILE_MACHINE_AMD64
<a id="L248"></a><span class="ln">   248</span>		ds := f.Section(&#34;.idata&#34;)
<a id="L249"></a><span class="ln">   249</span>		if ds == nil {
<a id="L250"></a><span class="ln">   250</span>			<span class="comment">// not dynamic, so no libraries</span>
<a id="L251"></a><span class="ln">   251</span>			return nil, nil
<a id="L252"></a><span class="ln">   252</span>		}
<a id="L253"></a><span class="ln">   253</span>		d, err := ds.Data()
<a id="L254"></a><span class="ln">   254</span>		if err != nil {
<a id="L255"></a><span class="ln">   255</span>			return nil, err
<a id="L256"></a><span class="ln">   256</span>		}
<a id="L257"></a><span class="ln">   257</span>		var ida []ImportDirectory
<a id="L258"></a><span class="ln">   258</span>		for len(d) &gt; 0 {
<a id="L259"></a><span class="ln">   259</span>			var dt ImportDirectory
<a id="L260"></a><span class="ln">   260</span>			dt.OriginalFirstThunk = binary.LittleEndian.Uint32(d[0:4])
<a id="L261"></a><span class="ln">   261</span>			dt.Name = binary.LittleEndian.Uint32(d[12:16])
<a id="L262"></a><span class="ln">   262</span>			dt.FirstThunk = binary.LittleEndian.Uint32(d[16:20])
<a id="L263"></a><span class="ln">   263</span>			d = d[20:]
<a id="L264"></a><span class="ln">   264</span>			if dt.OriginalFirstThunk == 0 {
<a id="L265"></a><span class="ln">   265</span>				break
<a id="L266"></a><span class="ln">   266</span>			}
<a id="L267"></a><span class="ln">   267</span>			ida = append(ida, dt)
<a id="L268"></a><span class="ln">   268</span>		}
<a id="L269"></a><span class="ln">   269</span>		names, _ := ds.Data()
<a id="L270"></a><span class="ln">   270</span>		var all []string
<a id="L271"></a><span class="ln">   271</span>		for _, dt := range ida {
<a id="L272"></a><span class="ln">   272</span>			dt.dll, _ = getString(names, int(dt.Name-ds.VirtualAddress))
<a id="L273"></a><span class="ln">   273</span>			d, _ = ds.Data()
<a id="L274"></a><span class="ln">   274</span>			<span class="comment">// seek to OriginalFirstThunk</span>
<a id="L275"></a><span class="ln">   275</span>			d = d[dt.OriginalFirstThunk-ds.VirtualAddress:]
<a id="L276"></a><span class="ln">   276</span>			for len(d) &gt; 0 {
<a id="L277"></a><span class="ln">   277</span>				if pe64 { <span class="comment">// 64bit</span>
<a id="L278"></a><span class="ln">   278</span>					va := binary.LittleEndian.Uint64(d[0:8])
<a id="L279"></a><span class="ln">   279</span>					d = d[8:]
<a id="L280"></a><span class="ln">   280</span>					if va == 0 {
<a id="L281"></a><span class="ln">   281</span>						break
<a id="L282"></a><span class="ln">   282</span>					}
<a id="L283"></a><span class="ln">   283</span>					if va&amp;0x8000000000000000 &gt; 0 { <span class="comment">// is Ordinal</span>
<a id="L284"></a><span class="ln">   284</span>						<span class="comment">// TODO add dynimport ordinal support.</span>
<a id="L285"></a><span class="ln">   285</span>					} else {
<a id="L286"></a><span class="ln">   286</span>						fn, _ := getString(names, int(uint32(va)-ds.VirtualAddress+2))
<a id="L287"></a><span class="ln">   287</span>						all = append(all, fn+&#34;:&#34;+dt.dll)
<a id="L288"></a><span class="ln">   288</span>					}
<a id="L289"></a><span class="ln">   289</span>				} else { <span class="comment">// 32bit</span>
<a id="L290"></a><span class="ln">   290</span>					va := binary.LittleEndian.Uint32(d[0:4])
<a id="L291"></a><span class="ln">   291</span>					d = d[4:]
<a id="L292"></a><span class="ln">   292</span>					if va == 0 {
<a id="L293"></a><span class="ln">   293</span>						break
<a id="L294"></a><span class="ln">   294</span>					}
<a id="L295"></a><span class="ln">   295</span>					if va&amp;0x80000000 &gt; 0 { <span class="comment">// is Ordinal</span>
<a id="L296"></a><span class="ln">   296</span>						<span class="comment">// TODO add dynimport ordinal support.</span>
<a id="L297"></a><span class="ln">   297</span>						<span class="comment">//ord := va&amp;0x0000FFFF</span>
<a id="L298"></a><span class="ln">   298</span>					} else {
<a id="L299"></a><span class="ln">   299</span>						fn, _ := getString(names, int(va-ds.VirtualAddress+2))
<a id="L300"></a><span class="ln">   300</span>						all = append(all, fn+&#34;:&#34;+dt.dll)
<a id="L301"></a><span class="ln">   301</span>					}
<a id="L302"></a><span class="ln">   302</span>				}
<a id="L303"></a><span class="ln">   303</span>			}
<a id="L304"></a><span class="ln">   304</span>		}
<a id="L305"></a><span class="ln">   305</span>	
<a id="L306"></a><span class="ln">   306</span>		return all, nil
<a id="L307"></a><span class="ln">   307</span>	}
<a id="L308"></a><span class="ln">   308</span>	
<a id="L309"></a><span class="ln">   309</span>	<span class="comment">// ImportedLibraries returns the names of all libraries</span>
<a id="L310"></a><span class="ln">   310</span>	<span class="comment">// referred to by the binary f that are expected to be</span>
<a id="L311"></a><span class="ln">   311</span>	<span class="comment">// linked with the binary at dynamic link time.</span>
<a id="L312"></a><span class="ln">   312</span>	func (f *File) ImportedLibraries() ([]string, error) {
<a id="L313"></a><span class="ln">   313</span>		<span class="comment">// TODO</span>
<a id="L314"></a><span class="ln">   314</span>		<span class="comment">// cgo -dynimport don&#39;t use this for windows PE, so just return.</span>
<a id="L315"></a><span class="ln">   315</span>		return nil, nil
<a id="L316"></a><span class="ln">   316</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

