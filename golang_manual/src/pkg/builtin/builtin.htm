<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/builtin/builtin.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/builtin/builtin.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">/*
</span><a id="L6"></a><span class="ln">     6</span>	<span class="comment">	Package builtin provides documentation for Go&#39;s predeclared identifiers.
</span><a id="L7"></a><span class="ln">     7</span>	<span class="comment">	The items documented here are not actually in package builtin
</span><a id="L8"></a><span class="ln">     8</span>	<span class="comment">	but their descriptions here allow godoc to present documentation
</span><a id="L9"></a><span class="ln">     9</span>	<span class="comment">	for the language&#39;s special identifiers.
</span><a id="L10"></a><span class="ln">    10</span>	<span class="comment">*/</span>
<a id="L11"></a><span class="ln">    11</span>	package builtin
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// bool is the set of boolean values, true and false.</span>
<a id="L14"></a><span class="ln">    14</span>	type bool bool
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// uint8 is the set of all unsigned 8-bit integers.</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// Range: 0 through 255.</span>
<a id="L18"></a><span class="ln">    18</span>	type uint8 uint8
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// uint16 is the set of all unsigned 16-bit integers.</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// Range: 0 through 65535.</span>
<a id="L22"></a><span class="ln">    22</span>	type uint16 uint16
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// uint32 is the set of all unsigned 32-bit integers.</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// Range: 0 through 4294967295.</span>
<a id="L26"></a><span class="ln">    26</span>	type uint32 uint32
<a id="L27"></a><span class="ln">    27</span>	
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// uint64 is the set of all unsigned 64-bit integers.</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// Range: 0 through 18446744073709551615.</span>
<a id="L30"></a><span class="ln">    30</span>	type uint64 uint64
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// int8 is the set of all signed 8-bit integers.</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// Range: -128 through 127.</span>
<a id="L34"></a><span class="ln">    34</span>	type int8 int8
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// int16 is the set of all signed 16-bit integers.</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// Range: -32768 through 32767.</span>
<a id="L38"></a><span class="ln">    38</span>	type int16 int16
<a id="L39"></a><span class="ln">    39</span>	
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// int32 is the set of all signed 32-bit integers.</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// Range: -2147483648 through 2147483647.</span>
<a id="L42"></a><span class="ln">    42</span>	type int32 int32
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">// int64 is the set of all signed 64-bit integers.</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">// Range: -9223372036854775808 through 9223372036854775807.</span>
<a id="L46"></a><span class="ln">    46</span>	type int64 int64
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">// float32 is the set of all IEEE-754 32-bit floating-point numbers.</span>
<a id="L49"></a><span class="ln">    49</span>	type float32 float32
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// float64 is the set of all IEEE-754 64-bit floating-point numbers.</span>
<a id="L52"></a><span class="ln">    52</span>	type float64 float64
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">// complex64 is the set of all complex numbers with float32 real and</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// imaginary parts.</span>
<a id="L56"></a><span class="ln">    56</span>	type complex64 complex64
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// complex128 is the set of all complex numbers with float64 real and</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// imaginary parts.</span>
<a id="L60"></a><span class="ln">    60</span>	type complex128 complex128
<a id="L61"></a><span class="ln">    61</span>	
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">// string is the set of all strings of 8-bit bytes, conventionally but not</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">// necessarily representing UTF-8-encoded text. A string may be empty, but</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// not nil. Values of string type are immutable.</span>
<a id="L65"></a><span class="ln">    65</span>	type string string
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// int is a signed integer type that is at least 32 bits in size. It is a</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// distinct type, however, and not an alias for, say, int32.</span>
<a id="L69"></a><span class="ln">    69</span>	type int int
<a id="L70"></a><span class="ln">    70</span>	
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">// uint is an unsigned integer type that is at least 32 bits in size. It is a</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">// distinct type, however, and not an alias for, say, uint32.</span>
<a id="L73"></a><span class="ln">    73</span>	type uint uint
<a id="L74"></a><span class="ln">    74</span>	
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">// uintptr is an integer type that is large enough to hold the bit pattern of</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">// any pointer.</span>
<a id="L77"></a><span class="ln">    77</span>	type uintptr uintptr
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// byte is an alias for uint8 and is equivalent to uint8 in all ways. It is</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// used, by convention, to distinguish byte values from 8-bit unsigned</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// integer values.</span>
<a id="L82"></a><span class="ln">    82</span>	type byte byte
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">// rune is an alias for int and is equivalent to int in all ways. It is</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">// used, by convention, to distinguish character values from integer values.</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// In a future version of Go, it will change to an alias of int32.</span>
<a id="L87"></a><span class="ln">    87</span>	type rune rune
<a id="L88"></a><span class="ln">    88</span>	
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">// Type is here for the purposes of documentation only. It is a stand-in</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// for any Go type, but represents the same type for any given function</span>
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// invocation.</span>
<a id="L92"></a><span class="ln">    92</span>	type Type int
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// Type1 is here for the purposes of documentation only. It is a stand-in</span>
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">// for any Go type, but represents the same type for any given function</span>
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">// invocation.</span>
<a id="L97"></a><span class="ln">    97</span>	type Type1 int
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">// IntegerType is here for the purposes of documentation only. It is a stand-in</span>
<a id="L100"></a><span class="ln">   100</span>	<span class="comment">// for any integer type: int, uint, int8 etc.</span>
<a id="L101"></a><span class="ln">   101</span>	type IntegerType int
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>	<span class="comment">// FloatType is here for the purposes of documentation only. It is a stand-in</span>
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">// for either float type: float32 or float64.</span>
<a id="L105"></a><span class="ln">   105</span>	type FloatType float32
<a id="L106"></a><span class="ln">   106</span>	
<a id="L107"></a><span class="ln">   107</span>	<span class="comment">// ComplexType is here for the purposes of documentation only. It is a</span>
<a id="L108"></a><span class="ln">   108</span>	<span class="comment">// stand-in for either complex type: complex64 or complex128.</span>
<a id="L109"></a><span class="ln">   109</span>	type ComplexType complex64
<a id="L110"></a><span class="ln">   110</span>	
<a id="L111"></a><span class="ln">   111</span>	<span class="comment">// The append built-in function appends elements to the end of a slice. If</span>
<a id="L112"></a><span class="ln">   112</span>	<span class="comment">// it has sufficient capacity, the destination is resliced to accommodate the</span>
<a id="L113"></a><span class="ln">   113</span>	<span class="comment">// new elements. If it does not, a new underlying array will be allocated.</span>
<a id="L114"></a><span class="ln">   114</span>	<span class="comment">// Append returns the updated slice. It is therefore necessary to store the</span>
<a id="L115"></a><span class="ln">   115</span>	<span class="comment">// result of append, often in the variable holding the slice itself:</span>
<a id="L116"></a><span class="ln">   116</span>	<span class="comment">//	slice = append(slice, elem1, elem2)</span>
<a id="L117"></a><span class="ln">   117</span>	<span class="comment">//	slice = append(slice, anotherSlice...)</span>
<a id="L118"></a><span class="ln">   118</span>	func append(slice []Type, elems ...Type) []Type
<a id="L119"></a><span class="ln">   119</span>	
<a id="L120"></a><span class="ln">   120</span>	<span class="comment">// The copy built-in function copies elements from a source slice into a</span>
<a id="L121"></a><span class="ln">   121</span>	<span class="comment">// destination slice. (As a special case, it also will copy bytes from a</span>
<a id="L122"></a><span class="ln">   122</span>	<span class="comment">// string to a slice of bytes.) The source and destination may overlap. Copy</span>
<a id="L123"></a><span class="ln">   123</span>	<span class="comment">// returns the number of elements copied, which will be the minimum of</span>
<a id="L124"></a><span class="ln">   124</span>	<span class="comment">// len(src) and len(dst).</span>
<a id="L125"></a><span class="ln">   125</span>	func copy(dst, src []Type) int
<a id="L126"></a><span class="ln">   126</span>	
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// The delete built-in function deletes the element with the specified key</span>
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// (m[key]) from the map. If there is no such element, delete is a no-op.</span>
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// If m is nil, delete panics.</span>
<a id="L130"></a><span class="ln">   130</span>	func delete(m map[Type]Type1, key Type)
<a id="L131"></a><span class="ln">   131</span>	
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">// The len built-in function returns the length of v, according to its type:</span>
<a id="L133"></a><span class="ln">   133</span>	<span class="comment">//	Array: the number of elements in v.</span>
<a id="L134"></a><span class="ln">   134</span>	<span class="comment">//	Pointer to array: the number of elements in *v (even if v is nil).</span>
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">//	Slice, or map: the number of elements in v; if v is nil, len(v) is zero.</span>
<a id="L136"></a><span class="ln">   136</span>	<span class="comment">//	String: the number of bytes in v.</span>
<a id="L137"></a><span class="ln">   137</span>	<span class="comment">//	Channel: the number of elements queued (unread) in the channel buffer;</span>
<a id="L138"></a><span class="ln">   138</span>	<span class="comment">//	if v is nil, len(v) is zero.</span>
<a id="L139"></a><span class="ln">   139</span>	func len(v Type) int
<a id="L140"></a><span class="ln">   140</span>	
<a id="L141"></a><span class="ln">   141</span>	<span class="comment">// The cap built-in function returns the capacity of v, according to its type:</span>
<a id="L142"></a><span class="ln">   142</span>	<span class="comment">//	Array: the number of elements in v (same as len(v)).</span>
<a id="L143"></a><span class="ln">   143</span>	<span class="comment">//	Pointer to array: the number of elements in *v (same as len(v)).</span>
<a id="L144"></a><span class="ln">   144</span>	<span class="comment">//	Slice: the maximum length the slice can reach when resliced;</span>
<a id="L145"></a><span class="ln">   145</span>	<span class="comment">//	if v is nil, cap(v) is zero.</span>
<a id="L146"></a><span class="ln">   146</span>	<span class="comment">//	Channel: the channel buffer capacity, in units of elements;</span>
<a id="L147"></a><span class="ln">   147</span>	<span class="comment">//	if v is nil, cap(v) is zero.</span>
<a id="L148"></a><span class="ln">   148</span>	func cap(v Type) int
<a id="L149"></a><span class="ln">   149</span>	
<a id="L150"></a><span class="ln">   150</span>	<span class="comment">// The make built-in function allocates and initializes an object of type</span>
<a id="L151"></a><span class="ln">   151</span>	<span class="comment">// slice, map, or chan (only). Like new, the first argument is a type, not a</span>
<a id="L152"></a><span class="ln">   152</span>	<span class="comment">// value. Unlike new, make&#39;s return type is the same as the type of its</span>
<a id="L153"></a><span class="ln">   153</span>	<span class="comment">// argument, not a pointer to it. The specification of the result depends on</span>
<a id="L154"></a><span class="ln">   154</span>	<span class="comment">// the type:</span>
<a id="L155"></a><span class="ln">   155</span>	<span class="comment">//	Slice: The size specifies the length. The capacity of the slice is</span>
<a id="L156"></a><span class="ln">   156</span>	<span class="comment">//	equal to its length. A second integer argument may be provided to</span>
<a id="L157"></a><span class="ln">   157</span>	<span class="comment">//	specify a different capacity; it must be no smaller than the</span>
<a id="L158"></a><span class="ln">   158</span>	<span class="comment">//	length, so make([]int, 0, 10) allocates a slice of length 0 and</span>
<a id="L159"></a><span class="ln">   159</span>	<span class="comment">//	capacity 10.</span>
<a id="L160"></a><span class="ln">   160</span>	<span class="comment">//	Map: An initial allocation is made according to the size but the</span>
<a id="L161"></a><span class="ln">   161</span>	<span class="comment">//	resulting map has length 0. The size may be omitted, in which case</span>
<a id="L162"></a><span class="ln">   162</span>	<span class="comment">//	a small starting size is allocated.</span>
<a id="L163"></a><span class="ln">   163</span>	<span class="comment">//	Channel: The channel&#39;s buffer is initialized with the specified</span>
<a id="L164"></a><span class="ln">   164</span>	<span class="comment">//	buffer capacity. If zero, or the size is omitted, the channel is</span>
<a id="L165"></a><span class="ln">   165</span>	<span class="comment">//	unbuffered.</span>
<a id="L166"></a><span class="ln">   166</span>	func make(Type, size IntegerType) Type
<a id="L167"></a><span class="ln">   167</span>	
<a id="L168"></a><span class="ln">   168</span>	<span class="comment">// The new built-in function allocates memory. The first argument is a type,</span>
<a id="L169"></a><span class="ln">   169</span>	<span class="comment">// not a value, and the value returned is a pointer to a newly</span>
<a id="L170"></a><span class="ln">   170</span>	<span class="comment">// allocated zero value of that type.</span>
<a id="L171"></a><span class="ln">   171</span>	func new(Type) *Type
<a id="L172"></a><span class="ln">   172</span>	
<a id="L173"></a><span class="ln">   173</span>	<span class="comment">// The complex built-in function constructs a complex value from two</span>
<a id="L174"></a><span class="ln">   174</span>	<span class="comment">// floating-point values. The real and imaginary parts must be of the same</span>
<a id="L175"></a><span class="ln">   175</span>	<span class="comment">// size, either float32 or float64 (or assignable to them), and the return</span>
<a id="L176"></a><span class="ln">   176</span>	<span class="comment">// value will be the corresponding complex type (complex64 for float32,</span>
<a id="L177"></a><span class="ln">   177</span>	<span class="comment">// complex128 for float64).</span>
<a id="L178"></a><span class="ln">   178</span>	func complex(r, i FloatType) ComplexType
<a id="L179"></a><span class="ln">   179</span>	
<a id="L180"></a><span class="ln">   180</span>	<span class="comment">// The real built-in function returns the real part of the complex number c.</span>
<a id="L181"></a><span class="ln">   181</span>	<span class="comment">// The return value will be floating point type corresponding to the type of c.</span>
<a id="L182"></a><span class="ln">   182</span>	func real(c ComplexType) FloatType
<a id="L183"></a><span class="ln">   183</span>	
<a id="L184"></a><span class="ln">   184</span>	<span class="comment">// The imag built-in function returns the imaginary part of the complex</span>
<a id="L185"></a><span class="ln">   185</span>	<span class="comment">// number c. The return value will be floating point type corresponding to</span>
<a id="L186"></a><span class="ln">   186</span>	<span class="comment">// the type of c.</span>
<a id="L187"></a><span class="ln">   187</span>	func imag(c ComplexType) FloatType
<a id="L188"></a><span class="ln">   188</span>	
<a id="L189"></a><span class="ln">   189</span>	<span class="comment">// The close built-in function closes a channel, which must be either</span>
<a id="L190"></a><span class="ln">   190</span>	<span class="comment">// bidirectional or send-only. It should be executed only by the sender,</span>
<a id="L191"></a><span class="ln">   191</span>	<span class="comment">// never the receiver, and has the effect of shutting down the channel after</span>
<a id="L192"></a><span class="ln">   192</span>	<span class="comment">// the last sent value is received. After the last value has been received</span>
<a id="L193"></a><span class="ln">   193</span>	<span class="comment">// from a closed channel c, any receive from c will succeed without</span>
<a id="L194"></a><span class="ln">   194</span>	<span class="comment">// blocking, returning the zero value for the channel element. The form</span>
<a id="L195"></a><span class="ln">   195</span>	<span class="comment">//	x, ok := &lt;-c</span>
<a id="L196"></a><span class="ln">   196</span>	<span class="comment">// will also set ok to false for a closed channel.</span>
<a id="L197"></a><span class="ln">   197</span>	func close(c chan&lt;- Type)
<a id="L198"></a><span class="ln">   198</span>	
<a id="L199"></a><span class="ln">   199</span>	<span class="comment">// The panic built-in function stops normal execution of the current</span>
<a id="L200"></a><span class="ln">   200</span>	<span class="comment">// goroutine. When a function F calls panic, normal execution of F stops</span>
<a id="L201"></a><span class="ln">   201</span>	<span class="comment">// immediately. Any functions whose execution was deferred by F are run in</span>
<a id="L202"></a><span class="ln">   202</span>	<span class="comment">// the usual way, and then F returns to its caller. To the caller G, the</span>
<a id="L203"></a><span class="ln">   203</span>	<span class="comment">// invocation of F then behaves like a call to panic, terminating G&#39;s</span>
<a id="L204"></a><span class="ln">   204</span>	<span class="comment">// execution and running any deferred functions. This continues until all</span>
<a id="L205"></a><span class="ln">   205</span>	<span class="comment">// functions in the executing goroutine have stopped, in reverse order. At</span>
<a id="L206"></a><span class="ln">   206</span>	<span class="comment">// that point, the program is terminated and the error condition is reported,</span>
<a id="L207"></a><span class="ln">   207</span>	<span class="comment">// including the value of the argument to panic. This termination sequence</span>
<a id="L208"></a><span class="ln">   208</span>	<span class="comment">// is called panicking and can be controlled by the built-in function</span>
<a id="L209"></a><span class="ln">   209</span>	<span class="comment">// recover.</span>
<a id="L210"></a><span class="ln">   210</span>	func panic(v interface{})
<a id="L211"></a><span class="ln">   211</span>	
<a id="L212"></a><span class="ln">   212</span>	<span class="comment">// The recover built-in function allows a program to manage behavior of a</span>
<a id="L213"></a><span class="ln">   213</span>	<span class="comment">// panicking goroutine. Executing a call to recover inside a deferred</span>
<a id="L214"></a><span class="ln">   214</span>	<span class="comment">// function (but not any function called by it) stops the panicking sequence</span>
<a id="L215"></a><span class="ln">   215</span>	<span class="comment">// by restoring normal execution and retrieves the error value passed to the</span>
<a id="L216"></a><span class="ln">   216</span>	<span class="comment">// call of panic. If recover is called outside the deferred function it will</span>
<a id="L217"></a><span class="ln">   217</span>	<span class="comment">// not stop a panicking sequence. In this case, or when the goroutine is not</span>
<a id="L218"></a><span class="ln">   218</span>	<span class="comment">// panicking, or if the argument supplied to panic was nil, recover returns</span>
<a id="L219"></a><span class="ln">   219</span>	<span class="comment">// nil. Thus the return value from recover reports whether the goroutine is</span>
<a id="L220"></a><span class="ln">   220</span>	<span class="comment">// panicking.</span>
<a id="L221"></a><span class="ln">   221</span>	func recover() interface{}
<a id="L222"></a><span class="ln">   222</span>	
<a id="L223"></a><span class="ln">   223</span>	<span class="comment">// The error built-in interface type is the conventional interface for</span>
<a id="L224"></a><span class="ln">   224</span>	<span class="comment">// representing an error condition, with the nil value representing no error.</span>
<a id="L225"></a><span class="ln">   225</span>	type error interface {
<a id="L226"></a><span class="ln">   226</span>		Error() string
<a id="L227"></a><span class="ln">   227</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

