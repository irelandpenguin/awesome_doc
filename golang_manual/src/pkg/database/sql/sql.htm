<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/database/sql/sql.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/database/sql/sql.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package sql provides a generic interface around SQL (or SQL-like)</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// databases.</span>
<a id="L7"></a><span class="ln">     7</span>	package sql
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;database/sql/driver&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;errors&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;fmt&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;io&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;sync&#34;
<a id="L15"></a><span class="ln">    15</span>	)
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	var drivers = make(map[string]driver.Driver)
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// Register makes a database driver available by the provided name.</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// If Register is called twice with the same name or if driver is nil,</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// it panics.</span>
<a id="L22"></a><span class="ln">    22</span>	func Register(name string, driver driver.Driver) {
<a id="L23"></a><span class="ln">    23</span>		if driver == nil {
<a id="L24"></a><span class="ln">    24</span>			panic(&#34;sql: Register driver is nil&#34;)
<a id="L25"></a><span class="ln">    25</span>		}
<a id="L26"></a><span class="ln">    26</span>		if _, dup := drivers[name]; dup {
<a id="L27"></a><span class="ln">    27</span>			panic(&#34;sql: Register called twice for driver &#34; + name)
<a id="L28"></a><span class="ln">    28</span>		}
<a id="L29"></a><span class="ln">    29</span>		drivers[name] = driver
<a id="L30"></a><span class="ln">    30</span>	}
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// RawBytes is a byte slice that holds a reference to memory owned by</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// the database itself. After a Scan into a RawBytes, the slice is only</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// valid until the next call to Next, Scan, or Close.</span>
<a id="L35"></a><span class="ln">    35</span>	type RawBytes []byte
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// NullString represents a string that may be null.</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// NullString implements the Scanner interface so</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// it can be used as a scan destination:</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">//</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">//  var s NullString</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">//  err := db.QueryRow(&#34;SELECT name FROM foo WHERE id=?&#34;, id).Scan(&amp;s)</span>
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">//  ...</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">//  if s.Valid {</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">//     // use s.String</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">//  } else {</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">//     // NULL value</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">//  }</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">//</span>
<a id="L50"></a><span class="ln">    50</span>	type NullString struct {
<a id="L51"></a><span class="ln">    51</span>		String string
<a id="L52"></a><span class="ln">    52</span>		Valid  bool <span class="comment">// Valid is true if String is not NULL</span>
<a id="L53"></a><span class="ln">    53</span>	}
<a id="L54"></a><span class="ln">    54</span>	
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// Scan implements the Scanner interface.</span>
<a id="L56"></a><span class="ln">    56</span>	func (ns *NullString) Scan(value interface{}) error {
<a id="L57"></a><span class="ln">    57</span>		if value == nil {
<a id="L58"></a><span class="ln">    58</span>			ns.String, ns.Valid = &#34;&#34;, false
<a id="L59"></a><span class="ln">    59</span>			return nil
<a id="L60"></a><span class="ln">    60</span>		}
<a id="L61"></a><span class="ln">    61</span>		ns.Valid = true
<a id="L62"></a><span class="ln">    62</span>		return convertAssign(&amp;ns.String, value)
<a id="L63"></a><span class="ln">    63</span>	}
<a id="L64"></a><span class="ln">    64</span>	
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// Value implements the driver Valuer interface.</span>
<a id="L66"></a><span class="ln">    66</span>	func (ns NullString) Value() (driver.Value, error) {
<a id="L67"></a><span class="ln">    67</span>		if !ns.Valid {
<a id="L68"></a><span class="ln">    68</span>			return nil, nil
<a id="L69"></a><span class="ln">    69</span>		}
<a id="L70"></a><span class="ln">    70</span>		return ns.String, nil
<a id="L71"></a><span class="ln">    71</span>	}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// NullInt64 represents an int64 that may be null.</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">// NullInt64 implements the Scanner interface so</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">// it can be used as a scan destination, similar to NullString.</span>
<a id="L76"></a><span class="ln">    76</span>	type NullInt64 struct {
<a id="L77"></a><span class="ln">    77</span>		Int64 int64
<a id="L78"></a><span class="ln">    78</span>		Valid bool <span class="comment">// Valid is true if Int64 is not NULL</span>
<a id="L79"></a><span class="ln">    79</span>	}
<a id="L80"></a><span class="ln">    80</span>	
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// Scan implements the Scanner interface.</span>
<a id="L82"></a><span class="ln">    82</span>	func (n *NullInt64) Scan(value interface{}) error {
<a id="L83"></a><span class="ln">    83</span>		if value == nil {
<a id="L84"></a><span class="ln">    84</span>			n.Int64, n.Valid = 0, false
<a id="L85"></a><span class="ln">    85</span>			return nil
<a id="L86"></a><span class="ln">    86</span>		}
<a id="L87"></a><span class="ln">    87</span>		n.Valid = true
<a id="L88"></a><span class="ln">    88</span>		return convertAssign(&amp;n.Int64, value)
<a id="L89"></a><span class="ln">    89</span>	}
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// Value implements the driver Valuer interface.</span>
<a id="L92"></a><span class="ln">    92</span>	func (n NullInt64) Value() (driver.Value, error) {
<a id="L93"></a><span class="ln">    93</span>		if !n.Valid {
<a id="L94"></a><span class="ln">    94</span>			return nil, nil
<a id="L95"></a><span class="ln">    95</span>		}
<a id="L96"></a><span class="ln">    96</span>		return n.Int64, nil
<a id="L97"></a><span class="ln">    97</span>	}
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">// NullFloat64 represents a float64 that may be null.</span>
<a id="L100"></a><span class="ln">   100</span>	<span class="comment">// NullFloat64 implements the Scanner interface so</span>
<a id="L101"></a><span class="ln">   101</span>	<span class="comment">// it can be used as a scan destination, similar to NullString.</span>
<a id="L102"></a><span class="ln">   102</span>	type NullFloat64 struct {
<a id="L103"></a><span class="ln">   103</span>		Float64 float64
<a id="L104"></a><span class="ln">   104</span>		Valid   bool <span class="comment">// Valid is true if Float64 is not NULL</span>
<a id="L105"></a><span class="ln">   105</span>	}
<a id="L106"></a><span class="ln">   106</span>	
<a id="L107"></a><span class="ln">   107</span>	<span class="comment">// Scan implements the Scanner interface.</span>
<a id="L108"></a><span class="ln">   108</span>	func (n *NullFloat64) Scan(value interface{}) error {
<a id="L109"></a><span class="ln">   109</span>		if value == nil {
<a id="L110"></a><span class="ln">   110</span>			n.Float64, n.Valid = 0, false
<a id="L111"></a><span class="ln">   111</span>			return nil
<a id="L112"></a><span class="ln">   112</span>		}
<a id="L113"></a><span class="ln">   113</span>		n.Valid = true
<a id="L114"></a><span class="ln">   114</span>		return convertAssign(&amp;n.Float64, value)
<a id="L115"></a><span class="ln">   115</span>	}
<a id="L116"></a><span class="ln">   116</span>	
<a id="L117"></a><span class="ln">   117</span>	<span class="comment">// Value implements the driver Valuer interface.</span>
<a id="L118"></a><span class="ln">   118</span>	func (n NullFloat64) Value() (driver.Value, error) {
<a id="L119"></a><span class="ln">   119</span>		if !n.Valid {
<a id="L120"></a><span class="ln">   120</span>			return nil, nil
<a id="L121"></a><span class="ln">   121</span>		}
<a id="L122"></a><span class="ln">   122</span>		return n.Float64, nil
<a id="L123"></a><span class="ln">   123</span>	}
<a id="L124"></a><span class="ln">   124</span>	
<a id="L125"></a><span class="ln">   125</span>	<span class="comment">// NullBool represents a bool that may be null.</span>
<a id="L126"></a><span class="ln">   126</span>	<span class="comment">// NullBool implements the Scanner interface so</span>
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// it can be used as a scan destination, similar to NullString.</span>
<a id="L128"></a><span class="ln">   128</span>	type NullBool struct {
<a id="L129"></a><span class="ln">   129</span>		Bool  bool
<a id="L130"></a><span class="ln">   130</span>		Valid bool <span class="comment">// Valid is true if Bool is not NULL</span>
<a id="L131"></a><span class="ln">   131</span>	}
<a id="L132"></a><span class="ln">   132</span>	
<a id="L133"></a><span class="ln">   133</span>	<span class="comment">// Scan implements the Scanner interface.</span>
<a id="L134"></a><span class="ln">   134</span>	func (n *NullBool) Scan(value interface{}) error {
<a id="L135"></a><span class="ln">   135</span>		if value == nil {
<a id="L136"></a><span class="ln">   136</span>			n.Bool, n.Valid = false, false
<a id="L137"></a><span class="ln">   137</span>			return nil
<a id="L138"></a><span class="ln">   138</span>		}
<a id="L139"></a><span class="ln">   139</span>		n.Valid = true
<a id="L140"></a><span class="ln">   140</span>		return convertAssign(&amp;n.Bool, value)
<a id="L141"></a><span class="ln">   141</span>	}
<a id="L142"></a><span class="ln">   142</span>	
<a id="L143"></a><span class="ln">   143</span>	<span class="comment">// Value implements the driver Valuer interface.</span>
<a id="L144"></a><span class="ln">   144</span>	func (n NullBool) Value() (driver.Value, error) {
<a id="L145"></a><span class="ln">   145</span>		if !n.Valid {
<a id="L146"></a><span class="ln">   146</span>			return nil, nil
<a id="L147"></a><span class="ln">   147</span>		}
<a id="L148"></a><span class="ln">   148</span>		return n.Bool, nil
<a id="L149"></a><span class="ln">   149</span>	}
<a id="L150"></a><span class="ln">   150</span>	
<a id="L151"></a><span class="ln">   151</span>	<span class="comment">// Scanner is an interface used by Scan.</span>
<a id="L152"></a><span class="ln">   152</span>	type Scanner interface {
<a id="L153"></a><span class="ln">   153</span>		<span class="comment">// Scan assigns a value from a database driver.</span>
<a id="L154"></a><span class="ln">   154</span>		<span class="comment">//</span>
<a id="L155"></a><span class="ln">   155</span>		<span class="comment">// The src value will be of one of the following restricted</span>
<a id="L156"></a><span class="ln">   156</span>		<span class="comment">// set of types:</span>
<a id="L157"></a><span class="ln">   157</span>		<span class="comment">//</span>
<a id="L158"></a><span class="ln">   158</span>		<span class="comment">//    int64</span>
<a id="L159"></a><span class="ln">   159</span>		<span class="comment">//    float64</span>
<a id="L160"></a><span class="ln">   160</span>		<span class="comment">//    bool</span>
<a id="L161"></a><span class="ln">   161</span>		<span class="comment">//    []byte</span>
<a id="L162"></a><span class="ln">   162</span>		<span class="comment">//    string</span>
<a id="L163"></a><span class="ln">   163</span>		<span class="comment">//    time.Time</span>
<a id="L164"></a><span class="ln">   164</span>		<span class="comment">//    nil - for NULL values</span>
<a id="L165"></a><span class="ln">   165</span>		<span class="comment">//</span>
<a id="L166"></a><span class="ln">   166</span>		<span class="comment">// An error should be returned if the value can not be stored</span>
<a id="L167"></a><span class="ln">   167</span>		<span class="comment">// without loss of information.</span>
<a id="L168"></a><span class="ln">   168</span>		Scan(src interface{}) error
<a id="L169"></a><span class="ln">   169</span>	}
<a id="L170"></a><span class="ln">   170</span>	
<a id="L171"></a><span class="ln">   171</span>	<span class="comment">// ErrNoRows is returned by Scan when QueryRow doesn&#39;t return a</span>
<a id="L172"></a><span class="ln">   172</span>	<span class="comment">// row. In such a case, QueryRow returns a placeholder *Row value that</span>
<a id="L173"></a><span class="ln">   173</span>	<span class="comment">// defers this error until a Scan.</span>
<a id="L174"></a><span class="ln">   174</span>	var ErrNoRows = errors.New(&#34;sql: no rows in result set&#34;)
<a id="L175"></a><span class="ln">   175</span>	
<a id="L176"></a><span class="ln">   176</span>	<span class="comment">// DB is a database handle. It&#39;s safe for concurrent use by multiple</span>
<a id="L177"></a><span class="ln">   177</span>	<span class="comment">// goroutines.</span>
<a id="L178"></a><span class="ln">   178</span>	<span class="comment">//</span>
<a id="L179"></a><span class="ln">   179</span>	<span class="comment">// If the underlying database driver has the concept of a connection</span>
<a id="L180"></a><span class="ln">   180</span>	<span class="comment">// and per-connection session state, the sql package manages creating</span>
<a id="L181"></a><span class="ln">   181</span>	<span class="comment">// and freeing connections automatically, including maintaining a free</span>
<a id="L182"></a><span class="ln">   182</span>	<span class="comment">// pool of idle connections. If observing session state is required,</span>
<a id="L183"></a><span class="ln">   183</span>	<span class="comment">// either do not share a *DB between multiple concurrent goroutines or</span>
<a id="L184"></a><span class="ln">   184</span>	<span class="comment">// create and observe all state only within a transaction. Once</span>
<a id="L185"></a><span class="ln">   185</span>	<span class="comment">// DB.Open is called, the returned Tx is bound to a single isolated</span>
<a id="L186"></a><span class="ln">   186</span>	<span class="comment">// connection. Once Tx.Commit or Tx.Rollback is called, that</span>
<a id="L187"></a><span class="ln">   187</span>	<span class="comment">// connection is returned to DB&#39;s idle connection pool.</span>
<a id="L188"></a><span class="ln">   188</span>	type DB struct {
<a id="L189"></a><span class="ln">   189</span>		driver driver.Driver
<a id="L190"></a><span class="ln">   190</span>		dsn    string
<a id="L191"></a><span class="ln">   191</span>	
<a id="L192"></a><span class="ln">   192</span>		mu       sync.Mutex <span class="comment">// protects freeConn and closed</span>
<a id="L193"></a><span class="ln">   193</span>		freeConn []driver.Conn
<a id="L194"></a><span class="ln">   194</span>		closed   bool
<a id="L195"></a><span class="ln">   195</span>	}
<a id="L196"></a><span class="ln">   196</span>	
<a id="L197"></a><span class="ln">   197</span>	<span class="comment">// Open opens a database specified by its database driver name and a</span>
<a id="L198"></a><span class="ln">   198</span>	<span class="comment">// driver-specific data source name, usually consisting of at least a</span>
<a id="L199"></a><span class="ln">   199</span>	<span class="comment">// database name and connection information.</span>
<a id="L200"></a><span class="ln">   200</span>	<span class="comment">//</span>
<a id="L201"></a><span class="ln">   201</span>	<span class="comment">// Most users will open a database via a driver-specific connection</span>
<a id="L202"></a><span class="ln">   202</span>	<span class="comment">// helper function that returns a *DB.</span>
<a id="L203"></a><span class="ln">   203</span>	func Open(driverName, dataSourceName string) (*DB, error) {
<a id="L204"></a><span class="ln">   204</span>		driver, ok := drivers[driverName]
<a id="L205"></a><span class="ln">   205</span>		if !ok {
<a id="L206"></a><span class="ln">   206</span>			return nil, fmt.Errorf(&#34;sql: unknown driver %q (forgotten import?)&#34;, driverName)
<a id="L207"></a><span class="ln">   207</span>		}
<a id="L208"></a><span class="ln">   208</span>		return &amp;DB{driver: driver, dsn: dataSourceName}, nil
<a id="L209"></a><span class="ln">   209</span>	}
<a id="L210"></a><span class="ln">   210</span>	
<a id="L211"></a><span class="ln">   211</span>	<span class="comment">// Close closes the database, releasing any open resources.</span>
<a id="L212"></a><span class="ln">   212</span>	func (db *DB) Close() error {
<a id="L213"></a><span class="ln">   213</span>		db.mu.Lock()
<a id="L214"></a><span class="ln">   214</span>		defer db.mu.Unlock()
<a id="L215"></a><span class="ln">   215</span>		var err error
<a id="L216"></a><span class="ln">   216</span>		for _, c := range db.freeConn {
<a id="L217"></a><span class="ln">   217</span>			err1 := c.Close()
<a id="L218"></a><span class="ln">   218</span>			if err1 != nil {
<a id="L219"></a><span class="ln">   219</span>				err = err1
<a id="L220"></a><span class="ln">   220</span>			}
<a id="L221"></a><span class="ln">   221</span>		}
<a id="L222"></a><span class="ln">   222</span>		db.freeConn = nil
<a id="L223"></a><span class="ln">   223</span>		db.closed = true
<a id="L224"></a><span class="ln">   224</span>		return err
<a id="L225"></a><span class="ln">   225</span>	}
<a id="L226"></a><span class="ln">   226</span>	
<a id="L227"></a><span class="ln">   227</span>	func (db *DB) maxIdleConns() int {
<a id="L228"></a><span class="ln">   228</span>		const defaultMaxIdleConns = 2
<a id="L229"></a><span class="ln">   229</span>		<span class="comment">// TODO(bradfitz): ask driver, if supported, for its default preference</span>
<a id="L230"></a><span class="ln">   230</span>		<span class="comment">// TODO(bradfitz): let users override?</span>
<a id="L231"></a><span class="ln">   231</span>		return defaultMaxIdleConns
<a id="L232"></a><span class="ln">   232</span>	}
<a id="L233"></a><span class="ln">   233</span>	
<a id="L234"></a><span class="ln">   234</span>	<span class="comment">// conn returns a newly-opened or cached driver.Conn</span>
<a id="L235"></a><span class="ln">   235</span>	func (db *DB) conn() (driver.Conn, error) {
<a id="L236"></a><span class="ln">   236</span>		db.mu.Lock()
<a id="L237"></a><span class="ln">   237</span>		if db.closed {
<a id="L238"></a><span class="ln">   238</span>			db.mu.Unlock()
<a id="L239"></a><span class="ln">   239</span>			return nil, errors.New(&#34;sql: database is closed&#34;)
<a id="L240"></a><span class="ln">   240</span>		}
<a id="L241"></a><span class="ln">   241</span>		if n := len(db.freeConn); n &gt; 0 {
<a id="L242"></a><span class="ln">   242</span>			conn := db.freeConn[n-1]
<a id="L243"></a><span class="ln">   243</span>			db.freeConn = db.freeConn[:n-1]
<a id="L244"></a><span class="ln">   244</span>			db.mu.Unlock()
<a id="L245"></a><span class="ln">   245</span>			return conn, nil
<a id="L246"></a><span class="ln">   246</span>		}
<a id="L247"></a><span class="ln">   247</span>		db.mu.Unlock()
<a id="L248"></a><span class="ln">   248</span>		return db.driver.Open(db.dsn)
<a id="L249"></a><span class="ln">   249</span>	}
<a id="L250"></a><span class="ln">   250</span>	
<a id="L251"></a><span class="ln">   251</span>	func (db *DB) connIfFree(wanted driver.Conn) (conn driver.Conn, ok bool) {
<a id="L252"></a><span class="ln">   252</span>		db.mu.Lock()
<a id="L253"></a><span class="ln">   253</span>		defer db.mu.Unlock()
<a id="L254"></a><span class="ln">   254</span>		for i, conn := range db.freeConn {
<a id="L255"></a><span class="ln">   255</span>			if conn != wanted {
<a id="L256"></a><span class="ln">   256</span>				continue
<a id="L257"></a><span class="ln">   257</span>			}
<a id="L258"></a><span class="ln">   258</span>			db.freeConn[i] = db.freeConn[len(db.freeConn)-1]
<a id="L259"></a><span class="ln">   259</span>			db.freeConn = db.freeConn[:len(db.freeConn)-1]
<a id="L260"></a><span class="ln">   260</span>			return wanted, true
<a id="L261"></a><span class="ln">   261</span>		}
<a id="L262"></a><span class="ln">   262</span>		return nil, false
<a id="L263"></a><span class="ln">   263</span>	}
<a id="L264"></a><span class="ln">   264</span>	
<a id="L265"></a><span class="ln">   265</span>	<span class="comment">// putConnHook is a hook for testing.</span>
<a id="L266"></a><span class="ln">   266</span>	var putConnHook func(*DB, driver.Conn)
<a id="L267"></a><span class="ln">   267</span>	
<a id="L268"></a><span class="ln">   268</span>	<span class="comment">// putConn adds a connection to the db&#39;s free pool.</span>
<a id="L269"></a><span class="ln">   269</span>	<span class="comment">// err is optionally the last error that occured on this connection.</span>
<a id="L270"></a><span class="ln">   270</span>	func (db *DB) putConn(c driver.Conn, err error) {
<a id="L271"></a><span class="ln">   271</span>		if err == driver.ErrBadConn {
<a id="L272"></a><span class="ln">   272</span>			<span class="comment">// Don&#39;t reuse bad connections.</span>
<a id="L273"></a><span class="ln">   273</span>			return
<a id="L274"></a><span class="ln">   274</span>		}
<a id="L275"></a><span class="ln">   275</span>		db.mu.Lock()
<a id="L276"></a><span class="ln">   276</span>		if putConnHook != nil {
<a id="L277"></a><span class="ln">   277</span>			putConnHook(db, c)
<a id="L278"></a><span class="ln">   278</span>		}
<a id="L279"></a><span class="ln">   279</span>		if n := len(db.freeConn); !db.closed &amp;&amp; n &lt; db.maxIdleConns() {
<a id="L280"></a><span class="ln">   280</span>			db.freeConn = append(db.freeConn, c)
<a id="L281"></a><span class="ln">   281</span>			db.mu.Unlock()
<a id="L282"></a><span class="ln">   282</span>			return
<a id="L283"></a><span class="ln">   283</span>		}
<a id="L284"></a><span class="ln">   284</span>		<span class="comment">// TODO: check to see if we need this Conn for any prepared</span>
<a id="L285"></a><span class="ln">   285</span>		<span class="comment">// statements which are still active?</span>
<a id="L286"></a><span class="ln">   286</span>		db.mu.Unlock()
<a id="L287"></a><span class="ln">   287</span>		c.Close()
<a id="L288"></a><span class="ln">   288</span>	}
<a id="L289"></a><span class="ln">   289</span>	
<a id="L290"></a><span class="ln">   290</span>	<span class="comment">// Prepare creates a prepared statement for later execution.</span>
<a id="L291"></a><span class="ln">   291</span>	func (db *DB) Prepare(query string) (*Stmt, error) {
<a id="L292"></a><span class="ln">   292</span>		var stmt *Stmt
<a id="L293"></a><span class="ln">   293</span>		var err error
<a id="L294"></a><span class="ln">   294</span>		for i := 0; i &lt; 10; i++ {
<a id="L295"></a><span class="ln">   295</span>			stmt, err = db.prepare(query)
<a id="L296"></a><span class="ln">   296</span>			if err != driver.ErrBadConn {
<a id="L297"></a><span class="ln">   297</span>				break
<a id="L298"></a><span class="ln">   298</span>			}
<a id="L299"></a><span class="ln">   299</span>		}
<a id="L300"></a><span class="ln">   300</span>		return stmt, err
<a id="L301"></a><span class="ln">   301</span>	}
<a id="L302"></a><span class="ln">   302</span>	
<a id="L303"></a><span class="ln">   303</span>	func (db *DB) prepare(query string) (stmt *Stmt, err error) {
<a id="L304"></a><span class="ln">   304</span>		<span class="comment">// TODO: check if db.driver supports an optional</span>
<a id="L305"></a><span class="ln">   305</span>		<span class="comment">// driver.Preparer interface and call that instead, if so,</span>
<a id="L306"></a><span class="ln">   306</span>		<span class="comment">// otherwise we make a prepared statement that&#39;s bound</span>
<a id="L307"></a><span class="ln">   307</span>		<span class="comment">// to a connection, and to execute this prepared statement</span>
<a id="L308"></a><span class="ln">   308</span>		<span class="comment">// we either need to use this connection (if it&#39;s free), else</span>
<a id="L309"></a><span class="ln">   309</span>		<span class="comment">// get a new connection + re-prepare + execute on that one.</span>
<a id="L310"></a><span class="ln">   310</span>		ci, err := db.conn()
<a id="L311"></a><span class="ln">   311</span>		if err != nil {
<a id="L312"></a><span class="ln">   312</span>			return nil, err
<a id="L313"></a><span class="ln">   313</span>		}
<a id="L314"></a><span class="ln">   314</span>		defer db.putConn(ci, err)
<a id="L315"></a><span class="ln">   315</span>		si, err := ci.Prepare(query)
<a id="L316"></a><span class="ln">   316</span>		if err != nil {
<a id="L317"></a><span class="ln">   317</span>			return nil, err
<a id="L318"></a><span class="ln">   318</span>		}
<a id="L319"></a><span class="ln">   319</span>		stmt = &amp;Stmt{
<a id="L320"></a><span class="ln">   320</span>			db:    db,
<a id="L321"></a><span class="ln">   321</span>			query: query,
<a id="L322"></a><span class="ln">   322</span>			css:   []connStmt{{ci, si}},
<a id="L323"></a><span class="ln">   323</span>		}
<a id="L324"></a><span class="ln">   324</span>		return stmt, nil
<a id="L325"></a><span class="ln">   325</span>	}
<a id="L326"></a><span class="ln">   326</span>	
<a id="L327"></a><span class="ln">   327</span>	<span class="comment">// Exec executes a query without returning any rows.</span>
<a id="L328"></a><span class="ln">   328</span>	func (db *DB) Exec(query string, args ...interface{}) (Result, error) {
<a id="L329"></a><span class="ln">   329</span>		sargs, err := subsetTypeArgs(args)
<a id="L330"></a><span class="ln">   330</span>		if err != nil {
<a id="L331"></a><span class="ln">   331</span>			return nil, err
<a id="L332"></a><span class="ln">   332</span>		}
<a id="L333"></a><span class="ln">   333</span>		var res Result
<a id="L334"></a><span class="ln">   334</span>		for i := 0; i &lt; 10; i++ {
<a id="L335"></a><span class="ln">   335</span>			res, err = db.exec(query, sargs)
<a id="L336"></a><span class="ln">   336</span>			if err != driver.ErrBadConn {
<a id="L337"></a><span class="ln">   337</span>				break
<a id="L338"></a><span class="ln">   338</span>			}
<a id="L339"></a><span class="ln">   339</span>		}
<a id="L340"></a><span class="ln">   340</span>		return res, err
<a id="L341"></a><span class="ln">   341</span>	}
<a id="L342"></a><span class="ln">   342</span>	
<a id="L343"></a><span class="ln">   343</span>	func (db *DB) exec(query string, sargs []driver.Value) (res Result, err error) {
<a id="L344"></a><span class="ln">   344</span>		ci, err := db.conn()
<a id="L345"></a><span class="ln">   345</span>		if err != nil {
<a id="L346"></a><span class="ln">   346</span>			return nil, err
<a id="L347"></a><span class="ln">   347</span>		}
<a id="L348"></a><span class="ln">   348</span>		defer db.putConn(ci, err)
<a id="L349"></a><span class="ln">   349</span>	
<a id="L350"></a><span class="ln">   350</span>		if execer, ok := ci.(driver.Execer); ok {
<a id="L351"></a><span class="ln">   351</span>			resi, err := execer.Exec(query, sargs)
<a id="L352"></a><span class="ln">   352</span>			if err != driver.ErrSkip {
<a id="L353"></a><span class="ln">   353</span>				if err != nil {
<a id="L354"></a><span class="ln">   354</span>					return nil, err
<a id="L355"></a><span class="ln">   355</span>				}
<a id="L356"></a><span class="ln">   356</span>				return result{resi}, nil
<a id="L357"></a><span class="ln">   357</span>			}
<a id="L358"></a><span class="ln">   358</span>		}
<a id="L359"></a><span class="ln">   359</span>	
<a id="L360"></a><span class="ln">   360</span>		sti, err := ci.Prepare(query)
<a id="L361"></a><span class="ln">   361</span>		if err != nil {
<a id="L362"></a><span class="ln">   362</span>			return nil, err
<a id="L363"></a><span class="ln">   363</span>		}
<a id="L364"></a><span class="ln">   364</span>		defer sti.Close()
<a id="L365"></a><span class="ln">   365</span>	
<a id="L366"></a><span class="ln">   366</span>		resi, err := sti.Exec(sargs)
<a id="L367"></a><span class="ln">   367</span>		if err != nil {
<a id="L368"></a><span class="ln">   368</span>			return nil, err
<a id="L369"></a><span class="ln">   369</span>		}
<a id="L370"></a><span class="ln">   370</span>		return result{resi}, nil
<a id="L371"></a><span class="ln">   371</span>	}
<a id="L372"></a><span class="ln">   372</span>	
<a id="L373"></a><span class="ln">   373</span>	<span class="comment">// Query executes a query that returns rows, typically a SELECT.</span>
<a id="L374"></a><span class="ln">   374</span>	func (db *DB) Query(query string, args ...interface{}) (*Rows, error) {
<a id="L375"></a><span class="ln">   375</span>		stmt, err := db.Prepare(query)
<a id="L376"></a><span class="ln">   376</span>		if err != nil {
<a id="L377"></a><span class="ln">   377</span>			return nil, err
<a id="L378"></a><span class="ln">   378</span>		}
<a id="L379"></a><span class="ln">   379</span>		rows, err := stmt.Query(args...)
<a id="L380"></a><span class="ln">   380</span>		if err != nil {
<a id="L381"></a><span class="ln">   381</span>			stmt.Close()
<a id="L382"></a><span class="ln">   382</span>			return nil, err
<a id="L383"></a><span class="ln">   383</span>		}
<a id="L384"></a><span class="ln">   384</span>		rows.closeStmt = stmt
<a id="L385"></a><span class="ln">   385</span>		return rows, nil
<a id="L386"></a><span class="ln">   386</span>	}
<a id="L387"></a><span class="ln">   387</span>	
<a id="L388"></a><span class="ln">   388</span>	<span class="comment">// QueryRow executes a query that is expected to return at most one row.</span>
<a id="L389"></a><span class="ln">   389</span>	<span class="comment">// QueryRow always return a non-nil value. Errors are deferred until</span>
<a id="L390"></a><span class="ln">   390</span>	<span class="comment">// Row&#39;s Scan method is called.</span>
<a id="L391"></a><span class="ln">   391</span>	func (db *DB) QueryRow(query string, args ...interface{}) *Row {
<a id="L392"></a><span class="ln">   392</span>		rows, err := db.Query(query, args...)
<a id="L393"></a><span class="ln">   393</span>		return &amp;Row{rows: rows, err: err}
<a id="L394"></a><span class="ln">   394</span>	}
<a id="L395"></a><span class="ln">   395</span>	
<a id="L396"></a><span class="ln">   396</span>	<span class="comment">// Begin starts a transaction. The isolation level is dependent on</span>
<a id="L397"></a><span class="ln">   397</span>	<span class="comment">// the driver.</span>
<a id="L398"></a><span class="ln">   398</span>	func (db *DB) Begin() (*Tx, error) {
<a id="L399"></a><span class="ln">   399</span>		var tx *Tx
<a id="L400"></a><span class="ln">   400</span>		var err error
<a id="L401"></a><span class="ln">   401</span>		for i := 0; i &lt; 10; i++ {
<a id="L402"></a><span class="ln">   402</span>			tx, err = db.begin()
<a id="L403"></a><span class="ln">   403</span>			if err != driver.ErrBadConn {
<a id="L404"></a><span class="ln">   404</span>				break
<a id="L405"></a><span class="ln">   405</span>			}
<a id="L406"></a><span class="ln">   406</span>		}
<a id="L407"></a><span class="ln">   407</span>		return tx, err
<a id="L408"></a><span class="ln">   408</span>	}
<a id="L409"></a><span class="ln">   409</span>	
<a id="L410"></a><span class="ln">   410</span>	func (db *DB) begin() (tx *Tx, err error) {
<a id="L411"></a><span class="ln">   411</span>		ci, err := db.conn()
<a id="L412"></a><span class="ln">   412</span>		if err != nil {
<a id="L413"></a><span class="ln">   413</span>			return nil, err
<a id="L414"></a><span class="ln">   414</span>		}
<a id="L415"></a><span class="ln">   415</span>		txi, err := ci.Begin()
<a id="L416"></a><span class="ln">   416</span>		if err != nil {
<a id="L417"></a><span class="ln">   417</span>			db.putConn(ci, err)
<a id="L418"></a><span class="ln">   418</span>			return nil, fmt.Errorf(&#34;sql: failed to Begin transaction: %v&#34;, err)
<a id="L419"></a><span class="ln">   419</span>		}
<a id="L420"></a><span class="ln">   420</span>		return &amp;Tx{
<a id="L421"></a><span class="ln">   421</span>			db:  db,
<a id="L422"></a><span class="ln">   422</span>			ci:  ci,
<a id="L423"></a><span class="ln">   423</span>			txi: txi,
<a id="L424"></a><span class="ln">   424</span>		}, nil
<a id="L425"></a><span class="ln">   425</span>	}
<a id="L426"></a><span class="ln">   426</span>	
<a id="L427"></a><span class="ln">   427</span>	<span class="comment">// Driver returns the database&#39;s underlying driver.</span>
<a id="L428"></a><span class="ln">   428</span>	func (db *DB) Driver() driver.Driver {
<a id="L429"></a><span class="ln">   429</span>		return db.driver
<a id="L430"></a><span class="ln">   430</span>	}
<a id="L431"></a><span class="ln">   431</span>	
<a id="L432"></a><span class="ln">   432</span>	<span class="comment">// Tx is an in-progress database transaction.</span>
<a id="L433"></a><span class="ln">   433</span>	<span class="comment">//</span>
<a id="L434"></a><span class="ln">   434</span>	<span class="comment">// A transaction must end with a call to Commit or Rollback.</span>
<a id="L435"></a><span class="ln">   435</span>	<span class="comment">//</span>
<a id="L436"></a><span class="ln">   436</span>	<span class="comment">// After a call to Commit or Rollback, all operations on the</span>
<a id="L437"></a><span class="ln">   437</span>	<span class="comment">// transaction fail with ErrTxDone.</span>
<a id="L438"></a><span class="ln">   438</span>	type Tx struct {
<a id="L439"></a><span class="ln">   439</span>		db *DB
<a id="L440"></a><span class="ln">   440</span>	
<a id="L441"></a><span class="ln">   441</span>		<span class="comment">// ci is owned exclusively until Commit or Rollback, at which point</span>
<a id="L442"></a><span class="ln">   442</span>		<span class="comment">// it&#39;s returned with putConn.</span>
<a id="L443"></a><span class="ln">   443</span>		ci  driver.Conn
<a id="L444"></a><span class="ln">   444</span>		txi driver.Tx
<a id="L445"></a><span class="ln">   445</span>	
<a id="L446"></a><span class="ln">   446</span>		<span class="comment">// cimu is held while somebody is using ci (between grabConn</span>
<a id="L447"></a><span class="ln">   447</span>		<span class="comment">// and releaseConn)</span>
<a id="L448"></a><span class="ln">   448</span>		cimu sync.Mutex
<a id="L449"></a><span class="ln">   449</span>	
<a id="L450"></a><span class="ln">   450</span>		<span class="comment">// done transitions from false to true exactly once, on Commit</span>
<a id="L451"></a><span class="ln">   451</span>		<span class="comment">// or Rollback. once done, all operations fail with</span>
<a id="L452"></a><span class="ln">   452</span>		<span class="comment">// ErrTxDone.</span>
<a id="L453"></a><span class="ln">   453</span>		done bool
<a id="L454"></a><span class="ln">   454</span>	}
<a id="L455"></a><span class="ln">   455</span>	
<a id="L456"></a><span class="ln">   456</span>	var ErrTxDone = errors.New(&#34;sql: Transaction has already been committed or rolled back&#34;)
<a id="L457"></a><span class="ln">   457</span>	
<a id="L458"></a><span class="ln">   458</span>	func (tx *Tx) close() {
<a id="L459"></a><span class="ln">   459</span>		if tx.done {
<a id="L460"></a><span class="ln">   460</span>			panic(&#34;double close&#34;) <span class="comment">// internal error</span>
<a id="L461"></a><span class="ln">   461</span>		}
<a id="L462"></a><span class="ln">   462</span>		tx.done = true
<a id="L463"></a><span class="ln">   463</span>		tx.db.putConn(tx.ci, nil)
<a id="L464"></a><span class="ln">   464</span>		tx.ci = nil
<a id="L465"></a><span class="ln">   465</span>		tx.txi = nil
<a id="L466"></a><span class="ln">   466</span>	}
<a id="L467"></a><span class="ln">   467</span>	
<a id="L468"></a><span class="ln">   468</span>	func (tx *Tx) grabConn() (driver.Conn, error) {
<a id="L469"></a><span class="ln">   469</span>		if tx.done {
<a id="L470"></a><span class="ln">   470</span>			return nil, ErrTxDone
<a id="L471"></a><span class="ln">   471</span>		}
<a id="L472"></a><span class="ln">   472</span>		tx.cimu.Lock()
<a id="L473"></a><span class="ln">   473</span>		return tx.ci, nil
<a id="L474"></a><span class="ln">   474</span>	}
<a id="L475"></a><span class="ln">   475</span>	
<a id="L476"></a><span class="ln">   476</span>	func (tx *Tx) releaseConn() {
<a id="L477"></a><span class="ln">   477</span>		tx.cimu.Unlock()
<a id="L478"></a><span class="ln">   478</span>	}
<a id="L479"></a><span class="ln">   479</span>	
<a id="L480"></a><span class="ln">   480</span>	<span class="comment">// Commit commits the transaction.</span>
<a id="L481"></a><span class="ln">   481</span>	func (tx *Tx) Commit() error {
<a id="L482"></a><span class="ln">   482</span>		if tx.done {
<a id="L483"></a><span class="ln">   483</span>			return ErrTxDone
<a id="L484"></a><span class="ln">   484</span>		}
<a id="L485"></a><span class="ln">   485</span>		defer tx.close()
<a id="L486"></a><span class="ln">   486</span>		return tx.txi.Commit()
<a id="L487"></a><span class="ln">   487</span>	}
<a id="L488"></a><span class="ln">   488</span>	
<a id="L489"></a><span class="ln">   489</span>	<span class="comment">// Rollback aborts the transaction.</span>
<a id="L490"></a><span class="ln">   490</span>	func (tx *Tx) Rollback() error {
<a id="L491"></a><span class="ln">   491</span>		if tx.done {
<a id="L492"></a><span class="ln">   492</span>			return ErrTxDone
<a id="L493"></a><span class="ln">   493</span>		}
<a id="L494"></a><span class="ln">   494</span>		defer tx.close()
<a id="L495"></a><span class="ln">   495</span>		return tx.txi.Rollback()
<a id="L496"></a><span class="ln">   496</span>	}
<a id="L497"></a><span class="ln">   497</span>	
<a id="L498"></a><span class="ln">   498</span>	<span class="comment">// Prepare creates a prepared statement for use within a transaction.</span>
<a id="L499"></a><span class="ln">   499</span>	<span class="comment">//</span>
<a id="L500"></a><span class="ln">   500</span>	<span class="comment">// The returned statement operates within the transaction and can no longer</span>
<a id="L501"></a><span class="ln">   501</span>	<span class="comment">// be used once the transaction has been committed or rolled back.</span>
<a id="L502"></a><span class="ln">   502</span>	<span class="comment">//</span>
<a id="L503"></a><span class="ln">   503</span>	<span class="comment">// To use an existing prepared statement on this transaction, see Tx.Stmt.</span>
<a id="L504"></a><span class="ln">   504</span>	func (tx *Tx) Prepare(query string) (*Stmt, error) {
<a id="L505"></a><span class="ln">   505</span>		<span class="comment">// TODO(bradfitz): We could be more efficient here and either</span>
<a id="L506"></a><span class="ln">   506</span>		<span class="comment">// provide a method to take an existing Stmt (created on</span>
<a id="L507"></a><span class="ln">   507</span>		<span class="comment">// perhaps a different Conn), and re-create it on this Conn if</span>
<a id="L508"></a><span class="ln">   508</span>		<span class="comment">// necessary. Or, better: keep a map in DB of query string to</span>
<a id="L509"></a><span class="ln">   509</span>		<span class="comment">// Stmts, and have Stmt.Execute do the right thing and</span>
<a id="L510"></a><span class="ln">   510</span>		<span class="comment">// re-prepare if the Conn in use doesn&#39;t have that prepared</span>
<a id="L511"></a><span class="ln">   511</span>		<span class="comment">// statement.  But we&#39;ll want to avoid caching the statement</span>
<a id="L512"></a><span class="ln">   512</span>		<span class="comment">// in the case where we only call conn.Prepare implicitly</span>
<a id="L513"></a><span class="ln">   513</span>		<span class="comment">// (such as in db.Exec or tx.Exec), but the caller package</span>
<a id="L514"></a><span class="ln">   514</span>		<span class="comment">// can&#39;t be holding a reference to the returned statement.</span>
<a id="L515"></a><span class="ln">   515</span>		<span class="comment">// Perhaps just looking at the reference count (by noting</span>
<a id="L516"></a><span class="ln">   516</span>		<span class="comment">// Stmt.Close) would be enough. We might also want a finalizer</span>
<a id="L517"></a><span class="ln">   517</span>		<span class="comment">// on Stmt to drop the reference count.</span>
<a id="L518"></a><span class="ln">   518</span>		ci, err := tx.grabConn()
<a id="L519"></a><span class="ln">   519</span>		if err != nil {
<a id="L520"></a><span class="ln">   520</span>			return nil, err
<a id="L521"></a><span class="ln">   521</span>		}
<a id="L522"></a><span class="ln">   522</span>		defer tx.releaseConn()
<a id="L523"></a><span class="ln">   523</span>	
<a id="L524"></a><span class="ln">   524</span>		si, err := ci.Prepare(query)
<a id="L525"></a><span class="ln">   525</span>		if err != nil {
<a id="L526"></a><span class="ln">   526</span>			return nil, err
<a id="L527"></a><span class="ln">   527</span>		}
<a id="L528"></a><span class="ln">   528</span>	
<a id="L529"></a><span class="ln">   529</span>		stmt := &amp;Stmt{
<a id="L530"></a><span class="ln">   530</span>			db:    tx.db,
<a id="L531"></a><span class="ln">   531</span>			tx:    tx,
<a id="L532"></a><span class="ln">   532</span>			txsi:  si,
<a id="L533"></a><span class="ln">   533</span>			query: query,
<a id="L534"></a><span class="ln">   534</span>		}
<a id="L535"></a><span class="ln">   535</span>		return stmt, nil
<a id="L536"></a><span class="ln">   536</span>	}
<a id="L537"></a><span class="ln">   537</span>	
<a id="L538"></a><span class="ln">   538</span>	<span class="comment">// Stmt returns a transaction-specific prepared statement from</span>
<a id="L539"></a><span class="ln">   539</span>	<span class="comment">// an existing statement.</span>
<a id="L540"></a><span class="ln">   540</span>	<span class="comment">//</span>
<a id="L541"></a><span class="ln">   541</span>	<span class="comment">// Example:</span>
<a id="L542"></a><span class="ln">   542</span>	<span class="comment">//  updateMoney, err := db.Prepare(&#34;UPDATE balance SET money=money+? WHERE id=?&#34;)</span>
<a id="L543"></a><span class="ln">   543</span>	<span class="comment">//  ...</span>
<a id="L544"></a><span class="ln">   544</span>	<span class="comment">//  tx, err := db.Begin()</span>
<a id="L545"></a><span class="ln">   545</span>	<span class="comment">//  ...</span>
<a id="L546"></a><span class="ln">   546</span>	<span class="comment">//  res, err := tx.Stmt(updateMoney).Exec(123.45, 98293203)</span>
<a id="L547"></a><span class="ln">   547</span>	func (tx *Tx) Stmt(stmt *Stmt) *Stmt {
<a id="L548"></a><span class="ln">   548</span>		<span class="comment">// TODO(bradfitz): optimize this. Currently this re-prepares</span>
<a id="L549"></a><span class="ln">   549</span>		<span class="comment">// each time.  This is fine for now to illustrate the API but</span>
<a id="L550"></a><span class="ln">   550</span>		<span class="comment">// we should really cache already-prepared statements</span>
<a id="L551"></a><span class="ln">   551</span>		<span class="comment">// per-Conn. See also the big comment in Tx.Prepare.</span>
<a id="L552"></a><span class="ln">   552</span>	
<a id="L553"></a><span class="ln">   553</span>		if tx.db != stmt.db {
<a id="L554"></a><span class="ln">   554</span>			return &amp;Stmt{stickyErr: errors.New(&#34;sql: Tx.Stmt: statement from different database used&#34;)}
<a id="L555"></a><span class="ln">   555</span>		}
<a id="L556"></a><span class="ln">   556</span>		ci, err := tx.grabConn()
<a id="L557"></a><span class="ln">   557</span>		if err != nil {
<a id="L558"></a><span class="ln">   558</span>			return &amp;Stmt{stickyErr: err}
<a id="L559"></a><span class="ln">   559</span>		}
<a id="L560"></a><span class="ln">   560</span>		defer tx.releaseConn()
<a id="L561"></a><span class="ln">   561</span>		si, err := ci.Prepare(stmt.query)
<a id="L562"></a><span class="ln">   562</span>		return &amp;Stmt{
<a id="L563"></a><span class="ln">   563</span>			db:        tx.db,
<a id="L564"></a><span class="ln">   564</span>			tx:        tx,
<a id="L565"></a><span class="ln">   565</span>			txsi:      si,
<a id="L566"></a><span class="ln">   566</span>			query:     stmt.query,
<a id="L567"></a><span class="ln">   567</span>			stickyErr: err,
<a id="L568"></a><span class="ln">   568</span>		}
<a id="L569"></a><span class="ln">   569</span>	}
<a id="L570"></a><span class="ln">   570</span>	
<a id="L571"></a><span class="ln">   571</span>	<span class="comment">// Exec executes a query that doesn&#39;t return rows.</span>
<a id="L572"></a><span class="ln">   572</span>	<span class="comment">// For example: an INSERT and UPDATE.</span>
<a id="L573"></a><span class="ln">   573</span>	func (tx *Tx) Exec(query string, args ...interface{}) (Result, error) {
<a id="L574"></a><span class="ln">   574</span>		ci, err := tx.grabConn()
<a id="L575"></a><span class="ln">   575</span>		if err != nil {
<a id="L576"></a><span class="ln">   576</span>			return nil, err
<a id="L577"></a><span class="ln">   577</span>		}
<a id="L578"></a><span class="ln">   578</span>		defer tx.releaseConn()
<a id="L579"></a><span class="ln">   579</span>	
<a id="L580"></a><span class="ln">   580</span>		sargs, err := subsetTypeArgs(args)
<a id="L581"></a><span class="ln">   581</span>		if err != nil {
<a id="L582"></a><span class="ln">   582</span>			return nil, err
<a id="L583"></a><span class="ln">   583</span>		}
<a id="L584"></a><span class="ln">   584</span>	
<a id="L585"></a><span class="ln">   585</span>		if execer, ok := ci.(driver.Execer); ok {
<a id="L586"></a><span class="ln">   586</span>			resi, err := execer.Exec(query, sargs)
<a id="L587"></a><span class="ln">   587</span>			if err == nil {
<a id="L588"></a><span class="ln">   588</span>				return result{resi}, nil
<a id="L589"></a><span class="ln">   589</span>			}
<a id="L590"></a><span class="ln">   590</span>			if err != driver.ErrSkip {
<a id="L591"></a><span class="ln">   591</span>				return nil, err
<a id="L592"></a><span class="ln">   592</span>			}
<a id="L593"></a><span class="ln">   593</span>		}
<a id="L594"></a><span class="ln">   594</span>	
<a id="L595"></a><span class="ln">   595</span>		sti, err := ci.Prepare(query)
<a id="L596"></a><span class="ln">   596</span>		if err != nil {
<a id="L597"></a><span class="ln">   597</span>			return nil, err
<a id="L598"></a><span class="ln">   598</span>		}
<a id="L599"></a><span class="ln">   599</span>		defer sti.Close()
<a id="L600"></a><span class="ln">   600</span>	
<a id="L601"></a><span class="ln">   601</span>		resi, err := sti.Exec(sargs)
<a id="L602"></a><span class="ln">   602</span>		if err != nil {
<a id="L603"></a><span class="ln">   603</span>			return nil, err
<a id="L604"></a><span class="ln">   604</span>		}
<a id="L605"></a><span class="ln">   605</span>		return result{resi}, nil
<a id="L606"></a><span class="ln">   606</span>	}
<a id="L607"></a><span class="ln">   607</span>	
<a id="L608"></a><span class="ln">   608</span>	<span class="comment">// Query executes a query that returns rows, typically a SELECT.</span>
<a id="L609"></a><span class="ln">   609</span>	func (tx *Tx) Query(query string, args ...interface{}) (*Rows, error) {
<a id="L610"></a><span class="ln">   610</span>		if tx.done {
<a id="L611"></a><span class="ln">   611</span>			return nil, ErrTxDone
<a id="L612"></a><span class="ln">   612</span>		}
<a id="L613"></a><span class="ln">   613</span>		stmt, err := tx.Prepare(query)
<a id="L614"></a><span class="ln">   614</span>		if err != nil {
<a id="L615"></a><span class="ln">   615</span>			return nil, err
<a id="L616"></a><span class="ln">   616</span>		}
<a id="L617"></a><span class="ln">   617</span>		rows, err := stmt.Query(args...)
<a id="L618"></a><span class="ln">   618</span>		if err != nil {
<a id="L619"></a><span class="ln">   619</span>			stmt.Close()
<a id="L620"></a><span class="ln">   620</span>			return nil, err
<a id="L621"></a><span class="ln">   621</span>		}
<a id="L622"></a><span class="ln">   622</span>		rows.closeStmt = stmt
<a id="L623"></a><span class="ln">   623</span>		return rows, err
<a id="L624"></a><span class="ln">   624</span>	}
<a id="L625"></a><span class="ln">   625</span>	
<a id="L626"></a><span class="ln">   626</span>	<span class="comment">// QueryRow executes a query that is expected to return at most one row.</span>
<a id="L627"></a><span class="ln">   627</span>	<span class="comment">// QueryRow always return a non-nil value. Errors are deferred until</span>
<a id="L628"></a><span class="ln">   628</span>	<span class="comment">// Row&#39;s Scan method is called.</span>
<a id="L629"></a><span class="ln">   629</span>	func (tx *Tx) QueryRow(query string, args ...interface{}) *Row {
<a id="L630"></a><span class="ln">   630</span>		rows, err := tx.Query(query, args...)
<a id="L631"></a><span class="ln">   631</span>		return &amp;Row{rows: rows, err: err}
<a id="L632"></a><span class="ln">   632</span>	}
<a id="L633"></a><span class="ln">   633</span>	
<a id="L634"></a><span class="ln">   634</span>	<span class="comment">// connStmt is a prepared statement on a particular connection.</span>
<a id="L635"></a><span class="ln">   635</span>	type connStmt struct {
<a id="L636"></a><span class="ln">   636</span>		ci driver.Conn
<a id="L637"></a><span class="ln">   637</span>		si driver.Stmt
<a id="L638"></a><span class="ln">   638</span>	}
<a id="L639"></a><span class="ln">   639</span>	
<a id="L640"></a><span class="ln">   640</span>	<span class="comment">// Stmt is a prepared statement. Stmt is safe for concurrent use by multiple goroutines.</span>
<a id="L641"></a><span class="ln">   641</span>	type Stmt struct {
<a id="L642"></a><span class="ln">   642</span>		<span class="comment">// Immutable:</span>
<a id="L643"></a><span class="ln">   643</span>		db        *DB    <span class="comment">// where we came from</span>
<a id="L644"></a><span class="ln">   644</span>		query     string <span class="comment">// that created the Stmt</span>
<a id="L645"></a><span class="ln">   645</span>		stickyErr error  <span class="comment">// if non-nil, this error is returned for all operations</span>
<a id="L646"></a><span class="ln">   646</span>	
<a id="L647"></a><span class="ln">   647</span>		<span class="comment">// If in a transaction, else both nil:</span>
<a id="L648"></a><span class="ln">   648</span>		tx   *Tx
<a id="L649"></a><span class="ln">   649</span>		txsi driver.Stmt
<a id="L650"></a><span class="ln">   650</span>	
<a id="L651"></a><span class="ln">   651</span>		mu     sync.Mutex <span class="comment">// protects the rest of the fields</span>
<a id="L652"></a><span class="ln">   652</span>		closed bool
<a id="L653"></a><span class="ln">   653</span>	
<a id="L654"></a><span class="ln">   654</span>		<span class="comment">// css is a list of underlying driver statement interfaces</span>
<a id="L655"></a><span class="ln">   655</span>		<span class="comment">// that are valid on particular connections.  This is only</span>
<a id="L656"></a><span class="ln">   656</span>		<span class="comment">// used if tx == nil and one is found that has idle</span>
<a id="L657"></a><span class="ln">   657</span>		<span class="comment">// connections.  If tx != nil, txsi is always used.</span>
<a id="L658"></a><span class="ln">   658</span>		css []connStmt
<a id="L659"></a><span class="ln">   659</span>	}
<a id="L660"></a><span class="ln">   660</span>	
<a id="L661"></a><span class="ln">   661</span>	<span class="comment">// Exec executes a prepared statement with the given arguments and</span>
<a id="L662"></a><span class="ln">   662</span>	<span class="comment">// returns a Result summarizing the effect of the statement.</span>
<a id="L663"></a><span class="ln">   663</span>	func (s *Stmt) Exec(args ...interface{}) (Result, error) {
<a id="L664"></a><span class="ln">   664</span>		_, releaseConn, si, err := s.connStmt()
<a id="L665"></a><span class="ln">   665</span>		if err != nil {
<a id="L666"></a><span class="ln">   666</span>			return nil, err
<a id="L667"></a><span class="ln">   667</span>		}
<a id="L668"></a><span class="ln">   668</span>		defer releaseConn(nil)
<a id="L669"></a><span class="ln">   669</span>	
<a id="L670"></a><span class="ln">   670</span>		<span class="comment">// -1 means the driver doesn&#39;t know how to count the number of</span>
<a id="L671"></a><span class="ln">   671</span>		<span class="comment">// placeholders, so we won&#39;t sanity check input here and instead let the</span>
<a id="L672"></a><span class="ln">   672</span>		<span class="comment">// driver deal with errors.</span>
<a id="L673"></a><span class="ln">   673</span>		if want := si.NumInput(); want != -1 &amp;&amp; len(args) != want {
<a id="L674"></a><span class="ln">   674</span>			return nil, fmt.Errorf(&#34;sql: expected %d arguments, got %d&#34;, want, len(args))
<a id="L675"></a><span class="ln">   675</span>		}
<a id="L676"></a><span class="ln">   676</span>	
<a id="L677"></a><span class="ln">   677</span>		sargs := make([]driver.Value, len(args))
<a id="L678"></a><span class="ln">   678</span>	
<a id="L679"></a><span class="ln">   679</span>		<span class="comment">// Convert args to subset types.</span>
<a id="L680"></a><span class="ln">   680</span>		if cc, ok := si.(driver.ColumnConverter); ok {
<a id="L681"></a><span class="ln">   681</span>			for n, arg := range args {
<a id="L682"></a><span class="ln">   682</span>				<span class="comment">// First, see if the value itself knows how to convert</span>
<a id="L683"></a><span class="ln">   683</span>				<span class="comment">// itself to a driver type.  For example, a NullString</span>
<a id="L684"></a><span class="ln">   684</span>				<span class="comment">// struct changing into a string or nil.</span>
<a id="L685"></a><span class="ln">   685</span>				if svi, ok := arg.(driver.Valuer); ok {
<a id="L686"></a><span class="ln">   686</span>					sv, err := svi.Value()
<a id="L687"></a><span class="ln">   687</span>					if err != nil {
<a id="L688"></a><span class="ln">   688</span>						return nil, fmt.Errorf(&#34;sql: argument index %d from Value: %v&#34;, n, err)
<a id="L689"></a><span class="ln">   689</span>					}
<a id="L690"></a><span class="ln">   690</span>					if !driver.IsValue(sv) {
<a id="L691"></a><span class="ln">   691</span>						return nil, fmt.Errorf(&#34;sql: argument index %d: non-subset type %T returned from Value&#34;, n, sv)
<a id="L692"></a><span class="ln">   692</span>					}
<a id="L693"></a><span class="ln">   693</span>					arg = sv
<a id="L694"></a><span class="ln">   694</span>				}
<a id="L695"></a><span class="ln">   695</span>	
<a id="L696"></a><span class="ln">   696</span>				<span class="comment">// Second, ask the column to sanity check itself. For</span>
<a id="L697"></a><span class="ln">   697</span>				<span class="comment">// example, drivers might use this to make sure that</span>
<a id="L698"></a><span class="ln">   698</span>				<span class="comment">// an int64 values being inserted into a 16-bit</span>
<a id="L699"></a><span class="ln">   699</span>				<span class="comment">// integer field is in range (before getting</span>
<a id="L700"></a><span class="ln">   700</span>				<span class="comment">// truncated), or that a nil can&#39;t go into a NOT NULL</span>
<a id="L701"></a><span class="ln">   701</span>				<span class="comment">// column before going across the network to get the</span>
<a id="L702"></a><span class="ln">   702</span>				<span class="comment">// same error.</span>
<a id="L703"></a><span class="ln">   703</span>				sargs[n], err = cc.ColumnConverter(n).ConvertValue(arg)
<a id="L704"></a><span class="ln">   704</span>				if err != nil {
<a id="L705"></a><span class="ln">   705</span>					return nil, fmt.Errorf(&#34;sql: converting Exec argument #%d&#39;s type: %v&#34;, n, err)
<a id="L706"></a><span class="ln">   706</span>				}
<a id="L707"></a><span class="ln">   707</span>				if !driver.IsValue(sargs[n]) {
<a id="L708"></a><span class="ln">   708</span>					return nil, fmt.Errorf(&#34;sql: driver ColumnConverter error converted %T to unsupported type %T&#34;,
<a id="L709"></a><span class="ln">   709</span>						arg, sargs[n])
<a id="L710"></a><span class="ln">   710</span>				}
<a id="L711"></a><span class="ln">   711</span>			}
<a id="L712"></a><span class="ln">   712</span>		} else {
<a id="L713"></a><span class="ln">   713</span>			for n, arg := range args {
<a id="L714"></a><span class="ln">   714</span>				sargs[n], err = driver.DefaultParameterConverter.ConvertValue(arg)
<a id="L715"></a><span class="ln">   715</span>				if err != nil {
<a id="L716"></a><span class="ln">   716</span>					return nil, fmt.Errorf(&#34;sql: converting Exec argument #%d&#39;s type: %v&#34;, n, err)
<a id="L717"></a><span class="ln">   717</span>				}
<a id="L718"></a><span class="ln">   718</span>			}
<a id="L719"></a><span class="ln">   719</span>		}
<a id="L720"></a><span class="ln">   720</span>	
<a id="L721"></a><span class="ln">   721</span>		resi, err := si.Exec(sargs)
<a id="L722"></a><span class="ln">   722</span>		if err != nil {
<a id="L723"></a><span class="ln">   723</span>			return nil, err
<a id="L724"></a><span class="ln">   724</span>		}
<a id="L725"></a><span class="ln">   725</span>		return result{resi}, nil
<a id="L726"></a><span class="ln">   726</span>	}
<a id="L727"></a><span class="ln">   727</span>	
<a id="L728"></a><span class="ln">   728</span>	<span class="comment">// connStmt returns a free driver connection on which to execute the</span>
<a id="L729"></a><span class="ln">   729</span>	<span class="comment">// statement, a function to call to release the connection, and a</span>
<a id="L730"></a><span class="ln">   730</span>	<span class="comment">// statement bound to that connection.</span>
<a id="L731"></a><span class="ln">   731</span>	func (s *Stmt) connStmt() (ci driver.Conn, releaseConn func(error), si driver.Stmt, err error) {
<a id="L732"></a><span class="ln">   732</span>		if err = s.stickyErr; err != nil {
<a id="L733"></a><span class="ln">   733</span>			return
<a id="L734"></a><span class="ln">   734</span>		}
<a id="L735"></a><span class="ln">   735</span>		s.mu.Lock()
<a id="L736"></a><span class="ln">   736</span>		if s.closed {
<a id="L737"></a><span class="ln">   737</span>			s.mu.Unlock()
<a id="L738"></a><span class="ln">   738</span>			err = errors.New(&#34;sql: statement is closed&#34;)
<a id="L739"></a><span class="ln">   739</span>			return
<a id="L740"></a><span class="ln">   740</span>		}
<a id="L741"></a><span class="ln">   741</span>	
<a id="L742"></a><span class="ln">   742</span>		<span class="comment">// In a transaction, we always use the connection that the</span>
<a id="L743"></a><span class="ln">   743</span>		<span class="comment">// transaction was created on.</span>
<a id="L744"></a><span class="ln">   744</span>		if s.tx != nil {
<a id="L745"></a><span class="ln">   745</span>			s.mu.Unlock()
<a id="L746"></a><span class="ln">   746</span>			ci, err = s.tx.grabConn() <span class="comment">// blocks, waiting for the connection.</span>
<a id="L747"></a><span class="ln">   747</span>			if err != nil {
<a id="L748"></a><span class="ln">   748</span>				return
<a id="L749"></a><span class="ln">   749</span>			}
<a id="L750"></a><span class="ln">   750</span>			releaseConn = func(error) { s.tx.releaseConn() }
<a id="L751"></a><span class="ln">   751</span>			return ci, releaseConn, s.txsi, nil
<a id="L752"></a><span class="ln">   752</span>		}
<a id="L753"></a><span class="ln">   753</span>	
<a id="L754"></a><span class="ln">   754</span>		var cs connStmt
<a id="L755"></a><span class="ln">   755</span>		match := false
<a id="L756"></a><span class="ln">   756</span>		for _, v := range s.css {
<a id="L757"></a><span class="ln">   757</span>			<span class="comment">// TODO(bradfitz): lazily clean up entries in this</span>
<a id="L758"></a><span class="ln">   758</span>			<span class="comment">// list with dead conns while enumerating</span>
<a id="L759"></a><span class="ln">   759</span>			if _, match = s.db.connIfFree(v.ci); match {
<a id="L760"></a><span class="ln">   760</span>				cs = v
<a id="L761"></a><span class="ln">   761</span>				break
<a id="L762"></a><span class="ln">   762</span>			}
<a id="L763"></a><span class="ln">   763</span>		}
<a id="L764"></a><span class="ln">   764</span>		s.mu.Unlock()
<a id="L765"></a><span class="ln">   765</span>	
<a id="L766"></a><span class="ln">   766</span>		<span class="comment">// Make a new conn if all are busy.</span>
<a id="L767"></a><span class="ln">   767</span>		<span class="comment">// TODO(bradfitz): or wait for one? make configurable later?</span>
<a id="L768"></a><span class="ln">   768</span>		if !match {
<a id="L769"></a><span class="ln">   769</span>			for i := 0; ; i++ {
<a id="L770"></a><span class="ln">   770</span>				ci, err := s.db.conn()
<a id="L771"></a><span class="ln">   771</span>				if err != nil {
<a id="L772"></a><span class="ln">   772</span>					return nil, nil, nil, err
<a id="L773"></a><span class="ln">   773</span>				}
<a id="L774"></a><span class="ln">   774</span>				si, err := ci.Prepare(s.query)
<a id="L775"></a><span class="ln">   775</span>				if err == driver.ErrBadConn &amp;&amp; i &lt; 10 {
<a id="L776"></a><span class="ln">   776</span>					continue
<a id="L777"></a><span class="ln">   777</span>				}
<a id="L778"></a><span class="ln">   778</span>				if err != nil {
<a id="L779"></a><span class="ln">   779</span>					return nil, nil, nil, err
<a id="L780"></a><span class="ln">   780</span>				}
<a id="L781"></a><span class="ln">   781</span>				s.mu.Lock()
<a id="L782"></a><span class="ln">   782</span>				cs = connStmt{ci, si}
<a id="L783"></a><span class="ln">   783</span>				s.css = append(s.css, cs)
<a id="L784"></a><span class="ln">   784</span>				s.mu.Unlock()
<a id="L785"></a><span class="ln">   785</span>				break
<a id="L786"></a><span class="ln">   786</span>			}
<a id="L787"></a><span class="ln">   787</span>		}
<a id="L788"></a><span class="ln">   788</span>	
<a id="L789"></a><span class="ln">   789</span>		conn := cs.ci
<a id="L790"></a><span class="ln">   790</span>		releaseConn = func(err error) { s.db.putConn(conn, err) }
<a id="L791"></a><span class="ln">   791</span>		return conn, releaseConn, cs.si, nil
<a id="L792"></a><span class="ln">   792</span>	}
<a id="L793"></a><span class="ln">   793</span>	
<a id="L794"></a><span class="ln">   794</span>	<span class="comment">// Query executes a prepared query statement with the given arguments</span>
<a id="L795"></a><span class="ln">   795</span>	<span class="comment">// and returns the query results as a *Rows.</span>
<a id="L796"></a><span class="ln">   796</span>	func (s *Stmt) Query(args ...interface{}) (*Rows, error) {
<a id="L797"></a><span class="ln">   797</span>		ci, releaseConn, si, err := s.connStmt()
<a id="L798"></a><span class="ln">   798</span>		if err != nil {
<a id="L799"></a><span class="ln">   799</span>			return nil, err
<a id="L800"></a><span class="ln">   800</span>		}
<a id="L801"></a><span class="ln">   801</span>	
<a id="L802"></a><span class="ln">   802</span>		<span class="comment">// -1 means the driver doesn&#39;t know how to count the number of</span>
<a id="L803"></a><span class="ln">   803</span>		<span class="comment">// placeholders, so we won&#39;t sanity check input here and instead let the</span>
<a id="L804"></a><span class="ln">   804</span>		<span class="comment">// driver deal with errors.</span>
<a id="L805"></a><span class="ln">   805</span>		if want := si.NumInput(); want != -1 &amp;&amp; len(args) != want {
<a id="L806"></a><span class="ln">   806</span>			return nil, fmt.Errorf(&#34;sql: statement expects %d inputs; got %d&#34;, si.NumInput(), len(args))
<a id="L807"></a><span class="ln">   807</span>		}
<a id="L808"></a><span class="ln">   808</span>		sargs, err := subsetTypeArgs(args)
<a id="L809"></a><span class="ln">   809</span>		if err != nil {
<a id="L810"></a><span class="ln">   810</span>			return nil, err
<a id="L811"></a><span class="ln">   811</span>		}
<a id="L812"></a><span class="ln">   812</span>		rowsi, err := si.Query(sargs)
<a id="L813"></a><span class="ln">   813</span>		if err != nil {
<a id="L814"></a><span class="ln">   814</span>			releaseConn(err)
<a id="L815"></a><span class="ln">   815</span>			return nil, err
<a id="L816"></a><span class="ln">   816</span>		}
<a id="L817"></a><span class="ln">   817</span>		<span class="comment">// Note: ownership of ci passes to the *Rows, to be freed</span>
<a id="L818"></a><span class="ln">   818</span>		<span class="comment">// with releaseConn.</span>
<a id="L819"></a><span class="ln">   819</span>		rows := &amp;Rows{
<a id="L820"></a><span class="ln">   820</span>			db:          s.db,
<a id="L821"></a><span class="ln">   821</span>			ci:          ci,
<a id="L822"></a><span class="ln">   822</span>			releaseConn: releaseConn,
<a id="L823"></a><span class="ln">   823</span>			rowsi:       rowsi,
<a id="L824"></a><span class="ln">   824</span>		}
<a id="L825"></a><span class="ln">   825</span>		return rows, nil
<a id="L826"></a><span class="ln">   826</span>	}
<a id="L827"></a><span class="ln">   827</span>	
<a id="L828"></a><span class="ln">   828</span>	<span class="comment">// QueryRow executes a prepared query statement with the given arguments.</span>
<a id="L829"></a><span class="ln">   829</span>	<span class="comment">// If an error occurs during the execution of the statement, that error will</span>
<a id="L830"></a><span class="ln">   830</span>	<span class="comment">// be returned by a call to Scan on the returned *Row, which is always non-nil.</span>
<a id="L831"></a><span class="ln">   831</span>	<span class="comment">// If the query selects no rows, the *Row&#39;s Scan will return ErrNoRows.</span>
<a id="L832"></a><span class="ln">   832</span>	<span class="comment">// Otherwise, the *Row&#39;s Scan scans the first selected row and discards</span>
<a id="L833"></a><span class="ln">   833</span>	<span class="comment">// the rest.</span>
<a id="L834"></a><span class="ln">   834</span>	<span class="comment">//</span>
<a id="L835"></a><span class="ln">   835</span>	<span class="comment">// Example usage:</span>
<a id="L836"></a><span class="ln">   836</span>	<span class="comment">//</span>
<a id="L837"></a><span class="ln">   837</span>	<span class="comment">//  var name string</span>
<a id="L838"></a><span class="ln">   838</span>	<span class="comment">//  err := nameByUseridStmt.QueryRow(id).Scan(&amp;name)</span>
<a id="L839"></a><span class="ln">   839</span>	func (s *Stmt) QueryRow(args ...interface{}) *Row {
<a id="L840"></a><span class="ln">   840</span>		rows, err := s.Query(args...)
<a id="L841"></a><span class="ln">   841</span>		if err != nil {
<a id="L842"></a><span class="ln">   842</span>			return &amp;Row{err: err}
<a id="L843"></a><span class="ln">   843</span>		}
<a id="L844"></a><span class="ln">   844</span>		return &amp;Row{rows: rows}
<a id="L845"></a><span class="ln">   845</span>	}
<a id="L846"></a><span class="ln">   846</span>	
<a id="L847"></a><span class="ln">   847</span>	<span class="comment">// Close closes the statement.</span>
<a id="L848"></a><span class="ln">   848</span>	func (s *Stmt) Close() error {
<a id="L849"></a><span class="ln">   849</span>		if s.stickyErr != nil {
<a id="L850"></a><span class="ln">   850</span>			return s.stickyErr
<a id="L851"></a><span class="ln">   851</span>		}
<a id="L852"></a><span class="ln">   852</span>		s.mu.Lock()
<a id="L853"></a><span class="ln">   853</span>		defer s.mu.Unlock()
<a id="L854"></a><span class="ln">   854</span>		if s.closed {
<a id="L855"></a><span class="ln">   855</span>			return nil
<a id="L856"></a><span class="ln">   856</span>		}
<a id="L857"></a><span class="ln">   857</span>		s.closed = true
<a id="L858"></a><span class="ln">   858</span>	
<a id="L859"></a><span class="ln">   859</span>		if s.tx != nil {
<a id="L860"></a><span class="ln">   860</span>			s.txsi.Close()
<a id="L861"></a><span class="ln">   861</span>		} else {
<a id="L862"></a><span class="ln">   862</span>			for _, v := range s.css {
<a id="L863"></a><span class="ln">   863</span>				if ci, match := s.db.connIfFree(v.ci); match {
<a id="L864"></a><span class="ln">   864</span>					v.si.Close()
<a id="L865"></a><span class="ln">   865</span>					s.db.putConn(ci, nil)
<a id="L866"></a><span class="ln">   866</span>				} else {
<a id="L867"></a><span class="ln">   867</span>					<span class="comment">// TODO(bradfitz): care that we can&#39;t close</span>
<a id="L868"></a><span class="ln">   868</span>					<span class="comment">// this statement because the statement&#39;s</span>
<a id="L869"></a><span class="ln">   869</span>					<span class="comment">// connection is in use?</span>
<a id="L870"></a><span class="ln">   870</span>				}
<a id="L871"></a><span class="ln">   871</span>			}
<a id="L872"></a><span class="ln">   872</span>		}
<a id="L873"></a><span class="ln">   873</span>		return nil
<a id="L874"></a><span class="ln">   874</span>	}
<a id="L875"></a><span class="ln">   875</span>	
<a id="L876"></a><span class="ln">   876</span>	<span class="comment">// Rows is the result of a query. Its cursor starts before the first row</span>
<a id="L877"></a><span class="ln">   877</span>	<span class="comment">// of the result set. Use Next to advance through the rows:</span>
<a id="L878"></a><span class="ln">   878</span>	<span class="comment">//</span>
<a id="L879"></a><span class="ln">   879</span>	<span class="comment">//     rows, err := db.Query(&#34;SELECT ...&#34;)</span>
<a id="L880"></a><span class="ln">   880</span>	<span class="comment">//     ...</span>
<a id="L881"></a><span class="ln">   881</span>	<span class="comment">//     for rows.Next() {</span>
<a id="L882"></a><span class="ln">   882</span>	<span class="comment">//         var id int</span>
<a id="L883"></a><span class="ln">   883</span>	<span class="comment">//         var name string</span>
<a id="L884"></a><span class="ln">   884</span>	<span class="comment">//         err = rows.Scan(&amp;id, &amp;name)</span>
<a id="L885"></a><span class="ln">   885</span>	<span class="comment">//         ...</span>
<a id="L886"></a><span class="ln">   886</span>	<span class="comment">//     }</span>
<a id="L887"></a><span class="ln">   887</span>	<span class="comment">//     err = rows.Err() // get any error encountered during iteration</span>
<a id="L888"></a><span class="ln">   888</span>	<span class="comment">//     ...</span>
<a id="L889"></a><span class="ln">   889</span>	type Rows struct {
<a id="L890"></a><span class="ln">   890</span>		db          *DB
<a id="L891"></a><span class="ln">   891</span>		ci          driver.Conn <span class="comment">// owned; must call putconn when closed to release</span>
<a id="L892"></a><span class="ln">   892</span>		releaseConn func(error)
<a id="L893"></a><span class="ln">   893</span>		rowsi       driver.Rows
<a id="L894"></a><span class="ln">   894</span>	
<a id="L895"></a><span class="ln">   895</span>		closed    bool
<a id="L896"></a><span class="ln">   896</span>		lastcols  []driver.Value
<a id="L897"></a><span class="ln">   897</span>		lasterr   error
<a id="L898"></a><span class="ln">   898</span>		closeStmt *Stmt <span class="comment">// if non-nil, statement to Close on close</span>
<a id="L899"></a><span class="ln">   899</span>	}
<a id="L900"></a><span class="ln">   900</span>	
<a id="L901"></a><span class="ln">   901</span>	<span class="comment">// Next prepares the next result row for reading with the Scan method.</span>
<a id="L902"></a><span class="ln">   902</span>	<span class="comment">// It returns true on success, false if there is no next result row.</span>
<a id="L903"></a><span class="ln">   903</span>	<span class="comment">// Every call to Scan, even the first one, must be preceded by a call</span>
<a id="L904"></a><span class="ln">   904</span>	<span class="comment">// to Next.</span>
<a id="L905"></a><span class="ln">   905</span>	func (rs *Rows) Next() bool {
<a id="L906"></a><span class="ln">   906</span>		if rs.closed {
<a id="L907"></a><span class="ln">   907</span>			return false
<a id="L908"></a><span class="ln">   908</span>		}
<a id="L909"></a><span class="ln">   909</span>		if rs.lasterr != nil {
<a id="L910"></a><span class="ln">   910</span>			return false
<a id="L911"></a><span class="ln">   911</span>		}
<a id="L912"></a><span class="ln">   912</span>		if rs.lastcols == nil {
<a id="L913"></a><span class="ln">   913</span>			rs.lastcols = make([]driver.Value, len(rs.rowsi.Columns()))
<a id="L914"></a><span class="ln">   914</span>		}
<a id="L915"></a><span class="ln">   915</span>		rs.lasterr = rs.rowsi.Next(rs.lastcols)
<a id="L916"></a><span class="ln">   916</span>		if rs.lasterr == io.EOF {
<a id="L917"></a><span class="ln">   917</span>			rs.Close()
<a id="L918"></a><span class="ln">   918</span>		}
<a id="L919"></a><span class="ln">   919</span>		return rs.lasterr == nil
<a id="L920"></a><span class="ln">   920</span>	}
<a id="L921"></a><span class="ln">   921</span>	
<a id="L922"></a><span class="ln">   922</span>	<span class="comment">// Err returns the error, if any, that was encountered during iteration.</span>
<a id="L923"></a><span class="ln">   923</span>	func (rs *Rows) Err() error {
<a id="L924"></a><span class="ln">   924</span>		if rs.lasterr == io.EOF {
<a id="L925"></a><span class="ln">   925</span>			return nil
<a id="L926"></a><span class="ln">   926</span>		}
<a id="L927"></a><span class="ln">   927</span>		return rs.lasterr
<a id="L928"></a><span class="ln">   928</span>	}
<a id="L929"></a><span class="ln">   929</span>	
<a id="L930"></a><span class="ln">   930</span>	<span class="comment">// Columns returns the column names.</span>
<a id="L931"></a><span class="ln">   931</span>	<span class="comment">// Columns returns an error if the rows are closed, or if the rows</span>
<a id="L932"></a><span class="ln">   932</span>	<span class="comment">// are from QueryRow and there was a deferred error.</span>
<a id="L933"></a><span class="ln">   933</span>	func (rs *Rows) Columns() ([]string, error) {
<a id="L934"></a><span class="ln">   934</span>		if rs.closed {
<a id="L935"></a><span class="ln">   935</span>			return nil, errors.New(&#34;sql: Rows are closed&#34;)
<a id="L936"></a><span class="ln">   936</span>		}
<a id="L937"></a><span class="ln">   937</span>		if rs.rowsi == nil {
<a id="L938"></a><span class="ln">   938</span>			return nil, errors.New(&#34;sql: no Rows available&#34;)
<a id="L939"></a><span class="ln">   939</span>		}
<a id="L940"></a><span class="ln">   940</span>		return rs.rowsi.Columns(), nil
<a id="L941"></a><span class="ln">   941</span>	}
<a id="L942"></a><span class="ln">   942</span>	
<a id="L943"></a><span class="ln">   943</span>	<span class="comment">// Scan copies the columns in the current row into the values pointed</span>
<a id="L944"></a><span class="ln">   944</span>	<span class="comment">// at by dest.</span>
<a id="L945"></a><span class="ln">   945</span>	<span class="comment">//</span>
<a id="L946"></a><span class="ln">   946</span>	<span class="comment">// If an argument has type *[]byte, Scan saves in that argument a copy</span>
<a id="L947"></a><span class="ln">   947</span>	<span class="comment">// of the corresponding data. The copy is owned by the caller and can</span>
<a id="L948"></a><span class="ln">   948</span>	<span class="comment">// be modified and held indefinitely. The copy can be avoided by using</span>
<a id="L949"></a><span class="ln">   949</span>	<span class="comment">// an argument of type *RawBytes instead; see the documentation for</span>
<a id="L950"></a><span class="ln">   950</span>	<span class="comment">// RawBytes for restrictions on its use.</span>
<a id="L951"></a><span class="ln">   951</span>	<span class="comment">//</span>
<a id="L952"></a><span class="ln">   952</span>	<span class="comment">// If an argument has type *interface{}, Scan copies the value</span>
<a id="L953"></a><span class="ln">   953</span>	<span class="comment">// provided by the underlying driver without conversion. If the value</span>
<a id="L954"></a><span class="ln">   954</span>	<span class="comment">// is of type []byte, a copy is made and the caller owns the result.</span>
<a id="L955"></a><span class="ln">   955</span>	func (rs *Rows) Scan(dest ...interface{}) error {
<a id="L956"></a><span class="ln">   956</span>		if rs.closed {
<a id="L957"></a><span class="ln">   957</span>			return errors.New(&#34;sql: Rows closed&#34;)
<a id="L958"></a><span class="ln">   958</span>		}
<a id="L959"></a><span class="ln">   959</span>		if rs.lasterr != nil {
<a id="L960"></a><span class="ln">   960</span>			return rs.lasterr
<a id="L961"></a><span class="ln">   961</span>		}
<a id="L962"></a><span class="ln">   962</span>		if rs.lastcols == nil {
<a id="L963"></a><span class="ln">   963</span>			return errors.New(&#34;sql: Scan called without calling Next&#34;)
<a id="L964"></a><span class="ln">   964</span>		}
<a id="L965"></a><span class="ln">   965</span>		if len(dest) != len(rs.lastcols) {
<a id="L966"></a><span class="ln">   966</span>			return fmt.Errorf(&#34;sql: expected %d destination arguments in Scan, not %d&#34;, len(rs.lastcols), len(dest))
<a id="L967"></a><span class="ln">   967</span>		}
<a id="L968"></a><span class="ln">   968</span>		for i, sv := range rs.lastcols {
<a id="L969"></a><span class="ln">   969</span>			err := convertAssign(dest[i], sv)
<a id="L970"></a><span class="ln">   970</span>			if err != nil {
<a id="L971"></a><span class="ln">   971</span>				return fmt.Errorf(&#34;sql: Scan error on column index %d: %v&#34;, i, err)
<a id="L972"></a><span class="ln">   972</span>			}
<a id="L973"></a><span class="ln">   973</span>		}
<a id="L974"></a><span class="ln">   974</span>		for _, dp := range dest {
<a id="L975"></a><span class="ln">   975</span>			b, ok := dp.(*[]byte)
<a id="L976"></a><span class="ln">   976</span>			if !ok {
<a id="L977"></a><span class="ln">   977</span>				continue
<a id="L978"></a><span class="ln">   978</span>			}
<a id="L979"></a><span class="ln">   979</span>			if *b == nil {
<a id="L980"></a><span class="ln">   980</span>				<span class="comment">// If the []byte is now nil (for a NULL value),</span>
<a id="L981"></a><span class="ln">   981</span>				<span class="comment">// don&#39;t fall through to below which would</span>
<a id="L982"></a><span class="ln">   982</span>				<span class="comment">// turn it into a non-nil 0-length byte slice</span>
<a id="L983"></a><span class="ln">   983</span>				continue
<a id="L984"></a><span class="ln">   984</span>			}
<a id="L985"></a><span class="ln">   985</span>			if _, ok = dp.(*RawBytes); ok {
<a id="L986"></a><span class="ln">   986</span>				continue
<a id="L987"></a><span class="ln">   987</span>			}
<a id="L988"></a><span class="ln">   988</span>			clone := make([]byte, len(*b))
<a id="L989"></a><span class="ln">   989</span>			copy(clone, *b)
<a id="L990"></a><span class="ln">   990</span>			*b = clone
<a id="L991"></a><span class="ln">   991</span>		}
<a id="L992"></a><span class="ln">   992</span>		return nil
<a id="L993"></a><span class="ln">   993</span>	}
<a id="L994"></a><span class="ln">   994</span>	
<a id="L995"></a><span class="ln">   995</span>	<span class="comment">// Close closes the Rows, preventing further enumeration. If the</span>
<a id="L996"></a><span class="ln">   996</span>	<span class="comment">// end is encountered, the Rows are closed automatically. Close</span>
<a id="L997"></a><span class="ln">   997</span>	<span class="comment">// is idempotent.</span>
<a id="L998"></a><span class="ln">   998</span>	func (rs *Rows) Close() error {
<a id="L999"></a><span class="ln">   999</span>		if rs.closed {
<a id="L1000"></a><span class="ln">  1000</span>			return nil
<a id="L1001"></a><span class="ln">  1001</span>		}
<a id="L1002"></a><span class="ln">  1002</span>		rs.closed = true
<a id="L1003"></a><span class="ln">  1003</span>		err := rs.rowsi.Close()
<a id="L1004"></a><span class="ln">  1004</span>		rs.releaseConn(err)
<a id="L1005"></a><span class="ln">  1005</span>		if rs.closeStmt != nil {
<a id="L1006"></a><span class="ln">  1006</span>			rs.closeStmt.Close()
<a id="L1007"></a><span class="ln">  1007</span>		}
<a id="L1008"></a><span class="ln">  1008</span>		return err
<a id="L1009"></a><span class="ln">  1009</span>	}
<a id="L1010"></a><span class="ln">  1010</span>	
<a id="L1011"></a><span class="ln">  1011</span>	<span class="comment">// Row is the result of calling QueryRow to select a single row.</span>
<a id="L1012"></a><span class="ln">  1012</span>	type Row struct {
<a id="L1013"></a><span class="ln">  1013</span>		<span class="comment">// One of these two will be non-nil:</span>
<a id="L1014"></a><span class="ln">  1014</span>		err  error <span class="comment">// deferred error for easy chaining</span>
<a id="L1015"></a><span class="ln">  1015</span>		rows *Rows
<a id="L1016"></a><span class="ln">  1016</span>	}
<a id="L1017"></a><span class="ln">  1017</span>	
<a id="L1018"></a><span class="ln">  1018</span>	<span class="comment">// Scan copies the columns from the matched row into the values</span>
<a id="L1019"></a><span class="ln">  1019</span>	<span class="comment">// pointed at by dest.  If more than one row matches the query,</span>
<a id="L1020"></a><span class="ln">  1020</span>	<span class="comment">// Scan uses the first row and discards the rest.  If no row matches</span>
<a id="L1021"></a><span class="ln">  1021</span>	<span class="comment">// the query, Scan returns ErrNoRows.</span>
<a id="L1022"></a><span class="ln">  1022</span>	func (r *Row) Scan(dest ...interface{}) error {
<a id="L1023"></a><span class="ln">  1023</span>		if r.err != nil {
<a id="L1024"></a><span class="ln">  1024</span>			return r.err
<a id="L1025"></a><span class="ln">  1025</span>		}
<a id="L1026"></a><span class="ln">  1026</span>	
<a id="L1027"></a><span class="ln">  1027</span>		<span class="comment">// TODO(bradfitz): for now we need to defensively clone all</span>
<a id="L1028"></a><span class="ln">  1028</span>		<span class="comment">// []byte that the driver returned (not permitting</span>
<a id="L1029"></a><span class="ln">  1029</span>		<span class="comment">// *RawBytes in Rows.Scan), since we&#39;re about to close</span>
<a id="L1030"></a><span class="ln">  1030</span>		<span class="comment">// the Rows in our defer, when we return from this function.</span>
<a id="L1031"></a><span class="ln">  1031</span>		<span class="comment">// the contract with the driver.Next(...) interface is that it</span>
<a id="L1032"></a><span class="ln">  1032</span>		<span class="comment">// can return slices into read-only temporary memory that&#39;s</span>
<a id="L1033"></a><span class="ln">  1033</span>		<span class="comment">// only valid until the next Scan/Close.  But the TODO is that</span>
<a id="L1034"></a><span class="ln">  1034</span>		<span class="comment">// for a lot of drivers, this copy will be unnecessary.  We</span>
<a id="L1035"></a><span class="ln">  1035</span>		<span class="comment">// should provide an optional interface for drivers to</span>
<a id="L1036"></a><span class="ln">  1036</span>		<span class="comment">// implement to say, &#34;don&#39;t worry, the []bytes that I return</span>
<a id="L1037"></a><span class="ln">  1037</span>		<span class="comment">// from Next will not be modified again.&#34; (for instance, if</span>
<a id="L1038"></a><span class="ln">  1038</span>		<span class="comment">// they were obtained from the network anyway) But for now we</span>
<a id="L1039"></a><span class="ln">  1039</span>		<span class="comment">// don&#39;t care.</span>
<a id="L1040"></a><span class="ln">  1040</span>		for _, dp := range dest {
<a id="L1041"></a><span class="ln">  1041</span>			if _, ok := dp.(*RawBytes); ok {
<a id="L1042"></a><span class="ln">  1042</span>				return errors.New(&#34;sql: RawBytes isn&#39;t allowed on Row.Scan&#34;)
<a id="L1043"></a><span class="ln">  1043</span>			}
<a id="L1044"></a><span class="ln">  1044</span>		}
<a id="L1045"></a><span class="ln">  1045</span>	
<a id="L1046"></a><span class="ln">  1046</span>		defer r.rows.Close()
<a id="L1047"></a><span class="ln">  1047</span>		if !r.rows.Next() {
<a id="L1048"></a><span class="ln">  1048</span>			return ErrNoRows
<a id="L1049"></a><span class="ln">  1049</span>		}
<a id="L1050"></a><span class="ln">  1050</span>		err := r.rows.Scan(dest...)
<a id="L1051"></a><span class="ln">  1051</span>		if err != nil {
<a id="L1052"></a><span class="ln">  1052</span>			return err
<a id="L1053"></a><span class="ln">  1053</span>		}
<a id="L1054"></a><span class="ln">  1054</span>	
<a id="L1055"></a><span class="ln">  1055</span>		return nil
<a id="L1056"></a><span class="ln">  1056</span>	}
<a id="L1057"></a><span class="ln">  1057</span>	
<a id="L1058"></a><span class="ln">  1058</span>	<span class="comment">// A Result summarizes an executed SQL command.</span>
<a id="L1059"></a><span class="ln">  1059</span>	type Result interface {
<a id="L1060"></a><span class="ln">  1060</span>		LastInsertId() (int64, error)
<a id="L1061"></a><span class="ln">  1061</span>		RowsAffected() (int64, error)
<a id="L1062"></a><span class="ln">  1062</span>	}
<a id="L1063"></a><span class="ln">  1063</span>	
<a id="L1064"></a><span class="ln">  1064</span>	type result struct {
<a id="L1065"></a><span class="ln">  1065</span>		driver.Result
<a id="L1066"></a><span class="ln">  1066</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

