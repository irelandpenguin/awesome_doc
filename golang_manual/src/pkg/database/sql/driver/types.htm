<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/database/sql/driver/types.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/database/sql/driver/types.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package driver
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;fmt&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;reflect&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;strconv&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;time&#34;
<a id="L12"></a><span class="ln">    12</span>	)
<a id="L13"></a><span class="ln">    13</span>	
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// ValueConverter is the interface providing the ConvertValue method.</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">//</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// Various implementations of ValueConverter are provided by the</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// driver package to provide consistent implementations of conversions</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// between drivers.  The ValueConverters have several uses:</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">//</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">//  * converting from the Value types as provided by the sql package</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">//    into a database table&#39;s specific column type and making sure it</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">//    fits, such as making sure a particular int64 fits in a</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">//    table&#39;s uint16 column.</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">//  * converting a value as given from the database into one of the</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">//    driver Value types.</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">//</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">//  * by the sql package, for converting from a driver&#39;s Value type</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">//    to a user&#39;s type in a scan.</span>
<a id="L30"></a><span class="ln">    30</span>	type ValueConverter interface {
<a id="L31"></a><span class="ln">    31</span>		<span class="comment">// ConvertValue converts a value to a driver Value.</span>
<a id="L32"></a><span class="ln">    32</span>		ConvertValue(v interface{}) (Value, error)
<a id="L33"></a><span class="ln">    33</span>	}
<a id="L34"></a><span class="ln">    34</span>	
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// Valuer is the interface providing the Value method.</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// Types implementing Valuer interface are able to convert</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// themselves to a driver Value.</span>
<a id="L39"></a><span class="ln">    39</span>	type Valuer interface {
<a id="L40"></a><span class="ln">    40</span>		<span class="comment">// Value returns a driver Value.</span>
<a id="L41"></a><span class="ln">    41</span>		Value() (Value, error)
<a id="L42"></a><span class="ln">    42</span>	}
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">// Bool is a ValueConverter that converts input values to bools.</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">//</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">// The conversion rules are:</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">//  - booleans are returned unchanged</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">//  - for integer types,</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">//       1 is true</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">//       0 is false,</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">//       other integers are an error</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">//  - for strings and []byte, same rules as strconv.ParseBool</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">//  - all other types are an error</span>
<a id="L54"></a><span class="ln">    54</span>	var Bool boolType
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>	type boolType struct{}
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>	var _ ValueConverter = boolType{}
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	func (boolType) String() string { return &#34;Bool&#34; }
<a id="L61"></a><span class="ln">    61</span>	
<a id="L62"></a><span class="ln">    62</span>	func (boolType) ConvertValue(src interface{}) (Value, error) {
<a id="L63"></a><span class="ln">    63</span>		switch s := src.(type) {
<a id="L64"></a><span class="ln">    64</span>		case bool:
<a id="L65"></a><span class="ln">    65</span>			return s, nil
<a id="L66"></a><span class="ln">    66</span>		case string:
<a id="L67"></a><span class="ln">    67</span>			b, err := strconv.ParseBool(s)
<a id="L68"></a><span class="ln">    68</span>			if err != nil {
<a id="L69"></a><span class="ln">    69</span>				return nil, fmt.Errorf(&#34;sql/driver: couldn&#39;t convert %q into type bool&#34;, s)
<a id="L70"></a><span class="ln">    70</span>			}
<a id="L71"></a><span class="ln">    71</span>			return b, nil
<a id="L72"></a><span class="ln">    72</span>		case []byte:
<a id="L73"></a><span class="ln">    73</span>			b, err := strconv.ParseBool(string(s))
<a id="L74"></a><span class="ln">    74</span>			if err != nil {
<a id="L75"></a><span class="ln">    75</span>				return nil, fmt.Errorf(&#34;sql/driver: couldn&#39;t convert %q into type bool&#34;, s)
<a id="L76"></a><span class="ln">    76</span>			}
<a id="L77"></a><span class="ln">    77</span>			return b, nil
<a id="L78"></a><span class="ln">    78</span>		}
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>		sv := reflect.ValueOf(src)
<a id="L81"></a><span class="ln">    81</span>		switch sv.Kind() {
<a id="L82"></a><span class="ln">    82</span>		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<a id="L83"></a><span class="ln">    83</span>			iv := sv.Int()
<a id="L84"></a><span class="ln">    84</span>			if iv == 1 || iv == 0 {
<a id="L85"></a><span class="ln">    85</span>				return iv == 1, nil
<a id="L86"></a><span class="ln">    86</span>			}
<a id="L87"></a><span class="ln">    87</span>			return nil, fmt.Errorf(&#34;sql/driver: couldn&#39;t convert %d into type bool&#34;, iv)
<a id="L88"></a><span class="ln">    88</span>		case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
<a id="L89"></a><span class="ln">    89</span>			uv := sv.Uint()
<a id="L90"></a><span class="ln">    90</span>			if uv == 1 || uv == 0 {
<a id="L91"></a><span class="ln">    91</span>				return uv == 1, nil
<a id="L92"></a><span class="ln">    92</span>			}
<a id="L93"></a><span class="ln">    93</span>			return nil, fmt.Errorf(&#34;sql/driver: couldn&#39;t convert %d into type bool&#34;, uv)
<a id="L94"></a><span class="ln">    94</span>		}
<a id="L95"></a><span class="ln">    95</span>	
<a id="L96"></a><span class="ln">    96</span>		return nil, fmt.Errorf(&#34;sql/driver: couldn&#39;t convert %v (%T) into type bool&#34;, src, src)
<a id="L97"></a><span class="ln">    97</span>	}
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">// Int32 is a ValueConverter that converts input values to int64,</span>
<a id="L100"></a><span class="ln">   100</span>	<span class="comment">// respecting the limits of an int32 value.</span>
<a id="L101"></a><span class="ln">   101</span>	var Int32 int32Type
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>	type int32Type struct{}
<a id="L104"></a><span class="ln">   104</span>	
<a id="L105"></a><span class="ln">   105</span>	var _ ValueConverter = int32Type{}
<a id="L106"></a><span class="ln">   106</span>	
<a id="L107"></a><span class="ln">   107</span>	func (int32Type) ConvertValue(v interface{}) (Value, error) {
<a id="L108"></a><span class="ln">   108</span>		rv := reflect.ValueOf(v)
<a id="L109"></a><span class="ln">   109</span>		switch rv.Kind() {
<a id="L110"></a><span class="ln">   110</span>		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<a id="L111"></a><span class="ln">   111</span>			i64 := rv.Int()
<a id="L112"></a><span class="ln">   112</span>			if i64 &gt; (1&lt;&lt;31)-1 || i64 &lt; -(1&lt;&lt;31) {
<a id="L113"></a><span class="ln">   113</span>				return nil, fmt.Errorf(&#34;sql/driver: value %d overflows int32&#34;, v)
<a id="L114"></a><span class="ln">   114</span>			}
<a id="L115"></a><span class="ln">   115</span>			return i64, nil
<a id="L116"></a><span class="ln">   116</span>		case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
<a id="L117"></a><span class="ln">   117</span>			u64 := rv.Uint()
<a id="L118"></a><span class="ln">   118</span>			if u64 &gt; (1&lt;&lt;31)-1 {
<a id="L119"></a><span class="ln">   119</span>				return nil, fmt.Errorf(&#34;sql/driver: value %d overflows int32&#34;, v)
<a id="L120"></a><span class="ln">   120</span>			}
<a id="L121"></a><span class="ln">   121</span>			return int64(u64), nil
<a id="L122"></a><span class="ln">   122</span>		case reflect.String:
<a id="L123"></a><span class="ln">   123</span>			i, err := strconv.Atoi(rv.String())
<a id="L124"></a><span class="ln">   124</span>			if err != nil {
<a id="L125"></a><span class="ln">   125</span>				return nil, fmt.Errorf(&#34;sql/driver: value %q can&#39;t be converted to int32&#34;, v)
<a id="L126"></a><span class="ln">   126</span>			}
<a id="L127"></a><span class="ln">   127</span>			return int64(i), nil
<a id="L128"></a><span class="ln">   128</span>		}
<a id="L129"></a><span class="ln">   129</span>		return nil, fmt.Errorf(&#34;sql/driver: unsupported value %v (type %T) converting to int32&#34;, v, v)
<a id="L130"></a><span class="ln">   130</span>	}
<a id="L131"></a><span class="ln">   131</span>	
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">// String is a ValueConverter that converts its input to a string.</span>
<a id="L133"></a><span class="ln">   133</span>	<span class="comment">// If the value is already a string or []byte, it&#39;s unchanged.</span>
<a id="L134"></a><span class="ln">   134</span>	<span class="comment">// If the value is of another type, conversion to string is done</span>
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">// with fmt.Sprintf(&#34;%v&#34;, v).</span>
<a id="L136"></a><span class="ln">   136</span>	var String stringType
<a id="L137"></a><span class="ln">   137</span>	
<a id="L138"></a><span class="ln">   138</span>	type stringType struct{}
<a id="L139"></a><span class="ln">   139</span>	
<a id="L140"></a><span class="ln">   140</span>	func (stringType) ConvertValue(v interface{}) (Value, error) {
<a id="L141"></a><span class="ln">   141</span>		switch v.(type) {
<a id="L142"></a><span class="ln">   142</span>		case string, []byte:
<a id="L143"></a><span class="ln">   143</span>			return v, nil
<a id="L144"></a><span class="ln">   144</span>		}
<a id="L145"></a><span class="ln">   145</span>		return fmt.Sprintf(&#34;%v&#34;, v), nil
<a id="L146"></a><span class="ln">   146</span>	}
<a id="L147"></a><span class="ln">   147</span>	
<a id="L148"></a><span class="ln">   148</span>	<span class="comment">// Null is a type that implements ValueConverter by allowing nil</span>
<a id="L149"></a><span class="ln">   149</span>	<span class="comment">// values but otherwise delegating to another ValueConverter.</span>
<a id="L150"></a><span class="ln">   150</span>	type Null struct {
<a id="L151"></a><span class="ln">   151</span>		Converter ValueConverter
<a id="L152"></a><span class="ln">   152</span>	}
<a id="L153"></a><span class="ln">   153</span>	
<a id="L154"></a><span class="ln">   154</span>	func (n Null) ConvertValue(v interface{}) (Value, error) {
<a id="L155"></a><span class="ln">   155</span>		if v == nil {
<a id="L156"></a><span class="ln">   156</span>			return nil, nil
<a id="L157"></a><span class="ln">   157</span>		}
<a id="L158"></a><span class="ln">   158</span>		return n.Converter.ConvertValue(v)
<a id="L159"></a><span class="ln">   159</span>	}
<a id="L160"></a><span class="ln">   160</span>	
<a id="L161"></a><span class="ln">   161</span>	<span class="comment">// NotNull is a type that implements ValueConverter by disallowing nil</span>
<a id="L162"></a><span class="ln">   162</span>	<span class="comment">// values but otherwise delegating to another ValueConverter.</span>
<a id="L163"></a><span class="ln">   163</span>	type NotNull struct {
<a id="L164"></a><span class="ln">   164</span>		Converter ValueConverter
<a id="L165"></a><span class="ln">   165</span>	}
<a id="L166"></a><span class="ln">   166</span>	
<a id="L167"></a><span class="ln">   167</span>	func (n NotNull) ConvertValue(v interface{}) (Value, error) {
<a id="L168"></a><span class="ln">   168</span>		if v == nil {
<a id="L169"></a><span class="ln">   169</span>			return nil, fmt.Errorf(&#34;nil value not allowed&#34;)
<a id="L170"></a><span class="ln">   170</span>		}
<a id="L171"></a><span class="ln">   171</span>		return n.Converter.ConvertValue(v)
<a id="L172"></a><span class="ln">   172</span>	}
<a id="L173"></a><span class="ln">   173</span>	
<a id="L174"></a><span class="ln">   174</span>	<span class="comment">// IsValue reports whether v is a valid Value parameter type.</span>
<a id="L175"></a><span class="ln">   175</span>	<span class="comment">// Unlike IsScanValue, IsValue permits the string type.</span>
<a id="L176"></a><span class="ln">   176</span>	func IsValue(v interface{}) bool {
<a id="L177"></a><span class="ln">   177</span>		if IsScanValue(v) {
<a id="L178"></a><span class="ln">   178</span>			return true
<a id="L179"></a><span class="ln">   179</span>		}
<a id="L180"></a><span class="ln">   180</span>		if _, ok := v.(string); ok {
<a id="L181"></a><span class="ln">   181</span>			return true
<a id="L182"></a><span class="ln">   182</span>		}
<a id="L183"></a><span class="ln">   183</span>		return false
<a id="L184"></a><span class="ln">   184</span>	}
<a id="L185"></a><span class="ln">   185</span>	
<a id="L186"></a><span class="ln">   186</span>	<span class="comment">// IsScanValue reports whether v is a valid Value scan type.</span>
<a id="L187"></a><span class="ln">   187</span>	<span class="comment">// Unlike IsValue, IsScanValue does not permit the string type.</span>
<a id="L188"></a><span class="ln">   188</span>	func IsScanValue(v interface{}) bool {
<a id="L189"></a><span class="ln">   189</span>		if v == nil {
<a id="L190"></a><span class="ln">   190</span>			return true
<a id="L191"></a><span class="ln">   191</span>		}
<a id="L192"></a><span class="ln">   192</span>		switch v.(type) {
<a id="L193"></a><span class="ln">   193</span>		case int64, float64, []byte, bool, time.Time:
<a id="L194"></a><span class="ln">   194</span>			return true
<a id="L195"></a><span class="ln">   195</span>		}
<a id="L196"></a><span class="ln">   196</span>		return false
<a id="L197"></a><span class="ln">   197</span>	}
<a id="L198"></a><span class="ln">   198</span>	
<a id="L199"></a><span class="ln">   199</span>	<span class="comment">// DefaultParameterConverter is the default implementation of</span>
<a id="L200"></a><span class="ln">   200</span>	<span class="comment">// ValueConverter that&#39;s used when a Stmt doesn&#39;t implement</span>
<a id="L201"></a><span class="ln">   201</span>	<span class="comment">// ColumnConverter.</span>
<a id="L202"></a><span class="ln">   202</span>	<span class="comment">//</span>
<a id="L203"></a><span class="ln">   203</span>	<span class="comment">// DefaultParameterConverter returns the given value directly if</span>
<a id="L204"></a><span class="ln">   204</span>	<span class="comment">// IsValue(value).  Otherwise integer type are converted to</span>
<a id="L205"></a><span class="ln">   205</span>	<span class="comment">// int64, floats to float64, and strings to []byte.  Other types are</span>
<a id="L206"></a><span class="ln">   206</span>	<span class="comment">// an error.</span>
<a id="L207"></a><span class="ln">   207</span>	var DefaultParameterConverter defaultConverter
<a id="L208"></a><span class="ln">   208</span>	
<a id="L209"></a><span class="ln">   209</span>	type defaultConverter struct{}
<a id="L210"></a><span class="ln">   210</span>	
<a id="L211"></a><span class="ln">   211</span>	var _ ValueConverter = defaultConverter{}
<a id="L212"></a><span class="ln">   212</span>	
<a id="L213"></a><span class="ln">   213</span>	func (defaultConverter) ConvertValue(v interface{}) (Value, error) {
<a id="L214"></a><span class="ln">   214</span>		if IsValue(v) {
<a id="L215"></a><span class="ln">   215</span>			return v, nil
<a id="L216"></a><span class="ln">   216</span>		}
<a id="L217"></a><span class="ln">   217</span>	
<a id="L218"></a><span class="ln">   218</span>		if svi, ok := v.(Valuer); ok {
<a id="L219"></a><span class="ln">   219</span>			sv, err := svi.Value()
<a id="L220"></a><span class="ln">   220</span>			if err != nil {
<a id="L221"></a><span class="ln">   221</span>				return nil, err
<a id="L222"></a><span class="ln">   222</span>			}
<a id="L223"></a><span class="ln">   223</span>			if !IsValue(sv) {
<a id="L224"></a><span class="ln">   224</span>				return nil, fmt.Errorf(&#34;non-Value type %T returned from Value&#34;, sv)
<a id="L225"></a><span class="ln">   225</span>			}
<a id="L226"></a><span class="ln">   226</span>			return sv, nil
<a id="L227"></a><span class="ln">   227</span>		}
<a id="L228"></a><span class="ln">   228</span>	
<a id="L229"></a><span class="ln">   229</span>		rv := reflect.ValueOf(v)
<a id="L230"></a><span class="ln">   230</span>		switch rv.Kind() {
<a id="L231"></a><span class="ln">   231</span>		case reflect.Ptr:
<a id="L232"></a><span class="ln">   232</span>			<span class="comment">// indirect pointers</span>
<a id="L233"></a><span class="ln">   233</span>			if rv.IsNil() {
<a id="L234"></a><span class="ln">   234</span>				return nil, nil
<a id="L235"></a><span class="ln">   235</span>			} else {
<a id="L236"></a><span class="ln">   236</span>				return defaultConverter{}.ConvertValue(rv.Elem().Interface())
<a id="L237"></a><span class="ln">   237</span>			}
<a id="L238"></a><span class="ln">   238</span>		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<a id="L239"></a><span class="ln">   239</span>			return rv.Int(), nil
<a id="L240"></a><span class="ln">   240</span>		case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32:
<a id="L241"></a><span class="ln">   241</span>			return int64(rv.Uint()), nil
<a id="L242"></a><span class="ln">   242</span>		case reflect.Uint64:
<a id="L243"></a><span class="ln">   243</span>			u64 := rv.Uint()
<a id="L244"></a><span class="ln">   244</span>			if u64 &gt;= 1&lt;&lt;63 {
<a id="L245"></a><span class="ln">   245</span>				return nil, fmt.Errorf(&#34;uint64 values with high bit set are not supported&#34;)
<a id="L246"></a><span class="ln">   246</span>			}
<a id="L247"></a><span class="ln">   247</span>			return int64(u64), nil
<a id="L248"></a><span class="ln">   248</span>		case reflect.Float32, reflect.Float64:
<a id="L249"></a><span class="ln">   249</span>			return rv.Float(), nil
<a id="L250"></a><span class="ln">   250</span>		}
<a id="L251"></a><span class="ln">   251</span>		return nil, fmt.Errorf(&#34;unsupported type %T, a %s&#34;, v, rv.Kind())
<a id="L252"></a><span class="ln">   252</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

