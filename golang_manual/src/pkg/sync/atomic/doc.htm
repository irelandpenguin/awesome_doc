<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/sync/atomic/doc.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/sync/atomic/doc.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package atomic provides low-level atomic memory primitives</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// useful for implementing synchronization algorithms.</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">//</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// These functions require great care to be used correctly.</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// Except for special, low-level applications, synchronization is better</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// done with channels or the facilities of the sync package.</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// Share memory by communicating;</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// don&#39;t communicate by sharing memory.</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">//</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// The compare-and-swap operation, implemented by the CompareAndSwapT</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// functions, is the atomic equivalent of:</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">//</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">//	if *val == old {</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">//		*val = new</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">//		return true</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">//	}</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">//	return false</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">//</span>
<a id="L23"></a><span class="ln">    23</span>	package atomic
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	import (
<a id="L26"></a><span class="ln">    26</span>		&#34;unsafe&#34;
<a id="L27"></a><span class="ln">    27</span>	)
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// BUG(rsc): On ARM, the 64-bit functions use instructions unavailable before ARM 11.</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">//</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// On x86-32, the 64-bit functions use instructions unavailable before the Pentium MMX.</span>
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// CompareAndSwapInt32 executes the compare-and-swap operation for an int32 value.</span>
<a id="L34"></a><span class="ln">    34</span>	func CompareAndSwapInt32(val *int32, old, new int32) (swapped bool)
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// CompareAndSwapInt64 executes the compare-and-swap operation for an int64 value.</span>
<a id="L37"></a><span class="ln">    37</span>	func CompareAndSwapInt64(val *int64, old, new int64) (swapped bool)
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// CompareAndSwapUint32 executes the compare-and-swap operation for a uint32 value.</span>
<a id="L40"></a><span class="ln">    40</span>	func CompareAndSwapUint32(val *uint32, old, new uint32) (swapped bool)
<a id="L41"></a><span class="ln">    41</span>	
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">// CompareAndSwapUint64 executes the compare-and-swap operation for a uint64 value.</span>
<a id="L43"></a><span class="ln">    43</span>	func CompareAndSwapUint64(val *uint64, old, new uint64) (swapped bool)
<a id="L44"></a><span class="ln">    44</span>	
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">// CompareAndSwapUintptr executes the compare-and-swap operation for a uintptr value.</span>
<a id="L46"></a><span class="ln">    46</span>	func CompareAndSwapUintptr(val *uintptr, old, new uintptr) (swapped bool)
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">// CompareAndSwapPointer executes the compare-and-swap operation for a unsafe.Pointer value.</span>
<a id="L49"></a><span class="ln">    49</span>	func CompareAndSwapPointer(val *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// AddInt32 atomically adds delta to *val and returns the new value.</span>
<a id="L52"></a><span class="ln">    52</span>	func AddInt32(val *int32, delta int32) (new int32)
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">// AddUint32 atomically adds delta to *val and returns the new value.</span>
<a id="L55"></a><span class="ln">    55</span>	func AddUint32(val *uint32, delta uint32) (new uint32)
<a id="L56"></a><span class="ln">    56</span>	
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">// AddInt64 atomically adds delta to *val and returns the new value.</span>
<a id="L58"></a><span class="ln">    58</span>	func AddInt64(val *int64, delta int64) (new int64)
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// AddUint64 atomically adds delta to *val and returns the new value.</span>
<a id="L61"></a><span class="ln">    61</span>	func AddUint64(val *uint64, delta uint64) (new uint64)
<a id="L62"></a><span class="ln">    62</span>	
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">// AddUintptr atomically adds delta to *val and returns the new value.</span>
<a id="L64"></a><span class="ln">    64</span>	func AddUintptr(val *uintptr, delta uintptr) (new uintptr)
<a id="L65"></a><span class="ln">    65</span>	
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">// LoadInt32 atomically loads *addr.</span>
<a id="L67"></a><span class="ln">    67</span>	func LoadInt32(addr *int32) (val int32)
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// LoadInt64 atomically loads *addr.</span>
<a id="L70"></a><span class="ln">    70</span>	func LoadInt64(addr *int64) (val int64)
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">// LoadUint32 atomically loads *addr.</span>
<a id="L73"></a><span class="ln">    73</span>	func LoadUint32(addr *uint32) (val uint32)
<a id="L74"></a><span class="ln">    74</span>	
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">// LoadUint64 atomically loads *addr.</span>
<a id="L76"></a><span class="ln">    76</span>	func LoadUint64(addr *uint64) (val uint64)
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// LoadUintptr atomically loads *addr.</span>
<a id="L79"></a><span class="ln">    79</span>	func LoadUintptr(addr *uintptr) (val uintptr)
<a id="L80"></a><span class="ln">    80</span>	
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// LoadPointer atomically loads *addr.</span>
<a id="L82"></a><span class="ln">    82</span>	func LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">// StoreInt32 atomically stores val into *addr.</span>
<a id="L85"></a><span class="ln">    85</span>	func StoreInt32(addr *int32, val int32)
<a id="L86"></a><span class="ln">    86</span>	
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">// StoreInt64 atomically stores val into *addr.</span>
<a id="L88"></a><span class="ln">    88</span>	func StoreInt64(addr *int64, val int64)
<a id="L89"></a><span class="ln">    89</span>	
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// StoreUint32 atomically stores val into *addr.</span>
<a id="L91"></a><span class="ln">    91</span>	func StoreUint32(addr *uint32, val uint32)
<a id="L92"></a><span class="ln">    92</span>	
<a id="L93"></a><span class="ln">    93</span>	<span class="comment">// StoreUint64 atomically stores val into *addr.</span>
<a id="L94"></a><span class="ln">    94</span>	func StoreUint64(addr *uint64, val uint64)
<a id="L95"></a><span class="ln">    95</span>	
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">// StoreUintptr atomically stores val into *addr.</span>
<a id="L97"></a><span class="ln">    97</span>	func StoreUintptr(addr *uintptr, val uintptr)
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">// StorePointer atomically stores val into *addr.</span>
<a id="L100"></a><span class="ln">   100</span>	func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)
<a id="L101"></a><span class="ln">   101</span>	
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">// Helper for ARM.  Linker will discard on other systems</span>
<a id="L103"></a><span class="ln">   103</span>	func panic64() {
<a id="L104"></a><span class="ln">   104</span>		panic(&#34;sync/atomic: broken 64-bit atomic operations (buggy QEMU)&#34;)
<a id="L105"></a><span class="ln">   105</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

