<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/sync/rwmutex.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/sync/rwmutex.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package sync
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import &#34;sync/atomic&#34;
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// An RWMutex is a reader/writer mutual exclusion lock.</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// The lock can be held by an arbitrary number of readers</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// or a single writer.</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// RWMutexes can be created as part of other</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// structures; the zero value for a RWMutex is</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// an unlocked mutex.</span>
<a id="L15"></a><span class="ln">    15</span>	type RWMutex struct {
<a id="L16"></a><span class="ln">    16</span>		w           Mutex  <span class="comment">// held if there are pending writers</span>
<a id="L17"></a><span class="ln">    17</span>		writerSem   uint32 <span class="comment">// semaphore for writers to wait for completing readers</span>
<a id="L18"></a><span class="ln">    18</span>		readerSem   uint32 <span class="comment">// semaphore for readers to wait for completing writers</span>
<a id="L19"></a><span class="ln">    19</span>		readerCount int32  <span class="comment">// number of pending readers</span>
<a id="L20"></a><span class="ln">    20</span>		readerWait  int32  <span class="comment">// number of departing readers</span>
<a id="L21"></a><span class="ln">    21</span>	}
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	const rwmutexMaxReaders = 1 &lt;&lt; 30
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// RLock locks rw for reading.</span>
<a id="L26"></a><span class="ln">    26</span>	func (rw *RWMutex) RLock() {
<a id="L27"></a><span class="ln">    27</span>		if atomic.AddInt32(&amp;rw.readerCount, 1) &lt; 0 {
<a id="L28"></a><span class="ln">    28</span>			<span class="comment">// A writer is pending, wait for it.</span>
<a id="L29"></a><span class="ln">    29</span>			runtime_Semacquire(&amp;rw.readerSem)
<a id="L30"></a><span class="ln">    30</span>		}
<a id="L31"></a><span class="ln">    31</span>	}
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// RUnlock undoes a single RLock call;</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// it does not affect other simultaneous readers.</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// It is a run-time error if rw is not locked for reading</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// on entry to RUnlock.</span>
<a id="L37"></a><span class="ln">    37</span>	func (rw *RWMutex) RUnlock() {
<a id="L38"></a><span class="ln">    38</span>		if atomic.AddInt32(&amp;rw.readerCount, -1) &lt; 0 {
<a id="L39"></a><span class="ln">    39</span>			<span class="comment">// A writer is pending.</span>
<a id="L40"></a><span class="ln">    40</span>			if atomic.AddInt32(&amp;rw.readerWait, -1) == 0 {
<a id="L41"></a><span class="ln">    41</span>				<span class="comment">// The last reader unblocks the writer.</span>
<a id="L42"></a><span class="ln">    42</span>				runtime_Semrelease(&amp;rw.writerSem)
<a id="L43"></a><span class="ln">    43</span>			}
<a id="L44"></a><span class="ln">    44</span>		}
<a id="L45"></a><span class="ln">    45</span>	}
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">// Lock locks rw for writing.</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">// If the lock is already locked for reading or writing,</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">// Lock blocks until the lock is available.</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// To ensure that the lock eventually becomes available,</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// a blocked Lock call excludes new readers from acquiring</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// the lock.</span>
<a id="L53"></a><span class="ln">    53</span>	func (rw *RWMutex) Lock() {
<a id="L54"></a><span class="ln">    54</span>		<span class="comment">// First, resolve competition with other writers.</span>
<a id="L55"></a><span class="ln">    55</span>		rw.w.Lock()
<a id="L56"></a><span class="ln">    56</span>		<span class="comment">// Announce to readers there is a pending writer.</span>
<a id="L57"></a><span class="ln">    57</span>		r := atomic.AddInt32(&amp;rw.readerCount, -rwmutexMaxReaders) + rwmutexMaxReaders
<a id="L58"></a><span class="ln">    58</span>		<span class="comment">// Wait for active readers.</span>
<a id="L59"></a><span class="ln">    59</span>		if r != 0 &amp;&amp; atomic.AddInt32(&amp;rw.readerWait, r) != 0 {
<a id="L60"></a><span class="ln">    60</span>			runtime_Semacquire(&amp;rw.writerSem)
<a id="L61"></a><span class="ln">    61</span>		}
<a id="L62"></a><span class="ln">    62</span>	}
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// Unlock unlocks rw for writing.  It is a run-time error if rw is</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// not locked for writing on entry to Unlock.</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">//</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// As with Mutexes, a locked RWMutex is not associated with a particular</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// goroutine.  One goroutine may RLock (Lock) an RWMutex and then</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// arrange for another goroutine to RUnlock (Unlock) it.</span>
<a id="L70"></a><span class="ln">    70</span>	func (rw *RWMutex) Unlock() {
<a id="L71"></a><span class="ln">    71</span>		<span class="comment">// Announce to readers there is no active writer.</span>
<a id="L72"></a><span class="ln">    72</span>		r := atomic.AddInt32(&amp;rw.readerCount, rwmutexMaxReaders)
<a id="L73"></a><span class="ln">    73</span>		<span class="comment">// Unblock blocked readers, if any.</span>
<a id="L74"></a><span class="ln">    74</span>		for i := 0; i &lt; int(r); i++ {
<a id="L75"></a><span class="ln">    75</span>			runtime_Semrelease(&amp;rw.readerSem)
<a id="L76"></a><span class="ln">    76</span>		}
<a id="L77"></a><span class="ln">    77</span>		<span class="comment">// Allow other writers to proceed.</span>
<a id="L78"></a><span class="ln">    78</span>		rw.w.Unlock()
<a id="L79"></a><span class="ln">    79</span>	}
<a id="L80"></a><span class="ln">    80</span>	
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// RLocker returns a Locker interface that implements</span>
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">// the Lock and Unlock methods by calling rw.RLock and rw.RUnlock.</span>
<a id="L83"></a><span class="ln">    83</span>	func (rw *RWMutex) RLocker() Locker {
<a id="L84"></a><span class="ln">    84</span>		return (*rlocker)(rw)
<a id="L85"></a><span class="ln">    85</span>	}
<a id="L86"></a><span class="ln">    86</span>	
<a id="L87"></a><span class="ln">    87</span>	type rlocker RWMutex
<a id="L88"></a><span class="ln">    88</span>	
<a id="L89"></a><span class="ln">    89</span>	func (r *rlocker) Lock()   { (*RWMutex)(r).RLock() }
<a id="L90"></a><span class="ln">    90</span>	func (r *rlocker) Unlock() { (*RWMutex)(r).RUnlock() }
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

