<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/log/log.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/log/log.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package log implements a simple logging package. It defines a type, Logger,</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// with methods for formatting output. It also has a predefined &#39;standard&#39;</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// Logger accessible through helper functions Print[f|ln], Fatal[f|ln], and</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// Panic[f|ln], which are easier to use than creating a Logger manually.</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// That logger writes to standard error and prints the date and time</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// of each logged message.</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// The Fatal functions call os.Exit(1) after writing the log message.</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// The Panic functions call panic after writing the log message.</span>
<a id="L13"></a><span class="ln">    13</span>	package log
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	import (
<a id="L16"></a><span class="ln">    16</span>		&#34;fmt&#34;
<a id="L17"></a><span class="ln">    17</span>		&#34;io&#34;
<a id="L18"></a><span class="ln">    18</span>		&#34;os&#34;
<a id="L19"></a><span class="ln">    19</span>		&#34;runtime&#34;
<a id="L20"></a><span class="ln">    20</span>		&#34;sync&#34;
<a id="L21"></a><span class="ln">    21</span>		&#34;time&#34;
<a id="L22"></a><span class="ln">    22</span>	)
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// These flags define which text to prefix to each log entry generated by the Logger.</span>
<a id="L25"></a><span class="ln">    25</span>	const (
<a id="L26"></a><span class="ln">    26</span>		<span class="comment">// Bits or&#39;ed together to control what&#39;s printed. There is no control over the</span>
<a id="L27"></a><span class="ln">    27</span>		<span class="comment">// order they appear (the order listed here) or the format they present (as</span>
<a id="L28"></a><span class="ln">    28</span>		<span class="comment">// described in the comments).  A colon appears after these items:</span>
<a id="L29"></a><span class="ln">    29</span>		<span class="comment">//	2009/0123 01:23:23.123123 /a/b/c/d.go:23: message</span>
<a id="L30"></a><span class="ln">    30</span>		Ldate         = 1 &lt;&lt; iota     <span class="comment">// the date: 2009/01/23</span>
<a id="L31"></a><span class="ln">    31</span>		Ltime                         <span class="comment">// the time: 01:23:23</span>
<a id="L32"></a><span class="ln">    32</span>		Lmicroseconds                 <span class="comment">// microsecond resolution: 01:23:23.123123.  assumes Ltime.</span>
<a id="L33"></a><span class="ln">    33</span>		Llongfile                     <span class="comment">// full file name and line number: /a/b/c/d.go:23</span>
<a id="L34"></a><span class="ln">    34</span>		Lshortfile                    <span class="comment">// final file name element and line number: d.go:23. overrides Llongfile</span>
<a id="L35"></a><span class="ln">    35</span>		LstdFlags     = Ldate | Ltime <span class="comment">// initial values for the standard logger</span>
<a id="L36"></a><span class="ln">    36</span>	)
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// A Logger represents an active logging object that generates lines of</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// output to an io.Writer.  Each logging operation makes a single call to</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// the Writer&#39;s Write method.  A Logger can be used simultaneously from</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// multiple goroutines; it guarantees to serialize access to the Writer.</span>
<a id="L42"></a><span class="ln">    42</span>	type Logger struct {
<a id="L43"></a><span class="ln">    43</span>		mu     sync.Mutex <span class="comment">// ensures atomic writes; protects the following fields</span>
<a id="L44"></a><span class="ln">    44</span>		prefix string     <span class="comment">// prefix to write at beginning of each line</span>
<a id="L45"></a><span class="ln">    45</span>		flag   int        <span class="comment">// properties</span>
<a id="L46"></a><span class="ln">    46</span>		out    io.Writer  <span class="comment">// destination for output</span>
<a id="L47"></a><span class="ln">    47</span>		buf    []byte     <span class="comment">// for accumulating text to write</span>
<a id="L48"></a><span class="ln">    48</span>	}
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// New creates a new Logger.   The out variable sets the</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// destination to which log data will be written.</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// The prefix appears at the beginning of each generated log line.</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">// The flag argument defines the logging properties.</span>
<a id="L54"></a><span class="ln">    54</span>	func New(out io.Writer, prefix string, flag int) *Logger {
<a id="L55"></a><span class="ln">    55</span>		return &amp;Logger{out: out, prefix: prefix, flag: flag}
<a id="L56"></a><span class="ln">    56</span>	}
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>	var std = New(os.Stderr, &#34;&#34;, LstdFlags)
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// Cheap integer to fixed-width decimal ASCII.  Give a negative width to avoid zero-padding.</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">// Knows the buffer has capacity.</span>
<a id="L62"></a><span class="ln">    62</span>	func itoa(buf *[]byte, i int, wid int) {
<a id="L63"></a><span class="ln">    63</span>		var u uint = uint(i)
<a id="L64"></a><span class="ln">    64</span>		if u == 0 &amp;&amp; wid &lt;= 1 {
<a id="L65"></a><span class="ln">    65</span>			*buf = append(*buf, &#39;0&#39;)
<a id="L66"></a><span class="ln">    66</span>			return
<a id="L67"></a><span class="ln">    67</span>		}
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>		<span class="comment">// Assemble decimal in reverse order.</span>
<a id="L70"></a><span class="ln">    70</span>		var b [32]byte
<a id="L71"></a><span class="ln">    71</span>		bp := len(b)
<a id="L72"></a><span class="ln">    72</span>		for ; u &gt; 0 || wid &gt; 0; u /= 10 {
<a id="L73"></a><span class="ln">    73</span>			bp--
<a id="L74"></a><span class="ln">    74</span>			wid--
<a id="L75"></a><span class="ln">    75</span>			b[bp] = byte(u%10) + &#39;0&#39;
<a id="L76"></a><span class="ln">    76</span>		}
<a id="L77"></a><span class="ln">    77</span>		*buf = append(*buf, b[bp:]...)
<a id="L78"></a><span class="ln">    78</span>	}
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>	func (l *Logger) formatHeader(buf *[]byte, t time.Time, file string, line int) {
<a id="L81"></a><span class="ln">    81</span>		*buf = append(*buf, l.prefix...)
<a id="L82"></a><span class="ln">    82</span>		if l.flag&amp;(Ldate|Ltime|Lmicroseconds) != 0 {
<a id="L83"></a><span class="ln">    83</span>			if l.flag&amp;Ldate != 0 {
<a id="L84"></a><span class="ln">    84</span>				year, month, day := t.Date()
<a id="L85"></a><span class="ln">    85</span>				itoa(buf, year, 4)
<a id="L86"></a><span class="ln">    86</span>				*buf = append(*buf, &#39;/&#39;)
<a id="L87"></a><span class="ln">    87</span>				itoa(buf, int(month), 2)
<a id="L88"></a><span class="ln">    88</span>				*buf = append(*buf, &#39;/&#39;)
<a id="L89"></a><span class="ln">    89</span>				itoa(buf, day, 2)
<a id="L90"></a><span class="ln">    90</span>				*buf = append(*buf, &#39; &#39;)
<a id="L91"></a><span class="ln">    91</span>			}
<a id="L92"></a><span class="ln">    92</span>			if l.flag&amp;(Ltime|Lmicroseconds) != 0 {
<a id="L93"></a><span class="ln">    93</span>				hour, min, sec := t.Clock()
<a id="L94"></a><span class="ln">    94</span>				itoa(buf, hour, 2)
<a id="L95"></a><span class="ln">    95</span>				*buf = append(*buf, &#39;:&#39;)
<a id="L96"></a><span class="ln">    96</span>				itoa(buf, min, 2)
<a id="L97"></a><span class="ln">    97</span>				*buf = append(*buf, &#39;:&#39;)
<a id="L98"></a><span class="ln">    98</span>				itoa(buf, sec, 2)
<a id="L99"></a><span class="ln">    99</span>				if l.flag&amp;Lmicroseconds != 0 {
<a id="L100"></a><span class="ln">   100</span>					*buf = append(*buf, &#39;.&#39;)
<a id="L101"></a><span class="ln">   101</span>					itoa(buf, t.Nanosecond()/1e3, 6)
<a id="L102"></a><span class="ln">   102</span>				}
<a id="L103"></a><span class="ln">   103</span>				*buf = append(*buf, &#39; &#39;)
<a id="L104"></a><span class="ln">   104</span>			}
<a id="L105"></a><span class="ln">   105</span>		}
<a id="L106"></a><span class="ln">   106</span>		if l.flag&amp;(Lshortfile|Llongfile) != 0 {
<a id="L107"></a><span class="ln">   107</span>			if l.flag&amp;Lshortfile != 0 {
<a id="L108"></a><span class="ln">   108</span>				short := file
<a id="L109"></a><span class="ln">   109</span>				for i := len(file) - 1; i &gt; 0; i-- {
<a id="L110"></a><span class="ln">   110</span>					if file[i] == &#39;/&#39; {
<a id="L111"></a><span class="ln">   111</span>						short = file[i+1:]
<a id="L112"></a><span class="ln">   112</span>						break
<a id="L113"></a><span class="ln">   113</span>					}
<a id="L114"></a><span class="ln">   114</span>				}
<a id="L115"></a><span class="ln">   115</span>				file = short
<a id="L116"></a><span class="ln">   116</span>			}
<a id="L117"></a><span class="ln">   117</span>			*buf = append(*buf, file...)
<a id="L118"></a><span class="ln">   118</span>			*buf = append(*buf, &#39;:&#39;)
<a id="L119"></a><span class="ln">   119</span>			itoa(buf, line, -1)
<a id="L120"></a><span class="ln">   120</span>			*buf = append(*buf, &#34;: &#34;...)
<a id="L121"></a><span class="ln">   121</span>		}
<a id="L122"></a><span class="ln">   122</span>	}
<a id="L123"></a><span class="ln">   123</span>	
<a id="L124"></a><span class="ln">   124</span>	<span class="comment">// Output writes the output for a logging event.  The string s contains</span>
<a id="L125"></a><span class="ln">   125</span>	<span class="comment">// the text to print after the prefix specified by the flags of the</span>
<a id="L126"></a><span class="ln">   126</span>	<span class="comment">// Logger.  A newline is appended if the last character of s is not</span>
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// already a newline.  Calldepth is used to recover the PC and is</span>
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// provided for generality, although at the moment on all pre-defined</span>
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// paths it will be 2.</span>
<a id="L130"></a><span class="ln">   130</span>	func (l *Logger) Output(calldepth int, s string) error {
<a id="L131"></a><span class="ln">   131</span>		now := time.Now() <span class="comment">// get this early.</span>
<a id="L132"></a><span class="ln">   132</span>		var file string
<a id="L133"></a><span class="ln">   133</span>		var line int
<a id="L134"></a><span class="ln">   134</span>		l.mu.Lock()
<a id="L135"></a><span class="ln">   135</span>		defer l.mu.Unlock()
<a id="L136"></a><span class="ln">   136</span>		if l.flag&amp;(Lshortfile|Llongfile) != 0 {
<a id="L137"></a><span class="ln">   137</span>			<span class="comment">// release lock while getting caller info - it&#39;s expensive.</span>
<a id="L138"></a><span class="ln">   138</span>			l.mu.Unlock()
<a id="L139"></a><span class="ln">   139</span>			var ok bool
<a id="L140"></a><span class="ln">   140</span>			_, file, line, ok = runtime.Caller(calldepth)
<a id="L141"></a><span class="ln">   141</span>			if !ok {
<a id="L142"></a><span class="ln">   142</span>				file = &#34;???&#34;
<a id="L143"></a><span class="ln">   143</span>				line = 0
<a id="L144"></a><span class="ln">   144</span>			}
<a id="L145"></a><span class="ln">   145</span>			l.mu.Lock()
<a id="L146"></a><span class="ln">   146</span>		}
<a id="L147"></a><span class="ln">   147</span>		l.buf = l.buf[:0]
<a id="L148"></a><span class="ln">   148</span>		l.formatHeader(&amp;l.buf, now, file, line)
<a id="L149"></a><span class="ln">   149</span>		l.buf = append(l.buf, s...)
<a id="L150"></a><span class="ln">   150</span>		if len(s) &gt; 0 &amp;&amp; s[len(s)-1] != &#39;\n&#39; {
<a id="L151"></a><span class="ln">   151</span>			l.buf = append(l.buf, &#39;\n&#39;)
<a id="L152"></a><span class="ln">   152</span>		}
<a id="L153"></a><span class="ln">   153</span>		_, err := l.out.Write(l.buf)
<a id="L154"></a><span class="ln">   154</span>		return err
<a id="L155"></a><span class="ln">   155</span>	}
<a id="L156"></a><span class="ln">   156</span>	
<a id="L157"></a><span class="ln">   157</span>	<span class="comment">// Printf calls l.Output to print to the logger.</span>
<a id="L158"></a><span class="ln">   158</span>	<span class="comment">// Arguments are handled in the manner of fmt.Printf.</span>
<a id="L159"></a><span class="ln">   159</span>	func (l *Logger) Printf(format string, v ...interface{}) {
<a id="L160"></a><span class="ln">   160</span>		l.Output(2, fmt.Sprintf(format, v...))
<a id="L161"></a><span class="ln">   161</span>	}
<a id="L162"></a><span class="ln">   162</span>	
<a id="L163"></a><span class="ln">   163</span>	<span class="comment">// Print calls l.Output to print to the logger.</span>
<a id="L164"></a><span class="ln">   164</span>	<span class="comment">// Arguments are handled in the manner of fmt.Print.</span>
<a id="L165"></a><span class="ln">   165</span>	func (l *Logger) Print(v ...interface{}) { l.Output(2, fmt.Sprint(v...)) }
<a id="L166"></a><span class="ln">   166</span>	
<a id="L167"></a><span class="ln">   167</span>	<span class="comment">// Println calls l.Output to print to the logger.</span>
<a id="L168"></a><span class="ln">   168</span>	<span class="comment">// Arguments are handled in the manner of fmt.Println.</span>
<a id="L169"></a><span class="ln">   169</span>	func (l *Logger) Println(v ...interface{}) { l.Output(2, fmt.Sprintln(v...)) }
<a id="L170"></a><span class="ln">   170</span>	
<a id="L171"></a><span class="ln">   171</span>	<span class="comment">// Fatal is equivalent to l.Print() followed by a call to os.Exit(1).</span>
<a id="L172"></a><span class="ln">   172</span>	func (l *Logger) Fatal(v ...interface{}) {
<a id="L173"></a><span class="ln">   173</span>		l.Output(2, fmt.Sprint(v...))
<a id="L174"></a><span class="ln">   174</span>		os.Exit(1)
<a id="L175"></a><span class="ln">   175</span>	}
<a id="L176"></a><span class="ln">   176</span>	
<a id="L177"></a><span class="ln">   177</span>	<span class="comment">// Fatalf is equivalent to l.Printf() followed by a call to os.Exit(1).</span>
<a id="L178"></a><span class="ln">   178</span>	func (l *Logger) Fatalf(format string, v ...interface{}) {
<a id="L179"></a><span class="ln">   179</span>		l.Output(2, fmt.Sprintf(format, v...))
<a id="L180"></a><span class="ln">   180</span>		os.Exit(1)
<a id="L181"></a><span class="ln">   181</span>	}
<a id="L182"></a><span class="ln">   182</span>	
<a id="L183"></a><span class="ln">   183</span>	<span class="comment">// Fatalln is equivalent to l.Println() followed by a call to os.Exit(1).</span>
<a id="L184"></a><span class="ln">   184</span>	func (l *Logger) Fatalln(v ...interface{}) {
<a id="L185"></a><span class="ln">   185</span>		l.Output(2, fmt.Sprintln(v...))
<a id="L186"></a><span class="ln">   186</span>		os.Exit(1)
<a id="L187"></a><span class="ln">   187</span>	}
<a id="L188"></a><span class="ln">   188</span>	
<a id="L189"></a><span class="ln">   189</span>	<span class="comment">// Panic is equivalent to l.Print() followed by a call to panic().</span>
<a id="L190"></a><span class="ln">   190</span>	func (l *Logger) Panic(v ...interface{}) {
<a id="L191"></a><span class="ln">   191</span>		s := fmt.Sprint(v...)
<a id="L192"></a><span class="ln">   192</span>		l.Output(2, s)
<a id="L193"></a><span class="ln">   193</span>		panic(s)
<a id="L194"></a><span class="ln">   194</span>	}
<a id="L195"></a><span class="ln">   195</span>	
<a id="L196"></a><span class="ln">   196</span>	<span class="comment">// Panicf is equivalent to l.Printf() followed by a call to panic().</span>
<a id="L197"></a><span class="ln">   197</span>	func (l *Logger) Panicf(format string, v ...interface{}) {
<a id="L198"></a><span class="ln">   198</span>		s := fmt.Sprintf(format, v...)
<a id="L199"></a><span class="ln">   199</span>		l.Output(2, s)
<a id="L200"></a><span class="ln">   200</span>		panic(s)
<a id="L201"></a><span class="ln">   201</span>	}
<a id="L202"></a><span class="ln">   202</span>	
<a id="L203"></a><span class="ln">   203</span>	<span class="comment">// Panicln is equivalent to l.Println() followed by a call to panic().</span>
<a id="L204"></a><span class="ln">   204</span>	func (l *Logger) Panicln(v ...interface{}) {
<a id="L205"></a><span class="ln">   205</span>		s := fmt.Sprintln(v...)
<a id="L206"></a><span class="ln">   206</span>		l.Output(2, s)
<a id="L207"></a><span class="ln">   207</span>		panic(s)
<a id="L208"></a><span class="ln">   208</span>	}
<a id="L209"></a><span class="ln">   209</span>	
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// Flags returns the output flags for the logger.</span>
<a id="L211"></a><span class="ln">   211</span>	func (l *Logger) Flags() int {
<a id="L212"></a><span class="ln">   212</span>		l.mu.Lock()
<a id="L213"></a><span class="ln">   213</span>		defer l.mu.Unlock()
<a id="L214"></a><span class="ln">   214</span>		return l.flag
<a id="L215"></a><span class="ln">   215</span>	}
<a id="L216"></a><span class="ln">   216</span>	
<a id="L217"></a><span class="ln">   217</span>	<span class="comment">// SetFlags sets the output flags for the logger.</span>
<a id="L218"></a><span class="ln">   218</span>	func (l *Logger) SetFlags(flag int) {
<a id="L219"></a><span class="ln">   219</span>		l.mu.Lock()
<a id="L220"></a><span class="ln">   220</span>		defer l.mu.Unlock()
<a id="L221"></a><span class="ln">   221</span>		l.flag = flag
<a id="L222"></a><span class="ln">   222</span>	}
<a id="L223"></a><span class="ln">   223</span>	
<a id="L224"></a><span class="ln">   224</span>	<span class="comment">// Prefix returns the output prefix for the logger.</span>
<a id="L225"></a><span class="ln">   225</span>	func (l *Logger) Prefix() string {
<a id="L226"></a><span class="ln">   226</span>		l.mu.Lock()
<a id="L227"></a><span class="ln">   227</span>		defer l.mu.Unlock()
<a id="L228"></a><span class="ln">   228</span>		return l.prefix
<a id="L229"></a><span class="ln">   229</span>	}
<a id="L230"></a><span class="ln">   230</span>	
<a id="L231"></a><span class="ln">   231</span>	<span class="comment">// SetPrefix sets the output prefix for the logger.</span>
<a id="L232"></a><span class="ln">   232</span>	func (l *Logger) SetPrefix(prefix string) {
<a id="L233"></a><span class="ln">   233</span>		l.mu.Lock()
<a id="L234"></a><span class="ln">   234</span>		defer l.mu.Unlock()
<a id="L235"></a><span class="ln">   235</span>		l.prefix = prefix
<a id="L236"></a><span class="ln">   236</span>	}
<a id="L237"></a><span class="ln">   237</span>	
<a id="L238"></a><span class="ln">   238</span>	<span class="comment">// SetOutput sets the output destination for the standard logger.</span>
<a id="L239"></a><span class="ln">   239</span>	func SetOutput(w io.Writer) {
<a id="L240"></a><span class="ln">   240</span>		std.mu.Lock()
<a id="L241"></a><span class="ln">   241</span>		defer std.mu.Unlock()
<a id="L242"></a><span class="ln">   242</span>		std.out = w
<a id="L243"></a><span class="ln">   243</span>	}
<a id="L244"></a><span class="ln">   244</span>	
<a id="L245"></a><span class="ln">   245</span>	<span class="comment">// Flags returns the output flags for the standard logger.</span>
<a id="L246"></a><span class="ln">   246</span>	func Flags() int {
<a id="L247"></a><span class="ln">   247</span>		return std.Flags()
<a id="L248"></a><span class="ln">   248</span>	}
<a id="L249"></a><span class="ln">   249</span>	
<a id="L250"></a><span class="ln">   250</span>	<span class="comment">// SetFlags sets the output flags for the standard logger.</span>
<a id="L251"></a><span class="ln">   251</span>	func SetFlags(flag int) {
<a id="L252"></a><span class="ln">   252</span>		std.SetFlags(flag)
<a id="L253"></a><span class="ln">   253</span>	}
<a id="L254"></a><span class="ln">   254</span>	
<a id="L255"></a><span class="ln">   255</span>	<span class="comment">// Prefix returns the output prefix for the standard logger.</span>
<a id="L256"></a><span class="ln">   256</span>	func Prefix() string {
<a id="L257"></a><span class="ln">   257</span>		return std.Prefix()
<a id="L258"></a><span class="ln">   258</span>	}
<a id="L259"></a><span class="ln">   259</span>	
<a id="L260"></a><span class="ln">   260</span>	<span class="comment">// SetPrefix sets the output prefix for the standard logger.</span>
<a id="L261"></a><span class="ln">   261</span>	func SetPrefix(prefix string) {
<a id="L262"></a><span class="ln">   262</span>		std.SetPrefix(prefix)
<a id="L263"></a><span class="ln">   263</span>	}
<a id="L264"></a><span class="ln">   264</span>	
<a id="L265"></a><span class="ln">   265</span>	<span class="comment">// These functions write to the standard logger.</span>
<a id="L266"></a><span class="ln">   266</span>	
<a id="L267"></a><span class="ln">   267</span>	<span class="comment">// Print calls Output to print to the standard logger.</span>
<a id="L268"></a><span class="ln">   268</span>	<span class="comment">// Arguments are handled in the manner of fmt.Print.</span>
<a id="L269"></a><span class="ln">   269</span>	func Print(v ...interface{}) {
<a id="L270"></a><span class="ln">   270</span>		std.Output(2, fmt.Sprint(v...))
<a id="L271"></a><span class="ln">   271</span>	}
<a id="L272"></a><span class="ln">   272</span>	
<a id="L273"></a><span class="ln">   273</span>	<span class="comment">// Printf calls Output to print to the standard logger.</span>
<a id="L274"></a><span class="ln">   274</span>	<span class="comment">// Arguments are handled in the manner of fmt.Printf.</span>
<a id="L275"></a><span class="ln">   275</span>	func Printf(format string, v ...interface{}) {
<a id="L276"></a><span class="ln">   276</span>		std.Output(2, fmt.Sprintf(format, v...))
<a id="L277"></a><span class="ln">   277</span>	}
<a id="L278"></a><span class="ln">   278</span>	
<a id="L279"></a><span class="ln">   279</span>	<span class="comment">// Println calls Output to print to the standard logger.</span>
<a id="L280"></a><span class="ln">   280</span>	<span class="comment">// Arguments are handled in the manner of fmt.Println.</span>
<a id="L281"></a><span class="ln">   281</span>	func Println(v ...interface{}) {
<a id="L282"></a><span class="ln">   282</span>		std.Output(2, fmt.Sprintln(v...))
<a id="L283"></a><span class="ln">   283</span>	}
<a id="L284"></a><span class="ln">   284</span>	
<a id="L285"></a><span class="ln">   285</span>	<span class="comment">// Fatal is equivalent to Print() followed by a call to os.Exit(1).</span>
<a id="L286"></a><span class="ln">   286</span>	func Fatal(v ...interface{}) {
<a id="L287"></a><span class="ln">   287</span>		std.Output(2, fmt.Sprint(v...))
<a id="L288"></a><span class="ln">   288</span>		os.Exit(1)
<a id="L289"></a><span class="ln">   289</span>	}
<a id="L290"></a><span class="ln">   290</span>	
<a id="L291"></a><span class="ln">   291</span>	<span class="comment">// Fatalf is equivalent to Printf() followed by a call to os.Exit(1).</span>
<a id="L292"></a><span class="ln">   292</span>	func Fatalf(format string, v ...interface{}) {
<a id="L293"></a><span class="ln">   293</span>		std.Output(2, fmt.Sprintf(format, v...))
<a id="L294"></a><span class="ln">   294</span>		os.Exit(1)
<a id="L295"></a><span class="ln">   295</span>	}
<a id="L296"></a><span class="ln">   296</span>	
<a id="L297"></a><span class="ln">   297</span>	<span class="comment">// Fatalln is equivalent to Println() followed by a call to os.Exit(1).</span>
<a id="L298"></a><span class="ln">   298</span>	func Fatalln(v ...interface{}) {
<a id="L299"></a><span class="ln">   299</span>		std.Output(2, fmt.Sprintln(v...))
<a id="L300"></a><span class="ln">   300</span>		os.Exit(1)
<a id="L301"></a><span class="ln">   301</span>	}
<a id="L302"></a><span class="ln">   302</span>	
<a id="L303"></a><span class="ln">   303</span>	<span class="comment">// Panic is equivalent to Print() followed by a call to panic().</span>
<a id="L304"></a><span class="ln">   304</span>	func Panic(v ...interface{}) {
<a id="L305"></a><span class="ln">   305</span>		s := fmt.Sprint(v...)
<a id="L306"></a><span class="ln">   306</span>		std.Output(2, s)
<a id="L307"></a><span class="ln">   307</span>		panic(s)
<a id="L308"></a><span class="ln">   308</span>	}
<a id="L309"></a><span class="ln">   309</span>	
<a id="L310"></a><span class="ln">   310</span>	<span class="comment">// Panicf is equivalent to Printf() followed by a call to panic().</span>
<a id="L311"></a><span class="ln">   311</span>	func Panicf(format string, v ...interface{}) {
<a id="L312"></a><span class="ln">   312</span>		s := fmt.Sprintf(format, v...)
<a id="L313"></a><span class="ln">   313</span>		std.Output(2, s)
<a id="L314"></a><span class="ln">   314</span>		panic(s)
<a id="L315"></a><span class="ln">   315</span>	}
<a id="L316"></a><span class="ln">   316</span>	
<a id="L317"></a><span class="ln">   317</span>	<span class="comment">// Panicln is equivalent to Println() followed by a call to panic().</span>
<a id="L318"></a><span class="ln">   318</span>	func Panicln(v ...interface{}) {
<a id="L319"></a><span class="ln">   319</span>		s := fmt.Sprintln(v...)
<a id="L320"></a><span class="ln">   320</span>		std.Output(2, s)
<a id="L321"></a><span class="ln">   321</span>		panic(s)
<a id="L322"></a><span class="ln">   322</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

