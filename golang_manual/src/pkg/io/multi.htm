<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/io/multi.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/io/multi.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package io
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	type multiReader struct {
<a id="L8"></a><span class="ln">     8</span>		readers []Reader
<a id="L9"></a><span class="ln">     9</span>	}
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	func (mr *multiReader) Read(p []byte) (n int, err error) {
<a id="L12"></a><span class="ln">    12</span>		for len(mr.readers) &gt; 0 {
<a id="L13"></a><span class="ln">    13</span>			n, err = mr.readers[0].Read(p)
<a id="L14"></a><span class="ln">    14</span>			if n &gt; 0 || err != EOF {
<a id="L15"></a><span class="ln">    15</span>				if err == EOF {
<a id="L16"></a><span class="ln">    16</span>					<span class="comment">// Don&#39;t return EOF yet. There may be more bytes</span>
<a id="L17"></a><span class="ln">    17</span>					<span class="comment">// in the remaining readers.</span>
<a id="L18"></a><span class="ln">    18</span>					err = nil
<a id="L19"></a><span class="ln">    19</span>				}
<a id="L20"></a><span class="ln">    20</span>				return
<a id="L21"></a><span class="ln">    21</span>			}
<a id="L22"></a><span class="ln">    22</span>			mr.readers = mr.readers[1:]
<a id="L23"></a><span class="ln">    23</span>		}
<a id="L24"></a><span class="ln">    24</span>		return 0, EOF
<a id="L25"></a><span class="ln">    25</span>	}
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// MultiReader returns a Reader that&#39;s the logical concatenation of</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// the provided input readers.  They&#39;re read sequentially.  Once all</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// inputs are drained, Read will return EOF.</span>
<a id="L30"></a><span class="ln">    30</span>	func MultiReader(readers ...Reader) Reader {
<a id="L31"></a><span class="ln">    31</span>		return &amp;multiReader{readers}
<a id="L32"></a><span class="ln">    32</span>	}
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>	type multiWriter struct {
<a id="L35"></a><span class="ln">    35</span>		writers []Writer
<a id="L36"></a><span class="ln">    36</span>	}
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>	func (t *multiWriter) Write(p []byte) (n int, err error) {
<a id="L39"></a><span class="ln">    39</span>		for _, w := range t.writers {
<a id="L40"></a><span class="ln">    40</span>			n, err = w.Write(p)
<a id="L41"></a><span class="ln">    41</span>			if err != nil {
<a id="L42"></a><span class="ln">    42</span>				return
<a id="L43"></a><span class="ln">    43</span>			}
<a id="L44"></a><span class="ln">    44</span>			if n != len(p) {
<a id="L45"></a><span class="ln">    45</span>				err = ErrShortWrite
<a id="L46"></a><span class="ln">    46</span>				return
<a id="L47"></a><span class="ln">    47</span>			}
<a id="L48"></a><span class="ln">    48</span>		}
<a id="L49"></a><span class="ln">    49</span>		return len(p), nil
<a id="L50"></a><span class="ln">    50</span>	}
<a id="L51"></a><span class="ln">    51</span>	
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// MultiWriter creates a writer that duplicates its writes to all the</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">// provided writers, similar to the Unix tee(1) command.</span>
<a id="L54"></a><span class="ln">    54</span>	func MultiWriter(writers ...Writer) Writer {
<a id="L55"></a><span class="ln">    55</span>		return &amp;multiWriter{writers}
<a id="L56"></a><span class="ln">    56</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

