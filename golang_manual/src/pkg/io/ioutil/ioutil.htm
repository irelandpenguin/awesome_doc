<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/io/ioutil/ioutil.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/io/ioutil/ioutil.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package ioutil implements some I/O utility functions.</span>
<a id="L6"></a><span class="ln">     6</span>	package ioutil
<a id="L7"></a><span class="ln">     7</span>	
<a id="L8"></a><span class="ln">     8</span>	import (
<a id="L9"></a><span class="ln">     9</span>		&#34;bytes&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;io&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;os&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;sort&#34;
<a id="L13"></a><span class="ln">    13</span>	)
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// readAll reads from r until an error or EOF and returns the data it read</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// from the internal buffer allocated with a specified capacity.</span>
<a id="L17"></a><span class="ln">    17</span>	func readAll(r io.Reader, capacity int64) (b []byte, err error) {
<a id="L18"></a><span class="ln">    18</span>		buf := bytes.NewBuffer(make([]byte, 0, capacity))
<a id="L19"></a><span class="ln">    19</span>		<span class="comment">// If the buffer overflows, we will get bytes.ErrTooLarge.</span>
<a id="L20"></a><span class="ln">    20</span>		<span class="comment">// Return that as an error. Any other panic remains.</span>
<a id="L21"></a><span class="ln">    21</span>		defer func() {
<a id="L22"></a><span class="ln">    22</span>			e := recover()
<a id="L23"></a><span class="ln">    23</span>			if e == nil {
<a id="L24"></a><span class="ln">    24</span>				return
<a id="L25"></a><span class="ln">    25</span>			}
<a id="L26"></a><span class="ln">    26</span>			if panicErr, ok := e.(error); ok &amp;&amp; panicErr == bytes.ErrTooLarge {
<a id="L27"></a><span class="ln">    27</span>				err = panicErr
<a id="L28"></a><span class="ln">    28</span>			} else {
<a id="L29"></a><span class="ln">    29</span>				panic(e)
<a id="L30"></a><span class="ln">    30</span>			}
<a id="L31"></a><span class="ln">    31</span>		}()
<a id="L32"></a><span class="ln">    32</span>		_, err = buf.ReadFrom(r)
<a id="L33"></a><span class="ln">    33</span>		return buf.Bytes(), err
<a id="L34"></a><span class="ln">    34</span>	}
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// ReadAll reads from r until an error or EOF and returns the data it read.</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// A successful call returns err == nil, not err == EOF. Because ReadAll is</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// defined to read from src until EOF, it does not treat an EOF from Read</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// as an error to be reported.</span>
<a id="L40"></a><span class="ln">    40</span>	func ReadAll(r io.Reader) ([]byte, error) {
<a id="L41"></a><span class="ln">    41</span>		return readAll(r, bytes.MinRead)
<a id="L42"></a><span class="ln">    42</span>	}
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">// ReadFile reads the file named by filename and returns the contents.</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">// A successful call returns err == nil, not err == EOF. Because ReadFile</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">// reads the whole file, it does not treat an EOF from Read as an error</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">// to be reported.</span>
<a id="L48"></a><span class="ln">    48</span>	func ReadFile(filename string) ([]byte, error) {
<a id="L49"></a><span class="ln">    49</span>		f, err := os.Open(filename)
<a id="L50"></a><span class="ln">    50</span>		if err != nil {
<a id="L51"></a><span class="ln">    51</span>			return nil, err
<a id="L52"></a><span class="ln">    52</span>		}
<a id="L53"></a><span class="ln">    53</span>		defer f.Close()
<a id="L54"></a><span class="ln">    54</span>		<span class="comment">// It&#39;s a good but not certain bet that FileInfo will tell us exactly how much to</span>
<a id="L55"></a><span class="ln">    55</span>		<span class="comment">// read, so let&#39;s try it but be prepared for the answer to be wrong.</span>
<a id="L56"></a><span class="ln">    56</span>		var n int64
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>		if fi, err := f.Stat(); err == nil {
<a id="L59"></a><span class="ln">    59</span>			<span class="comment">// Don&#39;t preallocate a huge buffer, just in case.</span>
<a id="L60"></a><span class="ln">    60</span>			if size := fi.Size(); size &lt; 1e9 {
<a id="L61"></a><span class="ln">    61</span>				n = size
<a id="L62"></a><span class="ln">    62</span>			}
<a id="L63"></a><span class="ln">    63</span>		}
<a id="L64"></a><span class="ln">    64</span>		<span class="comment">// As initial capacity for readAll, use n + a little extra in case Size is zero,</span>
<a id="L65"></a><span class="ln">    65</span>		<span class="comment">// and to avoid another allocation after Read has filled the buffer.  The readAll</span>
<a id="L66"></a><span class="ln">    66</span>		<span class="comment">// call will read into its allocated internal buffer cheaply.  If the size was</span>
<a id="L67"></a><span class="ln">    67</span>		<span class="comment">// wrong, we&#39;ll either waste some space off the end or reallocate as needed, but</span>
<a id="L68"></a><span class="ln">    68</span>		<span class="comment">// in the overwhelmingly common case we&#39;ll get it just right.</span>
<a id="L69"></a><span class="ln">    69</span>		return readAll(f, n+bytes.MinRead)
<a id="L70"></a><span class="ln">    70</span>	}
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">// WriteFile writes data to a file named by filename.</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// If the file does not exist, WriteFile creates it with permissions perm;</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">// otherwise WriteFile truncates it before writing.</span>
<a id="L75"></a><span class="ln">    75</span>	func WriteFile(filename string, data []byte, perm os.FileMode) error {
<a id="L76"></a><span class="ln">    76</span>		f, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
<a id="L77"></a><span class="ln">    77</span>		if err != nil {
<a id="L78"></a><span class="ln">    78</span>			return err
<a id="L79"></a><span class="ln">    79</span>		}
<a id="L80"></a><span class="ln">    80</span>		n, err := f.Write(data)
<a id="L81"></a><span class="ln">    81</span>		f.Close()
<a id="L82"></a><span class="ln">    82</span>		if err == nil &amp;&amp; n &lt; len(data) {
<a id="L83"></a><span class="ln">    83</span>			err = io.ErrShortWrite
<a id="L84"></a><span class="ln">    84</span>		}
<a id="L85"></a><span class="ln">    85</span>		return err
<a id="L86"></a><span class="ln">    86</span>	}
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// byName implements sort.Interface.</span>
<a id="L89"></a><span class="ln">    89</span>	type byName []os.FileInfo
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>	func (f byName) Len() int           { return len(f) }
<a id="L92"></a><span class="ln">    92</span>	func (f byName) Less(i, j int) bool { return f[i].Name() &lt; f[j].Name() }
<a id="L93"></a><span class="ln">    93</span>	func (f byName) Swap(i, j int)      { f[i], f[j] = f[j], f[i] }
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">// ReadDir reads the directory named by dirname and returns</span>
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">// a list of sorted directory entries.</span>
<a id="L97"></a><span class="ln">    97</span>	func ReadDir(dirname string) ([]os.FileInfo, error) {
<a id="L98"></a><span class="ln">    98</span>		f, err := os.Open(dirname)
<a id="L99"></a><span class="ln">    99</span>		if err != nil {
<a id="L100"></a><span class="ln">   100</span>			return nil, err
<a id="L101"></a><span class="ln">   101</span>		}
<a id="L102"></a><span class="ln">   102</span>		list, err := f.Readdir(-1)
<a id="L103"></a><span class="ln">   103</span>		f.Close()
<a id="L104"></a><span class="ln">   104</span>		if err != nil {
<a id="L105"></a><span class="ln">   105</span>			return nil, err
<a id="L106"></a><span class="ln">   106</span>		}
<a id="L107"></a><span class="ln">   107</span>		sort.Sort(byName(list))
<a id="L108"></a><span class="ln">   108</span>		return list, nil
<a id="L109"></a><span class="ln">   109</span>	}
<a id="L110"></a><span class="ln">   110</span>	
<a id="L111"></a><span class="ln">   111</span>	type nopCloser struct {
<a id="L112"></a><span class="ln">   112</span>		io.Reader
<a id="L113"></a><span class="ln">   113</span>	}
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>	func (nopCloser) Close() error { return nil }
<a id="L116"></a><span class="ln">   116</span>	
<a id="L117"></a><span class="ln">   117</span>	<span class="comment">// NopCloser returns a ReadCloser with a no-op Close method wrapping</span>
<a id="L118"></a><span class="ln">   118</span>	<span class="comment">// the provided Reader r.</span>
<a id="L119"></a><span class="ln">   119</span>	func NopCloser(r io.Reader) io.ReadCloser {
<a id="L120"></a><span class="ln">   120</span>		return nopCloser{r}
<a id="L121"></a><span class="ln">   121</span>	}
<a id="L122"></a><span class="ln">   122</span>	
<a id="L123"></a><span class="ln">   123</span>	type devNull int
<a id="L124"></a><span class="ln">   124</span>	
<a id="L125"></a><span class="ln">   125</span>	<span class="comment">// devNull implements ReaderFrom as an optimization so io.Copy to</span>
<a id="L126"></a><span class="ln">   126</span>	<span class="comment">// ioutil.Discard can avoid doing unnecessary work.</span>
<a id="L127"></a><span class="ln">   127</span>	var _ io.ReaderFrom = devNull(0)
<a id="L128"></a><span class="ln">   128</span>	
<a id="L129"></a><span class="ln">   129</span>	func (devNull) Write(p []byte) (int, error) {
<a id="L130"></a><span class="ln">   130</span>		return len(p), nil
<a id="L131"></a><span class="ln">   131</span>	}
<a id="L132"></a><span class="ln">   132</span>	
<a id="L133"></a><span class="ln">   133</span>	var blackHole = make([]byte, 8192)
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>	func (devNull) ReadFrom(r io.Reader) (n int64, err error) {
<a id="L136"></a><span class="ln">   136</span>		readSize := 0
<a id="L137"></a><span class="ln">   137</span>		for {
<a id="L138"></a><span class="ln">   138</span>			readSize, err = r.Read(blackHole)
<a id="L139"></a><span class="ln">   139</span>			n += int64(readSize)
<a id="L140"></a><span class="ln">   140</span>			if err != nil {
<a id="L141"></a><span class="ln">   141</span>				if err == io.EOF {
<a id="L142"></a><span class="ln">   142</span>					return n, nil
<a id="L143"></a><span class="ln">   143</span>				}
<a id="L144"></a><span class="ln">   144</span>				return
<a id="L145"></a><span class="ln">   145</span>			}
<a id="L146"></a><span class="ln">   146</span>		}
<a id="L147"></a><span class="ln">   147</span>		panic(&#34;unreachable&#34;)
<a id="L148"></a><span class="ln">   148</span>	}
<a id="L149"></a><span class="ln">   149</span>	
<a id="L150"></a><span class="ln">   150</span>	<span class="comment">// Discard is an io.Writer on which all Write calls succeed</span>
<a id="L151"></a><span class="ln">   151</span>	<span class="comment">// without doing anything.</span>
<a id="L152"></a><span class="ln">   152</span>	var Discard io.Writer = devNull(0)
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

