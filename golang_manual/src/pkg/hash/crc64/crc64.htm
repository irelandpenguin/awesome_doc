<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/hash/crc64/crc64.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/hash/crc64/crc64.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package crc64 implements the 64-bit cyclic redundancy check, or CRC-64,</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// checksum. See http://en.wikipedia.org/wiki/Cyclic_redundancy_check for</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// information.</span>
<a id="L8"></a><span class="ln">     8</span>	package crc64
<a id="L9"></a><span class="ln">     9</span>	
<a id="L10"></a><span class="ln">    10</span>	import &#34;hash&#34;
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// The size of a CRC-64 checksum in bytes.</span>
<a id="L13"></a><span class="ln">    13</span>	const Size = 8
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// Predefined polynomials.</span>
<a id="L16"></a><span class="ln">    16</span>	const (
<a id="L17"></a><span class="ln">    17</span>		<span class="comment">// The ISO polynomial, defined in ISO 3309 and used in HDLC.</span>
<a id="L18"></a><span class="ln">    18</span>		ISO = 0xD800000000000000
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>		<span class="comment">// The ECMA polynomial, defined in ECMA 182.</span>
<a id="L21"></a><span class="ln">    21</span>		ECMA = 0xC96C5795D7870F42
<a id="L22"></a><span class="ln">    22</span>	)
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// Table is a 256-word table representing the polynomial for efficient processing.</span>
<a id="L25"></a><span class="ln">    25</span>	type Table [256]uint64
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// MakeTable returns the Table constructed from the specified polynomial.</span>
<a id="L28"></a><span class="ln">    28</span>	func MakeTable(poly uint64) *Table {
<a id="L29"></a><span class="ln">    29</span>		t := new(Table)
<a id="L30"></a><span class="ln">    30</span>		for i := 0; i &lt; 256; i++ {
<a id="L31"></a><span class="ln">    31</span>			crc := uint64(i)
<a id="L32"></a><span class="ln">    32</span>			for j := 0; j &lt; 8; j++ {
<a id="L33"></a><span class="ln">    33</span>				if crc&amp;1 == 1 {
<a id="L34"></a><span class="ln">    34</span>					crc = (crc &gt;&gt; 1) ^ poly
<a id="L35"></a><span class="ln">    35</span>				} else {
<a id="L36"></a><span class="ln">    36</span>					crc &gt;&gt;= 1
<a id="L37"></a><span class="ln">    37</span>				}
<a id="L38"></a><span class="ln">    38</span>			}
<a id="L39"></a><span class="ln">    39</span>			t[i] = crc
<a id="L40"></a><span class="ln">    40</span>		}
<a id="L41"></a><span class="ln">    41</span>		return t
<a id="L42"></a><span class="ln">    42</span>	}
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">// digest represents the partial evaluation of a checksum.</span>
<a id="L45"></a><span class="ln">    45</span>	type digest struct {
<a id="L46"></a><span class="ln">    46</span>		crc uint64
<a id="L47"></a><span class="ln">    47</span>		tab *Table
<a id="L48"></a><span class="ln">    48</span>	}
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// New creates a new hash.Hash64 computing the CRC-64 checksum</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// using the polynomial represented by the Table.</span>
<a id="L52"></a><span class="ln">    52</span>	func New(tab *Table) hash.Hash64 { return &amp;digest{0, tab} }
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>	func (d *digest) Size() int { return Size }
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>	func (d *digest) BlockSize() int { return 1 }
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>	func (d *digest) Reset() { d.crc = 0 }
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	func update(crc uint64, tab *Table, p []byte) uint64 {
<a id="L61"></a><span class="ln">    61</span>		crc = ^crc
<a id="L62"></a><span class="ln">    62</span>		for _, v := range p {
<a id="L63"></a><span class="ln">    63</span>			crc = tab[byte(crc)^v] ^ (crc &gt;&gt; 8)
<a id="L64"></a><span class="ln">    64</span>		}
<a id="L65"></a><span class="ln">    65</span>		return ^crc
<a id="L66"></a><span class="ln">    66</span>	}
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// Update returns the result of adding the bytes in p to the crc.</span>
<a id="L69"></a><span class="ln">    69</span>	func Update(crc uint64, tab *Table, p []byte) uint64 {
<a id="L70"></a><span class="ln">    70</span>		return update(crc, tab, p)
<a id="L71"></a><span class="ln">    71</span>	}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>	func (d *digest) Write(p []byte) (n int, err error) {
<a id="L74"></a><span class="ln">    74</span>		d.crc = update(d.crc, d.tab, p)
<a id="L75"></a><span class="ln">    75</span>		return len(p), nil
<a id="L76"></a><span class="ln">    76</span>	}
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>	func (d *digest) Sum64() uint64 { return d.crc }
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>	func (d *digest) Sum(in []byte) []byte {
<a id="L81"></a><span class="ln">    81</span>		s := d.Sum64()
<a id="L82"></a><span class="ln">    82</span>		in = append(in, byte(s&gt;&gt;56))
<a id="L83"></a><span class="ln">    83</span>		in = append(in, byte(s&gt;&gt;48))
<a id="L84"></a><span class="ln">    84</span>		in = append(in, byte(s&gt;&gt;40))
<a id="L85"></a><span class="ln">    85</span>		in = append(in, byte(s&gt;&gt;32))
<a id="L86"></a><span class="ln">    86</span>		in = append(in, byte(s&gt;&gt;24))
<a id="L87"></a><span class="ln">    87</span>		in = append(in, byte(s&gt;&gt;16))
<a id="L88"></a><span class="ln">    88</span>		in = append(in, byte(s&gt;&gt;8))
<a id="L89"></a><span class="ln">    89</span>		in = append(in, byte(s))
<a id="L90"></a><span class="ln">    90</span>		return in
<a id="L91"></a><span class="ln">    91</span>	}
<a id="L92"></a><span class="ln">    92</span>	
<a id="L93"></a><span class="ln">    93</span>	<span class="comment">// Checksum returns the CRC-64 checksum of data</span>
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// using the polynomial represented by the Table.</span>
<a id="L95"></a><span class="ln">    95</span>	func Checksum(data []byte, tab *Table) uint64 { return update(0, tab, data) }
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

