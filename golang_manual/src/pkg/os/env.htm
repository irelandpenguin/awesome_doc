<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/os/env.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/os/env.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// General environment variables.</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package os
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import &#34;syscall&#34;
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// Expand replaces ${var} or $var in the string based on the mapping function.</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// Invocations of undefined variables are replaced with the empty string.</span>
<a id="L13"></a><span class="ln">    13</span>	func Expand(s string, mapping func(string) string) string {
<a id="L14"></a><span class="ln">    14</span>		buf := make([]byte, 0, 2*len(s))
<a id="L15"></a><span class="ln">    15</span>		<span class="comment">// ${} is all ASCII, so bytes are fine for this operation.</span>
<a id="L16"></a><span class="ln">    16</span>		i := 0
<a id="L17"></a><span class="ln">    17</span>		for j := 0; j &lt; len(s); j++ {
<a id="L18"></a><span class="ln">    18</span>			if s[j] == &#39;$&#39; &amp;&amp; j+1 &lt; len(s) {
<a id="L19"></a><span class="ln">    19</span>				buf = append(buf, s[i:j]...)
<a id="L20"></a><span class="ln">    20</span>				name, w := getShellName(s[j+1:])
<a id="L21"></a><span class="ln">    21</span>				buf = append(buf, mapping(name)...)
<a id="L22"></a><span class="ln">    22</span>				j += w
<a id="L23"></a><span class="ln">    23</span>				i = j + 1
<a id="L24"></a><span class="ln">    24</span>			}
<a id="L25"></a><span class="ln">    25</span>		}
<a id="L26"></a><span class="ln">    26</span>		return string(buf) + s[i:]
<a id="L27"></a><span class="ln">    27</span>	}
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// ExpandEnv replaces ${var} or $var in the string according to the values</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// of the current environment variables.  References to undefined</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// variables are replaced by the empty string.</span>
<a id="L32"></a><span class="ln">    32</span>	func ExpandEnv(s string) string {
<a id="L33"></a><span class="ln">    33</span>		return Expand(s, Getenv)
<a id="L34"></a><span class="ln">    34</span>	}
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// isSpellSpecialVar reports whether the character identifies a special</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// shell variable such as $*.</span>
<a id="L38"></a><span class="ln">    38</span>	func isShellSpecialVar(c uint8) bool {
<a id="L39"></a><span class="ln">    39</span>		switch c {
<a id="L40"></a><span class="ln">    40</span>		case &#39;*&#39;, &#39;#&#39;, &#39;$&#39;, &#39;@&#39;, &#39;!&#39;, &#39;?&#39;, &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;:
<a id="L41"></a><span class="ln">    41</span>			return true
<a id="L42"></a><span class="ln">    42</span>		}
<a id="L43"></a><span class="ln">    43</span>		return false
<a id="L44"></a><span class="ln">    44</span>	}
<a id="L45"></a><span class="ln">    45</span>	
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">// isAlphaNum reports whether the byte is an ASCII letter, number, or underscore</span>
<a id="L47"></a><span class="ln">    47</span>	func isAlphaNum(c uint8) bool {
<a id="L48"></a><span class="ln">    48</span>		return c == &#39;_&#39; || &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; || &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39; || &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39;
<a id="L49"></a><span class="ln">    49</span>	}
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// getName returns the name that begins the string and the number of bytes</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// consumed to extract it.  If the name is enclosed in {}, it&#39;s part of a ${}</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">// expansion and two more bytes are needed than the length of the name.</span>
<a id="L54"></a><span class="ln">    54</span>	func getShellName(s string) (string, int) {
<a id="L55"></a><span class="ln">    55</span>		switch {
<a id="L56"></a><span class="ln">    56</span>		case s[0] == &#39;{&#39;:
<a id="L57"></a><span class="ln">    57</span>			if len(s) &gt; 2 &amp;&amp; isShellSpecialVar(s[1]) &amp;&amp; s[2] == &#39;}&#39; {
<a id="L58"></a><span class="ln">    58</span>				return s[1:2], 3
<a id="L59"></a><span class="ln">    59</span>			}
<a id="L60"></a><span class="ln">    60</span>			<span class="comment">// Scan to closing brace</span>
<a id="L61"></a><span class="ln">    61</span>			for i := 1; i &lt; len(s); i++ {
<a id="L62"></a><span class="ln">    62</span>				if s[i] == &#39;}&#39; {
<a id="L63"></a><span class="ln">    63</span>					return s[1:i], i + 1
<a id="L64"></a><span class="ln">    64</span>				}
<a id="L65"></a><span class="ln">    65</span>			}
<a id="L66"></a><span class="ln">    66</span>			return &#34;&#34;, 1 <span class="comment">// Bad syntax; just eat the brace.</span>
<a id="L67"></a><span class="ln">    67</span>		case isShellSpecialVar(s[0]):
<a id="L68"></a><span class="ln">    68</span>			return s[0:1], 1
<a id="L69"></a><span class="ln">    69</span>		}
<a id="L70"></a><span class="ln">    70</span>		<span class="comment">// Scan alphanumerics.</span>
<a id="L71"></a><span class="ln">    71</span>		var i int
<a id="L72"></a><span class="ln">    72</span>		for i = 0; i &lt; len(s) &amp;&amp; isAlphaNum(s[i]); i++ {
<a id="L73"></a><span class="ln">    73</span>		}
<a id="L74"></a><span class="ln">    74</span>		return s[:i], i
<a id="L75"></a><span class="ln">    75</span>	}
<a id="L76"></a><span class="ln">    76</span>	
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// Getenv retrieves the value of the environment variable named by the key.</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// It returns the value, which will be empty if the variable is not present.</span>
<a id="L79"></a><span class="ln">    79</span>	func Getenv(key string) string {
<a id="L80"></a><span class="ln">    80</span>		v, _ := syscall.Getenv(key)
<a id="L81"></a><span class="ln">    81</span>		return v
<a id="L82"></a><span class="ln">    82</span>	}
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">// Setenv sets the value of the environment variable named by the key.</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">// It returns an error, if any.</span>
<a id="L86"></a><span class="ln">    86</span>	func Setenv(key, value string) error {
<a id="L87"></a><span class="ln">    87</span>		err := syscall.Setenv(key, value)
<a id="L88"></a><span class="ln">    88</span>		if err != nil {
<a id="L89"></a><span class="ln">    89</span>			return NewSyscallError(&#34;setenv&#34;, err)
<a id="L90"></a><span class="ln">    90</span>		}
<a id="L91"></a><span class="ln">    91</span>		return nil
<a id="L92"></a><span class="ln">    92</span>	}
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// Clearenv deletes all environment variables.</span>
<a id="L95"></a><span class="ln">    95</span>	func Clearenv() {
<a id="L96"></a><span class="ln">    96</span>		syscall.Clearenv()
<a id="L97"></a><span class="ln">    97</span>	}
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">// Environ returns a copy of strings representing the environment,</span>
<a id="L100"></a><span class="ln">   100</span>	<span class="comment">// in the form &#34;key=value&#34;.</span>
<a id="L101"></a><span class="ln">   101</span>	func Environ() []string {
<a id="L102"></a><span class="ln">   102</span>		return syscall.Environ()
<a id="L103"></a><span class="ln">   103</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

