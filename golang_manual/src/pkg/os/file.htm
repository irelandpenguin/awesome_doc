<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/os/file.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/os/file.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package os provides a platform-independent interface to operating system</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// functionality. The design is Unix-like, although the error handling is</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// Go-like; failing calls return values of type error rather than error numbers.</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// Often, more information is available within the error. For example,</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// if a call that takes a file name fails, such as Open or Stat, the error</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// will include the failing file name when printed and will be of type</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// *PathError, which may be unpacked for more information.</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// </span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// The os interface is intended to be uniform across all operating systems.</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// Features not generally available appear in the system-specific package syscall.</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">//</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// Here is a simple example, opening a file and reading some of it.</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">//</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">//	file, err := os.Open(&#34;file.go&#34;) // For read access.</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">//	if err != nil {</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">//		log.Fatal(err)</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">//	}</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">//</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// If the open fails, the error string will be self-explanatory, like</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">//	open file.go: no such file or directory</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">//</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// The file&#39;s data can then be read into a slice of bytes. Read and</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// Write take their byte counts from the length of the argument slice.</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">//</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">//	data := make([]byte, 100)</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">//	count, err := file.Read(data)</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">//	if err != nil {</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">//		log.Fatal(err)</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">//	}</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//	fmt.Printf(&#34;read %d bytes: %q\n&#34;, count, data[:count])</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//</span>
<a id="L37"></a><span class="ln">    37</span>	package os
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>	import (
<a id="L40"></a><span class="ln">    40</span>		&#34;io&#34;
<a id="L41"></a><span class="ln">    41</span>		&#34;syscall&#34;
<a id="L42"></a><span class="ln">    42</span>	)
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">// Name returns the name of the file as presented to Open.</span>
<a id="L45"></a><span class="ln">    45</span>	func (f *File) Name() string { return f.name }
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">// Stdin, Stdout, and Stderr are open Files pointing to the standard input,</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">// standard output, and standard error file descriptors.</span>
<a id="L49"></a><span class="ln">    49</span>	var (
<a id="L50"></a><span class="ln">    50</span>		Stdin  = NewFile(uintptr(syscall.Stdin), &#34;/dev/stdin&#34;)
<a id="L51"></a><span class="ln">    51</span>		Stdout = NewFile(uintptr(syscall.Stdout), &#34;/dev/stdout&#34;)
<a id="L52"></a><span class="ln">    52</span>		Stderr = NewFile(uintptr(syscall.Stderr), &#34;/dev/stderr&#34;)
<a id="L53"></a><span class="ln">    53</span>	)
<a id="L54"></a><span class="ln">    54</span>	
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// Flags to Open wrapping those of the underlying system. Not all flags</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// may be implemented on a given system.</span>
<a id="L57"></a><span class="ln">    57</span>	const (
<a id="L58"></a><span class="ln">    58</span>		O_RDONLY int = syscall.O_RDONLY <span class="comment">// open the file read-only.</span>
<a id="L59"></a><span class="ln">    59</span>		O_WRONLY int = syscall.O_WRONLY <span class="comment">// open the file write-only.</span>
<a id="L60"></a><span class="ln">    60</span>		O_RDWR   int = syscall.O_RDWR   <span class="comment">// open the file read-write.</span>
<a id="L61"></a><span class="ln">    61</span>		O_APPEND int = syscall.O_APPEND <span class="comment">// append data to the file when writing.</span>
<a id="L62"></a><span class="ln">    62</span>		O_CREATE int = syscall.O_CREAT  <span class="comment">// create a new file if none exists.</span>
<a id="L63"></a><span class="ln">    63</span>		O_EXCL   int = syscall.O_EXCL   <span class="comment">// used with O_CREATE, file must not exist</span>
<a id="L64"></a><span class="ln">    64</span>		O_SYNC   int = syscall.O_SYNC   <span class="comment">// open for synchronous I/O.</span>
<a id="L65"></a><span class="ln">    65</span>		O_TRUNC  int = syscall.O_TRUNC  <span class="comment">// if possible, truncate file when opened.</span>
<a id="L66"></a><span class="ln">    66</span>	)
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// Seek whence values.</span>
<a id="L69"></a><span class="ln">    69</span>	const (
<a id="L70"></a><span class="ln">    70</span>		SEEK_SET int = 0 <span class="comment">// seek relative to the origin of the file</span>
<a id="L71"></a><span class="ln">    71</span>		SEEK_CUR int = 1 <span class="comment">// seek relative to the current offset</span>
<a id="L72"></a><span class="ln">    72</span>		SEEK_END int = 2 <span class="comment">// seek relative to the end</span>
<a id="L73"></a><span class="ln">    73</span>	)
<a id="L74"></a><span class="ln">    74</span>	
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">// LinkError records an error during a link or symlink or rename</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">// system call and the paths that caused it.</span>
<a id="L77"></a><span class="ln">    77</span>	type LinkError struct {
<a id="L78"></a><span class="ln">    78</span>		Op  string
<a id="L79"></a><span class="ln">    79</span>		Old string
<a id="L80"></a><span class="ln">    80</span>		New string
<a id="L81"></a><span class="ln">    81</span>		Err error
<a id="L82"></a><span class="ln">    82</span>	}
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>	func (e *LinkError) Error() string {
<a id="L85"></a><span class="ln">    85</span>		return e.Op + &#34; &#34; + e.Old + &#34; &#34; + e.New + &#34;: &#34; + e.Err.Error()
<a id="L86"></a><span class="ln">    86</span>	}
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// Read reads up to len(b) bytes from the File.</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">// It returns the number of bytes read and an error, if any.</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// EOF is signaled by a zero count with err set to io.EOF.</span>
<a id="L91"></a><span class="ln">    91</span>	func (f *File) Read(b []byte) (n int, err error) {
<a id="L92"></a><span class="ln">    92</span>		if f == nil {
<a id="L93"></a><span class="ln">    93</span>			return 0, ErrInvalid
<a id="L94"></a><span class="ln">    94</span>		}
<a id="L95"></a><span class="ln">    95</span>		n, e := f.read(b)
<a id="L96"></a><span class="ln">    96</span>		if n &lt; 0 {
<a id="L97"></a><span class="ln">    97</span>			n = 0
<a id="L98"></a><span class="ln">    98</span>		}
<a id="L99"></a><span class="ln">    99</span>		if n == 0 &amp;&amp; len(b) &gt; 0 &amp;&amp; e == nil {
<a id="L100"></a><span class="ln">   100</span>			return 0, io.EOF
<a id="L101"></a><span class="ln">   101</span>		}
<a id="L102"></a><span class="ln">   102</span>		if e != nil {
<a id="L103"></a><span class="ln">   103</span>			err = &amp;PathError{&#34;read&#34;, f.name, e}
<a id="L104"></a><span class="ln">   104</span>		}
<a id="L105"></a><span class="ln">   105</span>		return n, err
<a id="L106"></a><span class="ln">   106</span>	}
<a id="L107"></a><span class="ln">   107</span>	
<a id="L108"></a><span class="ln">   108</span>	<span class="comment">// ReadAt reads len(b) bytes from the File starting at byte offset off.</span>
<a id="L109"></a><span class="ln">   109</span>	<span class="comment">// It returns the number of bytes read and the error, if any.</span>
<a id="L110"></a><span class="ln">   110</span>	<span class="comment">// ReadAt always returns a non-nil error when n &lt; len(b).</span>
<a id="L111"></a><span class="ln">   111</span>	<span class="comment">// At end of file, that error is io.EOF.</span>
<a id="L112"></a><span class="ln">   112</span>	func (f *File) ReadAt(b []byte, off int64) (n int, err error) {
<a id="L113"></a><span class="ln">   113</span>		if f == nil {
<a id="L114"></a><span class="ln">   114</span>			return 0, ErrInvalid
<a id="L115"></a><span class="ln">   115</span>		}
<a id="L116"></a><span class="ln">   116</span>		for len(b) &gt; 0 {
<a id="L117"></a><span class="ln">   117</span>			m, e := f.pread(b, off)
<a id="L118"></a><span class="ln">   118</span>			if m == 0 &amp;&amp; e == nil {
<a id="L119"></a><span class="ln">   119</span>				return n, io.EOF
<a id="L120"></a><span class="ln">   120</span>			}
<a id="L121"></a><span class="ln">   121</span>			if e != nil {
<a id="L122"></a><span class="ln">   122</span>				err = &amp;PathError{&#34;read&#34;, f.name, e}
<a id="L123"></a><span class="ln">   123</span>				break
<a id="L124"></a><span class="ln">   124</span>			}
<a id="L125"></a><span class="ln">   125</span>			n += m
<a id="L126"></a><span class="ln">   126</span>			b = b[m:]
<a id="L127"></a><span class="ln">   127</span>			off += int64(m)
<a id="L128"></a><span class="ln">   128</span>		}
<a id="L129"></a><span class="ln">   129</span>		return
<a id="L130"></a><span class="ln">   130</span>	}
<a id="L131"></a><span class="ln">   131</span>	
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">// Write writes len(b) bytes to the File.</span>
<a id="L133"></a><span class="ln">   133</span>	<span class="comment">// It returns the number of bytes written and an error, if any.</span>
<a id="L134"></a><span class="ln">   134</span>	<span class="comment">// Write returns a non-nil error when n != len(b).</span>
<a id="L135"></a><span class="ln">   135</span>	func (f *File) Write(b []byte) (n int, err error) {
<a id="L136"></a><span class="ln">   136</span>		if f == nil {
<a id="L137"></a><span class="ln">   137</span>			return 0, ErrInvalid
<a id="L138"></a><span class="ln">   138</span>		}
<a id="L139"></a><span class="ln">   139</span>		n, e := f.write(b)
<a id="L140"></a><span class="ln">   140</span>		if n &lt; 0 {
<a id="L141"></a><span class="ln">   141</span>			n = 0
<a id="L142"></a><span class="ln">   142</span>		}
<a id="L143"></a><span class="ln">   143</span>	
<a id="L144"></a><span class="ln">   144</span>		epipecheck(f, e)
<a id="L145"></a><span class="ln">   145</span>	
<a id="L146"></a><span class="ln">   146</span>		if e != nil {
<a id="L147"></a><span class="ln">   147</span>			err = &amp;PathError{&#34;write&#34;, f.name, e}
<a id="L148"></a><span class="ln">   148</span>		}
<a id="L149"></a><span class="ln">   149</span>		return n, err
<a id="L150"></a><span class="ln">   150</span>	}
<a id="L151"></a><span class="ln">   151</span>	
<a id="L152"></a><span class="ln">   152</span>	<span class="comment">// WriteAt writes len(b) bytes to the File starting at byte offset off.</span>
<a id="L153"></a><span class="ln">   153</span>	<span class="comment">// It returns the number of bytes written and an error, if any.</span>
<a id="L154"></a><span class="ln">   154</span>	<span class="comment">// WriteAt returns a non-nil error when n != len(b).</span>
<a id="L155"></a><span class="ln">   155</span>	func (f *File) WriteAt(b []byte, off int64) (n int, err error) {
<a id="L156"></a><span class="ln">   156</span>		if f == nil {
<a id="L157"></a><span class="ln">   157</span>			return 0, ErrInvalid
<a id="L158"></a><span class="ln">   158</span>		}
<a id="L159"></a><span class="ln">   159</span>		for len(b) &gt; 0 {
<a id="L160"></a><span class="ln">   160</span>			m, e := f.pwrite(b, off)
<a id="L161"></a><span class="ln">   161</span>			if e != nil {
<a id="L162"></a><span class="ln">   162</span>				err = &amp;PathError{&#34;write&#34;, f.name, e}
<a id="L163"></a><span class="ln">   163</span>				break
<a id="L164"></a><span class="ln">   164</span>			}
<a id="L165"></a><span class="ln">   165</span>			n += m
<a id="L166"></a><span class="ln">   166</span>			b = b[m:]
<a id="L167"></a><span class="ln">   167</span>			off += int64(m)
<a id="L168"></a><span class="ln">   168</span>		}
<a id="L169"></a><span class="ln">   169</span>		return
<a id="L170"></a><span class="ln">   170</span>	}
<a id="L171"></a><span class="ln">   171</span>	
<a id="L172"></a><span class="ln">   172</span>	<span class="comment">// Seek sets the offset for the next Read or Write on file to offset, interpreted</span>
<a id="L173"></a><span class="ln">   173</span>	<span class="comment">// according to whence: 0 means relative to the origin of the file, 1 means</span>
<a id="L174"></a><span class="ln">   174</span>	<span class="comment">// relative to the current offset, and 2 means relative to the end.</span>
<a id="L175"></a><span class="ln">   175</span>	<span class="comment">// It returns the new offset and an error, if any.</span>
<a id="L176"></a><span class="ln">   176</span>	func (f *File) Seek(offset int64, whence int) (ret int64, err error) {
<a id="L177"></a><span class="ln">   177</span>		r, e := f.seek(offset, whence)
<a id="L178"></a><span class="ln">   178</span>		if e == nil &amp;&amp; f.dirinfo != nil &amp;&amp; r != 0 {
<a id="L179"></a><span class="ln">   179</span>			e = syscall.EISDIR
<a id="L180"></a><span class="ln">   180</span>		}
<a id="L181"></a><span class="ln">   181</span>		if e != nil {
<a id="L182"></a><span class="ln">   182</span>			return 0, &amp;PathError{&#34;seek&#34;, f.name, e}
<a id="L183"></a><span class="ln">   183</span>		}
<a id="L184"></a><span class="ln">   184</span>		return r, nil
<a id="L185"></a><span class="ln">   185</span>	}
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>	<span class="comment">// WriteString is like Write, but writes the contents of string s rather than</span>
<a id="L188"></a><span class="ln">   188</span>	<span class="comment">// an array of bytes.</span>
<a id="L189"></a><span class="ln">   189</span>	func (f *File) WriteString(s string) (ret int, err error) {
<a id="L190"></a><span class="ln">   190</span>		if f == nil {
<a id="L191"></a><span class="ln">   191</span>			return 0, ErrInvalid
<a id="L192"></a><span class="ln">   192</span>		}
<a id="L193"></a><span class="ln">   193</span>		return f.Write([]byte(s))
<a id="L194"></a><span class="ln">   194</span>	}
<a id="L195"></a><span class="ln">   195</span>	
<a id="L196"></a><span class="ln">   196</span>	<span class="comment">// Mkdir creates a new directory with the specified name and permission bits.</span>
<a id="L197"></a><span class="ln">   197</span>	<span class="comment">// If there is an error, it will be of type *PathError.</span>
<a id="L198"></a><span class="ln">   198</span>	func Mkdir(name string, perm FileMode) error {
<a id="L199"></a><span class="ln">   199</span>		e := syscall.Mkdir(name, syscallMode(perm))
<a id="L200"></a><span class="ln">   200</span>		if e != nil {
<a id="L201"></a><span class="ln">   201</span>			return &amp;PathError{&#34;mkdir&#34;, name, e}
<a id="L202"></a><span class="ln">   202</span>		}
<a id="L203"></a><span class="ln">   203</span>		return nil
<a id="L204"></a><span class="ln">   204</span>	}
<a id="L205"></a><span class="ln">   205</span>	
<a id="L206"></a><span class="ln">   206</span>	<span class="comment">// Chdir changes the current working directory to the named directory.</span>
<a id="L207"></a><span class="ln">   207</span>	<span class="comment">// If there is an error, it will be of type *PathError.</span>
<a id="L208"></a><span class="ln">   208</span>	func Chdir(dir string) error {
<a id="L209"></a><span class="ln">   209</span>		if e := syscall.Chdir(dir); e != nil {
<a id="L210"></a><span class="ln">   210</span>			return &amp;PathError{&#34;chdir&#34;, dir, e}
<a id="L211"></a><span class="ln">   211</span>		}
<a id="L212"></a><span class="ln">   212</span>		return nil
<a id="L213"></a><span class="ln">   213</span>	}
<a id="L214"></a><span class="ln">   214</span>	
<a id="L215"></a><span class="ln">   215</span>	<span class="comment">// Chdir changes the current working directory to the file,</span>
<a id="L216"></a><span class="ln">   216</span>	<span class="comment">// which must be a directory.</span>
<a id="L217"></a><span class="ln">   217</span>	<span class="comment">// If there is an error, it will be of type *PathError.</span>
<a id="L218"></a><span class="ln">   218</span>	func (f *File) Chdir() error {
<a id="L219"></a><span class="ln">   219</span>		if e := syscall.Fchdir(f.fd); e != nil {
<a id="L220"></a><span class="ln">   220</span>			return &amp;PathError{&#34;chdir&#34;, f.name, e}
<a id="L221"></a><span class="ln">   221</span>		}
<a id="L222"></a><span class="ln">   222</span>		return nil
<a id="L223"></a><span class="ln">   223</span>	}
<a id="L224"></a><span class="ln">   224</span>	
<a id="L225"></a><span class="ln">   225</span>	<span class="comment">// Open opens the named file for reading.  If successful, methods on</span>
<a id="L226"></a><span class="ln">   226</span>	<span class="comment">// the returned file can be used for reading; the associated file</span>
<a id="L227"></a><span class="ln">   227</span>	<span class="comment">// descriptor has mode O_RDONLY.</span>
<a id="L228"></a><span class="ln">   228</span>	<span class="comment">// If there is an error, it will be of type *PathError.</span>
<a id="L229"></a><span class="ln">   229</span>	func Open(name string) (file *File, err error) {
<a id="L230"></a><span class="ln">   230</span>		return OpenFile(name, O_RDONLY, 0)
<a id="L231"></a><span class="ln">   231</span>	}
<a id="L232"></a><span class="ln">   232</span>	
<a id="L233"></a><span class="ln">   233</span>	<span class="comment">// Create creates the named file mode 0666 (before umask), truncating</span>
<a id="L234"></a><span class="ln">   234</span>	<span class="comment">// it if it already exists.  If successful, methods on the returned</span>
<a id="L235"></a><span class="ln">   235</span>	<span class="comment">// File can be used for I/O; the associated file descriptor has mode</span>
<a id="L236"></a><span class="ln">   236</span>	<span class="comment">// O_RDWR.</span>
<a id="L237"></a><span class="ln">   237</span>	<span class="comment">// If there is an error, it will be of type *PathError.</span>
<a id="L238"></a><span class="ln">   238</span>	func Create(name string) (file *File, err error) {
<a id="L239"></a><span class="ln">   239</span>		return OpenFile(name, O_RDWR|O_CREATE|O_TRUNC, 0666)
<a id="L240"></a><span class="ln">   240</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

