<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/os/file_unix.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/os/file_unix.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// +build darwin freebsd linux netbsd openbsd</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package os
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;runtime&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;syscall&#34;
<a id="L12"></a><span class="ln">    12</span>	)
<a id="L13"></a><span class="ln">    13</span>	
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// File represents an open file descriptor.</span>
<a id="L15"></a><span class="ln">    15</span>	type File struct {
<a id="L16"></a><span class="ln">    16</span>		*file
<a id="L17"></a><span class="ln">    17</span>	}
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// file is the real representation of *File.</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// The extra level of indirection ensures that no clients of os</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// can overwrite this data, which could cause the finalizer</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// to close the wrong file descriptor.</span>
<a id="L23"></a><span class="ln">    23</span>	type file struct {
<a id="L24"></a><span class="ln">    24</span>		fd      int
<a id="L25"></a><span class="ln">    25</span>		name    string
<a id="L26"></a><span class="ln">    26</span>		dirinfo *dirInfo <span class="comment">// nil unless directory being read</span>
<a id="L27"></a><span class="ln">    27</span>		nepipe  int      <span class="comment">// number of consecutive EPIPE in Write</span>
<a id="L28"></a><span class="ln">    28</span>	}
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// Fd returns the integer Unix file descriptor referencing the open file.</span>
<a id="L31"></a><span class="ln">    31</span>	func (f *File) Fd() uintptr {
<a id="L32"></a><span class="ln">    32</span>		if f == nil {
<a id="L33"></a><span class="ln">    33</span>			return ^(uintptr(0))
<a id="L34"></a><span class="ln">    34</span>		}
<a id="L35"></a><span class="ln">    35</span>		return uintptr(f.fd)
<a id="L36"></a><span class="ln">    36</span>	}
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// NewFile returns a new File with the given file descriptor and name.</span>
<a id="L39"></a><span class="ln">    39</span>	func NewFile(fd uintptr, name string) *File {
<a id="L40"></a><span class="ln">    40</span>		fdi := int(fd)
<a id="L41"></a><span class="ln">    41</span>		if fdi &lt; 0 {
<a id="L42"></a><span class="ln">    42</span>			return nil
<a id="L43"></a><span class="ln">    43</span>		}
<a id="L44"></a><span class="ln">    44</span>		f := &amp;File{&amp;file{fd: fdi, name: name}}
<a id="L45"></a><span class="ln">    45</span>		runtime.SetFinalizer(f.file, (*file).close)
<a id="L46"></a><span class="ln">    46</span>		return f
<a id="L47"></a><span class="ln">    47</span>	}
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">// Auxiliary information if the File describes a directory</span>
<a id="L50"></a><span class="ln">    50</span>	type dirInfo struct {
<a id="L51"></a><span class="ln">    51</span>		buf  []byte <span class="comment">// buffer for directory I/O</span>
<a id="L52"></a><span class="ln">    52</span>		nbuf int    <span class="comment">// length of buf; return value from Getdirentries</span>
<a id="L53"></a><span class="ln">    53</span>		bufp int    <span class="comment">// location of next record in buf.</span>
<a id="L54"></a><span class="ln">    54</span>	}
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// DevNull is the name of the operating system&#39;s ``null device.&#39;&#39;</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">// On Unix-like systems, it is &#34;/dev/null&#34;; on Windows, &#34;NUL&#34;.</span>
<a id="L58"></a><span class="ln">    58</span>	const DevNull = &#34;/dev/null&#34;
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// OpenFile is the generalized open call; most users will use Open</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">// or Create instead.  It opens the named file with specified flag</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">// (O_RDONLY etc.) and perm, (0666 etc.) if applicable.  If successful,</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">// methods on the returned File can be used for I/O.</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// If there is an error, it will be of type *PathError.</span>
<a id="L65"></a><span class="ln">    65</span>	func OpenFile(name string, flag int, perm FileMode) (file *File, err error) {
<a id="L66"></a><span class="ln">    66</span>		r, e := syscall.Open(name, flag|syscall.O_CLOEXEC, syscallMode(perm))
<a id="L67"></a><span class="ln">    67</span>		if e != nil {
<a id="L68"></a><span class="ln">    68</span>			return nil, &amp;PathError{&#34;open&#34;, name, e}
<a id="L69"></a><span class="ln">    69</span>		}
<a id="L70"></a><span class="ln">    70</span>	
<a id="L71"></a><span class="ln">    71</span>		<span class="comment">// There&#39;s a race here with fork/exec, which we are</span>
<a id="L72"></a><span class="ln">    72</span>		<span class="comment">// content to live with.  See ../syscall/exec_unix.go.</span>
<a id="L73"></a><span class="ln">    73</span>		<span class="comment">// On OS X 10.6, the O_CLOEXEC flag is not respected.</span>
<a id="L74"></a><span class="ln">    74</span>		<span class="comment">// On OS X 10.7, the O_CLOEXEC flag works.</span>
<a id="L75"></a><span class="ln">    75</span>		<span class="comment">// Without a cheap &amp; reliable way to detect 10.6 vs 10.7 at</span>
<a id="L76"></a><span class="ln">    76</span>		<span class="comment">// runtime, we just always call syscall.CloseOnExec on Darwin.</span>
<a id="L77"></a><span class="ln">    77</span>		<span class="comment">// Once &gt;=10.7 is prevalent, this extra call can removed.</span>
<a id="L78"></a><span class="ln">    78</span>		if syscall.O_CLOEXEC == 0 || runtime.GOOS == &#34;darwin&#34; { <span class="comment">// O_CLOEXEC not supported</span>
<a id="L79"></a><span class="ln">    79</span>			syscall.CloseOnExec(r)
<a id="L80"></a><span class="ln">    80</span>		}
<a id="L81"></a><span class="ln">    81</span>	
<a id="L82"></a><span class="ln">    82</span>		return NewFile(uintptr(r), name), nil
<a id="L83"></a><span class="ln">    83</span>	}
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">// Close closes the File, rendering it unusable for I/O.</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// It returns an error, if any.</span>
<a id="L87"></a><span class="ln">    87</span>	func (f *File) Close() error {
<a id="L88"></a><span class="ln">    88</span>		return f.file.close()
<a id="L89"></a><span class="ln">    89</span>	}
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>	func (file *file) close() error {
<a id="L92"></a><span class="ln">    92</span>		if file == nil || file.fd &lt; 0 {
<a id="L93"></a><span class="ln">    93</span>			return syscall.EINVAL
<a id="L94"></a><span class="ln">    94</span>		}
<a id="L95"></a><span class="ln">    95</span>		var err error
<a id="L96"></a><span class="ln">    96</span>		if e := syscall.Close(file.fd); e != nil {
<a id="L97"></a><span class="ln">    97</span>			err = &amp;PathError{&#34;close&#34;, file.name, e}
<a id="L98"></a><span class="ln">    98</span>		}
<a id="L99"></a><span class="ln">    99</span>		file.fd = -1 <span class="comment">// so it can&#39;t be closed again</span>
<a id="L100"></a><span class="ln">   100</span>	
<a id="L101"></a><span class="ln">   101</span>		<span class="comment">// no need for a finalizer anymore</span>
<a id="L102"></a><span class="ln">   102</span>		runtime.SetFinalizer(file, nil)
<a id="L103"></a><span class="ln">   103</span>		return err
<a id="L104"></a><span class="ln">   104</span>	}
<a id="L105"></a><span class="ln">   105</span>	
<a id="L106"></a><span class="ln">   106</span>	<span class="comment">// Stat returns the FileInfo structure describing file.</span>
<a id="L107"></a><span class="ln">   107</span>	<span class="comment">// If there is an error, it will be of type *PathError.</span>
<a id="L108"></a><span class="ln">   108</span>	func (f *File) Stat() (fi FileInfo, err error) {
<a id="L109"></a><span class="ln">   109</span>		var stat syscall.Stat_t
<a id="L110"></a><span class="ln">   110</span>		err = syscall.Fstat(f.fd, &amp;stat)
<a id="L111"></a><span class="ln">   111</span>		if err != nil {
<a id="L112"></a><span class="ln">   112</span>			return nil, &amp;PathError{&#34;stat&#34;, f.name, err}
<a id="L113"></a><span class="ln">   113</span>		}
<a id="L114"></a><span class="ln">   114</span>		return fileInfoFromStat(&amp;stat, f.name), nil
<a id="L115"></a><span class="ln">   115</span>	}
<a id="L116"></a><span class="ln">   116</span>	
<a id="L117"></a><span class="ln">   117</span>	<span class="comment">// Stat returns a FileInfo describing the named file.</span>
<a id="L118"></a><span class="ln">   118</span>	<span class="comment">// If there is an error, it will be of type *PathError.</span>
<a id="L119"></a><span class="ln">   119</span>	func Stat(name string) (fi FileInfo, err error) {
<a id="L120"></a><span class="ln">   120</span>		var stat syscall.Stat_t
<a id="L121"></a><span class="ln">   121</span>		err = syscall.Stat(name, &amp;stat)
<a id="L122"></a><span class="ln">   122</span>		if err != nil {
<a id="L123"></a><span class="ln">   123</span>			return nil, &amp;PathError{&#34;stat&#34;, name, err}
<a id="L124"></a><span class="ln">   124</span>		}
<a id="L125"></a><span class="ln">   125</span>		return fileInfoFromStat(&amp;stat, name), nil
<a id="L126"></a><span class="ln">   126</span>	}
<a id="L127"></a><span class="ln">   127</span>	
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// Lstat returns a FileInfo describing the named file.</span>
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// If the file is a symbolic link, the returned FileInfo</span>
<a id="L130"></a><span class="ln">   130</span>	<span class="comment">// describes the symbolic link.  Lstat makes no attempt to follow the link.</span>
<a id="L131"></a><span class="ln">   131</span>	<span class="comment">// If there is an error, it will be of type *PathError.</span>
<a id="L132"></a><span class="ln">   132</span>	func Lstat(name string) (fi FileInfo, err error) {
<a id="L133"></a><span class="ln">   133</span>		var stat syscall.Stat_t
<a id="L134"></a><span class="ln">   134</span>		err = syscall.Lstat(name, &amp;stat)
<a id="L135"></a><span class="ln">   135</span>		if err != nil {
<a id="L136"></a><span class="ln">   136</span>			return nil, &amp;PathError{&#34;lstat&#34;, name, err}
<a id="L137"></a><span class="ln">   137</span>		}
<a id="L138"></a><span class="ln">   138</span>		return fileInfoFromStat(&amp;stat, name), nil
<a id="L139"></a><span class="ln">   139</span>	}
<a id="L140"></a><span class="ln">   140</span>	
<a id="L141"></a><span class="ln">   141</span>	func (f *File) readdir(n int) (fi []FileInfo, err error) {
<a id="L142"></a><span class="ln">   142</span>		dirname := f.name
<a id="L143"></a><span class="ln">   143</span>		if dirname == &#34;&#34; {
<a id="L144"></a><span class="ln">   144</span>			dirname = &#34;.&#34;
<a id="L145"></a><span class="ln">   145</span>		}
<a id="L146"></a><span class="ln">   146</span>		dirname += &#34;/&#34;
<a id="L147"></a><span class="ln">   147</span>		names, err := f.Readdirnames(n)
<a id="L148"></a><span class="ln">   148</span>		fi = make([]FileInfo, len(names))
<a id="L149"></a><span class="ln">   149</span>		for i, filename := range names {
<a id="L150"></a><span class="ln">   150</span>			fip, err := Lstat(dirname + filename)
<a id="L151"></a><span class="ln">   151</span>			if err == nil {
<a id="L152"></a><span class="ln">   152</span>				fi[i] = fip
<a id="L153"></a><span class="ln">   153</span>			} else {
<a id="L154"></a><span class="ln">   154</span>				fi[i] = &amp;fileStat{name: filename}
<a id="L155"></a><span class="ln">   155</span>			}
<a id="L156"></a><span class="ln">   156</span>		}
<a id="L157"></a><span class="ln">   157</span>		return fi, err
<a id="L158"></a><span class="ln">   158</span>	}
<a id="L159"></a><span class="ln">   159</span>	
<a id="L160"></a><span class="ln">   160</span>	<span class="comment">// read reads up to len(b) bytes from the File.</span>
<a id="L161"></a><span class="ln">   161</span>	<span class="comment">// It returns the number of bytes read and an error, if any.</span>
<a id="L162"></a><span class="ln">   162</span>	func (f *File) read(b []byte) (n int, err error) {
<a id="L163"></a><span class="ln">   163</span>		return syscall.Read(f.fd, b)
<a id="L164"></a><span class="ln">   164</span>	}
<a id="L165"></a><span class="ln">   165</span>	
<a id="L166"></a><span class="ln">   166</span>	<span class="comment">// pread reads len(b) bytes from the File starting at byte offset off.</span>
<a id="L167"></a><span class="ln">   167</span>	<span class="comment">// It returns the number of bytes read and the error, if any.</span>
<a id="L168"></a><span class="ln">   168</span>	<span class="comment">// EOF is signaled by a zero count with err set to 0.</span>
<a id="L169"></a><span class="ln">   169</span>	func (f *File) pread(b []byte, off int64) (n int, err error) {
<a id="L170"></a><span class="ln">   170</span>		return syscall.Pread(f.fd, b, off)
<a id="L171"></a><span class="ln">   171</span>	}
<a id="L172"></a><span class="ln">   172</span>	
<a id="L173"></a><span class="ln">   173</span>	<span class="comment">// write writes len(b) bytes to the File.</span>
<a id="L174"></a><span class="ln">   174</span>	<span class="comment">// It returns the number of bytes written and an error, if any.</span>
<a id="L175"></a><span class="ln">   175</span>	func (f *File) write(b []byte) (n int, err error) {
<a id="L176"></a><span class="ln">   176</span>		for {
<a id="L177"></a><span class="ln">   177</span>			m, err := syscall.Write(f.fd, b)
<a id="L178"></a><span class="ln">   178</span>			n += m
<a id="L179"></a><span class="ln">   179</span>	
<a id="L180"></a><span class="ln">   180</span>			<span class="comment">// If the syscall wrote some data but not all (short write)</span>
<a id="L181"></a><span class="ln">   181</span>			<span class="comment">// or it returned EINTR, then assume it stopped early for</span>
<a id="L182"></a><span class="ln">   182</span>			<span class="comment">// reasons that are uninteresting to the caller, and try again.</span>
<a id="L183"></a><span class="ln">   183</span>			if 0 &lt; m &amp;&amp; m &lt; len(b) || err == syscall.EINTR {
<a id="L184"></a><span class="ln">   184</span>				b = b[m:]
<a id="L185"></a><span class="ln">   185</span>				continue
<a id="L186"></a><span class="ln">   186</span>			}
<a id="L187"></a><span class="ln">   187</span>	
<a id="L188"></a><span class="ln">   188</span>			return n, err
<a id="L189"></a><span class="ln">   189</span>		}
<a id="L190"></a><span class="ln">   190</span>		panic(&#34;not reached&#34;)
<a id="L191"></a><span class="ln">   191</span>	}
<a id="L192"></a><span class="ln">   192</span>	
<a id="L193"></a><span class="ln">   193</span>	<span class="comment">// pwrite writes len(b) bytes to the File starting at byte offset off.</span>
<a id="L194"></a><span class="ln">   194</span>	<span class="comment">// It returns the number of bytes written and an error, if any.</span>
<a id="L195"></a><span class="ln">   195</span>	func (f *File) pwrite(b []byte, off int64) (n int, err error) {
<a id="L196"></a><span class="ln">   196</span>		return syscall.Pwrite(f.fd, b, off)
<a id="L197"></a><span class="ln">   197</span>	}
<a id="L198"></a><span class="ln">   198</span>	
<a id="L199"></a><span class="ln">   199</span>	<span class="comment">// seek sets the offset for the next Read or Write on file to offset, interpreted</span>
<a id="L200"></a><span class="ln">   200</span>	<span class="comment">// according to whence: 0 means relative to the origin of the file, 1 means</span>
<a id="L201"></a><span class="ln">   201</span>	<span class="comment">// relative to the current offset, and 2 means relative to the end.</span>
<a id="L202"></a><span class="ln">   202</span>	<span class="comment">// It returns the new offset and an error, if any.</span>
<a id="L203"></a><span class="ln">   203</span>	func (f *File) seek(offset int64, whence int) (ret int64, err error) {
<a id="L204"></a><span class="ln">   204</span>		return syscall.Seek(f.fd, offset, whence)
<a id="L205"></a><span class="ln">   205</span>	}
<a id="L206"></a><span class="ln">   206</span>	
<a id="L207"></a><span class="ln">   207</span>	<span class="comment">// Truncate changes the size of the named file.</span>
<a id="L208"></a><span class="ln">   208</span>	<span class="comment">// If the file is a symbolic link, it changes the size of the link&#39;s target.</span>
<a id="L209"></a><span class="ln">   209</span>	<span class="comment">// If there is an error, it will be of type *PathError.</span>
<a id="L210"></a><span class="ln">   210</span>	func Truncate(name string, size int64) error {
<a id="L211"></a><span class="ln">   211</span>		if e := syscall.Truncate(name, size); e != nil {
<a id="L212"></a><span class="ln">   212</span>			return &amp;PathError{&#34;truncate&#34;, name, e}
<a id="L213"></a><span class="ln">   213</span>		}
<a id="L214"></a><span class="ln">   214</span>		return nil
<a id="L215"></a><span class="ln">   215</span>	}
<a id="L216"></a><span class="ln">   216</span>	
<a id="L217"></a><span class="ln">   217</span>	<span class="comment">// Remove removes the named file or directory.</span>
<a id="L218"></a><span class="ln">   218</span>	<span class="comment">// If there is an error, it will be of type *PathError.</span>
<a id="L219"></a><span class="ln">   219</span>	func Remove(name string) error {
<a id="L220"></a><span class="ln">   220</span>		<span class="comment">// System call interface forces us to know</span>
<a id="L221"></a><span class="ln">   221</span>		<span class="comment">// whether name is a file or directory.</span>
<a id="L222"></a><span class="ln">   222</span>		<span class="comment">// Try both: it is cheaper on average than</span>
<a id="L223"></a><span class="ln">   223</span>		<span class="comment">// doing a Stat plus the right one.</span>
<a id="L224"></a><span class="ln">   224</span>		e := syscall.Unlink(name)
<a id="L225"></a><span class="ln">   225</span>		if e == nil {
<a id="L226"></a><span class="ln">   226</span>			return nil
<a id="L227"></a><span class="ln">   227</span>		}
<a id="L228"></a><span class="ln">   228</span>		e1 := syscall.Rmdir(name)
<a id="L229"></a><span class="ln">   229</span>		if e1 == nil {
<a id="L230"></a><span class="ln">   230</span>			return nil
<a id="L231"></a><span class="ln">   231</span>		}
<a id="L232"></a><span class="ln">   232</span>	
<a id="L233"></a><span class="ln">   233</span>		<span class="comment">// Both failed: figure out which error to return.</span>
<a id="L234"></a><span class="ln">   234</span>		<span class="comment">// OS X and Linux differ on whether unlink(dir)</span>
<a id="L235"></a><span class="ln">   235</span>		<span class="comment">// returns EISDIR, so can&#39;t use that.  However,</span>
<a id="L236"></a><span class="ln">   236</span>		<span class="comment">// both agree that rmdir(file) returns ENOTDIR,</span>
<a id="L237"></a><span class="ln">   237</span>		<span class="comment">// so we can use that to decide which error is real.</span>
<a id="L238"></a><span class="ln">   238</span>		<span class="comment">// Rmdir might also return ENOTDIR if given a bad</span>
<a id="L239"></a><span class="ln">   239</span>		<span class="comment">// file path, like /etc/passwd/foo, but in that case,</span>
<a id="L240"></a><span class="ln">   240</span>		<span class="comment">// both errors will be ENOTDIR, so it&#39;s okay to</span>
<a id="L241"></a><span class="ln">   241</span>		<span class="comment">// use the error from unlink.</span>
<a id="L242"></a><span class="ln">   242</span>		if e1 != syscall.ENOTDIR {
<a id="L243"></a><span class="ln">   243</span>			e = e1
<a id="L244"></a><span class="ln">   244</span>		}
<a id="L245"></a><span class="ln">   245</span>		return &amp;PathError{&#34;remove&#34;, name, e}
<a id="L246"></a><span class="ln">   246</span>	}
<a id="L247"></a><span class="ln">   247</span>	
<a id="L248"></a><span class="ln">   248</span>	<span class="comment">// basename removes trailing slashes and the leading directory name from path name</span>
<a id="L249"></a><span class="ln">   249</span>	func basename(name string) string {
<a id="L250"></a><span class="ln">   250</span>		i := len(name) - 1
<a id="L251"></a><span class="ln">   251</span>		<span class="comment">// Remove trailing slashes</span>
<a id="L252"></a><span class="ln">   252</span>		for ; i &gt; 0 &amp;&amp; name[i] == &#39;/&#39;; i-- {
<a id="L253"></a><span class="ln">   253</span>			name = name[:i]
<a id="L254"></a><span class="ln">   254</span>		}
<a id="L255"></a><span class="ln">   255</span>		<span class="comment">// Remove leading directory name</span>
<a id="L256"></a><span class="ln">   256</span>		for i--; i &gt;= 0; i-- {
<a id="L257"></a><span class="ln">   257</span>			if name[i] == &#39;/&#39; {
<a id="L258"></a><span class="ln">   258</span>				name = name[i+1:]
<a id="L259"></a><span class="ln">   259</span>				break
<a id="L260"></a><span class="ln">   260</span>			}
<a id="L261"></a><span class="ln">   261</span>		}
<a id="L262"></a><span class="ln">   262</span>	
<a id="L263"></a><span class="ln">   263</span>		return name
<a id="L264"></a><span class="ln">   264</span>	}
<a id="L265"></a><span class="ln">   265</span>	
<a id="L266"></a><span class="ln">   266</span>	<span class="comment">// Pipe returns a connected pair of Files; reads from r return bytes written to w.</span>
<a id="L267"></a><span class="ln">   267</span>	<span class="comment">// It returns the files and an error, if any.</span>
<a id="L268"></a><span class="ln">   268</span>	func Pipe() (r *File, w *File, err error) {
<a id="L269"></a><span class="ln">   269</span>		var p [2]int
<a id="L270"></a><span class="ln">   270</span>	
<a id="L271"></a><span class="ln">   271</span>		<span class="comment">// See ../syscall/exec.go for description of lock.</span>
<a id="L272"></a><span class="ln">   272</span>		syscall.ForkLock.RLock()
<a id="L273"></a><span class="ln">   273</span>		e := syscall.Pipe(p[0:])
<a id="L274"></a><span class="ln">   274</span>		if e != nil {
<a id="L275"></a><span class="ln">   275</span>			syscall.ForkLock.RUnlock()
<a id="L276"></a><span class="ln">   276</span>			return nil, nil, NewSyscallError(&#34;pipe&#34;, e)
<a id="L277"></a><span class="ln">   277</span>		}
<a id="L278"></a><span class="ln">   278</span>		syscall.CloseOnExec(p[0])
<a id="L279"></a><span class="ln">   279</span>		syscall.CloseOnExec(p[1])
<a id="L280"></a><span class="ln">   280</span>		syscall.ForkLock.RUnlock()
<a id="L281"></a><span class="ln">   281</span>	
<a id="L282"></a><span class="ln">   282</span>		return NewFile(uintptr(p[0]), &#34;|0&#34;), NewFile(uintptr(p[1]), &#34;|1&#34;), nil
<a id="L283"></a><span class="ln">   283</span>	}
<a id="L284"></a><span class="ln">   284</span>	
<a id="L285"></a><span class="ln">   285</span>	<span class="comment">// TempDir returns the default directory to use for temporary files.</span>
<a id="L286"></a><span class="ln">   286</span>	func TempDir() string {
<a id="L287"></a><span class="ln">   287</span>		dir := Getenv(&#34;TMPDIR&#34;)
<a id="L288"></a><span class="ln">   288</span>		if dir == &#34;&#34; {
<a id="L289"></a><span class="ln">   289</span>			dir = &#34;/tmp&#34;
<a id="L290"></a><span class="ln">   290</span>		}
<a id="L291"></a><span class="ln">   291</span>		return dir
<a id="L292"></a><span class="ln">   292</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

