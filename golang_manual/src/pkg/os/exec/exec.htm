<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/os/exec/exec.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/os/exec/exec.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package exec runs external commands. It wraps os.StartProcess to make it</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// easier to remap stdin and stdout, connect I/O with pipes, and do other</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// adjustments.</span>
<a id="L8"></a><span class="ln">     8</span>	package exec
<a id="L9"></a><span class="ln">     9</span>	
<a id="L10"></a><span class="ln">    10</span>	import (
<a id="L11"></a><span class="ln">    11</span>		&#34;bytes&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;errors&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;io&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;os&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;strconv&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;syscall&#34;
<a id="L17"></a><span class="ln">    17</span>	)
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// Error records the name of a binary that failed to be be executed</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// and the reason it failed.</span>
<a id="L21"></a><span class="ln">    21</span>	type Error struct {
<a id="L22"></a><span class="ln">    22</span>		Name string
<a id="L23"></a><span class="ln">    23</span>		Err  error
<a id="L24"></a><span class="ln">    24</span>	}
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>	func (e *Error) Error() string {
<a id="L27"></a><span class="ln">    27</span>		return &#34;exec: &#34; + strconv.Quote(e.Name) + &#34;: &#34; + e.Err.Error()
<a id="L28"></a><span class="ln">    28</span>	}
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// Cmd represents an external command being prepared or run.</span>
<a id="L31"></a><span class="ln">    31</span>	type Cmd struct {
<a id="L32"></a><span class="ln">    32</span>		<span class="comment">// Path is the path of the command to run.</span>
<a id="L33"></a><span class="ln">    33</span>		<span class="comment">//</span>
<a id="L34"></a><span class="ln">    34</span>		<span class="comment">// This is the only field that must be set to a non-zero</span>
<a id="L35"></a><span class="ln">    35</span>		<span class="comment">// value.</span>
<a id="L36"></a><span class="ln">    36</span>		Path string
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>		<span class="comment">// Args holds command line arguments, including the command as Args[0].</span>
<a id="L39"></a><span class="ln">    39</span>		<span class="comment">// If the Args field is empty or nil, Run uses {Path}.</span>
<a id="L40"></a><span class="ln">    40</span>		<span class="comment">// </span>
<a id="L41"></a><span class="ln">    41</span>		<span class="comment">// In typical use, both Path and Args are set by calling Command.</span>
<a id="L42"></a><span class="ln">    42</span>		Args []string
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>		<span class="comment">// Env specifies the environment of the process.</span>
<a id="L45"></a><span class="ln">    45</span>		<span class="comment">// If Env is nil, Run uses the current process&#39;s environment.</span>
<a id="L46"></a><span class="ln">    46</span>		Env []string
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>		<span class="comment">// Dir specifies the working directory of the command.</span>
<a id="L49"></a><span class="ln">    49</span>		<span class="comment">// If Dir is the empty string, Run runs the command in the</span>
<a id="L50"></a><span class="ln">    50</span>		<span class="comment">// calling process&#39;s current directory.</span>
<a id="L51"></a><span class="ln">    51</span>		Dir string
<a id="L52"></a><span class="ln">    52</span>	
<a id="L53"></a><span class="ln">    53</span>		<span class="comment">// Stdin specifies the process&#39;s standard input. If Stdin is</span>
<a id="L54"></a><span class="ln">    54</span>		<span class="comment">// nil, the process reads from the null device (os.DevNull).</span>
<a id="L55"></a><span class="ln">    55</span>		Stdin io.Reader
<a id="L56"></a><span class="ln">    56</span>	
<a id="L57"></a><span class="ln">    57</span>		<span class="comment">// Stdout and Stderr specify the process&#39;s standard output and error.</span>
<a id="L58"></a><span class="ln">    58</span>		<span class="comment">//</span>
<a id="L59"></a><span class="ln">    59</span>		<span class="comment">// If either is nil, Run connects the corresponding file descriptor</span>
<a id="L60"></a><span class="ln">    60</span>		<span class="comment">// to the null device (os.DevNull).</span>
<a id="L61"></a><span class="ln">    61</span>		<span class="comment">//</span>
<a id="L62"></a><span class="ln">    62</span>		<span class="comment">// If Stdout and Stderr are the same writer, at most one</span>
<a id="L63"></a><span class="ln">    63</span>		<span class="comment">// goroutine at a time will call Write.</span>
<a id="L64"></a><span class="ln">    64</span>		Stdout io.Writer
<a id="L65"></a><span class="ln">    65</span>		Stderr io.Writer
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>		<span class="comment">// ExtraFiles specifies additional open files to be inherited by the</span>
<a id="L68"></a><span class="ln">    68</span>		<span class="comment">// new process. It does not include standard input, standard output, or</span>
<a id="L69"></a><span class="ln">    69</span>		<span class="comment">// standard error. If non-nil, entry i becomes file descriptor 3+i.</span>
<a id="L70"></a><span class="ln">    70</span>		<span class="comment">//</span>
<a id="L71"></a><span class="ln">    71</span>		<span class="comment">// BUG: on OS X 10.6, child processes may sometimes inherit unwanted fds.</span>
<a id="L72"></a><span class="ln">    72</span>		<span class="comment">// http://golang.org/issue/2603</span>
<a id="L73"></a><span class="ln">    73</span>		ExtraFiles []*os.File
<a id="L74"></a><span class="ln">    74</span>	
<a id="L75"></a><span class="ln">    75</span>		<span class="comment">// SysProcAttr holds optional, operating system-specific attributes.</span>
<a id="L76"></a><span class="ln">    76</span>		<span class="comment">// Run passes it to os.StartProcess as the os.ProcAttr&#39;s Sys field.</span>
<a id="L77"></a><span class="ln">    77</span>		SysProcAttr *syscall.SysProcAttr
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>		<span class="comment">// Process is the underlying process, once started.</span>
<a id="L80"></a><span class="ln">    80</span>		Process *os.Process
<a id="L81"></a><span class="ln">    81</span>	
<a id="L82"></a><span class="ln">    82</span>		<span class="comment">// ProcessState contains information about an exited process,</span>
<a id="L83"></a><span class="ln">    83</span>		<span class="comment">// available after a call to Wait or Run.</span>
<a id="L84"></a><span class="ln">    84</span>		ProcessState *os.ProcessState
<a id="L85"></a><span class="ln">    85</span>	
<a id="L86"></a><span class="ln">    86</span>		err             error <span class="comment">// last error (from LookPath, stdin, stdout, stderr)</span>
<a id="L87"></a><span class="ln">    87</span>		finished        bool  <span class="comment">// when Wait was called</span>
<a id="L88"></a><span class="ln">    88</span>		childFiles      []*os.File
<a id="L89"></a><span class="ln">    89</span>		closeAfterStart []io.Closer
<a id="L90"></a><span class="ln">    90</span>		closeAfterWait  []io.Closer
<a id="L91"></a><span class="ln">    91</span>		goroutine       []func() error
<a id="L92"></a><span class="ln">    92</span>		errch           chan error <span class="comment">// one send per goroutine</span>
<a id="L93"></a><span class="ln">    93</span>	}
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">// Command returns the Cmd struct to execute the named program with</span>
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">// the given arguments.</span>
<a id="L97"></a><span class="ln">    97</span>	<span class="comment">//</span>
<a id="L98"></a><span class="ln">    98</span>	<span class="comment">// It sets Path and Args in the returned structure and zeroes the</span>
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">// other fields.</span>
<a id="L100"></a><span class="ln">   100</span>	<span class="comment">//</span>
<a id="L101"></a><span class="ln">   101</span>	<span class="comment">// If name contains no path separators, Command uses LookPath to</span>
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">// resolve the path to a complete name if possible. Otherwise it uses</span>
<a id="L103"></a><span class="ln">   103</span>	<span class="comment">// name directly.</span>
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">//</span>
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// The returned Cmd&#39;s Args field is constructed from the command name</span>
<a id="L106"></a><span class="ln">   106</span>	<span class="comment">// followed by the elements of arg, so arg should not include the</span>
<a id="L107"></a><span class="ln">   107</span>	<span class="comment">// command name itself. For example, Command(&#34;echo&#34;, &#34;hello&#34;)</span>
<a id="L108"></a><span class="ln">   108</span>	func Command(name string, arg ...string) *Cmd {
<a id="L109"></a><span class="ln">   109</span>		aname, err := LookPath(name)
<a id="L110"></a><span class="ln">   110</span>		if err != nil {
<a id="L111"></a><span class="ln">   111</span>			aname = name
<a id="L112"></a><span class="ln">   112</span>		}
<a id="L113"></a><span class="ln">   113</span>		return &amp;Cmd{
<a id="L114"></a><span class="ln">   114</span>			Path: aname,
<a id="L115"></a><span class="ln">   115</span>			Args: append([]string{name}, arg...),
<a id="L116"></a><span class="ln">   116</span>			err:  err,
<a id="L117"></a><span class="ln">   117</span>		}
<a id="L118"></a><span class="ln">   118</span>	}
<a id="L119"></a><span class="ln">   119</span>	
<a id="L120"></a><span class="ln">   120</span>	<span class="comment">// interfaceEqual protects against panics from doing equality tests on</span>
<a id="L121"></a><span class="ln">   121</span>	<span class="comment">// two interfaces with non-comparable underlying types</span>
<a id="L122"></a><span class="ln">   122</span>	func interfaceEqual(a, b interface{}) bool {
<a id="L123"></a><span class="ln">   123</span>		defer func() {
<a id="L124"></a><span class="ln">   124</span>			recover()
<a id="L125"></a><span class="ln">   125</span>		}()
<a id="L126"></a><span class="ln">   126</span>		return a == b
<a id="L127"></a><span class="ln">   127</span>	}
<a id="L128"></a><span class="ln">   128</span>	
<a id="L129"></a><span class="ln">   129</span>	func (c *Cmd) envv() []string {
<a id="L130"></a><span class="ln">   130</span>		if c.Env != nil {
<a id="L131"></a><span class="ln">   131</span>			return c.Env
<a id="L132"></a><span class="ln">   132</span>		}
<a id="L133"></a><span class="ln">   133</span>		return os.Environ()
<a id="L134"></a><span class="ln">   134</span>	}
<a id="L135"></a><span class="ln">   135</span>	
<a id="L136"></a><span class="ln">   136</span>	func (c *Cmd) argv() []string {
<a id="L137"></a><span class="ln">   137</span>		if len(c.Args) &gt; 0 {
<a id="L138"></a><span class="ln">   138</span>			return c.Args
<a id="L139"></a><span class="ln">   139</span>		}
<a id="L140"></a><span class="ln">   140</span>		return []string{c.Path}
<a id="L141"></a><span class="ln">   141</span>	}
<a id="L142"></a><span class="ln">   142</span>	
<a id="L143"></a><span class="ln">   143</span>	func (c *Cmd) stdin() (f *os.File, err error) {
<a id="L144"></a><span class="ln">   144</span>		if c.Stdin == nil {
<a id="L145"></a><span class="ln">   145</span>			f, err = os.Open(os.DevNull)
<a id="L146"></a><span class="ln">   146</span>			c.closeAfterStart = append(c.closeAfterStart, f)
<a id="L147"></a><span class="ln">   147</span>			return
<a id="L148"></a><span class="ln">   148</span>		}
<a id="L149"></a><span class="ln">   149</span>	
<a id="L150"></a><span class="ln">   150</span>		if f, ok := c.Stdin.(*os.File); ok {
<a id="L151"></a><span class="ln">   151</span>			return f, nil
<a id="L152"></a><span class="ln">   152</span>		}
<a id="L153"></a><span class="ln">   153</span>	
<a id="L154"></a><span class="ln">   154</span>		pr, pw, err := os.Pipe()
<a id="L155"></a><span class="ln">   155</span>		if err != nil {
<a id="L156"></a><span class="ln">   156</span>			return
<a id="L157"></a><span class="ln">   157</span>		}
<a id="L158"></a><span class="ln">   158</span>	
<a id="L159"></a><span class="ln">   159</span>		c.closeAfterStart = append(c.closeAfterStart, pr)
<a id="L160"></a><span class="ln">   160</span>		c.closeAfterWait = append(c.closeAfterWait, pw)
<a id="L161"></a><span class="ln">   161</span>		c.goroutine = append(c.goroutine, func() error {
<a id="L162"></a><span class="ln">   162</span>			_, err := io.Copy(pw, c.Stdin)
<a id="L163"></a><span class="ln">   163</span>			if err1 := pw.Close(); err == nil {
<a id="L164"></a><span class="ln">   164</span>				err = err1
<a id="L165"></a><span class="ln">   165</span>			}
<a id="L166"></a><span class="ln">   166</span>			return err
<a id="L167"></a><span class="ln">   167</span>		})
<a id="L168"></a><span class="ln">   168</span>		return pr, nil
<a id="L169"></a><span class="ln">   169</span>	}
<a id="L170"></a><span class="ln">   170</span>	
<a id="L171"></a><span class="ln">   171</span>	func (c *Cmd) stdout() (f *os.File, err error) {
<a id="L172"></a><span class="ln">   172</span>		return c.writerDescriptor(c.Stdout)
<a id="L173"></a><span class="ln">   173</span>	}
<a id="L174"></a><span class="ln">   174</span>	
<a id="L175"></a><span class="ln">   175</span>	func (c *Cmd) stderr() (f *os.File, err error) {
<a id="L176"></a><span class="ln">   176</span>		if c.Stderr != nil &amp;&amp; interfaceEqual(c.Stderr, c.Stdout) {
<a id="L177"></a><span class="ln">   177</span>			return c.childFiles[1], nil
<a id="L178"></a><span class="ln">   178</span>		}
<a id="L179"></a><span class="ln">   179</span>		return c.writerDescriptor(c.Stderr)
<a id="L180"></a><span class="ln">   180</span>	}
<a id="L181"></a><span class="ln">   181</span>	
<a id="L182"></a><span class="ln">   182</span>	func (c *Cmd) writerDescriptor(w io.Writer) (f *os.File, err error) {
<a id="L183"></a><span class="ln">   183</span>		if w == nil {
<a id="L184"></a><span class="ln">   184</span>			f, err = os.OpenFile(os.DevNull, os.O_WRONLY, 0)
<a id="L185"></a><span class="ln">   185</span>			c.closeAfterStart = append(c.closeAfterStart, f)
<a id="L186"></a><span class="ln">   186</span>			return
<a id="L187"></a><span class="ln">   187</span>		}
<a id="L188"></a><span class="ln">   188</span>	
<a id="L189"></a><span class="ln">   189</span>		if f, ok := w.(*os.File); ok {
<a id="L190"></a><span class="ln">   190</span>			return f, nil
<a id="L191"></a><span class="ln">   191</span>		}
<a id="L192"></a><span class="ln">   192</span>	
<a id="L193"></a><span class="ln">   193</span>		pr, pw, err := os.Pipe()
<a id="L194"></a><span class="ln">   194</span>		if err != nil {
<a id="L195"></a><span class="ln">   195</span>			return
<a id="L196"></a><span class="ln">   196</span>		}
<a id="L197"></a><span class="ln">   197</span>	
<a id="L198"></a><span class="ln">   198</span>		c.closeAfterStart = append(c.closeAfterStart, pw)
<a id="L199"></a><span class="ln">   199</span>		c.closeAfterWait = append(c.closeAfterWait, pr)
<a id="L200"></a><span class="ln">   200</span>		c.goroutine = append(c.goroutine, func() error {
<a id="L201"></a><span class="ln">   201</span>			_, err := io.Copy(w, pr)
<a id="L202"></a><span class="ln">   202</span>			return err
<a id="L203"></a><span class="ln">   203</span>		})
<a id="L204"></a><span class="ln">   204</span>		return pw, nil
<a id="L205"></a><span class="ln">   205</span>	}
<a id="L206"></a><span class="ln">   206</span>	
<a id="L207"></a><span class="ln">   207</span>	<span class="comment">// Run starts the specified command and waits for it to complete.</span>
<a id="L208"></a><span class="ln">   208</span>	<span class="comment">//</span>
<a id="L209"></a><span class="ln">   209</span>	<span class="comment">// The returned error is nil if the command runs, has no problems</span>
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// copying stdin, stdout, and stderr, and exits with a zero exit</span>
<a id="L211"></a><span class="ln">   211</span>	<span class="comment">// status.</span>
<a id="L212"></a><span class="ln">   212</span>	<span class="comment">//</span>
<a id="L213"></a><span class="ln">   213</span>	<span class="comment">// If the command fails to run or doesn&#39;t complete successfully, the</span>
<a id="L214"></a><span class="ln">   214</span>	<span class="comment">// error is of type *ExitError. Other error types may be</span>
<a id="L215"></a><span class="ln">   215</span>	<span class="comment">// returned for I/O problems.</span>
<a id="L216"></a><span class="ln">   216</span>	func (c *Cmd) Run() error {
<a id="L217"></a><span class="ln">   217</span>		if err := c.Start(); err != nil {
<a id="L218"></a><span class="ln">   218</span>			return err
<a id="L219"></a><span class="ln">   219</span>		}
<a id="L220"></a><span class="ln">   220</span>		return c.Wait()
<a id="L221"></a><span class="ln">   221</span>	}
<a id="L222"></a><span class="ln">   222</span>	
<a id="L223"></a><span class="ln">   223</span>	<span class="comment">// Start starts the specified command but does not wait for it to complete.</span>
<a id="L224"></a><span class="ln">   224</span>	func (c *Cmd) Start() error {
<a id="L225"></a><span class="ln">   225</span>		if c.err != nil {
<a id="L226"></a><span class="ln">   226</span>			return c.err
<a id="L227"></a><span class="ln">   227</span>		}
<a id="L228"></a><span class="ln">   228</span>		if c.Process != nil {
<a id="L229"></a><span class="ln">   229</span>			return errors.New(&#34;exec: already started&#34;)
<a id="L230"></a><span class="ln">   230</span>		}
<a id="L231"></a><span class="ln">   231</span>	
<a id="L232"></a><span class="ln">   232</span>		type F func(*Cmd) (*os.File, error)
<a id="L233"></a><span class="ln">   233</span>		for _, setupFd := range []F{(*Cmd).stdin, (*Cmd).stdout, (*Cmd).stderr} {
<a id="L234"></a><span class="ln">   234</span>			fd, err := setupFd(c)
<a id="L235"></a><span class="ln">   235</span>			if err != nil {
<a id="L236"></a><span class="ln">   236</span>				return err
<a id="L237"></a><span class="ln">   237</span>			}
<a id="L238"></a><span class="ln">   238</span>			c.childFiles = append(c.childFiles, fd)
<a id="L239"></a><span class="ln">   239</span>		}
<a id="L240"></a><span class="ln">   240</span>		c.childFiles = append(c.childFiles, c.ExtraFiles...)
<a id="L241"></a><span class="ln">   241</span>	
<a id="L242"></a><span class="ln">   242</span>		var err error
<a id="L243"></a><span class="ln">   243</span>		c.Process, err = os.StartProcess(c.Path, c.argv(), &amp;os.ProcAttr{
<a id="L244"></a><span class="ln">   244</span>			Dir:   c.Dir,
<a id="L245"></a><span class="ln">   245</span>			Files: c.childFiles,
<a id="L246"></a><span class="ln">   246</span>			Env:   c.envv(),
<a id="L247"></a><span class="ln">   247</span>			Sys:   c.SysProcAttr,
<a id="L248"></a><span class="ln">   248</span>		})
<a id="L249"></a><span class="ln">   249</span>		if err != nil {
<a id="L250"></a><span class="ln">   250</span>			return err
<a id="L251"></a><span class="ln">   251</span>		}
<a id="L252"></a><span class="ln">   252</span>	
<a id="L253"></a><span class="ln">   253</span>		for _, fd := range c.closeAfterStart {
<a id="L254"></a><span class="ln">   254</span>			fd.Close()
<a id="L255"></a><span class="ln">   255</span>		}
<a id="L256"></a><span class="ln">   256</span>	
<a id="L257"></a><span class="ln">   257</span>		c.errch = make(chan error, len(c.goroutine))
<a id="L258"></a><span class="ln">   258</span>		for _, fn := range c.goroutine {
<a id="L259"></a><span class="ln">   259</span>			go func(fn func() error) {
<a id="L260"></a><span class="ln">   260</span>				c.errch &lt;- fn()
<a id="L261"></a><span class="ln">   261</span>			}(fn)
<a id="L262"></a><span class="ln">   262</span>		}
<a id="L263"></a><span class="ln">   263</span>	
<a id="L264"></a><span class="ln">   264</span>		return nil
<a id="L265"></a><span class="ln">   265</span>	}
<a id="L266"></a><span class="ln">   266</span>	
<a id="L267"></a><span class="ln">   267</span>	<span class="comment">// An ExitError reports an unsuccessful exit by a command.</span>
<a id="L268"></a><span class="ln">   268</span>	type ExitError struct {
<a id="L269"></a><span class="ln">   269</span>		*os.ProcessState
<a id="L270"></a><span class="ln">   270</span>	}
<a id="L271"></a><span class="ln">   271</span>	
<a id="L272"></a><span class="ln">   272</span>	func (e *ExitError) Error() string {
<a id="L273"></a><span class="ln">   273</span>		return e.ProcessState.String()
<a id="L274"></a><span class="ln">   274</span>	}
<a id="L275"></a><span class="ln">   275</span>	
<a id="L276"></a><span class="ln">   276</span>	<span class="comment">// Wait waits for the command to exit.</span>
<a id="L277"></a><span class="ln">   277</span>	<span class="comment">// It must have been started by Start.</span>
<a id="L278"></a><span class="ln">   278</span>	<span class="comment">//</span>
<a id="L279"></a><span class="ln">   279</span>	<span class="comment">// The returned error is nil if the command runs, has no problems</span>
<a id="L280"></a><span class="ln">   280</span>	<span class="comment">// copying stdin, stdout, and stderr, and exits with a zero exit</span>
<a id="L281"></a><span class="ln">   281</span>	<span class="comment">// status.</span>
<a id="L282"></a><span class="ln">   282</span>	<span class="comment">//</span>
<a id="L283"></a><span class="ln">   283</span>	<span class="comment">// If the command fails to run or doesn&#39;t complete successfully, the</span>
<a id="L284"></a><span class="ln">   284</span>	<span class="comment">// error is of type *ExitError. Other error types may be</span>
<a id="L285"></a><span class="ln">   285</span>	<span class="comment">// returned for I/O problems.</span>
<a id="L286"></a><span class="ln">   286</span>	func (c *Cmd) Wait() error {
<a id="L287"></a><span class="ln">   287</span>		if c.Process == nil {
<a id="L288"></a><span class="ln">   288</span>			return errors.New(&#34;exec: not started&#34;)
<a id="L289"></a><span class="ln">   289</span>		}
<a id="L290"></a><span class="ln">   290</span>		if c.finished {
<a id="L291"></a><span class="ln">   291</span>			return errors.New(&#34;exec: Wait was already called&#34;)
<a id="L292"></a><span class="ln">   292</span>		}
<a id="L293"></a><span class="ln">   293</span>		c.finished = true
<a id="L294"></a><span class="ln">   294</span>		state, err := c.Process.Wait()
<a id="L295"></a><span class="ln">   295</span>		c.ProcessState = state
<a id="L296"></a><span class="ln">   296</span>	
<a id="L297"></a><span class="ln">   297</span>		var copyError error
<a id="L298"></a><span class="ln">   298</span>		for _ = range c.goroutine {
<a id="L299"></a><span class="ln">   299</span>			if err := &lt;-c.errch; err != nil &amp;&amp; copyError == nil {
<a id="L300"></a><span class="ln">   300</span>				copyError = err
<a id="L301"></a><span class="ln">   301</span>			}
<a id="L302"></a><span class="ln">   302</span>		}
<a id="L303"></a><span class="ln">   303</span>	
<a id="L304"></a><span class="ln">   304</span>		for _, fd := range c.closeAfterWait {
<a id="L305"></a><span class="ln">   305</span>			fd.Close()
<a id="L306"></a><span class="ln">   306</span>		}
<a id="L307"></a><span class="ln">   307</span>	
<a id="L308"></a><span class="ln">   308</span>		if err != nil {
<a id="L309"></a><span class="ln">   309</span>			return err
<a id="L310"></a><span class="ln">   310</span>		} else if !state.Success() {
<a id="L311"></a><span class="ln">   311</span>			return &amp;ExitError{state}
<a id="L312"></a><span class="ln">   312</span>		}
<a id="L313"></a><span class="ln">   313</span>	
<a id="L314"></a><span class="ln">   314</span>		return copyError
<a id="L315"></a><span class="ln">   315</span>	}
<a id="L316"></a><span class="ln">   316</span>	
<a id="L317"></a><span class="ln">   317</span>	<span class="comment">// Output runs the command and returns its standard output.</span>
<a id="L318"></a><span class="ln">   318</span>	func (c *Cmd) Output() ([]byte, error) {
<a id="L319"></a><span class="ln">   319</span>		if c.Stdout != nil {
<a id="L320"></a><span class="ln">   320</span>			return nil, errors.New(&#34;exec: Stdout already set&#34;)
<a id="L321"></a><span class="ln">   321</span>		}
<a id="L322"></a><span class="ln">   322</span>		var b bytes.Buffer
<a id="L323"></a><span class="ln">   323</span>		c.Stdout = &amp;b
<a id="L324"></a><span class="ln">   324</span>		err := c.Run()
<a id="L325"></a><span class="ln">   325</span>		return b.Bytes(), err
<a id="L326"></a><span class="ln">   326</span>	}
<a id="L327"></a><span class="ln">   327</span>	
<a id="L328"></a><span class="ln">   328</span>	<span class="comment">// CombinedOutput runs the command and returns its combined standard</span>
<a id="L329"></a><span class="ln">   329</span>	<span class="comment">// output and standard error.</span>
<a id="L330"></a><span class="ln">   330</span>	func (c *Cmd) CombinedOutput() ([]byte, error) {
<a id="L331"></a><span class="ln">   331</span>		if c.Stdout != nil {
<a id="L332"></a><span class="ln">   332</span>			return nil, errors.New(&#34;exec: Stdout already set&#34;)
<a id="L333"></a><span class="ln">   333</span>		}
<a id="L334"></a><span class="ln">   334</span>		if c.Stderr != nil {
<a id="L335"></a><span class="ln">   335</span>			return nil, errors.New(&#34;exec: Stderr already set&#34;)
<a id="L336"></a><span class="ln">   336</span>		}
<a id="L337"></a><span class="ln">   337</span>		var b bytes.Buffer
<a id="L338"></a><span class="ln">   338</span>		c.Stdout = &amp;b
<a id="L339"></a><span class="ln">   339</span>		c.Stderr = &amp;b
<a id="L340"></a><span class="ln">   340</span>		err := c.Run()
<a id="L341"></a><span class="ln">   341</span>		return b.Bytes(), err
<a id="L342"></a><span class="ln">   342</span>	}
<a id="L343"></a><span class="ln">   343</span>	
<a id="L344"></a><span class="ln">   344</span>	<span class="comment">// StdinPipe returns a pipe that will be connected to the command&#39;s</span>
<a id="L345"></a><span class="ln">   345</span>	<span class="comment">// standard input when the command starts.</span>
<a id="L346"></a><span class="ln">   346</span>	func (c *Cmd) StdinPipe() (io.WriteCloser, error) {
<a id="L347"></a><span class="ln">   347</span>		if c.Stdin != nil {
<a id="L348"></a><span class="ln">   348</span>			return nil, errors.New(&#34;exec: Stdin already set&#34;)
<a id="L349"></a><span class="ln">   349</span>		}
<a id="L350"></a><span class="ln">   350</span>		if c.Process != nil {
<a id="L351"></a><span class="ln">   351</span>			return nil, errors.New(&#34;exec: StdinPipe after process started&#34;)
<a id="L352"></a><span class="ln">   352</span>		}
<a id="L353"></a><span class="ln">   353</span>		pr, pw, err := os.Pipe()
<a id="L354"></a><span class="ln">   354</span>		if err != nil {
<a id="L355"></a><span class="ln">   355</span>			return nil, err
<a id="L356"></a><span class="ln">   356</span>		}
<a id="L357"></a><span class="ln">   357</span>		c.Stdin = pr
<a id="L358"></a><span class="ln">   358</span>		c.closeAfterStart = append(c.closeAfterStart, pr)
<a id="L359"></a><span class="ln">   359</span>		c.closeAfterWait = append(c.closeAfterWait, pw)
<a id="L360"></a><span class="ln">   360</span>		return pw, nil
<a id="L361"></a><span class="ln">   361</span>	}
<a id="L362"></a><span class="ln">   362</span>	
<a id="L363"></a><span class="ln">   363</span>	<span class="comment">// StdoutPipe returns a pipe that will be connected to the command&#39;s</span>
<a id="L364"></a><span class="ln">   364</span>	<span class="comment">// standard output when the command starts.</span>
<a id="L365"></a><span class="ln">   365</span>	<span class="comment">// The pipe will be closed automatically after Wait sees the command exit.</span>
<a id="L366"></a><span class="ln">   366</span>	func (c *Cmd) StdoutPipe() (io.ReadCloser, error) {
<a id="L367"></a><span class="ln">   367</span>		if c.Stdout != nil {
<a id="L368"></a><span class="ln">   368</span>			return nil, errors.New(&#34;exec: Stdout already set&#34;)
<a id="L369"></a><span class="ln">   369</span>		}
<a id="L370"></a><span class="ln">   370</span>		if c.Process != nil {
<a id="L371"></a><span class="ln">   371</span>			return nil, errors.New(&#34;exec: StdoutPipe after process started&#34;)
<a id="L372"></a><span class="ln">   372</span>		}
<a id="L373"></a><span class="ln">   373</span>		pr, pw, err := os.Pipe()
<a id="L374"></a><span class="ln">   374</span>		if err != nil {
<a id="L375"></a><span class="ln">   375</span>			return nil, err
<a id="L376"></a><span class="ln">   376</span>		}
<a id="L377"></a><span class="ln">   377</span>		c.Stdout = pw
<a id="L378"></a><span class="ln">   378</span>		c.closeAfterStart = append(c.closeAfterStart, pw)
<a id="L379"></a><span class="ln">   379</span>		c.closeAfterWait = append(c.closeAfterWait, pr)
<a id="L380"></a><span class="ln">   380</span>		return pr, nil
<a id="L381"></a><span class="ln">   381</span>	}
<a id="L382"></a><span class="ln">   382</span>	
<a id="L383"></a><span class="ln">   383</span>	<span class="comment">// StderrPipe returns a pipe that will be connected to the command&#39;s</span>
<a id="L384"></a><span class="ln">   384</span>	<span class="comment">// standard error when the command starts.</span>
<a id="L385"></a><span class="ln">   385</span>	<span class="comment">// The pipe will be closed automatically after Wait sees the command exit.</span>
<a id="L386"></a><span class="ln">   386</span>	func (c *Cmd) StderrPipe() (io.ReadCloser, error) {
<a id="L387"></a><span class="ln">   387</span>		if c.Stderr != nil {
<a id="L388"></a><span class="ln">   388</span>			return nil, errors.New(&#34;exec: Stderr already set&#34;)
<a id="L389"></a><span class="ln">   389</span>		}
<a id="L390"></a><span class="ln">   390</span>		if c.Process != nil {
<a id="L391"></a><span class="ln">   391</span>			return nil, errors.New(&#34;exec: StderrPipe after process started&#34;)
<a id="L392"></a><span class="ln">   392</span>		}
<a id="L393"></a><span class="ln">   393</span>		pr, pw, err := os.Pipe()
<a id="L394"></a><span class="ln">   394</span>		if err != nil {
<a id="L395"></a><span class="ln">   395</span>			return nil, err
<a id="L396"></a><span class="ln">   396</span>		}
<a id="L397"></a><span class="ln">   397</span>		c.Stderr = pw
<a id="L398"></a><span class="ln">   398</span>		c.closeAfterStart = append(c.closeAfterStart, pw)
<a id="L399"></a><span class="ln">   399</span>		c.closeAfterWait = append(c.closeAfterWait, pr)
<a id="L400"></a><span class="ln">   400</span>		return pr, nil
<a id="L401"></a><span class="ln">   401</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

