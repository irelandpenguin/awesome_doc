<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/os/doc.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/os/doc.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2012 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package os
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import &#34;time&#34;
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// FindProcess looks for a running process by its pid.</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// The Process it returns can be used to obtain information</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// about the underlying operating system process.</span>
<a id="L12"></a><span class="ln">    12</span>	func FindProcess(pid int) (p *Process, err error) {
<a id="L13"></a><span class="ln">    13</span>		return findProcess(pid)
<a id="L14"></a><span class="ln">    14</span>	}
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// StartProcess starts a new process with the program, arguments and attributes</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// specified by name, argv and attr.</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">//</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// StartProcess is a low-level interface. The os/exec package provides</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// higher-level interfaces.</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">//</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// If there is an error, it will be of type *PathError.</span>
<a id="L23"></a><span class="ln">    23</span>	func StartProcess(name string, argv []string, attr *ProcAttr) (*Process, error) {
<a id="L24"></a><span class="ln">    24</span>		return startProcess(name, argv, attr)
<a id="L25"></a><span class="ln">    25</span>	}
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// Release releases any resources associated with the Process p,</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// rendering it unusable in the future.</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// Release only needs to be called if Wait is not.</span>
<a id="L30"></a><span class="ln">    30</span>	func (p *Process) Release() error {
<a id="L31"></a><span class="ln">    31</span>		return p.release()
<a id="L32"></a><span class="ln">    32</span>	}
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// Kill causes the Process to exit immediately.</span>
<a id="L35"></a><span class="ln">    35</span>	func (p *Process) Kill() error {
<a id="L36"></a><span class="ln">    36</span>		return p.kill()
<a id="L37"></a><span class="ln">    37</span>	}
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// Wait waits for the Process to exit, and then returns a</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// ProcessState describing its status and an error, if any.</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// Wait releases any resources associated with the Process.</span>
<a id="L42"></a><span class="ln">    42</span>	func (p *Process) Wait() (*ProcessState, error) {
<a id="L43"></a><span class="ln">    43</span>		return p.wait()
<a id="L44"></a><span class="ln">    44</span>	}
<a id="L45"></a><span class="ln">    45</span>	
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">// Signal sends a signal to the Process.</span>
<a id="L47"></a><span class="ln">    47</span>	func (p *Process) Signal(sig Signal) error {
<a id="L48"></a><span class="ln">    48</span>		return p.signal(sig)
<a id="L49"></a><span class="ln">    49</span>	}
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// UserTime returns the user CPU time of the exited process and its children.</span>
<a id="L52"></a><span class="ln">    52</span>	func (p *ProcessState) UserTime() time.Duration {
<a id="L53"></a><span class="ln">    53</span>		return p.userTime()
<a id="L54"></a><span class="ln">    54</span>	}
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// SystemTime returns the system CPU time of the exited process and its children.</span>
<a id="L57"></a><span class="ln">    57</span>	func (p *ProcessState) SystemTime() time.Duration {
<a id="L58"></a><span class="ln">    58</span>		return p.systemTime()
<a id="L59"></a><span class="ln">    59</span>	}
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">// Exited returns whether the program has exited.</span>
<a id="L62"></a><span class="ln">    62</span>	func (p *ProcessState) Exited() bool {
<a id="L63"></a><span class="ln">    63</span>		return p.exited()
<a id="L64"></a><span class="ln">    64</span>	}
<a id="L65"></a><span class="ln">    65</span>	
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">// Success reports whether the program exited successfully,</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// such as with exit status 0 on Unix.</span>
<a id="L68"></a><span class="ln">    68</span>	func (p *ProcessState) Success() bool {
<a id="L69"></a><span class="ln">    69</span>		return p.success()
<a id="L70"></a><span class="ln">    70</span>	}
<a id="L71"></a><span class="ln">    71</span>	
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">// Sys returns system-dependent exit information about</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// the process.  Convert it to the appropriate underlying</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">// type, such as syscall.WaitStatus on Unix, to access its contents.</span>
<a id="L75"></a><span class="ln">    75</span>	func (p *ProcessState) Sys() interface{} {
<a id="L76"></a><span class="ln">    76</span>		return p.sys()
<a id="L77"></a><span class="ln">    77</span>	}
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// SysUsage returns system-dependent resource usage information about</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// the exited process.  Convert it to the appropriate underlying</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// type, such as *syscall.Rusage on Unix, to access its contents.</span>
<a id="L82"></a><span class="ln">    82</span>	func (p *ProcessState) SysUsage() interface{} {
<a id="L83"></a><span class="ln">    83</span>		return p.sysUsage()
<a id="L84"></a><span class="ln">    84</span>	}
<a id="L85"></a><span class="ln">    85</span>	
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// Hostname returns the host name reported by the kernel.</span>
<a id="L87"></a><span class="ln">    87</span>	func Hostname() (name string, err error) {
<a id="L88"></a><span class="ln">    88</span>		return hostname()
<a id="L89"></a><span class="ln">    89</span>	}
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// Readdir reads the contents of the directory associated with file and</span>
<a id="L92"></a><span class="ln">    92</span>	<span class="comment">// returns an array of up to n FileInfo values, as would be returned</span>
<a id="L93"></a><span class="ln">    93</span>	<span class="comment">// by Lstat, in directory order. Subsequent calls on the same file will yield</span>
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// further FileInfos.</span>
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">//</span>
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">// If n &gt; 0, Readdir returns at most n FileInfo structures. In this case, if</span>
<a id="L97"></a><span class="ln">    97</span>	<span class="comment">// Readdir returns an empty slice, it will return a non-nil error</span>
<a id="L98"></a><span class="ln">    98</span>	<span class="comment">// explaining why. At the end of a directory, the error is io.EOF.</span>
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">//</span>
<a id="L100"></a><span class="ln">   100</span>	<span class="comment">// If n &lt;= 0, Readdir returns all the FileInfo from the directory in</span>
<a id="L101"></a><span class="ln">   101</span>	<span class="comment">// a single slice. In this case, if Readdir succeeds (reads all</span>
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">// the way to the end of the directory), it returns the slice and a</span>
<a id="L103"></a><span class="ln">   103</span>	<span class="comment">// nil error. If it encounters an error before the end of the</span>
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">// directory, Readdir returns the FileInfo read until that point</span>
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// and a non-nil error.</span>
<a id="L106"></a><span class="ln">   106</span>	func (f *File) Readdir(n int) (fi []FileInfo, err error) {
<a id="L107"></a><span class="ln">   107</span>		return f.readdir(n)
<a id="L108"></a><span class="ln">   108</span>	}
<a id="L109"></a><span class="ln">   109</span>	
<a id="L110"></a><span class="ln">   110</span>	<span class="comment">// Readdirnames reads and returns a slice of names from the directory f.</span>
<a id="L111"></a><span class="ln">   111</span>	<span class="comment">//</span>
<a id="L112"></a><span class="ln">   112</span>	<span class="comment">// If n &gt; 0, Readdirnames returns at most n names. In this case, if</span>
<a id="L113"></a><span class="ln">   113</span>	<span class="comment">// Readdirnames returns an empty slice, it will return a non-nil error</span>
<a id="L114"></a><span class="ln">   114</span>	<span class="comment">// explaining why. At the end of a directory, the error is io.EOF.</span>
<a id="L115"></a><span class="ln">   115</span>	<span class="comment">//</span>
<a id="L116"></a><span class="ln">   116</span>	<span class="comment">// If n &lt;= 0, Readdirnames returns all the names from the directory in</span>
<a id="L117"></a><span class="ln">   117</span>	<span class="comment">// a single slice. In this case, if Readdirnames succeeds (reads all</span>
<a id="L118"></a><span class="ln">   118</span>	<span class="comment">// the way to the end of the directory), it returns the slice and a</span>
<a id="L119"></a><span class="ln">   119</span>	<span class="comment">// nil error. If it encounters an error before the end of the</span>
<a id="L120"></a><span class="ln">   120</span>	<span class="comment">// directory, Readdirnames returns the names read until that point and</span>
<a id="L121"></a><span class="ln">   121</span>	<span class="comment">// a non-nil error.</span>
<a id="L122"></a><span class="ln">   122</span>	func (f *File) Readdirnames(n int) (names []string, err error) {
<a id="L123"></a><span class="ln">   123</span>		return f.readdirnames(n)
<a id="L124"></a><span class="ln">   124</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

