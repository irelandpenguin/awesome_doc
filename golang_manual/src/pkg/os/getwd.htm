<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/os/getwd.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/os/getwd.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package os
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;syscall&#34;
<a id="L9"></a><span class="ln">     9</span>	)
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// Getwd returns a rooted path name corresponding to the</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// current directory.  If the current directory can be</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// reached via multiple paths (due to symbolic links),</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// Getwd may return any one of them.</span>
<a id="L15"></a><span class="ln">    15</span>	func Getwd() (pwd string, err error) {
<a id="L16"></a><span class="ln">    16</span>		<span class="comment">// If the operating system provides a Getwd call, use it.</span>
<a id="L17"></a><span class="ln">    17</span>		if syscall.ImplementsGetwd {
<a id="L18"></a><span class="ln">    18</span>			s, e := syscall.Getwd()
<a id="L19"></a><span class="ln">    19</span>			return s, NewSyscallError(&#34;getwd&#34;, e)
<a id="L20"></a><span class="ln">    20</span>		}
<a id="L21"></a><span class="ln">    21</span>	
<a id="L22"></a><span class="ln">    22</span>		<span class="comment">// Otherwise, we&#39;re trying to find our way back to &#34;.&#34;.</span>
<a id="L23"></a><span class="ln">    23</span>		dot, err := Stat(&#34;.&#34;)
<a id="L24"></a><span class="ln">    24</span>		if err != nil {
<a id="L25"></a><span class="ln">    25</span>			return &#34;&#34;, err
<a id="L26"></a><span class="ln">    26</span>		}
<a id="L27"></a><span class="ln">    27</span>	
<a id="L28"></a><span class="ln">    28</span>		<span class="comment">// Clumsy but widespread kludge:</span>
<a id="L29"></a><span class="ln">    29</span>		<span class="comment">// if $PWD is set and matches &#34;.&#34;, use it.</span>
<a id="L30"></a><span class="ln">    30</span>		pwd = Getenv(&#34;PWD&#34;)
<a id="L31"></a><span class="ln">    31</span>		if len(pwd) &gt; 0 &amp;&amp; pwd[0] == &#39;/&#39; {
<a id="L32"></a><span class="ln">    32</span>			d, err := Stat(pwd)
<a id="L33"></a><span class="ln">    33</span>			if err == nil &amp;&amp; SameFile(dot, d) {
<a id="L34"></a><span class="ln">    34</span>				return pwd, nil
<a id="L35"></a><span class="ln">    35</span>			}
<a id="L36"></a><span class="ln">    36</span>		}
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>		<span class="comment">// Root is a special case because it has no parent</span>
<a id="L39"></a><span class="ln">    39</span>		<span class="comment">// and ends in a slash.</span>
<a id="L40"></a><span class="ln">    40</span>		root, err := Stat(&#34;/&#34;)
<a id="L41"></a><span class="ln">    41</span>		if err != nil {
<a id="L42"></a><span class="ln">    42</span>			<span class="comment">// Can&#39;t stat root - no hope.</span>
<a id="L43"></a><span class="ln">    43</span>			return &#34;&#34;, err
<a id="L44"></a><span class="ln">    44</span>		}
<a id="L45"></a><span class="ln">    45</span>		if SameFile(root, dot) {
<a id="L46"></a><span class="ln">    46</span>			return &#34;/&#34;, nil
<a id="L47"></a><span class="ln">    47</span>		}
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>		<span class="comment">// General algorithm: find name in parent</span>
<a id="L50"></a><span class="ln">    50</span>		<span class="comment">// and then find name of parent.  Each iteration</span>
<a id="L51"></a><span class="ln">    51</span>		<span class="comment">// adds /name to the beginning of pwd.</span>
<a id="L52"></a><span class="ln">    52</span>		pwd = &#34;&#34;
<a id="L53"></a><span class="ln">    53</span>		for parent := &#34;..&#34;; ; parent = &#34;../&#34; + parent {
<a id="L54"></a><span class="ln">    54</span>			if len(parent) &gt;= 1024 { <span class="comment">// Sanity check</span>
<a id="L55"></a><span class="ln">    55</span>				return &#34;&#34;, syscall.ENAMETOOLONG
<a id="L56"></a><span class="ln">    56</span>			}
<a id="L57"></a><span class="ln">    57</span>			fd, err := Open(parent)
<a id="L58"></a><span class="ln">    58</span>			if err != nil {
<a id="L59"></a><span class="ln">    59</span>				return &#34;&#34;, err
<a id="L60"></a><span class="ln">    60</span>			}
<a id="L61"></a><span class="ln">    61</span>	
<a id="L62"></a><span class="ln">    62</span>			for {
<a id="L63"></a><span class="ln">    63</span>				names, err := fd.Readdirnames(100)
<a id="L64"></a><span class="ln">    64</span>				if err != nil {
<a id="L65"></a><span class="ln">    65</span>					fd.Close()
<a id="L66"></a><span class="ln">    66</span>					return &#34;&#34;, err
<a id="L67"></a><span class="ln">    67</span>				}
<a id="L68"></a><span class="ln">    68</span>				for _, name := range names {
<a id="L69"></a><span class="ln">    69</span>					d, _ := Lstat(parent + &#34;/&#34; + name)
<a id="L70"></a><span class="ln">    70</span>					if SameFile(d, dot) {
<a id="L71"></a><span class="ln">    71</span>						pwd = &#34;/&#34; + name + pwd
<a id="L72"></a><span class="ln">    72</span>						goto Found
<a id="L73"></a><span class="ln">    73</span>					}
<a id="L74"></a><span class="ln">    74</span>				}
<a id="L75"></a><span class="ln">    75</span>			}
<a id="L76"></a><span class="ln">    76</span>			fd.Close()
<a id="L77"></a><span class="ln">    77</span>			return &#34;&#34;, ErrNotExist
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>		Found:
<a id="L80"></a><span class="ln">    80</span>			pd, err := fd.Stat()
<a id="L81"></a><span class="ln">    81</span>			if err != nil {
<a id="L82"></a><span class="ln">    82</span>				return &#34;&#34;, err
<a id="L83"></a><span class="ln">    83</span>			}
<a id="L84"></a><span class="ln">    84</span>			fd.Close()
<a id="L85"></a><span class="ln">    85</span>			if SameFile(pd, root) {
<a id="L86"></a><span class="ln">    86</span>				break
<a id="L87"></a><span class="ln">    87</span>			}
<a id="L88"></a><span class="ln">    88</span>			<span class="comment">// Set up for next round.</span>
<a id="L89"></a><span class="ln">    89</span>			dot = pd
<a id="L90"></a><span class="ln">    90</span>		}
<a id="L91"></a><span class="ln">    91</span>		return pwd, nil
<a id="L92"></a><span class="ln">    92</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

