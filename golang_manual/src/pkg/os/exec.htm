<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/os/exec.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/os/exec.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package os
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;runtime&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;syscall&#34;
<a id="L10"></a><span class="ln">    10</span>	)
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// Process stores the information about a process created by StartProcess.</span>
<a id="L13"></a><span class="ln">    13</span>	type Process struct {
<a id="L14"></a><span class="ln">    14</span>		Pid    int
<a id="L15"></a><span class="ln">    15</span>		handle uintptr
<a id="L16"></a><span class="ln">    16</span>		done   bool <span class="comment">// process has been successfully waited on</span>
<a id="L17"></a><span class="ln">    17</span>	}
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	func newProcess(pid int, handle uintptr) *Process {
<a id="L20"></a><span class="ln">    20</span>		p := &amp;Process{Pid: pid, handle: handle}
<a id="L21"></a><span class="ln">    21</span>		runtime.SetFinalizer(p, (*Process).Release)
<a id="L22"></a><span class="ln">    22</span>		return p
<a id="L23"></a><span class="ln">    23</span>	}
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// ProcAttr holds the attributes that will be applied to a new process</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// started by StartProcess.</span>
<a id="L27"></a><span class="ln">    27</span>	type ProcAttr struct {
<a id="L28"></a><span class="ln">    28</span>		<span class="comment">// If Dir is non-empty, the child changes into the directory before</span>
<a id="L29"></a><span class="ln">    29</span>		<span class="comment">// creating the process.</span>
<a id="L30"></a><span class="ln">    30</span>		Dir string
<a id="L31"></a><span class="ln">    31</span>		<span class="comment">// If Env is non-nil, it gives the environment variables for the</span>
<a id="L32"></a><span class="ln">    32</span>		<span class="comment">// new process in the form returned by Environ.</span>
<a id="L33"></a><span class="ln">    33</span>		<span class="comment">// If it is nil, the result of Environ will be used.</span>
<a id="L34"></a><span class="ln">    34</span>		Env []string
<a id="L35"></a><span class="ln">    35</span>		<span class="comment">// Files specifies the open files inherited by the new process.  The</span>
<a id="L36"></a><span class="ln">    36</span>		<span class="comment">// first three entries correspond to standard input, standard output, and</span>
<a id="L37"></a><span class="ln">    37</span>		<span class="comment">// standard error.  An implementation may support additional entries,</span>
<a id="L38"></a><span class="ln">    38</span>		<span class="comment">// depending on the underlying operating system.  A nil entry corresponds</span>
<a id="L39"></a><span class="ln">    39</span>		<span class="comment">// to that file being closed when the process starts.</span>
<a id="L40"></a><span class="ln">    40</span>		Files []*File
<a id="L41"></a><span class="ln">    41</span>	
<a id="L42"></a><span class="ln">    42</span>		<span class="comment">// Operating system-specific process creation attributes.</span>
<a id="L43"></a><span class="ln">    43</span>		<span class="comment">// Note that setting this field means that your program</span>
<a id="L44"></a><span class="ln">    44</span>		<span class="comment">// may not execute properly or even compile on some</span>
<a id="L45"></a><span class="ln">    45</span>		<span class="comment">// operating systems.</span>
<a id="L46"></a><span class="ln">    46</span>		Sys *syscall.SysProcAttr
<a id="L47"></a><span class="ln">    47</span>	}
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">// A Signal represents an operating system signal.</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// The usual underlying implementation is operating system-dependent:</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// on Unix it is syscall.Signal.</span>
<a id="L52"></a><span class="ln">    52</span>	type Signal interface {
<a id="L53"></a><span class="ln">    53</span>		String() string
<a id="L54"></a><span class="ln">    54</span>		Signal() <span class="comment">// to distinguish from other Stringers</span>
<a id="L55"></a><span class="ln">    55</span>	}
<a id="L56"></a><span class="ln">    56</span>	
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">// The only signal values guaranteed to be present on all systems</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// are Interrupt (send the process an interrupt) and</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// Kill (force the process to exit).</span>
<a id="L60"></a><span class="ln">    60</span>	var (
<a id="L61"></a><span class="ln">    61</span>		Interrupt Signal = syscall.SIGINT
<a id="L62"></a><span class="ln">    62</span>		Kill      Signal = syscall.SIGKILL
<a id="L63"></a><span class="ln">    63</span>	)
<a id="L64"></a><span class="ln">    64</span>	
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// Getpid returns the process id of the caller.</span>
<a id="L66"></a><span class="ln">    66</span>	func Getpid() int { return syscall.Getpid() }
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// Getppid returns the process id of the caller&#39;s parent.</span>
<a id="L69"></a><span class="ln">    69</span>	func Getppid() int { return syscall.Getppid() }
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

