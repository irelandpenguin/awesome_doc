<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/os/types.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/os/types.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package os
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;syscall&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;time&#34;
<a id="L10"></a><span class="ln">    10</span>	)
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// Getpagesize returns the underlying system&#39;s memory page size.</span>
<a id="L13"></a><span class="ln">    13</span>	func Getpagesize() int { return syscall.Getpagesize() }
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// A FileInfo describes a file and is returned by Stat and Lstat</span>
<a id="L16"></a><span class="ln">    16</span>	type FileInfo interface {
<a id="L17"></a><span class="ln">    17</span>		Name() string       <span class="comment">// base name of the file</span>
<a id="L18"></a><span class="ln">    18</span>		Size() int64        <span class="comment">// length in bytes for regular files; system-dependent for others</span>
<a id="L19"></a><span class="ln">    19</span>		Mode() FileMode     <span class="comment">// file mode bits</span>
<a id="L20"></a><span class="ln">    20</span>		ModTime() time.Time <span class="comment">// modification time</span>
<a id="L21"></a><span class="ln">    21</span>		IsDir() bool        <span class="comment">// abbreviation for Mode().IsDir()</span>
<a id="L22"></a><span class="ln">    22</span>		Sys() interface{}   <span class="comment">// underlying data source (can return nil)</span>
<a id="L23"></a><span class="ln">    23</span>	}
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// A FileMode represents a file&#39;s mode and permission bits.</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// The bits have the same definition on all systems, so that</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// information about files can be moved from one system</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// to another portably.  Not all bits apply to all systems.</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// The only required bit is ModeDir for directories.</span>
<a id="L30"></a><span class="ln">    30</span>	type FileMode uint32
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// The defined file mode bits are the most significant bits of the FileMode.</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// The nine least-significant bits are the standard Unix rwxrwxrwx permissions.</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// The values of these bits should be considered part of the public API and</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// may be used in wire protocols or disk representations: they must not be</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// changed, although new bits might be added.</span>
<a id="L37"></a><span class="ln">    37</span>	const (
<a id="L38"></a><span class="ln">    38</span>		<span class="comment">// The single letters are the abbreviations</span>
<a id="L39"></a><span class="ln">    39</span>		<span class="comment">// used by the String method&#39;s formatting.</span>
<a id="L40"></a><span class="ln">    40</span>		ModeDir        FileMode = 1 &lt;&lt; (32 - 1 - iota) <span class="comment">// d: is a directory</span>
<a id="L41"></a><span class="ln">    41</span>		ModeAppend                                     <span class="comment">// a: append-only</span>
<a id="L42"></a><span class="ln">    42</span>		ModeExclusive                                  <span class="comment">// l: exclusive use</span>
<a id="L43"></a><span class="ln">    43</span>		ModeTemporary                                  <span class="comment">// T: temporary file (not backed up)</span>
<a id="L44"></a><span class="ln">    44</span>		ModeSymlink                                    <span class="comment">// L: symbolic link</span>
<a id="L45"></a><span class="ln">    45</span>		ModeDevice                                     <span class="comment">// D: device file</span>
<a id="L46"></a><span class="ln">    46</span>		ModeNamedPipe                                  <span class="comment">// p: named pipe (FIFO)</span>
<a id="L47"></a><span class="ln">    47</span>		ModeSocket                                     <span class="comment">// S: Unix domain socket</span>
<a id="L48"></a><span class="ln">    48</span>		ModeSetuid                                     <span class="comment">// u: setuid</span>
<a id="L49"></a><span class="ln">    49</span>		ModeSetgid                                     <span class="comment">// g: setgid</span>
<a id="L50"></a><span class="ln">    50</span>		ModeCharDevice                                 <span class="comment">// c: Unix character device, when ModeDevice is set</span>
<a id="L51"></a><span class="ln">    51</span>		ModeSticky                                     <span class="comment">// t: sticky</span>
<a id="L52"></a><span class="ln">    52</span>	
<a id="L53"></a><span class="ln">    53</span>		<span class="comment">// Mask for the type bits. For regular files, none will be set.</span>
<a id="L54"></a><span class="ln">    54</span>		ModeType = ModeDir | ModeSymlink | ModeNamedPipe | ModeSocket | ModeDevice
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>		ModePerm FileMode = 0777 <span class="comment">// permission bits</span>
<a id="L57"></a><span class="ln">    57</span>	)
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>	func (m FileMode) String() string {
<a id="L60"></a><span class="ln">    60</span>		const str = &#34;dalTLDpSugct&#34;
<a id="L61"></a><span class="ln">    61</span>		var buf [32]byte <span class="comment">// Mode is uint32.</span>
<a id="L62"></a><span class="ln">    62</span>		w := 0
<a id="L63"></a><span class="ln">    63</span>		for i, c := range str {
<a id="L64"></a><span class="ln">    64</span>			if m&amp;(1&lt;&lt;uint(32-1-i)) != 0 {
<a id="L65"></a><span class="ln">    65</span>				buf[w] = byte(c)
<a id="L66"></a><span class="ln">    66</span>				w++
<a id="L67"></a><span class="ln">    67</span>			}
<a id="L68"></a><span class="ln">    68</span>		}
<a id="L69"></a><span class="ln">    69</span>		if w == 0 {
<a id="L70"></a><span class="ln">    70</span>			buf[w] = &#39;-&#39;
<a id="L71"></a><span class="ln">    71</span>			w++
<a id="L72"></a><span class="ln">    72</span>		}
<a id="L73"></a><span class="ln">    73</span>		const rwx = &#34;rwxrwxrwx&#34;
<a id="L74"></a><span class="ln">    74</span>		for i, c := range rwx {
<a id="L75"></a><span class="ln">    75</span>			if m&amp;(1&lt;&lt;uint(9-1-i)) != 0 {
<a id="L76"></a><span class="ln">    76</span>				buf[w] = byte(c)
<a id="L77"></a><span class="ln">    77</span>			} else {
<a id="L78"></a><span class="ln">    78</span>				buf[w] = &#39;-&#39;
<a id="L79"></a><span class="ln">    79</span>			}
<a id="L80"></a><span class="ln">    80</span>			w++
<a id="L81"></a><span class="ln">    81</span>		}
<a id="L82"></a><span class="ln">    82</span>		return string(buf[:w])
<a id="L83"></a><span class="ln">    83</span>	}
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">// IsDir reports whether m describes a directory.</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// That is, it tests for the ModeDir bit being set in m.</span>
<a id="L87"></a><span class="ln">    87</span>	func (m FileMode) IsDir() bool {
<a id="L88"></a><span class="ln">    88</span>		return m&amp;ModeDir != 0
<a id="L89"></a><span class="ln">    89</span>	}
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// Perm returns the Unix permission bits in m.</span>
<a id="L92"></a><span class="ln">    92</span>	func (m FileMode) Perm() FileMode {
<a id="L93"></a><span class="ln">    93</span>		return m &amp; ModePerm
<a id="L94"></a><span class="ln">    94</span>	}
<a id="L95"></a><span class="ln">    95</span>	
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">// A fileStat is the implementation of FileInfo returned by Stat and Lstat.</span>
<a id="L97"></a><span class="ln">    97</span>	type fileStat struct {
<a id="L98"></a><span class="ln">    98</span>		name    string
<a id="L99"></a><span class="ln">    99</span>		size    int64
<a id="L100"></a><span class="ln">   100</span>		mode    FileMode
<a id="L101"></a><span class="ln">   101</span>		modTime time.Time
<a id="L102"></a><span class="ln">   102</span>		sys     interface{}
<a id="L103"></a><span class="ln">   103</span>	}
<a id="L104"></a><span class="ln">   104</span>	
<a id="L105"></a><span class="ln">   105</span>	func (fs *fileStat) Name() string       { return fs.name }
<a id="L106"></a><span class="ln">   106</span>	func (fs *fileStat) Size() int64        { return fs.size }
<a id="L107"></a><span class="ln">   107</span>	func (fs *fileStat) Mode() FileMode     { return fs.mode }
<a id="L108"></a><span class="ln">   108</span>	func (fs *fileStat) ModTime() time.Time { return fs.modTime }
<a id="L109"></a><span class="ln">   109</span>	func (fs *fileStat) IsDir() bool        { return fs.mode.IsDir() }
<a id="L110"></a><span class="ln">   110</span>	func (fs *fileStat) Sys() interface{}   { return fs.sys }
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>	<span class="comment">// SameFile reports whether fi1 and fi2 describe the same file.</span>
<a id="L113"></a><span class="ln">   113</span>	<span class="comment">// For example, on Unix this means that the device and inode fields</span>
<a id="L114"></a><span class="ln">   114</span>	<span class="comment">// of the two underlying structures are identical; on other systems</span>
<a id="L115"></a><span class="ln">   115</span>	<span class="comment">// the decision may be based on the path names.</span>
<a id="L116"></a><span class="ln">   116</span>	<span class="comment">// SameFile only applies to results returned by this package&#39;s Stat.</span>
<a id="L117"></a><span class="ln">   117</span>	<span class="comment">// It returns false in other cases.</span>
<a id="L118"></a><span class="ln">   118</span>	func SameFile(fi1, fi2 FileInfo) bool {
<a id="L119"></a><span class="ln">   119</span>		fs1, ok1 := fi1.(*fileStat)
<a id="L120"></a><span class="ln">   120</span>		fs2, ok2 := fi2.(*fileStat)
<a id="L121"></a><span class="ln">   121</span>		if !ok1 || !ok2 {
<a id="L122"></a><span class="ln">   122</span>			return false
<a id="L123"></a><span class="ln">   123</span>		}
<a id="L124"></a><span class="ln">   124</span>		return sameFile(fs1.sys, fs2.sys)
<a id="L125"></a><span class="ln">   125</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

