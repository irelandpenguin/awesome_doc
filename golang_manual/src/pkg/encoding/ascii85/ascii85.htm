<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/encoding/ascii85/ascii85.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/encoding/ascii85/ascii85.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package ascii85 implements the ascii85 data encoding</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// as used in the btoa tool and Adobe&#39;s PostScript and PDF document formats.</span>
<a id="L7"></a><span class="ln">     7</span>	package ascii85
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;io&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;strconv&#34;
<a id="L12"></a><span class="ln">    12</span>	)
<a id="L13"></a><span class="ln">    13</span>	
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">/*
</span><a id="L15"></a><span class="ln">    15</span>	<span class="comment"> * Encoder
</span><a id="L16"></a><span class="ln">    16</span>	<span class="comment"> */</span>
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// Encode encodes src into at most MaxEncodedLen(len(src))</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// bytes of dst, returning the actual number of bytes written.</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">//</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// The encoding handles 4-byte chunks, using a special encoding</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// for the last fragment, so Encode is not appropriate for use on</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// individual blocks of a large data stream.  Use NewEncoder() instead.</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// Often, ascii85-encoded data is wrapped in &lt;~ and ~&gt; symbols.</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// Encode does not add these.</span>
<a id="L27"></a><span class="ln">    27</span>	func Encode(dst, src []byte) int {
<a id="L28"></a><span class="ln">    28</span>		if len(src) == 0 {
<a id="L29"></a><span class="ln">    29</span>			return 0
<a id="L30"></a><span class="ln">    30</span>		}
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>		n := 0
<a id="L33"></a><span class="ln">    33</span>		for len(src) &gt; 0 {
<a id="L34"></a><span class="ln">    34</span>			dst[0] = 0
<a id="L35"></a><span class="ln">    35</span>			dst[1] = 0
<a id="L36"></a><span class="ln">    36</span>			dst[2] = 0
<a id="L37"></a><span class="ln">    37</span>			dst[3] = 0
<a id="L38"></a><span class="ln">    38</span>			dst[4] = 0
<a id="L39"></a><span class="ln">    39</span>	
<a id="L40"></a><span class="ln">    40</span>			<span class="comment">// Unpack 4 bytes into uint32 to repack into base 85 5-byte.</span>
<a id="L41"></a><span class="ln">    41</span>			var v uint32
<a id="L42"></a><span class="ln">    42</span>			switch len(src) {
<a id="L43"></a><span class="ln">    43</span>			default:
<a id="L44"></a><span class="ln">    44</span>				v |= uint32(src[3])
<a id="L45"></a><span class="ln">    45</span>				fallthrough
<a id="L46"></a><span class="ln">    46</span>			case 3:
<a id="L47"></a><span class="ln">    47</span>				v |= uint32(src[2]) &lt;&lt; 8
<a id="L48"></a><span class="ln">    48</span>				fallthrough
<a id="L49"></a><span class="ln">    49</span>			case 2:
<a id="L50"></a><span class="ln">    50</span>				v |= uint32(src[1]) &lt;&lt; 16
<a id="L51"></a><span class="ln">    51</span>				fallthrough
<a id="L52"></a><span class="ln">    52</span>			case 1:
<a id="L53"></a><span class="ln">    53</span>				v |= uint32(src[0]) &lt;&lt; 24
<a id="L54"></a><span class="ln">    54</span>			}
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>			<span class="comment">// Special case: zero (!!!!!) shortens to z.</span>
<a id="L57"></a><span class="ln">    57</span>			if v == 0 &amp;&amp; len(src) &gt;= 4 {
<a id="L58"></a><span class="ln">    58</span>				dst[0] = &#39;z&#39;
<a id="L59"></a><span class="ln">    59</span>				dst = dst[1:]
<a id="L60"></a><span class="ln">    60</span>				src = src[4:]
<a id="L61"></a><span class="ln">    61</span>				n++
<a id="L62"></a><span class="ln">    62</span>				continue
<a id="L63"></a><span class="ln">    63</span>			}
<a id="L64"></a><span class="ln">    64</span>	
<a id="L65"></a><span class="ln">    65</span>			<span class="comment">// Otherwise, 5 base 85 digits starting at !.</span>
<a id="L66"></a><span class="ln">    66</span>			for i := 4; i &gt;= 0; i-- {
<a id="L67"></a><span class="ln">    67</span>				dst[i] = &#39;!&#39; + byte(v%85)
<a id="L68"></a><span class="ln">    68</span>				v /= 85
<a id="L69"></a><span class="ln">    69</span>			}
<a id="L70"></a><span class="ln">    70</span>	
<a id="L71"></a><span class="ln">    71</span>			<span class="comment">// If src was short, discard the low destination bytes.</span>
<a id="L72"></a><span class="ln">    72</span>			m := 5
<a id="L73"></a><span class="ln">    73</span>			if len(src) &lt; 4 {
<a id="L74"></a><span class="ln">    74</span>				m -= 4 - len(src)
<a id="L75"></a><span class="ln">    75</span>				src = nil
<a id="L76"></a><span class="ln">    76</span>			} else {
<a id="L77"></a><span class="ln">    77</span>				src = src[4:]
<a id="L78"></a><span class="ln">    78</span>			}
<a id="L79"></a><span class="ln">    79</span>			dst = dst[m:]
<a id="L80"></a><span class="ln">    80</span>			n += m
<a id="L81"></a><span class="ln">    81</span>		}
<a id="L82"></a><span class="ln">    82</span>		return n
<a id="L83"></a><span class="ln">    83</span>	}
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">// MaxEncodedLen returns the maximum length of an encoding of n source bytes.</span>
<a id="L86"></a><span class="ln">    86</span>	func MaxEncodedLen(n int) int { return (n + 3) / 4 * 5 }
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// NewEncoder returns a new ascii85 stream encoder.  Data written to</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">// the returned writer will be encoded and then written to w.</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// Ascii85 encodings operate in 32-bit blocks; when finished</span>
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// writing, the caller must Close the returned encoder to flush any</span>
<a id="L92"></a><span class="ln">    92</span>	<span class="comment">// trailing partial block.</span>
<a id="L93"></a><span class="ln">    93</span>	func NewEncoder(w io.Writer) io.WriteCloser { return &amp;encoder{w: w} }
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>	type encoder struct {
<a id="L96"></a><span class="ln">    96</span>		err  error
<a id="L97"></a><span class="ln">    97</span>		w    io.Writer
<a id="L98"></a><span class="ln">    98</span>		buf  [4]byte    <span class="comment">// buffered data waiting to be encoded</span>
<a id="L99"></a><span class="ln">    99</span>		nbuf int        <span class="comment">// number of bytes in buf</span>
<a id="L100"></a><span class="ln">   100</span>		out  [1024]byte <span class="comment">// output buffer</span>
<a id="L101"></a><span class="ln">   101</span>	}
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>	func (e *encoder) Write(p []byte) (n int, err error) {
<a id="L104"></a><span class="ln">   104</span>		if e.err != nil {
<a id="L105"></a><span class="ln">   105</span>			return 0, e.err
<a id="L106"></a><span class="ln">   106</span>		}
<a id="L107"></a><span class="ln">   107</span>	
<a id="L108"></a><span class="ln">   108</span>		<span class="comment">// Leading fringe.</span>
<a id="L109"></a><span class="ln">   109</span>		if e.nbuf &gt; 0 {
<a id="L110"></a><span class="ln">   110</span>			var i int
<a id="L111"></a><span class="ln">   111</span>			for i = 0; i &lt; len(p) &amp;&amp; e.nbuf &lt; 4; i++ {
<a id="L112"></a><span class="ln">   112</span>				e.buf[e.nbuf] = p[i]
<a id="L113"></a><span class="ln">   113</span>				e.nbuf++
<a id="L114"></a><span class="ln">   114</span>			}
<a id="L115"></a><span class="ln">   115</span>			n += i
<a id="L116"></a><span class="ln">   116</span>			p = p[i:]
<a id="L117"></a><span class="ln">   117</span>			if e.nbuf &lt; 4 {
<a id="L118"></a><span class="ln">   118</span>				return
<a id="L119"></a><span class="ln">   119</span>			}
<a id="L120"></a><span class="ln">   120</span>			nout := Encode(e.out[0:], e.buf[0:])
<a id="L121"></a><span class="ln">   121</span>			if _, e.err = e.w.Write(e.out[0:nout]); e.err != nil {
<a id="L122"></a><span class="ln">   122</span>				return n, e.err
<a id="L123"></a><span class="ln">   123</span>			}
<a id="L124"></a><span class="ln">   124</span>			e.nbuf = 0
<a id="L125"></a><span class="ln">   125</span>		}
<a id="L126"></a><span class="ln">   126</span>	
<a id="L127"></a><span class="ln">   127</span>		<span class="comment">// Large interior chunks.</span>
<a id="L128"></a><span class="ln">   128</span>		for len(p) &gt;= 4 {
<a id="L129"></a><span class="ln">   129</span>			nn := len(e.out) / 5 * 4
<a id="L130"></a><span class="ln">   130</span>			if nn &gt; len(p) {
<a id="L131"></a><span class="ln">   131</span>				nn = len(p)
<a id="L132"></a><span class="ln">   132</span>			}
<a id="L133"></a><span class="ln">   133</span>			nn -= nn % 4
<a id="L134"></a><span class="ln">   134</span>			if nn &gt; 0 {
<a id="L135"></a><span class="ln">   135</span>				nout := Encode(e.out[0:], p[0:nn])
<a id="L136"></a><span class="ln">   136</span>				if _, e.err = e.w.Write(e.out[0:nout]); e.err != nil {
<a id="L137"></a><span class="ln">   137</span>					return n, e.err
<a id="L138"></a><span class="ln">   138</span>				}
<a id="L139"></a><span class="ln">   139</span>			}
<a id="L140"></a><span class="ln">   140</span>			n += nn
<a id="L141"></a><span class="ln">   141</span>			p = p[nn:]
<a id="L142"></a><span class="ln">   142</span>		}
<a id="L143"></a><span class="ln">   143</span>	
<a id="L144"></a><span class="ln">   144</span>		<span class="comment">// Trailing fringe.</span>
<a id="L145"></a><span class="ln">   145</span>		for i := 0; i &lt; len(p); i++ {
<a id="L146"></a><span class="ln">   146</span>			e.buf[i] = p[i]
<a id="L147"></a><span class="ln">   147</span>		}
<a id="L148"></a><span class="ln">   148</span>		e.nbuf = len(p)
<a id="L149"></a><span class="ln">   149</span>		n += len(p)
<a id="L150"></a><span class="ln">   150</span>		return
<a id="L151"></a><span class="ln">   151</span>	}
<a id="L152"></a><span class="ln">   152</span>	
<a id="L153"></a><span class="ln">   153</span>	<span class="comment">// Close flushes any pending output from the encoder.</span>
<a id="L154"></a><span class="ln">   154</span>	<span class="comment">// It is an error to call Write after calling Close.</span>
<a id="L155"></a><span class="ln">   155</span>	func (e *encoder) Close() error {
<a id="L156"></a><span class="ln">   156</span>		<span class="comment">// If there&#39;s anything left in the buffer, flush it out</span>
<a id="L157"></a><span class="ln">   157</span>		if e.err == nil &amp;&amp; e.nbuf &gt; 0 {
<a id="L158"></a><span class="ln">   158</span>			nout := Encode(e.out[0:], e.buf[0:e.nbuf])
<a id="L159"></a><span class="ln">   159</span>			e.nbuf = 0
<a id="L160"></a><span class="ln">   160</span>			_, e.err = e.w.Write(e.out[0:nout])
<a id="L161"></a><span class="ln">   161</span>		}
<a id="L162"></a><span class="ln">   162</span>		return e.err
<a id="L163"></a><span class="ln">   163</span>	}
<a id="L164"></a><span class="ln">   164</span>	
<a id="L165"></a><span class="ln">   165</span>	<span class="comment">/*
</span><a id="L166"></a><span class="ln">   166</span>	<span class="comment"> * Decoder
</span><a id="L167"></a><span class="ln">   167</span>	<span class="comment"> */</span>
<a id="L168"></a><span class="ln">   168</span>	
<a id="L169"></a><span class="ln">   169</span>	type CorruptInputError int64
<a id="L170"></a><span class="ln">   170</span>	
<a id="L171"></a><span class="ln">   171</span>	func (e CorruptInputError) Error() string {
<a id="L172"></a><span class="ln">   172</span>		return &#34;illegal ascii85 data at input byte &#34; + strconv.FormatInt(int64(e), 10)
<a id="L173"></a><span class="ln">   173</span>	}
<a id="L174"></a><span class="ln">   174</span>	
<a id="L175"></a><span class="ln">   175</span>	<span class="comment">// Decode decodes src into dst, returning both the number</span>
<a id="L176"></a><span class="ln">   176</span>	<span class="comment">// of bytes written to dst and the number consumed from src.</span>
<a id="L177"></a><span class="ln">   177</span>	<span class="comment">// If src contains invalid ascii85 data, Decode will return the</span>
<a id="L178"></a><span class="ln">   178</span>	<span class="comment">// number of bytes successfully written and a CorruptInputError.</span>
<a id="L179"></a><span class="ln">   179</span>	<span class="comment">// Decode ignores space and control characters in src.</span>
<a id="L180"></a><span class="ln">   180</span>	<span class="comment">// Often, ascii85-encoded data is wrapped in &lt;~ and ~&gt; symbols.</span>
<a id="L181"></a><span class="ln">   181</span>	<span class="comment">// Decode expects these to have been stripped by the caller.</span>
<a id="L182"></a><span class="ln">   182</span>	<span class="comment">//</span>
<a id="L183"></a><span class="ln">   183</span>	<span class="comment">// If flush is true, Decode assumes that src represents the</span>
<a id="L184"></a><span class="ln">   184</span>	<span class="comment">// end of the input stream and processes it completely rather</span>
<a id="L185"></a><span class="ln">   185</span>	<span class="comment">// than wait for the completion of another 32-bit block.</span>
<a id="L186"></a><span class="ln">   186</span>	<span class="comment">//</span>
<a id="L187"></a><span class="ln">   187</span>	<span class="comment">// NewDecoder wraps an io.Reader interface around Decode.</span>
<a id="L188"></a><span class="ln">   188</span>	<span class="comment">//</span>
<a id="L189"></a><span class="ln">   189</span>	func Decode(dst, src []byte, flush bool) (ndst, nsrc int, err error) {
<a id="L190"></a><span class="ln">   190</span>		var v uint32
<a id="L191"></a><span class="ln">   191</span>		var nb int
<a id="L192"></a><span class="ln">   192</span>		for i, b := range src {
<a id="L193"></a><span class="ln">   193</span>			if len(dst)-ndst &lt; 4 {
<a id="L194"></a><span class="ln">   194</span>				return
<a id="L195"></a><span class="ln">   195</span>			}
<a id="L196"></a><span class="ln">   196</span>			switch {
<a id="L197"></a><span class="ln">   197</span>			case b &lt;= &#39; &#39;:
<a id="L198"></a><span class="ln">   198</span>				continue
<a id="L199"></a><span class="ln">   199</span>			case b == &#39;z&#39; &amp;&amp; nb == 0:
<a id="L200"></a><span class="ln">   200</span>				nb = 5
<a id="L201"></a><span class="ln">   201</span>				v = 0
<a id="L202"></a><span class="ln">   202</span>			case &#39;!&#39; &lt;= b &amp;&amp; b &lt;= &#39;u&#39;:
<a id="L203"></a><span class="ln">   203</span>				v = v*85 + uint32(b-&#39;!&#39;)
<a id="L204"></a><span class="ln">   204</span>				nb++
<a id="L205"></a><span class="ln">   205</span>			default:
<a id="L206"></a><span class="ln">   206</span>				return 0, 0, CorruptInputError(i)
<a id="L207"></a><span class="ln">   207</span>			}
<a id="L208"></a><span class="ln">   208</span>			if nb == 5 {
<a id="L209"></a><span class="ln">   209</span>				nsrc = i + 1
<a id="L210"></a><span class="ln">   210</span>				dst[ndst] = byte(v &gt;&gt; 24)
<a id="L211"></a><span class="ln">   211</span>				dst[ndst+1] = byte(v &gt;&gt; 16)
<a id="L212"></a><span class="ln">   212</span>				dst[ndst+2] = byte(v &gt;&gt; 8)
<a id="L213"></a><span class="ln">   213</span>				dst[ndst+3] = byte(v)
<a id="L214"></a><span class="ln">   214</span>				ndst += 4
<a id="L215"></a><span class="ln">   215</span>				nb = 0
<a id="L216"></a><span class="ln">   216</span>				v = 0
<a id="L217"></a><span class="ln">   217</span>			}
<a id="L218"></a><span class="ln">   218</span>		}
<a id="L219"></a><span class="ln">   219</span>		if flush {
<a id="L220"></a><span class="ln">   220</span>			nsrc = len(src)
<a id="L221"></a><span class="ln">   221</span>			if nb &gt; 0 {
<a id="L222"></a><span class="ln">   222</span>				<span class="comment">// The number of output bytes in the last fragment</span>
<a id="L223"></a><span class="ln">   223</span>				<span class="comment">// is the number of leftover input bytes - 1:</span>
<a id="L224"></a><span class="ln">   224</span>				<span class="comment">// the extra byte provides enough bits to cover</span>
<a id="L225"></a><span class="ln">   225</span>				<span class="comment">// the inefficiency of the encoding for the block.</span>
<a id="L226"></a><span class="ln">   226</span>				if nb == 1 {
<a id="L227"></a><span class="ln">   227</span>					return 0, 0, CorruptInputError(len(src))
<a id="L228"></a><span class="ln">   228</span>				}
<a id="L229"></a><span class="ln">   229</span>				for i := nb; i &lt; 5; i++ {
<a id="L230"></a><span class="ln">   230</span>					<span class="comment">// The short encoding truncated the output value.</span>
<a id="L231"></a><span class="ln">   231</span>					<span class="comment">// We have to assume the worst case values (digit 84)</span>
<a id="L232"></a><span class="ln">   232</span>					<span class="comment">// in order to ensure that the top bits are correct.</span>
<a id="L233"></a><span class="ln">   233</span>					v = v*85 + 84
<a id="L234"></a><span class="ln">   234</span>				}
<a id="L235"></a><span class="ln">   235</span>				for i := 0; i &lt; nb-1; i++ {
<a id="L236"></a><span class="ln">   236</span>					dst[ndst] = byte(v &gt;&gt; 24)
<a id="L237"></a><span class="ln">   237</span>					v &lt;&lt;= 8
<a id="L238"></a><span class="ln">   238</span>					ndst++
<a id="L239"></a><span class="ln">   239</span>				}
<a id="L240"></a><span class="ln">   240</span>			}
<a id="L241"></a><span class="ln">   241</span>		}
<a id="L242"></a><span class="ln">   242</span>		return
<a id="L243"></a><span class="ln">   243</span>	}
<a id="L244"></a><span class="ln">   244</span>	
<a id="L245"></a><span class="ln">   245</span>	<span class="comment">// NewDecoder constructs a new ascii85 stream decoder.</span>
<a id="L246"></a><span class="ln">   246</span>	func NewDecoder(r io.Reader) io.Reader { return &amp;decoder{r: r} }
<a id="L247"></a><span class="ln">   247</span>	
<a id="L248"></a><span class="ln">   248</span>	type decoder struct {
<a id="L249"></a><span class="ln">   249</span>		err     error
<a id="L250"></a><span class="ln">   250</span>		readErr error
<a id="L251"></a><span class="ln">   251</span>		r       io.Reader
<a id="L252"></a><span class="ln">   252</span>		end     bool       <span class="comment">// saw end of message</span>
<a id="L253"></a><span class="ln">   253</span>		buf     [1024]byte <span class="comment">// leftover input</span>
<a id="L254"></a><span class="ln">   254</span>		nbuf    int
<a id="L255"></a><span class="ln">   255</span>		out     []byte <span class="comment">// leftover decoded output</span>
<a id="L256"></a><span class="ln">   256</span>		outbuf  [1024]byte
<a id="L257"></a><span class="ln">   257</span>	}
<a id="L258"></a><span class="ln">   258</span>	
<a id="L259"></a><span class="ln">   259</span>	func (d *decoder) Read(p []byte) (n int, err error) {
<a id="L260"></a><span class="ln">   260</span>		if len(p) == 0 {
<a id="L261"></a><span class="ln">   261</span>			return 0, nil
<a id="L262"></a><span class="ln">   262</span>		}
<a id="L263"></a><span class="ln">   263</span>		if d.err != nil {
<a id="L264"></a><span class="ln">   264</span>			return 0, d.err
<a id="L265"></a><span class="ln">   265</span>		}
<a id="L266"></a><span class="ln">   266</span>	
<a id="L267"></a><span class="ln">   267</span>		for {
<a id="L268"></a><span class="ln">   268</span>			<span class="comment">// Copy leftover output from last decode.</span>
<a id="L269"></a><span class="ln">   269</span>			if len(d.out) &gt; 0 {
<a id="L270"></a><span class="ln">   270</span>				n = copy(p, d.out)
<a id="L271"></a><span class="ln">   271</span>				d.out = d.out[n:]
<a id="L272"></a><span class="ln">   272</span>				return
<a id="L273"></a><span class="ln">   273</span>			}
<a id="L274"></a><span class="ln">   274</span>	
<a id="L275"></a><span class="ln">   275</span>			<span class="comment">// Decode leftover input from last read.</span>
<a id="L276"></a><span class="ln">   276</span>			var nn, nsrc, ndst int
<a id="L277"></a><span class="ln">   277</span>			if d.nbuf &gt; 0 {
<a id="L278"></a><span class="ln">   278</span>				ndst, nsrc, d.err = Decode(d.outbuf[0:], d.buf[0:d.nbuf], d.readErr != nil)
<a id="L279"></a><span class="ln">   279</span>				if ndst &gt; 0 {
<a id="L280"></a><span class="ln">   280</span>					d.out = d.outbuf[0:ndst]
<a id="L281"></a><span class="ln">   281</span>					d.nbuf = copy(d.buf[0:], d.buf[nsrc:d.nbuf])
<a id="L282"></a><span class="ln">   282</span>					continue <span class="comment">// copy out and return</span>
<a id="L283"></a><span class="ln">   283</span>				}
<a id="L284"></a><span class="ln">   284</span>			}
<a id="L285"></a><span class="ln">   285</span>	
<a id="L286"></a><span class="ln">   286</span>			<span class="comment">// Out of input, out of decoded output.  Check errors.</span>
<a id="L287"></a><span class="ln">   287</span>			if d.err != nil {
<a id="L288"></a><span class="ln">   288</span>				return 0, d.err
<a id="L289"></a><span class="ln">   289</span>			}
<a id="L290"></a><span class="ln">   290</span>			if d.readErr != nil {
<a id="L291"></a><span class="ln">   291</span>				d.err = d.readErr
<a id="L292"></a><span class="ln">   292</span>				return 0, d.err
<a id="L293"></a><span class="ln">   293</span>			}
<a id="L294"></a><span class="ln">   294</span>	
<a id="L295"></a><span class="ln">   295</span>			<span class="comment">// Read more data.</span>
<a id="L296"></a><span class="ln">   296</span>			nn, d.readErr = d.r.Read(d.buf[d.nbuf:])
<a id="L297"></a><span class="ln">   297</span>			d.nbuf += nn
<a id="L298"></a><span class="ln">   298</span>		}
<a id="L299"></a><span class="ln">   299</span>		panic(&#34;unreachable&#34;)
<a id="L300"></a><span class="ln">   300</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

