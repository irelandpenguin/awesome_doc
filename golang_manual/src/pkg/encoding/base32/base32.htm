<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/encoding/base32/base32.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/encoding/base32/base32.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package base32 implements base32 encoding as specified by RFC 4648.</span>
<a id="L6"></a><span class="ln">     6</span>	package base32
<a id="L7"></a><span class="ln">     7</span>	
<a id="L8"></a><span class="ln">     8</span>	import (
<a id="L9"></a><span class="ln">     9</span>		&#34;io&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;strconv&#34;
<a id="L11"></a><span class="ln">    11</span>	)
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">/*
</span><a id="L14"></a><span class="ln">    14</span>	<span class="comment"> * Encodings
</span><a id="L15"></a><span class="ln">    15</span>	<span class="comment"> */</span>
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// An Encoding is a radix 32 encoding/decoding scheme, defined by a</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// 32-character alphabet.  The most common is the &#34;base32&#34; encoding</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// introduced for SASL GSSAPI and standardized in RFC 4648.</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// The alternate &#34;base32hex&#34; encoding is used in DNSSEC.</span>
<a id="L21"></a><span class="ln">    21</span>	type Encoding struct {
<a id="L22"></a><span class="ln">    22</span>		encode    string
<a id="L23"></a><span class="ln">    23</span>		decodeMap [256]byte
<a id="L24"></a><span class="ln">    24</span>	}
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>	const encodeStd = &#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ234567&#34;
<a id="L27"></a><span class="ln">    27</span>	const encodeHex = &#34;0123456789ABCDEFGHIJKLMNOPQRSTUV&#34;
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// NewEncoding returns a new Encoding defined by the given alphabet,</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// which must be a 32-byte string.</span>
<a id="L31"></a><span class="ln">    31</span>	func NewEncoding(encoder string) *Encoding {
<a id="L32"></a><span class="ln">    32</span>		e := new(Encoding)
<a id="L33"></a><span class="ln">    33</span>		e.encode = encoder
<a id="L34"></a><span class="ln">    34</span>		for i := 0; i &lt; len(e.decodeMap); i++ {
<a id="L35"></a><span class="ln">    35</span>			e.decodeMap[i] = 0xFF
<a id="L36"></a><span class="ln">    36</span>		}
<a id="L37"></a><span class="ln">    37</span>		for i := 0; i &lt; len(encoder); i++ {
<a id="L38"></a><span class="ln">    38</span>			e.decodeMap[encoder[i]] = byte(i)
<a id="L39"></a><span class="ln">    39</span>		}
<a id="L40"></a><span class="ln">    40</span>		return e
<a id="L41"></a><span class="ln">    41</span>	}
<a id="L42"></a><span class="ln">    42</span>	
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">// StdEncoding is the standard base32 encoding, as defined in</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">// RFC 4648.</span>
<a id="L45"></a><span class="ln">    45</span>	var StdEncoding = NewEncoding(encodeStd)
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">// HexEncoding is the ``Extended Hex Alphabet&#39;&#39; defined in RFC 4648.</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">// It is typically used in DNS.</span>
<a id="L49"></a><span class="ln">    49</span>	var HexEncoding = NewEncoding(encodeHex)
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">/*
</span><a id="L52"></a><span class="ln">    52</span>	<span class="comment"> * Encoder
</span><a id="L53"></a><span class="ln">    53</span>	<span class="comment"> */</span>
<a id="L54"></a><span class="ln">    54</span>	
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// Encode encodes src using the encoding enc, writing</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// EncodedLen(len(src)) bytes to dst.</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">//</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// The encoding pads the output to a multiple of 8 bytes,</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// so Encode is not appropriate for use on individual blocks</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// of a large data stream.  Use NewEncoder() instead.</span>
<a id="L61"></a><span class="ln">    61</span>	func (enc *Encoding) Encode(dst, src []byte) {
<a id="L62"></a><span class="ln">    62</span>		if len(src) == 0 {
<a id="L63"></a><span class="ln">    63</span>			return
<a id="L64"></a><span class="ln">    64</span>		}
<a id="L65"></a><span class="ln">    65</span>	
<a id="L66"></a><span class="ln">    66</span>		for len(src) &gt; 0 {
<a id="L67"></a><span class="ln">    67</span>			dst[0] = 0
<a id="L68"></a><span class="ln">    68</span>			dst[1] = 0
<a id="L69"></a><span class="ln">    69</span>			dst[2] = 0
<a id="L70"></a><span class="ln">    70</span>			dst[3] = 0
<a id="L71"></a><span class="ln">    71</span>			dst[4] = 0
<a id="L72"></a><span class="ln">    72</span>			dst[5] = 0
<a id="L73"></a><span class="ln">    73</span>			dst[6] = 0
<a id="L74"></a><span class="ln">    74</span>			dst[7] = 0
<a id="L75"></a><span class="ln">    75</span>	
<a id="L76"></a><span class="ln">    76</span>			<span class="comment">// Unpack 8x 5-bit source blocks into a 5 byte</span>
<a id="L77"></a><span class="ln">    77</span>			<span class="comment">// destination quantum</span>
<a id="L78"></a><span class="ln">    78</span>			switch len(src) {
<a id="L79"></a><span class="ln">    79</span>			default:
<a id="L80"></a><span class="ln">    80</span>				dst[7] |= src[4] &amp; 0x1F
<a id="L81"></a><span class="ln">    81</span>				dst[6] |= src[4] &gt;&gt; 5
<a id="L82"></a><span class="ln">    82</span>				fallthrough
<a id="L83"></a><span class="ln">    83</span>			case 4:
<a id="L84"></a><span class="ln">    84</span>				dst[6] |= (src[3] &lt;&lt; 3) &amp; 0x1F
<a id="L85"></a><span class="ln">    85</span>				dst[5] |= (src[3] &gt;&gt; 2) &amp; 0x1F
<a id="L86"></a><span class="ln">    86</span>				dst[4] |= src[3] &gt;&gt; 7
<a id="L87"></a><span class="ln">    87</span>				fallthrough
<a id="L88"></a><span class="ln">    88</span>			case 3:
<a id="L89"></a><span class="ln">    89</span>				dst[4] |= (src[2] &lt;&lt; 1) &amp; 0x1F
<a id="L90"></a><span class="ln">    90</span>				dst[3] |= (src[2] &gt;&gt; 4) &amp; 0x1F
<a id="L91"></a><span class="ln">    91</span>				fallthrough
<a id="L92"></a><span class="ln">    92</span>			case 2:
<a id="L93"></a><span class="ln">    93</span>				dst[3] |= (src[1] &lt;&lt; 4) &amp; 0x1F
<a id="L94"></a><span class="ln">    94</span>				dst[2] |= (src[1] &gt;&gt; 1) &amp; 0x1F
<a id="L95"></a><span class="ln">    95</span>				dst[1] |= (src[1] &gt;&gt; 6) &amp; 0x1F
<a id="L96"></a><span class="ln">    96</span>				fallthrough
<a id="L97"></a><span class="ln">    97</span>			case 1:
<a id="L98"></a><span class="ln">    98</span>				dst[1] |= (src[0] &lt;&lt; 2) &amp; 0x1F
<a id="L99"></a><span class="ln">    99</span>				dst[0] |= src[0] &gt;&gt; 3
<a id="L100"></a><span class="ln">   100</span>			}
<a id="L101"></a><span class="ln">   101</span>	
<a id="L102"></a><span class="ln">   102</span>			<span class="comment">// Encode 5-bit blocks using the base32 alphabet</span>
<a id="L103"></a><span class="ln">   103</span>			for j := 0; j &lt; 8; j++ {
<a id="L104"></a><span class="ln">   104</span>				dst[j] = enc.encode[dst[j]]
<a id="L105"></a><span class="ln">   105</span>			}
<a id="L106"></a><span class="ln">   106</span>	
<a id="L107"></a><span class="ln">   107</span>			<span class="comment">// Pad the final quantum</span>
<a id="L108"></a><span class="ln">   108</span>			if len(src) &lt; 5 {
<a id="L109"></a><span class="ln">   109</span>				dst[7] = &#39;=&#39;
<a id="L110"></a><span class="ln">   110</span>				if len(src) &lt; 4 {
<a id="L111"></a><span class="ln">   111</span>					dst[6] = &#39;=&#39;
<a id="L112"></a><span class="ln">   112</span>					dst[5] = &#39;=&#39;
<a id="L113"></a><span class="ln">   113</span>					if len(src) &lt; 3 {
<a id="L114"></a><span class="ln">   114</span>						dst[4] = &#39;=&#39;
<a id="L115"></a><span class="ln">   115</span>						if len(src) &lt; 2 {
<a id="L116"></a><span class="ln">   116</span>							dst[3] = &#39;=&#39;
<a id="L117"></a><span class="ln">   117</span>							dst[2] = &#39;=&#39;
<a id="L118"></a><span class="ln">   118</span>						}
<a id="L119"></a><span class="ln">   119</span>					}
<a id="L120"></a><span class="ln">   120</span>				}
<a id="L121"></a><span class="ln">   121</span>				break
<a id="L122"></a><span class="ln">   122</span>			}
<a id="L123"></a><span class="ln">   123</span>			src = src[5:]
<a id="L124"></a><span class="ln">   124</span>			dst = dst[8:]
<a id="L125"></a><span class="ln">   125</span>		}
<a id="L126"></a><span class="ln">   126</span>	}
<a id="L127"></a><span class="ln">   127</span>	
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// EncodeToString returns the base32 encoding of src.</span>
<a id="L129"></a><span class="ln">   129</span>	func (enc *Encoding) EncodeToString(src []byte) string {
<a id="L130"></a><span class="ln">   130</span>		buf := make([]byte, enc.EncodedLen(len(src)))
<a id="L131"></a><span class="ln">   131</span>		enc.Encode(buf, src)
<a id="L132"></a><span class="ln">   132</span>		return string(buf)
<a id="L133"></a><span class="ln">   133</span>	}
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>	type encoder struct {
<a id="L136"></a><span class="ln">   136</span>		err  error
<a id="L137"></a><span class="ln">   137</span>		enc  *Encoding
<a id="L138"></a><span class="ln">   138</span>		w    io.Writer
<a id="L139"></a><span class="ln">   139</span>		buf  [5]byte    <span class="comment">// buffered data waiting to be encoded</span>
<a id="L140"></a><span class="ln">   140</span>		nbuf int        <span class="comment">// number of bytes in buf</span>
<a id="L141"></a><span class="ln">   141</span>		out  [1024]byte <span class="comment">// output buffer</span>
<a id="L142"></a><span class="ln">   142</span>	}
<a id="L143"></a><span class="ln">   143</span>	
<a id="L144"></a><span class="ln">   144</span>	func (e *encoder) Write(p []byte) (n int, err error) {
<a id="L145"></a><span class="ln">   145</span>		if e.err != nil {
<a id="L146"></a><span class="ln">   146</span>			return 0, e.err
<a id="L147"></a><span class="ln">   147</span>		}
<a id="L148"></a><span class="ln">   148</span>	
<a id="L149"></a><span class="ln">   149</span>		<span class="comment">// Leading fringe.</span>
<a id="L150"></a><span class="ln">   150</span>		if e.nbuf &gt; 0 {
<a id="L151"></a><span class="ln">   151</span>			var i int
<a id="L152"></a><span class="ln">   152</span>			for i = 0; i &lt; len(p) &amp;&amp; e.nbuf &lt; 5; i++ {
<a id="L153"></a><span class="ln">   153</span>				e.buf[e.nbuf] = p[i]
<a id="L154"></a><span class="ln">   154</span>				e.nbuf++
<a id="L155"></a><span class="ln">   155</span>			}
<a id="L156"></a><span class="ln">   156</span>			n += i
<a id="L157"></a><span class="ln">   157</span>			p = p[i:]
<a id="L158"></a><span class="ln">   158</span>			if e.nbuf &lt; 5 {
<a id="L159"></a><span class="ln">   159</span>				return
<a id="L160"></a><span class="ln">   160</span>			}
<a id="L161"></a><span class="ln">   161</span>			e.enc.Encode(e.out[0:], e.buf[0:])
<a id="L162"></a><span class="ln">   162</span>			if _, e.err = e.w.Write(e.out[0:8]); e.err != nil {
<a id="L163"></a><span class="ln">   163</span>				return n, e.err
<a id="L164"></a><span class="ln">   164</span>			}
<a id="L165"></a><span class="ln">   165</span>			e.nbuf = 0
<a id="L166"></a><span class="ln">   166</span>		}
<a id="L167"></a><span class="ln">   167</span>	
<a id="L168"></a><span class="ln">   168</span>		<span class="comment">// Large interior chunks.</span>
<a id="L169"></a><span class="ln">   169</span>		for len(p) &gt;= 5 {
<a id="L170"></a><span class="ln">   170</span>			nn := len(e.out) / 8 * 5
<a id="L171"></a><span class="ln">   171</span>			if nn &gt; len(p) {
<a id="L172"></a><span class="ln">   172</span>				nn = len(p)
<a id="L173"></a><span class="ln">   173</span>			}
<a id="L174"></a><span class="ln">   174</span>			nn -= nn % 5
<a id="L175"></a><span class="ln">   175</span>			if nn &gt; 0 {
<a id="L176"></a><span class="ln">   176</span>				e.enc.Encode(e.out[0:], p[0:nn])
<a id="L177"></a><span class="ln">   177</span>				if _, e.err = e.w.Write(e.out[0 : nn/5*8]); e.err != nil {
<a id="L178"></a><span class="ln">   178</span>					return n, e.err
<a id="L179"></a><span class="ln">   179</span>				}
<a id="L180"></a><span class="ln">   180</span>			}
<a id="L181"></a><span class="ln">   181</span>			n += nn
<a id="L182"></a><span class="ln">   182</span>			p = p[nn:]
<a id="L183"></a><span class="ln">   183</span>		}
<a id="L184"></a><span class="ln">   184</span>	
<a id="L185"></a><span class="ln">   185</span>		<span class="comment">// Trailing fringe.</span>
<a id="L186"></a><span class="ln">   186</span>		for i := 0; i &lt; len(p); i++ {
<a id="L187"></a><span class="ln">   187</span>			e.buf[i] = p[i]
<a id="L188"></a><span class="ln">   188</span>		}
<a id="L189"></a><span class="ln">   189</span>		e.nbuf = len(p)
<a id="L190"></a><span class="ln">   190</span>		n += len(p)
<a id="L191"></a><span class="ln">   191</span>		return
<a id="L192"></a><span class="ln">   192</span>	}
<a id="L193"></a><span class="ln">   193</span>	
<a id="L194"></a><span class="ln">   194</span>	<span class="comment">// Close flushes any pending output from the encoder.</span>
<a id="L195"></a><span class="ln">   195</span>	<span class="comment">// It is an error to call Write after calling Close.</span>
<a id="L196"></a><span class="ln">   196</span>	func (e *encoder) Close() error {
<a id="L197"></a><span class="ln">   197</span>		<span class="comment">// If there&#39;s anything left in the buffer, flush it out</span>
<a id="L198"></a><span class="ln">   198</span>		if e.err == nil &amp;&amp; e.nbuf &gt; 0 {
<a id="L199"></a><span class="ln">   199</span>			e.enc.Encode(e.out[0:], e.buf[0:e.nbuf])
<a id="L200"></a><span class="ln">   200</span>			e.nbuf = 0
<a id="L201"></a><span class="ln">   201</span>			_, e.err = e.w.Write(e.out[0:8])
<a id="L202"></a><span class="ln">   202</span>		}
<a id="L203"></a><span class="ln">   203</span>		return e.err
<a id="L204"></a><span class="ln">   204</span>	}
<a id="L205"></a><span class="ln">   205</span>	
<a id="L206"></a><span class="ln">   206</span>	<span class="comment">// NewEncoder returns a new base32 stream encoder.  Data written to</span>
<a id="L207"></a><span class="ln">   207</span>	<span class="comment">// the returned writer will be encoded using enc and then written to w.</span>
<a id="L208"></a><span class="ln">   208</span>	<span class="comment">// Base32 encodings operate in 5-byte blocks; when finished</span>
<a id="L209"></a><span class="ln">   209</span>	<span class="comment">// writing, the caller must Close the returned encoder to flush any</span>
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// partially written blocks.</span>
<a id="L211"></a><span class="ln">   211</span>	func NewEncoder(enc *Encoding, w io.Writer) io.WriteCloser {
<a id="L212"></a><span class="ln">   212</span>		return &amp;encoder{enc: enc, w: w}
<a id="L213"></a><span class="ln">   213</span>	}
<a id="L214"></a><span class="ln">   214</span>	
<a id="L215"></a><span class="ln">   215</span>	<span class="comment">// EncodedLen returns the length in bytes of the base32 encoding</span>
<a id="L216"></a><span class="ln">   216</span>	<span class="comment">// of an input buffer of length n.</span>
<a id="L217"></a><span class="ln">   217</span>	func (enc *Encoding) EncodedLen(n int) int { return (n + 4) / 5 * 8 }
<a id="L218"></a><span class="ln">   218</span>	
<a id="L219"></a><span class="ln">   219</span>	<span class="comment">/*
</span><a id="L220"></a><span class="ln">   220</span>	<span class="comment"> * Decoder
</span><a id="L221"></a><span class="ln">   221</span>	<span class="comment"> */</span>
<a id="L222"></a><span class="ln">   222</span>	
<a id="L223"></a><span class="ln">   223</span>	type CorruptInputError int64
<a id="L224"></a><span class="ln">   224</span>	
<a id="L225"></a><span class="ln">   225</span>	func (e CorruptInputError) Error() string {
<a id="L226"></a><span class="ln">   226</span>		return &#34;illegal base32 data at input byte &#34; + strconv.FormatInt(int64(e), 10)
<a id="L227"></a><span class="ln">   227</span>	}
<a id="L228"></a><span class="ln">   228</span>	
<a id="L229"></a><span class="ln">   229</span>	<span class="comment">// decode is like Decode but returns an additional &#39;end&#39; value, which</span>
<a id="L230"></a><span class="ln">   230</span>	<span class="comment">// indicates if end-of-message padding was encountered and thus any</span>
<a id="L231"></a><span class="ln">   231</span>	<span class="comment">// additional data is an error.</span>
<a id="L232"></a><span class="ln">   232</span>	func (enc *Encoding) decode(dst, src []byte) (n int, end bool, err error) {
<a id="L233"></a><span class="ln">   233</span>		osrc := src
<a id="L234"></a><span class="ln">   234</span>		for len(src) &gt; 0 &amp;&amp; !end {
<a id="L235"></a><span class="ln">   235</span>			<span class="comment">// Decode quantum using the base32 alphabet</span>
<a id="L236"></a><span class="ln">   236</span>			var dbuf [8]byte
<a id="L237"></a><span class="ln">   237</span>			dlen := 8
<a id="L238"></a><span class="ln">   238</span>	
<a id="L239"></a><span class="ln">   239</span>			<span class="comment">// do the top bytes contain any data?</span>
<a id="L240"></a><span class="ln">   240</span>		dbufloop:
<a id="L241"></a><span class="ln">   241</span>			for j := 0; j &lt; 8; {
<a id="L242"></a><span class="ln">   242</span>				if len(src) == 0 {
<a id="L243"></a><span class="ln">   243</span>					return n, false, CorruptInputError(len(osrc) - len(src) - j)
<a id="L244"></a><span class="ln">   244</span>				}
<a id="L245"></a><span class="ln">   245</span>				in := src[0]
<a id="L246"></a><span class="ln">   246</span>				src = src[1:]
<a id="L247"></a><span class="ln">   247</span>				if in == &#39;\r&#39; || in == &#39;\n&#39; {
<a id="L248"></a><span class="ln">   248</span>					<span class="comment">// Ignore this character.</span>
<a id="L249"></a><span class="ln">   249</span>					continue
<a id="L250"></a><span class="ln">   250</span>				}
<a id="L251"></a><span class="ln">   251</span>				if in == &#39;=&#39; &amp;&amp; j &gt;= 2 &amp;&amp; len(src) &lt; 8 {
<a id="L252"></a><span class="ln">   252</span>					<span class="comment">// We&#39;ve reached the end and there&#39;s</span>
<a id="L253"></a><span class="ln">   253</span>					<span class="comment">// padding, the rest should be padded</span>
<a id="L254"></a><span class="ln">   254</span>					for k := 0; k &lt; 8-j-1; k++ {
<a id="L255"></a><span class="ln">   255</span>						if len(src) &gt; k &amp;&amp; src[k] != &#39;=&#39; {
<a id="L256"></a><span class="ln">   256</span>							return n, false, CorruptInputError(len(osrc) - len(src) + k - 1)
<a id="L257"></a><span class="ln">   257</span>						}
<a id="L258"></a><span class="ln">   258</span>					}
<a id="L259"></a><span class="ln">   259</span>					dlen = j
<a id="L260"></a><span class="ln">   260</span>					end = true
<a id="L261"></a><span class="ln">   261</span>					break dbufloop
<a id="L262"></a><span class="ln">   262</span>				}
<a id="L263"></a><span class="ln">   263</span>				dbuf[j] = enc.decodeMap[in]
<a id="L264"></a><span class="ln">   264</span>				if dbuf[j] == 0xFF {
<a id="L265"></a><span class="ln">   265</span>					return n, false, CorruptInputError(len(osrc) - len(src) - 1)
<a id="L266"></a><span class="ln">   266</span>				}
<a id="L267"></a><span class="ln">   267</span>				j++
<a id="L268"></a><span class="ln">   268</span>			}
<a id="L269"></a><span class="ln">   269</span>	
<a id="L270"></a><span class="ln">   270</span>			<span class="comment">// Pack 8x 5-bit source blocks into 5 byte destination</span>
<a id="L271"></a><span class="ln">   271</span>			<span class="comment">// quantum</span>
<a id="L272"></a><span class="ln">   272</span>			switch dlen {
<a id="L273"></a><span class="ln">   273</span>			case 7, 8:
<a id="L274"></a><span class="ln">   274</span>				dst[4] = dbuf[6]&lt;&lt;5 | dbuf[7]
<a id="L275"></a><span class="ln">   275</span>				fallthrough
<a id="L276"></a><span class="ln">   276</span>			case 6, 5:
<a id="L277"></a><span class="ln">   277</span>				dst[3] = dbuf[4]&lt;&lt;7 | dbuf[5]&lt;&lt;2 | dbuf[6]&gt;&gt;3
<a id="L278"></a><span class="ln">   278</span>				fallthrough
<a id="L279"></a><span class="ln">   279</span>			case 4:
<a id="L280"></a><span class="ln">   280</span>				dst[2] = dbuf[3]&lt;&lt;4 | dbuf[4]&gt;&gt;1
<a id="L281"></a><span class="ln">   281</span>				fallthrough
<a id="L282"></a><span class="ln">   282</span>			case 3:
<a id="L283"></a><span class="ln">   283</span>				dst[1] = dbuf[1]&lt;&lt;6 | dbuf[2]&lt;&lt;1 | dbuf[3]&gt;&gt;4
<a id="L284"></a><span class="ln">   284</span>				fallthrough
<a id="L285"></a><span class="ln">   285</span>			case 2:
<a id="L286"></a><span class="ln">   286</span>				dst[0] = dbuf[0]&lt;&lt;3 | dbuf[1]&gt;&gt;2
<a id="L287"></a><span class="ln">   287</span>			}
<a id="L288"></a><span class="ln">   288</span>			dst = dst[5:]
<a id="L289"></a><span class="ln">   289</span>			switch dlen {
<a id="L290"></a><span class="ln">   290</span>			case 2:
<a id="L291"></a><span class="ln">   291</span>				n += 1
<a id="L292"></a><span class="ln">   292</span>			case 3, 4:
<a id="L293"></a><span class="ln">   293</span>				n += 2
<a id="L294"></a><span class="ln">   294</span>			case 5:
<a id="L295"></a><span class="ln">   295</span>				n += 3
<a id="L296"></a><span class="ln">   296</span>			case 6, 7:
<a id="L297"></a><span class="ln">   297</span>				n += 4
<a id="L298"></a><span class="ln">   298</span>			case 8:
<a id="L299"></a><span class="ln">   299</span>				n += 5
<a id="L300"></a><span class="ln">   300</span>			}
<a id="L301"></a><span class="ln">   301</span>		}
<a id="L302"></a><span class="ln">   302</span>		return n, end, nil
<a id="L303"></a><span class="ln">   303</span>	}
<a id="L304"></a><span class="ln">   304</span>	
<a id="L305"></a><span class="ln">   305</span>	<span class="comment">// Decode decodes src using the encoding enc.  It writes at most</span>
<a id="L306"></a><span class="ln">   306</span>	<span class="comment">// DecodedLen(len(src)) bytes to dst and returns the number of bytes</span>
<a id="L307"></a><span class="ln">   307</span>	<span class="comment">// written.  If src contains invalid base32 data, it will return the</span>
<a id="L308"></a><span class="ln">   308</span>	<span class="comment">// number of bytes successfully written and CorruptInputError.</span>
<a id="L309"></a><span class="ln">   309</span>	<span class="comment">// New line characters (\r and \n) are ignored.</span>
<a id="L310"></a><span class="ln">   310</span>	func (enc *Encoding) Decode(dst, src []byte) (n int, err error) {
<a id="L311"></a><span class="ln">   311</span>		n, _, err = enc.decode(dst, src)
<a id="L312"></a><span class="ln">   312</span>		return
<a id="L313"></a><span class="ln">   313</span>	}
<a id="L314"></a><span class="ln">   314</span>	
<a id="L315"></a><span class="ln">   315</span>	<span class="comment">// DecodeString returns the bytes represented by the base32 string s.</span>
<a id="L316"></a><span class="ln">   316</span>	func (enc *Encoding) DecodeString(s string) ([]byte, error) {
<a id="L317"></a><span class="ln">   317</span>		dbuf := make([]byte, enc.DecodedLen(len(s)))
<a id="L318"></a><span class="ln">   318</span>		n, err := enc.Decode(dbuf, []byte(s))
<a id="L319"></a><span class="ln">   319</span>		return dbuf[:n], err
<a id="L320"></a><span class="ln">   320</span>	}
<a id="L321"></a><span class="ln">   321</span>	
<a id="L322"></a><span class="ln">   322</span>	type decoder struct {
<a id="L323"></a><span class="ln">   323</span>		err    error
<a id="L324"></a><span class="ln">   324</span>		enc    *Encoding
<a id="L325"></a><span class="ln">   325</span>		r      io.Reader
<a id="L326"></a><span class="ln">   326</span>		end    bool       <span class="comment">// saw end of message</span>
<a id="L327"></a><span class="ln">   327</span>		buf    [1024]byte <span class="comment">// leftover input</span>
<a id="L328"></a><span class="ln">   328</span>		nbuf   int
<a id="L329"></a><span class="ln">   329</span>		out    []byte <span class="comment">// leftover decoded output</span>
<a id="L330"></a><span class="ln">   330</span>		outbuf [1024 / 8 * 5]byte
<a id="L331"></a><span class="ln">   331</span>	}
<a id="L332"></a><span class="ln">   332</span>	
<a id="L333"></a><span class="ln">   333</span>	func (d *decoder) Read(p []byte) (n int, err error) {
<a id="L334"></a><span class="ln">   334</span>		if d.err != nil {
<a id="L335"></a><span class="ln">   335</span>			return 0, d.err
<a id="L336"></a><span class="ln">   336</span>		}
<a id="L337"></a><span class="ln">   337</span>	
<a id="L338"></a><span class="ln">   338</span>		<span class="comment">// Use leftover decoded output from last read.</span>
<a id="L339"></a><span class="ln">   339</span>		if len(d.out) &gt; 0 {
<a id="L340"></a><span class="ln">   340</span>			n = copy(p, d.out)
<a id="L341"></a><span class="ln">   341</span>			d.out = d.out[n:]
<a id="L342"></a><span class="ln">   342</span>			return n, nil
<a id="L343"></a><span class="ln">   343</span>		}
<a id="L344"></a><span class="ln">   344</span>	
<a id="L345"></a><span class="ln">   345</span>		<span class="comment">// Read a chunk.</span>
<a id="L346"></a><span class="ln">   346</span>		nn := len(p) / 5 * 8
<a id="L347"></a><span class="ln">   347</span>		if nn &lt; 8 {
<a id="L348"></a><span class="ln">   348</span>			nn = 8
<a id="L349"></a><span class="ln">   349</span>		}
<a id="L350"></a><span class="ln">   350</span>		if nn &gt; len(d.buf) {
<a id="L351"></a><span class="ln">   351</span>			nn = len(d.buf)
<a id="L352"></a><span class="ln">   352</span>		}
<a id="L353"></a><span class="ln">   353</span>		nn, d.err = io.ReadAtLeast(d.r, d.buf[d.nbuf:nn], 8-d.nbuf)
<a id="L354"></a><span class="ln">   354</span>		d.nbuf += nn
<a id="L355"></a><span class="ln">   355</span>		if d.nbuf &lt; 8 {
<a id="L356"></a><span class="ln">   356</span>			return 0, d.err
<a id="L357"></a><span class="ln">   357</span>		}
<a id="L358"></a><span class="ln">   358</span>	
<a id="L359"></a><span class="ln">   359</span>		<span class="comment">// Decode chunk into p, or d.out and then p if p is too small.</span>
<a id="L360"></a><span class="ln">   360</span>		nr := d.nbuf / 8 * 8
<a id="L361"></a><span class="ln">   361</span>		nw := d.nbuf / 8 * 5
<a id="L362"></a><span class="ln">   362</span>		if nw &gt; len(p) {
<a id="L363"></a><span class="ln">   363</span>			nw, d.end, d.err = d.enc.decode(d.outbuf[0:], d.buf[0:nr])
<a id="L364"></a><span class="ln">   364</span>			d.out = d.outbuf[0:nw]
<a id="L365"></a><span class="ln">   365</span>			n = copy(p, d.out)
<a id="L366"></a><span class="ln">   366</span>			d.out = d.out[n:]
<a id="L367"></a><span class="ln">   367</span>		} else {
<a id="L368"></a><span class="ln">   368</span>			n, d.end, d.err = d.enc.decode(p, d.buf[0:nr])
<a id="L369"></a><span class="ln">   369</span>		}
<a id="L370"></a><span class="ln">   370</span>		d.nbuf -= nr
<a id="L371"></a><span class="ln">   371</span>		for i := 0; i &lt; d.nbuf; i++ {
<a id="L372"></a><span class="ln">   372</span>			d.buf[i] = d.buf[i+nr]
<a id="L373"></a><span class="ln">   373</span>		}
<a id="L374"></a><span class="ln">   374</span>	
<a id="L375"></a><span class="ln">   375</span>		if d.err == nil {
<a id="L376"></a><span class="ln">   376</span>			d.err = err
<a id="L377"></a><span class="ln">   377</span>		}
<a id="L378"></a><span class="ln">   378</span>		return n, d.err
<a id="L379"></a><span class="ln">   379</span>	}
<a id="L380"></a><span class="ln">   380</span>	
<a id="L381"></a><span class="ln">   381</span>	<span class="comment">// NewDecoder constructs a new base32 stream decoder.</span>
<a id="L382"></a><span class="ln">   382</span>	func NewDecoder(enc *Encoding, r io.Reader) io.Reader {
<a id="L383"></a><span class="ln">   383</span>		return &amp;decoder{enc: enc, r: r}
<a id="L384"></a><span class="ln">   384</span>	}
<a id="L385"></a><span class="ln">   385</span>	
<a id="L386"></a><span class="ln">   386</span>	<span class="comment">// DecodedLen returns the maximum length in bytes of the decoded data</span>
<a id="L387"></a><span class="ln">   387</span>	<span class="comment">// corresponding to n bytes of base32-encoded data.</span>
<a id="L388"></a><span class="ln">   388</span>	func (enc *Encoding) DecodedLen(n int) int { return n / 8 * 5 }
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

