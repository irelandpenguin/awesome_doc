<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/encoding/xml/marshal.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/encoding/xml/marshal.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package xml
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bufio&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;bytes&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;fmt&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;io&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;reflect&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;strconv&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;strings&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;time&#34;
<a id="L16"></a><span class="ln">    16</span>	)
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	const (
<a id="L19"></a><span class="ln">    19</span>		<span class="comment">// A generic XML header suitable for use with the output of Marshal.</span>
<a id="L20"></a><span class="ln">    20</span>		<span class="comment">// This is not automatically added to any output of this package,</span>
<a id="L21"></a><span class="ln">    21</span>		<span class="comment">// it is provided as a convenience.</span>
<a id="L22"></a><span class="ln">    22</span>		Header = `&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;` + &#34;\n&#34;
<a id="L23"></a><span class="ln">    23</span>	)
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// Marshal returns the XML encoding of v.</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">//</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// Marshal handles an array or slice by marshalling each of the elements.</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// Marshal handles a pointer by marshalling the value it points at or, if the</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// pointer is nil, by writing nothing.  Marshal handles an interface value by</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// marshalling the value it contains or, if the interface value is nil, by</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// writing nothing.  Marshal handles all other data by writing one or more XML</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// elements containing the data.</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">//</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// The name for the XML elements is taken from, in order of preference:</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//     - the tag on the XMLName field, if the data is a struct</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//     - the value of the XMLName field of type xml.Name</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">//     - the tag of the struct field used to obtain the data</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//     - the name of the struct field used to obtain the data</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">//     - the name of the marshalled type</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">//</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// The XML element for a struct contains marshalled elements for each of the</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">// exported fields of the struct, with these exceptions:</span>
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">//     - the XMLName field, described above, is omitted.</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">//     - a field with tag &#34;-&#34; is omitted.</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">//     - a field with tag &#34;name,attr&#34; becomes an attribute with</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">//       the given name in the XML element.</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">//     - a field with tag &#34;,attr&#34; becomes an attribute with the</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">//       field name in the in the XML element.</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">//     - a field with tag &#34;,chardata&#34; is written as character data,</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">//       not as an XML element.</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">//     - a field with tag &#34;,innerxml&#34; is written verbatim, not subject</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">//       to the usual marshalling procedure.</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">//     - a field with tag &#34;,comment&#34; is written as an XML comment, not</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">//       subject to the usual marshalling procedure. It must not contain</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">//       the &#34;--&#34; string within it.</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">//     - a field with a tag including the &#34;omitempty&#34; option is omitted</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">//       if the field value is empty. The empty values are false, 0, any</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">//       nil pointer or interface value, and any array, slice, map, or</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">//       string of length zero.</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">//     - a non-pointer anonymous struct field is handled as if the</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">//       fields of its value were part of the outer struct.</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">//</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">// If a field uses a tag &#34;a&gt;b&gt;c&#34;, then the element c will be nested inside</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// parent elements a and b.  Fields that appear next to each other that name</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// the same parent will be enclosed in one XML element.</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">//</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// See MarshalIndent for an example.</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">//</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// Marshal will return an error if asked to marshal a channel, function, or map.</span>
<a id="L70"></a><span class="ln">    70</span>	func Marshal(v interface{}) ([]byte, error) {
<a id="L71"></a><span class="ln">    71</span>		var b bytes.Buffer
<a id="L72"></a><span class="ln">    72</span>		if err := NewEncoder(&amp;b).Encode(v); err != nil {
<a id="L73"></a><span class="ln">    73</span>			return nil, err
<a id="L74"></a><span class="ln">    74</span>		}
<a id="L75"></a><span class="ln">    75</span>		return b.Bytes(), nil
<a id="L76"></a><span class="ln">    76</span>	}
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// MarshalIndent works like Marshal, but each XML element begins on a new</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// indented line that starts with prefix and is followed by one or more</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// copies of indent according to the nesting depth.</span>
<a id="L81"></a><span class="ln">    81</span>	func MarshalIndent(v interface{}, prefix, indent string) ([]byte, error) {
<a id="L82"></a><span class="ln">    82</span>		var b bytes.Buffer
<a id="L83"></a><span class="ln">    83</span>		enc := NewEncoder(&amp;b)
<a id="L84"></a><span class="ln">    84</span>		enc.prefix = prefix
<a id="L85"></a><span class="ln">    85</span>		enc.indent = indent
<a id="L86"></a><span class="ln">    86</span>		err := enc.marshalValue(reflect.ValueOf(v), nil)
<a id="L87"></a><span class="ln">    87</span>		enc.Flush()
<a id="L88"></a><span class="ln">    88</span>		if err != nil {
<a id="L89"></a><span class="ln">    89</span>			return nil, err
<a id="L90"></a><span class="ln">    90</span>		}
<a id="L91"></a><span class="ln">    91</span>		return b.Bytes(), nil
<a id="L92"></a><span class="ln">    92</span>	}
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// An Encoder writes XML data to an output stream.</span>
<a id="L95"></a><span class="ln">    95</span>	type Encoder struct {
<a id="L96"></a><span class="ln">    96</span>		printer
<a id="L97"></a><span class="ln">    97</span>	}
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">// NewEncoder returns a new encoder that writes to w.</span>
<a id="L100"></a><span class="ln">   100</span>	func NewEncoder(w io.Writer) *Encoder {
<a id="L101"></a><span class="ln">   101</span>		return &amp;Encoder{printer{Writer: bufio.NewWriter(w)}}
<a id="L102"></a><span class="ln">   102</span>	}
<a id="L103"></a><span class="ln">   103</span>	
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">// Encode writes the XML encoding of v to the stream.</span>
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">//</span>
<a id="L106"></a><span class="ln">   106</span>	<span class="comment">// See the documentation for Marshal for details about the conversion</span>
<a id="L107"></a><span class="ln">   107</span>	<span class="comment">// of Go values to XML.</span>
<a id="L108"></a><span class="ln">   108</span>	func (enc *Encoder) Encode(v interface{}) error {
<a id="L109"></a><span class="ln">   109</span>		err := enc.marshalValue(reflect.ValueOf(v), nil)
<a id="L110"></a><span class="ln">   110</span>		enc.Flush()
<a id="L111"></a><span class="ln">   111</span>		return err
<a id="L112"></a><span class="ln">   112</span>	}
<a id="L113"></a><span class="ln">   113</span>	
<a id="L114"></a><span class="ln">   114</span>	type printer struct {
<a id="L115"></a><span class="ln">   115</span>		*bufio.Writer
<a id="L116"></a><span class="ln">   116</span>		indent     string
<a id="L117"></a><span class="ln">   117</span>		prefix     string
<a id="L118"></a><span class="ln">   118</span>		depth      int
<a id="L119"></a><span class="ln">   119</span>		indentedIn bool
<a id="L120"></a><span class="ln">   120</span>	}
<a id="L121"></a><span class="ln">   121</span>	
<a id="L122"></a><span class="ln">   122</span>	<span class="comment">// marshalValue writes one or more XML elements representing val.</span>
<a id="L123"></a><span class="ln">   123</span>	<span class="comment">// If val was obtained from a struct field, finfo must have its details.</span>
<a id="L124"></a><span class="ln">   124</span>	func (p *printer) marshalValue(val reflect.Value, finfo *fieldInfo) error {
<a id="L125"></a><span class="ln">   125</span>		if !val.IsValid() {
<a id="L126"></a><span class="ln">   126</span>			return nil
<a id="L127"></a><span class="ln">   127</span>		}
<a id="L128"></a><span class="ln">   128</span>		if finfo != nil &amp;&amp; finfo.flags&amp;fOmitEmpty != 0 &amp;&amp; isEmptyValue(val) {
<a id="L129"></a><span class="ln">   129</span>			return nil
<a id="L130"></a><span class="ln">   130</span>		}
<a id="L131"></a><span class="ln">   131</span>	
<a id="L132"></a><span class="ln">   132</span>		kind := val.Kind()
<a id="L133"></a><span class="ln">   133</span>		typ := val.Type()
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>		<span class="comment">// Drill into pointers/interfaces</span>
<a id="L136"></a><span class="ln">   136</span>		if kind == reflect.Ptr || kind == reflect.Interface {
<a id="L137"></a><span class="ln">   137</span>			if val.IsNil() {
<a id="L138"></a><span class="ln">   138</span>				return nil
<a id="L139"></a><span class="ln">   139</span>			}
<a id="L140"></a><span class="ln">   140</span>			return p.marshalValue(val.Elem(), finfo)
<a id="L141"></a><span class="ln">   141</span>		}
<a id="L142"></a><span class="ln">   142</span>	
<a id="L143"></a><span class="ln">   143</span>		<span class="comment">// Slices and arrays iterate over the elements. They do not have an enclosing tag.</span>
<a id="L144"></a><span class="ln">   144</span>		if (kind == reflect.Slice || kind == reflect.Array) &amp;&amp; typ.Elem().Kind() != reflect.Uint8 {
<a id="L145"></a><span class="ln">   145</span>			for i, n := 0, val.Len(); i &lt; n; i++ {
<a id="L146"></a><span class="ln">   146</span>				if err := p.marshalValue(val.Index(i), finfo); err != nil {
<a id="L147"></a><span class="ln">   147</span>					return err
<a id="L148"></a><span class="ln">   148</span>				}
<a id="L149"></a><span class="ln">   149</span>			}
<a id="L150"></a><span class="ln">   150</span>			return nil
<a id="L151"></a><span class="ln">   151</span>		}
<a id="L152"></a><span class="ln">   152</span>	
<a id="L153"></a><span class="ln">   153</span>		tinfo, err := getTypeInfo(typ)
<a id="L154"></a><span class="ln">   154</span>		if err != nil {
<a id="L155"></a><span class="ln">   155</span>			return err
<a id="L156"></a><span class="ln">   156</span>		}
<a id="L157"></a><span class="ln">   157</span>	
<a id="L158"></a><span class="ln">   158</span>		<span class="comment">// Precedence for the XML element name is:</span>
<a id="L159"></a><span class="ln">   159</span>		<span class="comment">// 1. XMLName field in underlying struct;</span>
<a id="L160"></a><span class="ln">   160</span>		<span class="comment">// 2. field name/tag in the struct field; and</span>
<a id="L161"></a><span class="ln">   161</span>		<span class="comment">// 3. type name</span>
<a id="L162"></a><span class="ln">   162</span>		var xmlns, name string
<a id="L163"></a><span class="ln">   163</span>		if tinfo.xmlname != nil {
<a id="L164"></a><span class="ln">   164</span>			xmlname := tinfo.xmlname
<a id="L165"></a><span class="ln">   165</span>			if xmlname.name != &#34;&#34; {
<a id="L166"></a><span class="ln">   166</span>				xmlns, name = xmlname.xmlns, xmlname.name
<a id="L167"></a><span class="ln">   167</span>			} else if v, ok := val.FieldByIndex(xmlname.idx).Interface().(Name); ok &amp;&amp; v.Local != &#34;&#34; {
<a id="L168"></a><span class="ln">   168</span>				xmlns, name = v.Space, v.Local
<a id="L169"></a><span class="ln">   169</span>			}
<a id="L170"></a><span class="ln">   170</span>		}
<a id="L171"></a><span class="ln">   171</span>		if name == &#34;&#34; &amp;&amp; finfo != nil {
<a id="L172"></a><span class="ln">   172</span>			xmlns, name = finfo.xmlns, finfo.name
<a id="L173"></a><span class="ln">   173</span>		}
<a id="L174"></a><span class="ln">   174</span>		if name == &#34;&#34; {
<a id="L175"></a><span class="ln">   175</span>			name = typ.Name()
<a id="L176"></a><span class="ln">   176</span>			if name == &#34;&#34; {
<a id="L177"></a><span class="ln">   177</span>				return &amp;UnsupportedTypeError{typ}
<a id="L178"></a><span class="ln">   178</span>			}
<a id="L179"></a><span class="ln">   179</span>		}
<a id="L180"></a><span class="ln">   180</span>	
<a id="L181"></a><span class="ln">   181</span>		p.writeIndent(1)
<a id="L182"></a><span class="ln">   182</span>		p.WriteByte(&#39;&lt;&#39;)
<a id="L183"></a><span class="ln">   183</span>		p.WriteString(name)
<a id="L184"></a><span class="ln">   184</span>	
<a id="L185"></a><span class="ln">   185</span>		if xmlns != &#34;&#34; {
<a id="L186"></a><span class="ln">   186</span>			p.WriteString(` xmlns=&#34;`)
<a id="L187"></a><span class="ln">   187</span>			<span class="comment">// TODO: EscapeString, to avoid the allocation.</span>
<a id="L188"></a><span class="ln">   188</span>			Escape(p, []byte(xmlns))
<a id="L189"></a><span class="ln">   189</span>			p.WriteByte(&#39;&#34;&#39;)
<a id="L190"></a><span class="ln">   190</span>		}
<a id="L191"></a><span class="ln">   191</span>	
<a id="L192"></a><span class="ln">   192</span>		<span class="comment">// Attributes</span>
<a id="L193"></a><span class="ln">   193</span>		for i := range tinfo.fields {
<a id="L194"></a><span class="ln">   194</span>			finfo := &amp;tinfo.fields[i]
<a id="L195"></a><span class="ln">   195</span>			if finfo.flags&amp;fAttr == 0 {
<a id="L196"></a><span class="ln">   196</span>				continue
<a id="L197"></a><span class="ln">   197</span>			}
<a id="L198"></a><span class="ln">   198</span>			fv := val.FieldByIndex(finfo.idx)
<a id="L199"></a><span class="ln">   199</span>			if finfo.flags&amp;fOmitEmpty != 0 &amp;&amp; isEmptyValue(fv) {
<a id="L200"></a><span class="ln">   200</span>				continue
<a id="L201"></a><span class="ln">   201</span>			}
<a id="L202"></a><span class="ln">   202</span>			p.WriteByte(&#39; &#39;)
<a id="L203"></a><span class="ln">   203</span>			p.WriteString(finfo.name)
<a id="L204"></a><span class="ln">   204</span>			p.WriteString(`=&#34;`)
<a id="L205"></a><span class="ln">   205</span>			if err := p.marshalSimple(fv.Type(), fv); err != nil {
<a id="L206"></a><span class="ln">   206</span>				return err
<a id="L207"></a><span class="ln">   207</span>			}
<a id="L208"></a><span class="ln">   208</span>			p.WriteByte(&#39;&#34;&#39;)
<a id="L209"></a><span class="ln">   209</span>		}
<a id="L210"></a><span class="ln">   210</span>		p.WriteByte(&#39;&gt;&#39;)
<a id="L211"></a><span class="ln">   211</span>	
<a id="L212"></a><span class="ln">   212</span>		if val.Kind() == reflect.Struct {
<a id="L213"></a><span class="ln">   213</span>			err = p.marshalStruct(tinfo, val)
<a id="L214"></a><span class="ln">   214</span>		} else {
<a id="L215"></a><span class="ln">   215</span>			err = p.marshalSimple(typ, val)
<a id="L216"></a><span class="ln">   216</span>		}
<a id="L217"></a><span class="ln">   217</span>		if err != nil {
<a id="L218"></a><span class="ln">   218</span>			return err
<a id="L219"></a><span class="ln">   219</span>		}
<a id="L220"></a><span class="ln">   220</span>	
<a id="L221"></a><span class="ln">   221</span>		p.writeIndent(-1)
<a id="L222"></a><span class="ln">   222</span>		p.WriteByte(&#39;&lt;&#39;)
<a id="L223"></a><span class="ln">   223</span>		p.WriteByte(&#39;/&#39;)
<a id="L224"></a><span class="ln">   224</span>		p.WriteString(name)
<a id="L225"></a><span class="ln">   225</span>		p.WriteByte(&#39;&gt;&#39;)
<a id="L226"></a><span class="ln">   226</span>	
<a id="L227"></a><span class="ln">   227</span>		return nil
<a id="L228"></a><span class="ln">   228</span>	}
<a id="L229"></a><span class="ln">   229</span>	
<a id="L230"></a><span class="ln">   230</span>	var timeType = reflect.TypeOf(time.Time{})
<a id="L231"></a><span class="ln">   231</span>	
<a id="L232"></a><span class="ln">   232</span>	func (p *printer) marshalSimple(typ reflect.Type, val reflect.Value) error {
<a id="L233"></a><span class="ln">   233</span>		<span class="comment">// Normally we don&#39;t see structs, but this can happen for an attribute.</span>
<a id="L234"></a><span class="ln">   234</span>		if val.Type() == timeType {
<a id="L235"></a><span class="ln">   235</span>			p.WriteString(val.Interface().(time.Time).Format(time.RFC3339Nano))
<a id="L236"></a><span class="ln">   236</span>			return nil
<a id="L237"></a><span class="ln">   237</span>		}
<a id="L238"></a><span class="ln">   238</span>		switch val.Kind() {
<a id="L239"></a><span class="ln">   239</span>		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<a id="L240"></a><span class="ln">   240</span>			p.WriteString(strconv.FormatInt(val.Int(), 10))
<a id="L241"></a><span class="ln">   241</span>		case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<a id="L242"></a><span class="ln">   242</span>			p.WriteString(strconv.FormatUint(val.Uint(), 10))
<a id="L243"></a><span class="ln">   243</span>		case reflect.Float32, reflect.Float64:
<a id="L244"></a><span class="ln">   244</span>			p.WriteString(strconv.FormatFloat(val.Float(), &#39;g&#39;, -1, 64))
<a id="L245"></a><span class="ln">   245</span>		case reflect.String:
<a id="L246"></a><span class="ln">   246</span>			<span class="comment">// TODO: Add EscapeString.</span>
<a id="L247"></a><span class="ln">   247</span>			Escape(p, []byte(val.String()))
<a id="L248"></a><span class="ln">   248</span>		case reflect.Bool:
<a id="L249"></a><span class="ln">   249</span>			p.WriteString(strconv.FormatBool(val.Bool()))
<a id="L250"></a><span class="ln">   250</span>		case reflect.Array:
<a id="L251"></a><span class="ln">   251</span>			<span class="comment">// will be [...]byte</span>
<a id="L252"></a><span class="ln">   252</span>			bytes := make([]byte, val.Len())
<a id="L253"></a><span class="ln">   253</span>			for i := range bytes {
<a id="L254"></a><span class="ln">   254</span>				bytes[i] = val.Index(i).Interface().(byte)
<a id="L255"></a><span class="ln">   255</span>			}
<a id="L256"></a><span class="ln">   256</span>			Escape(p, bytes)
<a id="L257"></a><span class="ln">   257</span>		case reflect.Slice:
<a id="L258"></a><span class="ln">   258</span>			<span class="comment">// will be []byte</span>
<a id="L259"></a><span class="ln">   259</span>			Escape(p, val.Bytes())
<a id="L260"></a><span class="ln">   260</span>		default:
<a id="L261"></a><span class="ln">   261</span>			return &amp;UnsupportedTypeError{typ}
<a id="L262"></a><span class="ln">   262</span>		}
<a id="L263"></a><span class="ln">   263</span>		return nil
<a id="L264"></a><span class="ln">   264</span>	}
<a id="L265"></a><span class="ln">   265</span>	
<a id="L266"></a><span class="ln">   266</span>	var ddBytes = []byte(&#34;--&#34;)
<a id="L267"></a><span class="ln">   267</span>	
<a id="L268"></a><span class="ln">   268</span>	func (p *printer) marshalStruct(tinfo *typeInfo, val reflect.Value) error {
<a id="L269"></a><span class="ln">   269</span>		if val.Type() == timeType {
<a id="L270"></a><span class="ln">   270</span>			p.WriteString(val.Interface().(time.Time).Format(time.RFC3339Nano))
<a id="L271"></a><span class="ln">   271</span>			return nil
<a id="L272"></a><span class="ln">   272</span>		}
<a id="L273"></a><span class="ln">   273</span>		s := parentStack{printer: p}
<a id="L274"></a><span class="ln">   274</span>		for i := range tinfo.fields {
<a id="L275"></a><span class="ln">   275</span>			finfo := &amp;tinfo.fields[i]
<a id="L276"></a><span class="ln">   276</span>			if finfo.flags&amp;(fAttr|fAny) != 0 {
<a id="L277"></a><span class="ln">   277</span>				continue
<a id="L278"></a><span class="ln">   278</span>			}
<a id="L279"></a><span class="ln">   279</span>			vf := val.FieldByIndex(finfo.idx)
<a id="L280"></a><span class="ln">   280</span>			switch finfo.flags &amp; fMode {
<a id="L281"></a><span class="ln">   281</span>			case fCharData:
<a id="L282"></a><span class="ln">   282</span>				switch vf.Kind() {
<a id="L283"></a><span class="ln">   283</span>				case reflect.String:
<a id="L284"></a><span class="ln">   284</span>					Escape(p, []byte(vf.String()))
<a id="L285"></a><span class="ln">   285</span>				case reflect.Slice:
<a id="L286"></a><span class="ln">   286</span>					if elem, ok := vf.Interface().([]byte); ok {
<a id="L287"></a><span class="ln">   287</span>						Escape(p, elem)
<a id="L288"></a><span class="ln">   288</span>					}
<a id="L289"></a><span class="ln">   289</span>				}
<a id="L290"></a><span class="ln">   290</span>				continue
<a id="L291"></a><span class="ln">   291</span>	
<a id="L292"></a><span class="ln">   292</span>			case fComment:
<a id="L293"></a><span class="ln">   293</span>				k := vf.Kind()
<a id="L294"></a><span class="ln">   294</span>				if !(k == reflect.String || k == reflect.Slice &amp;&amp; vf.Type().Elem().Kind() == reflect.Uint8) {
<a id="L295"></a><span class="ln">   295</span>					return fmt.Errorf(&#34;xml: bad type for comment field of %s&#34;, val.Type())
<a id="L296"></a><span class="ln">   296</span>				}
<a id="L297"></a><span class="ln">   297</span>				if vf.Len() == 0 {
<a id="L298"></a><span class="ln">   298</span>					continue
<a id="L299"></a><span class="ln">   299</span>				}
<a id="L300"></a><span class="ln">   300</span>				p.writeIndent(0)
<a id="L301"></a><span class="ln">   301</span>				p.WriteString(&#34;&lt;!--&#34;)
<a id="L302"></a><span class="ln">   302</span>				dashDash := false
<a id="L303"></a><span class="ln">   303</span>				dashLast := false
<a id="L304"></a><span class="ln">   304</span>				switch k {
<a id="L305"></a><span class="ln">   305</span>				case reflect.String:
<a id="L306"></a><span class="ln">   306</span>					s := vf.String()
<a id="L307"></a><span class="ln">   307</span>					dashDash = strings.Index(s, &#34;--&#34;) &gt;= 0
<a id="L308"></a><span class="ln">   308</span>					dashLast = s[len(s)-1] == &#39;-&#39;
<a id="L309"></a><span class="ln">   309</span>					if !dashDash {
<a id="L310"></a><span class="ln">   310</span>						p.WriteString(s)
<a id="L311"></a><span class="ln">   311</span>					}
<a id="L312"></a><span class="ln">   312</span>				case reflect.Slice:
<a id="L313"></a><span class="ln">   313</span>					b := vf.Bytes()
<a id="L314"></a><span class="ln">   314</span>					dashDash = bytes.Index(b, ddBytes) &gt;= 0
<a id="L315"></a><span class="ln">   315</span>					dashLast = b[len(b)-1] == &#39;-&#39;
<a id="L316"></a><span class="ln">   316</span>					if !dashDash {
<a id="L317"></a><span class="ln">   317</span>						p.Write(b)
<a id="L318"></a><span class="ln">   318</span>					}
<a id="L319"></a><span class="ln">   319</span>				default:
<a id="L320"></a><span class="ln">   320</span>					panic(&#34;can&#39;t happen&#34;)
<a id="L321"></a><span class="ln">   321</span>				}
<a id="L322"></a><span class="ln">   322</span>				if dashDash {
<a id="L323"></a><span class="ln">   323</span>					return fmt.Errorf(`xml: comments must not contain &#34;--&#34;`)
<a id="L324"></a><span class="ln">   324</span>				}
<a id="L325"></a><span class="ln">   325</span>				if dashLast {
<a id="L326"></a><span class="ln">   326</span>					<span class="comment">// &#34;---&gt;&#34; is invalid grammar. Make it &#34;- --&gt;&#34;</span>
<a id="L327"></a><span class="ln">   327</span>					p.WriteByte(&#39; &#39;)
<a id="L328"></a><span class="ln">   328</span>				}
<a id="L329"></a><span class="ln">   329</span>				p.WriteString(&#34;--&gt;&#34;)
<a id="L330"></a><span class="ln">   330</span>				continue
<a id="L331"></a><span class="ln">   331</span>	
<a id="L332"></a><span class="ln">   332</span>			case fInnerXml:
<a id="L333"></a><span class="ln">   333</span>				iface := vf.Interface()
<a id="L334"></a><span class="ln">   334</span>				switch raw := iface.(type) {
<a id="L335"></a><span class="ln">   335</span>				case []byte:
<a id="L336"></a><span class="ln">   336</span>					p.Write(raw)
<a id="L337"></a><span class="ln">   337</span>					continue
<a id="L338"></a><span class="ln">   338</span>				case string:
<a id="L339"></a><span class="ln">   339</span>					p.WriteString(raw)
<a id="L340"></a><span class="ln">   340</span>					continue
<a id="L341"></a><span class="ln">   341</span>				}
<a id="L342"></a><span class="ln">   342</span>	
<a id="L343"></a><span class="ln">   343</span>			case fElement:
<a id="L344"></a><span class="ln">   344</span>				s.trim(finfo.parents)
<a id="L345"></a><span class="ln">   345</span>				if len(finfo.parents) &gt; len(s.stack) {
<a id="L346"></a><span class="ln">   346</span>					if vf.Kind() != reflect.Ptr &amp;&amp; vf.Kind() != reflect.Interface || !vf.IsNil() {
<a id="L347"></a><span class="ln">   347</span>						s.push(finfo.parents[len(s.stack):])
<a id="L348"></a><span class="ln">   348</span>					}
<a id="L349"></a><span class="ln">   349</span>				}
<a id="L350"></a><span class="ln">   350</span>			}
<a id="L351"></a><span class="ln">   351</span>			if err := p.marshalValue(vf, finfo); err != nil {
<a id="L352"></a><span class="ln">   352</span>				return err
<a id="L353"></a><span class="ln">   353</span>			}
<a id="L354"></a><span class="ln">   354</span>		}
<a id="L355"></a><span class="ln">   355</span>		s.trim(nil)
<a id="L356"></a><span class="ln">   356</span>		return nil
<a id="L357"></a><span class="ln">   357</span>	}
<a id="L358"></a><span class="ln">   358</span>	
<a id="L359"></a><span class="ln">   359</span>	func (p *printer) writeIndent(depthDelta int) {
<a id="L360"></a><span class="ln">   360</span>		if len(p.prefix) == 0 &amp;&amp; len(p.indent) == 0 {
<a id="L361"></a><span class="ln">   361</span>			return
<a id="L362"></a><span class="ln">   362</span>		}
<a id="L363"></a><span class="ln">   363</span>		if depthDelta &lt; 0 {
<a id="L364"></a><span class="ln">   364</span>			p.depth--
<a id="L365"></a><span class="ln">   365</span>			if p.indentedIn {
<a id="L366"></a><span class="ln">   366</span>				p.indentedIn = false
<a id="L367"></a><span class="ln">   367</span>				return
<a id="L368"></a><span class="ln">   368</span>			}
<a id="L369"></a><span class="ln">   369</span>			p.indentedIn = false
<a id="L370"></a><span class="ln">   370</span>		}
<a id="L371"></a><span class="ln">   371</span>		p.WriteByte(&#39;\n&#39;)
<a id="L372"></a><span class="ln">   372</span>		if len(p.prefix) &gt; 0 {
<a id="L373"></a><span class="ln">   373</span>			p.WriteString(p.prefix)
<a id="L374"></a><span class="ln">   374</span>		}
<a id="L375"></a><span class="ln">   375</span>		if len(p.indent) &gt; 0 {
<a id="L376"></a><span class="ln">   376</span>			for i := 0; i &lt; p.depth; i++ {
<a id="L377"></a><span class="ln">   377</span>				p.WriteString(p.indent)
<a id="L378"></a><span class="ln">   378</span>			}
<a id="L379"></a><span class="ln">   379</span>		}
<a id="L380"></a><span class="ln">   380</span>		if depthDelta &gt; 0 {
<a id="L381"></a><span class="ln">   381</span>			p.depth++
<a id="L382"></a><span class="ln">   382</span>			p.indentedIn = true
<a id="L383"></a><span class="ln">   383</span>		}
<a id="L384"></a><span class="ln">   384</span>	}
<a id="L385"></a><span class="ln">   385</span>	
<a id="L386"></a><span class="ln">   386</span>	type parentStack struct {
<a id="L387"></a><span class="ln">   387</span>		*printer
<a id="L388"></a><span class="ln">   388</span>		stack []string
<a id="L389"></a><span class="ln">   389</span>	}
<a id="L390"></a><span class="ln">   390</span>	
<a id="L391"></a><span class="ln">   391</span>	<span class="comment">// trim updates the XML context to match the longest common prefix of the stack</span>
<a id="L392"></a><span class="ln">   392</span>	<span class="comment">// and the given parents.  A closing tag will be written for every parent</span>
<a id="L393"></a><span class="ln">   393</span>	<span class="comment">// popped.  Passing a zero slice or nil will close all the elements.</span>
<a id="L394"></a><span class="ln">   394</span>	func (s *parentStack) trim(parents []string) {
<a id="L395"></a><span class="ln">   395</span>		split := 0
<a id="L396"></a><span class="ln">   396</span>		for ; split &lt; len(parents) &amp;&amp; split &lt; len(s.stack); split++ {
<a id="L397"></a><span class="ln">   397</span>			if parents[split] != s.stack[split] {
<a id="L398"></a><span class="ln">   398</span>				break
<a id="L399"></a><span class="ln">   399</span>			}
<a id="L400"></a><span class="ln">   400</span>		}
<a id="L401"></a><span class="ln">   401</span>		for i := len(s.stack) - 1; i &gt;= split; i-- {
<a id="L402"></a><span class="ln">   402</span>			s.writeIndent(-1)
<a id="L403"></a><span class="ln">   403</span>			s.WriteString(&#34;&lt;/&#34;)
<a id="L404"></a><span class="ln">   404</span>			s.WriteString(s.stack[i])
<a id="L405"></a><span class="ln">   405</span>			s.WriteByte(&#39;&gt;&#39;)
<a id="L406"></a><span class="ln">   406</span>		}
<a id="L407"></a><span class="ln">   407</span>		s.stack = parents[:split]
<a id="L408"></a><span class="ln">   408</span>	}
<a id="L409"></a><span class="ln">   409</span>	
<a id="L410"></a><span class="ln">   410</span>	<span class="comment">// push adds parent elements to the stack and writes open tags.</span>
<a id="L411"></a><span class="ln">   411</span>	func (s *parentStack) push(parents []string) {
<a id="L412"></a><span class="ln">   412</span>		for i := 0; i &lt; len(parents); i++ {
<a id="L413"></a><span class="ln">   413</span>			s.writeIndent(1)
<a id="L414"></a><span class="ln">   414</span>			s.WriteByte(&#39;&lt;&#39;)
<a id="L415"></a><span class="ln">   415</span>			s.WriteString(parents[i])
<a id="L416"></a><span class="ln">   416</span>			s.WriteByte(&#39;&gt;&#39;)
<a id="L417"></a><span class="ln">   417</span>		}
<a id="L418"></a><span class="ln">   418</span>		s.stack = append(s.stack, parents...)
<a id="L419"></a><span class="ln">   419</span>	}
<a id="L420"></a><span class="ln">   420</span>	
<a id="L421"></a><span class="ln">   421</span>	<span class="comment">// A MarshalXMLError is returned when Marshal encounters a type</span>
<a id="L422"></a><span class="ln">   422</span>	<span class="comment">// that cannot be converted into XML.</span>
<a id="L423"></a><span class="ln">   423</span>	type UnsupportedTypeError struct {
<a id="L424"></a><span class="ln">   424</span>		Type reflect.Type
<a id="L425"></a><span class="ln">   425</span>	}
<a id="L426"></a><span class="ln">   426</span>	
<a id="L427"></a><span class="ln">   427</span>	func (e *UnsupportedTypeError) Error() string {
<a id="L428"></a><span class="ln">   428</span>		return &#34;xml: unsupported type: &#34; + e.Type.String()
<a id="L429"></a><span class="ln">   429</span>	}
<a id="L430"></a><span class="ln">   430</span>	
<a id="L431"></a><span class="ln">   431</span>	func isEmptyValue(v reflect.Value) bool {
<a id="L432"></a><span class="ln">   432</span>		switch v.Kind() {
<a id="L433"></a><span class="ln">   433</span>		case reflect.Array, reflect.Map, reflect.Slice, reflect.String:
<a id="L434"></a><span class="ln">   434</span>			return v.Len() == 0
<a id="L435"></a><span class="ln">   435</span>		case reflect.Bool:
<a id="L436"></a><span class="ln">   436</span>			return !v.Bool()
<a id="L437"></a><span class="ln">   437</span>		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<a id="L438"></a><span class="ln">   438</span>			return v.Int() == 0
<a id="L439"></a><span class="ln">   439</span>		case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<a id="L440"></a><span class="ln">   440</span>			return v.Uint() == 0
<a id="L441"></a><span class="ln">   441</span>		case reflect.Float32, reflect.Float64:
<a id="L442"></a><span class="ln">   442</span>			return v.Float() == 0
<a id="L443"></a><span class="ln">   443</span>		case reflect.Interface, reflect.Ptr:
<a id="L444"></a><span class="ln">   444</span>			return v.IsNil()
<a id="L445"></a><span class="ln">   445</span>		}
<a id="L446"></a><span class="ln">   446</span>		return false
<a id="L447"></a><span class="ln">   447</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

