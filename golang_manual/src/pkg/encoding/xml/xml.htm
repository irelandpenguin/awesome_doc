<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/encoding/xml/xml.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/encoding/xml/xml.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package xml implements a simple XML 1.0 parser that</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// understands XML name spaces.</span>
<a id="L7"></a><span class="ln">     7</span>	package xml
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// References:</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">//    Annotated XML spec: http://www.xml.com/axml/testaxml.htm</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">//    XML name spaces: http://www.w3.org/TR/REC-xml-names/</span>
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// TODO(rsc):</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">//	Test error handling.</span>
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	import (
<a id="L17"></a><span class="ln">    17</span>		&#34;bufio&#34;
<a id="L18"></a><span class="ln">    18</span>		&#34;bytes&#34;
<a id="L19"></a><span class="ln">    19</span>		&#34;fmt&#34;
<a id="L20"></a><span class="ln">    20</span>		&#34;io&#34;
<a id="L21"></a><span class="ln">    21</span>		&#34;strconv&#34;
<a id="L22"></a><span class="ln">    22</span>		&#34;strings&#34;
<a id="L23"></a><span class="ln">    23</span>		&#34;unicode&#34;
<a id="L24"></a><span class="ln">    24</span>		&#34;unicode/utf8&#34;
<a id="L25"></a><span class="ln">    25</span>	)
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// A SyntaxError represents a syntax error in the XML input stream.</span>
<a id="L28"></a><span class="ln">    28</span>	type SyntaxError struct {
<a id="L29"></a><span class="ln">    29</span>		Msg  string
<a id="L30"></a><span class="ln">    30</span>		Line int
<a id="L31"></a><span class="ln">    31</span>	}
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	func (e *SyntaxError) Error() string {
<a id="L34"></a><span class="ln">    34</span>		return &#34;XML syntax error on line &#34; + strconv.Itoa(e.Line) + &#34;: &#34; + e.Msg
<a id="L35"></a><span class="ln">    35</span>	}
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// A Name represents an XML name (Local) annotated</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// with a name space identifier (Space).</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// In tokens returned by Decoder.Token, the Space identifier</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// is given as a canonical URL, not the short prefix used</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// in the document being parsed.</span>
<a id="L42"></a><span class="ln">    42</span>	type Name struct {
<a id="L43"></a><span class="ln">    43</span>		Space, Local string
<a id="L44"></a><span class="ln">    44</span>	}
<a id="L45"></a><span class="ln">    45</span>	
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">// An Attr represents an attribute in an XML element (Name=Value).</span>
<a id="L47"></a><span class="ln">    47</span>	type Attr struct {
<a id="L48"></a><span class="ln">    48</span>		Name  Name
<a id="L49"></a><span class="ln">    49</span>		Value string
<a id="L50"></a><span class="ln">    50</span>	}
<a id="L51"></a><span class="ln">    51</span>	
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// A Token is an interface holding one of the token types:</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">// StartElement, EndElement, CharData, Comment, ProcInst, or Directive.</span>
<a id="L54"></a><span class="ln">    54</span>	type Token interface{}
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// A StartElement represents an XML start element.</span>
<a id="L57"></a><span class="ln">    57</span>	type StartElement struct {
<a id="L58"></a><span class="ln">    58</span>		Name Name
<a id="L59"></a><span class="ln">    59</span>		Attr []Attr
<a id="L60"></a><span class="ln">    60</span>	}
<a id="L61"></a><span class="ln">    61</span>	
<a id="L62"></a><span class="ln">    62</span>	func (e StartElement) Copy() StartElement {
<a id="L63"></a><span class="ln">    63</span>		attrs := make([]Attr, len(e.Attr))
<a id="L64"></a><span class="ln">    64</span>		copy(attrs, e.Attr)
<a id="L65"></a><span class="ln">    65</span>		e.Attr = attrs
<a id="L66"></a><span class="ln">    66</span>		return e
<a id="L67"></a><span class="ln">    67</span>	}
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// An EndElement represents an XML end element.</span>
<a id="L70"></a><span class="ln">    70</span>	type EndElement struct {
<a id="L71"></a><span class="ln">    71</span>		Name Name
<a id="L72"></a><span class="ln">    72</span>	}
<a id="L73"></a><span class="ln">    73</span>	
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">// A CharData represents XML character data (raw text),</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">// in which XML escape sequences have been replaced by</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">// the characters they represent.</span>
<a id="L77"></a><span class="ln">    77</span>	type CharData []byte
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>	func makeCopy(b []byte) []byte {
<a id="L80"></a><span class="ln">    80</span>		b1 := make([]byte, len(b))
<a id="L81"></a><span class="ln">    81</span>		copy(b1, b)
<a id="L82"></a><span class="ln">    82</span>		return b1
<a id="L83"></a><span class="ln">    83</span>	}
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>	func (c CharData) Copy() CharData { return CharData(makeCopy(c)) }
<a id="L86"></a><span class="ln">    86</span>	
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">// A Comment represents an XML comment of the form &lt;!--comment--&gt;.</span>
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// The bytes do not include the &lt;!-- and --&gt; comment markers.</span>
<a id="L89"></a><span class="ln">    89</span>	type Comment []byte
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>	func (c Comment) Copy() Comment { return Comment(makeCopy(c)) }
<a id="L92"></a><span class="ln">    92</span>	
<a id="L93"></a><span class="ln">    93</span>	<span class="comment">// A ProcInst represents an XML processing instruction of the form &lt;?target inst?&gt;</span>
<a id="L94"></a><span class="ln">    94</span>	type ProcInst struct {
<a id="L95"></a><span class="ln">    95</span>		Target string
<a id="L96"></a><span class="ln">    96</span>		Inst   []byte
<a id="L97"></a><span class="ln">    97</span>	}
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>	func (p ProcInst) Copy() ProcInst {
<a id="L100"></a><span class="ln">   100</span>		p.Inst = makeCopy(p.Inst)
<a id="L101"></a><span class="ln">   101</span>		return p
<a id="L102"></a><span class="ln">   102</span>	}
<a id="L103"></a><span class="ln">   103</span>	
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">// A Directive represents an XML directive of the form &lt;!text&gt;.</span>
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// The bytes do not include the &lt;! and &gt; markers.</span>
<a id="L106"></a><span class="ln">   106</span>	type Directive []byte
<a id="L107"></a><span class="ln">   107</span>	
<a id="L108"></a><span class="ln">   108</span>	func (d Directive) Copy() Directive { return Directive(makeCopy(d)) }
<a id="L109"></a><span class="ln">   109</span>	
<a id="L110"></a><span class="ln">   110</span>	<span class="comment">// CopyToken returns a copy of a Token.</span>
<a id="L111"></a><span class="ln">   111</span>	func CopyToken(t Token) Token {
<a id="L112"></a><span class="ln">   112</span>		switch v := t.(type) {
<a id="L113"></a><span class="ln">   113</span>		case CharData:
<a id="L114"></a><span class="ln">   114</span>			return v.Copy()
<a id="L115"></a><span class="ln">   115</span>		case Comment:
<a id="L116"></a><span class="ln">   116</span>			return v.Copy()
<a id="L117"></a><span class="ln">   117</span>		case Directive:
<a id="L118"></a><span class="ln">   118</span>			return v.Copy()
<a id="L119"></a><span class="ln">   119</span>		case ProcInst:
<a id="L120"></a><span class="ln">   120</span>			return v.Copy()
<a id="L121"></a><span class="ln">   121</span>		case StartElement:
<a id="L122"></a><span class="ln">   122</span>			return v.Copy()
<a id="L123"></a><span class="ln">   123</span>		}
<a id="L124"></a><span class="ln">   124</span>		return t
<a id="L125"></a><span class="ln">   125</span>	}
<a id="L126"></a><span class="ln">   126</span>	
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// A Decoder represents an XML parser reading a particular input stream.</span>
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// The parser assumes that its input is encoded in UTF-8.</span>
<a id="L129"></a><span class="ln">   129</span>	type Decoder struct {
<a id="L130"></a><span class="ln">   130</span>		<span class="comment">// Strict defaults to true, enforcing the requirements</span>
<a id="L131"></a><span class="ln">   131</span>		<span class="comment">// of the XML specification.</span>
<a id="L132"></a><span class="ln">   132</span>		<span class="comment">// If set to false, the parser allows input containing common</span>
<a id="L133"></a><span class="ln">   133</span>		<span class="comment">// mistakes:</span>
<a id="L134"></a><span class="ln">   134</span>		<span class="comment">//	* If an element is missing an end tag, the parser invents</span>
<a id="L135"></a><span class="ln">   135</span>		<span class="comment">//	  end tags as necessary to keep the return values from Token</span>
<a id="L136"></a><span class="ln">   136</span>		<span class="comment">//	  properly balanced.</span>
<a id="L137"></a><span class="ln">   137</span>		<span class="comment">//	* In attribute values and character data, unknown or malformed</span>
<a id="L138"></a><span class="ln">   138</span>		<span class="comment">//	  character entities (sequences beginning with &amp;) are left alone.</span>
<a id="L139"></a><span class="ln">   139</span>		<span class="comment">//</span>
<a id="L140"></a><span class="ln">   140</span>		<span class="comment">// Setting:</span>
<a id="L141"></a><span class="ln">   141</span>		<span class="comment">//</span>
<a id="L142"></a><span class="ln">   142</span>		<span class="comment">//	d.Strict = false;</span>
<a id="L143"></a><span class="ln">   143</span>		<span class="comment">//	d.AutoClose = HTMLAutoClose;</span>
<a id="L144"></a><span class="ln">   144</span>		<span class="comment">//	d.Entity = HTMLEntity</span>
<a id="L145"></a><span class="ln">   145</span>		<span class="comment">//</span>
<a id="L146"></a><span class="ln">   146</span>		<span class="comment">// creates a parser that can handle typical HTML.</span>
<a id="L147"></a><span class="ln">   147</span>		Strict bool
<a id="L148"></a><span class="ln">   148</span>	
<a id="L149"></a><span class="ln">   149</span>		<span class="comment">// When Strict == false, AutoClose indicates a set of elements to</span>
<a id="L150"></a><span class="ln">   150</span>		<span class="comment">// consider closed immediately after they are opened, regardless</span>
<a id="L151"></a><span class="ln">   151</span>		<span class="comment">// of whether an end element is present.</span>
<a id="L152"></a><span class="ln">   152</span>		AutoClose []string
<a id="L153"></a><span class="ln">   153</span>	
<a id="L154"></a><span class="ln">   154</span>		<span class="comment">// Entity can be used to map non-standard entity names to string replacements.</span>
<a id="L155"></a><span class="ln">   155</span>		<span class="comment">// The parser behaves as if these standard mappings are present in the map,</span>
<a id="L156"></a><span class="ln">   156</span>		<span class="comment">// regardless of the actual map content:</span>
<a id="L157"></a><span class="ln">   157</span>		<span class="comment">//</span>
<a id="L158"></a><span class="ln">   158</span>		<span class="comment">//	&#34;lt&#34;: &#34;&lt;&#34;,</span>
<a id="L159"></a><span class="ln">   159</span>		<span class="comment">//	&#34;gt&#34;: &#34;&gt;&#34;,</span>
<a id="L160"></a><span class="ln">   160</span>		<span class="comment">//	&#34;amp&#34;: &#34;&amp;&#34;,</span>
<a id="L161"></a><span class="ln">   161</span>		<span class="comment">//	&#34;apos&#34;: &#34;&#39;&#34;,</span>
<a id="L162"></a><span class="ln">   162</span>		<span class="comment">//	&#34;quot&#34;: `&#34;`,</span>
<a id="L163"></a><span class="ln">   163</span>		Entity map[string]string
<a id="L164"></a><span class="ln">   164</span>	
<a id="L165"></a><span class="ln">   165</span>		<span class="comment">// CharsetReader, if non-nil, defines a function to generate</span>
<a id="L166"></a><span class="ln">   166</span>		<span class="comment">// charset-conversion readers, converting from the provided</span>
<a id="L167"></a><span class="ln">   167</span>		<span class="comment">// non-UTF-8 charset into UTF-8. If CharsetReader is nil or</span>
<a id="L168"></a><span class="ln">   168</span>		<span class="comment">// returns an error, parsing stops with an error. One of the</span>
<a id="L169"></a><span class="ln">   169</span>		<span class="comment">// the CharsetReader&#39;s result values must be non-nil.</span>
<a id="L170"></a><span class="ln">   170</span>		CharsetReader func(charset string, input io.Reader) (io.Reader, error)
<a id="L171"></a><span class="ln">   171</span>	
<a id="L172"></a><span class="ln">   172</span>		r         io.ByteReader
<a id="L173"></a><span class="ln">   173</span>		buf       bytes.Buffer
<a id="L174"></a><span class="ln">   174</span>		saved     *bytes.Buffer
<a id="L175"></a><span class="ln">   175</span>		stk       *stack
<a id="L176"></a><span class="ln">   176</span>		free      *stack
<a id="L177"></a><span class="ln">   177</span>		needClose bool
<a id="L178"></a><span class="ln">   178</span>		toClose   Name
<a id="L179"></a><span class="ln">   179</span>		nextToken Token
<a id="L180"></a><span class="ln">   180</span>		nextByte  int
<a id="L181"></a><span class="ln">   181</span>		ns        map[string]string
<a id="L182"></a><span class="ln">   182</span>		err       error
<a id="L183"></a><span class="ln">   183</span>		line      int
<a id="L184"></a><span class="ln">   184</span>		tmp       [32]byte
<a id="L185"></a><span class="ln">   185</span>	}
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>	<span class="comment">// NewDecoder creates a new XML parser reading from r.</span>
<a id="L188"></a><span class="ln">   188</span>	func NewDecoder(r io.Reader) *Decoder {
<a id="L189"></a><span class="ln">   189</span>		d := &amp;Decoder{
<a id="L190"></a><span class="ln">   190</span>			ns:       make(map[string]string),
<a id="L191"></a><span class="ln">   191</span>			nextByte: -1,
<a id="L192"></a><span class="ln">   192</span>			line:     1,
<a id="L193"></a><span class="ln">   193</span>			Strict:   true,
<a id="L194"></a><span class="ln">   194</span>		}
<a id="L195"></a><span class="ln">   195</span>		d.switchToReader(r)
<a id="L196"></a><span class="ln">   196</span>		return d
<a id="L197"></a><span class="ln">   197</span>	}
<a id="L198"></a><span class="ln">   198</span>	
<a id="L199"></a><span class="ln">   199</span>	<span class="comment">// Token returns the next XML token in the input stream.</span>
<a id="L200"></a><span class="ln">   200</span>	<span class="comment">// At the end of the input stream, Token returns nil, io.EOF.</span>
<a id="L201"></a><span class="ln">   201</span>	<span class="comment">//</span>
<a id="L202"></a><span class="ln">   202</span>	<span class="comment">// Slices of bytes in the returned token data refer to the</span>
<a id="L203"></a><span class="ln">   203</span>	<span class="comment">// parser&#39;s internal buffer and remain valid only until the next</span>
<a id="L204"></a><span class="ln">   204</span>	<span class="comment">// call to Token.  To acquire a copy of the bytes, call CopyToken</span>
<a id="L205"></a><span class="ln">   205</span>	<span class="comment">// or the token&#39;s Copy method.</span>
<a id="L206"></a><span class="ln">   206</span>	<span class="comment">//</span>
<a id="L207"></a><span class="ln">   207</span>	<span class="comment">// Token expands self-closing elements such as &lt;br/&gt;</span>
<a id="L208"></a><span class="ln">   208</span>	<span class="comment">// into separate start and end elements returned by successive calls.</span>
<a id="L209"></a><span class="ln">   209</span>	<span class="comment">//</span>
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// Token guarantees that the StartElement and EndElement</span>
<a id="L211"></a><span class="ln">   211</span>	<span class="comment">// tokens it returns are properly nested and matched:</span>
<a id="L212"></a><span class="ln">   212</span>	<span class="comment">// if Token encounters an unexpected end element,</span>
<a id="L213"></a><span class="ln">   213</span>	<span class="comment">// it will return an error.</span>
<a id="L214"></a><span class="ln">   214</span>	<span class="comment">//</span>
<a id="L215"></a><span class="ln">   215</span>	<span class="comment">// Token implements XML name spaces as described by</span>
<a id="L216"></a><span class="ln">   216</span>	<span class="comment">// http://www.w3.org/TR/REC-xml-names/.  Each of the</span>
<a id="L217"></a><span class="ln">   217</span>	<span class="comment">// Name structures contained in the Token has the Space</span>
<a id="L218"></a><span class="ln">   218</span>	<span class="comment">// set to the URL identifying its name space when known.</span>
<a id="L219"></a><span class="ln">   219</span>	<span class="comment">// If Token encounters an unrecognized name space prefix,</span>
<a id="L220"></a><span class="ln">   220</span>	<span class="comment">// it uses the prefix as the Space rather than report an error.</span>
<a id="L221"></a><span class="ln">   221</span>	func (d *Decoder) Token() (t Token, err error) {
<a id="L222"></a><span class="ln">   222</span>		if d.nextToken != nil {
<a id="L223"></a><span class="ln">   223</span>			t = d.nextToken
<a id="L224"></a><span class="ln">   224</span>			d.nextToken = nil
<a id="L225"></a><span class="ln">   225</span>		} else if t, err = d.RawToken(); err != nil {
<a id="L226"></a><span class="ln">   226</span>			return
<a id="L227"></a><span class="ln">   227</span>		}
<a id="L228"></a><span class="ln">   228</span>	
<a id="L229"></a><span class="ln">   229</span>		if !d.Strict {
<a id="L230"></a><span class="ln">   230</span>			if t1, ok := d.autoClose(t); ok {
<a id="L231"></a><span class="ln">   231</span>				d.nextToken = t
<a id="L232"></a><span class="ln">   232</span>				t = t1
<a id="L233"></a><span class="ln">   233</span>			}
<a id="L234"></a><span class="ln">   234</span>		}
<a id="L235"></a><span class="ln">   235</span>		switch t1 := t.(type) {
<a id="L236"></a><span class="ln">   236</span>		case StartElement:
<a id="L237"></a><span class="ln">   237</span>			<span class="comment">// In XML name spaces, the translations listed in the</span>
<a id="L238"></a><span class="ln">   238</span>			<span class="comment">// attributes apply to the element name and</span>
<a id="L239"></a><span class="ln">   239</span>			<span class="comment">// to the other attribute names, so process</span>
<a id="L240"></a><span class="ln">   240</span>			<span class="comment">// the translations first.</span>
<a id="L241"></a><span class="ln">   241</span>			for _, a := range t1.Attr {
<a id="L242"></a><span class="ln">   242</span>				if a.Name.Space == &#34;xmlns&#34; {
<a id="L243"></a><span class="ln">   243</span>					v, ok := d.ns[a.Name.Local]
<a id="L244"></a><span class="ln">   244</span>					d.pushNs(a.Name.Local, v, ok)
<a id="L245"></a><span class="ln">   245</span>					d.ns[a.Name.Local] = a.Value
<a id="L246"></a><span class="ln">   246</span>				}
<a id="L247"></a><span class="ln">   247</span>				if a.Name.Space == &#34;&#34; &amp;&amp; a.Name.Local == &#34;xmlns&#34; {
<a id="L248"></a><span class="ln">   248</span>					<span class="comment">// Default space for untagged names</span>
<a id="L249"></a><span class="ln">   249</span>					v, ok := d.ns[&#34;&#34;]
<a id="L250"></a><span class="ln">   250</span>					d.pushNs(&#34;&#34;, v, ok)
<a id="L251"></a><span class="ln">   251</span>					d.ns[&#34;&#34;] = a.Value
<a id="L252"></a><span class="ln">   252</span>				}
<a id="L253"></a><span class="ln">   253</span>			}
<a id="L254"></a><span class="ln">   254</span>	
<a id="L255"></a><span class="ln">   255</span>			d.translate(&amp;t1.Name, true)
<a id="L256"></a><span class="ln">   256</span>			for i := range t1.Attr {
<a id="L257"></a><span class="ln">   257</span>				d.translate(&amp;t1.Attr[i].Name, false)
<a id="L258"></a><span class="ln">   258</span>			}
<a id="L259"></a><span class="ln">   259</span>			d.pushElement(t1.Name)
<a id="L260"></a><span class="ln">   260</span>			t = t1
<a id="L261"></a><span class="ln">   261</span>	
<a id="L262"></a><span class="ln">   262</span>		case EndElement:
<a id="L263"></a><span class="ln">   263</span>			d.translate(&amp;t1.Name, true)
<a id="L264"></a><span class="ln">   264</span>			if !d.popElement(&amp;t1) {
<a id="L265"></a><span class="ln">   265</span>				return nil, d.err
<a id="L266"></a><span class="ln">   266</span>			}
<a id="L267"></a><span class="ln">   267</span>			t = t1
<a id="L268"></a><span class="ln">   268</span>		}
<a id="L269"></a><span class="ln">   269</span>		return
<a id="L270"></a><span class="ln">   270</span>	}
<a id="L271"></a><span class="ln">   271</span>	
<a id="L272"></a><span class="ln">   272</span>	<span class="comment">// Apply name space translation to name n.</span>
<a id="L273"></a><span class="ln">   273</span>	<span class="comment">// The default name space (for Space==&#34;&#34;)</span>
<a id="L274"></a><span class="ln">   274</span>	<span class="comment">// applies only to element names, not to attribute names.</span>
<a id="L275"></a><span class="ln">   275</span>	func (d *Decoder) translate(n *Name, isElementName bool) {
<a id="L276"></a><span class="ln">   276</span>		switch {
<a id="L277"></a><span class="ln">   277</span>		case n.Space == &#34;xmlns&#34;:
<a id="L278"></a><span class="ln">   278</span>			return
<a id="L279"></a><span class="ln">   279</span>		case n.Space == &#34;&#34; &amp;&amp; !isElementName:
<a id="L280"></a><span class="ln">   280</span>			return
<a id="L281"></a><span class="ln">   281</span>		case n.Space == &#34;&#34; &amp;&amp; n.Local == &#34;xmlns&#34;:
<a id="L282"></a><span class="ln">   282</span>			return
<a id="L283"></a><span class="ln">   283</span>		}
<a id="L284"></a><span class="ln">   284</span>		if v, ok := d.ns[n.Space]; ok {
<a id="L285"></a><span class="ln">   285</span>			n.Space = v
<a id="L286"></a><span class="ln">   286</span>		}
<a id="L287"></a><span class="ln">   287</span>	}
<a id="L288"></a><span class="ln">   288</span>	
<a id="L289"></a><span class="ln">   289</span>	func (d *Decoder) switchToReader(r io.Reader) {
<a id="L290"></a><span class="ln">   290</span>		<span class="comment">// Get efficient byte at a time reader.</span>
<a id="L291"></a><span class="ln">   291</span>		<span class="comment">// Assume that if reader has its own</span>
<a id="L292"></a><span class="ln">   292</span>		<span class="comment">// ReadByte, it&#39;s efficient enough.</span>
<a id="L293"></a><span class="ln">   293</span>		<span class="comment">// Otherwise, use bufio.</span>
<a id="L294"></a><span class="ln">   294</span>		if rb, ok := r.(io.ByteReader); ok {
<a id="L295"></a><span class="ln">   295</span>			d.r = rb
<a id="L296"></a><span class="ln">   296</span>		} else {
<a id="L297"></a><span class="ln">   297</span>			d.r = bufio.NewReader(r)
<a id="L298"></a><span class="ln">   298</span>		}
<a id="L299"></a><span class="ln">   299</span>	}
<a id="L300"></a><span class="ln">   300</span>	
<a id="L301"></a><span class="ln">   301</span>	<span class="comment">// Parsing state - stack holds old name space translations</span>
<a id="L302"></a><span class="ln">   302</span>	<span class="comment">// and the current set of open elements.  The translations to pop when</span>
<a id="L303"></a><span class="ln">   303</span>	<span class="comment">// ending a given tag are *below* it on the stack, which is</span>
<a id="L304"></a><span class="ln">   304</span>	<span class="comment">// more work but forced on us by XML.</span>
<a id="L305"></a><span class="ln">   305</span>	type stack struct {
<a id="L306"></a><span class="ln">   306</span>		next *stack
<a id="L307"></a><span class="ln">   307</span>		kind int
<a id="L308"></a><span class="ln">   308</span>		name Name
<a id="L309"></a><span class="ln">   309</span>		ok   bool
<a id="L310"></a><span class="ln">   310</span>	}
<a id="L311"></a><span class="ln">   311</span>	
<a id="L312"></a><span class="ln">   312</span>	const (
<a id="L313"></a><span class="ln">   313</span>		stkStart = iota
<a id="L314"></a><span class="ln">   314</span>		stkNs
<a id="L315"></a><span class="ln">   315</span>	)
<a id="L316"></a><span class="ln">   316</span>	
<a id="L317"></a><span class="ln">   317</span>	func (d *Decoder) push(kind int) *stack {
<a id="L318"></a><span class="ln">   318</span>		s := d.free
<a id="L319"></a><span class="ln">   319</span>		if s != nil {
<a id="L320"></a><span class="ln">   320</span>			d.free = s.next
<a id="L321"></a><span class="ln">   321</span>		} else {
<a id="L322"></a><span class="ln">   322</span>			s = new(stack)
<a id="L323"></a><span class="ln">   323</span>		}
<a id="L324"></a><span class="ln">   324</span>		s.next = d.stk
<a id="L325"></a><span class="ln">   325</span>		s.kind = kind
<a id="L326"></a><span class="ln">   326</span>		d.stk = s
<a id="L327"></a><span class="ln">   327</span>		return s
<a id="L328"></a><span class="ln">   328</span>	}
<a id="L329"></a><span class="ln">   329</span>	
<a id="L330"></a><span class="ln">   330</span>	func (d *Decoder) pop() *stack {
<a id="L331"></a><span class="ln">   331</span>		s := d.stk
<a id="L332"></a><span class="ln">   332</span>		if s != nil {
<a id="L333"></a><span class="ln">   333</span>			d.stk = s.next
<a id="L334"></a><span class="ln">   334</span>			s.next = d.free
<a id="L335"></a><span class="ln">   335</span>			d.free = s
<a id="L336"></a><span class="ln">   336</span>		}
<a id="L337"></a><span class="ln">   337</span>		return s
<a id="L338"></a><span class="ln">   338</span>	}
<a id="L339"></a><span class="ln">   339</span>	
<a id="L340"></a><span class="ln">   340</span>	<span class="comment">// Record that we are starting an element with the given name.</span>
<a id="L341"></a><span class="ln">   341</span>	func (d *Decoder) pushElement(name Name) {
<a id="L342"></a><span class="ln">   342</span>		s := d.push(stkStart)
<a id="L343"></a><span class="ln">   343</span>		s.name = name
<a id="L344"></a><span class="ln">   344</span>	}
<a id="L345"></a><span class="ln">   345</span>	
<a id="L346"></a><span class="ln">   346</span>	<span class="comment">// Record that we are changing the value of ns[local].</span>
<a id="L347"></a><span class="ln">   347</span>	<span class="comment">// The old value is url, ok.</span>
<a id="L348"></a><span class="ln">   348</span>	func (d *Decoder) pushNs(local string, url string, ok bool) {
<a id="L349"></a><span class="ln">   349</span>		s := d.push(stkNs)
<a id="L350"></a><span class="ln">   350</span>		s.name.Local = local
<a id="L351"></a><span class="ln">   351</span>		s.name.Space = url
<a id="L352"></a><span class="ln">   352</span>		s.ok = ok
<a id="L353"></a><span class="ln">   353</span>	}
<a id="L354"></a><span class="ln">   354</span>	
<a id="L355"></a><span class="ln">   355</span>	<span class="comment">// Creates a SyntaxError with the current line number.</span>
<a id="L356"></a><span class="ln">   356</span>	func (d *Decoder) syntaxError(msg string) error {
<a id="L357"></a><span class="ln">   357</span>		return &amp;SyntaxError{Msg: msg, Line: d.line}
<a id="L358"></a><span class="ln">   358</span>	}
<a id="L359"></a><span class="ln">   359</span>	
<a id="L360"></a><span class="ln">   360</span>	<span class="comment">// Record that we are ending an element with the given name.</span>
<a id="L361"></a><span class="ln">   361</span>	<span class="comment">// The name must match the record at the top of the stack,</span>
<a id="L362"></a><span class="ln">   362</span>	<span class="comment">// which must be a pushElement record.</span>
<a id="L363"></a><span class="ln">   363</span>	<span class="comment">// After popping the element, apply any undo records from</span>
<a id="L364"></a><span class="ln">   364</span>	<span class="comment">// the stack to restore the name translations that existed</span>
<a id="L365"></a><span class="ln">   365</span>	<span class="comment">// before we saw this element.</span>
<a id="L366"></a><span class="ln">   366</span>	func (d *Decoder) popElement(t *EndElement) bool {
<a id="L367"></a><span class="ln">   367</span>		s := d.pop()
<a id="L368"></a><span class="ln">   368</span>		name := t.Name
<a id="L369"></a><span class="ln">   369</span>		switch {
<a id="L370"></a><span class="ln">   370</span>		case s == nil || s.kind != stkStart:
<a id="L371"></a><span class="ln">   371</span>			d.err = d.syntaxError(&#34;unexpected end element &lt;/&#34; + name.Local + &#34;&gt;&#34;)
<a id="L372"></a><span class="ln">   372</span>			return false
<a id="L373"></a><span class="ln">   373</span>		case s.name.Local != name.Local:
<a id="L374"></a><span class="ln">   374</span>			if !d.Strict {
<a id="L375"></a><span class="ln">   375</span>				d.needClose = true
<a id="L376"></a><span class="ln">   376</span>				d.toClose = t.Name
<a id="L377"></a><span class="ln">   377</span>				t.Name = s.name
<a id="L378"></a><span class="ln">   378</span>				return true
<a id="L379"></a><span class="ln">   379</span>			}
<a id="L380"></a><span class="ln">   380</span>			d.err = d.syntaxError(&#34;element &lt;&#34; + s.name.Local + &#34;&gt; closed by &lt;/&#34; + name.Local + &#34;&gt;&#34;)
<a id="L381"></a><span class="ln">   381</span>			return false
<a id="L382"></a><span class="ln">   382</span>		case s.name.Space != name.Space:
<a id="L383"></a><span class="ln">   383</span>			d.err = d.syntaxError(&#34;element &lt;&#34; + s.name.Local + &#34;&gt; in space &#34; + s.name.Space +
<a id="L384"></a><span class="ln">   384</span>				&#34;closed by &lt;/&#34; + name.Local + &#34;&gt; in space &#34; + name.Space)
<a id="L385"></a><span class="ln">   385</span>			return false
<a id="L386"></a><span class="ln">   386</span>		}
<a id="L387"></a><span class="ln">   387</span>	
<a id="L388"></a><span class="ln">   388</span>		<span class="comment">// Pop stack until a Start is on the top, undoing the</span>
<a id="L389"></a><span class="ln">   389</span>		<span class="comment">// translations that were associated with the element we just closed.</span>
<a id="L390"></a><span class="ln">   390</span>		for d.stk != nil &amp;&amp; d.stk.kind != stkStart {
<a id="L391"></a><span class="ln">   391</span>			s := d.pop()
<a id="L392"></a><span class="ln">   392</span>			if s.ok {
<a id="L393"></a><span class="ln">   393</span>				d.ns[s.name.Local] = s.name.Space
<a id="L394"></a><span class="ln">   394</span>			} else {
<a id="L395"></a><span class="ln">   395</span>				delete(d.ns, s.name.Local)
<a id="L396"></a><span class="ln">   396</span>			}
<a id="L397"></a><span class="ln">   397</span>		}
<a id="L398"></a><span class="ln">   398</span>	
<a id="L399"></a><span class="ln">   399</span>		return true
<a id="L400"></a><span class="ln">   400</span>	}
<a id="L401"></a><span class="ln">   401</span>	
<a id="L402"></a><span class="ln">   402</span>	<span class="comment">// If the top element on the stack is autoclosing and</span>
<a id="L403"></a><span class="ln">   403</span>	<span class="comment">// t is not the end tag, invent the end tag.</span>
<a id="L404"></a><span class="ln">   404</span>	func (d *Decoder) autoClose(t Token) (Token, bool) {
<a id="L405"></a><span class="ln">   405</span>		if d.stk == nil || d.stk.kind != stkStart {
<a id="L406"></a><span class="ln">   406</span>			return nil, false
<a id="L407"></a><span class="ln">   407</span>		}
<a id="L408"></a><span class="ln">   408</span>		name := strings.ToLower(d.stk.name.Local)
<a id="L409"></a><span class="ln">   409</span>		for _, s := range d.AutoClose {
<a id="L410"></a><span class="ln">   410</span>			if strings.ToLower(s) == name {
<a id="L411"></a><span class="ln">   411</span>				<span class="comment">// This one should be auto closed if t doesn&#39;t close it.</span>
<a id="L412"></a><span class="ln">   412</span>				et, ok := t.(EndElement)
<a id="L413"></a><span class="ln">   413</span>				if !ok || et.Name.Local != name {
<a id="L414"></a><span class="ln">   414</span>					return EndElement{d.stk.name}, true
<a id="L415"></a><span class="ln">   415</span>				}
<a id="L416"></a><span class="ln">   416</span>				break
<a id="L417"></a><span class="ln">   417</span>			}
<a id="L418"></a><span class="ln">   418</span>		}
<a id="L419"></a><span class="ln">   419</span>		return nil, false
<a id="L420"></a><span class="ln">   420</span>	}
<a id="L421"></a><span class="ln">   421</span>	
<a id="L422"></a><span class="ln">   422</span>	<span class="comment">// RawToken is like Token but does not verify that</span>
<a id="L423"></a><span class="ln">   423</span>	<span class="comment">// start and end elements match and does not translate</span>
<a id="L424"></a><span class="ln">   424</span>	<span class="comment">// name space prefixes to their corresponding URLs.</span>
<a id="L425"></a><span class="ln">   425</span>	func (d *Decoder) RawToken() (Token, error) {
<a id="L426"></a><span class="ln">   426</span>		if d.err != nil {
<a id="L427"></a><span class="ln">   427</span>			return nil, d.err
<a id="L428"></a><span class="ln">   428</span>		}
<a id="L429"></a><span class="ln">   429</span>		if d.needClose {
<a id="L430"></a><span class="ln">   430</span>			<span class="comment">// The last element we read was self-closing and</span>
<a id="L431"></a><span class="ln">   431</span>			<span class="comment">// we returned just the StartElement half.</span>
<a id="L432"></a><span class="ln">   432</span>			<span class="comment">// Return the EndElement half now.</span>
<a id="L433"></a><span class="ln">   433</span>			d.needClose = false
<a id="L434"></a><span class="ln">   434</span>			return EndElement{d.toClose}, nil
<a id="L435"></a><span class="ln">   435</span>		}
<a id="L436"></a><span class="ln">   436</span>	
<a id="L437"></a><span class="ln">   437</span>		b, ok := d.getc()
<a id="L438"></a><span class="ln">   438</span>		if !ok {
<a id="L439"></a><span class="ln">   439</span>			return nil, d.err
<a id="L440"></a><span class="ln">   440</span>		}
<a id="L441"></a><span class="ln">   441</span>	
<a id="L442"></a><span class="ln">   442</span>		if b != &#39;&lt;&#39; {
<a id="L443"></a><span class="ln">   443</span>			<span class="comment">// Text section.</span>
<a id="L444"></a><span class="ln">   444</span>			d.ungetc(b)
<a id="L445"></a><span class="ln">   445</span>			data := d.text(-1, false)
<a id="L446"></a><span class="ln">   446</span>			if data == nil {
<a id="L447"></a><span class="ln">   447</span>				return nil, d.err
<a id="L448"></a><span class="ln">   448</span>			}
<a id="L449"></a><span class="ln">   449</span>			return CharData(data), nil
<a id="L450"></a><span class="ln">   450</span>		}
<a id="L451"></a><span class="ln">   451</span>	
<a id="L452"></a><span class="ln">   452</span>		if b, ok = d.mustgetc(); !ok {
<a id="L453"></a><span class="ln">   453</span>			return nil, d.err
<a id="L454"></a><span class="ln">   454</span>		}
<a id="L455"></a><span class="ln">   455</span>		switch b {
<a id="L456"></a><span class="ln">   456</span>		case &#39;/&#39;:
<a id="L457"></a><span class="ln">   457</span>			<span class="comment">// &lt;/: End element</span>
<a id="L458"></a><span class="ln">   458</span>			var name Name
<a id="L459"></a><span class="ln">   459</span>			if name, ok = d.nsname(); !ok {
<a id="L460"></a><span class="ln">   460</span>				if d.err == nil {
<a id="L461"></a><span class="ln">   461</span>					d.err = d.syntaxError(&#34;expected element name after &lt;/&#34;)
<a id="L462"></a><span class="ln">   462</span>				}
<a id="L463"></a><span class="ln">   463</span>				return nil, d.err
<a id="L464"></a><span class="ln">   464</span>			}
<a id="L465"></a><span class="ln">   465</span>			d.space()
<a id="L466"></a><span class="ln">   466</span>			if b, ok = d.mustgetc(); !ok {
<a id="L467"></a><span class="ln">   467</span>				return nil, d.err
<a id="L468"></a><span class="ln">   468</span>			}
<a id="L469"></a><span class="ln">   469</span>			if b != &#39;&gt;&#39; {
<a id="L470"></a><span class="ln">   470</span>				d.err = d.syntaxError(&#34;invalid characters between &lt;/&#34; + name.Local + &#34; and &gt;&#34;)
<a id="L471"></a><span class="ln">   471</span>				return nil, d.err
<a id="L472"></a><span class="ln">   472</span>			}
<a id="L473"></a><span class="ln">   473</span>			return EndElement{name}, nil
<a id="L474"></a><span class="ln">   474</span>	
<a id="L475"></a><span class="ln">   475</span>		case &#39;?&#39;:
<a id="L476"></a><span class="ln">   476</span>			<span class="comment">// &lt;?: Processing instruction.</span>
<a id="L477"></a><span class="ln">   477</span>			<span class="comment">// TODO(rsc): Should parse the &lt;?xml declaration to make sure</span>
<a id="L478"></a><span class="ln">   478</span>			<span class="comment">// the version is 1.0 and the encoding is UTF-8.</span>
<a id="L479"></a><span class="ln">   479</span>			var target string
<a id="L480"></a><span class="ln">   480</span>			if target, ok = d.name(); !ok {
<a id="L481"></a><span class="ln">   481</span>				if d.err == nil {
<a id="L482"></a><span class="ln">   482</span>					d.err = d.syntaxError(&#34;expected target name after &lt;?&#34;)
<a id="L483"></a><span class="ln">   483</span>				}
<a id="L484"></a><span class="ln">   484</span>				return nil, d.err
<a id="L485"></a><span class="ln">   485</span>			}
<a id="L486"></a><span class="ln">   486</span>			d.space()
<a id="L487"></a><span class="ln">   487</span>			d.buf.Reset()
<a id="L488"></a><span class="ln">   488</span>			var b0 byte
<a id="L489"></a><span class="ln">   489</span>			for {
<a id="L490"></a><span class="ln">   490</span>				if b, ok = d.mustgetc(); !ok {
<a id="L491"></a><span class="ln">   491</span>					return nil, d.err
<a id="L492"></a><span class="ln">   492</span>				}
<a id="L493"></a><span class="ln">   493</span>				d.buf.WriteByte(b)
<a id="L494"></a><span class="ln">   494</span>				if b0 == &#39;?&#39; &amp;&amp; b == &#39;&gt;&#39; {
<a id="L495"></a><span class="ln">   495</span>					break
<a id="L496"></a><span class="ln">   496</span>				}
<a id="L497"></a><span class="ln">   497</span>				b0 = b
<a id="L498"></a><span class="ln">   498</span>			}
<a id="L499"></a><span class="ln">   499</span>			data := d.buf.Bytes()
<a id="L500"></a><span class="ln">   500</span>			data = data[0 : len(data)-2] <span class="comment">// chop ?&gt;</span>
<a id="L501"></a><span class="ln">   501</span>	
<a id="L502"></a><span class="ln">   502</span>			if target == &#34;xml&#34; {
<a id="L503"></a><span class="ln">   503</span>				enc := procInstEncoding(string(data))
<a id="L504"></a><span class="ln">   504</span>				if enc != &#34;&#34; &amp;&amp; enc != &#34;utf-8&#34; &amp;&amp; enc != &#34;UTF-8&#34; {
<a id="L505"></a><span class="ln">   505</span>					if d.CharsetReader == nil {
<a id="L506"></a><span class="ln">   506</span>						d.err = fmt.Errorf(&#34;xml: encoding %q declared but Decoder.CharsetReader is nil&#34;, enc)
<a id="L507"></a><span class="ln">   507</span>						return nil, d.err
<a id="L508"></a><span class="ln">   508</span>					}
<a id="L509"></a><span class="ln">   509</span>					newr, err := d.CharsetReader(enc, d.r.(io.Reader))
<a id="L510"></a><span class="ln">   510</span>					if err != nil {
<a id="L511"></a><span class="ln">   511</span>						d.err = fmt.Errorf(&#34;xml: opening charset %q: %v&#34;, enc, err)
<a id="L512"></a><span class="ln">   512</span>						return nil, d.err
<a id="L513"></a><span class="ln">   513</span>					}
<a id="L514"></a><span class="ln">   514</span>					if newr == nil {
<a id="L515"></a><span class="ln">   515</span>						panic(&#34;CharsetReader returned a nil Reader for charset &#34; + enc)
<a id="L516"></a><span class="ln">   516</span>					}
<a id="L517"></a><span class="ln">   517</span>					d.switchToReader(newr)
<a id="L518"></a><span class="ln">   518</span>				}
<a id="L519"></a><span class="ln">   519</span>			}
<a id="L520"></a><span class="ln">   520</span>			return ProcInst{target, data}, nil
<a id="L521"></a><span class="ln">   521</span>	
<a id="L522"></a><span class="ln">   522</span>		case &#39;!&#39;:
<a id="L523"></a><span class="ln">   523</span>			<span class="comment">// &lt;!: Maybe comment, maybe CDATA.</span>
<a id="L524"></a><span class="ln">   524</span>			if b, ok = d.mustgetc(); !ok {
<a id="L525"></a><span class="ln">   525</span>				return nil, d.err
<a id="L526"></a><span class="ln">   526</span>			}
<a id="L527"></a><span class="ln">   527</span>			switch b {
<a id="L528"></a><span class="ln">   528</span>			case &#39;-&#39;: <span class="comment">// &lt;!-</span>
<a id="L529"></a><span class="ln">   529</span>				<span class="comment">// Probably &lt;!-- for a comment.</span>
<a id="L530"></a><span class="ln">   530</span>				if b, ok = d.mustgetc(); !ok {
<a id="L531"></a><span class="ln">   531</span>					return nil, d.err
<a id="L532"></a><span class="ln">   532</span>				}
<a id="L533"></a><span class="ln">   533</span>				if b != &#39;-&#39; {
<a id="L534"></a><span class="ln">   534</span>					d.err = d.syntaxError(&#34;invalid sequence &lt;!- not part of &lt;!--&#34;)
<a id="L535"></a><span class="ln">   535</span>					return nil, d.err
<a id="L536"></a><span class="ln">   536</span>				}
<a id="L537"></a><span class="ln">   537</span>				<span class="comment">// Look for terminator.</span>
<a id="L538"></a><span class="ln">   538</span>				d.buf.Reset()
<a id="L539"></a><span class="ln">   539</span>				var b0, b1 byte
<a id="L540"></a><span class="ln">   540</span>				for {
<a id="L541"></a><span class="ln">   541</span>					if b, ok = d.mustgetc(); !ok {
<a id="L542"></a><span class="ln">   542</span>						return nil, d.err
<a id="L543"></a><span class="ln">   543</span>					}
<a id="L544"></a><span class="ln">   544</span>					d.buf.WriteByte(b)
<a id="L545"></a><span class="ln">   545</span>					if b0 == &#39;-&#39; &amp;&amp; b1 == &#39;-&#39; &amp;&amp; b == &#39;&gt;&#39; {
<a id="L546"></a><span class="ln">   546</span>						break
<a id="L547"></a><span class="ln">   547</span>					}
<a id="L548"></a><span class="ln">   548</span>					b0, b1 = b1, b
<a id="L549"></a><span class="ln">   549</span>				}
<a id="L550"></a><span class="ln">   550</span>				data := d.buf.Bytes()
<a id="L551"></a><span class="ln">   551</span>				data = data[0 : len(data)-3] <span class="comment">// chop --&gt;</span>
<a id="L552"></a><span class="ln">   552</span>				return Comment(data), nil
<a id="L553"></a><span class="ln">   553</span>	
<a id="L554"></a><span class="ln">   554</span>			case &#39;[&#39;: <span class="comment">// &lt;![</span>
<a id="L555"></a><span class="ln">   555</span>				<span class="comment">// Probably &lt;![CDATA[.</span>
<a id="L556"></a><span class="ln">   556</span>				for i := 0; i &lt; 6; i++ {
<a id="L557"></a><span class="ln">   557</span>					if b, ok = d.mustgetc(); !ok {
<a id="L558"></a><span class="ln">   558</span>						return nil, d.err
<a id="L559"></a><span class="ln">   559</span>					}
<a id="L560"></a><span class="ln">   560</span>					if b != &#34;CDATA[&#34;[i] {
<a id="L561"></a><span class="ln">   561</span>						d.err = d.syntaxError(&#34;invalid &lt;![ sequence&#34;)
<a id="L562"></a><span class="ln">   562</span>						return nil, d.err
<a id="L563"></a><span class="ln">   563</span>					}
<a id="L564"></a><span class="ln">   564</span>				}
<a id="L565"></a><span class="ln">   565</span>				<span class="comment">// Have &lt;![CDATA[.  Read text until ]]&gt;.</span>
<a id="L566"></a><span class="ln">   566</span>				data := d.text(-1, true)
<a id="L567"></a><span class="ln">   567</span>				if data == nil {
<a id="L568"></a><span class="ln">   568</span>					return nil, d.err
<a id="L569"></a><span class="ln">   569</span>				}
<a id="L570"></a><span class="ln">   570</span>				return CharData(data), nil
<a id="L571"></a><span class="ln">   571</span>			}
<a id="L572"></a><span class="ln">   572</span>	
<a id="L573"></a><span class="ln">   573</span>			<span class="comment">// Probably a directive: &lt;!DOCTYPE ...&gt;, &lt;!ENTITY ...&gt;, etc.</span>
<a id="L574"></a><span class="ln">   574</span>			<span class="comment">// We don&#39;t care, but accumulate for caller. Quoted angle</span>
<a id="L575"></a><span class="ln">   575</span>			<span class="comment">// brackets do not count for nesting.</span>
<a id="L576"></a><span class="ln">   576</span>			d.buf.Reset()
<a id="L577"></a><span class="ln">   577</span>			d.buf.WriteByte(b)
<a id="L578"></a><span class="ln">   578</span>			inquote := uint8(0)
<a id="L579"></a><span class="ln">   579</span>			depth := 0
<a id="L580"></a><span class="ln">   580</span>			for {
<a id="L581"></a><span class="ln">   581</span>				if b, ok = d.mustgetc(); !ok {
<a id="L582"></a><span class="ln">   582</span>					return nil, d.err
<a id="L583"></a><span class="ln">   583</span>				}
<a id="L584"></a><span class="ln">   584</span>				if inquote == 0 &amp;&amp; b == &#39;&gt;&#39; &amp;&amp; depth == 0 {
<a id="L585"></a><span class="ln">   585</span>					break
<a id="L586"></a><span class="ln">   586</span>				}
<a id="L587"></a><span class="ln">   587</span>				d.buf.WriteByte(b)
<a id="L588"></a><span class="ln">   588</span>				switch {
<a id="L589"></a><span class="ln">   589</span>				case b == inquote:
<a id="L590"></a><span class="ln">   590</span>					inquote = 0
<a id="L591"></a><span class="ln">   591</span>	
<a id="L592"></a><span class="ln">   592</span>				case inquote != 0:
<a id="L593"></a><span class="ln">   593</span>					<span class="comment">// in quotes, no special action</span>
<a id="L594"></a><span class="ln">   594</span>	
<a id="L595"></a><span class="ln">   595</span>				case b == &#39;\&#39;&#39; || b == &#39;&#34;&#39;:
<a id="L596"></a><span class="ln">   596</span>					inquote = b
<a id="L597"></a><span class="ln">   597</span>	
<a id="L598"></a><span class="ln">   598</span>				case b == &#39;&gt;&#39; &amp;&amp; inquote == 0:
<a id="L599"></a><span class="ln">   599</span>					depth--
<a id="L600"></a><span class="ln">   600</span>	
<a id="L601"></a><span class="ln">   601</span>				case b == &#39;&lt;&#39; &amp;&amp; inquote == 0:
<a id="L602"></a><span class="ln">   602</span>					depth++
<a id="L603"></a><span class="ln">   603</span>				}
<a id="L604"></a><span class="ln">   604</span>			}
<a id="L605"></a><span class="ln">   605</span>			return Directive(d.buf.Bytes()), nil
<a id="L606"></a><span class="ln">   606</span>		}
<a id="L607"></a><span class="ln">   607</span>	
<a id="L608"></a><span class="ln">   608</span>		<span class="comment">// Must be an open element like &lt;a href=&#34;foo&#34;&gt;</span>
<a id="L609"></a><span class="ln">   609</span>		d.ungetc(b)
<a id="L610"></a><span class="ln">   610</span>	
<a id="L611"></a><span class="ln">   611</span>		var (
<a id="L612"></a><span class="ln">   612</span>			name  Name
<a id="L613"></a><span class="ln">   613</span>			empty bool
<a id="L614"></a><span class="ln">   614</span>			attr  []Attr
<a id="L615"></a><span class="ln">   615</span>		)
<a id="L616"></a><span class="ln">   616</span>		if name, ok = d.nsname(); !ok {
<a id="L617"></a><span class="ln">   617</span>			if d.err == nil {
<a id="L618"></a><span class="ln">   618</span>				d.err = d.syntaxError(&#34;expected element name after &lt;&#34;)
<a id="L619"></a><span class="ln">   619</span>			}
<a id="L620"></a><span class="ln">   620</span>			return nil, d.err
<a id="L621"></a><span class="ln">   621</span>		}
<a id="L622"></a><span class="ln">   622</span>	
<a id="L623"></a><span class="ln">   623</span>		attr = make([]Attr, 0, 4)
<a id="L624"></a><span class="ln">   624</span>		for {
<a id="L625"></a><span class="ln">   625</span>			d.space()
<a id="L626"></a><span class="ln">   626</span>			if b, ok = d.mustgetc(); !ok {
<a id="L627"></a><span class="ln">   627</span>				return nil, d.err
<a id="L628"></a><span class="ln">   628</span>			}
<a id="L629"></a><span class="ln">   629</span>			if b == &#39;/&#39; {
<a id="L630"></a><span class="ln">   630</span>				empty = true
<a id="L631"></a><span class="ln">   631</span>				if b, ok = d.mustgetc(); !ok {
<a id="L632"></a><span class="ln">   632</span>					return nil, d.err
<a id="L633"></a><span class="ln">   633</span>				}
<a id="L634"></a><span class="ln">   634</span>				if b != &#39;&gt;&#39; {
<a id="L635"></a><span class="ln">   635</span>					d.err = d.syntaxError(&#34;expected /&gt; in element&#34;)
<a id="L636"></a><span class="ln">   636</span>					return nil, d.err
<a id="L637"></a><span class="ln">   637</span>				}
<a id="L638"></a><span class="ln">   638</span>				break
<a id="L639"></a><span class="ln">   639</span>			}
<a id="L640"></a><span class="ln">   640</span>			if b == &#39;&gt;&#39; {
<a id="L641"></a><span class="ln">   641</span>				break
<a id="L642"></a><span class="ln">   642</span>			}
<a id="L643"></a><span class="ln">   643</span>			d.ungetc(b)
<a id="L644"></a><span class="ln">   644</span>	
<a id="L645"></a><span class="ln">   645</span>			n := len(attr)
<a id="L646"></a><span class="ln">   646</span>			if n &gt;= cap(attr) {
<a id="L647"></a><span class="ln">   647</span>				nattr := make([]Attr, n, 2*cap(attr))
<a id="L648"></a><span class="ln">   648</span>				copy(nattr, attr)
<a id="L649"></a><span class="ln">   649</span>				attr = nattr
<a id="L650"></a><span class="ln">   650</span>			}
<a id="L651"></a><span class="ln">   651</span>			attr = attr[0 : n+1]
<a id="L652"></a><span class="ln">   652</span>			a := &amp;attr[n]
<a id="L653"></a><span class="ln">   653</span>			if a.Name, ok = d.nsname(); !ok {
<a id="L654"></a><span class="ln">   654</span>				if d.err == nil {
<a id="L655"></a><span class="ln">   655</span>					d.err = d.syntaxError(&#34;expected attribute name in element&#34;)
<a id="L656"></a><span class="ln">   656</span>				}
<a id="L657"></a><span class="ln">   657</span>				return nil, d.err
<a id="L658"></a><span class="ln">   658</span>			}
<a id="L659"></a><span class="ln">   659</span>			d.space()
<a id="L660"></a><span class="ln">   660</span>			if b, ok = d.mustgetc(); !ok {
<a id="L661"></a><span class="ln">   661</span>				return nil, d.err
<a id="L662"></a><span class="ln">   662</span>			}
<a id="L663"></a><span class="ln">   663</span>			if b != &#39;=&#39; {
<a id="L664"></a><span class="ln">   664</span>				if d.Strict {
<a id="L665"></a><span class="ln">   665</span>					d.err = d.syntaxError(&#34;attribute name without = in element&#34;)
<a id="L666"></a><span class="ln">   666</span>					return nil, d.err
<a id="L667"></a><span class="ln">   667</span>				} else {
<a id="L668"></a><span class="ln">   668</span>					d.ungetc(b)
<a id="L669"></a><span class="ln">   669</span>					a.Value = a.Name.Local
<a id="L670"></a><span class="ln">   670</span>				}
<a id="L671"></a><span class="ln">   671</span>			} else {
<a id="L672"></a><span class="ln">   672</span>				d.space()
<a id="L673"></a><span class="ln">   673</span>				data := d.attrval()
<a id="L674"></a><span class="ln">   674</span>				if data == nil {
<a id="L675"></a><span class="ln">   675</span>					return nil, d.err
<a id="L676"></a><span class="ln">   676</span>				}
<a id="L677"></a><span class="ln">   677</span>				a.Value = string(data)
<a id="L678"></a><span class="ln">   678</span>			}
<a id="L679"></a><span class="ln">   679</span>		}
<a id="L680"></a><span class="ln">   680</span>		if empty {
<a id="L681"></a><span class="ln">   681</span>			d.needClose = true
<a id="L682"></a><span class="ln">   682</span>			d.toClose = name
<a id="L683"></a><span class="ln">   683</span>		}
<a id="L684"></a><span class="ln">   684</span>		return StartElement{name, attr}, nil
<a id="L685"></a><span class="ln">   685</span>	}
<a id="L686"></a><span class="ln">   686</span>	
<a id="L687"></a><span class="ln">   687</span>	func (d *Decoder) attrval() []byte {
<a id="L688"></a><span class="ln">   688</span>		b, ok := d.mustgetc()
<a id="L689"></a><span class="ln">   689</span>		if !ok {
<a id="L690"></a><span class="ln">   690</span>			return nil
<a id="L691"></a><span class="ln">   691</span>		}
<a id="L692"></a><span class="ln">   692</span>		<span class="comment">// Handle quoted attribute values</span>
<a id="L693"></a><span class="ln">   693</span>		if b == &#39;&#34;&#39; || b == &#39;\&#39;&#39; {
<a id="L694"></a><span class="ln">   694</span>			return d.text(int(b), false)
<a id="L695"></a><span class="ln">   695</span>		}
<a id="L696"></a><span class="ln">   696</span>		<span class="comment">// Handle unquoted attribute values for strict parsers</span>
<a id="L697"></a><span class="ln">   697</span>		if d.Strict {
<a id="L698"></a><span class="ln">   698</span>			d.err = d.syntaxError(&#34;unquoted or missing attribute value in element&#34;)
<a id="L699"></a><span class="ln">   699</span>			return nil
<a id="L700"></a><span class="ln">   700</span>		}
<a id="L701"></a><span class="ln">   701</span>		<span class="comment">// Handle unquoted attribute values for unstrict parsers</span>
<a id="L702"></a><span class="ln">   702</span>		d.ungetc(b)
<a id="L703"></a><span class="ln">   703</span>		d.buf.Reset()
<a id="L704"></a><span class="ln">   704</span>		for {
<a id="L705"></a><span class="ln">   705</span>			b, ok = d.mustgetc()
<a id="L706"></a><span class="ln">   706</span>			if !ok {
<a id="L707"></a><span class="ln">   707</span>				return nil
<a id="L708"></a><span class="ln">   708</span>			}
<a id="L709"></a><span class="ln">   709</span>			<span class="comment">// http://www.w3.org/TR/REC-html40/intro/sgmltut.html#h-3.2.2</span>
<a id="L710"></a><span class="ln">   710</span>			if &#39;a&#39; &lt;= b &amp;&amp; b &lt;= &#39;z&#39; || &#39;A&#39; &lt;= b &amp;&amp; b &lt;= &#39;Z&#39; ||
<a id="L711"></a><span class="ln">   711</span>				&#39;0&#39; &lt;= b &amp;&amp; b &lt;= &#39;9&#39; || b == &#39;_&#39; || b == &#39;:&#39; || b == &#39;-&#39; {
<a id="L712"></a><span class="ln">   712</span>				d.buf.WriteByte(b)
<a id="L713"></a><span class="ln">   713</span>			} else {
<a id="L714"></a><span class="ln">   714</span>				d.ungetc(b)
<a id="L715"></a><span class="ln">   715</span>				break
<a id="L716"></a><span class="ln">   716</span>			}
<a id="L717"></a><span class="ln">   717</span>		}
<a id="L718"></a><span class="ln">   718</span>		return d.buf.Bytes()
<a id="L719"></a><span class="ln">   719</span>	}
<a id="L720"></a><span class="ln">   720</span>	
<a id="L721"></a><span class="ln">   721</span>	<span class="comment">// Skip spaces if any</span>
<a id="L722"></a><span class="ln">   722</span>	func (d *Decoder) space() {
<a id="L723"></a><span class="ln">   723</span>		for {
<a id="L724"></a><span class="ln">   724</span>			b, ok := d.getc()
<a id="L725"></a><span class="ln">   725</span>			if !ok {
<a id="L726"></a><span class="ln">   726</span>				return
<a id="L727"></a><span class="ln">   727</span>			}
<a id="L728"></a><span class="ln">   728</span>			switch b {
<a id="L729"></a><span class="ln">   729</span>			case &#39; &#39;, &#39;\r&#39;, &#39;\n&#39;, &#39;\t&#39;:
<a id="L730"></a><span class="ln">   730</span>			default:
<a id="L731"></a><span class="ln">   731</span>				d.ungetc(b)
<a id="L732"></a><span class="ln">   732</span>				return
<a id="L733"></a><span class="ln">   733</span>			}
<a id="L734"></a><span class="ln">   734</span>		}
<a id="L735"></a><span class="ln">   735</span>	}
<a id="L736"></a><span class="ln">   736</span>	
<a id="L737"></a><span class="ln">   737</span>	<span class="comment">// Read a single byte.</span>
<a id="L738"></a><span class="ln">   738</span>	<span class="comment">// If there is no byte to read, return ok==false</span>
<a id="L739"></a><span class="ln">   739</span>	<span class="comment">// and leave the error in d.err.</span>
<a id="L740"></a><span class="ln">   740</span>	<span class="comment">// Maintain line number.</span>
<a id="L741"></a><span class="ln">   741</span>	func (d *Decoder) getc() (b byte, ok bool) {
<a id="L742"></a><span class="ln">   742</span>		if d.err != nil {
<a id="L743"></a><span class="ln">   743</span>			return 0, false
<a id="L744"></a><span class="ln">   744</span>		}
<a id="L745"></a><span class="ln">   745</span>		if d.nextByte &gt;= 0 {
<a id="L746"></a><span class="ln">   746</span>			b = byte(d.nextByte)
<a id="L747"></a><span class="ln">   747</span>			d.nextByte = -1
<a id="L748"></a><span class="ln">   748</span>		} else {
<a id="L749"></a><span class="ln">   749</span>			b, d.err = d.r.ReadByte()
<a id="L750"></a><span class="ln">   750</span>			if d.err != nil {
<a id="L751"></a><span class="ln">   751</span>				return 0, false
<a id="L752"></a><span class="ln">   752</span>			}
<a id="L753"></a><span class="ln">   753</span>			if d.saved != nil {
<a id="L754"></a><span class="ln">   754</span>				d.saved.WriteByte(b)
<a id="L755"></a><span class="ln">   755</span>			}
<a id="L756"></a><span class="ln">   756</span>		}
<a id="L757"></a><span class="ln">   757</span>		if b == &#39;\n&#39; {
<a id="L758"></a><span class="ln">   758</span>			d.line++
<a id="L759"></a><span class="ln">   759</span>		}
<a id="L760"></a><span class="ln">   760</span>		return b, true
<a id="L761"></a><span class="ln">   761</span>	}
<a id="L762"></a><span class="ln">   762</span>	
<a id="L763"></a><span class="ln">   763</span>	<span class="comment">// Return saved offset.</span>
<a id="L764"></a><span class="ln">   764</span>	<span class="comment">// If we did ungetc (nextByte &gt;= 0), have to back up one.</span>
<a id="L765"></a><span class="ln">   765</span>	func (d *Decoder) savedOffset() int {
<a id="L766"></a><span class="ln">   766</span>		n := d.saved.Len()
<a id="L767"></a><span class="ln">   767</span>		if d.nextByte &gt;= 0 {
<a id="L768"></a><span class="ln">   768</span>			n--
<a id="L769"></a><span class="ln">   769</span>		}
<a id="L770"></a><span class="ln">   770</span>		return n
<a id="L771"></a><span class="ln">   771</span>	}
<a id="L772"></a><span class="ln">   772</span>	
<a id="L773"></a><span class="ln">   773</span>	<span class="comment">// Must read a single byte.</span>
<a id="L774"></a><span class="ln">   774</span>	<span class="comment">// If there is no byte to read,</span>
<a id="L775"></a><span class="ln">   775</span>	<span class="comment">// set d.err to SyntaxError(&#34;unexpected EOF&#34;)</span>
<a id="L776"></a><span class="ln">   776</span>	<span class="comment">// and return ok==false</span>
<a id="L777"></a><span class="ln">   777</span>	func (d *Decoder) mustgetc() (b byte, ok bool) {
<a id="L778"></a><span class="ln">   778</span>		if b, ok = d.getc(); !ok {
<a id="L779"></a><span class="ln">   779</span>			if d.err == io.EOF {
<a id="L780"></a><span class="ln">   780</span>				d.err = d.syntaxError(&#34;unexpected EOF&#34;)
<a id="L781"></a><span class="ln">   781</span>			}
<a id="L782"></a><span class="ln">   782</span>		}
<a id="L783"></a><span class="ln">   783</span>		return
<a id="L784"></a><span class="ln">   784</span>	}
<a id="L785"></a><span class="ln">   785</span>	
<a id="L786"></a><span class="ln">   786</span>	<span class="comment">// Unread a single byte.</span>
<a id="L787"></a><span class="ln">   787</span>	func (d *Decoder) ungetc(b byte) {
<a id="L788"></a><span class="ln">   788</span>		if b == &#39;\n&#39; {
<a id="L789"></a><span class="ln">   789</span>			d.line--
<a id="L790"></a><span class="ln">   790</span>		}
<a id="L791"></a><span class="ln">   791</span>		d.nextByte = int(b)
<a id="L792"></a><span class="ln">   792</span>	}
<a id="L793"></a><span class="ln">   793</span>	
<a id="L794"></a><span class="ln">   794</span>	var entity = map[string]int{
<a id="L795"></a><span class="ln">   795</span>		&#34;lt&#34;:   &#39;&lt;&#39;,
<a id="L796"></a><span class="ln">   796</span>		&#34;gt&#34;:   &#39;&gt;&#39;,
<a id="L797"></a><span class="ln">   797</span>		&#34;amp&#34;:  &#39;&amp;&#39;,
<a id="L798"></a><span class="ln">   798</span>		&#34;apos&#34;: &#39;\&#39;&#39;,
<a id="L799"></a><span class="ln">   799</span>		&#34;quot&#34;: &#39;&#34;&#39;,
<a id="L800"></a><span class="ln">   800</span>	}
<a id="L801"></a><span class="ln">   801</span>	
<a id="L802"></a><span class="ln">   802</span>	<span class="comment">// Read plain text section (XML calls it character data).</span>
<a id="L803"></a><span class="ln">   803</span>	<span class="comment">// If quote &gt;= 0, we are in a quoted string and need to find the matching quote.</span>
<a id="L804"></a><span class="ln">   804</span>	<span class="comment">// If cdata == true, we are in a &lt;![CDATA[ section and need to find ]]&gt;.</span>
<a id="L805"></a><span class="ln">   805</span>	<span class="comment">// On failure return nil and leave the error in d.err.</span>
<a id="L806"></a><span class="ln">   806</span>	func (d *Decoder) text(quote int, cdata bool) []byte {
<a id="L807"></a><span class="ln">   807</span>		var b0, b1 byte
<a id="L808"></a><span class="ln">   808</span>		var trunc int
<a id="L809"></a><span class="ln">   809</span>		d.buf.Reset()
<a id="L810"></a><span class="ln">   810</span>	Input:
<a id="L811"></a><span class="ln">   811</span>		for {
<a id="L812"></a><span class="ln">   812</span>			b, ok := d.getc()
<a id="L813"></a><span class="ln">   813</span>			if !ok {
<a id="L814"></a><span class="ln">   814</span>				if cdata {
<a id="L815"></a><span class="ln">   815</span>					if d.err == io.EOF {
<a id="L816"></a><span class="ln">   816</span>						d.err = d.syntaxError(&#34;unexpected EOF in CDATA section&#34;)
<a id="L817"></a><span class="ln">   817</span>					}
<a id="L818"></a><span class="ln">   818</span>					return nil
<a id="L819"></a><span class="ln">   819</span>				}
<a id="L820"></a><span class="ln">   820</span>				break Input
<a id="L821"></a><span class="ln">   821</span>			}
<a id="L822"></a><span class="ln">   822</span>	
<a id="L823"></a><span class="ln">   823</span>			<span class="comment">// &lt;![CDATA[ section ends with ]]&gt;.</span>
<a id="L824"></a><span class="ln">   824</span>			<span class="comment">// It is an error for ]]&gt; to appear in ordinary text.</span>
<a id="L825"></a><span class="ln">   825</span>			if b0 == &#39;]&#39; &amp;&amp; b1 == &#39;]&#39; &amp;&amp; b == &#39;&gt;&#39; {
<a id="L826"></a><span class="ln">   826</span>				if cdata {
<a id="L827"></a><span class="ln">   827</span>					trunc = 2
<a id="L828"></a><span class="ln">   828</span>					break Input
<a id="L829"></a><span class="ln">   829</span>				}
<a id="L830"></a><span class="ln">   830</span>				d.err = d.syntaxError(&#34;unescaped ]]&gt; not in CDATA section&#34;)
<a id="L831"></a><span class="ln">   831</span>				return nil
<a id="L832"></a><span class="ln">   832</span>			}
<a id="L833"></a><span class="ln">   833</span>	
<a id="L834"></a><span class="ln">   834</span>			<span class="comment">// Stop reading text if we see a &lt;.</span>
<a id="L835"></a><span class="ln">   835</span>			if b == &#39;&lt;&#39; &amp;&amp; !cdata {
<a id="L836"></a><span class="ln">   836</span>				if quote &gt;= 0 {
<a id="L837"></a><span class="ln">   837</span>					d.err = d.syntaxError(&#34;unescaped &lt; inside quoted string&#34;)
<a id="L838"></a><span class="ln">   838</span>					return nil
<a id="L839"></a><span class="ln">   839</span>				}
<a id="L840"></a><span class="ln">   840</span>				d.ungetc(&#39;&lt;&#39;)
<a id="L841"></a><span class="ln">   841</span>				break Input
<a id="L842"></a><span class="ln">   842</span>			}
<a id="L843"></a><span class="ln">   843</span>			if quote &gt;= 0 &amp;&amp; b == byte(quote) {
<a id="L844"></a><span class="ln">   844</span>				break Input
<a id="L845"></a><span class="ln">   845</span>			}
<a id="L846"></a><span class="ln">   846</span>			if b == &#39;&amp;&#39; &amp;&amp; !cdata {
<a id="L847"></a><span class="ln">   847</span>				<span class="comment">// Read escaped character expression up to semicolon.</span>
<a id="L848"></a><span class="ln">   848</span>				<span class="comment">// XML in all its glory allows a document to define and use</span>
<a id="L849"></a><span class="ln">   849</span>				<span class="comment">// its own character names with &lt;!ENTITY ...&gt; directives.</span>
<a id="L850"></a><span class="ln">   850</span>				<span class="comment">// Parsers are required to recognize lt, gt, amp, apos, and quot</span>
<a id="L851"></a><span class="ln">   851</span>				<span class="comment">// even if they have not been declared.  That&#39;s all we allow.</span>
<a id="L852"></a><span class="ln">   852</span>				var i int
<a id="L853"></a><span class="ln">   853</span>				for i = 0; i &lt; len(d.tmp); i++ {
<a id="L854"></a><span class="ln">   854</span>					var ok bool
<a id="L855"></a><span class="ln">   855</span>					d.tmp[i], ok = d.getc()
<a id="L856"></a><span class="ln">   856</span>					if !ok {
<a id="L857"></a><span class="ln">   857</span>						if d.err == io.EOF {
<a id="L858"></a><span class="ln">   858</span>							d.err = d.syntaxError(&#34;unexpected EOF&#34;)
<a id="L859"></a><span class="ln">   859</span>						}
<a id="L860"></a><span class="ln">   860</span>						return nil
<a id="L861"></a><span class="ln">   861</span>					}
<a id="L862"></a><span class="ln">   862</span>					c := d.tmp[i]
<a id="L863"></a><span class="ln">   863</span>					if c == &#39;;&#39; {
<a id="L864"></a><span class="ln">   864</span>						break
<a id="L865"></a><span class="ln">   865</span>					}
<a id="L866"></a><span class="ln">   866</span>					if &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39; ||
<a id="L867"></a><span class="ln">   867</span>						&#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39; ||
<a id="L868"></a><span class="ln">   868</span>						&#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; ||
<a id="L869"></a><span class="ln">   869</span>						c == &#39;_&#39; || c == &#39;#&#39; {
<a id="L870"></a><span class="ln">   870</span>						continue
<a id="L871"></a><span class="ln">   871</span>					}
<a id="L872"></a><span class="ln">   872</span>					d.ungetc(c)
<a id="L873"></a><span class="ln">   873</span>					break
<a id="L874"></a><span class="ln">   874</span>				}
<a id="L875"></a><span class="ln">   875</span>				s := string(d.tmp[0:i])
<a id="L876"></a><span class="ln">   876</span>				if i &gt;= len(d.tmp) {
<a id="L877"></a><span class="ln">   877</span>					if !d.Strict {
<a id="L878"></a><span class="ln">   878</span>						b0, b1 = 0, 0
<a id="L879"></a><span class="ln">   879</span>						d.buf.WriteByte(&#39;&amp;&#39;)
<a id="L880"></a><span class="ln">   880</span>						d.buf.Write(d.tmp[0:i])
<a id="L881"></a><span class="ln">   881</span>						continue Input
<a id="L882"></a><span class="ln">   882</span>					}
<a id="L883"></a><span class="ln">   883</span>					d.err = d.syntaxError(&#34;character entity expression &amp;&#34; + s + &#34;... too long&#34;)
<a id="L884"></a><span class="ln">   884</span>					return nil
<a id="L885"></a><span class="ln">   885</span>				}
<a id="L886"></a><span class="ln">   886</span>				var haveText bool
<a id="L887"></a><span class="ln">   887</span>				var text string
<a id="L888"></a><span class="ln">   888</span>				if i &gt;= 2 &amp;&amp; s[0] == &#39;#&#39; {
<a id="L889"></a><span class="ln">   889</span>					var n uint64
<a id="L890"></a><span class="ln">   890</span>					var err error
<a id="L891"></a><span class="ln">   891</span>					if i &gt;= 3 &amp;&amp; s[1] == &#39;x&#39; {
<a id="L892"></a><span class="ln">   892</span>						n, err = strconv.ParseUint(s[2:], 16, 64)
<a id="L893"></a><span class="ln">   893</span>					} else {
<a id="L894"></a><span class="ln">   894</span>						n, err = strconv.ParseUint(s[1:], 10, 64)
<a id="L895"></a><span class="ln">   895</span>					}
<a id="L896"></a><span class="ln">   896</span>					if err == nil &amp;&amp; n &lt;= unicode.MaxRune {
<a id="L897"></a><span class="ln">   897</span>						text = string(n)
<a id="L898"></a><span class="ln">   898</span>						haveText = true
<a id="L899"></a><span class="ln">   899</span>					}
<a id="L900"></a><span class="ln">   900</span>				} else {
<a id="L901"></a><span class="ln">   901</span>					if r, ok := entity[s]; ok {
<a id="L902"></a><span class="ln">   902</span>						text = string(r)
<a id="L903"></a><span class="ln">   903</span>						haveText = true
<a id="L904"></a><span class="ln">   904</span>					} else if d.Entity != nil {
<a id="L905"></a><span class="ln">   905</span>						text, haveText = d.Entity[s]
<a id="L906"></a><span class="ln">   906</span>					}
<a id="L907"></a><span class="ln">   907</span>				}
<a id="L908"></a><span class="ln">   908</span>				if !haveText {
<a id="L909"></a><span class="ln">   909</span>					if !d.Strict {
<a id="L910"></a><span class="ln">   910</span>						b0, b1 = 0, 0
<a id="L911"></a><span class="ln">   911</span>						d.buf.WriteByte(&#39;&amp;&#39;)
<a id="L912"></a><span class="ln">   912</span>						d.buf.Write(d.tmp[0:i])
<a id="L913"></a><span class="ln">   913</span>						continue Input
<a id="L914"></a><span class="ln">   914</span>					}
<a id="L915"></a><span class="ln">   915</span>					d.err = d.syntaxError(&#34;invalid character entity &amp;&#34; + s + &#34;;&#34;)
<a id="L916"></a><span class="ln">   916</span>					return nil
<a id="L917"></a><span class="ln">   917</span>				}
<a id="L918"></a><span class="ln">   918</span>				d.buf.Write([]byte(text))
<a id="L919"></a><span class="ln">   919</span>				b0, b1 = 0, 0
<a id="L920"></a><span class="ln">   920</span>				continue Input
<a id="L921"></a><span class="ln">   921</span>			}
<a id="L922"></a><span class="ln">   922</span>			d.buf.WriteByte(b)
<a id="L923"></a><span class="ln">   923</span>			b0, b1 = b1, b
<a id="L924"></a><span class="ln">   924</span>		}
<a id="L925"></a><span class="ln">   925</span>		data := d.buf.Bytes()
<a id="L926"></a><span class="ln">   926</span>		data = data[0 : len(data)-trunc]
<a id="L927"></a><span class="ln">   927</span>	
<a id="L928"></a><span class="ln">   928</span>		<span class="comment">// Inspect each rune for being a disallowed character.</span>
<a id="L929"></a><span class="ln">   929</span>		buf := data
<a id="L930"></a><span class="ln">   930</span>		for len(buf) &gt; 0 {
<a id="L931"></a><span class="ln">   931</span>			r, size := utf8.DecodeRune(buf)
<a id="L932"></a><span class="ln">   932</span>			if r == utf8.RuneError &amp;&amp; size == 1 {
<a id="L933"></a><span class="ln">   933</span>				d.err = d.syntaxError(&#34;invalid UTF-8&#34;)
<a id="L934"></a><span class="ln">   934</span>				return nil
<a id="L935"></a><span class="ln">   935</span>			}
<a id="L936"></a><span class="ln">   936</span>			buf = buf[size:]
<a id="L937"></a><span class="ln">   937</span>			if !isInCharacterRange(r) {
<a id="L938"></a><span class="ln">   938</span>				d.err = d.syntaxError(fmt.Sprintf(&#34;illegal character code %U&#34;, r))
<a id="L939"></a><span class="ln">   939</span>				return nil
<a id="L940"></a><span class="ln">   940</span>			}
<a id="L941"></a><span class="ln">   941</span>		}
<a id="L942"></a><span class="ln">   942</span>	
<a id="L943"></a><span class="ln">   943</span>		<span class="comment">// Must rewrite \r and \r\n into \n.</span>
<a id="L944"></a><span class="ln">   944</span>		w := 0
<a id="L945"></a><span class="ln">   945</span>		for r := 0; r &lt; len(data); r++ {
<a id="L946"></a><span class="ln">   946</span>			b := data[r]
<a id="L947"></a><span class="ln">   947</span>			if b == &#39;\r&#39; {
<a id="L948"></a><span class="ln">   948</span>				if r+1 &lt; len(data) &amp;&amp; data[r+1] == &#39;\n&#39; {
<a id="L949"></a><span class="ln">   949</span>					continue
<a id="L950"></a><span class="ln">   950</span>				}
<a id="L951"></a><span class="ln">   951</span>				b = &#39;\n&#39;
<a id="L952"></a><span class="ln">   952</span>			}
<a id="L953"></a><span class="ln">   953</span>			data[w] = b
<a id="L954"></a><span class="ln">   954</span>			w++
<a id="L955"></a><span class="ln">   955</span>		}
<a id="L956"></a><span class="ln">   956</span>		return data[0:w]
<a id="L957"></a><span class="ln">   957</span>	}
<a id="L958"></a><span class="ln">   958</span>	
<a id="L959"></a><span class="ln">   959</span>	<span class="comment">// Decide whether the given rune is in the XML Character Range, per</span>
<a id="L960"></a><span class="ln">   960</span>	<span class="comment">// the Char production of http://www.xml.com/axml/testaxml.htm,</span>
<a id="L961"></a><span class="ln">   961</span>	<span class="comment">// Section 2.2 Characters.</span>
<a id="L962"></a><span class="ln">   962</span>	func isInCharacterRange(r rune) (inrange bool) {
<a id="L963"></a><span class="ln">   963</span>		return r == 0x09 ||
<a id="L964"></a><span class="ln">   964</span>			r == 0x0A ||
<a id="L965"></a><span class="ln">   965</span>			r == 0x0D ||
<a id="L966"></a><span class="ln">   966</span>			r &gt;= 0x20 &amp;&amp; r &lt;= 0xDF77 ||
<a id="L967"></a><span class="ln">   967</span>			r &gt;= 0xE000 &amp;&amp; r &lt;= 0xFFFD ||
<a id="L968"></a><span class="ln">   968</span>			r &gt;= 0x10000 &amp;&amp; r &lt;= 0x10FFFF
<a id="L969"></a><span class="ln">   969</span>	}
<a id="L970"></a><span class="ln">   970</span>	
<a id="L971"></a><span class="ln">   971</span>	<span class="comment">// Get name space name: name with a : stuck in the middle.</span>
<a id="L972"></a><span class="ln">   972</span>	<span class="comment">// The part before the : is the name space identifier.</span>
<a id="L973"></a><span class="ln">   973</span>	func (d *Decoder) nsname() (name Name, ok bool) {
<a id="L974"></a><span class="ln">   974</span>		s, ok := d.name()
<a id="L975"></a><span class="ln">   975</span>		if !ok {
<a id="L976"></a><span class="ln">   976</span>			return
<a id="L977"></a><span class="ln">   977</span>		}
<a id="L978"></a><span class="ln">   978</span>		i := strings.Index(s, &#34;:&#34;)
<a id="L979"></a><span class="ln">   979</span>		if i &lt; 0 {
<a id="L980"></a><span class="ln">   980</span>			name.Local = s
<a id="L981"></a><span class="ln">   981</span>		} else {
<a id="L982"></a><span class="ln">   982</span>			name.Space = s[0:i]
<a id="L983"></a><span class="ln">   983</span>			name.Local = s[i+1:]
<a id="L984"></a><span class="ln">   984</span>		}
<a id="L985"></a><span class="ln">   985</span>		return name, true
<a id="L986"></a><span class="ln">   986</span>	}
<a id="L987"></a><span class="ln">   987</span>	
<a id="L988"></a><span class="ln">   988</span>	<span class="comment">// Get name: /first(first|second)*/</span>
<a id="L989"></a><span class="ln">   989</span>	<span class="comment">// Do not set d.err if the name is missing (unless unexpected EOF is received):</span>
<a id="L990"></a><span class="ln">   990</span>	<span class="comment">// let the caller provide better context.</span>
<a id="L991"></a><span class="ln">   991</span>	func (d *Decoder) name() (s string, ok bool) {
<a id="L992"></a><span class="ln">   992</span>		var b byte
<a id="L993"></a><span class="ln">   993</span>		if b, ok = d.mustgetc(); !ok {
<a id="L994"></a><span class="ln">   994</span>			return
<a id="L995"></a><span class="ln">   995</span>		}
<a id="L996"></a><span class="ln">   996</span>	
<a id="L997"></a><span class="ln">   997</span>		<span class="comment">// As a first approximation, we gather the bytes [A-Za-z_:.-\x80-\xFF]*</span>
<a id="L998"></a><span class="ln">   998</span>		if b &lt; utf8.RuneSelf &amp;&amp; !isNameByte(b) {
<a id="L999"></a><span class="ln">   999</span>			d.ungetc(b)
<a id="L1000"></a><span class="ln">  1000</span>			return &#34;&#34;, false
<a id="L1001"></a><span class="ln">  1001</span>		}
<a id="L1002"></a><span class="ln">  1002</span>		d.buf.Reset()
<a id="L1003"></a><span class="ln">  1003</span>		d.buf.WriteByte(b)
<a id="L1004"></a><span class="ln">  1004</span>		for {
<a id="L1005"></a><span class="ln">  1005</span>			if b, ok = d.mustgetc(); !ok {
<a id="L1006"></a><span class="ln">  1006</span>				return
<a id="L1007"></a><span class="ln">  1007</span>			}
<a id="L1008"></a><span class="ln">  1008</span>			if b &lt; utf8.RuneSelf &amp;&amp; !isNameByte(b) {
<a id="L1009"></a><span class="ln">  1009</span>				d.ungetc(b)
<a id="L1010"></a><span class="ln">  1010</span>				break
<a id="L1011"></a><span class="ln">  1011</span>			}
<a id="L1012"></a><span class="ln">  1012</span>			d.buf.WriteByte(b)
<a id="L1013"></a><span class="ln">  1013</span>		}
<a id="L1014"></a><span class="ln">  1014</span>	
<a id="L1015"></a><span class="ln">  1015</span>		<span class="comment">// Then we check the characters.</span>
<a id="L1016"></a><span class="ln">  1016</span>		s = d.buf.String()
<a id="L1017"></a><span class="ln">  1017</span>		for i, c := range s {
<a id="L1018"></a><span class="ln">  1018</span>			if !unicode.Is(first, c) &amp;&amp; (i == 0 || !unicode.Is(second, c)) {
<a id="L1019"></a><span class="ln">  1019</span>				d.err = d.syntaxError(&#34;invalid XML name: &#34; + s)
<a id="L1020"></a><span class="ln">  1020</span>				return &#34;&#34;, false
<a id="L1021"></a><span class="ln">  1021</span>			}
<a id="L1022"></a><span class="ln">  1022</span>		}
<a id="L1023"></a><span class="ln">  1023</span>		return s, true
<a id="L1024"></a><span class="ln">  1024</span>	}
<a id="L1025"></a><span class="ln">  1025</span>	
<a id="L1026"></a><span class="ln">  1026</span>	func isNameByte(c byte) bool {
<a id="L1027"></a><span class="ln">  1027</span>		return &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39; ||
<a id="L1028"></a><span class="ln">  1028</span>			&#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39; ||
<a id="L1029"></a><span class="ln">  1029</span>			&#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; ||
<a id="L1030"></a><span class="ln">  1030</span>			c == &#39;_&#39; || c == &#39;:&#39; || c == &#39;.&#39; || c == &#39;-&#39;
<a id="L1031"></a><span class="ln">  1031</span>	}
<a id="L1032"></a><span class="ln">  1032</span>	
<a id="L1033"></a><span class="ln">  1033</span>	<span class="comment">// These tables were generated by cut and paste from Appendix B of</span>
<a id="L1034"></a><span class="ln">  1034</span>	<span class="comment">// the XML spec at http://www.xml.com/axml/testaxml.htm</span>
<a id="L1035"></a><span class="ln">  1035</span>	<span class="comment">// and then reformatting.  First corresponds to (Letter | &#39;_&#39; | &#39;:&#39;)</span>
<a id="L1036"></a><span class="ln">  1036</span>	<span class="comment">// and second corresponds to NameChar.</span>
<a id="L1037"></a><span class="ln">  1037</span>	
<a id="L1038"></a><span class="ln">  1038</span>	var first = &amp;unicode.RangeTable{
<a id="L1039"></a><span class="ln">  1039</span>		R16: []unicode.Range16{
<a id="L1040"></a><span class="ln">  1040</span>			{0x003A, 0x003A, 1},
<a id="L1041"></a><span class="ln">  1041</span>			{0x0041, 0x005A, 1},
<a id="L1042"></a><span class="ln">  1042</span>			{0x005F, 0x005F, 1},
<a id="L1043"></a><span class="ln">  1043</span>			{0x0061, 0x007A, 1},
<a id="L1044"></a><span class="ln">  1044</span>			{0x00C0, 0x00D6, 1},
<a id="L1045"></a><span class="ln">  1045</span>			{0x00D8, 0x00F6, 1},
<a id="L1046"></a><span class="ln">  1046</span>			{0x00F8, 0x00FF, 1},
<a id="L1047"></a><span class="ln">  1047</span>			{0x0100, 0x0131, 1},
<a id="L1048"></a><span class="ln">  1048</span>			{0x0134, 0x013E, 1},
<a id="L1049"></a><span class="ln">  1049</span>			{0x0141, 0x0148, 1},
<a id="L1050"></a><span class="ln">  1050</span>			{0x014A, 0x017E, 1},
<a id="L1051"></a><span class="ln">  1051</span>			{0x0180, 0x01C3, 1},
<a id="L1052"></a><span class="ln">  1052</span>			{0x01CD, 0x01F0, 1},
<a id="L1053"></a><span class="ln">  1053</span>			{0x01F4, 0x01F5, 1},
<a id="L1054"></a><span class="ln">  1054</span>			{0x01FA, 0x0217, 1},
<a id="L1055"></a><span class="ln">  1055</span>			{0x0250, 0x02A8, 1},
<a id="L1056"></a><span class="ln">  1056</span>			{0x02BB, 0x02C1, 1},
<a id="L1057"></a><span class="ln">  1057</span>			{0x0386, 0x0386, 1},
<a id="L1058"></a><span class="ln">  1058</span>			{0x0388, 0x038A, 1},
<a id="L1059"></a><span class="ln">  1059</span>			{0x038C, 0x038C, 1},
<a id="L1060"></a><span class="ln">  1060</span>			{0x038E, 0x03A1, 1},
<a id="L1061"></a><span class="ln">  1061</span>			{0x03A3, 0x03CE, 1},
<a id="L1062"></a><span class="ln">  1062</span>			{0x03D0, 0x03D6, 1},
<a id="L1063"></a><span class="ln">  1063</span>			{0x03DA, 0x03E0, 2},
<a id="L1064"></a><span class="ln">  1064</span>			{0x03E2, 0x03F3, 1},
<a id="L1065"></a><span class="ln">  1065</span>			{0x0401, 0x040C, 1},
<a id="L1066"></a><span class="ln">  1066</span>			{0x040E, 0x044F, 1},
<a id="L1067"></a><span class="ln">  1067</span>			{0x0451, 0x045C, 1},
<a id="L1068"></a><span class="ln">  1068</span>			{0x045E, 0x0481, 1},
<a id="L1069"></a><span class="ln">  1069</span>			{0x0490, 0x04C4, 1},
<a id="L1070"></a><span class="ln">  1070</span>			{0x04C7, 0x04C8, 1},
<a id="L1071"></a><span class="ln">  1071</span>			{0x04CB, 0x04CC, 1},
<a id="L1072"></a><span class="ln">  1072</span>			{0x04D0, 0x04EB, 1},
<a id="L1073"></a><span class="ln">  1073</span>			{0x04EE, 0x04F5, 1},
<a id="L1074"></a><span class="ln">  1074</span>			{0x04F8, 0x04F9, 1},
<a id="L1075"></a><span class="ln">  1075</span>			{0x0531, 0x0556, 1},
<a id="L1076"></a><span class="ln">  1076</span>			{0x0559, 0x0559, 1},
<a id="L1077"></a><span class="ln">  1077</span>			{0x0561, 0x0586, 1},
<a id="L1078"></a><span class="ln">  1078</span>			{0x05D0, 0x05EA, 1},
<a id="L1079"></a><span class="ln">  1079</span>			{0x05F0, 0x05F2, 1},
<a id="L1080"></a><span class="ln">  1080</span>			{0x0621, 0x063A, 1},
<a id="L1081"></a><span class="ln">  1081</span>			{0x0641, 0x064A, 1},
<a id="L1082"></a><span class="ln">  1082</span>			{0x0671, 0x06B7, 1},
<a id="L1083"></a><span class="ln">  1083</span>			{0x06BA, 0x06BE, 1},
<a id="L1084"></a><span class="ln">  1084</span>			{0x06C0, 0x06CE, 1},
<a id="L1085"></a><span class="ln">  1085</span>			{0x06D0, 0x06D3, 1},
<a id="L1086"></a><span class="ln">  1086</span>			{0x06D5, 0x06D5, 1},
<a id="L1087"></a><span class="ln">  1087</span>			{0x06E5, 0x06E6, 1},
<a id="L1088"></a><span class="ln">  1088</span>			{0x0905, 0x0939, 1},
<a id="L1089"></a><span class="ln">  1089</span>			{0x093D, 0x093D, 1},
<a id="L1090"></a><span class="ln">  1090</span>			{0x0958, 0x0961, 1},
<a id="L1091"></a><span class="ln">  1091</span>			{0x0985, 0x098C, 1},
<a id="L1092"></a><span class="ln">  1092</span>			{0x098F, 0x0990, 1},
<a id="L1093"></a><span class="ln">  1093</span>			{0x0993, 0x09A8, 1},
<a id="L1094"></a><span class="ln">  1094</span>			{0x09AA, 0x09B0, 1},
<a id="L1095"></a><span class="ln">  1095</span>			{0x09B2, 0x09B2, 1},
<a id="L1096"></a><span class="ln">  1096</span>			{0x09B6, 0x09B9, 1},
<a id="L1097"></a><span class="ln">  1097</span>			{0x09DC, 0x09DD, 1},
<a id="L1098"></a><span class="ln">  1098</span>			{0x09DF, 0x09E1, 1},
<a id="L1099"></a><span class="ln">  1099</span>			{0x09F0, 0x09F1, 1},
<a id="L1100"></a><span class="ln">  1100</span>			{0x0A05, 0x0A0A, 1},
<a id="L1101"></a><span class="ln">  1101</span>			{0x0A0F, 0x0A10, 1},
<a id="L1102"></a><span class="ln">  1102</span>			{0x0A13, 0x0A28, 1},
<a id="L1103"></a><span class="ln">  1103</span>			{0x0A2A, 0x0A30, 1},
<a id="L1104"></a><span class="ln">  1104</span>			{0x0A32, 0x0A33, 1},
<a id="L1105"></a><span class="ln">  1105</span>			{0x0A35, 0x0A36, 1},
<a id="L1106"></a><span class="ln">  1106</span>			{0x0A38, 0x0A39, 1},
<a id="L1107"></a><span class="ln">  1107</span>			{0x0A59, 0x0A5C, 1},
<a id="L1108"></a><span class="ln">  1108</span>			{0x0A5E, 0x0A5E, 1},
<a id="L1109"></a><span class="ln">  1109</span>			{0x0A72, 0x0A74, 1},
<a id="L1110"></a><span class="ln">  1110</span>			{0x0A85, 0x0A8B, 1},
<a id="L1111"></a><span class="ln">  1111</span>			{0x0A8D, 0x0A8D, 1},
<a id="L1112"></a><span class="ln">  1112</span>			{0x0A8F, 0x0A91, 1},
<a id="L1113"></a><span class="ln">  1113</span>			{0x0A93, 0x0AA8, 1},
<a id="L1114"></a><span class="ln">  1114</span>			{0x0AAA, 0x0AB0, 1},
<a id="L1115"></a><span class="ln">  1115</span>			{0x0AB2, 0x0AB3, 1},
<a id="L1116"></a><span class="ln">  1116</span>			{0x0AB5, 0x0AB9, 1},
<a id="L1117"></a><span class="ln">  1117</span>			{0x0ABD, 0x0AE0, 0x23},
<a id="L1118"></a><span class="ln">  1118</span>			{0x0B05, 0x0B0C, 1},
<a id="L1119"></a><span class="ln">  1119</span>			{0x0B0F, 0x0B10, 1},
<a id="L1120"></a><span class="ln">  1120</span>			{0x0B13, 0x0B28, 1},
<a id="L1121"></a><span class="ln">  1121</span>			{0x0B2A, 0x0B30, 1},
<a id="L1122"></a><span class="ln">  1122</span>			{0x0B32, 0x0B33, 1},
<a id="L1123"></a><span class="ln">  1123</span>			{0x0B36, 0x0B39, 1},
<a id="L1124"></a><span class="ln">  1124</span>			{0x0B3D, 0x0B3D, 1},
<a id="L1125"></a><span class="ln">  1125</span>			{0x0B5C, 0x0B5D, 1},
<a id="L1126"></a><span class="ln">  1126</span>			{0x0B5F, 0x0B61, 1},
<a id="L1127"></a><span class="ln">  1127</span>			{0x0B85, 0x0B8A, 1},
<a id="L1128"></a><span class="ln">  1128</span>			{0x0B8E, 0x0B90, 1},
<a id="L1129"></a><span class="ln">  1129</span>			{0x0B92, 0x0B95, 1},
<a id="L1130"></a><span class="ln">  1130</span>			{0x0B99, 0x0B9A, 1},
<a id="L1131"></a><span class="ln">  1131</span>			{0x0B9C, 0x0B9C, 1},
<a id="L1132"></a><span class="ln">  1132</span>			{0x0B9E, 0x0B9F, 1},
<a id="L1133"></a><span class="ln">  1133</span>			{0x0BA3, 0x0BA4, 1},
<a id="L1134"></a><span class="ln">  1134</span>			{0x0BA8, 0x0BAA, 1},
<a id="L1135"></a><span class="ln">  1135</span>			{0x0BAE, 0x0BB5, 1},
<a id="L1136"></a><span class="ln">  1136</span>			{0x0BB7, 0x0BB9, 1},
<a id="L1137"></a><span class="ln">  1137</span>			{0x0C05, 0x0C0C, 1},
<a id="L1138"></a><span class="ln">  1138</span>			{0x0C0E, 0x0C10, 1},
<a id="L1139"></a><span class="ln">  1139</span>			{0x0C12, 0x0C28, 1},
<a id="L1140"></a><span class="ln">  1140</span>			{0x0C2A, 0x0C33, 1},
<a id="L1141"></a><span class="ln">  1141</span>			{0x0C35, 0x0C39, 1},
<a id="L1142"></a><span class="ln">  1142</span>			{0x0C60, 0x0C61, 1},
<a id="L1143"></a><span class="ln">  1143</span>			{0x0C85, 0x0C8C, 1},
<a id="L1144"></a><span class="ln">  1144</span>			{0x0C8E, 0x0C90, 1},
<a id="L1145"></a><span class="ln">  1145</span>			{0x0C92, 0x0CA8, 1},
<a id="L1146"></a><span class="ln">  1146</span>			{0x0CAA, 0x0CB3, 1},
<a id="L1147"></a><span class="ln">  1147</span>			{0x0CB5, 0x0CB9, 1},
<a id="L1148"></a><span class="ln">  1148</span>			{0x0CDE, 0x0CDE, 1},
<a id="L1149"></a><span class="ln">  1149</span>			{0x0CE0, 0x0CE1, 1},
<a id="L1150"></a><span class="ln">  1150</span>			{0x0D05, 0x0D0C, 1},
<a id="L1151"></a><span class="ln">  1151</span>			{0x0D0E, 0x0D10, 1},
<a id="L1152"></a><span class="ln">  1152</span>			{0x0D12, 0x0D28, 1},
<a id="L1153"></a><span class="ln">  1153</span>			{0x0D2A, 0x0D39, 1},
<a id="L1154"></a><span class="ln">  1154</span>			{0x0D60, 0x0D61, 1},
<a id="L1155"></a><span class="ln">  1155</span>			{0x0E01, 0x0E2E, 1},
<a id="L1156"></a><span class="ln">  1156</span>			{0x0E30, 0x0E30, 1},
<a id="L1157"></a><span class="ln">  1157</span>			{0x0E32, 0x0E33, 1},
<a id="L1158"></a><span class="ln">  1158</span>			{0x0E40, 0x0E45, 1},
<a id="L1159"></a><span class="ln">  1159</span>			{0x0E81, 0x0E82, 1},
<a id="L1160"></a><span class="ln">  1160</span>			{0x0E84, 0x0E84, 1},
<a id="L1161"></a><span class="ln">  1161</span>			{0x0E87, 0x0E88, 1},
<a id="L1162"></a><span class="ln">  1162</span>			{0x0E8A, 0x0E8D, 3},
<a id="L1163"></a><span class="ln">  1163</span>			{0x0E94, 0x0E97, 1},
<a id="L1164"></a><span class="ln">  1164</span>			{0x0E99, 0x0E9F, 1},
<a id="L1165"></a><span class="ln">  1165</span>			{0x0EA1, 0x0EA3, 1},
<a id="L1166"></a><span class="ln">  1166</span>			{0x0EA5, 0x0EA7, 2},
<a id="L1167"></a><span class="ln">  1167</span>			{0x0EAA, 0x0EAB, 1},
<a id="L1168"></a><span class="ln">  1168</span>			{0x0EAD, 0x0EAE, 1},
<a id="L1169"></a><span class="ln">  1169</span>			{0x0EB0, 0x0EB0, 1},
<a id="L1170"></a><span class="ln">  1170</span>			{0x0EB2, 0x0EB3, 1},
<a id="L1171"></a><span class="ln">  1171</span>			{0x0EBD, 0x0EBD, 1},
<a id="L1172"></a><span class="ln">  1172</span>			{0x0EC0, 0x0EC4, 1},
<a id="L1173"></a><span class="ln">  1173</span>			{0x0F40, 0x0F47, 1},
<a id="L1174"></a><span class="ln">  1174</span>			{0x0F49, 0x0F69, 1},
<a id="L1175"></a><span class="ln">  1175</span>			{0x10A0, 0x10C5, 1},
<a id="L1176"></a><span class="ln">  1176</span>			{0x10D0, 0x10F6, 1},
<a id="L1177"></a><span class="ln">  1177</span>			{0x1100, 0x1100, 1},
<a id="L1178"></a><span class="ln">  1178</span>			{0x1102, 0x1103, 1},
<a id="L1179"></a><span class="ln">  1179</span>			{0x1105, 0x1107, 1},
<a id="L1180"></a><span class="ln">  1180</span>			{0x1109, 0x1109, 1},
<a id="L1181"></a><span class="ln">  1181</span>			{0x110B, 0x110C, 1},
<a id="L1182"></a><span class="ln">  1182</span>			{0x110E, 0x1112, 1},
<a id="L1183"></a><span class="ln">  1183</span>			{0x113C, 0x1140, 2},
<a id="L1184"></a><span class="ln">  1184</span>			{0x114C, 0x1150, 2},
<a id="L1185"></a><span class="ln">  1185</span>			{0x1154, 0x1155, 1},
<a id="L1186"></a><span class="ln">  1186</span>			{0x1159, 0x1159, 1},
<a id="L1187"></a><span class="ln">  1187</span>			{0x115F, 0x1161, 1},
<a id="L1188"></a><span class="ln">  1188</span>			{0x1163, 0x1169, 2},
<a id="L1189"></a><span class="ln">  1189</span>			{0x116D, 0x116E, 1},
<a id="L1190"></a><span class="ln">  1190</span>			{0x1172, 0x1173, 1},
<a id="L1191"></a><span class="ln">  1191</span>			{0x1175, 0x119E, 0x119E - 0x1175},
<a id="L1192"></a><span class="ln">  1192</span>			{0x11A8, 0x11AB, 0x11AB - 0x11A8},
<a id="L1193"></a><span class="ln">  1193</span>			{0x11AE, 0x11AF, 1},
<a id="L1194"></a><span class="ln">  1194</span>			{0x11B7, 0x11B8, 1},
<a id="L1195"></a><span class="ln">  1195</span>			{0x11BA, 0x11BA, 1},
<a id="L1196"></a><span class="ln">  1196</span>			{0x11BC, 0x11C2, 1},
<a id="L1197"></a><span class="ln">  1197</span>			{0x11EB, 0x11F0, 0x11F0 - 0x11EB},
<a id="L1198"></a><span class="ln">  1198</span>			{0x11F9, 0x11F9, 1},
<a id="L1199"></a><span class="ln">  1199</span>			{0x1E00, 0x1E9B, 1},
<a id="L1200"></a><span class="ln">  1200</span>			{0x1EA0, 0x1EF9, 1},
<a id="L1201"></a><span class="ln">  1201</span>			{0x1F00, 0x1F15, 1},
<a id="L1202"></a><span class="ln">  1202</span>			{0x1F18, 0x1F1D, 1},
<a id="L1203"></a><span class="ln">  1203</span>			{0x1F20, 0x1F45, 1},
<a id="L1204"></a><span class="ln">  1204</span>			{0x1F48, 0x1F4D, 1},
<a id="L1205"></a><span class="ln">  1205</span>			{0x1F50, 0x1F57, 1},
<a id="L1206"></a><span class="ln">  1206</span>			{0x1F59, 0x1F5B, 0x1F5B - 0x1F59},
<a id="L1207"></a><span class="ln">  1207</span>			{0x1F5D, 0x1F5D, 1},
<a id="L1208"></a><span class="ln">  1208</span>			{0x1F5F, 0x1F7D, 1},
<a id="L1209"></a><span class="ln">  1209</span>			{0x1F80, 0x1FB4, 1},
<a id="L1210"></a><span class="ln">  1210</span>			{0x1FB6, 0x1FBC, 1},
<a id="L1211"></a><span class="ln">  1211</span>			{0x1FBE, 0x1FBE, 1},
<a id="L1212"></a><span class="ln">  1212</span>			{0x1FC2, 0x1FC4, 1},
<a id="L1213"></a><span class="ln">  1213</span>			{0x1FC6, 0x1FCC, 1},
<a id="L1214"></a><span class="ln">  1214</span>			{0x1FD0, 0x1FD3, 1},
<a id="L1215"></a><span class="ln">  1215</span>			{0x1FD6, 0x1FDB, 1},
<a id="L1216"></a><span class="ln">  1216</span>			{0x1FE0, 0x1FEC, 1},
<a id="L1217"></a><span class="ln">  1217</span>			{0x1FF2, 0x1FF4, 1},
<a id="L1218"></a><span class="ln">  1218</span>			{0x1FF6, 0x1FFC, 1},
<a id="L1219"></a><span class="ln">  1219</span>			{0x2126, 0x2126, 1},
<a id="L1220"></a><span class="ln">  1220</span>			{0x212A, 0x212B, 1},
<a id="L1221"></a><span class="ln">  1221</span>			{0x212E, 0x212E, 1},
<a id="L1222"></a><span class="ln">  1222</span>			{0x2180, 0x2182, 1},
<a id="L1223"></a><span class="ln">  1223</span>			{0x3007, 0x3007, 1},
<a id="L1224"></a><span class="ln">  1224</span>			{0x3021, 0x3029, 1},
<a id="L1225"></a><span class="ln">  1225</span>			{0x3041, 0x3094, 1},
<a id="L1226"></a><span class="ln">  1226</span>			{0x30A1, 0x30FA, 1},
<a id="L1227"></a><span class="ln">  1227</span>			{0x3105, 0x312C, 1},
<a id="L1228"></a><span class="ln">  1228</span>			{0x4E00, 0x9FA5, 1},
<a id="L1229"></a><span class="ln">  1229</span>			{0xAC00, 0xD7A3, 1},
<a id="L1230"></a><span class="ln">  1230</span>		},
<a id="L1231"></a><span class="ln">  1231</span>	}
<a id="L1232"></a><span class="ln">  1232</span>	
<a id="L1233"></a><span class="ln">  1233</span>	var second = &amp;unicode.RangeTable{
<a id="L1234"></a><span class="ln">  1234</span>		R16: []unicode.Range16{
<a id="L1235"></a><span class="ln">  1235</span>			{0x002D, 0x002E, 1},
<a id="L1236"></a><span class="ln">  1236</span>			{0x0030, 0x0039, 1},
<a id="L1237"></a><span class="ln">  1237</span>			{0x00B7, 0x00B7, 1},
<a id="L1238"></a><span class="ln">  1238</span>			{0x02D0, 0x02D1, 1},
<a id="L1239"></a><span class="ln">  1239</span>			{0x0300, 0x0345, 1},
<a id="L1240"></a><span class="ln">  1240</span>			{0x0360, 0x0361, 1},
<a id="L1241"></a><span class="ln">  1241</span>			{0x0387, 0x0387, 1},
<a id="L1242"></a><span class="ln">  1242</span>			{0x0483, 0x0486, 1},
<a id="L1243"></a><span class="ln">  1243</span>			{0x0591, 0x05A1, 1},
<a id="L1244"></a><span class="ln">  1244</span>			{0x05A3, 0x05B9, 1},
<a id="L1245"></a><span class="ln">  1245</span>			{0x05BB, 0x05BD, 1},
<a id="L1246"></a><span class="ln">  1246</span>			{0x05BF, 0x05BF, 1},
<a id="L1247"></a><span class="ln">  1247</span>			{0x05C1, 0x05C2, 1},
<a id="L1248"></a><span class="ln">  1248</span>			{0x05C4, 0x0640, 0x0640 - 0x05C4},
<a id="L1249"></a><span class="ln">  1249</span>			{0x064B, 0x0652, 1},
<a id="L1250"></a><span class="ln">  1250</span>			{0x0660, 0x0669, 1},
<a id="L1251"></a><span class="ln">  1251</span>			{0x0670, 0x0670, 1},
<a id="L1252"></a><span class="ln">  1252</span>			{0x06D6, 0x06DC, 1},
<a id="L1253"></a><span class="ln">  1253</span>			{0x06DD, 0x06DF, 1},
<a id="L1254"></a><span class="ln">  1254</span>			{0x06E0, 0x06E4, 1},
<a id="L1255"></a><span class="ln">  1255</span>			{0x06E7, 0x06E8, 1},
<a id="L1256"></a><span class="ln">  1256</span>			{0x06EA, 0x06ED, 1},
<a id="L1257"></a><span class="ln">  1257</span>			{0x06F0, 0x06F9, 1},
<a id="L1258"></a><span class="ln">  1258</span>			{0x0901, 0x0903, 1},
<a id="L1259"></a><span class="ln">  1259</span>			{0x093C, 0x093C, 1},
<a id="L1260"></a><span class="ln">  1260</span>			{0x093E, 0x094C, 1},
<a id="L1261"></a><span class="ln">  1261</span>			{0x094D, 0x094D, 1},
<a id="L1262"></a><span class="ln">  1262</span>			{0x0951, 0x0954, 1},
<a id="L1263"></a><span class="ln">  1263</span>			{0x0962, 0x0963, 1},
<a id="L1264"></a><span class="ln">  1264</span>			{0x0966, 0x096F, 1},
<a id="L1265"></a><span class="ln">  1265</span>			{0x0981, 0x0983, 1},
<a id="L1266"></a><span class="ln">  1266</span>			{0x09BC, 0x09BC, 1},
<a id="L1267"></a><span class="ln">  1267</span>			{0x09BE, 0x09BF, 1},
<a id="L1268"></a><span class="ln">  1268</span>			{0x09C0, 0x09C4, 1},
<a id="L1269"></a><span class="ln">  1269</span>			{0x09C7, 0x09C8, 1},
<a id="L1270"></a><span class="ln">  1270</span>			{0x09CB, 0x09CD, 1},
<a id="L1271"></a><span class="ln">  1271</span>			{0x09D7, 0x09D7, 1},
<a id="L1272"></a><span class="ln">  1272</span>			{0x09E2, 0x09E3, 1},
<a id="L1273"></a><span class="ln">  1273</span>			{0x09E6, 0x09EF, 1},
<a id="L1274"></a><span class="ln">  1274</span>			{0x0A02, 0x0A3C, 0x3A},
<a id="L1275"></a><span class="ln">  1275</span>			{0x0A3E, 0x0A3F, 1},
<a id="L1276"></a><span class="ln">  1276</span>			{0x0A40, 0x0A42, 1},
<a id="L1277"></a><span class="ln">  1277</span>			{0x0A47, 0x0A48, 1},
<a id="L1278"></a><span class="ln">  1278</span>			{0x0A4B, 0x0A4D, 1},
<a id="L1279"></a><span class="ln">  1279</span>			{0x0A66, 0x0A6F, 1},
<a id="L1280"></a><span class="ln">  1280</span>			{0x0A70, 0x0A71, 1},
<a id="L1281"></a><span class="ln">  1281</span>			{0x0A81, 0x0A83, 1},
<a id="L1282"></a><span class="ln">  1282</span>			{0x0ABC, 0x0ABC, 1},
<a id="L1283"></a><span class="ln">  1283</span>			{0x0ABE, 0x0AC5, 1},
<a id="L1284"></a><span class="ln">  1284</span>			{0x0AC7, 0x0AC9, 1},
<a id="L1285"></a><span class="ln">  1285</span>			{0x0ACB, 0x0ACD, 1},
<a id="L1286"></a><span class="ln">  1286</span>			{0x0AE6, 0x0AEF, 1},
<a id="L1287"></a><span class="ln">  1287</span>			{0x0B01, 0x0B03, 1},
<a id="L1288"></a><span class="ln">  1288</span>			{0x0B3C, 0x0B3C, 1},
<a id="L1289"></a><span class="ln">  1289</span>			{0x0B3E, 0x0B43, 1},
<a id="L1290"></a><span class="ln">  1290</span>			{0x0B47, 0x0B48, 1},
<a id="L1291"></a><span class="ln">  1291</span>			{0x0B4B, 0x0B4D, 1},
<a id="L1292"></a><span class="ln">  1292</span>			{0x0B56, 0x0B57, 1},
<a id="L1293"></a><span class="ln">  1293</span>			{0x0B66, 0x0B6F, 1},
<a id="L1294"></a><span class="ln">  1294</span>			{0x0B82, 0x0B83, 1},
<a id="L1295"></a><span class="ln">  1295</span>			{0x0BBE, 0x0BC2, 1},
<a id="L1296"></a><span class="ln">  1296</span>			{0x0BC6, 0x0BC8, 1},
<a id="L1297"></a><span class="ln">  1297</span>			{0x0BCA, 0x0BCD, 1},
<a id="L1298"></a><span class="ln">  1298</span>			{0x0BD7, 0x0BD7, 1},
<a id="L1299"></a><span class="ln">  1299</span>			{0x0BE7, 0x0BEF, 1},
<a id="L1300"></a><span class="ln">  1300</span>			{0x0C01, 0x0C03, 1},
<a id="L1301"></a><span class="ln">  1301</span>			{0x0C3E, 0x0C44, 1},
<a id="L1302"></a><span class="ln">  1302</span>			{0x0C46, 0x0C48, 1},
<a id="L1303"></a><span class="ln">  1303</span>			{0x0C4A, 0x0C4D, 1},
<a id="L1304"></a><span class="ln">  1304</span>			{0x0C55, 0x0C56, 1},
<a id="L1305"></a><span class="ln">  1305</span>			{0x0C66, 0x0C6F, 1},
<a id="L1306"></a><span class="ln">  1306</span>			{0x0C82, 0x0C83, 1},
<a id="L1307"></a><span class="ln">  1307</span>			{0x0CBE, 0x0CC4, 1},
<a id="L1308"></a><span class="ln">  1308</span>			{0x0CC6, 0x0CC8, 1},
<a id="L1309"></a><span class="ln">  1309</span>			{0x0CCA, 0x0CCD, 1},
<a id="L1310"></a><span class="ln">  1310</span>			{0x0CD5, 0x0CD6, 1},
<a id="L1311"></a><span class="ln">  1311</span>			{0x0CE6, 0x0CEF, 1},
<a id="L1312"></a><span class="ln">  1312</span>			{0x0D02, 0x0D03, 1},
<a id="L1313"></a><span class="ln">  1313</span>			{0x0D3E, 0x0D43, 1},
<a id="L1314"></a><span class="ln">  1314</span>			{0x0D46, 0x0D48, 1},
<a id="L1315"></a><span class="ln">  1315</span>			{0x0D4A, 0x0D4D, 1},
<a id="L1316"></a><span class="ln">  1316</span>			{0x0D57, 0x0D57, 1},
<a id="L1317"></a><span class="ln">  1317</span>			{0x0D66, 0x0D6F, 1},
<a id="L1318"></a><span class="ln">  1318</span>			{0x0E31, 0x0E31, 1},
<a id="L1319"></a><span class="ln">  1319</span>			{0x0E34, 0x0E3A, 1},
<a id="L1320"></a><span class="ln">  1320</span>			{0x0E46, 0x0E46, 1},
<a id="L1321"></a><span class="ln">  1321</span>			{0x0E47, 0x0E4E, 1},
<a id="L1322"></a><span class="ln">  1322</span>			{0x0E50, 0x0E59, 1},
<a id="L1323"></a><span class="ln">  1323</span>			{0x0EB1, 0x0EB1, 1},
<a id="L1324"></a><span class="ln">  1324</span>			{0x0EB4, 0x0EB9, 1},
<a id="L1325"></a><span class="ln">  1325</span>			{0x0EBB, 0x0EBC, 1},
<a id="L1326"></a><span class="ln">  1326</span>			{0x0EC6, 0x0EC6, 1},
<a id="L1327"></a><span class="ln">  1327</span>			{0x0EC8, 0x0ECD, 1},
<a id="L1328"></a><span class="ln">  1328</span>			{0x0ED0, 0x0ED9, 1},
<a id="L1329"></a><span class="ln">  1329</span>			{0x0F18, 0x0F19, 1},
<a id="L1330"></a><span class="ln">  1330</span>			{0x0F20, 0x0F29, 1},
<a id="L1331"></a><span class="ln">  1331</span>			{0x0F35, 0x0F39, 2},
<a id="L1332"></a><span class="ln">  1332</span>			{0x0F3E, 0x0F3F, 1},
<a id="L1333"></a><span class="ln">  1333</span>			{0x0F71, 0x0F84, 1},
<a id="L1334"></a><span class="ln">  1334</span>			{0x0F86, 0x0F8B, 1},
<a id="L1335"></a><span class="ln">  1335</span>			{0x0F90, 0x0F95, 1},
<a id="L1336"></a><span class="ln">  1336</span>			{0x0F97, 0x0F97, 1},
<a id="L1337"></a><span class="ln">  1337</span>			{0x0F99, 0x0FAD, 1},
<a id="L1338"></a><span class="ln">  1338</span>			{0x0FB1, 0x0FB7, 1},
<a id="L1339"></a><span class="ln">  1339</span>			{0x0FB9, 0x0FB9, 1},
<a id="L1340"></a><span class="ln">  1340</span>			{0x20D0, 0x20DC, 1},
<a id="L1341"></a><span class="ln">  1341</span>			{0x20E1, 0x3005, 0x3005 - 0x20E1},
<a id="L1342"></a><span class="ln">  1342</span>			{0x302A, 0x302F, 1},
<a id="L1343"></a><span class="ln">  1343</span>			{0x3031, 0x3035, 1},
<a id="L1344"></a><span class="ln">  1344</span>			{0x3099, 0x309A, 1},
<a id="L1345"></a><span class="ln">  1345</span>			{0x309D, 0x309E, 1},
<a id="L1346"></a><span class="ln">  1346</span>			{0x30FC, 0x30FE, 1},
<a id="L1347"></a><span class="ln">  1347</span>		},
<a id="L1348"></a><span class="ln">  1348</span>	}
<a id="L1349"></a><span class="ln">  1349</span>	
<a id="L1350"></a><span class="ln">  1350</span>	<span class="comment">// HTMLEntity is an entity map containing translations for the</span>
<a id="L1351"></a><span class="ln">  1351</span>	<span class="comment">// standard HTML entity characters.</span>
<a id="L1352"></a><span class="ln">  1352</span>	var HTMLEntity = htmlEntity
<a id="L1353"></a><span class="ln">  1353</span>	
<a id="L1354"></a><span class="ln">  1354</span>	var htmlEntity = map[string]string{
<a id="L1355"></a><span class="ln">  1355</span>		<span class="comment">/*
</span><a id="L1356"></a><span class="ln">  1356</span>	<span class="comment">		hget http://www.w3.org/TR/html4/sgml/entities.html |
</span><a id="L1357"></a><span class="ln">  1357</span>	<span class="comment">		ssam &#39;
</span><a id="L1358"></a><span class="ln">  1358</span>	<span class="comment">			,y /\&amp;gt;/ x/\&amp;lt;(.|\n)+/ s/\n/ /g
</span><a id="L1359"></a><span class="ln">  1359</span>	<span class="comment">			,x v/^\&amp;lt;!ENTITY/d
</span><a id="L1360"></a><span class="ln">  1360</span>	<span class="comment">			,s/\&amp;lt;!ENTITY ([^ ]+) .*U\+([0-9A-F][0-9A-F][0-9A-F][0-9A-F]) .+/	&#34;\1&#34;: &#34;\\u\2&#34;,/g
</span><a id="L1361"></a><span class="ln">  1361</span>	<span class="comment">		&#39;
</span><a id="L1362"></a><span class="ln">  1362</span>	<span class="comment">	*/</span>
<a id="L1363"></a><span class="ln">  1363</span>		&#34;nbsp&#34;:     &#34;\u00A0&#34;,
<a id="L1364"></a><span class="ln">  1364</span>		&#34;iexcl&#34;:    &#34;\u00A1&#34;,
<a id="L1365"></a><span class="ln">  1365</span>		&#34;cent&#34;:     &#34;\u00A2&#34;,
<a id="L1366"></a><span class="ln">  1366</span>		&#34;pound&#34;:    &#34;\u00A3&#34;,
<a id="L1367"></a><span class="ln">  1367</span>		&#34;curren&#34;:   &#34;\u00A4&#34;,
<a id="L1368"></a><span class="ln">  1368</span>		&#34;yen&#34;:      &#34;\u00A5&#34;,
<a id="L1369"></a><span class="ln">  1369</span>		&#34;brvbar&#34;:   &#34;\u00A6&#34;,
<a id="L1370"></a><span class="ln">  1370</span>		&#34;sect&#34;:     &#34;\u00A7&#34;,
<a id="L1371"></a><span class="ln">  1371</span>		&#34;uml&#34;:      &#34;\u00A8&#34;,
<a id="L1372"></a><span class="ln">  1372</span>		&#34;copy&#34;:     &#34;\u00A9&#34;,
<a id="L1373"></a><span class="ln">  1373</span>		&#34;ordf&#34;:     &#34;\u00AA&#34;,
<a id="L1374"></a><span class="ln">  1374</span>		&#34;laquo&#34;:    &#34;\u00AB&#34;,
<a id="L1375"></a><span class="ln">  1375</span>		&#34;not&#34;:      &#34;\u00AC&#34;,
<a id="L1376"></a><span class="ln">  1376</span>		&#34;shy&#34;:      &#34;\u00AD&#34;,
<a id="L1377"></a><span class="ln">  1377</span>		&#34;reg&#34;:      &#34;\u00AE&#34;,
<a id="L1378"></a><span class="ln">  1378</span>		&#34;macr&#34;:     &#34;\u00AF&#34;,
<a id="L1379"></a><span class="ln">  1379</span>		&#34;deg&#34;:      &#34;\u00B0&#34;,
<a id="L1380"></a><span class="ln">  1380</span>		&#34;plusmn&#34;:   &#34;\u00B1&#34;,
<a id="L1381"></a><span class="ln">  1381</span>		&#34;sup2&#34;:     &#34;\u00B2&#34;,
<a id="L1382"></a><span class="ln">  1382</span>		&#34;sup3&#34;:     &#34;\u00B3&#34;,
<a id="L1383"></a><span class="ln">  1383</span>		&#34;acute&#34;:    &#34;\u00B4&#34;,
<a id="L1384"></a><span class="ln">  1384</span>		&#34;micro&#34;:    &#34;\u00B5&#34;,
<a id="L1385"></a><span class="ln">  1385</span>		&#34;para&#34;:     &#34;\u00B6&#34;,
<a id="L1386"></a><span class="ln">  1386</span>		&#34;middot&#34;:   &#34;\u00B7&#34;,
<a id="L1387"></a><span class="ln">  1387</span>		&#34;cedil&#34;:    &#34;\u00B8&#34;,
<a id="L1388"></a><span class="ln">  1388</span>		&#34;sup1&#34;:     &#34;\u00B9&#34;,
<a id="L1389"></a><span class="ln">  1389</span>		&#34;ordm&#34;:     &#34;\u00BA&#34;,
<a id="L1390"></a><span class="ln">  1390</span>		&#34;raquo&#34;:    &#34;\u00BB&#34;,
<a id="L1391"></a><span class="ln">  1391</span>		&#34;frac14&#34;:   &#34;\u00BC&#34;,
<a id="L1392"></a><span class="ln">  1392</span>		&#34;frac12&#34;:   &#34;\u00BD&#34;,
<a id="L1393"></a><span class="ln">  1393</span>		&#34;frac34&#34;:   &#34;\u00BE&#34;,
<a id="L1394"></a><span class="ln">  1394</span>		&#34;iquest&#34;:   &#34;\u00BF&#34;,
<a id="L1395"></a><span class="ln">  1395</span>		&#34;Agrave&#34;:   &#34;\u00C0&#34;,
<a id="L1396"></a><span class="ln">  1396</span>		&#34;Aacute&#34;:   &#34;\u00C1&#34;,
<a id="L1397"></a><span class="ln">  1397</span>		&#34;Acirc&#34;:    &#34;\u00C2&#34;,
<a id="L1398"></a><span class="ln">  1398</span>		&#34;Atilde&#34;:   &#34;\u00C3&#34;,
<a id="L1399"></a><span class="ln">  1399</span>		&#34;Auml&#34;:     &#34;\u00C4&#34;,
<a id="L1400"></a><span class="ln">  1400</span>		&#34;Aring&#34;:    &#34;\u00C5&#34;,
<a id="L1401"></a><span class="ln">  1401</span>		&#34;AElig&#34;:    &#34;\u00C6&#34;,
<a id="L1402"></a><span class="ln">  1402</span>		&#34;Ccedil&#34;:   &#34;\u00C7&#34;,
<a id="L1403"></a><span class="ln">  1403</span>		&#34;Egrave&#34;:   &#34;\u00C8&#34;,
<a id="L1404"></a><span class="ln">  1404</span>		&#34;Eacute&#34;:   &#34;\u00C9&#34;,
<a id="L1405"></a><span class="ln">  1405</span>		&#34;Ecirc&#34;:    &#34;\u00CA&#34;,
<a id="L1406"></a><span class="ln">  1406</span>		&#34;Euml&#34;:     &#34;\u00CB&#34;,
<a id="L1407"></a><span class="ln">  1407</span>		&#34;Igrave&#34;:   &#34;\u00CC&#34;,
<a id="L1408"></a><span class="ln">  1408</span>		&#34;Iacute&#34;:   &#34;\u00CD&#34;,
<a id="L1409"></a><span class="ln">  1409</span>		&#34;Icirc&#34;:    &#34;\u00CE&#34;,
<a id="L1410"></a><span class="ln">  1410</span>		&#34;Iuml&#34;:     &#34;\u00CF&#34;,
<a id="L1411"></a><span class="ln">  1411</span>		&#34;ETH&#34;:      &#34;\u00D0&#34;,
<a id="L1412"></a><span class="ln">  1412</span>		&#34;Ntilde&#34;:   &#34;\u00D1&#34;,
<a id="L1413"></a><span class="ln">  1413</span>		&#34;Ograve&#34;:   &#34;\u00D2&#34;,
<a id="L1414"></a><span class="ln">  1414</span>		&#34;Oacute&#34;:   &#34;\u00D3&#34;,
<a id="L1415"></a><span class="ln">  1415</span>		&#34;Ocirc&#34;:    &#34;\u00D4&#34;,
<a id="L1416"></a><span class="ln">  1416</span>		&#34;Otilde&#34;:   &#34;\u00D5&#34;,
<a id="L1417"></a><span class="ln">  1417</span>		&#34;Ouml&#34;:     &#34;\u00D6&#34;,
<a id="L1418"></a><span class="ln">  1418</span>		&#34;times&#34;:    &#34;\u00D7&#34;,
<a id="L1419"></a><span class="ln">  1419</span>		&#34;Oslash&#34;:   &#34;\u00D8&#34;,
<a id="L1420"></a><span class="ln">  1420</span>		&#34;Ugrave&#34;:   &#34;\u00D9&#34;,
<a id="L1421"></a><span class="ln">  1421</span>		&#34;Uacute&#34;:   &#34;\u00DA&#34;,
<a id="L1422"></a><span class="ln">  1422</span>		&#34;Ucirc&#34;:    &#34;\u00DB&#34;,
<a id="L1423"></a><span class="ln">  1423</span>		&#34;Uuml&#34;:     &#34;\u00DC&#34;,
<a id="L1424"></a><span class="ln">  1424</span>		&#34;Yacute&#34;:   &#34;\u00DD&#34;,
<a id="L1425"></a><span class="ln">  1425</span>		&#34;THORN&#34;:    &#34;\u00DE&#34;,
<a id="L1426"></a><span class="ln">  1426</span>		&#34;szlig&#34;:    &#34;\u00DF&#34;,
<a id="L1427"></a><span class="ln">  1427</span>		&#34;agrave&#34;:   &#34;\u00E0&#34;,
<a id="L1428"></a><span class="ln">  1428</span>		&#34;aacute&#34;:   &#34;\u00E1&#34;,
<a id="L1429"></a><span class="ln">  1429</span>		&#34;acirc&#34;:    &#34;\u00E2&#34;,
<a id="L1430"></a><span class="ln">  1430</span>		&#34;atilde&#34;:   &#34;\u00E3&#34;,
<a id="L1431"></a><span class="ln">  1431</span>		&#34;auml&#34;:     &#34;\u00E4&#34;,
<a id="L1432"></a><span class="ln">  1432</span>		&#34;aring&#34;:    &#34;\u00E5&#34;,
<a id="L1433"></a><span class="ln">  1433</span>		&#34;aelig&#34;:    &#34;\u00E6&#34;,
<a id="L1434"></a><span class="ln">  1434</span>		&#34;ccedil&#34;:   &#34;\u00E7&#34;,
<a id="L1435"></a><span class="ln">  1435</span>		&#34;egrave&#34;:   &#34;\u00E8&#34;,
<a id="L1436"></a><span class="ln">  1436</span>		&#34;eacute&#34;:   &#34;\u00E9&#34;,
<a id="L1437"></a><span class="ln">  1437</span>		&#34;ecirc&#34;:    &#34;\u00EA&#34;,
<a id="L1438"></a><span class="ln">  1438</span>		&#34;euml&#34;:     &#34;\u00EB&#34;,
<a id="L1439"></a><span class="ln">  1439</span>		&#34;igrave&#34;:   &#34;\u00EC&#34;,
<a id="L1440"></a><span class="ln">  1440</span>		&#34;iacute&#34;:   &#34;\u00ED&#34;,
<a id="L1441"></a><span class="ln">  1441</span>		&#34;icirc&#34;:    &#34;\u00EE&#34;,
<a id="L1442"></a><span class="ln">  1442</span>		&#34;iuml&#34;:     &#34;\u00EF&#34;,
<a id="L1443"></a><span class="ln">  1443</span>		&#34;eth&#34;:      &#34;\u00F0&#34;,
<a id="L1444"></a><span class="ln">  1444</span>		&#34;ntilde&#34;:   &#34;\u00F1&#34;,
<a id="L1445"></a><span class="ln">  1445</span>		&#34;ograve&#34;:   &#34;\u00F2&#34;,
<a id="L1446"></a><span class="ln">  1446</span>		&#34;oacute&#34;:   &#34;\u00F3&#34;,
<a id="L1447"></a><span class="ln">  1447</span>		&#34;ocirc&#34;:    &#34;\u00F4&#34;,
<a id="L1448"></a><span class="ln">  1448</span>		&#34;otilde&#34;:   &#34;\u00F5&#34;,
<a id="L1449"></a><span class="ln">  1449</span>		&#34;ouml&#34;:     &#34;\u00F6&#34;,
<a id="L1450"></a><span class="ln">  1450</span>		&#34;divide&#34;:   &#34;\u00F7&#34;,
<a id="L1451"></a><span class="ln">  1451</span>		&#34;oslash&#34;:   &#34;\u00F8&#34;,
<a id="L1452"></a><span class="ln">  1452</span>		&#34;ugrave&#34;:   &#34;\u00F9&#34;,
<a id="L1453"></a><span class="ln">  1453</span>		&#34;uacute&#34;:   &#34;\u00FA&#34;,
<a id="L1454"></a><span class="ln">  1454</span>		&#34;ucirc&#34;:    &#34;\u00FB&#34;,
<a id="L1455"></a><span class="ln">  1455</span>		&#34;uuml&#34;:     &#34;\u00FC&#34;,
<a id="L1456"></a><span class="ln">  1456</span>		&#34;yacute&#34;:   &#34;\u00FD&#34;,
<a id="L1457"></a><span class="ln">  1457</span>		&#34;thorn&#34;:    &#34;\u00FE&#34;,
<a id="L1458"></a><span class="ln">  1458</span>		&#34;yuml&#34;:     &#34;\u00FF&#34;,
<a id="L1459"></a><span class="ln">  1459</span>		&#34;fnof&#34;:     &#34;\u0192&#34;,
<a id="L1460"></a><span class="ln">  1460</span>		&#34;Alpha&#34;:    &#34;\u0391&#34;,
<a id="L1461"></a><span class="ln">  1461</span>		&#34;Beta&#34;:     &#34;\u0392&#34;,
<a id="L1462"></a><span class="ln">  1462</span>		&#34;Gamma&#34;:    &#34;\u0393&#34;,
<a id="L1463"></a><span class="ln">  1463</span>		&#34;Delta&#34;:    &#34;\u0394&#34;,
<a id="L1464"></a><span class="ln">  1464</span>		&#34;Epsilon&#34;:  &#34;\u0395&#34;,
<a id="L1465"></a><span class="ln">  1465</span>		&#34;Zeta&#34;:     &#34;\u0396&#34;,
<a id="L1466"></a><span class="ln">  1466</span>		&#34;Eta&#34;:      &#34;\u0397&#34;,
<a id="L1467"></a><span class="ln">  1467</span>		&#34;Theta&#34;:    &#34;\u0398&#34;,
<a id="L1468"></a><span class="ln">  1468</span>		&#34;Iota&#34;:     &#34;\u0399&#34;,
<a id="L1469"></a><span class="ln">  1469</span>		&#34;Kappa&#34;:    &#34;\u039A&#34;,
<a id="L1470"></a><span class="ln">  1470</span>		&#34;Lambda&#34;:   &#34;\u039B&#34;,
<a id="L1471"></a><span class="ln">  1471</span>		&#34;Mu&#34;:       &#34;\u039C&#34;,
<a id="L1472"></a><span class="ln">  1472</span>		&#34;Nu&#34;:       &#34;\u039D&#34;,
<a id="L1473"></a><span class="ln">  1473</span>		&#34;Xi&#34;:       &#34;\u039E&#34;,
<a id="L1474"></a><span class="ln">  1474</span>		&#34;Omicron&#34;:  &#34;\u039F&#34;,
<a id="L1475"></a><span class="ln">  1475</span>		&#34;Pi&#34;:       &#34;\u03A0&#34;,
<a id="L1476"></a><span class="ln">  1476</span>		&#34;Rho&#34;:      &#34;\u03A1&#34;,
<a id="L1477"></a><span class="ln">  1477</span>		&#34;Sigma&#34;:    &#34;\u03A3&#34;,
<a id="L1478"></a><span class="ln">  1478</span>		&#34;Tau&#34;:      &#34;\u03A4&#34;,
<a id="L1479"></a><span class="ln">  1479</span>		&#34;Upsilon&#34;:  &#34;\u03A5&#34;,
<a id="L1480"></a><span class="ln">  1480</span>		&#34;Phi&#34;:      &#34;\u03A6&#34;,
<a id="L1481"></a><span class="ln">  1481</span>		&#34;Chi&#34;:      &#34;\u03A7&#34;,
<a id="L1482"></a><span class="ln">  1482</span>		&#34;Psi&#34;:      &#34;\u03A8&#34;,
<a id="L1483"></a><span class="ln">  1483</span>		&#34;Omega&#34;:    &#34;\u03A9&#34;,
<a id="L1484"></a><span class="ln">  1484</span>		&#34;alpha&#34;:    &#34;\u03B1&#34;,
<a id="L1485"></a><span class="ln">  1485</span>		&#34;beta&#34;:     &#34;\u03B2&#34;,
<a id="L1486"></a><span class="ln">  1486</span>		&#34;gamma&#34;:    &#34;\u03B3&#34;,
<a id="L1487"></a><span class="ln">  1487</span>		&#34;delta&#34;:    &#34;\u03B4&#34;,
<a id="L1488"></a><span class="ln">  1488</span>		&#34;epsilon&#34;:  &#34;\u03B5&#34;,
<a id="L1489"></a><span class="ln">  1489</span>		&#34;zeta&#34;:     &#34;\u03B6&#34;,
<a id="L1490"></a><span class="ln">  1490</span>		&#34;eta&#34;:      &#34;\u03B7&#34;,
<a id="L1491"></a><span class="ln">  1491</span>		&#34;theta&#34;:    &#34;\u03B8&#34;,
<a id="L1492"></a><span class="ln">  1492</span>		&#34;iota&#34;:     &#34;\u03B9&#34;,
<a id="L1493"></a><span class="ln">  1493</span>		&#34;kappa&#34;:    &#34;\u03BA&#34;,
<a id="L1494"></a><span class="ln">  1494</span>		&#34;lambda&#34;:   &#34;\u03BB&#34;,
<a id="L1495"></a><span class="ln">  1495</span>		&#34;mu&#34;:       &#34;\u03BC&#34;,
<a id="L1496"></a><span class="ln">  1496</span>		&#34;nu&#34;:       &#34;\u03BD&#34;,
<a id="L1497"></a><span class="ln">  1497</span>		&#34;xi&#34;:       &#34;\u03BE&#34;,
<a id="L1498"></a><span class="ln">  1498</span>		&#34;omicron&#34;:  &#34;\u03BF&#34;,
<a id="L1499"></a><span class="ln">  1499</span>		&#34;pi&#34;:       &#34;\u03C0&#34;,
<a id="L1500"></a><span class="ln">  1500</span>		&#34;rho&#34;:      &#34;\u03C1&#34;,
<a id="L1501"></a><span class="ln">  1501</span>		&#34;sigmaf&#34;:   &#34;\u03C2&#34;,
<a id="L1502"></a><span class="ln">  1502</span>		&#34;sigma&#34;:    &#34;\u03C3&#34;,
<a id="L1503"></a><span class="ln">  1503</span>		&#34;tau&#34;:      &#34;\u03C4&#34;,
<a id="L1504"></a><span class="ln">  1504</span>		&#34;upsilon&#34;:  &#34;\u03C5&#34;,
<a id="L1505"></a><span class="ln">  1505</span>		&#34;phi&#34;:      &#34;\u03C6&#34;,
<a id="L1506"></a><span class="ln">  1506</span>		&#34;chi&#34;:      &#34;\u03C7&#34;,
<a id="L1507"></a><span class="ln">  1507</span>		&#34;psi&#34;:      &#34;\u03C8&#34;,
<a id="L1508"></a><span class="ln">  1508</span>		&#34;omega&#34;:    &#34;\u03C9&#34;,
<a id="L1509"></a><span class="ln">  1509</span>		&#34;thetasym&#34;: &#34;\u03D1&#34;,
<a id="L1510"></a><span class="ln">  1510</span>		&#34;upsih&#34;:    &#34;\u03D2&#34;,
<a id="L1511"></a><span class="ln">  1511</span>		&#34;piv&#34;:      &#34;\u03D6&#34;,
<a id="L1512"></a><span class="ln">  1512</span>		&#34;bull&#34;:     &#34;\u2022&#34;,
<a id="L1513"></a><span class="ln">  1513</span>		&#34;hellip&#34;:   &#34;\u2026&#34;,
<a id="L1514"></a><span class="ln">  1514</span>		&#34;prime&#34;:    &#34;\u2032&#34;,
<a id="L1515"></a><span class="ln">  1515</span>		&#34;Prime&#34;:    &#34;\u2033&#34;,
<a id="L1516"></a><span class="ln">  1516</span>		&#34;oline&#34;:    &#34;\u203E&#34;,
<a id="L1517"></a><span class="ln">  1517</span>		&#34;frasl&#34;:    &#34;\u2044&#34;,
<a id="L1518"></a><span class="ln">  1518</span>		&#34;weierp&#34;:   &#34;\u2118&#34;,
<a id="L1519"></a><span class="ln">  1519</span>		&#34;image&#34;:    &#34;\u2111&#34;,
<a id="L1520"></a><span class="ln">  1520</span>		&#34;real&#34;:     &#34;\u211C&#34;,
<a id="L1521"></a><span class="ln">  1521</span>		&#34;trade&#34;:    &#34;\u2122&#34;,
<a id="L1522"></a><span class="ln">  1522</span>		&#34;alefsym&#34;:  &#34;\u2135&#34;,
<a id="L1523"></a><span class="ln">  1523</span>		&#34;larr&#34;:     &#34;\u2190&#34;,
<a id="L1524"></a><span class="ln">  1524</span>		&#34;uarr&#34;:     &#34;\u2191&#34;,
<a id="L1525"></a><span class="ln">  1525</span>		&#34;rarr&#34;:     &#34;\u2192&#34;,
<a id="L1526"></a><span class="ln">  1526</span>		&#34;darr&#34;:     &#34;\u2193&#34;,
<a id="L1527"></a><span class="ln">  1527</span>		&#34;harr&#34;:     &#34;\u2194&#34;,
<a id="L1528"></a><span class="ln">  1528</span>		&#34;crarr&#34;:    &#34;\u21B5&#34;,
<a id="L1529"></a><span class="ln">  1529</span>		&#34;lArr&#34;:     &#34;\u21D0&#34;,
<a id="L1530"></a><span class="ln">  1530</span>		&#34;uArr&#34;:     &#34;\u21D1&#34;,
<a id="L1531"></a><span class="ln">  1531</span>		&#34;rArr&#34;:     &#34;\u21D2&#34;,
<a id="L1532"></a><span class="ln">  1532</span>		&#34;dArr&#34;:     &#34;\u21D3&#34;,
<a id="L1533"></a><span class="ln">  1533</span>		&#34;hArr&#34;:     &#34;\u21D4&#34;,
<a id="L1534"></a><span class="ln">  1534</span>		&#34;forall&#34;:   &#34;\u2200&#34;,
<a id="L1535"></a><span class="ln">  1535</span>		&#34;part&#34;:     &#34;\u2202&#34;,
<a id="L1536"></a><span class="ln">  1536</span>		&#34;exist&#34;:    &#34;\u2203&#34;,
<a id="L1537"></a><span class="ln">  1537</span>		&#34;empty&#34;:    &#34;\u2205&#34;,
<a id="L1538"></a><span class="ln">  1538</span>		&#34;nabla&#34;:    &#34;\u2207&#34;,
<a id="L1539"></a><span class="ln">  1539</span>		&#34;isin&#34;:     &#34;\u2208&#34;,
<a id="L1540"></a><span class="ln">  1540</span>		&#34;notin&#34;:    &#34;\u2209&#34;,
<a id="L1541"></a><span class="ln">  1541</span>		&#34;ni&#34;:       &#34;\u220B&#34;,
<a id="L1542"></a><span class="ln">  1542</span>		&#34;prod&#34;:     &#34;\u220F&#34;,
<a id="L1543"></a><span class="ln">  1543</span>		&#34;sum&#34;:      &#34;\u2211&#34;,
<a id="L1544"></a><span class="ln">  1544</span>		&#34;minus&#34;:    &#34;\u2212&#34;,
<a id="L1545"></a><span class="ln">  1545</span>		&#34;lowast&#34;:   &#34;\u2217&#34;,
<a id="L1546"></a><span class="ln">  1546</span>		&#34;radic&#34;:    &#34;\u221A&#34;,
<a id="L1547"></a><span class="ln">  1547</span>		&#34;prop&#34;:     &#34;\u221D&#34;,
<a id="L1548"></a><span class="ln">  1548</span>		&#34;infin&#34;:    &#34;\u221E&#34;,
<a id="L1549"></a><span class="ln">  1549</span>		&#34;ang&#34;:      &#34;\u2220&#34;,
<a id="L1550"></a><span class="ln">  1550</span>		&#34;and&#34;:      &#34;\u2227&#34;,
<a id="L1551"></a><span class="ln">  1551</span>		&#34;or&#34;:       &#34;\u2228&#34;,
<a id="L1552"></a><span class="ln">  1552</span>		&#34;cap&#34;:      &#34;\u2229&#34;,
<a id="L1553"></a><span class="ln">  1553</span>		&#34;cup&#34;:      &#34;\u222A&#34;,
<a id="L1554"></a><span class="ln">  1554</span>		&#34;int&#34;:      &#34;\u222B&#34;,
<a id="L1555"></a><span class="ln">  1555</span>		&#34;there4&#34;:   &#34;\u2234&#34;,
<a id="L1556"></a><span class="ln">  1556</span>		&#34;sim&#34;:      &#34;\u223C&#34;,
<a id="L1557"></a><span class="ln">  1557</span>		&#34;cong&#34;:     &#34;\u2245&#34;,
<a id="L1558"></a><span class="ln">  1558</span>		&#34;asymp&#34;:    &#34;\u2248&#34;,
<a id="L1559"></a><span class="ln">  1559</span>		&#34;ne&#34;:       &#34;\u2260&#34;,
<a id="L1560"></a><span class="ln">  1560</span>		&#34;equiv&#34;:    &#34;\u2261&#34;,
<a id="L1561"></a><span class="ln">  1561</span>		&#34;le&#34;:       &#34;\u2264&#34;,
<a id="L1562"></a><span class="ln">  1562</span>		&#34;ge&#34;:       &#34;\u2265&#34;,
<a id="L1563"></a><span class="ln">  1563</span>		&#34;sub&#34;:      &#34;\u2282&#34;,
<a id="L1564"></a><span class="ln">  1564</span>		&#34;sup&#34;:      &#34;\u2283&#34;,
<a id="L1565"></a><span class="ln">  1565</span>		&#34;nsub&#34;:     &#34;\u2284&#34;,
<a id="L1566"></a><span class="ln">  1566</span>		&#34;sube&#34;:     &#34;\u2286&#34;,
<a id="L1567"></a><span class="ln">  1567</span>		&#34;supe&#34;:     &#34;\u2287&#34;,
<a id="L1568"></a><span class="ln">  1568</span>		&#34;oplus&#34;:    &#34;\u2295&#34;,
<a id="L1569"></a><span class="ln">  1569</span>		&#34;otimes&#34;:   &#34;\u2297&#34;,
<a id="L1570"></a><span class="ln">  1570</span>		&#34;perp&#34;:     &#34;\u22A5&#34;,
<a id="L1571"></a><span class="ln">  1571</span>		&#34;sdot&#34;:     &#34;\u22C5&#34;,
<a id="L1572"></a><span class="ln">  1572</span>		&#34;lceil&#34;:    &#34;\u2308&#34;,
<a id="L1573"></a><span class="ln">  1573</span>		&#34;rceil&#34;:    &#34;\u2309&#34;,
<a id="L1574"></a><span class="ln">  1574</span>		&#34;lfloor&#34;:   &#34;\u230A&#34;,
<a id="L1575"></a><span class="ln">  1575</span>		&#34;rfloor&#34;:   &#34;\u230B&#34;,
<a id="L1576"></a><span class="ln">  1576</span>		&#34;lang&#34;:     &#34;\u2329&#34;,
<a id="L1577"></a><span class="ln">  1577</span>		&#34;rang&#34;:     &#34;\u232A&#34;,
<a id="L1578"></a><span class="ln">  1578</span>		&#34;loz&#34;:      &#34;\u25CA&#34;,
<a id="L1579"></a><span class="ln">  1579</span>		&#34;spades&#34;:   &#34;\u2660&#34;,
<a id="L1580"></a><span class="ln">  1580</span>		&#34;clubs&#34;:    &#34;\u2663&#34;,
<a id="L1581"></a><span class="ln">  1581</span>		&#34;hearts&#34;:   &#34;\u2665&#34;,
<a id="L1582"></a><span class="ln">  1582</span>		&#34;diams&#34;:    &#34;\u2666&#34;,
<a id="L1583"></a><span class="ln">  1583</span>		&#34;quot&#34;:     &#34;\u0022&#34;,
<a id="L1584"></a><span class="ln">  1584</span>		&#34;amp&#34;:      &#34;\u0026&#34;,
<a id="L1585"></a><span class="ln">  1585</span>		&#34;lt&#34;:       &#34;\u003C&#34;,
<a id="L1586"></a><span class="ln">  1586</span>		&#34;gt&#34;:       &#34;\u003E&#34;,
<a id="L1587"></a><span class="ln">  1587</span>		&#34;OElig&#34;:    &#34;\u0152&#34;,
<a id="L1588"></a><span class="ln">  1588</span>		&#34;oelig&#34;:    &#34;\u0153&#34;,
<a id="L1589"></a><span class="ln">  1589</span>		&#34;Scaron&#34;:   &#34;\u0160&#34;,
<a id="L1590"></a><span class="ln">  1590</span>		&#34;scaron&#34;:   &#34;\u0161&#34;,
<a id="L1591"></a><span class="ln">  1591</span>		&#34;Yuml&#34;:     &#34;\u0178&#34;,
<a id="L1592"></a><span class="ln">  1592</span>		&#34;circ&#34;:     &#34;\u02C6&#34;,
<a id="L1593"></a><span class="ln">  1593</span>		&#34;tilde&#34;:    &#34;\u02DC&#34;,
<a id="L1594"></a><span class="ln">  1594</span>		&#34;ensp&#34;:     &#34;\u2002&#34;,
<a id="L1595"></a><span class="ln">  1595</span>		&#34;emsp&#34;:     &#34;\u2003&#34;,
<a id="L1596"></a><span class="ln">  1596</span>		&#34;thinsp&#34;:   &#34;\u2009&#34;,
<a id="L1597"></a><span class="ln">  1597</span>		&#34;zwnj&#34;:     &#34;\u200C&#34;,
<a id="L1598"></a><span class="ln">  1598</span>		&#34;zwj&#34;:      &#34;\u200D&#34;,
<a id="L1599"></a><span class="ln">  1599</span>		&#34;lrm&#34;:      &#34;\u200E&#34;,
<a id="L1600"></a><span class="ln">  1600</span>		&#34;rlm&#34;:      &#34;\u200F&#34;,
<a id="L1601"></a><span class="ln">  1601</span>		&#34;ndash&#34;:    &#34;\u2013&#34;,
<a id="L1602"></a><span class="ln">  1602</span>		&#34;mdash&#34;:    &#34;\u2014&#34;,
<a id="L1603"></a><span class="ln">  1603</span>		&#34;lsquo&#34;:    &#34;\u2018&#34;,
<a id="L1604"></a><span class="ln">  1604</span>		&#34;rsquo&#34;:    &#34;\u2019&#34;,
<a id="L1605"></a><span class="ln">  1605</span>		&#34;sbquo&#34;:    &#34;\u201A&#34;,
<a id="L1606"></a><span class="ln">  1606</span>		&#34;ldquo&#34;:    &#34;\u201C&#34;,
<a id="L1607"></a><span class="ln">  1607</span>		&#34;rdquo&#34;:    &#34;\u201D&#34;,
<a id="L1608"></a><span class="ln">  1608</span>		&#34;bdquo&#34;:    &#34;\u201E&#34;,
<a id="L1609"></a><span class="ln">  1609</span>		&#34;dagger&#34;:   &#34;\u2020&#34;,
<a id="L1610"></a><span class="ln">  1610</span>		&#34;Dagger&#34;:   &#34;\u2021&#34;,
<a id="L1611"></a><span class="ln">  1611</span>		&#34;permil&#34;:   &#34;\u2030&#34;,
<a id="L1612"></a><span class="ln">  1612</span>		&#34;lsaquo&#34;:   &#34;\u2039&#34;,
<a id="L1613"></a><span class="ln">  1613</span>		&#34;rsaquo&#34;:   &#34;\u203A&#34;,
<a id="L1614"></a><span class="ln">  1614</span>		&#34;euro&#34;:     &#34;\u20AC&#34;,
<a id="L1615"></a><span class="ln">  1615</span>	}
<a id="L1616"></a><span class="ln">  1616</span>	
<a id="L1617"></a><span class="ln">  1617</span>	<span class="comment">// HTMLAutoClose is the set of HTML elements that</span>
<a id="L1618"></a><span class="ln">  1618</span>	<span class="comment">// should be considered to close automatically.</span>
<a id="L1619"></a><span class="ln">  1619</span>	var HTMLAutoClose = htmlAutoClose
<a id="L1620"></a><span class="ln">  1620</span>	
<a id="L1621"></a><span class="ln">  1621</span>	var htmlAutoClose = []string{
<a id="L1622"></a><span class="ln">  1622</span>		<span class="comment">/*
</span><a id="L1623"></a><span class="ln">  1623</span>	<span class="comment">		hget http://www.w3.org/TR/html4/loose.dtd |
</span><a id="L1624"></a><span class="ln">  1624</span>	<span class="comment">		9 sed -n &#39;s/&lt;!ELEMENT (.*) - O EMPTY.+/	&#34;\1&#34;,/p&#39; | tr A-Z a-z
</span><a id="L1625"></a><span class="ln">  1625</span>	<span class="comment">	*/</span>
<a id="L1626"></a><span class="ln">  1626</span>		&#34;basefont&#34;,
<a id="L1627"></a><span class="ln">  1627</span>		&#34;br&#34;,
<a id="L1628"></a><span class="ln">  1628</span>		&#34;area&#34;,
<a id="L1629"></a><span class="ln">  1629</span>		&#34;link&#34;,
<a id="L1630"></a><span class="ln">  1630</span>		&#34;img&#34;,
<a id="L1631"></a><span class="ln">  1631</span>		&#34;param&#34;,
<a id="L1632"></a><span class="ln">  1632</span>		&#34;hr&#34;,
<a id="L1633"></a><span class="ln">  1633</span>		&#34;input&#34;,
<a id="L1634"></a><span class="ln">  1634</span>		&#34;col     &#34;,
<a id="L1635"></a><span class="ln">  1635</span>		&#34;frame&#34;,
<a id="L1636"></a><span class="ln">  1636</span>		&#34;isindex&#34;,
<a id="L1637"></a><span class="ln">  1637</span>		&#34;base&#34;,
<a id="L1638"></a><span class="ln">  1638</span>		&#34;meta&#34;,
<a id="L1639"></a><span class="ln">  1639</span>	}
<a id="L1640"></a><span class="ln">  1640</span>	
<a id="L1641"></a><span class="ln">  1641</span>	var (
<a id="L1642"></a><span class="ln">  1642</span>		esc_quot = []byte(&#34;&amp;#34;&#34;) <span class="comment">// shorter than &#34;&amp;quot;&#34;</span>
<a id="L1643"></a><span class="ln">  1643</span>		esc_apos = []byte(&#34;&amp;#39;&#34;) <span class="comment">// shorter than &#34;&amp;apos;&#34;</span>
<a id="L1644"></a><span class="ln">  1644</span>		esc_amp  = []byte(&#34;&amp;amp;&#34;)
<a id="L1645"></a><span class="ln">  1645</span>		esc_lt   = []byte(&#34;&amp;lt;&#34;)
<a id="L1646"></a><span class="ln">  1646</span>		esc_gt   = []byte(&#34;&amp;gt;&#34;)
<a id="L1647"></a><span class="ln">  1647</span>	)
<a id="L1648"></a><span class="ln">  1648</span>	
<a id="L1649"></a><span class="ln">  1649</span>	<span class="comment">// Escape writes to w the properly escaped XML equivalent</span>
<a id="L1650"></a><span class="ln">  1650</span>	<span class="comment">// of the plain text data s.</span>
<a id="L1651"></a><span class="ln">  1651</span>	func Escape(w io.Writer, s []byte) {
<a id="L1652"></a><span class="ln">  1652</span>		var esc []byte
<a id="L1653"></a><span class="ln">  1653</span>		last := 0
<a id="L1654"></a><span class="ln">  1654</span>		for i, c := range s {
<a id="L1655"></a><span class="ln">  1655</span>			switch c {
<a id="L1656"></a><span class="ln">  1656</span>			case &#39;&#34;&#39;:
<a id="L1657"></a><span class="ln">  1657</span>				esc = esc_quot
<a id="L1658"></a><span class="ln">  1658</span>			case &#39;\&#39;&#39;:
<a id="L1659"></a><span class="ln">  1659</span>				esc = esc_apos
<a id="L1660"></a><span class="ln">  1660</span>			case &#39;&amp;&#39;:
<a id="L1661"></a><span class="ln">  1661</span>				esc = esc_amp
<a id="L1662"></a><span class="ln">  1662</span>			case &#39;&lt;&#39;:
<a id="L1663"></a><span class="ln">  1663</span>				esc = esc_lt
<a id="L1664"></a><span class="ln">  1664</span>			case &#39;&gt;&#39;:
<a id="L1665"></a><span class="ln">  1665</span>				esc = esc_gt
<a id="L1666"></a><span class="ln">  1666</span>			default:
<a id="L1667"></a><span class="ln">  1667</span>				continue
<a id="L1668"></a><span class="ln">  1668</span>			}
<a id="L1669"></a><span class="ln">  1669</span>			w.Write(s[last:i])
<a id="L1670"></a><span class="ln">  1670</span>			w.Write(esc)
<a id="L1671"></a><span class="ln">  1671</span>			last = i + 1
<a id="L1672"></a><span class="ln">  1672</span>		}
<a id="L1673"></a><span class="ln">  1673</span>		w.Write(s[last:])
<a id="L1674"></a><span class="ln">  1674</span>	}
<a id="L1675"></a><span class="ln">  1675</span>	
<a id="L1676"></a><span class="ln">  1676</span>	<span class="comment">// procInstEncoding parses the `encoding=&#34;...&#34;` or `encoding=&#39;...&#39;`</span>
<a id="L1677"></a><span class="ln">  1677</span>	<span class="comment">// value out of the provided string, returning &#34;&#34; if not found.</span>
<a id="L1678"></a><span class="ln">  1678</span>	func procInstEncoding(s string) string {
<a id="L1679"></a><span class="ln">  1679</span>		<span class="comment">// TODO: this parsing is somewhat lame and not exact.</span>
<a id="L1680"></a><span class="ln">  1680</span>		<span class="comment">// It works for all actual cases, though.</span>
<a id="L1681"></a><span class="ln">  1681</span>		idx := strings.Index(s, &#34;encoding=&#34;)
<a id="L1682"></a><span class="ln">  1682</span>		if idx == -1 {
<a id="L1683"></a><span class="ln">  1683</span>			return &#34;&#34;
<a id="L1684"></a><span class="ln">  1684</span>		}
<a id="L1685"></a><span class="ln">  1685</span>		v := s[idx+len(&#34;encoding=&#34;):]
<a id="L1686"></a><span class="ln">  1686</span>		if v == &#34;&#34; {
<a id="L1687"></a><span class="ln">  1687</span>			return &#34;&#34;
<a id="L1688"></a><span class="ln">  1688</span>		}
<a id="L1689"></a><span class="ln">  1689</span>		if v[0] != &#39;\&#39;&#39; &amp;&amp; v[0] != &#39;&#34;&#39; {
<a id="L1690"></a><span class="ln">  1690</span>			return &#34;&#34;
<a id="L1691"></a><span class="ln">  1691</span>		}
<a id="L1692"></a><span class="ln">  1692</span>		idx = strings.IndexRune(v[1:], rune(v[0]))
<a id="L1693"></a><span class="ln">  1693</span>		if idx == -1 {
<a id="L1694"></a><span class="ln">  1694</span>			return &#34;&#34;
<a id="L1695"></a><span class="ln">  1695</span>		}
<a id="L1696"></a><span class="ln">  1696</span>		return v[1 : idx+1]
<a id="L1697"></a><span class="ln">  1697</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

