<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/encoding/xml/typeinfo.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/encoding/xml/typeinfo.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package xml
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;fmt&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;reflect&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;strings&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;sync&#34;
<a id="L12"></a><span class="ln">    12</span>	)
<a id="L13"></a><span class="ln">    13</span>	
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// typeInfo holds details for the xml representation of a type.</span>
<a id="L15"></a><span class="ln">    15</span>	type typeInfo struct {
<a id="L16"></a><span class="ln">    16</span>		xmlname *fieldInfo
<a id="L17"></a><span class="ln">    17</span>		fields  []fieldInfo
<a id="L18"></a><span class="ln">    18</span>	}
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// fieldInfo holds details for the xml representation of a single field.</span>
<a id="L21"></a><span class="ln">    21</span>	type fieldInfo struct {
<a id="L22"></a><span class="ln">    22</span>		idx     []int
<a id="L23"></a><span class="ln">    23</span>		name    string
<a id="L24"></a><span class="ln">    24</span>		xmlns   string
<a id="L25"></a><span class="ln">    25</span>		flags   fieldFlags
<a id="L26"></a><span class="ln">    26</span>		parents []string
<a id="L27"></a><span class="ln">    27</span>	}
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>	type fieldFlags int
<a id="L30"></a><span class="ln">    30</span>	
<a id="L31"></a><span class="ln">    31</span>	const (
<a id="L32"></a><span class="ln">    32</span>		fElement fieldFlags = 1 &lt;&lt; iota
<a id="L33"></a><span class="ln">    33</span>		fAttr
<a id="L34"></a><span class="ln">    34</span>		fCharData
<a id="L35"></a><span class="ln">    35</span>		fInnerXml
<a id="L36"></a><span class="ln">    36</span>		fComment
<a id="L37"></a><span class="ln">    37</span>		fAny
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>		fOmitEmpty
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>		fMode = fElement | fAttr | fCharData | fInnerXml | fComment | fAny
<a id="L42"></a><span class="ln">    42</span>	)
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	var tinfoMap = make(map[reflect.Type]*typeInfo)
<a id="L45"></a><span class="ln">    45</span>	var tinfoLock sync.RWMutex
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>	var nameType = reflect.TypeOf(Name{})
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">// getTypeInfo returns the typeInfo structure with details necessary</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// for marshalling and unmarshalling typ.</span>
<a id="L51"></a><span class="ln">    51</span>	func getTypeInfo(typ reflect.Type) (*typeInfo, error) {
<a id="L52"></a><span class="ln">    52</span>		tinfoLock.RLock()
<a id="L53"></a><span class="ln">    53</span>		tinfo, ok := tinfoMap[typ]
<a id="L54"></a><span class="ln">    54</span>		tinfoLock.RUnlock()
<a id="L55"></a><span class="ln">    55</span>		if ok {
<a id="L56"></a><span class="ln">    56</span>			return tinfo, nil
<a id="L57"></a><span class="ln">    57</span>		}
<a id="L58"></a><span class="ln">    58</span>		tinfo = &amp;typeInfo{}
<a id="L59"></a><span class="ln">    59</span>		if typ.Kind() == reflect.Struct &amp;&amp; typ != nameType {
<a id="L60"></a><span class="ln">    60</span>			n := typ.NumField()
<a id="L61"></a><span class="ln">    61</span>			for i := 0; i &lt; n; i++ {
<a id="L62"></a><span class="ln">    62</span>				f := typ.Field(i)
<a id="L63"></a><span class="ln">    63</span>				if f.PkgPath != &#34;&#34; || f.Tag.Get(&#34;xml&#34;) == &#34;-&#34; {
<a id="L64"></a><span class="ln">    64</span>					continue <span class="comment">// Private field</span>
<a id="L65"></a><span class="ln">    65</span>				}
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>				<span class="comment">// For embedded structs, embed its fields.</span>
<a id="L68"></a><span class="ln">    68</span>				if f.Anonymous {
<a id="L69"></a><span class="ln">    69</span>					if f.Type.Kind() != reflect.Struct {
<a id="L70"></a><span class="ln">    70</span>						continue
<a id="L71"></a><span class="ln">    71</span>					}
<a id="L72"></a><span class="ln">    72</span>					inner, err := getTypeInfo(f.Type)
<a id="L73"></a><span class="ln">    73</span>					if err != nil {
<a id="L74"></a><span class="ln">    74</span>						return nil, err
<a id="L75"></a><span class="ln">    75</span>					}
<a id="L76"></a><span class="ln">    76</span>					for _, finfo := range inner.fields {
<a id="L77"></a><span class="ln">    77</span>						finfo.idx = append([]int{i}, finfo.idx...)
<a id="L78"></a><span class="ln">    78</span>						if err := addFieldInfo(typ, tinfo, &amp;finfo); err != nil {
<a id="L79"></a><span class="ln">    79</span>							return nil, err
<a id="L80"></a><span class="ln">    80</span>						}
<a id="L81"></a><span class="ln">    81</span>					}
<a id="L82"></a><span class="ln">    82</span>					continue
<a id="L83"></a><span class="ln">    83</span>				}
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>				finfo, err := structFieldInfo(typ, &amp;f)
<a id="L86"></a><span class="ln">    86</span>				if err != nil {
<a id="L87"></a><span class="ln">    87</span>					return nil, err
<a id="L88"></a><span class="ln">    88</span>				}
<a id="L89"></a><span class="ln">    89</span>	
<a id="L90"></a><span class="ln">    90</span>				if f.Name == &#34;XMLName&#34; {
<a id="L91"></a><span class="ln">    91</span>					tinfo.xmlname = finfo
<a id="L92"></a><span class="ln">    92</span>					continue
<a id="L93"></a><span class="ln">    93</span>				}
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>				<span class="comment">// Add the field if it doesn&#39;t conflict with other fields.</span>
<a id="L96"></a><span class="ln">    96</span>				if err := addFieldInfo(typ, tinfo, finfo); err != nil {
<a id="L97"></a><span class="ln">    97</span>					return nil, err
<a id="L98"></a><span class="ln">    98</span>				}
<a id="L99"></a><span class="ln">    99</span>			}
<a id="L100"></a><span class="ln">   100</span>		}
<a id="L101"></a><span class="ln">   101</span>		tinfoLock.Lock()
<a id="L102"></a><span class="ln">   102</span>		tinfoMap[typ] = tinfo
<a id="L103"></a><span class="ln">   103</span>		tinfoLock.Unlock()
<a id="L104"></a><span class="ln">   104</span>		return tinfo, nil
<a id="L105"></a><span class="ln">   105</span>	}
<a id="L106"></a><span class="ln">   106</span>	
<a id="L107"></a><span class="ln">   107</span>	<span class="comment">// structFieldInfo builds and returns a fieldInfo for f.</span>
<a id="L108"></a><span class="ln">   108</span>	func structFieldInfo(typ reflect.Type, f *reflect.StructField) (*fieldInfo, error) {
<a id="L109"></a><span class="ln">   109</span>		finfo := &amp;fieldInfo{idx: f.Index}
<a id="L110"></a><span class="ln">   110</span>	
<a id="L111"></a><span class="ln">   111</span>		<span class="comment">// Split the tag from the xml namespace if necessary.</span>
<a id="L112"></a><span class="ln">   112</span>		tag := f.Tag.Get(&#34;xml&#34;)
<a id="L113"></a><span class="ln">   113</span>		if i := strings.Index(tag, &#34; &#34;); i &gt;= 0 {
<a id="L114"></a><span class="ln">   114</span>			finfo.xmlns, tag = tag[:i], tag[i+1:]
<a id="L115"></a><span class="ln">   115</span>		}
<a id="L116"></a><span class="ln">   116</span>	
<a id="L117"></a><span class="ln">   117</span>		<span class="comment">// Parse flags.</span>
<a id="L118"></a><span class="ln">   118</span>		tokens := strings.Split(tag, &#34;,&#34;)
<a id="L119"></a><span class="ln">   119</span>		if len(tokens) == 1 {
<a id="L120"></a><span class="ln">   120</span>			finfo.flags = fElement
<a id="L121"></a><span class="ln">   121</span>		} else {
<a id="L122"></a><span class="ln">   122</span>			tag = tokens[0]
<a id="L123"></a><span class="ln">   123</span>			for _, flag := range tokens[1:] {
<a id="L124"></a><span class="ln">   124</span>				switch flag {
<a id="L125"></a><span class="ln">   125</span>				case &#34;attr&#34;:
<a id="L126"></a><span class="ln">   126</span>					finfo.flags |= fAttr
<a id="L127"></a><span class="ln">   127</span>				case &#34;chardata&#34;:
<a id="L128"></a><span class="ln">   128</span>					finfo.flags |= fCharData
<a id="L129"></a><span class="ln">   129</span>				case &#34;innerxml&#34;:
<a id="L130"></a><span class="ln">   130</span>					finfo.flags |= fInnerXml
<a id="L131"></a><span class="ln">   131</span>				case &#34;comment&#34;:
<a id="L132"></a><span class="ln">   132</span>					finfo.flags |= fComment
<a id="L133"></a><span class="ln">   133</span>				case &#34;any&#34;:
<a id="L134"></a><span class="ln">   134</span>					finfo.flags |= fAny
<a id="L135"></a><span class="ln">   135</span>				case &#34;omitempty&#34;:
<a id="L136"></a><span class="ln">   136</span>					finfo.flags |= fOmitEmpty
<a id="L137"></a><span class="ln">   137</span>				}
<a id="L138"></a><span class="ln">   138</span>			}
<a id="L139"></a><span class="ln">   139</span>	
<a id="L140"></a><span class="ln">   140</span>			<span class="comment">// Validate the flags used.</span>
<a id="L141"></a><span class="ln">   141</span>			valid := true
<a id="L142"></a><span class="ln">   142</span>			switch mode := finfo.flags &amp; fMode; mode {
<a id="L143"></a><span class="ln">   143</span>			case 0:
<a id="L144"></a><span class="ln">   144</span>				finfo.flags |= fElement
<a id="L145"></a><span class="ln">   145</span>			case fAttr, fCharData, fInnerXml, fComment, fAny:
<a id="L146"></a><span class="ln">   146</span>				if f.Name == &#34;XMLName&#34; || tag != &#34;&#34; &amp;&amp; mode != fAttr {
<a id="L147"></a><span class="ln">   147</span>					valid = false
<a id="L148"></a><span class="ln">   148</span>				}
<a id="L149"></a><span class="ln">   149</span>			default:
<a id="L150"></a><span class="ln">   150</span>				<span class="comment">// This will also catch multiple modes in a single field.</span>
<a id="L151"></a><span class="ln">   151</span>				valid = false
<a id="L152"></a><span class="ln">   152</span>			}
<a id="L153"></a><span class="ln">   153</span>			if finfo.flags&amp;fOmitEmpty != 0 &amp;&amp; finfo.flags&amp;(fElement|fAttr) == 0 {
<a id="L154"></a><span class="ln">   154</span>				valid = false
<a id="L155"></a><span class="ln">   155</span>			}
<a id="L156"></a><span class="ln">   156</span>			if !valid {
<a id="L157"></a><span class="ln">   157</span>				return nil, fmt.Errorf(&#34;xml: invalid tag in field %s of type %s: %q&#34;,
<a id="L158"></a><span class="ln">   158</span>					f.Name, typ, f.Tag.Get(&#34;xml&#34;))
<a id="L159"></a><span class="ln">   159</span>			}
<a id="L160"></a><span class="ln">   160</span>		}
<a id="L161"></a><span class="ln">   161</span>	
<a id="L162"></a><span class="ln">   162</span>		<span class="comment">// Use of xmlns without a name is not allowed.</span>
<a id="L163"></a><span class="ln">   163</span>		if finfo.xmlns != &#34;&#34; &amp;&amp; tag == &#34;&#34; {
<a id="L164"></a><span class="ln">   164</span>			return nil, fmt.Errorf(&#34;xml: namespace without name in field %s of type %s: %q&#34;,
<a id="L165"></a><span class="ln">   165</span>				f.Name, typ, f.Tag.Get(&#34;xml&#34;))
<a id="L166"></a><span class="ln">   166</span>		}
<a id="L167"></a><span class="ln">   167</span>	
<a id="L168"></a><span class="ln">   168</span>		if f.Name == &#34;XMLName&#34; {
<a id="L169"></a><span class="ln">   169</span>			<span class="comment">// The XMLName field records the XML element name. Don&#39;t</span>
<a id="L170"></a><span class="ln">   170</span>			<span class="comment">// process it as usual because its name should default to</span>
<a id="L171"></a><span class="ln">   171</span>			<span class="comment">// empty rather than to the field name.</span>
<a id="L172"></a><span class="ln">   172</span>			finfo.name = tag
<a id="L173"></a><span class="ln">   173</span>			return finfo, nil
<a id="L174"></a><span class="ln">   174</span>		}
<a id="L175"></a><span class="ln">   175</span>	
<a id="L176"></a><span class="ln">   176</span>		if tag == &#34;&#34; {
<a id="L177"></a><span class="ln">   177</span>			<span class="comment">// If the name part of the tag is completely empty, get</span>
<a id="L178"></a><span class="ln">   178</span>			<span class="comment">// default from XMLName of underlying struct if feasible,</span>
<a id="L179"></a><span class="ln">   179</span>			<span class="comment">// or field name otherwise.</span>
<a id="L180"></a><span class="ln">   180</span>			if xmlname := lookupXMLName(f.Type); xmlname != nil {
<a id="L181"></a><span class="ln">   181</span>				finfo.xmlns, finfo.name = xmlname.xmlns, xmlname.name
<a id="L182"></a><span class="ln">   182</span>			} else {
<a id="L183"></a><span class="ln">   183</span>				finfo.name = f.Name
<a id="L184"></a><span class="ln">   184</span>			}
<a id="L185"></a><span class="ln">   185</span>			return finfo, nil
<a id="L186"></a><span class="ln">   186</span>		}
<a id="L187"></a><span class="ln">   187</span>	
<a id="L188"></a><span class="ln">   188</span>		<span class="comment">// Prepare field name and parents.</span>
<a id="L189"></a><span class="ln">   189</span>		tokens = strings.Split(tag, &#34;&gt;&#34;)
<a id="L190"></a><span class="ln">   190</span>		if tokens[0] == &#34;&#34; {
<a id="L191"></a><span class="ln">   191</span>			tokens[0] = f.Name
<a id="L192"></a><span class="ln">   192</span>		}
<a id="L193"></a><span class="ln">   193</span>		if tokens[len(tokens)-1] == &#34;&#34; {
<a id="L194"></a><span class="ln">   194</span>			return nil, fmt.Errorf(&#34;xml: trailing &#39;&gt;&#39; in field %s of type %s&#34;, f.Name, typ)
<a id="L195"></a><span class="ln">   195</span>		}
<a id="L196"></a><span class="ln">   196</span>		finfo.name = tokens[len(tokens)-1]
<a id="L197"></a><span class="ln">   197</span>		if len(tokens) &gt; 1 {
<a id="L198"></a><span class="ln">   198</span>			finfo.parents = tokens[:len(tokens)-1]
<a id="L199"></a><span class="ln">   199</span>		}
<a id="L200"></a><span class="ln">   200</span>	
<a id="L201"></a><span class="ln">   201</span>		<span class="comment">// If the field type has an XMLName field, the names must match</span>
<a id="L202"></a><span class="ln">   202</span>		<span class="comment">// so that the behavior of both marshalling and unmarshalling</span>
<a id="L203"></a><span class="ln">   203</span>		<span class="comment">// is straightforward and unambiguous.</span>
<a id="L204"></a><span class="ln">   204</span>		if finfo.flags&amp;fElement != 0 {
<a id="L205"></a><span class="ln">   205</span>			ftyp := f.Type
<a id="L206"></a><span class="ln">   206</span>			xmlname := lookupXMLName(ftyp)
<a id="L207"></a><span class="ln">   207</span>			if xmlname != nil &amp;&amp; xmlname.name != finfo.name {
<a id="L208"></a><span class="ln">   208</span>				return nil, fmt.Errorf(&#34;xml: name %q in tag of %s.%s conflicts with name %q in %s.XMLName&#34;,
<a id="L209"></a><span class="ln">   209</span>					finfo.name, typ, f.Name, xmlname.name, ftyp)
<a id="L210"></a><span class="ln">   210</span>			}
<a id="L211"></a><span class="ln">   211</span>		}
<a id="L212"></a><span class="ln">   212</span>		return finfo, nil
<a id="L213"></a><span class="ln">   213</span>	}
<a id="L214"></a><span class="ln">   214</span>	
<a id="L215"></a><span class="ln">   215</span>	<span class="comment">// lookupXMLName returns the fieldInfo for typ&#39;s XMLName field</span>
<a id="L216"></a><span class="ln">   216</span>	<span class="comment">// in case it exists and has a valid xml field tag, otherwise</span>
<a id="L217"></a><span class="ln">   217</span>	<span class="comment">// it returns nil.</span>
<a id="L218"></a><span class="ln">   218</span>	func lookupXMLName(typ reflect.Type) (xmlname *fieldInfo) {
<a id="L219"></a><span class="ln">   219</span>		for typ.Kind() == reflect.Ptr {
<a id="L220"></a><span class="ln">   220</span>			typ = typ.Elem()
<a id="L221"></a><span class="ln">   221</span>		}
<a id="L222"></a><span class="ln">   222</span>		if typ.Kind() != reflect.Struct {
<a id="L223"></a><span class="ln">   223</span>			return nil
<a id="L224"></a><span class="ln">   224</span>		}
<a id="L225"></a><span class="ln">   225</span>		for i, n := 0, typ.NumField(); i &lt; n; i++ {
<a id="L226"></a><span class="ln">   226</span>			f := typ.Field(i)
<a id="L227"></a><span class="ln">   227</span>			if f.Name != &#34;XMLName&#34; {
<a id="L228"></a><span class="ln">   228</span>				continue
<a id="L229"></a><span class="ln">   229</span>			}
<a id="L230"></a><span class="ln">   230</span>			finfo, err := structFieldInfo(typ, &amp;f)
<a id="L231"></a><span class="ln">   231</span>			if finfo.name != &#34;&#34; &amp;&amp; err == nil {
<a id="L232"></a><span class="ln">   232</span>				return finfo
<a id="L233"></a><span class="ln">   233</span>			}
<a id="L234"></a><span class="ln">   234</span>			<span class="comment">// Also consider errors as a non-existent field tag</span>
<a id="L235"></a><span class="ln">   235</span>			<span class="comment">// and let getTypeInfo itself report the error.</span>
<a id="L236"></a><span class="ln">   236</span>			break
<a id="L237"></a><span class="ln">   237</span>		}
<a id="L238"></a><span class="ln">   238</span>		return nil
<a id="L239"></a><span class="ln">   239</span>	}
<a id="L240"></a><span class="ln">   240</span>	
<a id="L241"></a><span class="ln">   241</span>	func min(a, b int) int {
<a id="L242"></a><span class="ln">   242</span>		if a &lt;= b {
<a id="L243"></a><span class="ln">   243</span>			return a
<a id="L244"></a><span class="ln">   244</span>		}
<a id="L245"></a><span class="ln">   245</span>		return b
<a id="L246"></a><span class="ln">   246</span>	}
<a id="L247"></a><span class="ln">   247</span>	
<a id="L248"></a><span class="ln">   248</span>	<span class="comment">// addFieldInfo adds finfo to tinfo.fields if there are no</span>
<a id="L249"></a><span class="ln">   249</span>	<span class="comment">// conflicts, or if conflicts arise from previous fields that were</span>
<a id="L250"></a><span class="ln">   250</span>	<span class="comment">// obtained from deeper embedded structures than finfo. In the latter</span>
<a id="L251"></a><span class="ln">   251</span>	<span class="comment">// case, the conflicting entries are dropped.</span>
<a id="L252"></a><span class="ln">   252</span>	<span class="comment">// A conflict occurs when the path (parent + name) to a field is</span>
<a id="L253"></a><span class="ln">   253</span>	<span class="comment">// itself a prefix of another path, or when two paths match exactly.</span>
<a id="L254"></a><span class="ln">   254</span>	<span class="comment">// It is okay for field paths to share a common, shorter prefix.</span>
<a id="L255"></a><span class="ln">   255</span>	func addFieldInfo(typ reflect.Type, tinfo *typeInfo, newf *fieldInfo) error {
<a id="L256"></a><span class="ln">   256</span>		var conflicts []int
<a id="L257"></a><span class="ln">   257</span>	Loop:
<a id="L258"></a><span class="ln">   258</span>		<span class="comment">// First, figure all conflicts. Most working code will have none.</span>
<a id="L259"></a><span class="ln">   259</span>		for i := range tinfo.fields {
<a id="L260"></a><span class="ln">   260</span>			oldf := &amp;tinfo.fields[i]
<a id="L261"></a><span class="ln">   261</span>			if oldf.flags&amp;fMode != newf.flags&amp;fMode {
<a id="L262"></a><span class="ln">   262</span>				continue
<a id="L263"></a><span class="ln">   263</span>			}
<a id="L264"></a><span class="ln">   264</span>			minl := min(len(newf.parents), len(oldf.parents))
<a id="L265"></a><span class="ln">   265</span>			for p := 0; p &lt; minl; p++ {
<a id="L266"></a><span class="ln">   266</span>				if oldf.parents[p] != newf.parents[p] {
<a id="L267"></a><span class="ln">   267</span>					continue Loop
<a id="L268"></a><span class="ln">   268</span>				}
<a id="L269"></a><span class="ln">   269</span>			}
<a id="L270"></a><span class="ln">   270</span>			if len(oldf.parents) &gt; len(newf.parents) {
<a id="L271"></a><span class="ln">   271</span>				if oldf.parents[len(newf.parents)] == newf.name {
<a id="L272"></a><span class="ln">   272</span>					conflicts = append(conflicts, i)
<a id="L273"></a><span class="ln">   273</span>				}
<a id="L274"></a><span class="ln">   274</span>			} else if len(oldf.parents) &lt; len(newf.parents) {
<a id="L275"></a><span class="ln">   275</span>				if newf.parents[len(oldf.parents)] == oldf.name {
<a id="L276"></a><span class="ln">   276</span>					conflicts = append(conflicts, i)
<a id="L277"></a><span class="ln">   277</span>				}
<a id="L278"></a><span class="ln">   278</span>			} else {
<a id="L279"></a><span class="ln">   279</span>				if newf.name == oldf.name {
<a id="L280"></a><span class="ln">   280</span>					conflicts = append(conflicts, i)
<a id="L281"></a><span class="ln">   281</span>				}
<a id="L282"></a><span class="ln">   282</span>			}
<a id="L283"></a><span class="ln">   283</span>		}
<a id="L284"></a><span class="ln">   284</span>		<span class="comment">// Without conflicts, add the new field and return.</span>
<a id="L285"></a><span class="ln">   285</span>		if conflicts == nil {
<a id="L286"></a><span class="ln">   286</span>			tinfo.fields = append(tinfo.fields, *newf)
<a id="L287"></a><span class="ln">   287</span>			return nil
<a id="L288"></a><span class="ln">   288</span>		}
<a id="L289"></a><span class="ln">   289</span>	
<a id="L290"></a><span class="ln">   290</span>		<span class="comment">// If any conflict is shallower, ignore the new field.</span>
<a id="L291"></a><span class="ln">   291</span>		<span class="comment">// This matches the Go field resolution on embedding.</span>
<a id="L292"></a><span class="ln">   292</span>		for _, i := range conflicts {
<a id="L293"></a><span class="ln">   293</span>			if len(tinfo.fields[i].idx) &lt; len(newf.idx) {
<a id="L294"></a><span class="ln">   294</span>				return nil
<a id="L295"></a><span class="ln">   295</span>			}
<a id="L296"></a><span class="ln">   296</span>		}
<a id="L297"></a><span class="ln">   297</span>	
<a id="L298"></a><span class="ln">   298</span>		<span class="comment">// Otherwise, if any of them is at the same depth level, it&#39;s an error.</span>
<a id="L299"></a><span class="ln">   299</span>		for _, i := range conflicts {
<a id="L300"></a><span class="ln">   300</span>			oldf := &amp;tinfo.fields[i]
<a id="L301"></a><span class="ln">   301</span>			if len(oldf.idx) == len(newf.idx) {
<a id="L302"></a><span class="ln">   302</span>				f1 := typ.FieldByIndex(oldf.idx)
<a id="L303"></a><span class="ln">   303</span>				f2 := typ.FieldByIndex(newf.idx)
<a id="L304"></a><span class="ln">   304</span>				return &amp;TagPathError{typ, f1.Name, f1.Tag.Get(&#34;xml&#34;), f2.Name, f2.Tag.Get(&#34;xml&#34;)}
<a id="L305"></a><span class="ln">   305</span>			}
<a id="L306"></a><span class="ln">   306</span>		}
<a id="L307"></a><span class="ln">   307</span>	
<a id="L308"></a><span class="ln">   308</span>		<span class="comment">// Otherwise, the new field is shallower, and thus takes precedence,</span>
<a id="L309"></a><span class="ln">   309</span>		<span class="comment">// so drop the conflicting fields from tinfo and append the new one.</span>
<a id="L310"></a><span class="ln">   310</span>		for c := len(conflicts) - 1; c &gt;= 0; c-- {
<a id="L311"></a><span class="ln">   311</span>			i := conflicts[c]
<a id="L312"></a><span class="ln">   312</span>			copy(tinfo.fields[i:], tinfo.fields[i+1:])
<a id="L313"></a><span class="ln">   313</span>			tinfo.fields = tinfo.fields[:len(tinfo.fields)-1]
<a id="L314"></a><span class="ln">   314</span>		}
<a id="L315"></a><span class="ln">   315</span>		tinfo.fields = append(tinfo.fields, *newf)
<a id="L316"></a><span class="ln">   316</span>		return nil
<a id="L317"></a><span class="ln">   317</span>	}
<a id="L318"></a><span class="ln">   318</span>	
<a id="L319"></a><span class="ln">   319</span>	<span class="comment">// A TagPathError represents an error in the unmarshalling process</span>
<a id="L320"></a><span class="ln">   320</span>	<span class="comment">// caused by the use of field tags with conflicting paths.</span>
<a id="L321"></a><span class="ln">   321</span>	type TagPathError struct {
<a id="L322"></a><span class="ln">   322</span>		Struct       reflect.Type
<a id="L323"></a><span class="ln">   323</span>		Field1, Tag1 string
<a id="L324"></a><span class="ln">   324</span>		Field2, Tag2 string
<a id="L325"></a><span class="ln">   325</span>	}
<a id="L326"></a><span class="ln">   326</span>	
<a id="L327"></a><span class="ln">   327</span>	func (e *TagPathError) Error() string {
<a id="L328"></a><span class="ln">   328</span>		return fmt.Sprintf(&#34;%s field %q with tag %q conflicts with field %q with tag %q&#34;, e.Struct, e.Field1, e.Tag1, e.Field2, e.Tag2)
<a id="L329"></a><span class="ln">   329</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

