<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/encoding/xml/read.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/encoding/xml/read.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package xml
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bytes&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;errors&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;reflect&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;strconv&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;strings&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;time&#34;
<a id="L14"></a><span class="ln">    14</span>	)
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// BUG(rsc): Mapping between XML elements and data structures is inherently flawed:</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// an XML element is an order-dependent collection of anonymous</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// values, while a data structure is an order-independent collection</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// of named values.</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// See package json for a textual representation more suitable</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// to data structures.</span>
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// Unmarshal parses the XML-encoded data and stores the result in</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// the value pointed to by v, which must be an arbitrary struct,</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// slice, or string. Well-formed data that does not fit into v is</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// discarded.</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">//</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// Because Unmarshal uses the reflect package, it can only assign</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// to exported (upper case) fields.  Unmarshal uses a case-sensitive</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// comparison to match XML element names to tag values and struct</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// field names.</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">//</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// Unmarshal maps an XML element to a struct using the following rules.</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// In the rules, the tag of a field refers to the value associated with the</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// key &#39;xml&#39; in the struct field&#39;s tag (see the example above).</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">//</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">//   * If the struct has a field of type []byte or string with tag</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//      &#34;,innerxml&#34;, Unmarshal accumulates the raw XML nested inside the</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">//      element in that field.  The rest of the rules still apply.</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">//</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">//   * If the struct has a field named XMLName of type xml.Name,</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">//      Unmarshal records the element name in that field.</span>
<a id="L43"></a><span class="ln">    43</span>	<span class="comment">//</span>
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">//   * If the XMLName field has an associated tag of the form</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">//      &#34;name&#34; or &#34;namespace-URL name&#34;, the XML element must have</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">//      the given name (and, optionally, name space) or else Unmarshal</span>
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">//      returns an error.</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">//</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">//   * If the XML element has an attribute whose name matches a</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">//      struct field name with an associated tag containing &#34;,attr&#34; or</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">//      the explicit name in a struct field tag of the form &#34;name,attr&#34;,</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">//      Unmarshal records the attribute value in that field.</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">//</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">//   * If the XML element contains character data, that data is</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">//      accumulated in the first struct field that has tag &#34;chardata&#34;.</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">//      The struct field may have type []byte or string.</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">//      If there is no such field, the character data is discarded.</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">//</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">//   * If the XML element contains comments, they are accumulated in</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">//      the first struct field that has tag &#34;,comments&#34;.  The struct</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">//      field may have type []byte or string.  If there is no such</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">//      field, the comments are discarded.</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">//</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">//   * If the XML element contains a sub-element whose name matches</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">//      the prefix of a tag formatted as &#34;a&#34; or &#34;a&gt;b&gt;c&#34;, unmarshal</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">//      will descend into the XML structure looking for elements with the</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">//      given names, and will map the innermost elements to that struct</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">//      field. A tag starting with &#34;&gt;&#34; is equivalent to one starting</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">//      with the field name followed by &#34;&gt;&#34;.</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">//</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">//   * If the XML element contains a sub-element whose name matches</span>
<a id="L72"></a><span class="ln">    72</span>	<span class="comment">//      a struct field&#39;s XMLName tag and the struct field has no</span>
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">//      explicit name tag as per the previous rule, unmarshal maps</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">//      the sub-element to that struct field.</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">//</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">//   * If the XML element contains a sub-element whose name matches a</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">//      field without any mode flags (&#34;,attr&#34;, &#34;,chardata&#34;, etc), Unmarshal</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">//      maps the sub-element to that struct field.</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">//</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">//   * If the XML element contains a sub-element that hasn&#39;t matched any</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">//      of the above rules and the struct has a field with tag &#34;,any&#34;,</span>
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">//      unmarshal maps the sub-element to that struct field.</span>
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">//</span>
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">//   * A non-pointer anonymous struct field is handled as if the</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">//      fields of its value were part of the outer struct.</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">//</span>
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">//   * A struct field with tag &#34;-&#34; is never unmarshalled into.</span>
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">//</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">// Unmarshal maps an XML element to a string or []byte by saving the</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// concatenation of that element&#39;s character data in the string or</span>
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// []byte. The saved []byte is never nil.</span>
<a id="L92"></a><span class="ln">    92</span>	<span class="comment">//</span>
<a id="L93"></a><span class="ln">    93</span>	<span class="comment">// Unmarshal maps an attribute value to a string or []byte by saving</span>
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// the value in the string or slice.</span>
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">//</span>
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">// Unmarshal maps an XML element to a slice by extending the length of</span>
<a id="L97"></a><span class="ln">    97</span>	<span class="comment">// the slice and mapping the element to the newly created value.</span>
<a id="L98"></a><span class="ln">    98</span>	<span class="comment">//</span>
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">// Unmarshal maps an XML element or attribute value to a bool by</span>
<a id="L100"></a><span class="ln">   100</span>	<span class="comment">// setting it to the boolean value represented by the string.</span>
<a id="L101"></a><span class="ln">   101</span>	<span class="comment">//</span>
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">// Unmarshal maps an XML element or attribute value to an integer or</span>
<a id="L103"></a><span class="ln">   103</span>	<span class="comment">// floating-point field by setting the field to the result of</span>
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">// interpreting the string value in decimal.  There is no check for</span>
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// overflow.</span>
<a id="L106"></a><span class="ln">   106</span>	<span class="comment">//</span>
<a id="L107"></a><span class="ln">   107</span>	<span class="comment">// Unmarshal maps an XML element to an xml.Name by recording the</span>
<a id="L108"></a><span class="ln">   108</span>	<span class="comment">// element name.</span>
<a id="L109"></a><span class="ln">   109</span>	<span class="comment">//</span>
<a id="L110"></a><span class="ln">   110</span>	<span class="comment">// Unmarshal maps an XML element to a pointer by setting the pointer</span>
<a id="L111"></a><span class="ln">   111</span>	<span class="comment">// to a freshly allocated value and then mapping the element to that value.</span>
<a id="L112"></a><span class="ln">   112</span>	<span class="comment">//</span>
<a id="L113"></a><span class="ln">   113</span>	func Unmarshal(data []byte, v interface{}) error {
<a id="L114"></a><span class="ln">   114</span>		return NewDecoder(bytes.NewBuffer(data)).Decode(v)
<a id="L115"></a><span class="ln">   115</span>	}
<a id="L116"></a><span class="ln">   116</span>	
<a id="L117"></a><span class="ln">   117</span>	<span class="comment">// Decode works like xml.Unmarshal, except it reads the decoder</span>
<a id="L118"></a><span class="ln">   118</span>	<span class="comment">// stream to find the start element.</span>
<a id="L119"></a><span class="ln">   119</span>	func (d *Decoder) Decode(v interface{}) error {
<a id="L120"></a><span class="ln">   120</span>		return d.DecodeElement(v, nil)
<a id="L121"></a><span class="ln">   121</span>	}
<a id="L122"></a><span class="ln">   122</span>	
<a id="L123"></a><span class="ln">   123</span>	<span class="comment">// DecodeElement works like xml.Unmarshal except that it takes</span>
<a id="L124"></a><span class="ln">   124</span>	<span class="comment">// a pointer to the start XML element to decode into v.</span>
<a id="L125"></a><span class="ln">   125</span>	<span class="comment">// It is useful when a client reads some raw XML tokens itself</span>
<a id="L126"></a><span class="ln">   126</span>	<span class="comment">// but also wants to defer to Unmarshal for some elements.</span>
<a id="L127"></a><span class="ln">   127</span>	func (d *Decoder) DecodeElement(v interface{}, start *StartElement) error {
<a id="L128"></a><span class="ln">   128</span>		val := reflect.ValueOf(v)
<a id="L129"></a><span class="ln">   129</span>		if val.Kind() != reflect.Ptr {
<a id="L130"></a><span class="ln">   130</span>			return errors.New(&#34;non-pointer passed to Unmarshal&#34;)
<a id="L131"></a><span class="ln">   131</span>		}
<a id="L132"></a><span class="ln">   132</span>		return d.unmarshal(val.Elem(), start)
<a id="L133"></a><span class="ln">   133</span>	}
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">// An UnmarshalError represents an error in the unmarshalling process.</span>
<a id="L136"></a><span class="ln">   136</span>	type UnmarshalError string
<a id="L137"></a><span class="ln">   137</span>	
<a id="L138"></a><span class="ln">   138</span>	func (e UnmarshalError) Error() string { return string(e) }
<a id="L139"></a><span class="ln">   139</span>	
<a id="L140"></a><span class="ln">   140</span>	<span class="comment">// Unmarshal a single XML element into val.</span>
<a id="L141"></a><span class="ln">   141</span>	func (p *Decoder) unmarshal(val reflect.Value, start *StartElement) error {
<a id="L142"></a><span class="ln">   142</span>		<span class="comment">// Find start element if we need it.</span>
<a id="L143"></a><span class="ln">   143</span>		if start == nil {
<a id="L144"></a><span class="ln">   144</span>			for {
<a id="L145"></a><span class="ln">   145</span>				tok, err := p.Token()
<a id="L146"></a><span class="ln">   146</span>				if err != nil {
<a id="L147"></a><span class="ln">   147</span>					return err
<a id="L148"></a><span class="ln">   148</span>				}
<a id="L149"></a><span class="ln">   149</span>				if t, ok := tok.(StartElement); ok {
<a id="L150"></a><span class="ln">   150</span>					start = &amp;t
<a id="L151"></a><span class="ln">   151</span>					break
<a id="L152"></a><span class="ln">   152</span>				}
<a id="L153"></a><span class="ln">   153</span>			}
<a id="L154"></a><span class="ln">   154</span>		}
<a id="L155"></a><span class="ln">   155</span>	
<a id="L156"></a><span class="ln">   156</span>		if pv := val; pv.Kind() == reflect.Ptr {
<a id="L157"></a><span class="ln">   157</span>			if pv.IsNil() {
<a id="L158"></a><span class="ln">   158</span>				pv.Set(reflect.New(pv.Type().Elem()))
<a id="L159"></a><span class="ln">   159</span>			}
<a id="L160"></a><span class="ln">   160</span>			val = pv.Elem()
<a id="L161"></a><span class="ln">   161</span>		}
<a id="L162"></a><span class="ln">   162</span>	
<a id="L163"></a><span class="ln">   163</span>		var (
<a id="L164"></a><span class="ln">   164</span>			data         []byte
<a id="L165"></a><span class="ln">   165</span>			saveData     reflect.Value
<a id="L166"></a><span class="ln">   166</span>			comment      []byte
<a id="L167"></a><span class="ln">   167</span>			saveComment  reflect.Value
<a id="L168"></a><span class="ln">   168</span>			saveXML      reflect.Value
<a id="L169"></a><span class="ln">   169</span>			saveXMLIndex int
<a id="L170"></a><span class="ln">   170</span>			saveXMLData  []byte
<a id="L171"></a><span class="ln">   171</span>			saveAny      reflect.Value
<a id="L172"></a><span class="ln">   172</span>			sv           reflect.Value
<a id="L173"></a><span class="ln">   173</span>			tinfo        *typeInfo
<a id="L174"></a><span class="ln">   174</span>			err          error
<a id="L175"></a><span class="ln">   175</span>		)
<a id="L176"></a><span class="ln">   176</span>	
<a id="L177"></a><span class="ln">   177</span>		switch v := val; v.Kind() {
<a id="L178"></a><span class="ln">   178</span>		default:
<a id="L179"></a><span class="ln">   179</span>			return errors.New(&#34;unknown type &#34; + v.Type().String())
<a id="L180"></a><span class="ln">   180</span>	
<a id="L181"></a><span class="ln">   181</span>		case reflect.Interface:
<a id="L182"></a><span class="ln">   182</span>			<span class="comment">// TODO: For now, simply ignore the field. In the near</span>
<a id="L183"></a><span class="ln">   183</span>			<span class="comment">//       future we may choose to unmarshal the start</span>
<a id="L184"></a><span class="ln">   184</span>			<span class="comment">//       element on it, if not nil.</span>
<a id="L185"></a><span class="ln">   185</span>			return p.Skip()
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>		case reflect.Slice:
<a id="L188"></a><span class="ln">   188</span>			typ := v.Type()
<a id="L189"></a><span class="ln">   189</span>			if typ.Elem().Kind() == reflect.Uint8 {
<a id="L190"></a><span class="ln">   190</span>				<span class="comment">// []byte</span>
<a id="L191"></a><span class="ln">   191</span>				saveData = v
<a id="L192"></a><span class="ln">   192</span>				break
<a id="L193"></a><span class="ln">   193</span>			}
<a id="L194"></a><span class="ln">   194</span>	
<a id="L195"></a><span class="ln">   195</span>			<span class="comment">// Slice of element values.</span>
<a id="L196"></a><span class="ln">   196</span>			<span class="comment">// Grow slice.</span>
<a id="L197"></a><span class="ln">   197</span>			n := v.Len()
<a id="L198"></a><span class="ln">   198</span>			if n &gt;= v.Cap() {
<a id="L199"></a><span class="ln">   199</span>				ncap := 2 * n
<a id="L200"></a><span class="ln">   200</span>				if ncap &lt; 4 {
<a id="L201"></a><span class="ln">   201</span>					ncap = 4
<a id="L202"></a><span class="ln">   202</span>				}
<a id="L203"></a><span class="ln">   203</span>				new := reflect.MakeSlice(typ, n, ncap)
<a id="L204"></a><span class="ln">   204</span>				reflect.Copy(new, v)
<a id="L205"></a><span class="ln">   205</span>				v.Set(new)
<a id="L206"></a><span class="ln">   206</span>			}
<a id="L207"></a><span class="ln">   207</span>			v.SetLen(n + 1)
<a id="L208"></a><span class="ln">   208</span>	
<a id="L209"></a><span class="ln">   209</span>			<span class="comment">// Recur to read element into slice.</span>
<a id="L210"></a><span class="ln">   210</span>			if err := p.unmarshal(v.Index(n), start); err != nil {
<a id="L211"></a><span class="ln">   211</span>				v.SetLen(n)
<a id="L212"></a><span class="ln">   212</span>				return err
<a id="L213"></a><span class="ln">   213</span>			}
<a id="L214"></a><span class="ln">   214</span>			return nil
<a id="L215"></a><span class="ln">   215</span>	
<a id="L216"></a><span class="ln">   216</span>		case reflect.Bool, reflect.Float32, reflect.Float64, reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64, reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr, reflect.String:
<a id="L217"></a><span class="ln">   217</span>			saveData = v
<a id="L218"></a><span class="ln">   218</span>	
<a id="L219"></a><span class="ln">   219</span>		case reflect.Struct:
<a id="L220"></a><span class="ln">   220</span>			typ := v.Type()
<a id="L221"></a><span class="ln">   221</span>			if typ == nameType {
<a id="L222"></a><span class="ln">   222</span>				v.Set(reflect.ValueOf(start.Name))
<a id="L223"></a><span class="ln">   223</span>				break
<a id="L224"></a><span class="ln">   224</span>			}
<a id="L225"></a><span class="ln">   225</span>			if typ == timeType {
<a id="L226"></a><span class="ln">   226</span>				saveData = v
<a id="L227"></a><span class="ln">   227</span>				break
<a id="L228"></a><span class="ln">   228</span>			}
<a id="L229"></a><span class="ln">   229</span>	
<a id="L230"></a><span class="ln">   230</span>			sv = v
<a id="L231"></a><span class="ln">   231</span>			tinfo, err = getTypeInfo(typ)
<a id="L232"></a><span class="ln">   232</span>			if err != nil {
<a id="L233"></a><span class="ln">   233</span>				return err
<a id="L234"></a><span class="ln">   234</span>			}
<a id="L235"></a><span class="ln">   235</span>	
<a id="L236"></a><span class="ln">   236</span>			<span class="comment">// Validate and assign element name.</span>
<a id="L237"></a><span class="ln">   237</span>			if tinfo.xmlname != nil {
<a id="L238"></a><span class="ln">   238</span>				finfo := tinfo.xmlname
<a id="L239"></a><span class="ln">   239</span>				if finfo.name != &#34;&#34; &amp;&amp; finfo.name != start.Name.Local {
<a id="L240"></a><span class="ln">   240</span>					return UnmarshalError(&#34;expected element type &lt;&#34; + finfo.name + &#34;&gt; but have &lt;&#34; + start.Name.Local + &#34;&gt;&#34;)
<a id="L241"></a><span class="ln">   241</span>				}
<a id="L242"></a><span class="ln">   242</span>				if finfo.xmlns != &#34;&#34; &amp;&amp; finfo.xmlns != start.Name.Space {
<a id="L243"></a><span class="ln">   243</span>					e := &#34;expected element &lt;&#34; + finfo.name + &#34;&gt; in name space &#34; + finfo.xmlns + &#34; but have &#34;
<a id="L244"></a><span class="ln">   244</span>					if start.Name.Space == &#34;&#34; {
<a id="L245"></a><span class="ln">   245</span>						e += &#34;no name space&#34;
<a id="L246"></a><span class="ln">   246</span>					} else {
<a id="L247"></a><span class="ln">   247</span>						e += start.Name.Space
<a id="L248"></a><span class="ln">   248</span>					}
<a id="L249"></a><span class="ln">   249</span>					return UnmarshalError(e)
<a id="L250"></a><span class="ln">   250</span>				}
<a id="L251"></a><span class="ln">   251</span>				fv := sv.FieldByIndex(finfo.idx)
<a id="L252"></a><span class="ln">   252</span>				if _, ok := fv.Interface().(Name); ok {
<a id="L253"></a><span class="ln">   253</span>					fv.Set(reflect.ValueOf(start.Name))
<a id="L254"></a><span class="ln">   254</span>				}
<a id="L255"></a><span class="ln">   255</span>			}
<a id="L256"></a><span class="ln">   256</span>	
<a id="L257"></a><span class="ln">   257</span>			<span class="comment">// Assign attributes.</span>
<a id="L258"></a><span class="ln">   258</span>			<span class="comment">// Also, determine whether we need to save character data or comments.</span>
<a id="L259"></a><span class="ln">   259</span>			for i := range tinfo.fields {
<a id="L260"></a><span class="ln">   260</span>				finfo := &amp;tinfo.fields[i]
<a id="L261"></a><span class="ln">   261</span>				switch finfo.flags &amp; fMode {
<a id="L262"></a><span class="ln">   262</span>				case fAttr:
<a id="L263"></a><span class="ln">   263</span>					strv := sv.FieldByIndex(finfo.idx)
<a id="L264"></a><span class="ln">   264</span>					<span class="comment">// Look for attribute.</span>
<a id="L265"></a><span class="ln">   265</span>					for _, a := range start.Attr {
<a id="L266"></a><span class="ln">   266</span>						if a.Name.Local == finfo.name {
<a id="L267"></a><span class="ln">   267</span>							copyValue(strv, []byte(a.Value))
<a id="L268"></a><span class="ln">   268</span>							break
<a id="L269"></a><span class="ln">   269</span>						}
<a id="L270"></a><span class="ln">   270</span>					}
<a id="L271"></a><span class="ln">   271</span>	
<a id="L272"></a><span class="ln">   272</span>				case fCharData:
<a id="L273"></a><span class="ln">   273</span>					if !saveData.IsValid() {
<a id="L274"></a><span class="ln">   274</span>						saveData = sv.FieldByIndex(finfo.idx)
<a id="L275"></a><span class="ln">   275</span>					}
<a id="L276"></a><span class="ln">   276</span>	
<a id="L277"></a><span class="ln">   277</span>				case fComment:
<a id="L278"></a><span class="ln">   278</span>					if !saveComment.IsValid() {
<a id="L279"></a><span class="ln">   279</span>						saveComment = sv.FieldByIndex(finfo.idx)
<a id="L280"></a><span class="ln">   280</span>					}
<a id="L281"></a><span class="ln">   281</span>	
<a id="L282"></a><span class="ln">   282</span>				case fAny:
<a id="L283"></a><span class="ln">   283</span>					if !saveAny.IsValid() {
<a id="L284"></a><span class="ln">   284</span>						saveAny = sv.FieldByIndex(finfo.idx)
<a id="L285"></a><span class="ln">   285</span>					}
<a id="L286"></a><span class="ln">   286</span>	
<a id="L287"></a><span class="ln">   287</span>				case fInnerXml:
<a id="L288"></a><span class="ln">   288</span>					if !saveXML.IsValid() {
<a id="L289"></a><span class="ln">   289</span>						saveXML = sv.FieldByIndex(finfo.idx)
<a id="L290"></a><span class="ln">   290</span>						if p.saved == nil {
<a id="L291"></a><span class="ln">   291</span>							saveXMLIndex = 0
<a id="L292"></a><span class="ln">   292</span>							p.saved = new(bytes.Buffer)
<a id="L293"></a><span class="ln">   293</span>						} else {
<a id="L294"></a><span class="ln">   294</span>							saveXMLIndex = p.savedOffset()
<a id="L295"></a><span class="ln">   295</span>						}
<a id="L296"></a><span class="ln">   296</span>					}
<a id="L297"></a><span class="ln">   297</span>				}
<a id="L298"></a><span class="ln">   298</span>			}
<a id="L299"></a><span class="ln">   299</span>		}
<a id="L300"></a><span class="ln">   300</span>	
<a id="L301"></a><span class="ln">   301</span>		<span class="comment">// Find end element.</span>
<a id="L302"></a><span class="ln">   302</span>		<span class="comment">// Process sub-elements along the way.</span>
<a id="L303"></a><span class="ln">   303</span>	Loop:
<a id="L304"></a><span class="ln">   304</span>		for {
<a id="L305"></a><span class="ln">   305</span>			var savedOffset int
<a id="L306"></a><span class="ln">   306</span>			if saveXML.IsValid() {
<a id="L307"></a><span class="ln">   307</span>				savedOffset = p.savedOffset()
<a id="L308"></a><span class="ln">   308</span>			}
<a id="L309"></a><span class="ln">   309</span>			tok, err := p.Token()
<a id="L310"></a><span class="ln">   310</span>			if err != nil {
<a id="L311"></a><span class="ln">   311</span>				return err
<a id="L312"></a><span class="ln">   312</span>			}
<a id="L313"></a><span class="ln">   313</span>			switch t := tok.(type) {
<a id="L314"></a><span class="ln">   314</span>			case StartElement:
<a id="L315"></a><span class="ln">   315</span>				consumed := false
<a id="L316"></a><span class="ln">   316</span>				if sv.IsValid() {
<a id="L317"></a><span class="ln">   317</span>					consumed, err = p.unmarshalPath(tinfo, sv, nil, &amp;t)
<a id="L318"></a><span class="ln">   318</span>					if err != nil {
<a id="L319"></a><span class="ln">   319</span>						return err
<a id="L320"></a><span class="ln">   320</span>					}
<a id="L321"></a><span class="ln">   321</span>					if !consumed &amp;&amp; saveAny.IsValid() {
<a id="L322"></a><span class="ln">   322</span>						consumed = true
<a id="L323"></a><span class="ln">   323</span>						if err := p.unmarshal(saveAny, &amp;t); err != nil {
<a id="L324"></a><span class="ln">   324</span>							return err
<a id="L325"></a><span class="ln">   325</span>						}
<a id="L326"></a><span class="ln">   326</span>					}
<a id="L327"></a><span class="ln">   327</span>				}
<a id="L328"></a><span class="ln">   328</span>				if !consumed {
<a id="L329"></a><span class="ln">   329</span>					if err := p.Skip(); err != nil {
<a id="L330"></a><span class="ln">   330</span>						return err
<a id="L331"></a><span class="ln">   331</span>					}
<a id="L332"></a><span class="ln">   332</span>				}
<a id="L333"></a><span class="ln">   333</span>	
<a id="L334"></a><span class="ln">   334</span>			case EndElement:
<a id="L335"></a><span class="ln">   335</span>				if saveXML.IsValid() {
<a id="L336"></a><span class="ln">   336</span>					saveXMLData = p.saved.Bytes()[saveXMLIndex:savedOffset]
<a id="L337"></a><span class="ln">   337</span>					if saveXMLIndex == 0 {
<a id="L338"></a><span class="ln">   338</span>						p.saved = nil
<a id="L339"></a><span class="ln">   339</span>					}
<a id="L340"></a><span class="ln">   340</span>				}
<a id="L341"></a><span class="ln">   341</span>				break Loop
<a id="L342"></a><span class="ln">   342</span>	
<a id="L343"></a><span class="ln">   343</span>			case CharData:
<a id="L344"></a><span class="ln">   344</span>				if saveData.IsValid() {
<a id="L345"></a><span class="ln">   345</span>					data = append(data, t...)
<a id="L346"></a><span class="ln">   346</span>				}
<a id="L347"></a><span class="ln">   347</span>	
<a id="L348"></a><span class="ln">   348</span>			case Comment:
<a id="L349"></a><span class="ln">   349</span>				if saveComment.IsValid() {
<a id="L350"></a><span class="ln">   350</span>					comment = append(comment, t...)
<a id="L351"></a><span class="ln">   351</span>				}
<a id="L352"></a><span class="ln">   352</span>			}
<a id="L353"></a><span class="ln">   353</span>		}
<a id="L354"></a><span class="ln">   354</span>	
<a id="L355"></a><span class="ln">   355</span>		if err := copyValue(saveData, data); err != nil {
<a id="L356"></a><span class="ln">   356</span>			return err
<a id="L357"></a><span class="ln">   357</span>		}
<a id="L358"></a><span class="ln">   358</span>	
<a id="L359"></a><span class="ln">   359</span>		switch t := saveComment; t.Kind() {
<a id="L360"></a><span class="ln">   360</span>		case reflect.String:
<a id="L361"></a><span class="ln">   361</span>			t.SetString(string(comment))
<a id="L362"></a><span class="ln">   362</span>		case reflect.Slice:
<a id="L363"></a><span class="ln">   363</span>			t.Set(reflect.ValueOf(comment))
<a id="L364"></a><span class="ln">   364</span>		}
<a id="L365"></a><span class="ln">   365</span>	
<a id="L366"></a><span class="ln">   366</span>		switch t := saveXML; t.Kind() {
<a id="L367"></a><span class="ln">   367</span>		case reflect.String:
<a id="L368"></a><span class="ln">   368</span>			t.SetString(string(saveXMLData))
<a id="L369"></a><span class="ln">   369</span>		case reflect.Slice:
<a id="L370"></a><span class="ln">   370</span>			t.Set(reflect.ValueOf(saveXMLData))
<a id="L371"></a><span class="ln">   371</span>		}
<a id="L372"></a><span class="ln">   372</span>	
<a id="L373"></a><span class="ln">   373</span>		return nil
<a id="L374"></a><span class="ln">   374</span>	}
<a id="L375"></a><span class="ln">   375</span>	
<a id="L376"></a><span class="ln">   376</span>	func copyValue(dst reflect.Value, src []byte) (err error) {
<a id="L377"></a><span class="ln">   377</span>		<span class="comment">// Helper functions for integer and unsigned integer conversions</span>
<a id="L378"></a><span class="ln">   378</span>		var itmp int64
<a id="L379"></a><span class="ln">   379</span>		getInt64 := func() bool {
<a id="L380"></a><span class="ln">   380</span>			itmp, err = strconv.ParseInt(string(src), 10, 64)
<a id="L381"></a><span class="ln">   381</span>			<span class="comment">// TODO: should check sizes</span>
<a id="L382"></a><span class="ln">   382</span>			return err == nil
<a id="L383"></a><span class="ln">   383</span>		}
<a id="L384"></a><span class="ln">   384</span>		var utmp uint64
<a id="L385"></a><span class="ln">   385</span>		getUint64 := func() bool {
<a id="L386"></a><span class="ln">   386</span>			utmp, err = strconv.ParseUint(string(src), 10, 64)
<a id="L387"></a><span class="ln">   387</span>			<span class="comment">// TODO: check for overflow?</span>
<a id="L388"></a><span class="ln">   388</span>			return err == nil
<a id="L389"></a><span class="ln">   389</span>		}
<a id="L390"></a><span class="ln">   390</span>		var ftmp float64
<a id="L391"></a><span class="ln">   391</span>		getFloat64 := func() bool {
<a id="L392"></a><span class="ln">   392</span>			ftmp, err = strconv.ParseFloat(string(src), 64)
<a id="L393"></a><span class="ln">   393</span>			<span class="comment">// TODO: check for overflow?</span>
<a id="L394"></a><span class="ln">   394</span>			return err == nil
<a id="L395"></a><span class="ln">   395</span>		}
<a id="L396"></a><span class="ln">   396</span>	
<a id="L397"></a><span class="ln">   397</span>		<span class="comment">// Save accumulated data.</span>
<a id="L398"></a><span class="ln">   398</span>		switch t := dst; t.Kind() {
<a id="L399"></a><span class="ln">   399</span>		case reflect.Invalid:
<a id="L400"></a><span class="ln">   400</span>			<span class="comment">// Probably a comment.</span>
<a id="L401"></a><span class="ln">   401</span>		default:
<a id="L402"></a><span class="ln">   402</span>			return errors.New(&#34;cannot happen: unknown type &#34; + t.Type().String())
<a id="L403"></a><span class="ln">   403</span>		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<a id="L404"></a><span class="ln">   404</span>			if !getInt64() {
<a id="L405"></a><span class="ln">   405</span>				return err
<a id="L406"></a><span class="ln">   406</span>			}
<a id="L407"></a><span class="ln">   407</span>			t.SetInt(itmp)
<a id="L408"></a><span class="ln">   408</span>		case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
<a id="L409"></a><span class="ln">   409</span>			if !getUint64() {
<a id="L410"></a><span class="ln">   410</span>				return err
<a id="L411"></a><span class="ln">   411</span>			}
<a id="L412"></a><span class="ln">   412</span>			t.SetUint(utmp)
<a id="L413"></a><span class="ln">   413</span>		case reflect.Float32, reflect.Float64:
<a id="L414"></a><span class="ln">   414</span>			if !getFloat64() {
<a id="L415"></a><span class="ln">   415</span>				return err
<a id="L416"></a><span class="ln">   416</span>			}
<a id="L417"></a><span class="ln">   417</span>			t.SetFloat(ftmp)
<a id="L418"></a><span class="ln">   418</span>		case reflect.Bool:
<a id="L419"></a><span class="ln">   419</span>			value, err := strconv.ParseBool(strings.TrimSpace(string(src)))
<a id="L420"></a><span class="ln">   420</span>			if err != nil {
<a id="L421"></a><span class="ln">   421</span>				return err
<a id="L422"></a><span class="ln">   422</span>			}
<a id="L423"></a><span class="ln">   423</span>			t.SetBool(value)
<a id="L424"></a><span class="ln">   424</span>		case reflect.String:
<a id="L425"></a><span class="ln">   425</span>			t.SetString(string(src))
<a id="L426"></a><span class="ln">   426</span>		case reflect.Slice:
<a id="L427"></a><span class="ln">   427</span>			if len(src) == 0 {
<a id="L428"></a><span class="ln">   428</span>				<span class="comment">// non-nil to flag presence</span>
<a id="L429"></a><span class="ln">   429</span>				src = []byte{}
<a id="L430"></a><span class="ln">   430</span>			}
<a id="L431"></a><span class="ln">   431</span>			t.SetBytes(src)
<a id="L432"></a><span class="ln">   432</span>		case reflect.Struct:
<a id="L433"></a><span class="ln">   433</span>			if t.Type() == timeType {
<a id="L434"></a><span class="ln">   434</span>				tv, err := time.Parse(time.RFC3339, string(src))
<a id="L435"></a><span class="ln">   435</span>				if err != nil {
<a id="L436"></a><span class="ln">   436</span>					return err
<a id="L437"></a><span class="ln">   437</span>				}
<a id="L438"></a><span class="ln">   438</span>				t.Set(reflect.ValueOf(tv))
<a id="L439"></a><span class="ln">   439</span>			}
<a id="L440"></a><span class="ln">   440</span>		}
<a id="L441"></a><span class="ln">   441</span>		return nil
<a id="L442"></a><span class="ln">   442</span>	}
<a id="L443"></a><span class="ln">   443</span>	
<a id="L444"></a><span class="ln">   444</span>	<span class="comment">// unmarshalPath walks down an XML structure looking for wanted</span>
<a id="L445"></a><span class="ln">   445</span>	<span class="comment">// paths, and calls unmarshal on them.</span>
<a id="L446"></a><span class="ln">   446</span>	<span class="comment">// The consumed result tells whether XML elements have been consumed</span>
<a id="L447"></a><span class="ln">   447</span>	<span class="comment">// from the Decoder until start&#39;s matching end element, or if it&#39;s</span>
<a id="L448"></a><span class="ln">   448</span>	<span class="comment">// still untouched because start is uninteresting for sv&#39;s fields.</span>
<a id="L449"></a><span class="ln">   449</span>	func (p *Decoder) unmarshalPath(tinfo *typeInfo, sv reflect.Value, parents []string, start *StartElement) (consumed bool, err error) {
<a id="L450"></a><span class="ln">   450</span>		recurse := false
<a id="L451"></a><span class="ln">   451</span>	Loop:
<a id="L452"></a><span class="ln">   452</span>		for i := range tinfo.fields {
<a id="L453"></a><span class="ln">   453</span>			finfo := &amp;tinfo.fields[i]
<a id="L454"></a><span class="ln">   454</span>			if finfo.flags&amp;fElement == 0 || len(finfo.parents) &lt; len(parents) {
<a id="L455"></a><span class="ln">   455</span>				continue
<a id="L456"></a><span class="ln">   456</span>			}
<a id="L457"></a><span class="ln">   457</span>			for j := range parents {
<a id="L458"></a><span class="ln">   458</span>				if parents[j] != finfo.parents[j] {
<a id="L459"></a><span class="ln">   459</span>					continue Loop
<a id="L460"></a><span class="ln">   460</span>				}
<a id="L461"></a><span class="ln">   461</span>			}
<a id="L462"></a><span class="ln">   462</span>			if len(finfo.parents) == len(parents) &amp;&amp; finfo.name == start.Name.Local {
<a id="L463"></a><span class="ln">   463</span>				<span class="comment">// It&#39;s a perfect match, unmarshal the field.</span>
<a id="L464"></a><span class="ln">   464</span>				return true, p.unmarshal(sv.FieldByIndex(finfo.idx), start)
<a id="L465"></a><span class="ln">   465</span>			}
<a id="L466"></a><span class="ln">   466</span>			if len(finfo.parents) &gt; len(parents) &amp;&amp; finfo.parents[len(parents)] == start.Name.Local {
<a id="L467"></a><span class="ln">   467</span>				<span class="comment">// It&#39;s a prefix for the field. Break and recurse</span>
<a id="L468"></a><span class="ln">   468</span>				<span class="comment">// since it&#39;s not ok for one field path to be itself</span>
<a id="L469"></a><span class="ln">   469</span>				<span class="comment">// the prefix for another field path.</span>
<a id="L470"></a><span class="ln">   470</span>				recurse = true
<a id="L471"></a><span class="ln">   471</span>	
<a id="L472"></a><span class="ln">   472</span>				<span class="comment">// We can reuse the same slice as long as we</span>
<a id="L473"></a><span class="ln">   473</span>				<span class="comment">// don&#39;t try to append to it.</span>
<a id="L474"></a><span class="ln">   474</span>				parents = finfo.parents[:len(parents)+1]
<a id="L475"></a><span class="ln">   475</span>				break
<a id="L476"></a><span class="ln">   476</span>			}
<a id="L477"></a><span class="ln">   477</span>		}
<a id="L478"></a><span class="ln">   478</span>		if !recurse {
<a id="L479"></a><span class="ln">   479</span>			<span class="comment">// We have no business with this element.</span>
<a id="L480"></a><span class="ln">   480</span>			return false, nil
<a id="L481"></a><span class="ln">   481</span>		}
<a id="L482"></a><span class="ln">   482</span>		<span class="comment">// The element is not a perfect match for any field, but one</span>
<a id="L483"></a><span class="ln">   483</span>		<span class="comment">// or more fields have the path to this element as a parent</span>
<a id="L484"></a><span class="ln">   484</span>		<span class="comment">// prefix. Recurse and attempt to match these.</span>
<a id="L485"></a><span class="ln">   485</span>		for {
<a id="L486"></a><span class="ln">   486</span>			var tok Token
<a id="L487"></a><span class="ln">   487</span>			tok, err = p.Token()
<a id="L488"></a><span class="ln">   488</span>			if err != nil {
<a id="L489"></a><span class="ln">   489</span>				return true, err
<a id="L490"></a><span class="ln">   490</span>			}
<a id="L491"></a><span class="ln">   491</span>			switch t := tok.(type) {
<a id="L492"></a><span class="ln">   492</span>			case StartElement:
<a id="L493"></a><span class="ln">   493</span>				consumed2, err := p.unmarshalPath(tinfo, sv, parents, &amp;t)
<a id="L494"></a><span class="ln">   494</span>				if err != nil {
<a id="L495"></a><span class="ln">   495</span>					return true, err
<a id="L496"></a><span class="ln">   496</span>				}
<a id="L497"></a><span class="ln">   497</span>				if !consumed2 {
<a id="L498"></a><span class="ln">   498</span>					if err := p.Skip(); err != nil {
<a id="L499"></a><span class="ln">   499</span>						return true, err
<a id="L500"></a><span class="ln">   500</span>					}
<a id="L501"></a><span class="ln">   501</span>				}
<a id="L502"></a><span class="ln">   502</span>			case EndElement:
<a id="L503"></a><span class="ln">   503</span>				return true, nil
<a id="L504"></a><span class="ln">   504</span>			}
<a id="L505"></a><span class="ln">   505</span>		}
<a id="L506"></a><span class="ln">   506</span>		panic(&#34;unreachable&#34;)
<a id="L507"></a><span class="ln">   507</span>	}
<a id="L508"></a><span class="ln">   508</span>	
<a id="L509"></a><span class="ln">   509</span>	<span class="comment">// Skip reads tokens until it has consumed the end element</span>
<a id="L510"></a><span class="ln">   510</span>	<span class="comment">// matching the most recent start element already consumed.</span>
<a id="L511"></a><span class="ln">   511</span>	<span class="comment">// It recurs if it encounters a start element, so it can be used to</span>
<a id="L512"></a><span class="ln">   512</span>	<span class="comment">// skip nested structures.</span>
<a id="L513"></a><span class="ln">   513</span>	<span class="comment">// It returns nil if it finds an end element matching the start</span>
<a id="L514"></a><span class="ln">   514</span>	<span class="comment">// element; otherwise it returns an error describing the problem.</span>
<a id="L515"></a><span class="ln">   515</span>	func (d *Decoder) Skip() error {
<a id="L516"></a><span class="ln">   516</span>		for {
<a id="L517"></a><span class="ln">   517</span>			tok, err := d.Token()
<a id="L518"></a><span class="ln">   518</span>			if err != nil {
<a id="L519"></a><span class="ln">   519</span>				return err
<a id="L520"></a><span class="ln">   520</span>			}
<a id="L521"></a><span class="ln">   521</span>			switch tok.(type) {
<a id="L522"></a><span class="ln">   522</span>			case StartElement:
<a id="L523"></a><span class="ln">   523</span>				if err := d.Skip(); err != nil {
<a id="L524"></a><span class="ln">   524</span>					return err
<a id="L525"></a><span class="ln">   525</span>				}
<a id="L526"></a><span class="ln">   526</span>			case EndElement:
<a id="L527"></a><span class="ln">   527</span>				return nil
<a id="L528"></a><span class="ln">   528</span>			}
<a id="L529"></a><span class="ln">   529</span>		}
<a id="L530"></a><span class="ln">   530</span>		panic(&#34;unreachable&#34;)
<a id="L531"></a><span class="ln">   531</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

