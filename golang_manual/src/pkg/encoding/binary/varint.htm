<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/encoding/binary/varint.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/encoding/binary/varint.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package binary
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// This file implements &#34;varint&#34; encoding of 64-bit integers.</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// The encoding is:</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// - unsigned integers are serialized 7 bits at a time, starting with the</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">//   least significant bits</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// - the most significant bit (msb) in each output byte indicates if there</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">//   is a continuation byte (msb = 1)</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// - signed integers are mapped to unsigned integers using &#34;zig-zag&#34;</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">//   encoding: Positive values x are written as 2*x + 0, negative values</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">//   are written as 2*(^x) + 1; that is, negative numbers are complemented</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">//   and whether to complement is encoded in bit 0.</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">//</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// Design note:</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// At most 10 bytes are needed for 64-bit values. The encoding could</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// be more dense: a full 64-bit value needs an extra byte just to hold bit 63.</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// Instead, the msb of the previous byte could be used to hold bit 63 since we</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// know there can&#39;t be more than 64 bits. This is a trivial improvement and</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// would reduce the maximum encoding length to 9 bytes. However, it breaks the</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// invariant that the msb is always the &#34;continuation bit&#34; and thus makes the</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// format incompatible with a varint encoding for larger numbers (say 128-bit).</span>
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>	import (
<a id="L28"></a><span class="ln">    28</span>		&#34;errors&#34;
<a id="L29"></a><span class="ln">    29</span>		&#34;io&#34;
<a id="L30"></a><span class="ln">    30</span>	)
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// MaxVarintLenN is the maximum length of a varint-encoded N-bit integer.</span>
<a id="L33"></a><span class="ln">    33</span>	const (
<a id="L34"></a><span class="ln">    34</span>		MaxVarintLen16 = 3
<a id="L35"></a><span class="ln">    35</span>		MaxVarintLen32 = 5
<a id="L36"></a><span class="ln">    36</span>		MaxVarintLen64 = 10
<a id="L37"></a><span class="ln">    37</span>	)
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// PutUvarint encodes a uint64 into buf and returns the number of bytes written.</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// If the buffer is too small, PutUvarint will panic.</span>
<a id="L41"></a><span class="ln">    41</span>	func PutUvarint(buf []byte, x uint64) int {
<a id="L42"></a><span class="ln">    42</span>		i := 0
<a id="L43"></a><span class="ln">    43</span>		for x &gt;= 0x80 {
<a id="L44"></a><span class="ln">    44</span>			buf[i] = byte(x) | 0x80
<a id="L45"></a><span class="ln">    45</span>			x &gt;&gt;= 7
<a id="L46"></a><span class="ln">    46</span>			i++
<a id="L47"></a><span class="ln">    47</span>		}
<a id="L48"></a><span class="ln">    48</span>		buf[i] = byte(x)
<a id="L49"></a><span class="ln">    49</span>		return i + 1
<a id="L50"></a><span class="ln">    50</span>	}
<a id="L51"></a><span class="ln">    51</span>	
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// Uvarint decodes a uint64 from buf and returns that value and the</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">// number of bytes read (&gt; 0). If an error occurred, the value is 0</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">// and the number of bytes n is &lt;= 0 meaning:</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">//</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">//	n == 0: buf too small</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">//	n  &lt; 0: value larger than 64 bits (overflow)</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">//              and -n is the number of bytes read</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">//</span>
<a id="L60"></a><span class="ln">    60</span>	func Uvarint(buf []byte) (uint64, int) {
<a id="L61"></a><span class="ln">    61</span>		var x uint64
<a id="L62"></a><span class="ln">    62</span>		var s uint
<a id="L63"></a><span class="ln">    63</span>		for i, b := range buf {
<a id="L64"></a><span class="ln">    64</span>			if b &lt; 0x80 {
<a id="L65"></a><span class="ln">    65</span>				if i &gt; 9 || i == 9 &amp;&amp; b &gt; 1 {
<a id="L66"></a><span class="ln">    66</span>					return 0, -(i + 1) <span class="comment">// overflow</span>
<a id="L67"></a><span class="ln">    67</span>				}
<a id="L68"></a><span class="ln">    68</span>				return x | uint64(b)&lt;&lt;s, i + 1
<a id="L69"></a><span class="ln">    69</span>			}
<a id="L70"></a><span class="ln">    70</span>			x |= uint64(b&amp;0x7f) &lt;&lt; s
<a id="L71"></a><span class="ln">    71</span>			s += 7
<a id="L72"></a><span class="ln">    72</span>		}
<a id="L73"></a><span class="ln">    73</span>		return 0, 0
<a id="L74"></a><span class="ln">    74</span>	}
<a id="L75"></a><span class="ln">    75</span>	
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">// PutVarint encodes an int64 into buf and returns the number of bytes written.</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// If the buffer is too small, PutVarint will panic.</span>
<a id="L78"></a><span class="ln">    78</span>	func PutVarint(buf []byte, x int64) int {
<a id="L79"></a><span class="ln">    79</span>		ux := uint64(x) &lt;&lt; 1
<a id="L80"></a><span class="ln">    80</span>		if x &lt; 0 {
<a id="L81"></a><span class="ln">    81</span>			ux = ^ux
<a id="L82"></a><span class="ln">    82</span>		}
<a id="L83"></a><span class="ln">    83</span>		return PutUvarint(buf, ux)
<a id="L84"></a><span class="ln">    84</span>	}
<a id="L85"></a><span class="ln">    85</span>	
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// Varint decodes an int64 from buf and returns that value and the</span>
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">// number of bytes read (&gt; 0). If an error occurred, the value is 0</span>
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// and the number of bytes n is &lt;= 0 with the following meaning:</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">//</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">//	n == 0: buf too small</span>
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">//	n  &lt; 0: value larger than 64 bits (overflow)</span>
<a id="L92"></a><span class="ln">    92</span>	<span class="comment">//              and -n is the number of bytes read</span>
<a id="L93"></a><span class="ln">    93</span>	<span class="comment">//</span>
<a id="L94"></a><span class="ln">    94</span>	func Varint(buf []byte) (int64, int) {
<a id="L95"></a><span class="ln">    95</span>		ux, n := Uvarint(buf) <span class="comment">// ok to continue in presence of error</span>
<a id="L96"></a><span class="ln">    96</span>		x := int64(ux &gt;&gt; 1)
<a id="L97"></a><span class="ln">    97</span>		if ux&amp;1 != 0 {
<a id="L98"></a><span class="ln">    98</span>			x = ^x
<a id="L99"></a><span class="ln">    99</span>		}
<a id="L100"></a><span class="ln">   100</span>		return x, n
<a id="L101"></a><span class="ln">   101</span>	}
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>	var overflow = errors.New(&#34;binary: varint overflows a 64-bit integer&#34;)
<a id="L104"></a><span class="ln">   104</span>	
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// ReadUvarint reads an encoded unsigned integer from r and returns it as a uint64.</span>
<a id="L106"></a><span class="ln">   106</span>	func ReadUvarint(r io.ByteReader) (uint64, error) {
<a id="L107"></a><span class="ln">   107</span>		var x uint64
<a id="L108"></a><span class="ln">   108</span>		var s uint
<a id="L109"></a><span class="ln">   109</span>		for i := 0; ; i++ {
<a id="L110"></a><span class="ln">   110</span>			b, err := r.ReadByte()
<a id="L111"></a><span class="ln">   111</span>			if err != nil {
<a id="L112"></a><span class="ln">   112</span>				return x, err
<a id="L113"></a><span class="ln">   113</span>			}
<a id="L114"></a><span class="ln">   114</span>			if b &lt; 0x80 {
<a id="L115"></a><span class="ln">   115</span>				if i &gt; 9 || i == 9 &amp;&amp; b &gt; 1 {
<a id="L116"></a><span class="ln">   116</span>					return x, overflow
<a id="L117"></a><span class="ln">   117</span>				}
<a id="L118"></a><span class="ln">   118</span>				return x | uint64(b)&lt;&lt;s, nil
<a id="L119"></a><span class="ln">   119</span>			}
<a id="L120"></a><span class="ln">   120</span>			x |= uint64(b&amp;0x7f) &lt;&lt; s
<a id="L121"></a><span class="ln">   121</span>			s += 7
<a id="L122"></a><span class="ln">   122</span>		}
<a id="L123"></a><span class="ln">   123</span>		panic(&#34;unreachable&#34;)
<a id="L124"></a><span class="ln">   124</span>	}
<a id="L125"></a><span class="ln">   125</span>	
<a id="L126"></a><span class="ln">   126</span>	<span class="comment">// ReadVarint reads an encoded unsigned integer from r and returns it as a uint64.</span>
<a id="L127"></a><span class="ln">   127</span>	func ReadVarint(r io.ByteReader) (int64, error) {
<a id="L128"></a><span class="ln">   128</span>		ux, err := ReadUvarint(r) <span class="comment">// ok to continue in presence of error</span>
<a id="L129"></a><span class="ln">   129</span>		x := int64(ux &gt;&gt; 1)
<a id="L130"></a><span class="ln">   130</span>		if ux&amp;1 != 0 {
<a id="L131"></a><span class="ln">   131</span>			x = ^x
<a id="L132"></a><span class="ln">   132</span>		}
<a id="L133"></a><span class="ln">   133</span>		return x, err
<a id="L134"></a><span class="ln">   134</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

