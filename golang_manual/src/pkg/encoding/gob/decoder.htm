<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/encoding/gob/decoder.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/encoding/gob/decoder.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package gob
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bufio&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;bytes&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;errors&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;io&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;reflect&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;sync&#34;
<a id="L14"></a><span class="ln">    14</span>	)
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// A Decoder manages the receipt of type and data information read from the</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// remote side of a connection.</span>
<a id="L18"></a><span class="ln">    18</span>	type Decoder struct {
<a id="L19"></a><span class="ln">    19</span>		mutex        sync.Mutex                              <span class="comment">// each item must be received atomically</span>
<a id="L20"></a><span class="ln">    20</span>		r            io.Reader                               <span class="comment">// source of the data</span>
<a id="L21"></a><span class="ln">    21</span>		buf          bytes.Buffer                            <span class="comment">// buffer for more efficient i/o from r</span>
<a id="L22"></a><span class="ln">    22</span>		wireType     map[typeId]*wireType                    <span class="comment">// map from remote ID to local description</span>
<a id="L23"></a><span class="ln">    23</span>		decoderCache map[reflect.Type]map[typeId]**decEngine <span class="comment">// cache of compiled engines</span>
<a id="L24"></a><span class="ln">    24</span>		ignorerCache map[typeId]**decEngine                  <span class="comment">// ditto for ignored objects</span>
<a id="L25"></a><span class="ln">    25</span>		freeList     *decoderState                           <span class="comment">// list of free decoderStates; avoids reallocation</span>
<a id="L26"></a><span class="ln">    26</span>		countBuf     []byte                                  <span class="comment">// used for decoding integers while parsing messages</span>
<a id="L27"></a><span class="ln">    27</span>		tmp          []byte                                  <span class="comment">// temporary storage for i/o; saves reallocating</span>
<a id="L28"></a><span class="ln">    28</span>		err          error
<a id="L29"></a><span class="ln">    29</span>	}
<a id="L30"></a><span class="ln">    30</span>	
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// NewDecoder returns a new decoder that reads from the io.Reader.</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// If r does not also implement io.ByteReader, it will be wrapped in a</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// bufio.Reader.</span>
<a id="L34"></a><span class="ln">    34</span>	func NewDecoder(r io.Reader) *Decoder {
<a id="L35"></a><span class="ln">    35</span>		dec := new(Decoder)
<a id="L36"></a><span class="ln">    36</span>		<span class="comment">// We use the ability to read bytes as a plausible surrogate for buffering.</span>
<a id="L37"></a><span class="ln">    37</span>		if _, ok := r.(io.ByteReader); !ok {
<a id="L38"></a><span class="ln">    38</span>			r = bufio.NewReader(r)
<a id="L39"></a><span class="ln">    39</span>		}
<a id="L40"></a><span class="ln">    40</span>		dec.r = r
<a id="L41"></a><span class="ln">    41</span>		dec.wireType = make(map[typeId]*wireType)
<a id="L42"></a><span class="ln">    42</span>		dec.decoderCache = make(map[reflect.Type]map[typeId]**decEngine)
<a id="L43"></a><span class="ln">    43</span>		dec.ignorerCache = make(map[typeId]**decEngine)
<a id="L44"></a><span class="ln">    44</span>		dec.countBuf = make([]byte, 9) <span class="comment">// counts may be uint64s (unlikely!), require 9 bytes</span>
<a id="L45"></a><span class="ln">    45</span>	
<a id="L46"></a><span class="ln">    46</span>		return dec
<a id="L47"></a><span class="ln">    47</span>	}
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">// recvType loads the definition of a type.</span>
<a id="L50"></a><span class="ln">    50</span>	func (dec *Decoder) recvType(id typeId) {
<a id="L51"></a><span class="ln">    51</span>		<span class="comment">// Have we already seen this type?  That&#39;s an error</span>
<a id="L52"></a><span class="ln">    52</span>		if id &lt; firstUserId || dec.wireType[id] != nil {
<a id="L53"></a><span class="ln">    53</span>			dec.err = errors.New(&#34;gob: duplicate type received&#34;)
<a id="L54"></a><span class="ln">    54</span>			return
<a id="L55"></a><span class="ln">    55</span>		}
<a id="L56"></a><span class="ln">    56</span>	
<a id="L57"></a><span class="ln">    57</span>		<span class="comment">// Type:</span>
<a id="L58"></a><span class="ln">    58</span>		wire := new(wireType)
<a id="L59"></a><span class="ln">    59</span>		dec.decodeValue(tWireType, reflect.ValueOf(wire))
<a id="L60"></a><span class="ln">    60</span>		if dec.err != nil {
<a id="L61"></a><span class="ln">    61</span>			return
<a id="L62"></a><span class="ln">    62</span>		}
<a id="L63"></a><span class="ln">    63</span>		<span class="comment">// Remember we&#39;ve seen this type.</span>
<a id="L64"></a><span class="ln">    64</span>		dec.wireType[id] = wire
<a id="L65"></a><span class="ln">    65</span>	}
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>	var errBadCount = errors.New(&#34;invalid message length&#34;)
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// recvMessage reads the next count-delimited item from the input. It is the converse</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// of Encoder.writeMessage. It returns false on EOF or other error reading the message.</span>
<a id="L71"></a><span class="ln">    71</span>	func (dec *Decoder) recvMessage() bool {
<a id="L72"></a><span class="ln">    72</span>		<span class="comment">// Read a count.</span>
<a id="L73"></a><span class="ln">    73</span>		nbytes, _, err := decodeUintReader(dec.r, dec.countBuf)
<a id="L74"></a><span class="ln">    74</span>		if err != nil {
<a id="L75"></a><span class="ln">    75</span>			dec.err = err
<a id="L76"></a><span class="ln">    76</span>			return false
<a id="L77"></a><span class="ln">    77</span>		}
<a id="L78"></a><span class="ln">    78</span>		<span class="comment">// Upper limit of 1GB, allowing room to grow a little without overflow.</span>
<a id="L79"></a><span class="ln">    79</span>		<span class="comment">// TODO: We might want more control over this limit.</span>
<a id="L80"></a><span class="ln">    80</span>		if nbytes &gt;= 1&lt;&lt;30 {
<a id="L81"></a><span class="ln">    81</span>			dec.err = errBadCount
<a id="L82"></a><span class="ln">    82</span>			return false
<a id="L83"></a><span class="ln">    83</span>		}
<a id="L84"></a><span class="ln">    84</span>		dec.readMessage(int(nbytes))
<a id="L85"></a><span class="ln">    85</span>		return dec.err == nil
<a id="L86"></a><span class="ln">    86</span>	}
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// readMessage reads the next nbytes bytes from the input.</span>
<a id="L89"></a><span class="ln">    89</span>	func (dec *Decoder) readMessage(nbytes int) {
<a id="L90"></a><span class="ln">    90</span>		<span class="comment">// Allocate the buffer.</span>
<a id="L91"></a><span class="ln">    91</span>		if cap(dec.tmp) &lt; nbytes {
<a id="L92"></a><span class="ln">    92</span>			dec.tmp = make([]byte, nbytes+100) <span class="comment">// room to grow</span>
<a id="L93"></a><span class="ln">    93</span>		}
<a id="L94"></a><span class="ln">    94</span>		dec.tmp = dec.tmp[:nbytes]
<a id="L95"></a><span class="ln">    95</span>	
<a id="L96"></a><span class="ln">    96</span>		<span class="comment">// Read the data</span>
<a id="L97"></a><span class="ln">    97</span>		_, dec.err = io.ReadFull(dec.r, dec.tmp)
<a id="L98"></a><span class="ln">    98</span>		if dec.err != nil {
<a id="L99"></a><span class="ln">    99</span>			if dec.err == io.EOF {
<a id="L100"></a><span class="ln">   100</span>				dec.err = io.ErrUnexpectedEOF
<a id="L101"></a><span class="ln">   101</span>			}
<a id="L102"></a><span class="ln">   102</span>			return
<a id="L103"></a><span class="ln">   103</span>		}
<a id="L104"></a><span class="ln">   104</span>		dec.buf.Write(dec.tmp)
<a id="L105"></a><span class="ln">   105</span>	}
<a id="L106"></a><span class="ln">   106</span>	
<a id="L107"></a><span class="ln">   107</span>	<span class="comment">// toInt turns an encoded uint64 into an int, according to the marshaling rules.</span>
<a id="L108"></a><span class="ln">   108</span>	func toInt(x uint64) int64 {
<a id="L109"></a><span class="ln">   109</span>		i := int64(x &gt;&gt; 1)
<a id="L110"></a><span class="ln">   110</span>		if x&amp;1 != 0 {
<a id="L111"></a><span class="ln">   111</span>			i = ^i
<a id="L112"></a><span class="ln">   112</span>		}
<a id="L113"></a><span class="ln">   113</span>		return i
<a id="L114"></a><span class="ln">   114</span>	}
<a id="L115"></a><span class="ln">   115</span>	
<a id="L116"></a><span class="ln">   116</span>	func (dec *Decoder) nextInt() int64 {
<a id="L117"></a><span class="ln">   117</span>		n, _, err := decodeUintReader(&amp;dec.buf, dec.countBuf)
<a id="L118"></a><span class="ln">   118</span>		if err != nil {
<a id="L119"></a><span class="ln">   119</span>			dec.err = err
<a id="L120"></a><span class="ln">   120</span>		}
<a id="L121"></a><span class="ln">   121</span>		return toInt(n)
<a id="L122"></a><span class="ln">   122</span>	}
<a id="L123"></a><span class="ln">   123</span>	
<a id="L124"></a><span class="ln">   124</span>	func (dec *Decoder) nextUint() uint64 {
<a id="L125"></a><span class="ln">   125</span>		n, _, err := decodeUintReader(&amp;dec.buf, dec.countBuf)
<a id="L126"></a><span class="ln">   126</span>		if err != nil {
<a id="L127"></a><span class="ln">   127</span>			dec.err = err
<a id="L128"></a><span class="ln">   128</span>		}
<a id="L129"></a><span class="ln">   129</span>		return n
<a id="L130"></a><span class="ln">   130</span>	}
<a id="L131"></a><span class="ln">   131</span>	
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">// decodeTypeSequence parses:</span>
<a id="L133"></a><span class="ln">   133</span>	<span class="comment">// TypeSequence</span>
<a id="L134"></a><span class="ln">   134</span>	<span class="comment">//	(TypeDefinition DelimitedTypeDefinition*)?</span>
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">// and returns the type id of the next value.  It returns -1 at</span>
<a id="L136"></a><span class="ln">   136</span>	<span class="comment">// EOF.  Upon return, the remainder of dec.buf is the value to be</span>
<a id="L137"></a><span class="ln">   137</span>	<span class="comment">// decoded.  If this is an interface value, it can be ignored by</span>
<a id="L138"></a><span class="ln">   138</span>	<span class="comment">// resetting that buffer.</span>
<a id="L139"></a><span class="ln">   139</span>	func (dec *Decoder) decodeTypeSequence(isInterface bool) typeId {
<a id="L140"></a><span class="ln">   140</span>		for dec.err == nil {
<a id="L141"></a><span class="ln">   141</span>			if dec.buf.Len() == 0 {
<a id="L142"></a><span class="ln">   142</span>				if !dec.recvMessage() {
<a id="L143"></a><span class="ln">   143</span>					break
<a id="L144"></a><span class="ln">   144</span>				}
<a id="L145"></a><span class="ln">   145</span>			}
<a id="L146"></a><span class="ln">   146</span>			<span class="comment">// Receive a type id.</span>
<a id="L147"></a><span class="ln">   147</span>			id := typeId(dec.nextInt())
<a id="L148"></a><span class="ln">   148</span>			if id &gt;= 0 {
<a id="L149"></a><span class="ln">   149</span>				<span class="comment">// Value follows.</span>
<a id="L150"></a><span class="ln">   150</span>				return id
<a id="L151"></a><span class="ln">   151</span>			}
<a id="L152"></a><span class="ln">   152</span>			<span class="comment">// Type definition for (-id) follows.</span>
<a id="L153"></a><span class="ln">   153</span>			dec.recvType(-id)
<a id="L154"></a><span class="ln">   154</span>			<span class="comment">// When decoding an interface, after a type there may be a</span>
<a id="L155"></a><span class="ln">   155</span>			<span class="comment">// DelimitedValue still in the buffer.  Skip its count.</span>
<a id="L156"></a><span class="ln">   156</span>			<span class="comment">// (Alternatively, the buffer is empty and the byte count</span>
<a id="L157"></a><span class="ln">   157</span>			<span class="comment">// will be absorbed by recvMessage.)</span>
<a id="L158"></a><span class="ln">   158</span>			if dec.buf.Len() &gt; 0 {
<a id="L159"></a><span class="ln">   159</span>				if !isInterface {
<a id="L160"></a><span class="ln">   160</span>					dec.err = errors.New(&#34;extra data in buffer&#34;)
<a id="L161"></a><span class="ln">   161</span>					break
<a id="L162"></a><span class="ln">   162</span>				}
<a id="L163"></a><span class="ln">   163</span>				dec.nextUint()
<a id="L164"></a><span class="ln">   164</span>			}
<a id="L165"></a><span class="ln">   165</span>		}
<a id="L166"></a><span class="ln">   166</span>		return -1
<a id="L167"></a><span class="ln">   167</span>	}
<a id="L168"></a><span class="ln">   168</span>	
<a id="L169"></a><span class="ln">   169</span>	<span class="comment">// Decode reads the next value from the connection and stores</span>
<a id="L170"></a><span class="ln">   170</span>	<span class="comment">// it in the data represented by the empty interface value.</span>
<a id="L171"></a><span class="ln">   171</span>	<span class="comment">// If e is nil, the value will be discarded. Otherwise,</span>
<a id="L172"></a><span class="ln">   172</span>	<span class="comment">// the value underlying e must be a pointer to the</span>
<a id="L173"></a><span class="ln">   173</span>	<span class="comment">// correct type for the next data item received.</span>
<a id="L174"></a><span class="ln">   174</span>	func (dec *Decoder) Decode(e interface{}) error {
<a id="L175"></a><span class="ln">   175</span>		if e == nil {
<a id="L176"></a><span class="ln">   176</span>			return dec.DecodeValue(reflect.Value{})
<a id="L177"></a><span class="ln">   177</span>		}
<a id="L178"></a><span class="ln">   178</span>		value := reflect.ValueOf(e)
<a id="L179"></a><span class="ln">   179</span>		<span class="comment">// If e represents a value as opposed to a pointer, the answer won&#39;t</span>
<a id="L180"></a><span class="ln">   180</span>		<span class="comment">// get back to the caller.  Make sure it&#39;s a pointer.</span>
<a id="L181"></a><span class="ln">   181</span>		if value.Type().Kind() != reflect.Ptr {
<a id="L182"></a><span class="ln">   182</span>			dec.err = errors.New(&#34;gob: attempt to decode into a non-pointer&#34;)
<a id="L183"></a><span class="ln">   183</span>			return dec.err
<a id="L184"></a><span class="ln">   184</span>		}
<a id="L185"></a><span class="ln">   185</span>		return dec.DecodeValue(value)
<a id="L186"></a><span class="ln">   186</span>	}
<a id="L187"></a><span class="ln">   187</span>	
<a id="L188"></a><span class="ln">   188</span>	<span class="comment">// DecodeValue reads the next value from the connection.</span>
<a id="L189"></a><span class="ln">   189</span>	<span class="comment">// If v is the zero reflect.Value (v.Kind() == Invalid), DecodeValue discards the value.</span>
<a id="L190"></a><span class="ln">   190</span>	<span class="comment">// Otherwise, it stores the value into v.  In that case, v must represent</span>
<a id="L191"></a><span class="ln">   191</span>	<span class="comment">// a non-nil pointer to data or be an assignable reflect.Value (v.CanSet())</span>
<a id="L192"></a><span class="ln">   192</span>	func (dec *Decoder) DecodeValue(v reflect.Value) error {
<a id="L193"></a><span class="ln">   193</span>		if v.IsValid() {
<a id="L194"></a><span class="ln">   194</span>			if v.Kind() == reflect.Ptr &amp;&amp; !v.IsNil() {
<a id="L195"></a><span class="ln">   195</span>				<span class="comment">// That&#39;s okay, we&#39;ll store through the pointer.</span>
<a id="L196"></a><span class="ln">   196</span>			} else if !v.CanSet() {
<a id="L197"></a><span class="ln">   197</span>				return errors.New(&#34;gob: DecodeValue of unassignable value&#34;)
<a id="L198"></a><span class="ln">   198</span>			}
<a id="L199"></a><span class="ln">   199</span>		}
<a id="L200"></a><span class="ln">   200</span>		<span class="comment">// Make sure we&#39;re single-threaded through here.</span>
<a id="L201"></a><span class="ln">   201</span>		dec.mutex.Lock()
<a id="L202"></a><span class="ln">   202</span>		defer dec.mutex.Unlock()
<a id="L203"></a><span class="ln">   203</span>	
<a id="L204"></a><span class="ln">   204</span>		dec.buf.Reset() <span class="comment">// In case data lingers from previous invocation.</span>
<a id="L205"></a><span class="ln">   205</span>		dec.err = nil
<a id="L206"></a><span class="ln">   206</span>		id := dec.decodeTypeSequence(false)
<a id="L207"></a><span class="ln">   207</span>		if dec.err == nil {
<a id="L208"></a><span class="ln">   208</span>			dec.decodeValue(id, v)
<a id="L209"></a><span class="ln">   209</span>		}
<a id="L210"></a><span class="ln">   210</span>		return dec.err
<a id="L211"></a><span class="ln">   211</span>	}
<a id="L212"></a><span class="ln">   212</span>	
<a id="L213"></a><span class="ln">   213</span>	<span class="comment">// If debug.go is compiled into the program , debugFunc prints a human-readable</span>
<a id="L214"></a><span class="ln">   214</span>	<span class="comment">// representation of the gob data read from r by calling that file&#39;s Debug function.</span>
<a id="L215"></a><span class="ln">   215</span>	<span class="comment">// Otherwise it is nil.</span>
<a id="L216"></a><span class="ln">   216</span>	var debugFunc func(io.Reader)
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

