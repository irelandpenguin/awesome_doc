<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/encoding/gob/encoder.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/encoding/gob/encoder.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package gob
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bytes&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;errors&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;io&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;reflect&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;sync&#34;
<a id="L13"></a><span class="ln">    13</span>	)
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// An Encoder manages the transmission of type and data information to the</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// other side of a connection.</span>
<a id="L17"></a><span class="ln">    17</span>	type Encoder struct {
<a id="L18"></a><span class="ln">    18</span>		mutex      sync.Mutex              <span class="comment">// each item must be sent atomically</span>
<a id="L19"></a><span class="ln">    19</span>		w          []io.Writer             <span class="comment">// where to send the data</span>
<a id="L20"></a><span class="ln">    20</span>		sent       map[reflect.Type]typeId <span class="comment">// which types we&#39;ve already sent</span>
<a id="L21"></a><span class="ln">    21</span>		countState *encoderState           <span class="comment">// stage for writing counts</span>
<a id="L22"></a><span class="ln">    22</span>		freeList   *encoderState           <span class="comment">// list of free encoderStates; avoids reallocation</span>
<a id="L23"></a><span class="ln">    23</span>		byteBuf    bytes.Buffer            <span class="comment">// buffer for top-level encoderState</span>
<a id="L24"></a><span class="ln">    24</span>		err        error
<a id="L25"></a><span class="ln">    25</span>	}
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// Before we encode a message, we reserve space at the head of the</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// buffer in which to encode its length. This means we can use the</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// buffer to assemble the message without another allocation.</span>
<a id="L30"></a><span class="ln">    30</span>	const maxLength = 9 <span class="comment">// Maximum size of an encoded length.</span>
<a id="L31"></a><span class="ln">    31</span>	var spaceForLength = make([]byte, maxLength)
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// NewEncoder returns a new encoder that will transmit on the io.Writer.</span>
<a id="L34"></a><span class="ln">    34</span>	func NewEncoder(w io.Writer) *Encoder {
<a id="L35"></a><span class="ln">    35</span>		enc := new(Encoder)
<a id="L36"></a><span class="ln">    36</span>		enc.w = []io.Writer{w}
<a id="L37"></a><span class="ln">    37</span>		enc.sent = make(map[reflect.Type]typeId)
<a id="L38"></a><span class="ln">    38</span>		enc.countState = enc.newEncoderState(new(bytes.Buffer))
<a id="L39"></a><span class="ln">    39</span>		return enc
<a id="L40"></a><span class="ln">    40</span>	}
<a id="L41"></a><span class="ln">    41</span>	
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">// writer() returns the innermost writer the encoder is using</span>
<a id="L43"></a><span class="ln">    43</span>	func (enc *Encoder) writer() io.Writer {
<a id="L44"></a><span class="ln">    44</span>		return enc.w[len(enc.w)-1]
<a id="L45"></a><span class="ln">    45</span>	}
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">// pushWriter adds a writer to the encoder.</span>
<a id="L48"></a><span class="ln">    48</span>	func (enc *Encoder) pushWriter(w io.Writer) {
<a id="L49"></a><span class="ln">    49</span>		enc.w = append(enc.w, w)
<a id="L50"></a><span class="ln">    50</span>	}
<a id="L51"></a><span class="ln">    51</span>	
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// popWriter pops the innermost writer.</span>
<a id="L53"></a><span class="ln">    53</span>	func (enc *Encoder) popWriter() {
<a id="L54"></a><span class="ln">    54</span>		enc.w = enc.w[0 : len(enc.w)-1]
<a id="L55"></a><span class="ln">    55</span>	}
<a id="L56"></a><span class="ln">    56</span>	
<a id="L57"></a><span class="ln">    57</span>	func (enc *Encoder) badType(rt reflect.Type) {
<a id="L58"></a><span class="ln">    58</span>		enc.setError(errors.New(&#34;gob: can&#39;t encode type &#34; + rt.String()))
<a id="L59"></a><span class="ln">    59</span>	}
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>	func (enc *Encoder) setError(err error) {
<a id="L62"></a><span class="ln">    62</span>		if enc.err == nil { <span class="comment">// remember the first.</span>
<a id="L63"></a><span class="ln">    63</span>			enc.err = err
<a id="L64"></a><span class="ln">    64</span>		}
<a id="L65"></a><span class="ln">    65</span>	}
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// writeMessage sends the data item preceded by a unsigned count of its length.</span>
<a id="L68"></a><span class="ln">    68</span>	func (enc *Encoder) writeMessage(w io.Writer, b *bytes.Buffer) {
<a id="L69"></a><span class="ln">    69</span>		<span class="comment">// Space has been reserved for the length at the head of the message.</span>
<a id="L70"></a><span class="ln">    70</span>		<span class="comment">// This is a little dirty: we grab the slice from the bytes.Buffer and massage</span>
<a id="L71"></a><span class="ln">    71</span>		<span class="comment">// it by hand.</span>
<a id="L72"></a><span class="ln">    72</span>		message := b.Bytes()
<a id="L73"></a><span class="ln">    73</span>		messageLen := len(message) - maxLength
<a id="L74"></a><span class="ln">    74</span>		<span class="comment">// Encode the length.</span>
<a id="L75"></a><span class="ln">    75</span>		enc.countState.b.Reset()
<a id="L76"></a><span class="ln">    76</span>		enc.countState.encodeUint(uint64(messageLen))
<a id="L77"></a><span class="ln">    77</span>		<span class="comment">// Copy the length to be a prefix of the message.</span>
<a id="L78"></a><span class="ln">    78</span>		offset := maxLength - enc.countState.b.Len()
<a id="L79"></a><span class="ln">    79</span>		copy(message[offset:], enc.countState.b.Bytes())
<a id="L80"></a><span class="ln">    80</span>		<span class="comment">// Write the data.</span>
<a id="L81"></a><span class="ln">    81</span>		_, err := w.Write(message[offset:])
<a id="L82"></a><span class="ln">    82</span>		<span class="comment">// Drain the buffer and restore the space at the front for the count of the next message.</span>
<a id="L83"></a><span class="ln">    83</span>		b.Reset()
<a id="L84"></a><span class="ln">    84</span>		b.Write(spaceForLength)
<a id="L85"></a><span class="ln">    85</span>		if err != nil {
<a id="L86"></a><span class="ln">    86</span>			enc.setError(err)
<a id="L87"></a><span class="ln">    87</span>		}
<a id="L88"></a><span class="ln">    88</span>	}
<a id="L89"></a><span class="ln">    89</span>	
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// sendActualType sends the requested type, without further investigation, unless</span>
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// it&#39;s been sent before.</span>
<a id="L92"></a><span class="ln">    92</span>	func (enc *Encoder) sendActualType(w io.Writer, state *encoderState, ut *userTypeInfo, actual reflect.Type) (sent bool) {
<a id="L93"></a><span class="ln">    93</span>		if _, alreadySent := enc.sent[actual]; alreadySent {
<a id="L94"></a><span class="ln">    94</span>			return false
<a id="L95"></a><span class="ln">    95</span>		}
<a id="L96"></a><span class="ln">    96</span>		typeLock.Lock()
<a id="L97"></a><span class="ln">    97</span>		info, err := getTypeInfo(ut)
<a id="L98"></a><span class="ln">    98</span>		typeLock.Unlock()
<a id="L99"></a><span class="ln">    99</span>		if err != nil {
<a id="L100"></a><span class="ln">   100</span>			enc.setError(err)
<a id="L101"></a><span class="ln">   101</span>			return
<a id="L102"></a><span class="ln">   102</span>		}
<a id="L103"></a><span class="ln">   103</span>		<span class="comment">// Send the pair (-id, type)</span>
<a id="L104"></a><span class="ln">   104</span>		<span class="comment">// Id:</span>
<a id="L105"></a><span class="ln">   105</span>		state.encodeInt(-int64(info.id))
<a id="L106"></a><span class="ln">   106</span>		<span class="comment">// Type:</span>
<a id="L107"></a><span class="ln">   107</span>		enc.encode(state.b, reflect.ValueOf(info.wire), wireTypeUserInfo)
<a id="L108"></a><span class="ln">   108</span>		enc.writeMessage(w, state.b)
<a id="L109"></a><span class="ln">   109</span>		if enc.err != nil {
<a id="L110"></a><span class="ln">   110</span>			return
<a id="L111"></a><span class="ln">   111</span>		}
<a id="L112"></a><span class="ln">   112</span>	
<a id="L113"></a><span class="ln">   113</span>		<span class="comment">// Remember we&#39;ve sent this type, both what the user gave us and the base type.</span>
<a id="L114"></a><span class="ln">   114</span>		enc.sent[ut.base] = info.id
<a id="L115"></a><span class="ln">   115</span>		if ut.user != ut.base {
<a id="L116"></a><span class="ln">   116</span>			enc.sent[ut.user] = info.id
<a id="L117"></a><span class="ln">   117</span>		}
<a id="L118"></a><span class="ln">   118</span>		<span class="comment">// Now send the inner types</span>
<a id="L119"></a><span class="ln">   119</span>		switch st := actual; st.Kind() {
<a id="L120"></a><span class="ln">   120</span>		case reflect.Struct:
<a id="L121"></a><span class="ln">   121</span>			for i := 0; i &lt; st.NumField(); i++ {
<a id="L122"></a><span class="ln">   122</span>				if isExported(st.Field(i).Name) {
<a id="L123"></a><span class="ln">   123</span>					enc.sendType(w, state, st.Field(i).Type)
<a id="L124"></a><span class="ln">   124</span>				}
<a id="L125"></a><span class="ln">   125</span>			}
<a id="L126"></a><span class="ln">   126</span>		case reflect.Array, reflect.Slice:
<a id="L127"></a><span class="ln">   127</span>			enc.sendType(w, state, st.Elem())
<a id="L128"></a><span class="ln">   128</span>		case reflect.Map:
<a id="L129"></a><span class="ln">   129</span>			enc.sendType(w, state, st.Key())
<a id="L130"></a><span class="ln">   130</span>			enc.sendType(w, state, st.Elem())
<a id="L131"></a><span class="ln">   131</span>		}
<a id="L132"></a><span class="ln">   132</span>		return true
<a id="L133"></a><span class="ln">   133</span>	}
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">// sendType sends the type info to the other side, if necessary. </span>
<a id="L136"></a><span class="ln">   136</span>	func (enc *Encoder) sendType(w io.Writer, state *encoderState, origt reflect.Type) (sent bool) {
<a id="L137"></a><span class="ln">   137</span>		ut := userType(origt)
<a id="L138"></a><span class="ln">   138</span>		if ut.isGobEncoder {
<a id="L139"></a><span class="ln">   139</span>			<span class="comment">// The rules are different: regardless of the underlying type&#39;s representation,</span>
<a id="L140"></a><span class="ln">   140</span>			<span class="comment">// we need to tell the other side that this exact type is a GobEncoder.</span>
<a id="L141"></a><span class="ln">   141</span>			return enc.sendActualType(w, state, ut, ut.user)
<a id="L142"></a><span class="ln">   142</span>		}
<a id="L143"></a><span class="ln">   143</span>	
<a id="L144"></a><span class="ln">   144</span>		<span class="comment">// It&#39;s a concrete value, so drill down to the base type.</span>
<a id="L145"></a><span class="ln">   145</span>		switch rt := ut.base; rt.Kind() {
<a id="L146"></a><span class="ln">   146</span>		default:
<a id="L147"></a><span class="ln">   147</span>			<span class="comment">// Basic types and interfaces do not need to be described.</span>
<a id="L148"></a><span class="ln">   148</span>			return
<a id="L149"></a><span class="ln">   149</span>		case reflect.Slice:
<a id="L150"></a><span class="ln">   150</span>			<span class="comment">// If it&#39;s []uint8, don&#39;t send; it&#39;s considered basic.</span>
<a id="L151"></a><span class="ln">   151</span>			if rt.Elem().Kind() == reflect.Uint8 {
<a id="L152"></a><span class="ln">   152</span>				return
<a id="L153"></a><span class="ln">   153</span>			}
<a id="L154"></a><span class="ln">   154</span>			<span class="comment">// Otherwise we do send.</span>
<a id="L155"></a><span class="ln">   155</span>			break
<a id="L156"></a><span class="ln">   156</span>		case reflect.Array:
<a id="L157"></a><span class="ln">   157</span>			<span class="comment">// arrays must be sent so we know their lengths and element types.</span>
<a id="L158"></a><span class="ln">   158</span>			break
<a id="L159"></a><span class="ln">   159</span>		case reflect.Map:
<a id="L160"></a><span class="ln">   160</span>			<span class="comment">// maps must be sent so we know their lengths and key/value types.</span>
<a id="L161"></a><span class="ln">   161</span>			break
<a id="L162"></a><span class="ln">   162</span>		case reflect.Struct:
<a id="L163"></a><span class="ln">   163</span>			<span class="comment">// structs must be sent so we know their fields.</span>
<a id="L164"></a><span class="ln">   164</span>			break
<a id="L165"></a><span class="ln">   165</span>		case reflect.Chan, reflect.Func:
<a id="L166"></a><span class="ln">   166</span>			<span class="comment">// Probably a bad field in a struct.</span>
<a id="L167"></a><span class="ln">   167</span>			enc.badType(rt)
<a id="L168"></a><span class="ln">   168</span>			return
<a id="L169"></a><span class="ln">   169</span>		}
<a id="L170"></a><span class="ln">   170</span>	
<a id="L171"></a><span class="ln">   171</span>		return enc.sendActualType(w, state, ut, ut.base)
<a id="L172"></a><span class="ln">   172</span>	}
<a id="L173"></a><span class="ln">   173</span>	
<a id="L174"></a><span class="ln">   174</span>	<span class="comment">// Encode transmits the data item represented by the empty interface value,</span>
<a id="L175"></a><span class="ln">   175</span>	<span class="comment">// guaranteeing that all necessary type information has been transmitted first.</span>
<a id="L176"></a><span class="ln">   176</span>	func (enc *Encoder) Encode(e interface{}) error {
<a id="L177"></a><span class="ln">   177</span>		return enc.EncodeValue(reflect.ValueOf(e))
<a id="L178"></a><span class="ln">   178</span>	}
<a id="L179"></a><span class="ln">   179</span>	
<a id="L180"></a><span class="ln">   180</span>	<span class="comment">// sendTypeDescriptor makes sure the remote side knows about this type.</span>
<a id="L181"></a><span class="ln">   181</span>	<span class="comment">// It will send a descriptor if this is the first time the type has been</span>
<a id="L182"></a><span class="ln">   182</span>	<span class="comment">// sent.</span>
<a id="L183"></a><span class="ln">   183</span>	func (enc *Encoder) sendTypeDescriptor(w io.Writer, state *encoderState, ut *userTypeInfo) {
<a id="L184"></a><span class="ln">   184</span>		<span class="comment">// Make sure the type is known to the other side.</span>
<a id="L185"></a><span class="ln">   185</span>		<span class="comment">// First, have we already sent this type?</span>
<a id="L186"></a><span class="ln">   186</span>		rt := ut.base
<a id="L187"></a><span class="ln">   187</span>		if ut.isGobEncoder {
<a id="L188"></a><span class="ln">   188</span>			rt = ut.user
<a id="L189"></a><span class="ln">   189</span>		}
<a id="L190"></a><span class="ln">   190</span>		if _, alreadySent := enc.sent[rt]; !alreadySent {
<a id="L191"></a><span class="ln">   191</span>			<span class="comment">// No, so send it.</span>
<a id="L192"></a><span class="ln">   192</span>			sent := enc.sendType(w, state, rt)
<a id="L193"></a><span class="ln">   193</span>			if enc.err != nil {
<a id="L194"></a><span class="ln">   194</span>				return
<a id="L195"></a><span class="ln">   195</span>			}
<a id="L196"></a><span class="ln">   196</span>			<span class="comment">// If the type info has still not been transmitted, it means we have</span>
<a id="L197"></a><span class="ln">   197</span>			<span class="comment">// a singleton basic type (int, []byte etc.) at top level.  We don&#39;t</span>
<a id="L198"></a><span class="ln">   198</span>			<span class="comment">// need to send the type info but we do need to update enc.sent.</span>
<a id="L199"></a><span class="ln">   199</span>			if !sent {
<a id="L200"></a><span class="ln">   200</span>				typeLock.Lock()
<a id="L201"></a><span class="ln">   201</span>				info, err := getTypeInfo(ut)
<a id="L202"></a><span class="ln">   202</span>				typeLock.Unlock()
<a id="L203"></a><span class="ln">   203</span>				if err != nil {
<a id="L204"></a><span class="ln">   204</span>					enc.setError(err)
<a id="L205"></a><span class="ln">   205</span>					return
<a id="L206"></a><span class="ln">   206</span>				}
<a id="L207"></a><span class="ln">   207</span>				enc.sent[rt] = info.id
<a id="L208"></a><span class="ln">   208</span>			}
<a id="L209"></a><span class="ln">   209</span>		}
<a id="L210"></a><span class="ln">   210</span>	}
<a id="L211"></a><span class="ln">   211</span>	
<a id="L212"></a><span class="ln">   212</span>	<span class="comment">// sendTypeId sends the id, which must have already been defined.</span>
<a id="L213"></a><span class="ln">   213</span>	func (enc *Encoder) sendTypeId(state *encoderState, ut *userTypeInfo) {
<a id="L214"></a><span class="ln">   214</span>		<span class="comment">// Identify the type of this top-level value.</span>
<a id="L215"></a><span class="ln">   215</span>		state.encodeInt(int64(enc.sent[ut.base]))
<a id="L216"></a><span class="ln">   216</span>	}
<a id="L217"></a><span class="ln">   217</span>	
<a id="L218"></a><span class="ln">   218</span>	<span class="comment">// EncodeValue transmits the data item represented by the reflection value,</span>
<a id="L219"></a><span class="ln">   219</span>	<span class="comment">// guaranteeing that all necessary type information has been transmitted first.</span>
<a id="L220"></a><span class="ln">   220</span>	func (enc *Encoder) EncodeValue(value reflect.Value) error {
<a id="L221"></a><span class="ln">   221</span>		<span class="comment">// Make sure we&#39;re single-threaded through here, so multiple</span>
<a id="L222"></a><span class="ln">   222</span>		<span class="comment">// goroutines can share an encoder.</span>
<a id="L223"></a><span class="ln">   223</span>		enc.mutex.Lock()
<a id="L224"></a><span class="ln">   224</span>		defer enc.mutex.Unlock()
<a id="L225"></a><span class="ln">   225</span>	
<a id="L226"></a><span class="ln">   226</span>		<span class="comment">// Remove any nested writers remaining due to previous errors.</span>
<a id="L227"></a><span class="ln">   227</span>		enc.w = enc.w[0:1]
<a id="L228"></a><span class="ln">   228</span>	
<a id="L229"></a><span class="ln">   229</span>		ut, err := validUserType(value.Type())
<a id="L230"></a><span class="ln">   230</span>		if err != nil {
<a id="L231"></a><span class="ln">   231</span>			return err
<a id="L232"></a><span class="ln">   232</span>		}
<a id="L233"></a><span class="ln">   233</span>	
<a id="L234"></a><span class="ln">   234</span>		enc.err = nil
<a id="L235"></a><span class="ln">   235</span>		enc.byteBuf.Reset()
<a id="L236"></a><span class="ln">   236</span>		enc.byteBuf.Write(spaceForLength)
<a id="L237"></a><span class="ln">   237</span>		state := enc.newEncoderState(&amp;enc.byteBuf)
<a id="L238"></a><span class="ln">   238</span>	
<a id="L239"></a><span class="ln">   239</span>		enc.sendTypeDescriptor(enc.writer(), state, ut)
<a id="L240"></a><span class="ln">   240</span>		enc.sendTypeId(state, ut)
<a id="L241"></a><span class="ln">   241</span>		if enc.err != nil {
<a id="L242"></a><span class="ln">   242</span>			return enc.err
<a id="L243"></a><span class="ln">   243</span>		}
<a id="L244"></a><span class="ln">   244</span>	
<a id="L245"></a><span class="ln">   245</span>		<span class="comment">// Encode the object.</span>
<a id="L246"></a><span class="ln">   246</span>		enc.encode(state.b, value, ut)
<a id="L247"></a><span class="ln">   247</span>		if enc.err == nil {
<a id="L248"></a><span class="ln">   248</span>			enc.writeMessage(enc.writer(), state.b)
<a id="L249"></a><span class="ln">   249</span>		}
<a id="L250"></a><span class="ln">   250</span>	
<a id="L251"></a><span class="ln">   251</span>		enc.freeEncoderState(state)
<a id="L252"></a><span class="ln">   252</span>		return enc.err
<a id="L253"></a><span class="ln">   253</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

