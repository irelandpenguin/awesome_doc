<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/encoding/json/stream.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/encoding/json/stream.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package json
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;errors&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;io&#34;
<a id="L10"></a><span class="ln">    10</span>	)
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// A Decoder reads and decodes JSON objects from an input stream.</span>
<a id="L13"></a><span class="ln">    13</span>	type Decoder struct {
<a id="L14"></a><span class="ln">    14</span>		r    io.Reader
<a id="L15"></a><span class="ln">    15</span>		buf  []byte
<a id="L16"></a><span class="ln">    16</span>		d    decodeState
<a id="L17"></a><span class="ln">    17</span>		scan scanner
<a id="L18"></a><span class="ln">    18</span>		err  error
<a id="L19"></a><span class="ln">    19</span>	}
<a id="L20"></a><span class="ln">    20</span>	
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// NewDecoder returns a new decoder that reads from r.</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">//</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// The decoder introduces its own buffering and may</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// read data from r beyond the JSON values requested.</span>
<a id="L25"></a><span class="ln">    25</span>	func NewDecoder(r io.Reader) *Decoder {
<a id="L26"></a><span class="ln">    26</span>		return &amp;Decoder{r: r}
<a id="L27"></a><span class="ln">    27</span>	}
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// Decode reads the next JSON-encoded value from its</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// input and stores it in the value pointed to by v.</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">//</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// See the documentation for Unmarshal for details about</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// the conversion of JSON into a Go value.</span>
<a id="L34"></a><span class="ln">    34</span>	func (dec *Decoder) Decode(v interface{}) error {
<a id="L35"></a><span class="ln">    35</span>		if dec.err != nil {
<a id="L36"></a><span class="ln">    36</span>			return dec.err
<a id="L37"></a><span class="ln">    37</span>		}
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>		n, err := dec.readValue()
<a id="L40"></a><span class="ln">    40</span>		if err != nil {
<a id="L41"></a><span class="ln">    41</span>			return err
<a id="L42"></a><span class="ln">    42</span>		}
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>		<span class="comment">// Don&#39;t save err from unmarshal into dec.err:</span>
<a id="L45"></a><span class="ln">    45</span>		<span class="comment">// the connection is still usable since we read a complete JSON</span>
<a id="L46"></a><span class="ln">    46</span>		<span class="comment">// object from it before the error happened.</span>
<a id="L47"></a><span class="ln">    47</span>		dec.d.init(dec.buf[0:n])
<a id="L48"></a><span class="ln">    48</span>		err = dec.d.unmarshal(v)
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>		<span class="comment">// Slide rest of data down.</span>
<a id="L51"></a><span class="ln">    51</span>		rest := copy(dec.buf, dec.buf[n:])
<a id="L52"></a><span class="ln">    52</span>		dec.buf = dec.buf[0:rest]
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>		return err
<a id="L55"></a><span class="ln">    55</span>	}
<a id="L56"></a><span class="ln">    56</span>	
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">// readValue reads a JSON value into dec.buf.</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">// It returns the length of the encoding.</span>
<a id="L59"></a><span class="ln">    59</span>	func (dec *Decoder) readValue() (int, error) {
<a id="L60"></a><span class="ln">    60</span>		dec.scan.reset()
<a id="L61"></a><span class="ln">    61</span>	
<a id="L62"></a><span class="ln">    62</span>		scanp := 0
<a id="L63"></a><span class="ln">    63</span>		var err error
<a id="L64"></a><span class="ln">    64</span>	Input:
<a id="L65"></a><span class="ln">    65</span>		for {
<a id="L66"></a><span class="ln">    66</span>			<span class="comment">// Look in the buffer for a new value.</span>
<a id="L67"></a><span class="ln">    67</span>			for i, c := range dec.buf[scanp:] {
<a id="L68"></a><span class="ln">    68</span>				dec.scan.bytes++
<a id="L69"></a><span class="ln">    69</span>				v := dec.scan.step(&amp;dec.scan, int(c))
<a id="L70"></a><span class="ln">    70</span>				if v == scanEnd {
<a id="L71"></a><span class="ln">    71</span>					scanp += i
<a id="L72"></a><span class="ln">    72</span>					break Input
<a id="L73"></a><span class="ln">    73</span>				}
<a id="L74"></a><span class="ln">    74</span>				<span class="comment">// scanEnd is delayed one byte.</span>
<a id="L75"></a><span class="ln">    75</span>				<span class="comment">// We might block trying to get that byte from src,</span>
<a id="L76"></a><span class="ln">    76</span>				<span class="comment">// so instead invent a space byte.</span>
<a id="L77"></a><span class="ln">    77</span>				if v == scanEndObject &amp;&amp; dec.scan.step(&amp;dec.scan, &#39; &#39;) == scanEnd {
<a id="L78"></a><span class="ln">    78</span>					scanp += i + 1
<a id="L79"></a><span class="ln">    79</span>					break Input
<a id="L80"></a><span class="ln">    80</span>				}
<a id="L81"></a><span class="ln">    81</span>				if v == scanError {
<a id="L82"></a><span class="ln">    82</span>					dec.err = dec.scan.err
<a id="L83"></a><span class="ln">    83</span>					return 0, dec.scan.err
<a id="L84"></a><span class="ln">    84</span>				}
<a id="L85"></a><span class="ln">    85</span>			}
<a id="L86"></a><span class="ln">    86</span>			scanp = len(dec.buf)
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>			<span class="comment">// Did the last read have an error?</span>
<a id="L89"></a><span class="ln">    89</span>			<span class="comment">// Delayed until now to allow buffer scan.</span>
<a id="L90"></a><span class="ln">    90</span>			if err != nil {
<a id="L91"></a><span class="ln">    91</span>				if err == io.EOF {
<a id="L92"></a><span class="ln">    92</span>					if dec.scan.step(&amp;dec.scan, &#39; &#39;) == scanEnd {
<a id="L93"></a><span class="ln">    93</span>						break Input
<a id="L94"></a><span class="ln">    94</span>					}
<a id="L95"></a><span class="ln">    95</span>					if nonSpace(dec.buf) {
<a id="L96"></a><span class="ln">    96</span>						err = io.ErrUnexpectedEOF
<a id="L97"></a><span class="ln">    97</span>					}
<a id="L98"></a><span class="ln">    98</span>				}
<a id="L99"></a><span class="ln">    99</span>				dec.err = err
<a id="L100"></a><span class="ln">   100</span>				return 0, err
<a id="L101"></a><span class="ln">   101</span>			}
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>			<span class="comment">// Make room to read more into the buffer.</span>
<a id="L104"></a><span class="ln">   104</span>			const minRead = 512
<a id="L105"></a><span class="ln">   105</span>			if cap(dec.buf)-len(dec.buf) &lt; minRead {
<a id="L106"></a><span class="ln">   106</span>				newBuf := make([]byte, len(dec.buf), 2*cap(dec.buf)+minRead)
<a id="L107"></a><span class="ln">   107</span>				copy(newBuf, dec.buf)
<a id="L108"></a><span class="ln">   108</span>				dec.buf = newBuf
<a id="L109"></a><span class="ln">   109</span>			}
<a id="L110"></a><span class="ln">   110</span>	
<a id="L111"></a><span class="ln">   111</span>			<span class="comment">// Read.  Delay error for next iteration (after scan).</span>
<a id="L112"></a><span class="ln">   112</span>			var n int
<a id="L113"></a><span class="ln">   113</span>			n, err = dec.r.Read(dec.buf[len(dec.buf):cap(dec.buf)])
<a id="L114"></a><span class="ln">   114</span>			dec.buf = dec.buf[0 : len(dec.buf)+n]
<a id="L115"></a><span class="ln">   115</span>		}
<a id="L116"></a><span class="ln">   116</span>		return scanp, nil
<a id="L117"></a><span class="ln">   117</span>	}
<a id="L118"></a><span class="ln">   118</span>	
<a id="L119"></a><span class="ln">   119</span>	func nonSpace(b []byte) bool {
<a id="L120"></a><span class="ln">   120</span>		for _, c := range b {
<a id="L121"></a><span class="ln">   121</span>			if !isSpace(rune(c)) {
<a id="L122"></a><span class="ln">   122</span>				return true
<a id="L123"></a><span class="ln">   123</span>			}
<a id="L124"></a><span class="ln">   124</span>		}
<a id="L125"></a><span class="ln">   125</span>		return false
<a id="L126"></a><span class="ln">   126</span>	}
<a id="L127"></a><span class="ln">   127</span>	
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// An Encoder writes JSON objects to an output stream.</span>
<a id="L129"></a><span class="ln">   129</span>	type Encoder struct {
<a id="L130"></a><span class="ln">   130</span>		w   io.Writer
<a id="L131"></a><span class="ln">   131</span>		e   encodeState
<a id="L132"></a><span class="ln">   132</span>		err error
<a id="L133"></a><span class="ln">   133</span>	}
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">// NewEncoder returns a new encoder that writes to w.</span>
<a id="L136"></a><span class="ln">   136</span>	func NewEncoder(w io.Writer) *Encoder {
<a id="L137"></a><span class="ln">   137</span>		return &amp;Encoder{w: w}
<a id="L138"></a><span class="ln">   138</span>	}
<a id="L139"></a><span class="ln">   139</span>	
<a id="L140"></a><span class="ln">   140</span>	<span class="comment">// Encode writes the JSON encoding of v to the connection.</span>
<a id="L141"></a><span class="ln">   141</span>	<span class="comment">//</span>
<a id="L142"></a><span class="ln">   142</span>	<span class="comment">// See the documentation for Marshal for details about the</span>
<a id="L143"></a><span class="ln">   143</span>	<span class="comment">// conversion of Go values to JSON.</span>
<a id="L144"></a><span class="ln">   144</span>	func (enc *Encoder) Encode(v interface{}) error {
<a id="L145"></a><span class="ln">   145</span>		if enc.err != nil {
<a id="L146"></a><span class="ln">   146</span>			return enc.err
<a id="L147"></a><span class="ln">   147</span>		}
<a id="L148"></a><span class="ln">   148</span>		enc.e.Reset()
<a id="L149"></a><span class="ln">   149</span>		err := enc.e.marshal(v)
<a id="L150"></a><span class="ln">   150</span>		if err != nil {
<a id="L151"></a><span class="ln">   151</span>			return err
<a id="L152"></a><span class="ln">   152</span>		}
<a id="L153"></a><span class="ln">   153</span>	
<a id="L154"></a><span class="ln">   154</span>		<span class="comment">// Terminate each value with a newline.</span>
<a id="L155"></a><span class="ln">   155</span>		<span class="comment">// This makes the output look a little nicer</span>
<a id="L156"></a><span class="ln">   156</span>		<span class="comment">// when debugging, and some kind of space</span>
<a id="L157"></a><span class="ln">   157</span>		<span class="comment">// is required if the encoded value was a number,</span>
<a id="L158"></a><span class="ln">   158</span>		<span class="comment">// so that the reader knows there aren&#39;t more</span>
<a id="L159"></a><span class="ln">   159</span>		<span class="comment">// digits coming.</span>
<a id="L160"></a><span class="ln">   160</span>		enc.e.WriteByte(&#39;\n&#39;)
<a id="L161"></a><span class="ln">   161</span>	
<a id="L162"></a><span class="ln">   162</span>		if _, err = enc.w.Write(enc.e.Bytes()); err != nil {
<a id="L163"></a><span class="ln">   163</span>			enc.err = err
<a id="L164"></a><span class="ln">   164</span>		}
<a id="L165"></a><span class="ln">   165</span>		return err
<a id="L166"></a><span class="ln">   166</span>	}
<a id="L167"></a><span class="ln">   167</span>	
<a id="L168"></a><span class="ln">   168</span>	<span class="comment">// RawMessage is a raw encoded JSON object.</span>
<a id="L169"></a><span class="ln">   169</span>	<span class="comment">// It implements Marshaler and Unmarshaler and can</span>
<a id="L170"></a><span class="ln">   170</span>	<span class="comment">// be used to delay JSON decoding or precompute a JSON encoding.</span>
<a id="L171"></a><span class="ln">   171</span>	type RawMessage []byte
<a id="L172"></a><span class="ln">   172</span>	
<a id="L173"></a><span class="ln">   173</span>	<span class="comment">// MarshalJSON returns *m as the JSON encoding of m.</span>
<a id="L174"></a><span class="ln">   174</span>	func (m *RawMessage) MarshalJSON() ([]byte, error) {
<a id="L175"></a><span class="ln">   175</span>		return *m, nil
<a id="L176"></a><span class="ln">   176</span>	}
<a id="L177"></a><span class="ln">   177</span>	
<a id="L178"></a><span class="ln">   178</span>	<span class="comment">// UnmarshalJSON sets *m to a copy of data.</span>
<a id="L179"></a><span class="ln">   179</span>	func (m *RawMessage) UnmarshalJSON(data []byte) error {
<a id="L180"></a><span class="ln">   180</span>		if m == nil {
<a id="L181"></a><span class="ln">   181</span>			return errors.New(&#34;json.RawMessage: UnmarshalJSON on nil pointer&#34;)
<a id="L182"></a><span class="ln">   182</span>		}
<a id="L183"></a><span class="ln">   183</span>		*m = append((*m)[0:0], data...)
<a id="L184"></a><span class="ln">   184</span>		return nil
<a id="L185"></a><span class="ln">   185</span>	}
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>	var _ Marshaler = (*RawMessage)(nil)
<a id="L188"></a><span class="ln">   188</span>	var _ Unmarshaler = (*RawMessage)(nil)
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

