<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/encoding/asn1/common.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/encoding/asn1/common.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package asn1
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;reflect&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;strconv&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;strings&#34;
<a id="L11"></a><span class="ln">    11</span>	)
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// ASN.1 objects have metadata preceding them:</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">//   the tag: the type of the object</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">//   a flag denoting if this object is compound or not</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">//   the class type: the namespace of the tag</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">//   the length of the object, in bytes</span>
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// Here are some standard tags and classes</span>
<a id="L20"></a><span class="ln">    20</span>	
<a id="L21"></a><span class="ln">    21</span>	const (
<a id="L22"></a><span class="ln">    22</span>		tagBoolean         = 1
<a id="L23"></a><span class="ln">    23</span>		tagInteger         = 2
<a id="L24"></a><span class="ln">    24</span>		tagBitString       = 3
<a id="L25"></a><span class="ln">    25</span>		tagOctetString     = 4
<a id="L26"></a><span class="ln">    26</span>		tagOID             = 6
<a id="L27"></a><span class="ln">    27</span>		tagEnum            = 10
<a id="L28"></a><span class="ln">    28</span>		tagUTF8String      = 12
<a id="L29"></a><span class="ln">    29</span>		tagSequence        = 16
<a id="L30"></a><span class="ln">    30</span>		tagSet             = 17
<a id="L31"></a><span class="ln">    31</span>		tagPrintableString = 19
<a id="L32"></a><span class="ln">    32</span>		tagT61String       = 20
<a id="L33"></a><span class="ln">    33</span>		tagIA5String       = 22
<a id="L34"></a><span class="ln">    34</span>		tagUTCTime         = 23
<a id="L35"></a><span class="ln">    35</span>		tagGeneralizedTime = 24
<a id="L36"></a><span class="ln">    36</span>		tagGeneralString   = 27
<a id="L37"></a><span class="ln">    37</span>	)
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>	const (
<a id="L40"></a><span class="ln">    40</span>		classUniversal       = 0
<a id="L41"></a><span class="ln">    41</span>		classApplication     = 1
<a id="L42"></a><span class="ln">    42</span>		classContextSpecific = 2
<a id="L43"></a><span class="ln">    43</span>		classPrivate         = 3
<a id="L44"></a><span class="ln">    44</span>	)
<a id="L45"></a><span class="ln">    45</span>	
<a id="L46"></a><span class="ln">    46</span>	type tagAndLength struct {
<a id="L47"></a><span class="ln">    47</span>		class, tag, length int
<a id="L48"></a><span class="ln">    48</span>		isCompound         bool
<a id="L49"></a><span class="ln">    49</span>	}
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// ASN.1 has IMPLICIT and EXPLICIT tags, which can be translated as &#34;instead</span>
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// of&#34; and &#34;in addition to&#34;. When not specified, every primitive type has a</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">// default tag in the UNIVERSAL class.</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">//</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// For example: a BIT STRING is tagged [UNIVERSAL 3] by default (although ASN.1</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// doesn&#39;t actually have a UNIVERSAL keyword). However, by saying [IMPLICIT</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">// CONTEXT-SPECIFIC 42], that means that the tag is replaced by another.</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">//</span>
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// On the other hand, if it said [EXPLICIT CONTEXT-SPECIFIC 10], then an</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// /additional/ tag would wrap the default tag. This explicit tag will have the</span>
<a id="L61"></a><span class="ln">    61</span>	<span class="comment">// compound flag set.</span>
<a id="L62"></a><span class="ln">    62</span>	<span class="comment">//</span>
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">// (This is used in order to remove ambiguity with optional elements.)</span>
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">//</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// You can layer EXPLICIT and IMPLICIT tags to an arbitrary depth, however we</span>
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">// don&#39;t support that here. We support a single layer of EXPLICIT or IMPLICIT</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// tagging with tag strings on the fields of a structure.</span>
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// fieldParameters is the parsed representation of tag string from a structure field.</span>
<a id="L70"></a><span class="ln">    70</span>	type fieldParameters struct {
<a id="L71"></a><span class="ln">    71</span>		optional     bool   <span class="comment">// true iff the field is OPTIONAL</span>
<a id="L72"></a><span class="ln">    72</span>		explicit     bool   <span class="comment">// true iff an EXPLICIT tag is in use.</span>
<a id="L73"></a><span class="ln">    73</span>		application  bool   <span class="comment">// true iff an APPLICATION tag is in use.</span>
<a id="L74"></a><span class="ln">    74</span>		defaultValue *int64 <span class="comment">// a default value for INTEGER typed fields (maybe nil).</span>
<a id="L75"></a><span class="ln">    75</span>		tag          *int   <span class="comment">// the EXPLICIT or IMPLICIT tag (maybe nil).</span>
<a id="L76"></a><span class="ln">    76</span>		stringType   int    <span class="comment">// the string tag to use when marshaling.</span>
<a id="L77"></a><span class="ln">    77</span>		set          bool   <span class="comment">// true iff this should be encoded as a SET</span>
<a id="L78"></a><span class="ln">    78</span>		omitEmpty    bool   <span class="comment">// true iff this should be omitted if empty when marshaling.</span>
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>		<span class="comment">// Invariants:</span>
<a id="L81"></a><span class="ln">    81</span>		<span class="comment">//   if explicit is set, tag is non-nil.</span>
<a id="L82"></a><span class="ln">    82</span>	}
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">// Given a tag string with the format specified in the package comment,</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">// parseFieldParameters will parse it into a fieldParameters structure,</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// ignoring unknown parts of the string.</span>
<a id="L87"></a><span class="ln">    87</span>	func parseFieldParameters(str string) (ret fieldParameters) {
<a id="L88"></a><span class="ln">    88</span>		for _, part := range strings.Split(str, &#34;,&#34;) {
<a id="L89"></a><span class="ln">    89</span>			switch {
<a id="L90"></a><span class="ln">    90</span>			case part == &#34;optional&#34;:
<a id="L91"></a><span class="ln">    91</span>				ret.optional = true
<a id="L92"></a><span class="ln">    92</span>			case part == &#34;explicit&#34;:
<a id="L93"></a><span class="ln">    93</span>				ret.explicit = true
<a id="L94"></a><span class="ln">    94</span>				if ret.tag == nil {
<a id="L95"></a><span class="ln">    95</span>					ret.tag = new(int)
<a id="L96"></a><span class="ln">    96</span>				}
<a id="L97"></a><span class="ln">    97</span>			case part == &#34;ia5&#34;:
<a id="L98"></a><span class="ln">    98</span>				ret.stringType = tagIA5String
<a id="L99"></a><span class="ln">    99</span>			case part == &#34;printable&#34;:
<a id="L100"></a><span class="ln">   100</span>				ret.stringType = tagPrintableString
<a id="L101"></a><span class="ln">   101</span>			case strings.HasPrefix(part, &#34;default:&#34;):
<a id="L102"></a><span class="ln">   102</span>				i, err := strconv.ParseInt(part[8:], 10, 64)
<a id="L103"></a><span class="ln">   103</span>				if err == nil {
<a id="L104"></a><span class="ln">   104</span>					ret.defaultValue = new(int64)
<a id="L105"></a><span class="ln">   105</span>					*ret.defaultValue = i
<a id="L106"></a><span class="ln">   106</span>				}
<a id="L107"></a><span class="ln">   107</span>			case strings.HasPrefix(part, &#34;tag:&#34;):
<a id="L108"></a><span class="ln">   108</span>				i, err := strconv.Atoi(part[4:])
<a id="L109"></a><span class="ln">   109</span>				if err == nil {
<a id="L110"></a><span class="ln">   110</span>					ret.tag = new(int)
<a id="L111"></a><span class="ln">   111</span>					*ret.tag = i
<a id="L112"></a><span class="ln">   112</span>				}
<a id="L113"></a><span class="ln">   113</span>			case part == &#34;set&#34;:
<a id="L114"></a><span class="ln">   114</span>				ret.set = true
<a id="L115"></a><span class="ln">   115</span>			case part == &#34;application&#34;:
<a id="L116"></a><span class="ln">   116</span>				ret.application = true
<a id="L117"></a><span class="ln">   117</span>				if ret.tag == nil {
<a id="L118"></a><span class="ln">   118</span>					ret.tag = new(int)
<a id="L119"></a><span class="ln">   119</span>				}
<a id="L120"></a><span class="ln">   120</span>			case part == &#34;omitempty&#34;:
<a id="L121"></a><span class="ln">   121</span>				ret.omitEmpty = true
<a id="L122"></a><span class="ln">   122</span>			}
<a id="L123"></a><span class="ln">   123</span>		}
<a id="L124"></a><span class="ln">   124</span>		return
<a id="L125"></a><span class="ln">   125</span>	}
<a id="L126"></a><span class="ln">   126</span>	
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// Given a reflected Go type, getUniversalType returns the default tag number</span>
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// and expected compound flag.</span>
<a id="L129"></a><span class="ln">   129</span>	func getUniversalType(t reflect.Type) (tagNumber int, isCompound, ok bool) {
<a id="L130"></a><span class="ln">   130</span>		switch t {
<a id="L131"></a><span class="ln">   131</span>		case objectIdentifierType:
<a id="L132"></a><span class="ln">   132</span>			return tagOID, false, true
<a id="L133"></a><span class="ln">   133</span>		case bitStringType:
<a id="L134"></a><span class="ln">   134</span>			return tagBitString, false, true
<a id="L135"></a><span class="ln">   135</span>		case timeType:
<a id="L136"></a><span class="ln">   136</span>			return tagUTCTime, false, true
<a id="L137"></a><span class="ln">   137</span>		case enumeratedType:
<a id="L138"></a><span class="ln">   138</span>			return tagEnum, false, true
<a id="L139"></a><span class="ln">   139</span>		case bigIntType:
<a id="L140"></a><span class="ln">   140</span>			return tagInteger, false, true
<a id="L141"></a><span class="ln">   141</span>		}
<a id="L142"></a><span class="ln">   142</span>		switch t.Kind() {
<a id="L143"></a><span class="ln">   143</span>		case reflect.Bool:
<a id="L144"></a><span class="ln">   144</span>			return tagBoolean, false, true
<a id="L145"></a><span class="ln">   145</span>		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<a id="L146"></a><span class="ln">   146</span>			return tagInteger, false, true
<a id="L147"></a><span class="ln">   147</span>		case reflect.Struct:
<a id="L148"></a><span class="ln">   148</span>			return tagSequence, true, true
<a id="L149"></a><span class="ln">   149</span>		case reflect.Slice:
<a id="L150"></a><span class="ln">   150</span>			if t.Elem().Kind() == reflect.Uint8 {
<a id="L151"></a><span class="ln">   151</span>				return tagOctetString, false, true
<a id="L152"></a><span class="ln">   152</span>			}
<a id="L153"></a><span class="ln">   153</span>			if strings.HasSuffix(t.Name(), &#34;SET&#34;) {
<a id="L154"></a><span class="ln">   154</span>				return tagSet, true, true
<a id="L155"></a><span class="ln">   155</span>			}
<a id="L156"></a><span class="ln">   156</span>			return tagSequence, true, true
<a id="L157"></a><span class="ln">   157</span>		case reflect.String:
<a id="L158"></a><span class="ln">   158</span>			return tagPrintableString, false, true
<a id="L159"></a><span class="ln">   159</span>		}
<a id="L160"></a><span class="ln">   160</span>		return 0, false, false
<a id="L161"></a><span class="ln">   161</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

