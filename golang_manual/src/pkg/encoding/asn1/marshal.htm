<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/encoding/asn1/marshal.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/encoding/asn1/marshal.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package asn1
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bytes&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;fmt&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;io&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;math/big&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;reflect&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;time&#34;
<a id="L14"></a><span class="ln">    14</span>	)
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// A forkableWriter is an in-memory buffer that can be</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// &#39;forked&#39; to create new forkableWriters that bracket the</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// original.  After</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">//    pre, post := w.fork();</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// the overall sequence of bytes represented is logically w+pre+post.</span>
<a id="L21"></a><span class="ln">    21</span>	type forkableWriter struct {
<a id="L22"></a><span class="ln">    22</span>		*bytes.Buffer
<a id="L23"></a><span class="ln">    23</span>		pre, post *forkableWriter
<a id="L24"></a><span class="ln">    24</span>	}
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>	func newForkableWriter() *forkableWriter {
<a id="L27"></a><span class="ln">    27</span>		return &amp;forkableWriter{new(bytes.Buffer), nil, nil}
<a id="L28"></a><span class="ln">    28</span>	}
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>	func (f *forkableWriter) fork() (pre, post *forkableWriter) {
<a id="L31"></a><span class="ln">    31</span>		if f.pre != nil || f.post != nil {
<a id="L32"></a><span class="ln">    32</span>			panic(&#34;have already forked&#34;)
<a id="L33"></a><span class="ln">    33</span>		}
<a id="L34"></a><span class="ln">    34</span>		f.pre = newForkableWriter()
<a id="L35"></a><span class="ln">    35</span>		f.post = newForkableWriter()
<a id="L36"></a><span class="ln">    36</span>		return f.pre, f.post
<a id="L37"></a><span class="ln">    37</span>	}
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>	func (f *forkableWriter) Len() (l int) {
<a id="L40"></a><span class="ln">    40</span>		l += f.Buffer.Len()
<a id="L41"></a><span class="ln">    41</span>		if f.pre != nil {
<a id="L42"></a><span class="ln">    42</span>			l += f.pre.Len()
<a id="L43"></a><span class="ln">    43</span>		}
<a id="L44"></a><span class="ln">    44</span>		if f.post != nil {
<a id="L45"></a><span class="ln">    45</span>			l += f.post.Len()
<a id="L46"></a><span class="ln">    46</span>		}
<a id="L47"></a><span class="ln">    47</span>		return
<a id="L48"></a><span class="ln">    48</span>	}
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>	func (f *forkableWriter) writeTo(out io.Writer) (n int, err error) {
<a id="L51"></a><span class="ln">    51</span>		n, err = out.Write(f.Bytes())
<a id="L52"></a><span class="ln">    52</span>		if err != nil {
<a id="L53"></a><span class="ln">    53</span>			return
<a id="L54"></a><span class="ln">    54</span>		}
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>		var nn int
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>		if f.pre != nil {
<a id="L59"></a><span class="ln">    59</span>			nn, err = f.pre.writeTo(out)
<a id="L60"></a><span class="ln">    60</span>			n += nn
<a id="L61"></a><span class="ln">    61</span>			if err != nil {
<a id="L62"></a><span class="ln">    62</span>				return
<a id="L63"></a><span class="ln">    63</span>			}
<a id="L64"></a><span class="ln">    64</span>		}
<a id="L65"></a><span class="ln">    65</span>	
<a id="L66"></a><span class="ln">    66</span>		if f.post != nil {
<a id="L67"></a><span class="ln">    67</span>			nn, err = f.post.writeTo(out)
<a id="L68"></a><span class="ln">    68</span>			n += nn
<a id="L69"></a><span class="ln">    69</span>		}
<a id="L70"></a><span class="ln">    70</span>		return
<a id="L71"></a><span class="ln">    71</span>	}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>	func marshalBase128Int(out *forkableWriter, n int64) (err error) {
<a id="L74"></a><span class="ln">    74</span>		if n == 0 {
<a id="L75"></a><span class="ln">    75</span>			err = out.WriteByte(0)
<a id="L76"></a><span class="ln">    76</span>			return
<a id="L77"></a><span class="ln">    77</span>		}
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>		l := 0
<a id="L80"></a><span class="ln">    80</span>		for i := n; i &gt; 0; i &gt;&gt;= 7 {
<a id="L81"></a><span class="ln">    81</span>			l++
<a id="L82"></a><span class="ln">    82</span>		}
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>		for i := l - 1; i &gt;= 0; i-- {
<a id="L85"></a><span class="ln">    85</span>			o := byte(n &gt;&gt; uint(i*7))
<a id="L86"></a><span class="ln">    86</span>			o &amp;= 0x7f
<a id="L87"></a><span class="ln">    87</span>			if i != 0 {
<a id="L88"></a><span class="ln">    88</span>				o |= 0x80
<a id="L89"></a><span class="ln">    89</span>			}
<a id="L90"></a><span class="ln">    90</span>			err = out.WriteByte(o)
<a id="L91"></a><span class="ln">    91</span>			if err != nil {
<a id="L92"></a><span class="ln">    92</span>				return
<a id="L93"></a><span class="ln">    93</span>			}
<a id="L94"></a><span class="ln">    94</span>		}
<a id="L95"></a><span class="ln">    95</span>	
<a id="L96"></a><span class="ln">    96</span>		return nil
<a id="L97"></a><span class="ln">    97</span>	}
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>	func marshalInt64(out *forkableWriter, i int64) (err error) {
<a id="L100"></a><span class="ln">   100</span>		n := int64Length(i)
<a id="L101"></a><span class="ln">   101</span>	
<a id="L102"></a><span class="ln">   102</span>		for ; n &gt; 0; n-- {
<a id="L103"></a><span class="ln">   103</span>			err = out.WriteByte(byte(i &gt;&gt; uint((n-1)*8)))
<a id="L104"></a><span class="ln">   104</span>			if err != nil {
<a id="L105"></a><span class="ln">   105</span>				return
<a id="L106"></a><span class="ln">   106</span>			}
<a id="L107"></a><span class="ln">   107</span>		}
<a id="L108"></a><span class="ln">   108</span>	
<a id="L109"></a><span class="ln">   109</span>		return nil
<a id="L110"></a><span class="ln">   110</span>	}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>	func int64Length(i int64) (numBytes int) {
<a id="L113"></a><span class="ln">   113</span>		numBytes = 1
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>		for i &gt; 127 {
<a id="L116"></a><span class="ln">   116</span>			numBytes++
<a id="L117"></a><span class="ln">   117</span>			i &gt;&gt;= 8
<a id="L118"></a><span class="ln">   118</span>		}
<a id="L119"></a><span class="ln">   119</span>	
<a id="L120"></a><span class="ln">   120</span>		for i &lt; -128 {
<a id="L121"></a><span class="ln">   121</span>			numBytes++
<a id="L122"></a><span class="ln">   122</span>			i &gt;&gt;= 8
<a id="L123"></a><span class="ln">   123</span>		}
<a id="L124"></a><span class="ln">   124</span>	
<a id="L125"></a><span class="ln">   125</span>		return
<a id="L126"></a><span class="ln">   126</span>	}
<a id="L127"></a><span class="ln">   127</span>	
<a id="L128"></a><span class="ln">   128</span>	func marshalBigInt(out *forkableWriter, n *big.Int) (err error) {
<a id="L129"></a><span class="ln">   129</span>		if n.Sign() &lt; 0 {
<a id="L130"></a><span class="ln">   130</span>			<span class="comment">// A negative number has to be converted to two&#39;s-complement</span>
<a id="L131"></a><span class="ln">   131</span>			<span class="comment">// form. So we&#39;ll subtract 1 and invert. If the</span>
<a id="L132"></a><span class="ln">   132</span>			<span class="comment">// most-significant-bit isn&#39;t set then we&#39;ll need to pad the</span>
<a id="L133"></a><span class="ln">   133</span>			<span class="comment">// beginning with 0xff in order to keep the number negative.</span>
<a id="L134"></a><span class="ln">   134</span>			nMinus1 := new(big.Int).Neg(n)
<a id="L135"></a><span class="ln">   135</span>			nMinus1.Sub(nMinus1, bigOne)
<a id="L136"></a><span class="ln">   136</span>			bytes := nMinus1.Bytes()
<a id="L137"></a><span class="ln">   137</span>			for i := range bytes {
<a id="L138"></a><span class="ln">   138</span>				bytes[i] ^= 0xff
<a id="L139"></a><span class="ln">   139</span>			}
<a id="L140"></a><span class="ln">   140</span>			if len(bytes) == 0 || bytes[0]&amp;0x80 == 0 {
<a id="L141"></a><span class="ln">   141</span>				err = out.WriteByte(0xff)
<a id="L142"></a><span class="ln">   142</span>				if err != nil {
<a id="L143"></a><span class="ln">   143</span>					return
<a id="L144"></a><span class="ln">   144</span>				}
<a id="L145"></a><span class="ln">   145</span>			}
<a id="L146"></a><span class="ln">   146</span>			_, err = out.Write(bytes)
<a id="L147"></a><span class="ln">   147</span>		} else if n.Sign() == 0 {
<a id="L148"></a><span class="ln">   148</span>			<span class="comment">// Zero is written as a single 0 zero rather than no bytes.</span>
<a id="L149"></a><span class="ln">   149</span>			err = out.WriteByte(0x00)
<a id="L150"></a><span class="ln">   150</span>		} else {
<a id="L151"></a><span class="ln">   151</span>			bytes := n.Bytes()
<a id="L152"></a><span class="ln">   152</span>			if len(bytes) &gt; 0 &amp;&amp; bytes[0]&amp;0x80 != 0 {
<a id="L153"></a><span class="ln">   153</span>				<span class="comment">// We&#39;ll have to pad this with 0x00 in order to stop it</span>
<a id="L154"></a><span class="ln">   154</span>				<span class="comment">// looking like a negative number.</span>
<a id="L155"></a><span class="ln">   155</span>				err = out.WriteByte(0)
<a id="L156"></a><span class="ln">   156</span>				if err != nil {
<a id="L157"></a><span class="ln">   157</span>					return
<a id="L158"></a><span class="ln">   158</span>				}
<a id="L159"></a><span class="ln">   159</span>			}
<a id="L160"></a><span class="ln">   160</span>			_, err = out.Write(bytes)
<a id="L161"></a><span class="ln">   161</span>		}
<a id="L162"></a><span class="ln">   162</span>		return
<a id="L163"></a><span class="ln">   163</span>	}
<a id="L164"></a><span class="ln">   164</span>	
<a id="L165"></a><span class="ln">   165</span>	func marshalLength(out *forkableWriter, i int) (err error) {
<a id="L166"></a><span class="ln">   166</span>		n := lengthLength(i)
<a id="L167"></a><span class="ln">   167</span>	
<a id="L168"></a><span class="ln">   168</span>		for ; n &gt; 0; n-- {
<a id="L169"></a><span class="ln">   169</span>			err = out.WriteByte(byte(i &gt;&gt; uint((n-1)*8)))
<a id="L170"></a><span class="ln">   170</span>			if err != nil {
<a id="L171"></a><span class="ln">   171</span>				return
<a id="L172"></a><span class="ln">   172</span>			}
<a id="L173"></a><span class="ln">   173</span>		}
<a id="L174"></a><span class="ln">   174</span>	
<a id="L175"></a><span class="ln">   175</span>		return nil
<a id="L176"></a><span class="ln">   176</span>	}
<a id="L177"></a><span class="ln">   177</span>	
<a id="L178"></a><span class="ln">   178</span>	func lengthLength(i int) (numBytes int) {
<a id="L179"></a><span class="ln">   179</span>		numBytes = 1
<a id="L180"></a><span class="ln">   180</span>		for i &gt; 255 {
<a id="L181"></a><span class="ln">   181</span>			numBytes++
<a id="L182"></a><span class="ln">   182</span>			i &gt;&gt;= 8
<a id="L183"></a><span class="ln">   183</span>		}
<a id="L184"></a><span class="ln">   184</span>		return
<a id="L185"></a><span class="ln">   185</span>	}
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>	func marshalTagAndLength(out *forkableWriter, t tagAndLength) (err error) {
<a id="L188"></a><span class="ln">   188</span>		b := uint8(t.class) &lt;&lt; 6
<a id="L189"></a><span class="ln">   189</span>		if t.isCompound {
<a id="L190"></a><span class="ln">   190</span>			b |= 0x20
<a id="L191"></a><span class="ln">   191</span>		}
<a id="L192"></a><span class="ln">   192</span>		if t.tag &gt;= 31 {
<a id="L193"></a><span class="ln">   193</span>			b |= 0x1f
<a id="L194"></a><span class="ln">   194</span>			err = out.WriteByte(b)
<a id="L195"></a><span class="ln">   195</span>			if err != nil {
<a id="L196"></a><span class="ln">   196</span>				return
<a id="L197"></a><span class="ln">   197</span>			}
<a id="L198"></a><span class="ln">   198</span>			err = marshalBase128Int(out, int64(t.tag))
<a id="L199"></a><span class="ln">   199</span>			if err != nil {
<a id="L200"></a><span class="ln">   200</span>				return
<a id="L201"></a><span class="ln">   201</span>			}
<a id="L202"></a><span class="ln">   202</span>		} else {
<a id="L203"></a><span class="ln">   203</span>			b |= uint8(t.tag)
<a id="L204"></a><span class="ln">   204</span>			err = out.WriteByte(b)
<a id="L205"></a><span class="ln">   205</span>			if err != nil {
<a id="L206"></a><span class="ln">   206</span>				return
<a id="L207"></a><span class="ln">   207</span>			}
<a id="L208"></a><span class="ln">   208</span>		}
<a id="L209"></a><span class="ln">   209</span>	
<a id="L210"></a><span class="ln">   210</span>		if t.length &gt;= 128 {
<a id="L211"></a><span class="ln">   211</span>			l := lengthLength(t.length)
<a id="L212"></a><span class="ln">   212</span>			err = out.WriteByte(0x80 | byte(l))
<a id="L213"></a><span class="ln">   213</span>			if err != nil {
<a id="L214"></a><span class="ln">   214</span>				return
<a id="L215"></a><span class="ln">   215</span>			}
<a id="L216"></a><span class="ln">   216</span>			err = marshalLength(out, t.length)
<a id="L217"></a><span class="ln">   217</span>			if err != nil {
<a id="L218"></a><span class="ln">   218</span>				return
<a id="L219"></a><span class="ln">   219</span>			}
<a id="L220"></a><span class="ln">   220</span>		} else {
<a id="L221"></a><span class="ln">   221</span>			err = out.WriteByte(byte(t.length))
<a id="L222"></a><span class="ln">   222</span>			if err != nil {
<a id="L223"></a><span class="ln">   223</span>				return
<a id="L224"></a><span class="ln">   224</span>			}
<a id="L225"></a><span class="ln">   225</span>		}
<a id="L226"></a><span class="ln">   226</span>	
<a id="L227"></a><span class="ln">   227</span>		return nil
<a id="L228"></a><span class="ln">   228</span>	}
<a id="L229"></a><span class="ln">   229</span>	
<a id="L230"></a><span class="ln">   230</span>	func marshalBitString(out *forkableWriter, b BitString) (err error) {
<a id="L231"></a><span class="ln">   231</span>		paddingBits := byte((8 - b.BitLength%8) % 8)
<a id="L232"></a><span class="ln">   232</span>		err = out.WriteByte(paddingBits)
<a id="L233"></a><span class="ln">   233</span>		if err != nil {
<a id="L234"></a><span class="ln">   234</span>			return
<a id="L235"></a><span class="ln">   235</span>		}
<a id="L236"></a><span class="ln">   236</span>		_, err = out.Write(b.Bytes)
<a id="L237"></a><span class="ln">   237</span>		return
<a id="L238"></a><span class="ln">   238</span>	}
<a id="L239"></a><span class="ln">   239</span>	
<a id="L240"></a><span class="ln">   240</span>	func marshalObjectIdentifier(out *forkableWriter, oid []int) (err error) {
<a id="L241"></a><span class="ln">   241</span>		if len(oid) &lt; 2 || oid[0] &gt; 6 || oid[1] &gt;= 40 {
<a id="L242"></a><span class="ln">   242</span>			return StructuralError{&#34;invalid object identifier&#34;}
<a id="L243"></a><span class="ln">   243</span>		}
<a id="L244"></a><span class="ln">   244</span>	
<a id="L245"></a><span class="ln">   245</span>		err = out.WriteByte(byte(oid[0]*40 + oid[1]))
<a id="L246"></a><span class="ln">   246</span>		if err != nil {
<a id="L247"></a><span class="ln">   247</span>			return
<a id="L248"></a><span class="ln">   248</span>		}
<a id="L249"></a><span class="ln">   249</span>		for i := 2; i &lt; len(oid); i++ {
<a id="L250"></a><span class="ln">   250</span>			err = marshalBase128Int(out, int64(oid[i]))
<a id="L251"></a><span class="ln">   251</span>			if err != nil {
<a id="L252"></a><span class="ln">   252</span>				return
<a id="L253"></a><span class="ln">   253</span>			}
<a id="L254"></a><span class="ln">   254</span>		}
<a id="L255"></a><span class="ln">   255</span>	
<a id="L256"></a><span class="ln">   256</span>		return
<a id="L257"></a><span class="ln">   257</span>	}
<a id="L258"></a><span class="ln">   258</span>	
<a id="L259"></a><span class="ln">   259</span>	func marshalPrintableString(out *forkableWriter, s string) (err error) {
<a id="L260"></a><span class="ln">   260</span>		b := []byte(s)
<a id="L261"></a><span class="ln">   261</span>		for _, c := range b {
<a id="L262"></a><span class="ln">   262</span>			if !isPrintable(c) {
<a id="L263"></a><span class="ln">   263</span>				return StructuralError{&#34;PrintableString contains invalid character&#34;}
<a id="L264"></a><span class="ln">   264</span>			}
<a id="L265"></a><span class="ln">   265</span>		}
<a id="L266"></a><span class="ln">   266</span>	
<a id="L267"></a><span class="ln">   267</span>		_, err = out.Write(b)
<a id="L268"></a><span class="ln">   268</span>		return
<a id="L269"></a><span class="ln">   269</span>	}
<a id="L270"></a><span class="ln">   270</span>	
<a id="L271"></a><span class="ln">   271</span>	func marshalIA5String(out *forkableWriter, s string) (err error) {
<a id="L272"></a><span class="ln">   272</span>		b := []byte(s)
<a id="L273"></a><span class="ln">   273</span>		for _, c := range b {
<a id="L274"></a><span class="ln">   274</span>			if c &gt; 127 {
<a id="L275"></a><span class="ln">   275</span>				return StructuralError{&#34;IA5String contains invalid character&#34;}
<a id="L276"></a><span class="ln">   276</span>			}
<a id="L277"></a><span class="ln">   277</span>		}
<a id="L278"></a><span class="ln">   278</span>	
<a id="L279"></a><span class="ln">   279</span>		_, err = out.Write(b)
<a id="L280"></a><span class="ln">   280</span>		return
<a id="L281"></a><span class="ln">   281</span>	}
<a id="L282"></a><span class="ln">   282</span>	
<a id="L283"></a><span class="ln">   283</span>	func marshalTwoDigits(out *forkableWriter, v int) (err error) {
<a id="L284"></a><span class="ln">   284</span>		err = out.WriteByte(byte(&#39;0&#39; + (v/10)%10))
<a id="L285"></a><span class="ln">   285</span>		if err != nil {
<a id="L286"></a><span class="ln">   286</span>			return
<a id="L287"></a><span class="ln">   287</span>		}
<a id="L288"></a><span class="ln">   288</span>		return out.WriteByte(byte(&#39;0&#39; + v%10))
<a id="L289"></a><span class="ln">   289</span>	}
<a id="L290"></a><span class="ln">   290</span>	
<a id="L291"></a><span class="ln">   291</span>	func marshalUTCTime(out *forkableWriter, t time.Time) (err error) {
<a id="L292"></a><span class="ln">   292</span>		utc := t.UTC()
<a id="L293"></a><span class="ln">   293</span>		year, month, day := utc.Date()
<a id="L294"></a><span class="ln">   294</span>	
<a id="L295"></a><span class="ln">   295</span>		switch {
<a id="L296"></a><span class="ln">   296</span>		case 1950 &lt;= year &amp;&amp; year &lt; 2000:
<a id="L297"></a><span class="ln">   297</span>			err = marshalTwoDigits(out, int(year-1900))
<a id="L298"></a><span class="ln">   298</span>		case 2000 &lt;= year &amp;&amp; year &lt; 2050:
<a id="L299"></a><span class="ln">   299</span>			err = marshalTwoDigits(out, int(year-2000))
<a id="L300"></a><span class="ln">   300</span>		default:
<a id="L301"></a><span class="ln">   301</span>			return StructuralError{&#34;Cannot represent time as UTCTime&#34;}
<a id="L302"></a><span class="ln">   302</span>		}
<a id="L303"></a><span class="ln">   303</span>		if err != nil {
<a id="L304"></a><span class="ln">   304</span>			return
<a id="L305"></a><span class="ln">   305</span>		}
<a id="L306"></a><span class="ln">   306</span>	
<a id="L307"></a><span class="ln">   307</span>		err = marshalTwoDigits(out, int(month))
<a id="L308"></a><span class="ln">   308</span>		if err != nil {
<a id="L309"></a><span class="ln">   309</span>			return
<a id="L310"></a><span class="ln">   310</span>		}
<a id="L311"></a><span class="ln">   311</span>	
<a id="L312"></a><span class="ln">   312</span>		err = marshalTwoDigits(out, day)
<a id="L313"></a><span class="ln">   313</span>		if err != nil {
<a id="L314"></a><span class="ln">   314</span>			return
<a id="L315"></a><span class="ln">   315</span>		}
<a id="L316"></a><span class="ln">   316</span>	
<a id="L317"></a><span class="ln">   317</span>		hour, min, sec := utc.Clock()
<a id="L318"></a><span class="ln">   318</span>	
<a id="L319"></a><span class="ln">   319</span>		err = marshalTwoDigits(out, hour)
<a id="L320"></a><span class="ln">   320</span>		if err != nil {
<a id="L321"></a><span class="ln">   321</span>			return
<a id="L322"></a><span class="ln">   322</span>		}
<a id="L323"></a><span class="ln">   323</span>	
<a id="L324"></a><span class="ln">   324</span>		err = marshalTwoDigits(out, min)
<a id="L325"></a><span class="ln">   325</span>		if err != nil {
<a id="L326"></a><span class="ln">   326</span>			return
<a id="L327"></a><span class="ln">   327</span>		}
<a id="L328"></a><span class="ln">   328</span>	
<a id="L329"></a><span class="ln">   329</span>		err = marshalTwoDigits(out, sec)
<a id="L330"></a><span class="ln">   330</span>		if err != nil {
<a id="L331"></a><span class="ln">   331</span>			return
<a id="L332"></a><span class="ln">   332</span>		}
<a id="L333"></a><span class="ln">   333</span>	
<a id="L334"></a><span class="ln">   334</span>		_, offset := t.Zone()
<a id="L335"></a><span class="ln">   335</span>	
<a id="L336"></a><span class="ln">   336</span>		switch {
<a id="L337"></a><span class="ln">   337</span>		case offset/60 == 0:
<a id="L338"></a><span class="ln">   338</span>			err = out.WriteByte(&#39;Z&#39;)
<a id="L339"></a><span class="ln">   339</span>			return
<a id="L340"></a><span class="ln">   340</span>		case offset &gt; 0:
<a id="L341"></a><span class="ln">   341</span>			err = out.WriteByte(&#39;+&#39;)
<a id="L342"></a><span class="ln">   342</span>		case offset &lt; 0:
<a id="L343"></a><span class="ln">   343</span>			err = out.WriteByte(&#39;-&#39;)
<a id="L344"></a><span class="ln">   344</span>		}
<a id="L345"></a><span class="ln">   345</span>	
<a id="L346"></a><span class="ln">   346</span>		if err != nil {
<a id="L347"></a><span class="ln">   347</span>			return
<a id="L348"></a><span class="ln">   348</span>		}
<a id="L349"></a><span class="ln">   349</span>	
<a id="L350"></a><span class="ln">   350</span>		offsetMinutes := offset / 60
<a id="L351"></a><span class="ln">   351</span>		if offsetMinutes &lt; 0 {
<a id="L352"></a><span class="ln">   352</span>			offsetMinutes = -offsetMinutes
<a id="L353"></a><span class="ln">   353</span>		}
<a id="L354"></a><span class="ln">   354</span>	
<a id="L355"></a><span class="ln">   355</span>		err = marshalTwoDigits(out, offsetMinutes/60)
<a id="L356"></a><span class="ln">   356</span>		if err != nil {
<a id="L357"></a><span class="ln">   357</span>			return
<a id="L358"></a><span class="ln">   358</span>		}
<a id="L359"></a><span class="ln">   359</span>	
<a id="L360"></a><span class="ln">   360</span>		err = marshalTwoDigits(out, offsetMinutes%60)
<a id="L361"></a><span class="ln">   361</span>		return
<a id="L362"></a><span class="ln">   362</span>	}
<a id="L363"></a><span class="ln">   363</span>	
<a id="L364"></a><span class="ln">   364</span>	func stripTagAndLength(in []byte) []byte {
<a id="L365"></a><span class="ln">   365</span>		_, offset, err := parseTagAndLength(in, 0)
<a id="L366"></a><span class="ln">   366</span>		if err != nil {
<a id="L367"></a><span class="ln">   367</span>			return in
<a id="L368"></a><span class="ln">   368</span>		}
<a id="L369"></a><span class="ln">   369</span>		return in[offset:]
<a id="L370"></a><span class="ln">   370</span>	}
<a id="L371"></a><span class="ln">   371</span>	
<a id="L372"></a><span class="ln">   372</span>	func marshalBody(out *forkableWriter, value reflect.Value, params fieldParameters) (err error) {
<a id="L373"></a><span class="ln">   373</span>		switch value.Type() {
<a id="L374"></a><span class="ln">   374</span>		case timeType:
<a id="L375"></a><span class="ln">   375</span>			return marshalUTCTime(out, value.Interface().(time.Time))
<a id="L376"></a><span class="ln">   376</span>		case bitStringType:
<a id="L377"></a><span class="ln">   377</span>			return marshalBitString(out, value.Interface().(BitString))
<a id="L378"></a><span class="ln">   378</span>		case objectIdentifierType:
<a id="L379"></a><span class="ln">   379</span>			return marshalObjectIdentifier(out, value.Interface().(ObjectIdentifier))
<a id="L380"></a><span class="ln">   380</span>		case bigIntType:
<a id="L381"></a><span class="ln">   381</span>			return marshalBigInt(out, value.Interface().(*big.Int))
<a id="L382"></a><span class="ln">   382</span>		}
<a id="L383"></a><span class="ln">   383</span>	
<a id="L384"></a><span class="ln">   384</span>		switch v := value; v.Kind() {
<a id="L385"></a><span class="ln">   385</span>		case reflect.Bool:
<a id="L386"></a><span class="ln">   386</span>			if v.Bool() {
<a id="L387"></a><span class="ln">   387</span>				return out.WriteByte(255)
<a id="L388"></a><span class="ln">   388</span>			} else {
<a id="L389"></a><span class="ln">   389</span>				return out.WriteByte(0)
<a id="L390"></a><span class="ln">   390</span>			}
<a id="L391"></a><span class="ln">   391</span>		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
<a id="L392"></a><span class="ln">   392</span>			return marshalInt64(out, int64(v.Int()))
<a id="L393"></a><span class="ln">   393</span>		case reflect.Struct:
<a id="L394"></a><span class="ln">   394</span>			t := v.Type()
<a id="L395"></a><span class="ln">   395</span>	
<a id="L396"></a><span class="ln">   396</span>			startingField := 0
<a id="L397"></a><span class="ln">   397</span>	
<a id="L398"></a><span class="ln">   398</span>			<span class="comment">// If the first element of the structure is a non-empty</span>
<a id="L399"></a><span class="ln">   399</span>			<span class="comment">// RawContents, then we don&#39;t bother serializing the rest.</span>
<a id="L400"></a><span class="ln">   400</span>			if t.NumField() &gt; 0 &amp;&amp; t.Field(0).Type == rawContentsType {
<a id="L401"></a><span class="ln">   401</span>				s := v.Field(0)
<a id="L402"></a><span class="ln">   402</span>				if s.Len() &gt; 0 {
<a id="L403"></a><span class="ln">   403</span>					bytes := make([]byte, s.Len())
<a id="L404"></a><span class="ln">   404</span>					for i := 0; i &lt; s.Len(); i++ {
<a id="L405"></a><span class="ln">   405</span>						bytes[i] = uint8(s.Index(i).Uint())
<a id="L406"></a><span class="ln">   406</span>					}
<a id="L407"></a><span class="ln">   407</span>					<span class="comment">/* The RawContents will contain the tag and
</span><a id="L408"></a><span class="ln">   408</span>	<span class="comment">				 * length fields but we&#39;ll also be writing
</span><a id="L409"></a><span class="ln">   409</span>	<span class="comment">				 * those ourselves, so we strip them out of
</span><a id="L410"></a><span class="ln">   410</span>	<span class="comment">				 * bytes */</span>
<a id="L411"></a><span class="ln">   411</span>					_, err = out.Write(stripTagAndLength(bytes))
<a id="L412"></a><span class="ln">   412</span>					return
<a id="L413"></a><span class="ln">   413</span>				} else {
<a id="L414"></a><span class="ln">   414</span>					startingField = 1
<a id="L415"></a><span class="ln">   415</span>				}
<a id="L416"></a><span class="ln">   416</span>			}
<a id="L417"></a><span class="ln">   417</span>	
<a id="L418"></a><span class="ln">   418</span>			for i := startingField; i &lt; t.NumField(); i++ {
<a id="L419"></a><span class="ln">   419</span>				var pre *forkableWriter
<a id="L420"></a><span class="ln">   420</span>				pre, out = out.fork()
<a id="L421"></a><span class="ln">   421</span>				err = marshalField(pre, v.Field(i), parseFieldParameters(t.Field(i).Tag.Get(&#34;asn1&#34;)))
<a id="L422"></a><span class="ln">   422</span>				if err != nil {
<a id="L423"></a><span class="ln">   423</span>					return
<a id="L424"></a><span class="ln">   424</span>				}
<a id="L425"></a><span class="ln">   425</span>			}
<a id="L426"></a><span class="ln">   426</span>			return
<a id="L427"></a><span class="ln">   427</span>		case reflect.Slice:
<a id="L428"></a><span class="ln">   428</span>			sliceType := v.Type()
<a id="L429"></a><span class="ln">   429</span>			if sliceType.Elem().Kind() == reflect.Uint8 {
<a id="L430"></a><span class="ln">   430</span>				bytes := make([]byte, v.Len())
<a id="L431"></a><span class="ln">   431</span>				for i := 0; i &lt; v.Len(); i++ {
<a id="L432"></a><span class="ln">   432</span>					bytes[i] = uint8(v.Index(i).Uint())
<a id="L433"></a><span class="ln">   433</span>				}
<a id="L434"></a><span class="ln">   434</span>				_, err = out.Write(bytes)
<a id="L435"></a><span class="ln">   435</span>				return
<a id="L436"></a><span class="ln">   436</span>			}
<a id="L437"></a><span class="ln">   437</span>	
<a id="L438"></a><span class="ln">   438</span>			var params fieldParameters
<a id="L439"></a><span class="ln">   439</span>			for i := 0; i &lt; v.Len(); i++ {
<a id="L440"></a><span class="ln">   440</span>				var pre *forkableWriter
<a id="L441"></a><span class="ln">   441</span>				pre, out = out.fork()
<a id="L442"></a><span class="ln">   442</span>				err = marshalField(pre, v.Index(i), params)
<a id="L443"></a><span class="ln">   443</span>				if err != nil {
<a id="L444"></a><span class="ln">   444</span>					return
<a id="L445"></a><span class="ln">   445</span>				}
<a id="L446"></a><span class="ln">   446</span>			}
<a id="L447"></a><span class="ln">   447</span>			return
<a id="L448"></a><span class="ln">   448</span>		case reflect.String:
<a id="L449"></a><span class="ln">   449</span>			if params.stringType == tagIA5String {
<a id="L450"></a><span class="ln">   450</span>				return marshalIA5String(out, v.String())
<a id="L451"></a><span class="ln">   451</span>			} else {
<a id="L452"></a><span class="ln">   452</span>				return marshalPrintableString(out, v.String())
<a id="L453"></a><span class="ln">   453</span>			}
<a id="L454"></a><span class="ln">   454</span>			return
<a id="L455"></a><span class="ln">   455</span>		}
<a id="L456"></a><span class="ln">   456</span>	
<a id="L457"></a><span class="ln">   457</span>		return StructuralError{&#34;unknown Go type&#34;}
<a id="L458"></a><span class="ln">   458</span>	}
<a id="L459"></a><span class="ln">   459</span>	
<a id="L460"></a><span class="ln">   460</span>	func marshalField(out *forkableWriter, v reflect.Value, params fieldParameters) (err error) {
<a id="L461"></a><span class="ln">   461</span>		<span class="comment">// If the field is an interface{} then recurse into it.</span>
<a id="L462"></a><span class="ln">   462</span>		if v.Kind() == reflect.Interface &amp;&amp; v.Type().NumMethod() == 0 {
<a id="L463"></a><span class="ln">   463</span>			return marshalField(out, v.Elem(), params)
<a id="L464"></a><span class="ln">   464</span>		}
<a id="L465"></a><span class="ln">   465</span>	
<a id="L466"></a><span class="ln">   466</span>		if v.Kind() == reflect.Slice &amp;&amp; v.Len() == 0 &amp;&amp; params.omitEmpty {
<a id="L467"></a><span class="ln">   467</span>			return
<a id="L468"></a><span class="ln">   468</span>		}
<a id="L469"></a><span class="ln">   469</span>	
<a id="L470"></a><span class="ln">   470</span>		if params.optional &amp;&amp; reflect.DeepEqual(v.Interface(), reflect.Zero(v.Type()).Interface()) {
<a id="L471"></a><span class="ln">   471</span>			return
<a id="L472"></a><span class="ln">   472</span>		}
<a id="L473"></a><span class="ln">   473</span>	
<a id="L474"></a><span class="ln">   474</span>		if v.Type() == rawValueType {
<a id="L475"></a><span class="ln">   475</span>			rv := v.Interface().(RawValue)
<a id="L476"></a><span class="ln">   476</span>			if len(rv.FullBytes) != 0 {
<a id="L477"></a><span class="ln">   477</span>				_, err = out.Write(rv.FullBytes)
<a id="L478"></a><span class="ln">   478</span>			} else {
<a id="L479"></a><span class="ln">   479</span>				err = marshalTagAndLength(out, tagAndLength{rv.Class, rv.Tag, len(rv.Bytes), rv.IsCompound})
<a id="L480"></a><span class="ln">   480</span>				if err != nil {
<a id="L481"></a><span class="ln">   481</span>					return
<a id="L482"></a><span class="ln">   482</span>				}
<a id="L483"></a><span class="ln">   483</span>				_, err = out.Write(rv.Bytes)
<a id="L484"></a><span class="ln">   484</span>			}
<a id="L485"></a><span class="ln">   485</span>			return
<a id="L486"></a><span class="ln">   486</span>		}
<a id="L487"></a><span class="ln">   487</span>	
<a id="L488"></a><span class="ln">   488</span>		tag, isCompound, ok := getUniversalType(v.Type())
<a id="L489"></a><span class="ln">   489</span>		if !ok {
<a id="L490"></a><span class="ln">   490</span>			err = StructuralError{fmt.Sprintf(&#34;unknown Go type: %v&#34;, v.Type())}
<a id="L491"></a><span class="ln">   491</span>			return
<a id="L492"></a><span class="ln">   492</span>		}
<a id="L493"></a><span class="ln">   493</span>		class := classUniversal
<a id="L494"></a><span class="ln">   494</span>	
<a id="L495"></a><span class="ln">   495</span>		if params.stringType != 0 {
<a id="L496"></a><span class="ln">   496</span>			if tag != tagPrintableString {
<a id="L497"></a><span class="ln">   497</span>				return StructuralError{&#34;Explicit string type given to non-string member&#34;}
<a id="L498"></a><span class="ln">   498</span>			}
<a id="L499"></a><span class="ln">   499</span>			tag = params.stringType
<a id="L500"></a><span class="ln">   500</span>		}
<a id="L501"></a><span class="ln">   501</span>	
<a id="L502"></a><span class="ln">   502</span>		if params.set {
<a id="L503"></a><span class="ln">   503</span>			if tag != tagSequence {
<a id="L504"></a><span class="ln">   504</span>				return StructuralError{&#34;Non sequence tagged as set&#34;}
<a id="L505"></a><span class="ln">   505</span>			}
<a id="L506"></a><span class="ln">   506</span>			tag = tagSet
<a id="L507"></a><span class="ln">   507</span>		}
<a id="L508"></a><span class="ln">   508</span>	
<a id="L509"></a><span class="ln">   509</span>		tags, body := out.fork()
<a id="L510"></a><span class="ln">   510</span>	
<a id="L511"></a><span class="ln">   511</span>		err = marshalBody(body, v, params)
<a id="L512"></a><span class="ln">   512</span>		if err != nil {
<a id="L513"></a><span class="ln">   513</span>			return
<a id="L514"></a><span class="ln">   514</span>		}
<a id="L515"></a><span class="ln">   515</span>	
<a id="L516"></a><span class="ln">   516</span>		bodyLen := body.Len()
<a id="L517"></a><span class="ln">   517</span>	
<a id="L518"></a><span class="ln">   518</span>		var explicitTag *forkableWriter
<a id="L519"></a><span class="ln">   519</span>		if params.explicit {
<a id="L520"></a><span class="ln">   520</span>			explicitTag, tags = tags.fork()
<a id="L521"></a><span class="ln">   521</span>		}
<a id="L522"></a><span class="ln">   522</span>	
<a id="L523"></a><span class="ln">   523</span>		if !params.explicit &amp;&amp; params.tag != nil {
<a id="L524"></a><span class="ln">   524</span>			<span class="comment">// implicit tag.</span>
<a id="L525"></a><span class="ln">   525</span>			tag = *params.tag
<a id="L526"></a><span class="ln">   526</span>			class = classContextSpecific
<a id="L527"></a><span class="ln">   527</span>		}
<a id="L528"></a><span class="ln">   528</span>	
<a id="L529"></a><span class="ln">   529</span>		err = marshalTagAndLength(tags, tagAndLength{class, tag, bodyLen, isCompound})
<a id="L530"></a><span class="ln">   530</span>		if err != nil {
<a id="L531"></a><span class="ln">   531</span>			return
<a id="L532"></a><span class="ln">   532</span>		}
<a id="L533"></a><span class="ln">   533</span>	
<a id="L534"></a><span class="ln">   534</span>		if params.explicit {
<a id="L535"></a><span class="ln">   535</span>			err = marshalTagAndLength(explicitTag, tagAndLength{
<a id="L536"></a><span class="ln">   536</span>				class:      classContextSpecific,
<a id="L537"></a><span class="ln">   537</span>				tag:        *params.tag,
<a id="L538"></a><span class="ln">   538</span>				length:     bodyLen + tags.Len(),
<a id="L539"></a><span class="ln">   539</span>				isCompound: true,
<a id="L540"></a><span class="ln">   540</span>			})
<a id="L541"></a><span class="ln">   541</span>		}
<a id="L542"></a><span class="ln">   542</span>	
<a id="L543"></a><span class="ln">   543</span>		return nil
<a id="L544"></a><span class="ln">   544</span>	}
<a id="L545"></a><span class="ln">   545</span>	
<a id="L546"></a><span class="ln">   546</span>	<span class="comment">// Marshal returns the ASN.1 encoding of val.</span>
<a id="L547"></a><span class="ln">   547</span>	func Marshal(val interface{}) ([]byte, error) {
<a id="L548"></a><span class="ln">   548</span>		var out bytes.Buffer
<a id="L549"></a><span class="ln">   549</span>		v := reflect.ValueOf(val)
<a id="L550"></a><span class="ln">   550</span>		f := newForkableWriter()
<a id="L551"></a><span class="ln">   551</span>		err := marshalField(f, v, fieldParameters{})
<a id="L552"></a><span class="ln">   552</span>		if err != nil {
<a id="L553"></a><span class="ln">   553</span>			return nil, err
<a id="L554"></a><span class="ln">   554</span>		}
<a id="L555"></a><span class="ln">   555</span>		_, err = f.writeTo(&amp;out)
<a id="L556"></a><span class="ln">   556</span>		return out.Bytes(), nil
<a id="L557"></a><span class="ln">   557</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

