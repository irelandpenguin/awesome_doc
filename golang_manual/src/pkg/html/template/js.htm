<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/html/template/js.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/html/template/js.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package template
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bytes&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;encoding/json&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;fmt&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;reflect&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;strings&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;unicode/utf8&#34;
<a id="L14"></a><span class="ln">    14</span>	)
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// nextJSCtx returns the context that determines whether a slash after the</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// given run of tokens tokens starts a regular expression instead of a division</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// operator: / or /=.</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">//</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// This assumes that the token run does not include any string tokens, comment</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// tokens, regular expression literal tokens, or division operators.</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">//</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// This fails on some valid but nonsensical JavaScript programs like</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// &#34;x = ++/foo/i&#34; which is quite different than &#34;x++/foo/i&#34;, but is not known to</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// fail on any known useful programs. It is based on the draft</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// JavaScript 2.0 lexical grammar and requires one token of lookbehind:</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// http://www.mozilla.org/js/language/js20-2000-07/rationale/syntax.html</span>
<a id="L28"></a><span class="ln">    28</span>	func nextJSCtx(s []byte, preceding jsCtx) jsCtx {
<a id="L29"></a><span class="ln">    29</span>		s = bytes.TrimRight(s, &#34;\t\n\f\r \u2028\u2029&#34;)
<a id="L30"></a><span class="ln">    30</span>		if len(s) == 0 {
<a id="L31"></a><span class="ln">    31</span>			return preceding
<a id="L32"></a><span class="ln">    32</span>		}
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>		<span class="comment">// All cases below are in the single-byte UTF-8 group.</span>
<a id="L35"></a><span class="ln">    35</span>		switch c, n := s[len(s)-1], len(s); c {
<a id="L36"></a><span class="ln">    36</span>		case &#39;+&#39;, &#39;-&#39;:
<a id="L37"></a><span class="ln">    37</span>			<span class="comment">// ++ and -- are not regexp preceders, but + and - are whether</span>
<a id="L38"></a><span class="ln">    38</span>			<span class="comment">// they are used as infix or prefix operators.</span>
<a id="L39"></a><span class="ln">    39</span>			start := n - 1
<a id="L40"></a><span class="ln">    40</span>			<span class="comment">// Count the number of adjacent dashes or pluses.</span>
<a id="L41"></a><span class="ln">    41</span>			for start &gt; 0 &amp;&amp; s[start-1] == c {
<a id="L42"></a><span class="ln">    42</span>				start--
<a id="L43"></a><span class="ln">    43</span>			}
<a id="L44"></a><span class="ln">    44</span>			if (n-start)&amp;1 == 1 {
<a id="L45"></a><span class="ln">    45</span>				<span class="comment">// Reached for trailing minus signs since &#34;---&#34; is the</span>
<a id="L46"></a><span class="ln">    46</span>				<span class="comment">// same as &#34;-- -&#34;.</span>
<a id="L47"></a><span class="ln">    47</span>				return jsCtxRegexp
<a id="L48"></a><span class="ln">    48</span>			}
<a id="L49"></a><span class="ln">    49</span>			return jsCtxDivOp
<a id="L50"></a><span class="ln">    50</span>		case &#39;.&#39;:
<a id="L51"></a><span class="ln">    51</span>			<span class="comment">// Handle &#34;42.&#34;</span>
<a id="L52"></a><span class="ln">    52</span>			if n != 1 &amp;&amp; &#39;0&#39; &lt;= s[n-2] &amp;&amp; s[n-2] &lt;= &#39;9&#39; {
<a id="L53"></a><span class="ln">    53</span>				return jsCtxDivOp
<a id="L54"></a><span class="ln">    54</span>			}
<a id="L55"></a><span class="ln">    55</span>			return jsCtxRegexp
<a id="L56"></a><span class="ln">    56</span>		<span class="comment">// Suffixes for all punctuators from section 7.7 of the language spec</span>
<a id="L57"></a><span class="ln">    57</span>		<span class="comment">// that only end binary operators not handled above.</span>
<a id="L58"></a><span class="ln">    58</span>		case &#39;,&#39;, &#39;&lt;&#39;, &#39;&gt;&#39;, &#39;=&#39;, &#39;*&#39;, &#39;%&#39;, &#39;&amp;&#39;, &#39;|&#39;, &#39;^&#39;, &#39;?&#39;:
<a id="L59"></a><span class="ln">    59</span>			return jsCtxRegexp
<a id="L60"></a><span class="ln">    60</span>		<span class="comment">// Suffixes for all punctuators from section 7.7 of the language spec</span>
<a id="L61"></a><span class="ln">    61</span>		<span class="comment">// that are prefix operators not handled above.</span>
<a id="L62"></a><span class="ln">    62</span>		case &#39;!&#39;, &#39;~&#39;:
<a id="L63"></a><span class="ln">    63</span>			return jsCtxRegexp
<a id="L64"></a><span class="ln">    64</span>		<span class="comment">// Matches all the punctuators from section 7.7 of the language spec</span>
<a id="L65"></a><span class="ln">    65</span>		<span class="comment">// that are open brackets not handled above.</span>
<a id="L66"></a><span class="ln">    66</span>		case &#39;(&#39;, &#39;[&#39;:
<a id="L67"></a><span class="ln">    67</span>			return jsCtxRegexp
<a id="L68"></a><span class="ln">    68</span>		<span class="comment">// Matches all the punctuators from section 7.7 of the language spec</span>
<a id="L69"></a><span class="ln">    69</span>		<span class="comment">// that precede expression starts.</span>
<a id="L70"></a><span class="ln">    70</span>		case &#39;:&#39;, &#39;;&#39;, &#39;{&#39;:
<a id="L71"></a><span class="ln">    71</span>			return jsCtxRegexp
<a id="L72"></a><span class="ln">    72</span>		<span class="comment">// CAVEAT: the close punctuators (&#39;}&#39;, &#39;]&#39;, &#39;)&#39;) precede div ops and</span>
<a id="L73"></a><span class="ln">    73</span>		<span class="comment">// are handled in the default except for &#39;}&#39; which can precede a</span>
<a id="L74"></a><span class="ln">    74</span>		<span class="comment">// division op as in</span>
<a id="L75"></a><span class="ln">    75</span>		<span class="comment">//    ({ valueOf: function () { return 42 } } / 2</span>
<a id="L76"></a><span class="ln">    76</span>		<span class="comment">// which is valid, but, in practice, developers don&#39;t divide object</span>
<a id="L77"></a><span class="ln">    77</span>		<span class="comment">// literals, so our heuristic works well for code like</span>
<a id="L78"></a><span class="ln">    78</span>		<span class="comment">//    function () { ... }  /foo/.test(x) &amp;&amp; sideEffect();</span>
<a id="L79"></a><span class="ln">    79</span>		<span class="comment">// The &#39;)&#39; punctuator can precede a regular expression as in</span>
<a id="L80"></a><span class="ln">    80</span>		<span class="comment">//     if (b) /foo/.test(x) &amp;&amp; ...</span>
<a id="L81"></a><span class="ln">    81</span>		<span class="comment">// but this is much less likely than</span>
<a id="L82"></a><span class="ln">    82</span>		<span class="comment">//     (a + b) / c</span>
<a id="L83"></a><span class="ln">    83</span>		case &#39;}&#39;:
<a id="L84"></a><span class="ln">    84</span>			return jsCtxRegexp
<a id="L85"></a><span class="ln">    85</span>		default:
<a id="L86"></a><span class="ln">    86</span>			<span class="comment">// Look for an IdentifierName and see if it is a keyword that</span>
<a id="L87"></a><span class="ln">    87</span>			<span class="comment">// can precede a regular expression.</span>
<a id="L88"></a><span class="ln">    88</span>			j := n
<a id="L89"></a><span class="ln">    89</span>			for j &gt; 0 &amp;&amp; isJSIdentPart(rune(s[j-1])) {
<a id="L90"></a><span class="ln">    90</span>				j--
<a id="L91"></a><span class="ln">    91</span>			}
<a id="L92"></a><span class="ln">    92</span>			if regexpPrecederKeywords[string(s[j:])] {
<a id="L93"></a><span class="ln">    93</span>				return jsCtxRegexp
<a id="L94"></a><span class="ln">    94</span>			}
<a id="L95"></a><span class="ln">    95</span>		}
<a id="L96"></a><span class="ln">    96</span>		<span class="comment">// Otherwise is a punctuator not listed above, or</span>
<a id="L97"></a><span class="ln">    97</span>		<span class="comment">// a string which precedes a div op, or an identifier</span>
<a id="L98"></a><span class="ln">    98</span>		<span class="comment">// which precedes a div op.</span>
<a id="L99"></a><span class="ln">    99</span>		return jsCtxDivOp
<a id="L100"></a><span class="ln">   100</span>	}
<a id="L101"></a><span class="ln">   101</span>	
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">// regexPrecederKeywords is a set of reserved JS keywords that can precede a</span>
<a id="L103"></a><span class="ln">   103</span>	<span class="comment">// regular expression in JS source.</span>
<a id="L104"></a><span class="ln">   104</span>	var regexpPrecederKeywords = map[string]bool{
<a id="L105"></a><span class="ln">   105</span>		&#34;break&#34;:      true,
<a id="L106"></a><span class="ln">   106</span>		&#34;case&#34;:       true,
<a id="L107"></a><span class="ln">   107</span>		&#34;continue&#34;:   true,
<a id="L108"></a><span class="ln">   108</span>		&#34;delete&#34;:     true,
<a id="L109"></a><span class="ln">   109</span>		&#34;do&#34;:         true,
<a id="L110"></a><span class="ln">   110</span>		&#34;else&#34;:       true,
<a id="L111"></a><span class="ln">   111</span>		&#34;finally&#34;:    true,
<a id="L112"></a><span class="ln">   112</span>		&#34;in&#34;:         true,
<a id="L113"></a><span class="ln">   113</span>		&#34;instanceof&#34;: true,
<a id="L114"></a><span class="ln">   114</span>		&#34;return&#34;:     true,
<a id="L115"></a><span class="ln">   115</span>		&#34;throw&#34;:      true,
<a id="L116"></a><span class="ln">   116</span>		&#34;try&#34;:        true,
<a id="L117"></a><span class="ln">   117</span>		&#34;typeof&#34;:     true,
<a id="L118"></a><span class="ln">   118</span>		&#34;void&#34;:       true,
<a id="L119"></a><span class="ln">   119</span>	}
<a id="L120"></a><span class="ln">   120</span>	
<a id="L121"></a><span class="ln">   121</span>	var jsonMarshalType = reflect.TypeOf((*json.Marshaler)(nil)).Elem()
<a id="L122"></a><span class="ln">   122</span>	
<a id="L123"></a><span class="ln">   123</span>	<span class="comment">// indirectToJSONMarshaler returns the value, after dereferencing as many times</span>
<a id="L124"></a><span class="ln">   124</span>	<span class="comment">// as necessary to reach the base type (or nil) or an implementation of json.Marshal.</span>
<a id="L125"></a><span class="ln">   125</span>	func indirectToJSONMarshaler(a interface{}) interface{} {
<a id="L126"></a><span class="ln">   126</span>		v := reflect.ValueOf(a)
<a id="L127"></a><span class="ln">   127</span>		for !v.Type().Implements(jsonMarshalType) &amp;&amp; v.Kind() == reflect.Ptr &amp;&amp; !v.IsNil() {
<a id="L128"></a><span class="ln">   128</span>			v = v.Elem()
<a id="L129"></a><span class="ln">   129</span>		}
<a id="L130"></a><span class="ln">   130</span>		return v.Interface()
<a id="L131"></a><span class="ln">   131</span>	}
<a id="L132"></a><span class="ln">   132</span>	
<a id="L133"></a><span class="ln">   133</span>	<span class="comment">// jsValEscaper escapes its inputs to a JS Expression (section 11.14) that has</span>
<a id="L134"></a><span class="ln">   134</span>	<span class="comment">// neither side-effects nor free variables outside (NaN, Infinity).</span>
<a id="L135"></a><span class="ln">   135</span>	func jsValEscaper(args ...interface{}) string {
<a id="L136"></a><span class="ln">   136</span>		var a interface{}
<a id="L137"></a><span class="ln">   137</span>		if len(args) == 1 {
<a id="L138"></a><span class="ln">   138</span>			a = indirectToJSONMarshaler(args[0])
<a id="L139"></a><span class="ln">   139</span>			switch t := a.(type) {
<a id="L140"></a><span class="ln">   140</span>			case JS:
<a id="L141"></a><span class="ln">   141</span>				return string(t)
<a id="L142"></a><span class="ln">   142</span>			case JSStr:
<a id="L143"></a><span class="ln">   143</span>				<span class="comment">// TODO: normalize quotes.</span>
<a id="L144"></a><span class="ln">   144</span>				return `&#34;` + string(t) + `&#34;`
<a id="L145"></a><span class="ln">   145</span>			case json.Marshaler:
<a id="L146"></a><span class="ln">   146</span>				<span class="comment">// Do not treat as a Stringer.</span>
<a id="L147"></a><span class="ln">   147</span>			case fmt.Stringer:
<a id="L148"></a><span class="ln">   148</span>				a = t.String()
<a id="L149"></a><span class="ln">   149</span>			}
<a id="L150"></a><span class="ln">   150</span>		} else {
<a id="L151"></a><span class="ln">   151</span>			for i, arg := range args {
<a id="L152"></a><span class="ln">   152</span>				args[i] = indirectToJSONMarshaler(arg)
<a id="L153"></a><span class="ln">   153</span>			}
<a id="L154"></a><span class="ln">   154</span>			a = fmt.Sprint(args...)
<a id="L155"></a><span class="ln">   155</span>		}
<a id="L156"></a><span class="ln">   156</span>		<span class="comment">// TODO: detect cycles before calling Marshal which loops infinitely on</span>
<a id="L157"></a><span class="ln">   157</span>		<span class="comment">// cyclic data. This may be an unacceptable DoS risk.</span>
<a id="L158"></a><span class="ln">   158</span>	
<a id="L159"></a><span class="ln">   159</span>		b, err := json.Marshal(a)
<a id="L160"></a><span class="ln">   160</span>		if err != nil {
<a id="L161"></a><span class="ln">   161</span>			<span class="comment">// Put a space before comment so that if it is flush against</span>
<a id="L162"></a><span class="ln">   162</span>			<span class="comment">// a division operator it is not turned into a line comment:</span>
<a id="L163"></a><span class="ln">   163</span>			<span class="comment">//     x/{{y}}</span>
<a id="L164"></a><span class="ln">   164</span>			<span class="comment">// turning into</span>
<a id="L165"></a><span class="ln">   165</span>			<span class="comment">//     x//* error marshalling y:</span>
<a id="L166"></a><span class="ln">   166</span>			<span class="comment">//          second line of error message */null</span>
<a id="L167"></a><span class="ln">   167</span>			return fmt.Sprintf(&#34; /* %s */null &#34;, strings.Replace(err.Error(), &#34;*/&#34;, &#34;* /&#34;, -1))
<a id="L168"></a><span class="ln">   168</span>		}
<a id="L169"></a><span class="ln">   169</span>	
<a id="L170"></a><span class="ln">   170</span>		<span class="comment">// TODO: maybe post-process output to prevent it from containing</span>
<a id="L171"></a><span class="ln">   171</span>		<span class="comment">// &#34;&lt;!--&#34;, &#34;--&gt;&#34;, &#34;&lt;![CDATA[&#34;, &#34;]]&gt;&#34;, or &#34;&lt;/script&#34;</span>
<a id="L172"></a><span class="ln">   172</span>		<span class="comment">// in case custom marshallers produce output containing those.</span>
<a id="L173"></a><span class="ln">   173</span>	
<a id="L174"></a><span class="ln">   174</span>		<span class="comment">// TODO: Maybe abbreviate \u00ab to \xab to produce more compact output.</span>
<a id="L175"></a><span class="ln">   175</span>		if len(b) == 0 {
<a id="L176"></a><span class="ln">   176</span>			<span class="comment">// In, `x=y/{{.}}*z` a json.Marshaler that produces &#34;&#34; should</span>
<a id="L177"></a><span class="ln">   177</span>			<span class="comment">// not cause the output `x=y/*z`.</span>
<a id="L178"></a><span class="ln">   178</span>			return &#34; null &#34;
<a id="L179"></a><span class="ln">   179</span>		}
<a id="L180"></a><span class="ln">   180</span>		first, _ := utf8.DecodeRune(b)
<a id="L181"></a><span class="ln">   181</span>		last, _ := utf8.DecodeLastRune(b)
<a id="L182"></a><span class="ln">   182</span>		var buf bytes.Buffer
<a id="L183"></a><span class="ln">   183</span>		<span class="comment">// Prevent IdentifierNames and NumericLiterals from running into</span>
<a id="L184"></a><span class="ln">   184</span>		<span class="comment">// keywords: in, instanceof, typeof, void</span>
<a id="L185"></a><span class="ln">   185</span>		pad := isJSIdentPart(first) || isJSIdentPart(last)
<a id="L186"></a><span class="ln">   186</span>		if pad {
<a id="L187"></a><span class="ln">   187</span>			buf.WriteByte(&#39; &#39;)
<a id="L188"></a><span class="ln">   188</span>		}
<a id="L189"></a><span class="ln">   189</span>		written := 0
<a id="L190"></a><span class="ln">   190</span>		<span class="comment">// Make sure that json.Marshal escapes codepoints U+2028 &amp; U+2029</span>
<a id="L191"></a><span class="ln">   191</span>		<span class="comment">// so it falls within the subset of JSON which is valid JS.</span>
<a id="L192"></a><span class="ln">   192</span>		for i := 0; i &lt; len(b); {
<a id="L193"></a><span class="ln">   193</span>			rune, n := utf8.DecodeRune(b[i:])
<a id="L194"></a><span class="ln">   194</span>			repl := &#34;&#34;
<a id="L195"></a><span class="ln">   195</span>			if rune == 0x2028 {
<a id="L196"></a><span class="ln">   196</span>				repl = `\u2028`
<a id="L197"></a><span class="ln">   197</span>			} else if rune == 0x2029 {
<a id="L198"></a><span class="ln">   198</span>				repl = `\u2029`
<a id="L199"></a><span class="ln">   199</span>			}
<a id="L200"></a><span class="ln">   200</span>			if repl != &#34;&#34; {
<a id="L201"></a><span class="ln">   201</span>				buf.Write(b[written:i])
<a id="L202"></a><span class="ln">   202</span>				buf.WriteString(repl)
<a id="L203"></a><span class="ln">   203</span>				written = i + n
<a id="L204"></a><span class="ln">   204</span>			}
<a id="L205"></a><span class="ln">   205</span>			i += n
<a id="L206"></a><span class="ln">   206</span>		}
<a id="L207"></a><span class="ln">   207</span>		if buf.Len() != 0 {
<a id="L208"></a><span class="ln">   208</span>			buf.Write(b[written:])
<a id="L209"></a><span class="ln">   209</span>			if pad {
<a id="L210"></a><span class="ln">   210</span>				buf.WriteByte(&#39; &#39;)
<a id="L211"></a><span class="ln">   211</span>			}
<a id="L212"></a><span class="ln">   212</span>			b = buf.Bytes()
<a id="L213"></a><span class="ln">   213</span>		}
<a id="L214"></a><span class="ln">   214</span>		return string(b)
<a id="L215"></a><span class="ln">   215</span>	}
<a id="L216"></a><span class="ln">   216</span>	
<a id="L217"></a><span class="ln">   217</span>	<span class="comment">// jsStrEscaper produces a string that can be included between quotes in</span>
<a id="L218"></a><span class="ln">   218</span>	<span class="comment">// JavaScript source, in JavaScript embedded in an HTML5 &lt;script&gt; element,</span>
<a id="L219"></a><span class="ln">   219</span>	<span class="comment">// or in an HTML5 event handler attribute such as onclick.</span>
<a id="L220"></a><span class="ln">   220</span>	func jsStrEscaper(args ...interface{}) string {
<a id="L221"></a><span class="ln">   221</span>		s, t := stringify(args...)
<a id="L222"></a><span class="ln">   222</span>		if t == contentTypeJSStr {
<a id="L223"></a><span class="ln">   223</span>			return replace(s, jsStrNormReplacementTable)
<a id="L224"></a><span class="ln">   224</span>		}
<a id="L225"></a><span class="ln">   225</span>		return replace(s, jsStrReplacementTable)
<a id="L226"></a><span class="ln">   226</span>	}
<a id="L227"></a><span class="ln">   227</span>	
<a id="L228"></a><span class="ln">   228</span>	<span class="comment">// jsRegexpEscaper behaves like jsStrEscaper but escapes regular expression</span>
<a id="L229"></a><span class="ln">   229</span>	<span class="comment">// specials so the result is treated literally when included in a regular</span>
<a id="L230"></a><span class="ln">   230</span>	<span class="comment">// expression literal. /foo{{.X}}bar/ matches the string &#34;foo&#34; followed by</span>
<a id="L231"></a><span class="ln">   231</span>	<span class="comment">// the literal text of {{.X}} followed by the string &#34;bar&#34;.</span>
<a id="L232"></a><span class="ln">   232</span>	func jsRegexpEscaper(args ...interface{}) string {
<a id="L233"></a><span class="ln">   233</span>		s, _ := stringify(args...)
<a id="L234"></a><span class="ln">   234</span>		s = replace(s, jsRegexpReplacementTable)
<a id="L235"></a><span class="ln">   235</span>		if s == &#34;&#34; {
<a id="L236"></a><span class="ln">   236</span>			<span class="comment">// /{{.X}}/ should not produce a line comment when .X == &#34;&#34;.</span>
<a id="L237"></a><span class="ln">   237</span>			return &#34;(?:)&#34;
<a id="L238"></a><span class="ln">   238</span>		}
<a id="L239"></a><span class="ln">   239</span>		return s
<a id="L240"></a><span class="ln">   240</span>	}
<a id="L241"></a><span class="ln">   241</span>	
<a id="L242"></a><span class="ln">   242</span>	<span class="comment">// replace replaces each rune r of s with replacementTable[r], provided that</span>
<a id="L243"></a><span class="ln">   243</span>	<span class="comment">// r &lt; len(replacementTable). If replacementTable[r] is the empty string then</span>
<a id="L244"></a><span class="ln">   244</span>	<span class="comment">// no replacement is made.</span>
<a id="L245"></a><span class="ln">   245</span>	<span class="comment">// It also replaces runes U+2028 and U+2029 with the raw strings `\u2028` and</span>
<a id="L246"></a><span class="ln">   246</span>	<span class="comment">// `\u2029`.</span>
<a id="L247"></a><span class="ln">   247</span>	func replace(s string, replacementTable []string) string {
<a id="L248"></a><span class="ln">   248</span>		var b bytes.Buffer
<a id="L249"></a><span class="ln">   249</span>		written := 0
<a id="L250"></a><span class="ln">   250</span>		for i, r := range s {
<a id="L251"></a><span class="ln">   251</span>			var repl string
<a id="L252"></a><span class="ln">   252</span>			switch {
<a id="L253"></a><span class="ln">   253</span>			case int(r) &lt; len(replacementTable) &amp;&amp; replacementTable[r] != &#34;&#34;:
<a id="L254"></a><span class="ln">   254</span>				repl = replacementTable[r]
<a id="L255"></a><span class="ln">   255</span>			case r == &#39;\u2028&#39;:
<a id="L256"></a><span class="ln">   256</span>				repl = `\u2028`
<a id="L257"></a><span class="ln">   257</span>			case r == &#39;\u2029&#39;:
<a id="L258"></a><span class="ln">   258</span>				repl = `\u2029`
<a id="L259"></a><span class="ln">   259</span>			default:
<a id="L260"></a><span class="ln">   260</span>				continue
<a id="L261"></a><span class="ln">   261</span>			}
<a id="L262"></a><span class="ln">   262</span>			b.WriteString(s[written:i])
<a id="L263"></a><span class="ln">   263</span>			b.WriteString(repl)
<a id="L264"></a><span class="ln">   264</span>			written = i + utf8.RuneLen(r)
<a id="L265"></a><span class="ln">   265</span>		}
<a id="L266"></a><span class="ln">   266</span>		if written == 0 {
<a id="L267"></a><span class="ln">   267</span>			return s
<a id="L268"></a><span class="ln">   268</span>		}
<a id="L269"></a><span class="ln">   269</span>		b.WriteString(s[written:])
<a id="L270"></a><span class="ln">   270</span>		return b.String()
<a id="L271"></a><span class="ln">   271</span>	}
<a id="L272"></a><span class="ln">   272</span>	
<a id="L273"></a><span class="ln">   273</span>	var jsStrReplacementTable = []string{
<a id="L274"></a><span class="ln">   274</span>		0:    `\0`,
<a id="L275"></a><span class="ln">   275</span>		&#39;\t&#39;: `\t`,
<a id="L276"></a><span class="ln">   276</span>		&#39;\n&#39;: `\n`,
<a id="L277"></a><span class="ln">   277</span>		&#39;\v&#39;: `\x0b`, <span class="comment">// &#34;\v&#34; == &#34;v&#34; on IE 6.</span>
<a id="L278"></a><span class="ln">   278</span>		&#39;\f&#39;: `\f`,
<a id="L279"></a><span class="ln">   279</span>		&#39;\r&#39;: `\r`,
<a id="L280"></a><span class="ln">   280</span>		<span class="comment">// Encode HTML specials as hex so the output can be embedded</span>
<a id="L281"></a><span class="ln">   281</span>		<span class="comment">// in HTML attributes without further encoding.</span>
<a id="L282"></a><span class="ln">   282</span>		&#39;&#34;&#39;:  `\x22`,
<a id="L283"></a><span class="ln">   283</span>		&#39;&amp;&#39;:  `\x26`,
<a id="L284"></a><span class="ln">   284</span>		&#39;\&#39;&#39;: `\x27`,
<a id="L285"></a><span class="ln">   285</span>		&#39;+&#39;:  `\x2b`,
<a id="L286"></a><span class="ln">   286</span>		&#39;/&#39;:  `\/`,
<a id="L287"></a><span class="ln">   287</span>		&#39;&lt;&#39;:  `\x3c`,
<a id="L288"></a><span class="ln">   288</span>		&#39;&gt;&#39;:  `\x3e`,
<a id="L289"></a><span class="ln">   289</span>		&#39;\\&#39;: `\\`,
<a id="L290"></a><span class="ln">   290</span>	}
<a id="L291"></a><span class="ln">   291</span>	
<a id="L292"></a><span class="ln">   292</span>	<span class="comment">// jsStrNormReplacementTable is like jsStrReplacementTable but does not</span>
<a id="L293"></a><span class="ln">   293</span>	<span class="comment">// overencode existing escapes since this table has no entry for `\`.</span>
<a id="L294"></a><span class="ln">   294</span>	var jsStrNormReplacementTable = []string{
<a id="L295"></a><span class="ln">   295</span>		0:    `\0`,
<a id="L296"></a><span class="ln">   296</span>		&#39;\t&#39;: `\t`,
<a id="L297"></a><span class="ln">   297</span>		&#39;\n&#39;: `\n`,
<a id="L298"></a><span class="ln">   298</span>		&#39;\v&#39;: `\x0b`, <span class="comment">// &#34;\v&#34; == &#34;v&#34; on IE 6.</span>
<a id="L299"></a><span class="ln">   299</span>		&#39;\f&#39;: `\f`,
<a id="L300"></a><span class="ln">   300</span>		&#39;\r&#39;: `\r`,
<a id="L301"></a><span class="ln">   301</span>		<span class="comment">// Encode HTML specials as hex so the output can be embedded</span>
<a id="L302"></a><span class="ln">   302</span>		<span class="comment">// in HTML attributes without further encoding.</span>
<a id="L303"></a><span class="ln">   303</span>		&#39;&#34;&#39;:  `\x22`,
<a id="L304"></a><span class="ln">   304</span>		&#39;&amp;&#39;:  `\x26`,
<a id="L305"></a><span class="ln">   305</span>		&#39;\&#39;&#39;: `\x27`,
<a id="L306"></a><span class="ln">   306</span>		&#39;+&#39;:  `\x2b`,
<a id="L307"></a><span class="ln">   307</span>		&#39;/&#39;:  `\/`,
<a id="L308"></a><span class="ln">   308</span>		&#39;&lt;&#39;:  `\x3c`,
<a id="L309"></a><span class="ln">   309</span>		&#39;&gt;&#39;:  `\x3e`,
<a id="L310"></a><span class="ln">   310</span>	}
<a id="L311"></a><span class="ln">   311</span>	
<a id="L312"></a><span class="ln">   312</span>	var jsRegexpReplacementTable = []string{
<a id="L313"></a><span class="ln">   313</span>		0:    `\0`,
<a id="L314"></a><span class="ln">   314</span>		&#39;\t&#39;: `\t`,
<a id="L315"></a><span class="ln">   315</span>		&#39;\n&#39;: `\n`,
<a id="L316"></a><span class="ln">   316</span>		&#39;\v&#39;: `\x0b`, <span class="comment">// &#34;\v&#34; == &#34;v&#34; on IE 6.</span>
<a id="L317"></a><span class="ln">   317</span>		&#39;\f&#39;: `\f`,
<a id="L318"></a><span class="ln">   318</span>		&#39;\r&#39;: `\r`,
<a id="L319"></a><span class="ln">   319</span>		<span class="comment">// Encode HTML specials as hex so the output can be embedded</span>
<a id="L320"></a><span class="ln">   320</span>		<span class="comment">// in HTML attributes without further encoding.</span>
<a id="L321"></a><span class="ln">   321</span>		&#39;&#34;&#39;:  `\x22`,
<a id="L322"></a><span class="ln">   322</span>		&#39;$&#39;:  `\$`,
<a id="L323"></a><span class="ln">   323</span>		&#39;&amp;&#39;:  `\x26`,
<a id="L324"></a><span class="ln">   324</span>		&#39;\&#39;&#39;: `\x27`,
<a id="L325"></a><span class="ln">   325</span>		&#39;(&#39;:  `\(`,
<a id="L326"></a><span class="ln">   326</span>		&#39;)&#39;:  `\)`,
<a id="L327"></a><span class="ln">   327</span>		&#39;*&#39;:  `\*`,
<a id="L328"></a><span class="ln">   328</span>		&#39;+&#39;:  `\x2b`,
<a id="L329"></a><span class="ln">   329</span>		&#39;-&#39;:  `\-`,
<a id="L330"></a><span class="ln">   330</span>		&#39;.&#39;:  `\.`,
<a id="L331"></a><span class="ln">   331</span>		&#39;/&#39;:  `\/`,
<a id="L332"></a><span class="ln">   332</span>		&#39;&lt;&#39;:  `\x3c`,
<a id="L333"></a><span class="ln">   333</span>		&#39;&gt;&#39;:  `\x3e`,
<a id="L334"></a><span class="ln">   334</span>		&#39;?&#39;:  `\?`,
<a id="L335"></a><span class="ln">   335</span>		&#39;[&#39;:  `\[`,
<a id="L336"></a><span class="ln">   336</span>		&#39;\\&#39;: `\\`,
<a id="L337"></a><span class="ln">   337</span>		&#39;]&#39;:  `\]`,
<a id="L338"></a><span class="ln">   338</span>		&#39;^&#39;:  `\^`,
<a id="L339"></a><span class="ln">   339</span>		&#39;{&#39;:  `\{`,
<a id="L340"></a><span class="ln">   340</span>		&#39;|&#39;:  `\|`,
<a id="L341"></a><span class="ln">   341</span>		&#39;}&#39;:  `\}`,
<a id="L342"></a><span class="ln">   342</span>	}
<a id="L343"></a><span class="ln">   343</span>	
<a id="L344"></a><span class="ln">   344</span>	<span class="comment">// isJSIdentPart returns whether the given rune is a JS identifier part.</span>
<a id="L345"></a><span class="ln">   345</span>	<span class="comment">// It does not handle all the non-Latin letters, joiners, and combining marks,</span>
<a id="L346"></a><span class="ln">   346</span>	<span class="comment">// but it does handle every codepoint that can occur in a numeric literal or</span>
<a id="L347"></a><span class="ln">   347</span>	<span class="comment">// a keyword.</span>
<a id="L348"></a><span class="ln">   348</span>	func isJSIdentPart(r rune) bool {
<a id="L349"></a><span class="ln">   349</span>		switch {
<a id="L350"></a><span class="ln">   350</span>		case r == &#39;$&#39;:
<a id="L351"></a><span class="ln">   351</span>			return true
<a id="L352"></a><span class="ln">   352</span>		case &#39;0&#39; &lt;= r &amp;&amp; r &lt;= &#39;9&#39;:
<a id="L353"></a><span class="ln">   353</span>			return true
<a id="L354"></a><span class="ln">   354</span>		case &#39;A&#39; &lt;= r &amp;&amp; r &lt;= &#39;Z&#39;:
<a id="L355"></a><span class="ln">   355</span>			return true
<a id="L356"></a><span class="ln">   356</span>		case r == &#39;_&#39;:
<a id="L357"></a><span class="ln">   357</span>			return true
<a id="L358"></a><span class="ln">   358</span>		case &#39;a&#39; &lt;= r &amp;&amp; r &lt;= &#39;z&#39;:
<a id="L359"></a><span class="ln">   359</span>			return true
<a id="L360"></a><span class="ln">   360</span>		}
<a id="L361"></a><span class="ln">   361</span>		return false
<a id="L362"></a><span class="ln">   362</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

