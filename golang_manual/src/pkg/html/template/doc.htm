<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/html/template/doc.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/html/template/doc.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">/*
</span><a id="L6"></a><span class="ln">     6</span>	<span class="comment">Package template (html/template) implements data-driven templates for
</span><a id="L7"></a><span class="ln">     7</span>	<span class="comment">generating HTML output safe against code injection. It provides the
</span><a id="L8"></a><span class="ln">     8</span>	<span class="comment">same interface as package text/template and should be used instead of
</span><a id="L9"></a><span class="ln">     9</span>	<span class="comment">text/template whenever the output is HTML.
</span><a id="L10"></a><span class="ln">    10</span>	<span class="comment">
</span><a id="L11"></a><span class="ln">    11</span>	<span class="comment">The documentation here focuses on the security features of the package.
</span><a id="L12"></a><span class="ln">    12</span>	<span class="comment">For information about how to program the templates themselves, see the
</span><a id="L13"></a><span class="ln">    13</span>	<span class="comment">documentation for text/template.
</span><a id="L14"></a><span class="ln">    14</span>	<span class="comment">
</span><a id="L15"></a><span class="ln">    15</span>	<span class="comment">Introduction
</span><a id="L16"></a><span class="ln">    16</span>	<span class="comment">
</span><a id="L17"></a><span class="ln">    17</span>	<span class="comment">This package wraps package text/template so you can share its template API
</span><a id="L18"></a><span class="ln">    18</span>	<span class="comment">to parse and execute HTML templates safely.
</span><a id="L19"></a><span class="ln">    19</span>	<span class="comment">
</span><a id="L20"></a><span class="ln">    20</span>	<span class="comment">  tmpl, err := template.New(&#34;name&#34;).Parse(...)
</span><a id="L21"></a><span class="ln">    21</span>	<span class="comment">  // Error checking elided
</span><a id="L22"></a><span class="ln">    22</span>	<span class="comment">  err = tmpl.Execute(out, data)
</span><a id="L23"></a><span class="ln">    23</span>	<span class="comment">
</span><a id="L24"></a><span class="ln">    24</span>	<span class="comment">If successful, tmpl will now be injection-safe. Otherwise, err is an error
</span><a id="L25"></a><span class="ln">    25</span>	<span class="comment">defined in the docs for ErrorCode.
</span><a id="L26"></a><span class="ln">    26</span>	<span class="comment">
</span><a id="L27"></a><span class="ln">    27</span>	<span class="comment">HTML templates treat data values as plain text which should be encoded so they
</span><a id="L28"></a><span class="ln">    28</span>	<span class="comment">can be safely embedded in an HTML document. The escaping is contextual, so
</span><a id="L29"></a><span class="ln">    29</span>	<span class="comment">actions can appear within JavaScript, CSS, and URI contexts.
</span><a id="L30"></a><span class="ln">    30</span>	<span class="comment">
</span><a id="L31"></a><span class="ln">    31</span>	<span class="comment">The security model used by this package assumes that template authors are
</span><a id="L32"></a><span class="ln">    32</span>	<span class="comment">trusted, while Execute&#39;s data parameter is not. More details are
</span><a id="L33"></a><span class="ln">    33</span>	<span class="comment">provided below.
</span><a id="L34"></a><span class="ln">    34</span>	<span class="comment">
</span><a id="L35"></a><span class="ln">    35</span>	<span class="comment">Example
</span><a id="L36"></a><span class="ln">    36</span>	<span class="comment">
</span><a id="L37"></a><span class="ln">    37</span>	<span class="comment">  import &#34;text/template&#34;
</span><a id="L38"></a><span class="ln">    38</span>	<span class="comment">  ...
</span><a id="L39"></a><span class="ln">    39</span>	<span class="comment">  t, err := template.New(&#34;foo&#34;).Parse(`{{define &#34;T&#34;}}Hello, {{.}}!{{end}}`)
</span><a id="L40"></a><span class="ln">    40</span>	<span class="comment">  err = t.ExecuteTemplate(out, &#34;T&#34;, &#34;&lt;script&gt;alert(&#39;you have been pwned&#39;)&lt;/script&gt;&#34;)
</span><a id="L41"></a><span class="ln">    41</span>	<span class="comment">
</span><a id="L42"></a><span class="ln">    42</span>	<span class="comment">produces
</span><a id="L43"></a><span class="ln">    43</span>	<span class="comment">
</span><a id="L44"></a><span class="ln">    44</span>	<span class="comment">  Hello, &lt;script&gt;alert(&#39;you have been pwned&#39;)&lt;/script&gt;!
</span><a id="L45"></a><span class="ln">    45</span>	<span class="comment">
</span><a id="L46"></a><span class="ln">    46</span>	<span class="comment">but the contextual autoescaping in html/template
</span><a id="L47"></a><span class="ln">    47</span>	<span class="comment">
</span><a id="L48"></a><span class="ln">    48</span>	<span class="comment">  import &#34;html/template&#34;
</span><a id="L49"></a><span class="ln">    49</span>	<span class="comment">  ...
</span><a id="L50"></a><span class="ln">    50</span>	<span class="comment">  t, err := template.New(&#34;foo&#34;).Parse(`{{define &#34;T&#34;}}Hello, {{.}}!{{end}}`)
</span><a id="L51"></a><span class="ln">    51</span>	<span class="comment">  err = t.ExecuteTemplate(out, &#34;T&#34;, &#34;&lt;script&gt;alert(&#39;you have been pwned&#39;)&lt;/script&gt;&#34;)
</span><a id="L52"></a><span class="ln">    52</span>	<span class="comment">
</span><a id="L53"></a><span class="ln">    53</span>	<span class="comment">produces safe, escaped HTML output
</span><a id="L54"></a><span class="ln">    54</span>	<span class="comment">
</span><a id="L55"></a><span class="ln">    55</span>	<span class="comment">  Hello, &amp;lt;script&amp;gt;alert(&amp;#39;you have been pwned&amp;#39;)&amp;lt;/script&amp;gt;!
</span><a id="L56"></a><span class="ln">    56</span>	<span class="comment">
</span><a id="L57"></a><span class="ln">    57</span>	<span class="comment">
</span><a id="L58"></a><span class="ln">    58</span>	<span class="comment">Contexts
</span><a id="L59"></a><span class="ln">    59</span>	<span class="comment">
</span><a id="L60"></a><span class="ln">    60</span>	<span class="comment">This package understands HTML, CSS, JavaScript, and URIs. It adds sanitizing
</span><a id="L61"></a><span class="ln">    61</span>	<span class="comment">functions to each simple action pipeline, so given the excerpt
</span><a id="L62"></a><span class="ln">    62</span>	<span class="comment">
</span><a id="L63"></a><span class="ln">    63</span>	<span class="comment">  &lt;a href=&#34;/search?q={{.}}&#34;&gt;{{.}}&lt;/a&gt;
</span><a id="L64"></a><span class="ln">    64</span>	<span class="comment">
</span><a id="L65"></a><span class="ln">    65</span>	<span class="comment">At parse time each {{.}} is overwritten to add escaping functions as necessary.
</span><a id="L66"></a><span class="ln">    66</span>	<span class="comment">In this case it becomes
</span><a id="L67"></a><span class="ln">    67</span>	<span class="comment">
</span><a id="L68"></a><span class="ln">    68</span>	<span class="comment">  &lt;a href=&#34;/search?q={{. | urlquery}}&#34;&gt;{{. | html}}&lt;/a&gt;
</span><a id="L69"></a><span class="ln">    69</span>	<span class="comment">
</span><a id="L70"></a><span class="ln">    70</span>	<span class="comment">
</span><a id="L71"></a><span class="ln">    71</span>	<span class="comment">Errors
</span><a id="L72"></a><span class="ln">    72</span>	<span class="comment">
</span><a id="L73"></a><span class="ln">    73</span>	<span class="comment">See the documentation of ErrorCode for details.
</span><a id="L74"></a><span class="ln">    74</span>	<span class="comment">
</span><a id="L75"></a><span class="ln">    75</span>	<span class="comment">
</span><a id="L76"></a><span class="ln">    76</span>	<span class="comment">A fuller picture
</span><a id="L77"></a><span class="ln">    77</span>	<span class="comment">
</span><a id="L78"></a><span class="ln">    78</span>	<span class="comment">The rest of this package comment may be skipped on first reading; it includes
</span><a id="L79"></a><span class="ln">    79</span>	<span class="comment">details necessary to understand escaping contexts and error messages. Most users
</span><a id="L80"></a><span class="ln">    80</span>	<span class="comment">will not need to understand these details.
</span><a id="L81"></a><span class="ln">    81</span>	<span class="comment">
</span><a id="L82"></a><span class="ln">    82</span>	<span class="comment">
</span><a id="L83"></a><span class="ln">    83</span>	<span class="comment">Contexts
</span><a id="L84"></a><span class="ln">    84</span>	<span class="comment">
</span><a id="L85"></a><span class="ln">    85</span>	<span class="comment">Assuming {{.}} is `O&#39;Reilly: How are &lt;i&gt;you&lt;/i&gt;?`, the table below shows
</span><a id="L86"></a><span class="ln">    86</span>	<span class="comment">how {{.}} appears when used in the context to the left.
</span><a id="L87"></a><span class="ln">    87</span>	<span class="comment">
</span><a id="L88"></a><span class="ln">    88</span>	<span class="comment">  Context                          {{.}} After
</span><a id="L89"></a><span class="ln">    89</span>	<span class="comment">  {{.}}                            O&#39;Reilly: How are &amp;lt;i&amp;gt;you&amp;lt;/i&amp;gt;?
</span><a id="L90"></a><span class="ln">    90</span>	<span class="comment">  &lt;a title=&#39;{{.}}&#39;&gt;                O&amp;#39;Reilly: How are you?
</span><a id="L91"></a><span class="ln">    91</span>	<span class="comment">  &lt;a href=&#34;/{{.}}&#34;&gt;                O&amp;#39;Reilly: How are %3ci%3eyou%3c/i%3e?
</span><a id="L92"></a><span class="ln">    92</span>	<span class="comment">  &lt;a href=&#34;?q={{.}}&#34;&gt;              O&amp;#39;Reilly%3a%20How%20are%3ci%3e...%3f
</span><a id="L93"></a><span class="ln">    93</span>	<span class="comment">  &lt;a onx=&#39;f(&#34;{{.}}&#34;)&#39;&gt;             O\x27Reilly: How are \x3ci\x3eyou...?
</span><a id="L94"></a><span class="ln">    94</span>	<span class="comment">  &lt;a onx=&#39;f({{.}})&#39;&gt;               &#34;O\x27Reilly: How are \x3ci\x3eyou...?&#34;
</span><a id="L95"></a><span class="ln">    95</span>	<span class="comment">  &lt;a onx=&#39;pattern = /{{.}}/;&#39;&gt;     O\x27Reilly: How are \x3ci\x3eyou...\x3f
</span><a id="L96"></a><span class="ln">    96</span>	<span class="comment">
</span><a id="L97"></a><span class="ln">    97</span>	<span class="comment">If used in an unsafe context, then the value might be filtered out:
</span><a id="L98"></a><span class="ln">    98</span>	<span class="comment">
</span><a id="L99"></a><span class="ln">    99</span>	<span class="comment">  Context                          {{.}} After
</span><a id="L100"></a><span class="ln">   100</span>	<span class="comment">  &lt;a href=&#34;{{.}}&#34;&gt;                 #ZgotmplZ
</span><a id="L101"></a><span class="ln">   101</span>	<span class="comment">
</span><a id="L102"></a><span class="ln">   102</span>	<span class="comment">since &#34;O&#39;Reilly:&#34; is not an allowed protocol like &#34;http:&#34;.
</span><a id="L103"></a><span class="ln">   103</span>	<span class="comment">
</span><a id="L104"></a><span class="ln">   104</span>	<span class="comment">
</span><a id="L105"></a><span class="ln">   105</span>	<span class="comment">If {{.}} is the innocuous word, `left`, then it can appear more widely,
</span><a id="L106"></a><span class="ln">   106</span>	<span class="comment">
</span><a id="L107"></a><span class="ln">   107</span>	<span class="comment">  Context                              {{.}} After
</span><a id="L108"></a><span class="ln">   108</span>	<span class="comment">  {{.}}                                left
</span><a id="L109"></a><span class="ln">   109</span>	<span class="comment">  &lt;a title=&#39;{{.}}&#39;&gt;                    left
</span><a id="L110"></a><span class="ln">   110</span>	<span class="comment">  &lt;a href=&#39;{{.}}&#39;&gt;                     left
</span><a id="L111"></a><span class="ln">   111</span>	<span class="comment">  &lt;a href=&#39;/{{.}}&#39;&gt;                    left
</span><a id="L112"></a><span class="ln">   112</span>	<span class="comment">  &lt;a href=&#39;?dir={{.}}&#39;&gt;                left
</span><a id="L113"></a><span class="ln">   113</span>	<span class="comment">  &lt;a style=&#34;border-{{.}}: 4px&#34;&gt;        left
</span><a id="L114"></a><span class="ln">   114</span>	<span class="comment">  &lt;a style=&#34;align: {{.}}&#34;&gt;             left
</span><a id="L115"></a><span class="ln">   115</span>	<span class="comment">  &lt;a style=&#34;background: &#39;{{.}}&#39;&gt;       left
</span><a id="L116"></a><span class="ln">   116</span>	<span class="comment">  &lt;a style=&#34;background: url(&#39;{{.}}&#39;)&gt;  left
</span><a id="L117"></a><span class="ln">   117</span>	<span class="comment">  &lt;style&gt;p.{{.}} {color:red}&lt;/style&gt;   left
</span><a id="L118"></a><span class="ln">   118</span>	<span class="comment">
</span><a id="L119"></a><span class="ln">   119</span>	<span class="comment">Non-string values can be used in JavaScript contexts.
</span><a id="L120"></a><span class="ln">   120</span>	<span class="comment">If {{.}} is
</span><a id="L121"></a><span class="ln">   121</span>	<span class="comment">
</span><a id="L122"></a><span class="ln">   122</span>	<span class="comment">  []struct{A,B string}{ &#34;foo&#34;, &#34;bar&#34; }
</span><a id="L123"></a><span class="ln">   123</span>	<span class="comment">
</span><a id="L124"></a><span class="ln">   124</span>	<span class="comment">in the escaped template
</span><a id="L125"></a><span class="ln">   125</span>	<span class="comment">
</span><a id="L126"></a><span class="ln">   126</span>	<span class="comment">  &lt;script&gt;var pair = {{.}};&lt;/script&gt;
</span><a id="L127"></a><span class="ln">   127</span>	<span class="comment">
</span><a id="L128"></a><span class="ln">   128</span>	<span class="comment">then the template output is
</span><a id="L129"></a><span class="ln">   129</span>	<span class="comment">
</span><a id="L130"></a><span class="ln">   130</span>	<span class="comment">  &lt;script&gt;var pair = {&#34;A&#34;: &#34;foo&#34;, &#34;B&#34;: &#34;bar&#34;};&lt;/script&gt;
</span><a id="L131"></a><span class="ln">   131</span>	<span class="comment">
</span><a id="L132"></a><span class="ln">   132</span>	<span class="comment">See package json to understand how non-string content is marshalled for
</span><a id="L133"></a><span class="ln">   133</span>	<span class="comment">embedding in JavaScript contexts.
</span><a id="L134"></a><span class="ln">   134</span>	<span class="comment">
</span><a id="L135"></a><span class="ln">   135</span>	<span class="comment">
</span><a id="L136"></a><span class="ln">   136</span>	<span class="comment">Typed Strings
</span><a id="L137"></a><span class="ln">   137</span>	<span class="comment">
</span><a id="L138"></a><span class="ln">   138</span>	<span class="comment">By default, this package assumes that all pipelines produce a plain text string.
</span><a id="L139"></a><span class="ln">   139</span>	<span class="comment">It adds escaping pipeline stages necessary to correctly and safely embed that
</span><a id="L140"></a><span class="ln">   140</span>	<span class="comment">plain text string in the appropriate context.
</span><a id="L141"></a><span class="ln">   141</span>	<span class="comment">
</span><a id="L142"></a><span class="ln">   142</span>	<span class="comment">When a data value is not plain text, you can make sure it is not over-escaped
</span><a id="L143"></a><span class="ln">   143</span>	<span class="comment">by marking it with its type.
</span><a id="L144"></a><span class="ln">   144</span>	<span class="comment">
</span><a id="L145"></a><span class="ln">   145</span>	<span class="comment">Types HTML, JS, URL, and others from content.go can carry safe content that is
</span><a id="L146"></a><span class="ln">   146</span>	<span class="comment">exempted from escaping.
</span><a id="L147"></a><span class="ln">   147</span>	<span class="comment">
</span><a id="L148"></a><span class="ln">   148</span>	<span class="comment">The template
</span><a id="L149"></a><span class="ln">   149</span>	<span class="comment">
</span><a id="L150"></a><span class="ln">   150</span>	<span class="comment">  Hello, {{.}}!
</span><a id="L151"></a><span class="ln">   151</span>	<span class="comment">
</span><a id="L152"></a><span class="ln">   152</span>	<span class="comment">can be invoked with
</span><a id="L153"></a><span class="ln">   153</span>	<span class="comment">
</span><a id="L154"></a><span class="ln">   154</span>	<span class="comment">  tmpl.Execute(out, HTML(`&lt;b&gt;World&lt;/b&gt;`))
</span><a id="L155"></a><span class="ln">   155</span>	<span class="comment">
</span><a id="L156"></a><span class="ln">   156</span>	<span class="comment">to produce
</span><a id="L157"></a><span class="ln">   157</span>	<span class="comment">
</span><a id="L158"></a><span class="ln">   158</span>	<span class="comment">  Hello, &lt;b&gt;World&lt;/b&gt;!
</span><a id="L159"></a><span class="ln">   159</span>	<span class="comment">
</span><a id="L160"></a><span class="ln">   160</span>	<span class="comment">instead of the
</span><a id="L161"></a><span class="ln">   161</span>	<span class="comment">
</span><a id="L162"></a><span class="ln">   162</span>	<span class="comment">  Hello, &amp;lt;b&amp;gt;World&amp;lt;b&amp;gt;!
</span><a id="L163"></a><span class="ln">   163</span>	<span class="comment">
</span><a id="L164"></a><span class="ln">   164</span>	<span class="comment">that would have been produced if {{.}} was a regular string.
</span><a id="L165"></a><span class="ln">   165</span>	<span class="comment">
</span><a id="L166"></a><span class="ln">   166</span>	<span class="comment">
</span><a id="L167"></a><span class="ln">   167</span>	<span class="comment">Security Model
</span><a id="L168"></a><span class="ln">   168</span>	<span class="comment">
</span><a id="L169"></a><span class="ln">   169</span>	<span class="comment">http://js-quasis-libraries-and-repl.googlecode.com/svn/trunk/safetemplate.html#problem_definition defines &#34;safe&#34; as used by this package.
</span><a id="L170"></a><span class="ln">   170</span>	<span class="comment">
</span><a id="L171"></a><span class="ln">   171</span>	<span class="comment">This package assumes that template authors are trusted, that Execute&#39;s data
</span><a id="L172"></a><span class="ln">   172</span>	<span class="comment">parameter is not, and seeks to preserve the properties below in the face
</span><a id="L173"></a><span class="ln">   173</span>	<span class="comment">of untrusted data:
</span><a id="L174"></a><span class="ln">   174</span>	<span class="comment">
</span><a id="L175"></a><span class="ln">   175</span>	<span class="comment">Structure Preservation Property:
</span><a id="L176"></a><span class="ln">   176</span>	<span class="comment">&#34;... when a template author writes an HTML tag in a safe templating language,
</span><a id="L177"></a><span class="ln">   177</span>	<span class="comment">the browser will interpret the corresponding portion of the output as a tag
</span><a id="L178"></a><span class="ln">   178</span>	<span class="comment">regardless of the values of untrusted data, and similarly for other structures
</span><a id="L179"></a><span class="ln">   179</span>	<span class="comment">such as attribute boundaries and JS and CSS string boundaries.&#34;
</span><a id="L180"></a><span class="ln">   180</span>	<span class="comment">
</span><a id="L181"></a><span class="ln">   181</span>	<span class="comment">Code Effect Property:
</span><a id="L182"></a><span class="ln">   182</span>	<span class="comment">&#34;... only code specified by the template author should run as a result of
</span><a id="L183"></a><span class="ln">   183</span>	<span class="comment">injecting the template output into a page and all code specified by the
</span><a id="L184"></a><span class="ln">   184</span>	<span class="comment">template author should run as a result of the same.&#34;
</span><a id="L185"></a><span class="ln">   185</span>	<span class="comment">
</span><a id="L186"></a><span class="ln">   186</span>	<span class="comment">Least Surprise Property:
</span><a id="L187"></a><span class="ln">   187</span>	<span class="comment">&#34;A developer (or code reviewer) familiar with HTML, CSS, and JavaScript, who
</span><a id="L188"></a><span class="ln">   188</span>	<span class="comment">knows that contextual autoescaping happens should be able to look at a {{.}}
</span><a id="L189"></a><span class="ln">   189</span>	<span class="comment">and correctly infer what sanitization happens.&#34;
</span><a id="L190"></a><span class="ln">   190</span>	<span class="comment">*/</span>
<a id="L191"></a><span class="ln">   191</span>	package template
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

