<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/html/template/url.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/html/template/url.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package template
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bytes&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;fmt&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;strings&#34;
<a id="L11"></a><span class="ln">    11</span>	)
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// urlFilter returns its input unless it contains an unsafe protocol in which</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// case it defangs the entire URL.</span>
<a id="L15"></a><span class="ln">    15</span>	func urlFilter(args ...interface{}) string {
<a id="L16"></a><span class="ln">    16</span>		s, t := stringify(args...)
<a id="L17"></a><span class="ln">    17</span>		if t == contentTypeURL {
<a id="L18"></a><span class="ln">    18</span>			return s
<a id="L19"></a><span class="ln">    19</span>		}
<a id="L20"></a><span class="ln">    20</span>		if i := strings.IndexRune(s, &#39;:&#39;); i &gt;= 0 &amp;&amp; strings.IndexRune(s[:i], &#39;/&#39;) &lt; 0 {
<a id="L21"></a><span class="ln">    21</span>			protocol := strings.ToLower(s[:i])
<a id="L22"></a><span class="ln">    22</span>			if protocol != &#34;http&#34; &amp;&amp; protocol != &#34;https&#34; &amp;&amp; protocol != &#34;mailto&#34; {
<a id="L23"></a><span class="ln">    23</span>				return &#34;#&#34; + filterFailsafe
<a id="L24"></a><span class="ln">    24</span>			}
<a id="L25"></a><span class="ln">    25</span>		}
<a id="L26"></a><span class="ln">    26</span>		return s
<a id="L27"></a><span class="ln">    27</span>	}
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// urlEscaper produces an output that can be embedded in a URL query.</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// The output can be embedded in an HTML attribute without further escaping.</span>
<a id="L31"></a><span class="ln">    31</span>	func urlEscaper(args ...interface{}) string {
<a id="L32"></a><span class="ln">    32</span>		return urlProcessor(false, args...)
<a id="L33"></a><span class="ln">    33</span>	}
<a id="L34"></a><span class="ln">    34</span>	
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// urlEscaper normalizes URL content so it can be embedded in a quote-delimited</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// string or parenthesis delimited url(...).</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// The normalizer does not encode all HTML specials. Specifically, it does not</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// encode &#39;&amp;&#39; so correct embedding in an HTML attribute requires escaping of</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// &#39;&amp;&#39; to &#39;&amp;amp;&#39;.</span>
<a id="L40"></a><span class="ln">    40</span>	func urlNormalizer(args ...interface{}) string {
<a id="L41"></a><span class="ln">    41</span>		return urlProcessor(true, args...)
<a id="L42"></a><span class="ln">    42</span>	}
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	<span class="comment">// urlProcessor normalizes (when norm is true) or escapes its input to produce</span>
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">// a valid hierarchical or opaque URL part.</span>
<a id="L46"></a><span class="ln">    46</span>	func urlProcessor(norm bool, args ...interface{}) string {
<a id="L47"></a><span class="ln">    47</span>		s, t := stringify(args...)
<a id="L48"></a><span class="ln">    48</span>		if t == contentTypeURL {
<a id="L49"></a><span class="ln">    49</span>			norm = true
<a id="L50"></a><span class="ln">    50</span>		}
<a id="L51"></a><span class="ln">    51</span>		var b bytes.Buffer
<a id="L52"></a><span class="ln">    52</span>		written := 0
<a id="L53"></a><span class="ln">    53</span>		<span class="comment">// The byte loop below assumes that all URLs use UTF-8 as the</span>
<a id="L54"></a><span class="ln">    54</span>		<span class="comment">// content-encoding. This is similar to the URI to IRI encoding scheme</span>
<a id="L55"></a><span class="ln">    55</span>		<span class="comment">// defined in section 3.1 of  RFC 3987, and behaves the same as the</span>
<a id="L56"></a><span class="ln">    56</span>		<span class="comment">// EcmaScript builtin encodeURIComponent.</span>
<a id="L57"></a><span class="ln">    57</span>		<span class="comment">// It should not cause any misencoding of URLs in pages with</span>
<a id="L58"></a><span class="ln">    58</span>		<span class="comment">// Content-type: text/html;charset=UTF-8.</span>
<a id="L59"></a><span class="ln">    59</span>		for i, n := 0, len(s); i &lt; n; i++ {
<a id="L60"></a><span class="ln">    60</span>			c := s[i]
<a id="L61"></a><span class="ln">    61</span>			switch c {
<a id="L62"></a><span class="ln">    62</span>			<span class="comment">// Single quote and parens are sub-delims in RFC 3986, but we</span>
<a id="L63"></a><span class="ln">    63</span>			<span class="comment">// escape them so the output can be embedded in in single</span>
<a id="L64"></a><span class="ln">    64</span>			<span class="comment">// quoted attributes and unquoted CSS url(...) constructs.</span>
<a id="L65"></a><span class="ln">    65</span>			<span class="comment">// Single quotes are reserved in URLs, but are only used in</span>
<a id="L66"></a><span class="ln">    66</span>			<span class="comment">// the obsolete &#34;mark&#34; rule in an appendix in RFC 3986</span>
<a id="L67"></a><span class="ln">    67</span>			<span class="comment">// so can be safely encoded.</span>
<a id="L68"></a><span class="ln">    68</span>			case &#39;!&#39;, &#39;#&#39;, &#39;$&#39;, &#39;&amp;&#39;, &#39;*&#39;, &#39;+&#39;, &#39;,&#39;, &#39;/&#39;, &#39;:&#39;, &#39;;&#39;, &#39;=&#39;, &#39;?&#39;, &#39;@&#39;, &#39;[&#39;, &#39;]&#39;:
<a id="L69"></a><span class="ln">    69</span>				if norm {
<a id="L70"></a><span class="ln">    70</span>					continue
<a id="L71"></a><span class="ln">    71</span>				}
<a id="L72"></a><span class="ln">    72</span>			<span class="comment">// Unreserved according to RFC 3986 sec 2.3</span>
<a id="L73"></a><span class="ln">    73</span>			<span class="comment">// &#34;For consistency, percent-encoded octets in the ranges of</span>
<a id="L74"></a><span class="ln">    74</span>			<span class="comment">// ALPHA (%41-%5A and %61-%7A), DIGIT (%30-%39), hyphen (%2D),</span>
<a id="L75"></a><span class="ln">    75</span>			<span class="comment">// period (%2E), underscore (%5F), or tilde (%7E) should not be</span>
<a id="L76"></a><span class="ln">    76</span>			<span class="comment">// created by URI producers</span>
<a id="L77"></a><span class="ln">    77</span>			case &#39;-&#39;, &#39;.&#39;, &#39;_&#39;, &#39;~&#39;:
<a id="L78"></a><span class="ln">    78</span>				continue
<a id="L79"></a><span class="ln">    79</span>			case &#39;%&#39;:
<a id="L80"></a><span class="ln">    80</span>				<span class="comment">// When normalizing do not re-encode valid escapes.</span>
<a id="L81"></a><span class="ln">    81</span>				if norm &amp;&amp; i+2 &lt; len(s) &amp;&amp; isHex(s[i+1]) &amp;&amp; isHex(s[i+2]) {
<a id="L82"></a><span class="ln">    82</span>					continue
<a id="L83"></a><span class="ln">    83</span>				}
<a id="L84"></a><span class="ln">    84</span>			default:
<a id="L85"></a><span class="ln">    85</span>				<span class="comment">// Unreserved according to RFC 3986 sec 2.3</span>
<a id="L86"></a><span class="ln">    86</span>				if &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39; {
<a id="L87"></a><span class="ln">    87</span>					continue
<a id="L88"></a><span class="ln">    88</span>				}
<a id="L89"></a><span class="ln">    89</span>				if &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39; {
<a id="L90"></a><span class="ln">    90</span>					continue
<a id="L91"></a><span class="ln">    91</span>				}
<a id="L92"></a><span class="ln">    92</span>				if &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39; {
<a id="L93"></a><span class="ln">    93</span>					continue
<a id="L94"></a><span class="ln">    94</span>				}
<a id="L95"></a><span class="ln">    95</span>			}
<a id="L96"></a><span class="ln">    96</span>			b.WriteString(s[written:i])
<a id="L97"></a><span class="ln">    97</span>			fmt.Fprintf(&amp;b, &#34;%%%02x&#34;, c)
<a id="L98"></a><span class="ln">    98</span>			written = i + 1
<a id="L99"></a><span class="ln">    99</span>		}
<a id="L100"></a><span class="ln">   100</span>		if written == 0 {
<a id="L101"></a><span class="ln">   101</span>			return s
<a id="L102"></a><span class="ln">   102</span>		}
<a id="L103"></a><span class="ln">   103</span>		b.WriteString(s[written:])
<a id="L104"></a><span class="ln">   104</span>		return b.String()
<a id="L105"></a><span class="ln">   105</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

