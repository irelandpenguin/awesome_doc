<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/html/template/template.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/html/template/template.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package template
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;fmt&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;io&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;io/ioutil&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;path/filepath&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;sync&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;text/template&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;text/template/parse&#34;
<a id="L15"></a><span class="ln">    15</span>	)
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// Template is a specialized template.Template that produces a safe HTML</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// document fragment.</span>
<a id="L19"></a><span class="ln">    19</span>	type Template struct {
<a id="L20"></a><span class="ln">    20</span>		escaped bool
<a id="L21"></a><span class="ln">    21</span>		<span class="comment">// We could embed the text/template field, but it&#39;s safer not to because</span>
<a id="L22"></a><span class="ln">    22</span>		<span class="comment">// we need to keep our version of the name space and the underlying</span>
<a id="L23"></a><span class="ln">    23</span>		<span class="comment">// template&#39;s in sync.</span>
<a id="L24"></a><span class="ln">    24</span>		text       *template.Template
<a id="L25"></a><span class="ln">    25</span>		*nameSpace <span class="comment">// common to all associated templates</span>
<a id="L26"></a><span class="ln">    26</span>	}
<a id="L27"></a><span class="ln">    27</span>	
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// nameSpace is the data structure shared by all templates in an association.</span>
<a id="L29"></a><span class="ln">    29</span>	type nameSpace struct {
<a id="L30"></a><span class="ln">    30</span>		mu  sync.Mutex
<a id="L31"></a><span class="ln">    31</span>		set map[string]*Template
<a id="L32"></a><span class="ln">    32</span>	}
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// Templates returns a slice of the templates associated with t, including t</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// itself.</span>
<a id="L36"></a><span class="ln">    36</span>	func (t *Template) Templates() []*Template {
<a id="L37"></a><span class="ln">    37</span>		ns := t.nameSpace
<a id="L38"></a><span class="ln">    38</span>		ns.mu.Lock()
<a id="L39"></a><span class="ln">    39</span>		defer ns.mu.Unlock()
<a id="L40"></a><span class="ln">    40</span>		<span class="comment">// Return a slice so we don&#39;t expose the map.</span>
<a id="L41"></a><span class="ln">    41</span>		m := make([]*Template, 0, len(ns.set))
<a id="L42"></a><span class="ln">    42</span>		for _, v := range ns.set {
<a id="L43"></a><span class="ln">    43</span>			m = append(m, v)
<a id="L44"></a><span class="ln">    44</span>		}
<a id="L45"></a><span class="ln">    45</span>		return m
<a id="L46"></a><span class="ln">    46</span>	}
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">// Execute applies a parsed template to the specified data object,</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">// writing the output to wr.</span>
<a id="L50"></a><span class="ln">    50</span>	func (t *Template) Execute(wr io.Writer, data interface{}) (err error) {
<a id="L51"></a><span class="ln">    51</span>		t.nameSpace.mu.Lock()
<a id="L52"></a><span class="ln">    52</span>		if !t.escaped {
<a id="L53"></a><span class="ln">    53</span>			if err = escapeTemplates(t, t.Name()); err != nil {
<a id="L54"></a><span class="ln">    54</span>				t.escaped = true
<a id="L55"></a><span class="ln">    55</span>			}
<a id="L56"></a><span class="ln">    56</span>		}
<a id="L57"></a><span class="ln">    57</span>		t.nameSpace.mu.Unlock()
<a id="L58"></a><span class="ln">    58</span>		if err != nil {
<a id="L59"></a><span class="ln">    59</span>			return
<a id="L60"></a><span class="ln">    60</span>		}
<a id="L61"></a><span class="ln">    61</span>		return t.text.Execute(wr, data)
<a id="L62"></a><span class="ln">    62</span>	}
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>	<span class="comment">// ExecuteTemplate applies the template associated with t that has the given</span>
<a id="L65"></a><span class="ln">    65</span>	<span class="comment">// name to the specified data object and writes the output to wr.</span>
<a id="L66"></a><span class="ln">    66</span>	func (t *Template) ExecuteTemplate(wr io.Writer, name string, data interface{}) error {
<a id="L67"></a><span class="ln">    67</span>		tmpl, err := t.lookupAndEscapeTemplate(name)
<a id="L68"></a><span class="ln">    68</span>		if err != nil {
<a id="L69"></a><span class="ln">    69</span>			return err
<a id="L70"></a><span class="ln">    70</span>		}
<a id="L71"></a><span class="ln">    71</span>		return tmpl.text.Execute(wr, data)
<a id="L72"></a><span class="ln">    72</span>	}
<a id="L73"></a><span class="ln">    73</span>	
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">// lookupAndEscapeTemplate guarantees that the template with the given name</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">// is escaped, or returns an error if it cannot be. It returns the named</span>
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">// template.</span>
<a id="L77"></a><span class="ln">    77</span>	func (t *Template) lookupAndEscapeTemplate(name string) (tmpl *Template, err error) {
<a id="L78"></a><span class="ln">    78</span>		t.nameSpace.mu.Lock()
<a id="L79"></a><span class="ln">    79</span>		defer t.nameSpace.mu.Unlock()
<a id="L80"></a><span class="ln">    80</span>		tmpl = t.set[name]
<a id="L81"></a><span class="ln">    81</span>		if tmpl == nil {
<a id="L82"></a><span class="ln">    82</span>			return nil, fmt.Errorf(&#34;html/template: %q is undefined&#34;, name)
<a id="L83"></a><span class="ln">    83</span>		}
<a id="L84"></a><span class="ln">    84</span>		if tmpl.text.Tree == nil || tmpl.text.Root == nil {
<a id="L85"></a><span class="ln">    85</span>			return nil, fmt.Errorf(&#34;html/template: %q is an incomplete template&#34;, name)
<a id="L86"></a><span class="ln">    86</span>		}
<a id="L87"></a><span class="ln">    87</span>		if t.text.Lookup(name) == nil {
<a id="L88"></a><span class="ln">    88</span>			panic(&#34;html/template internal error: template escaping out of sync&#34;)
<a id="L89"></a><span class="ln">    89</span>		}
<a id="L90"></a><span class="ln">    90</span>		if tmpl != nil &amp;&amp; !tmpl.escaped {
<a id="L91"></a><span class="ln">    91</span>			err = escapeTemplates(tmpl, name)
<a id="L92"></a><span class="ln">    92</span>		}
<a id="L93"></a><span class="ln">    93</span>		return tmpl, err
<a id="L94"></a><span class="ln">    94</span>	}
<a id="L95"></a><span class="ln">    95</span>	
<a id="L96"></a><span class="ln">    96</span>	<span class="comment">// Parse parses a string into a template. Nested template definitions</span>
<a id="L97"></a><span class="ln">    97</span>	<span class="comment">// will be associated with the top-level template t. Parse may be</span>
<a id="L98"></a><span class="ln">    98</span>	<span class="comment">// called multiple times to parse definitions of templates to associate</span>
<a id="L99"></a><span class="ln">    99</span>	<span class="comment">// with t. It is an error if a resulting template is non-empty (contains</span>
<a id="L100"></a><span class="ln">   100</span>	<span class="comment">// content other than template definitions) and would replace a</span>
<a id="L101"></a><span class="ln">   101</span>	<span class="comment">// non-empty template with the same name.  (In multiple calls to Parse</span>
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">// with the same receiver template, only one call can contain text</span>
<a id="L103"></a><span class="ln">   103</span>	<span class="comment">// other than space, comments, and template definitions.)</span>
<a id="L104"></a><span class="ln">   104</span>	func (t *Template) Parse(src string) (*Template, error) {
<a id="L105"></a><span class="ln">   105</span>		t.nameSpace.mu.Lock()
<a id="L106"></a><span class="ln">   106</span>		t.escaped = false
<a id="L107"></a><span class="ln">   107</span>		t.nameSpace.mu.Unlock()
<a id="L108"></a><span class="ln">   108</span>		ret, err := t.text.Parse(src)
<a id="L109"></a><span class="ln">   109</span>		if err != nil {
<a id="L110"></a><span class="ln">   110</span>			return nil, err
<a id="L111"></a><span class="ln">   111</span>		}
<a id="L112"></a><span class="ln">   112</span>		<span class="comment">// In general, all the named templates might have changed underfoot.</span>
<a id="L113"></a><span class="ln">   113</span>		<span class="comment">// Regardless, some new ones may have been defined.</span>
<a id="L114"></a><span class="ln">   114</span>		<span class="comment">// The template.Template set has been updated; update ours.</span>
<a id="L115"></a><span class="ln">   115</span>		t.nameSpace.mu.Lock()
<a id="L116"></a><span class="ln">   116</span>		defer t.nameSpace.mu.Unlock()
<a id="L117"></a><span class="ln">   117</span>		for _, v := range ret.Templates() {
<a id="L118"></a><span class="ln">   118</span>			name := v.Name()
<a id="L119"></a><span class="ln">   119</span>			tmpl := t.set[name]
<a id="L120"></a><span class="ln">   120</span>			if tmpl == nil {
<a id="L121"></a><span class="ln">   121</span>				tmpl = t.new(name)
<a id="L122"></a><span class="ln">   122</span>			}
<a id="L123"></a><span class="ln">   123</span>			tmpl.escaped = false
<a id="L124"></a><span class="ln">   124</span>			tmpl.text = v
<a id="L125"></a><span class="ln">   125</span>		}
<a id="L126"></a><span class="ln">   126</span>		return t, nil
<a id="L127"></a><span class="ln">   127</span>	}
<a id="L128"></a><span class="ln">   128</span>	
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// AddParseTree creates a new template with the name and parse tree</span>
<a id="L130"></a><span class="ln">   130</span>	<span class="comment">// and associates it with t.</span>
<a id="L131"></a><span class="ln">   131</span>	<span class="comment">//</span>
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">// It returns an error if t has already been executed.</span>
<a id="L133"></a><span class="ln">   133</span>	func (t *Template) AddParseTree(name string, tree *parse.Tree) (*Template, error) {
<a id="L134"></a><span class="ln">   134</span>		t.nameSpace.mu.Lock()
<a id="L135"></a><span class="ln">   135</span>		defer t.nameSpace.mu.Unlock()
<a id="L136"></a><span class="ln">   136</span>		if t.escaped {
<a id="L137"></a><span class="ln">   137</span>			return nil, fmt.Errorf(&#34;html/template: cannot AddParseTree to %q after it has executed&#34;, t.Name())
<a id="L138"></a><span class="ln">   138</span>		}
<a id="L139"></a><span class="ln">   139</span>		text, err := t.text.AddParseTree(name, tree)
<a id="L140"></a><span class="ln">   140</span>		if err != nil {
<a id="L141"></a><span class="ln">   141</span>			return nil, err
<a id="L142"></a><span class="ln">   142</span>		}
<a id="L143"></a><span class="ln">   143</span>		ret := &amp;Template{
<a id="L144"></a><span class="ln">   144</span>			false,
<a id="L145"></a><span class="ln">   145</span>			text,
<a id="L146"></a><span class="ln">   146</span>			t.nameSpace,
<a id="L147"></a><span class="ln">   147</span>		}
<a id="L148"></a><span class="ln">   148</span>		t.set[name] = ret
<a id="L149"></a><span class="ln">   149</span>		return ret, nil
<a id="L150"></a><span class="ln">   150</span>	}
<a id="L151"></a><span class="ln">   151</span>	
<a id="L152"></a><span class="ln">   152</span>	<span class="comment">// Clone returns a duplicate of the template, including all associated</span>
<a id="L153"></a><span class="ln">   153</span>	<span class="comment">// templates. The actual representation is not copied, but the name space of</span>
<a id="L154"></a><span class="ln">   154</span>	<span class="comment">// associated templates is, so further calls to Parse in the copy will add</span>
<a id="L155"></a><span class="ln">   155</span>	<span class="comment">// templates to the copy but not to the original. Clone can be used to prepare</span>
<a id="L156"></a><span class="ln">   156</span>	<span class="comment">// common templates and use them with variant definitions for other templates</span>
<a id="L157"></a><span class="ln">   157</span>	<span class="comment">// by adding the variants after the clone is made.</span>
<a id="L158"></a><span class="ln">   158</span>	<span class="comment">//</span>
<a id="L159"></a><span class="ln">   159</span>	<span class="comment">// It returns an error if t has already been executed.</span>
<a id="L160"></a><span class="ln">   160</span>	func (t *Template) Clone() (*Template, error) {
<a id="L161"></a><span class="ln">   161</span>		t.nameSpace.mu.Lock()
<a id="L162"></a><span class="ln">   162</span>		defer t.nameSpace.mu.Unlock()
<a id="L163"></a><span class="ln">   163</span>		if t.escaped {
<a id="L164"></a><span class="ln">   164</span>			return nil, fmt.Errorf(&#34;html/template: cannot Clone %q after it has executed&#34;, t.Name())
<a id="L165"></a><span class="ln">   165</span>		}
<a id="L166"></a><span class="ln">   166</span>		textClone, err := t.text.Clone()
<a id="L167"></a><span class="ln">   167</span>		if err != nil {
<a id="L168"></a><span class="ln">   168</span>			return nil, err
<a id="L169"></a><span class="ln">   169</span>		}
<a id="L170"></a><span class="ln">   170</span>		ret := &amp;Template{
<a id="L171"></a><span class="ln">   171</span>			false,
<a id="L172"></a><span class="ln">   172</span>			textClone,
<a id="L173"></a><span class="ln">   173</span>			&amp;nameSpace{
<a id="L174"></a><span class="ln">   174</span>				set: make(map[string]*Template),
<a id="L175"></a><span class="ln">   175</span>			},
<a id="L176"></a><span class="ln">   176</span>		}
<a id="L177"></a><span class="ln">   177</span>		for _, x := range textClone.Templates() {
<a id="L178"></a><span class="ln">   178</span>			name := x.Name()
<a id="L179"></a><span class="ln">   179</span>			src := t.set[name]
<a id="L180"></a><span class="ln">   180</span>			if src == nil || src.escaped {
<a id="L181"></a><span class="ln">   181</span>				return nil, fmt.Errorf(&#34;html/template: cannot Clone %q after it has executed&#34;, t.Name())
<a id="L182"></a><span class="ln">   182</span>			}
<a id="L183"></a><span class="ln">   183</span>			if x.Tree != nil {
<a id="L184"></a><span class="ln">   184</span>				x.Tree = &amp;parse.Tree{
<a id="L185"></a><span class="ln">   185</span>					Name: x.Tree.Name,
<a id="L186"></a><span class="ln">   186</span>					Root: x.Tree.Root.CopyList(),
<a id="L187"></a><span class="ln">   187</span>				}
<a id="L188"></a><span class="ln">   188</span>			}
<a id="L189"></a><span class="ln">   189</span>			ret.set[name] = &amp;Template{
<a id="L190"></a><span class="ln">   190</span>				false,
<a id="L191"></a><span class="ln">   191</span>				x,
<a id="L192"></a><span class="ln">   192</span>				ret.nameSpace,
<a id="L193"></a><span class="ln">   193</span>			}
<a id="L194"></a><span class="ln">   194</span>		}
<a id="L195"></a><span class="ln">   195</span>		return ret, nil
<a id="L196"></a><span class="ln">   196</span>	}
<a id="L197"></a><span class="ln">   197</span>	
<a id="L198"></a><span class="ln">   198</span>	<span class="comment">// New allocates a new HTML template with the given name.</span>
<a id="L199"></a><span class="ln">   199</span>	func New(name string) *Template {
<a id="L200"></a><span class="ln">   200</span>		tmpl := &amp;Template{
<a id="L201"></a><span class="ln">   201</span>			false,
<a id="L202"></a><span class="ln">   202</span>			template.New(name),
<a id="L203"></a><span class="ln">   203</span>			&amp;nameSpace{
<a id="L204"></a><span class="ln">   204</span>				set: make(map[string]*Template),
<a id="L205"></a><span class="ln">   205</span>			},
<a id="L206"></a><span class="ln">   206</span>		}
<a id="L207"></a><span class="ln">   207</span>		tmpl.set[name] = tmpl
<a id="L208"></a><span class="ln">   208</span>		return tmpl
<a id="L209"></a><span class="ln">   209</span>	}
<a id="L210"></a><span class="ln">   210</span>	
<a id="L211"></a><span class="ln">   211</span>	<span class="comment">// New allocates a new HTML template associated with the given one</span>
<a id="L212"></a><span class="ln">   212</span>	<span class="comment">// and with the same delimiters. The association, which is transitive,</span>
<a id="L213"></a><span class="ln">   213</span>	<span class="comment">// allows one template to invoke another with a {{template}} action.</span>
<a id="L214"></a><span class="ln">   214</span>	func (t *Template) New(name string) *Template {
<a id="L215"></a><span class="ln">   215</span>		t.nameSpace.mu.Lock()
<a id="L216"></a><span class="ln">   216</span>		defer t.nameSpace.mu.Unlock()
<a id="L217"></a><span class="ln">   217</span>		return t.new(name)
<a id="L218"></a><span class="ln">   218</span>	}
<a id="L219"></a><span class="ln">   219</span>	
<a id="L220"></a><span class="ln">   220</span>	<span class="comment">// new is the implementation of New, without the lock.</span>
<a id="L221"></a><span class="ln">   221</span>	func (t *Template) new(name string) *Template {
<a id="L222"></a><span class="ln">   222</span>		tmpl := &amp;Template{
<a id="L223"></a><span class="ln">   223</span>			false,
<a id="L224"></a><span class="ln">   224</span>			t.text.New(name),
<a id="L225"></a><span class="ln">   225</span>			t.nameSpace,
<a id="L226"></a><span class="ln">   226</span>		}
<a id="L227"></a><span class="ln">   227</span>		tmpl.set[name] = tmpl
<a id="L228"></a><span class="ln">   228</span>		return tmpl
<a id="L229"></a><span class="ln">   229</span>	}
<a id="L230"></a><span class="ln">   230</span>	
<a id="L231"></a><span class="ln">   231</span>	<span class="comment">// Name returns the name of the template.</span>
<a id="L232"></a><span class="ln">   232</span>	func (t *Template) Name() string {
<a id="L233"></a><span class="ln">   233</span>		return t.text.Name()
<a id="L234"></a><span class="ln">   234</span>	}
<a id="L235"></a><span class="ln">   235</span>	
<a id="L236"></a><span class="ln">   236</span>	<span class="comment">// FuncMap is the type of the map defining the mapping from names to</span>
<a id="L237"></a><span class="ln">   237</span>	<span class="comment">// functions. Each function must have either a single return value, or two</span>
<a id="L238"></a><span class="ln">   238</span>	<span class="comment">// return values of which the second has type error. In that case, if the</span>
<a id="L239"></a><span class="ln">   239</span>	<span class="comment">// second (error) argument evaluates to non-nil during execution, execution</span>
<a id="L240"></a><span class="ln">   240</span>	<span class="comment">// terminates and Execute returns that error. FuncMap has the same base type</span>
<a id="L241"></a><span class="ln">   241</span>	<span class="comment">// as template.FuncMap, copied here so clients need not import &#34;text/template&#34;.</span>
<a id="L242"></a><span class="ln">   242</span>	type FuncMap map[string]interface{}
<a id="L243"></a><span class="ln">   243</span>	
<a id="L244"></a><span class="ln">   244</span>	<span class="comment">// Funcs adds the elements of the argument map to the template&#39;s function map.</span>
<a id="L245"></a><span class="ln">   245</span>	<span class="comment">// It panics if a value in the map is not a function with appropriate return</span>
<a id="L246"></a><span class="ln">   246</span>	<span class="comment">// type. However, it is legal to overwrite elements of the map. The return</span>
<a id="L247"></a><span class="ln">   247</span>	<span class="comment">// value is the template, so calls can be chained.</span>
<a id="L248"></a><span class="ln">   248</span>	func (t *Template) Funcs(funcMap FuncMap) *Template {
<a id="L249"></a><span class="ln">   249</span>		t.text.Funcs(template.FuncMap(funcMap))
<a id="L250"></a><span class="ln">   250</span>		return t
<a id="L251"></a><span class="ln">   251</span>	}
<a id="L252"></a><span class="ln">   252</span>	
<a id="L253"></a><span class="ln">   253</span>	<span class="comment">// Delims sets the action delimiters to the specified strings, to be used in</span>
<a id="L254"></a><span class="ln">   254</span>	<span class="comment">// subsequent calls to Parse, ParseFiles, or ParseGlob. Nested template</span>
<a id="L255"></a><span class="ln">   255</span>	<span class="comment">// definitions will inherit the settings. An empty delimiter stands for the</span>
<a id="L256"></a><span class="ln">   256</span>	<span class="comment">// corresponding default: {{ or }}.</span>
<a id="L257"></a><span class="ln">   257</span>	<span class="comment">// The return value is the template, so calls can be chained.</span>
<a id="L258"></a><span class="ln">   258</span>	func (t *Template) Delims(left, right string) *Template {
<a id="L259"></a><span class="ln">   259</span>		t.text.Delims(left, right)
<a id="L260"></a><span class="ln">   260</span>		return t
<a id="L261"></a><span class="ln">   261</span>	}
<a id="L262"></a><span class="ln">   262</span>	
<a id="L263"></a><span class="ln">   263</span>	<span class="comment">// Lookup returns the template with the given name that is associated with t,</span>
<a id="L264"></a><span class="ln">   264</span>	<span class="comment">// or nil if there is no such template.</span>
<a id="L265"></a><span class="ln">   265</span>	func (t *Template) Lookup(name string) *Template {
<a id="L266"></a><span class="ln">   266</span>		t.nameSpace.mu.Lock()
<a id="L267"></a><span class="ln">   267</span>		defer t.nameSpace.mu.Unlock()
<a id="L268"></a><span class="ln">   268</span>		return t.set[name]
<a id="L269"></a><span class="ln">   269</span>	}
<a id="L270"></a><span class="ln">   270</span>	
<a id="L271"></a><span class="ln">   271</span>	<span class="comment">// Must panics if err is non-nil in the same way as template.Must.</span>
<a id="L272"></a><span class="ln">   272</span>	func Must(t *Template, err error) *Template {
<a id="L273"></a><span class="ln">   273</span>		if err != nil {
<a id="L274"></a><span class="ln">   274</span>			panic(err)
<a id="L275"></a><span class="ln">   275</span>		}
<a id="L276"></a><span class="ln">   276</span>		return t
<a id="L277"></a><span class="ln">   277</span>	}
<a id="L278"></a><span class="ln">   278</span>	
<a id="L279"></a><span class="ln">   279</span>	<span class="comment">// ParseFiles creates a new Template and parses the template definitions from</span>
<a id="L280"></a><span class="ln">   280</span>	<span class="comment">// the named files. The returned template&#39;s name will have the (base) name and</span>
<a id="L281"></a><span class="ln">   281</span>	<span class="comment">// (parsed) contents of the first file. There must be at least one file.</span>
<a id="L282"></a><span class="ln">   282</span>	<span class="comment">// If an error occurs, parsing stops and the returned *Template is nil.</span>
<a id="L283"></a><span class="ln">   283</span>	func ParseFiles(filenames ...string) (*Template, error) {
<a id="L284"></a><span class="ln">   284</span>		return parseFiles(nil, filenames...)
<a id="L285"></a><span class="ln">   285</span>	}
<a id="L286"></a><span class="ln">   286</span>	
<a id="L287"></a><span class="ln">   287</span>	<span class="comment">// ParseFiles parses the named files and associates the resulting templates with</span>
<a id="L288"></a><span class="ln">   288</span>	<span class="comment">// t. If an error occurs, parsing stops and the returned template is nil;</span>
<a id="L289"></a><span class="ln">   289</span>	<span class="comment">// otherwise it is t. There must be at least one file.</span>
<a id="L290"></a><span class="ln">   290</span>	func (t *Template) ParseFiles(filenames ...string) (*Template, error) {
<a id="L291"></a><span class="ln">   291</span>		return parseFiles(t, filenames...)
<a id="L292"></a><span class="ln">   292</span>	}
<a id="L293"></a><span class="ln">   293</span>	
<a id="L294"></a><span class="ln">   294</span>	<span class="comment">// parseFiles is the helper for the method and function. If the argument</span>
<a id="L295"></a><span class="ln">   295</span>	<span class="comment">// template is nil, it is created from the first file.</span>
<a id="L296"></a><span class="ln">   296</span>	func parseFiles(t *Template, filenames ...string) (*Template, error) {
<a id="L297"></a><span class="ln">   297</span>		if len(filenames) == 0 {
<a id="L298"></a><span class="ln">   298</span>			<span class="comment">// Not really a problem, but be consistent.</span>
<a id="L299"></a><span class="ln">   299</span>			return nil, fmt.Errorf(&#34;html/template: no files named in call to ParseFiles&#34;)
<a id="L300"></a><span class="ln">   300</span>		}
<a id="L301"></a><span class="ln">   301</span>		for _, filename := range filenames {
<a id="L302"></a><span class="ln">   302</span>			b, err := ioutil.ReadFile(filename)
<a id="L303"></a><span class="ln">   303</span>			if err != nil {
<a id="L304"></a><span class="ln">   304</span>				return nil, err
<a id="L305"></a><span class="ln">   305</span>			}
<a id="L306"></a><span class="ln">   306</span>			s := string(b)
<a id="L307"></a><span class="ln">   307</span>			name := filepath.Base(filename)
<a id="L308"></a><span class="ln">   308</span>			<span class="comment">// First template becomes return value if not already defined,</span>
<a id="L309"></a><span class="ln">   309</span>			<span class="comment">// and we use that one for subsequent New calls to associate</span>
<a id="L310"></a><span class="ln">   310</span>			<span class="comment">// all the templates together. Also, if this file has the same name</span>
<a id="L311"></a><span class="ln">   311</span>			<span class="comment">// as t, this file becomes the contents of t, so</span>
<a id="L312"></a><span class="ln">   312</span>			<span class="comment">//  t, err := New(name).Funcs(xxx).ParseFiles(name)</span>
<a id="L313"></a><span class="ln">   313</span>			<span class="comment">// works. Otherwise we create a new template associated with t.</span>
<a id="L314"></a><span class="ln">   314</span>			var tmpl *Template
<a id="L315"></a><span class="ln">   315</span>			if t == nil {
<a id="L316"></a><span class="ln">   316</span>				t = New(name)
<a id="L317"></a><span class="ln">   317</span>			}
<a id="L318"></a><span class="ln">   318</span>			if name == t.Name() {
<a id="L319"></a><span class="ln">   319</span>				tmpl = t
<a id="L320"></a><span class="ln">   320</span>			} else {
<a id="L321"></a><span class="ln">   321</span>				tmpl = t.New(name)
<a id="L322"></a><span class="ln">   322</span>			}
<a id="L323"></a><span class="ln">   323</span>			_, err = tmpl.Parse(s)
<a id="L324"></a><span class="ln">   324</span>			if err != nil {
<a id="L325"></a><span class="ln">   325</span>				return nil, err
<a id="L326"></a><span class="ln">   326</span>			}
<a id="L327"></a><span class="ln">   327</span>		}
<a id="L328"></a><span class="ln">   328</span>		return t, nil
<a id="L329"></a><span class="ln">   329</span>	}
<a id="L330"></a><span class="ln">   330</span>	
<a id="L331"></a><span class="ln">   331</span>	<span class="comment">// ParseGlob creates a new Template and parses the template definitions from the</span>
<a id="L332"></a><span class="ln">   332</span>	<span class="comment">// files identified by the pattern, which must match at least one file. The</span>
<a id="L333"></a><span class="ln">   333</span>	<span class="comment">// returned template will have the (base) name and (parsed) contents of the</span>
<a id="L334"></a><span class="ln">   334</span>	<span class="comment">// first file matched by the pattern. ParseGlob is equivalent to calling</span>
<a id="L335"></a><span class="ln">   335</span>	<span class="comment">// ParseFiles with the list of files matched by the pattern.</span>
<a id="L336"></a><span class="ln">   336</span>	func ParseGlob(pattern string) (*Template, error) {
<a id="L337"></a><span class="ln">   337</span>		return parseGlob(nil, pattern)
<a id="L338"></a><span class="ln">   338</span>	}
<a id="L339"></a><span class="ln">   339</span>	
<a id="L340"></a><span class="ln">   340</span>	<span class="comment">// ParseGlob parses the template definitions in the files identified by the</span>
<a id="L341"></a><span class="ln">   341</span>	<span class="comment">// pattern and associates the resulting templates with t. The pattern is</span>
<a id="L342"></a><span class="ln">   342</span>	<span class="comment">// processed by filepath.Glob and must match at least one file. ParseGlob is</span>
<a id="L343"></a><span class="ln">   343</span>	<span class="comment">// equivalent to calling t.ParseFiles with the list of files matched by the</span>
<a id="L344"></a><span class="ln">   344</span>	<span class="comment">// pattern.</span>
<a id="L345"></a><span class="ln">   345</span>	func (t *Template) ParseGlob(pattern string) (*Template, error) {
<a id="L346"></a><span class="ln">   346</span>		return parseGlob(t, pattern)
<a id="L347"></a><span class="ln">   347</span>	}
<a id="L348"></a><span class="ln">   348</span>	
<a id="L349"></a><span class="ln">   349</span>	<span class="comment">// parseGlob is the implementation of the function and method ParseGlob.</span>
<a id="L350"></a><span class="ln">   350</span>	func parseGlob(t *Template, pattern string) (*Template, error) {
<a id="L351"></a><span class="ln">   351</span>		filenames, err := filepath.Glob(pattern)
<a id="L352"></a><span class="ln">   352</span>		if err != nil {
<a id="L353"></a><span class="ln">   353</span>			return nil, err
<a id="L354"></a><span class="ln">   354</span>		}
<a id="L355"></a><span class="ln">   355</span>		if len(filenames) == 0 {
<a id="L356"></a><span class="ln">   356</span>			return nil, fmt.Errorf(&#34;html/template: pattern matches no files: %#q&#34;, pattern)
<a id="L357"></a><span class="ln">   357</span>		}
<a id="L358"></a><span class="ln">   358</span>		return parseFiles(t, filenames...)
<a id="L359"></a><span class="ln">   359</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

