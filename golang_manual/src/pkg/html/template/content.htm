<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/html/template/content.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/html/template/content.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package template
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;fmt&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;reflect&#34;
<a id="L10"></a><span class="ln">    10</span>	)
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// Strings of content from a trusted source.</span>
<a id="L13"></a><span class="ln">    13</span>	type (
<a id="L14"></a><span class="ln">    14</span>		<span class="comment">// CSS encapsulates known safe content that matches any of:</span>
<a id="L15"></a><span class="ln">    15</span>		<span class="comment">//   1. The CSS3 stylesheet production, such as `p { color: purple }`.</span>
<a id="L16"></a><span class="ln">    16</span>		<span class="comment">//   2. The CSS3 rule production, such as `a[href=~&#34;https:&#34;].foo#bar`.</span>
<a id="L17"></a><span class="ln">    17</span>		<span class="comment">//   3. CSS3 declaration productions, such as `color: red; margin: 2px`.</span>
<a id="L18"></a><span class="ln">    18</span>		<span class="comment">//   4. The CSS3 value production, such as `rgba(0, 0, 255, 127)`.</span>
<a id="L19"></a><span class="ln">    19</span>		<span class="comment">// See http://www.w3.org/TR/css3-syntax/#style</span>
<a id="L20"></a><span class="ln">    20</span>		CSS string
<a id="L21"></a><span class="ln">    21</span>	
<a id="L22"></a><span class="ln">    22</span>		<span class="comment">// HTML encapsulates a known safe HTML document fragment.</span>
<a id="L23"></a><span class="ln">    23</span>		<span class="comment">// It should not be used for HTML from a third-party, or HTML with</span>
<a id="L24"></a><span class="ln">    24</span>		<span class="comment">// unclosed tags or comments. The outputs of a sound HTML sanitizer</span>
<a id="L25"></a><span class="ln">    25</span>		<span class="comment">// and a template escaped by this package are fine for use with HTML.</span>
<a id="L26"></a><span class="ln">    26</span>		HTML string
<a id="L27"></a><span class="ln">    27</span>	
<a id="L28"></a><span class="ln">    28</span>		<span class="comment">// HTMLAttr encapsulates an HTML attribute from a trusted source,</span>
<a id="L29"></a><span class="ln">    29</span>		<span class="comment">// for example, ` dir=&#34;ltr&#34;`.</span>
<a id="L30"></a><span class="ln">    30</span>		HTMLAttr string
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>		<span class="comment">// JS encapsulates a known safe EcmaScript5 Expression, for example,</span>
<a id="L33"></a><span class="ln">    33</span>		<span class="comment">// `(x + y * z())`. </span>
<a id="L34"></a><span class="ln">    34</span>		<span class="comment">// Template authors are responsible for ensuring that typed expressions</span>
<a id="L35"></a><span class="ln">    35</span>		<span class="comment">// do not break the intended precedence and that there is no</span>
<a id="L36"></a><span class="ln">    36</span>		<span class="comment">// statement/expression ambiguity as when passing an expression like</span>
<a id="L37"></a><span class="ln">    37</span>		<span class="comment">// &#34;{ foo: bar() }\n[&#39;foo&#39;]()&#34;, which is both a valid Expression and a</span>
<a id="L38"></a><span class="ln">    38</span>		<span class="comment">// valid Program with a very different meaning.</span>
<a id="L39"></a><span class="ln">    39</span>		JS string
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>		<span class="comment">// JSStr encapsulates a sequence of characters meant to be embedded</span>
<a id="L42"></a><span class="ln">    42</span>		<span class="comment">// between quotes in a JavaScript expression.</span>
<a id="L43"></a><span class="ln">    43</span>		<span class="comment">// The string must match a series of StringCharacters:</span>
<a id="L44"></a><span class="ln">    44</span>		<span class="comment">//   StringCharacter :: SourceCharacter but not `\` or LineTerminator</span>
<a id="L45"></a><span class="ln">    45</span>		<span class="comment">//                    | EscapeSequence</span>
<a id="L46"></a><span class="ln">    46</span>		<span class="comment">// Note that LineContinuations are not allowed.</span>
<a id="L47"></a><span class="ln">    47</span>		<span class="comment">// JSStr(&#34;foo\\nbar&#34;) is fine, but JSStr(&#34;foo\\\nbar&#34;) is not.</span>
<a id="L48"></a><span class="ln">    48</span>		JSStr string
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>		<span class="comment">// URL encapsulates a known safe URL as defined in RFC 3896.</span>
<a id="L51"></a><span class="ln">    51</span>		<span class="comment">// A URL like `javascript:checkThatFormNotEditedBeforeLeavingPage()`</span>
<a id="L52"></a><span class="ln">    52</span>		<span class="comment">// from a trusted source should go in the page, but by default dynamic</span>
<a id="L53"></a><span class="ln">    53</span>		<span class="comment">// `javascript:` URLs are filtered out since they are a frequently</span>
<a id="L54"></a><span class="ln">    54</span>		<span class="comment">// exploited injection vector.</span>
<a id="L55"></a><span class="ln">    55</span>		URL string
<a id="L56"></a><span class="ln">    56</span>	)
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>	type contentType uint8
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	const (
<a id="L61"></a><span class="ln">    61</span>		contentTypePlain contentType = iota
<a id="L62"></a><span class="ln">    62</span>		contentTypeCSS
<a id="L63"></a><span class="ln">    63</span>		contentTypeHTML
<a id="L64"></a><span class="ln">    64</span>		contentTypeHTMLAttr
<a id="L65"></a><span class="ln">    65</span>		contentTypeJS
<a id="L66"></a><span class="ln">    66</span>		contentTypeJSStr
<a id="L67"></a><span class="ln">    67</span>		contentTypeURL
<a id="L68"></a><span class="ln">    68</span>		<span class="comment">// contentTypeUnsafe is used in attr.go for values that affect how</span>
<a id="L69"></a><span class="ln">    69</span>		<span class="comment">// embedded content and network messages are formed, vetted,</span>
<a id="L70"></a><span class="ln">    70</span>		<span class="comment">// or interpreted; or which credentials network messages carry.</span>
<a id="L71"></a><span class="ln">    71</span>		contentTypeUnsafe
<a id="L72"></a><span class="ln">    72</span>	)
<a id="L73"></a><span class="ln">    73</span>	
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">// indirect returns the value, after dereferencing as many times</span>
<a id="L75"></a><span class="ln">    75</span>	<span class="comment">// as necessary to reach the base type (or nil).</span>
<a id="L76"></a><span class="ln">    76</span>	func indirect(a interface{}) interface{} {
<a id="L77"></a><span class="ln">    77</span>		if t := reflect.TypeOf(a); t.Kind() != reflect.Ptr {
<a id="L78"></a><span class="ln">    78</span>			<span class="comment">// Avoid creating a reflect.Value if it&#39;s not a pointer.</span>
<a id="L79"></a><span class="ln">    79</span>			return a
<a id="L80"></a><span class="ln">    80</span>		}
<a id="L81"></a><span class="ln">    81</span>		v := reflect.ValueOf(a)
<a id="L82"></a><span class="ln">    82</span>		for v.Kind() == reflect.Ptr &amp;&amp; !v.IsNil() {
<a id="L83"></a><span class="ln">    83</span>			v = v.Elem()
<a id="L84"></a><span class="ln">    84</span>		}
<a id="L85"></a><span class="ln">    85</span>		return v.Interface()
<a id="L86"></a><span class="ln">    86</span>	}
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>	var (
<a id="L89"></a><span class="ln">    89</span>		errorType       = reflect.TypeOf((*error)(nil)).Elem()
<a id="L90"></a><span class="ln">    90</span>		fmtStringerType = reflect.TypeOf((*fmt.Stringer)(nil)).Elem()
<a id="L91"></a><span class="ln">    91</span>	)
<a id="L92"></a><span class="ln">    92</span>	
<a id="L93"></a><span class="ln">    93</span>	<span class="comment">// indirectToStringerOrError returns the value, after dereferencing as many times</span>
<a id="L94"></a><span class="ln">    94</span>	<span class="comment">// as necessary to reach the base type (or nil) or an implementation of fmt.Stringer</span>
<a id="L95"></a><span class="ln">    95</span>	<span class="comment">// or error,</span>
<a id="L96"></a><span class="ln">    96</span>	func indirectToStringerOrError(a interface{}) interface{} {
<a id="L97"></a><span class="ln">    97</span>		v := reflect.ValueOf(a)
<a id="L98"></a><span class="ln">    98</span>		for !v.Type().Implements(fmtStringerType) &amp;&amp; !v.Type().Implements(errorType) &amp;&amp; v.Kind() == reflect.Ptr &amp;&amp; !v.IsNil() {
<a id="L99"></a><span class="ln">    99</span>			v = v.Elem()
<a id="L100"></a><span class="ln">   100</span>		}
<a id="L101"></a><span class="ln">   101</span>		return v.Interface()
<a id="L102"></a><span class="ln">   102</span>	}
<a id="L103"></a><span class="ln">   103</span>	
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">// stringify converts its arguments to a string and the type of the content.</span>
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// All pointers are dereferenced, as in the text/template package.</span>
<a id="L106"></a><span class="ln">   106</span>	func stringify(args ...interface{}) (string, contentType) {
<a id="L107"></a><span class="ln">   107</span>		if len(args) == 1 {
<a id="L108"></a><span class="ln">   108</span>			switch s := indirect(args[0]).(type) {
<a id="L109"></a><span class="ln">   109</span>			case string:
<a id="L110"></a><span class="ln">   110</span>				return s, contentTypePlain
<a id="L111"></a><span class="ln">   111</span>			case CSS:
<a id="L112"></a><span class="ln">   112</span>				return string(s), contentTypeCSS
<a id="L113"></a><span class="ln">   113</span>			case HTML:
<a id="L114"></a><span class="ln">   114</span>				return string(s), contentTypeHTML
<a id="L115"></a><span class="ln">   115</span>			case HTMLAttr:
<a id="L116"></a><span class="ln">   116</span>				return string(s), contentTypeHTMLAttr
<a id="L117"></a><span class="ln">   117</span>			case JS:
<a id="L118"></a><span class="ln">   118</span>				return string(s), contentTypeJS
<a id="L119"></a><span class="ln">   119</span>			case JSStr:
<a id="L120"></a><span class="ln">   120</span>				return string(s), contentTypeJSStr
<a id="L121"></a><span class="ln">   121</span>			case URL:
<a id="L122"></a><span class="ln">   122</span>				return string(s), contentTypeURL
<a id="L123"></a><span class="ln">   123</span>			}
<a id="L124"></a><span class="ln">   124</span>		}
<a id="L125"></a><span class="ln">   125</span>		for i, arg := range args {
<a id="L126"></a><span class="ln">   126</span>			args[i] = indirectToStringerOrError(arg)
<a id="L127"></a><span class="ln">   127</span>		}
<a id="L128"></a><span class="ln">   128</span>		return fmt.Sprint(args...), contentTypePlain
<a id="L129"></a><span class="ln">   129</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

