<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/html/template/html.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/html/template/html.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package template
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bytes&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;fmt&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;strings&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;unicode/utf8&#34;
<a id="L12"></a><span class="ln">    12</span>	)
<a id="L13"></a><span class="ln">    13</span>	
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// htmlNospaceEscaper escapes for inclusion in unquoted attribute values.</span>
<a id="L15"></a><span class="ln">    15</span>	func htmlNospaceEscaper(args ...interface{}) string {
<a id="L16"></a><span class="ln">    16</span>		s, t := stringify(args...)
<a id="L17"></a><span class="ln">    17</span>		if t == contentTypeHTML {
<a id="L18"></a><span class="ln">    18</span>			return htmlReplacer(stripTags(s), htmlNospaceNormReplacementTable, false)
<a id="L19"></a><span class="ln">    19</span>		}
<a id="L20"></a><span class="ln">    20</span>		return htmlReplacer(s, htmlNospaceReplacementTable, false)
<a id="L21"></a><span class="ln">    21</span>	}
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// attrEscaper escapes for inclusion in quoted attribute values.</span>
<a id="L24"></a><span class="ln">    24</span>	func attrEscaper(args ...interface{}) string {
<a id="L25"></a><span class="ln">    25</span>		s, t := stringify(args...)
<a id="L26"></a><span class="ln">    26</span>		if t == contentTypeHTML {
<a id="L27"></a><span class="ln">    27</span>			return htmlReplacer(stripTags(s), htmlNormReplacementTable, true)
<a id="L28"></a><span class="ln">    28</span>		}
<a id="L29"></a><span class="ln">    29</span>		return htmlReplacer(s, htmlReplacementTable, true)
<a id="L30"></a><span class="ln">    30</span>	}
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// rcdataEscaper escapes for inclusion in an RCDATA element body.</span>
<a id="L33"></a><span class="ln">    33</span>	func rcdataEscaper(args ...interface{}) string {
<a id="L34"></a><span class="ln">    34</span>		s, t := stringify(args...)
<a id="L35"></a><span class="ln">    35</span>		if t == contentTypeHTML {
<a id="L36"></a><span class="ln">    36</span>			return htmlReplacer(s, htmlNormReplacementTable, true)
<a id="L37"></a><span class="ln">    37</span>		}
<a id="L38"></a><span class="ln">    38</span>		return htmlReplacer(s, htmlReplacementTable, true)
<a id="L39"></a><span class="ln">    39</span>	}
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// htmlEscaper escapes for inclusion in HTML text.</span>
<a id="L42"></a><span class="ln">    42</span>	func htmlEscaper(args ...interface{}) string {
<a id="L43"></a><span class="ln">    43</span>		s, t := stringify(args...)
<a id="L44"></a><span class="ln">    44</span>		if t == contentTypeHTML {
<a id="L45"></a><span class="ln">    45</span>			return s
<a id="L46"></a><span class="ln">    46</span>		}
<a id="L47"></a><span class="ln">    47</span>		return htmlReplacer(s, htmlReplacementTable, true)
<a id="L48"></a><span class="ln">    48</span>	}
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// htmlReplacementTable contains the runes that need to be escaped</span>
<a id="L51"></a><span class="ln">    51</span>	<span class="comment">// inside a quoted attribute value or in a text node.</span>
<a id="L52"></a><span class="ln">    52</span>	var htmlReplacementTable = []string{
<a id="L53"></a><span class="ln">    53</span>		<span class="comment">// http://www.w3.org/TR/html5/tokenization.html#attribute-value-unquoted-state: &#34;</span>
<a id="L54"></a><span class="ln">    54</span>		<span class="comment">// U+0000 NULL Parse error. Append a U+FFFD REPLACEMENT</span>
<a id="L55"></a><span class="ln">    55</span>		<span class="comment">// CHARACTER character to the current attribute&#39;s value.</span>
<a id="L56"></a><span class="ln">    56</span>		<span class="comment">// &#34;</span>
<a id="L57"></a><span class="ln">    57</span>		<span class="comment">// and similarly</span>
<a id="L58"></a><span class="ln">    58</span>		<span class="comment">// http://www.w3.org/TR/html5/tokenization.html#before-attribute-value-state</span>
<a id="L59"></a><span class="ln">    59</span>		0:    &#34;\uFFFD&#34;,
<a id="L60"></a><span class="ln">    60</span>		&#39;&#34;&#39;:  &#34;&amp;#34;&#34;,
<a id="L61"></a><span class="ln">    61</span>		&#39;&amp;&#39;:  &#34;&amp;amp;&#34;,
<a id="L62"></a><span class="ln">    62</span>		&#39;\&#39;&#39;: &#34;&amp;#39;&#34;,
<a id="L63"></a><span class="ln">    63</span>		&#39;+&#39;:  &#34;&amp;#43;&#34;,
<a id="L64"></a><span class="ln">    64</span>		&#39;&lt;&#39;:  &#34;&amp;lt;&#34;,
<a id="L65"></a><span class="ln">    65</span>		&#39;&gt;&#39;:  &#34;&amp;gt;&#34;,
<a id="L66"></a><span class="ln">    66</span>	}
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// htmlNormReplacementTable is like htmlReplacementTable but without &#39;&amp;&#39; to</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// avoid over-encoding existing entities.</span>
<a id="L70"></a><span class="ln">    70</span>	var htmlNormReplacementTable = []string{
<a id="L71"></a><span class="ln">    71</span>		0:    &#34;\uFFFD&#34;,
<a id="L72"></a><span class="ln">    72</span>		&#39;&#34;&#39;:  &#34;&amp;#34;&#34;,
<a id="L73"></a><span class="ln">    73</span>		&#39;\&#39;&#39;: &#34;&amp;#39;&#34;,
<a id="L74"></a><span class="ln">    74</span>		&#39;+&#39;:  &#34;&amp;#43;&#34;,
<a id="L75"></a><span class="ln">    75</span>		&#39;&lt;&#39;:  &#34;&amp;lt;&#34;,
<a id="L76"></a><span class="ln">    76</span>		&#39;&gt;&#39;:  &#34;&amp;gt;&#34;,
<a id="L77"></a><span class="ln">    77</span>	}
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// htmlNospaceReplacementTable contains the runes that need to be escaped</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// inside an unquoted attribute value.</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// The set of runes escaped is the union of the HTML specials and</span>
<a id="L82"></a><span class="ln">    82</span>	<span class="comment">// those determined by running the JS below in browsers:</span>
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">// &lt;div id=d&gt;&lt;/div&gt;</span>
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">// &lt;script&gt;(function () {</span>
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">// var a = [], d = document.getElementById(&#34;d&#34;), i, c, s;</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// for (i = 0; i &lt; 0x10000; ++i) {</span>
<a id="L87"></a><span class="ln">    87</span>	<span class="comment">//   c = String.fromCharCode(i);</span>
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">//   d.innerHTML = &#34;&lt;span title=&#34; + c + &#34;lt&#34; + c + &#34;&gt;&lt;/span&gt;&#34;</span>
<a id="L89"></a><span class="ln">    89</span>	<span class="comment">//   s = d.getElementsByTagName(&#34;SPAN&#34;)[0];</span>
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">//   if (!s || s.title !== c + &#34;lt&#34; + c) { a.push(i.toString(16)); }</span>
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// }</span>
<a id="L92"></a><span class="ln">    92</span>	<span class="comment">// document.write(a.join(&#34;, &#34;));</span>
<a id="L93"></a><span class="ln">    93</span>	<span class="comment">// })()&lt;/script&gt;</span>
<a id="L94"></a><span class="ln">    94</span>	var htmlNospaceReplacementTable = []string{
<a id="L95"></a><span class="ln">    95</span>		0:    &#34;&amp;#xfffd;&#34;,
<a id="L96"></a><span class="ln">    96</span>		&#39;\t&#39;: &#34;&amp;#9;&#34;,
<a id="L97"></a><span class="ln">    97</span>		&#39;\n&#39;: &#34;&amp;#10;&#34;,
<a id="L98"></a><span class="ln">    98</span>		&#39;\v&#39;: &#34;&amp;#11;&#34;,
<a id="L99"></a><span class="ln">    99</span>		&#39;\f&#39;: &#34;&amp;#12;&#34;,
<a id="L100"></a><span class="ln">   100</span>		&#39;\r&#39;: &#34;&amp;#13;&#34;,
<a id="L101"></a><span class="ln">   101</span>		&#39; &#39;:  &#34;&amp;#32;&#34;,
<a id="L102"></a><span class="ln">   102</span>		&#39;&#34;&#39;:  &#34;&amp;#34;&#34;,
<a id="L103"></a><span class="ln">   103</span>		&#39;&amp;&#39;:  &#34;&amp;amp;&#34;,
<a id="L104"></a><span class="ln">   104</span>		&#39;\&#39;&#39;: &#34;&amp;#39;&#34;,
<a id="L105"></a><span class="ln">   105</span>		&#39;+&#39;:  &#34;&amp;#43;&#34;,
<a id="L106"></a><span class="ln">   106</span>		&#39;&lt;&#39;:  &#34;&amp;lt;&#34;,
<a id="L107"></a><span class="ln">   107</span>		&#39;=&#39;:  &#34;&amp;#61;&#34;,
<a id="L108"></a><span class="ln">   108</span>		&#39;&gt;&#39;:  &#34;&amp;gt;&#34;,
<a id="L109"></a><span class="ln">   109</span>		<span class="comment">// A parse error in the attribute value (unquoted) and </span>
<a id="L110"></a><span class="ln">   110</span>		<span class="comment">// before attribute value states.</span>
<a id="L111"></a><span class="ln">   111</span>		<span class="comment">// Treated as a quoting character by IE.</span>
<a id="L112"></a><span class="ln">   112</span>		&#39;`&#39;: &#34;&amp;#96;&#34;,
<a id="L113"></a><span class="ln">   113</span>	}
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>	<span class="comment">// htmlNospaceNormReplacementTable is like htmlNospaceReplacementTable but</span>
<a id="L116"></a><span class="ln">   116</span>	<span class="comment">// without &#39;&amp;&#39; to avoid over-encoding existing entities.</span>
<a id="L117"></a><span class="ln">   117</span>	var htmlNospaceNormReplacementTable = []string{
<a id="L118"></a><span class="ln">   118</span>		0:    &#34;&amp;#xfffd;&#34;,
<a id="L119"></a><span class="ln">   119</span>		&#39;\t&#39;: &#34;&amp;#9;&#34;,
<a id="L120"></a><span class="ln">   120</span>		&#39;\n&#39;: &#34;&amp;#10;&#34;,
<a id="L121"></a><span class="ln">   121</span>		&#39;\v&#39;: &#34;&amp;#11;&#34;,
<a id="L122"></a><span class="ln">   122</span>		&#39;\f&#39;: &#34;&amp;#12;&#34;,
<a id="L123"></a><span class="ln">   123</span>		&#39;\r&#39;: &#34;&amp;#13;&#34;,
<a id="L124"></a><span class="ln">   124</span>		&#39; &#39;:  &#34;&amp;#32;&#34;,
<a id="L125"></a><span class="ln">   125</span>		&#39;&#34;&#39;:  &#34;&amp;#34;&#34;,
<a id="L126"></a><span class="ln">   126</span>		&#39;\&#39;&#39;: &#34;&amp;#39;&#34;,
<a id="L127"></a><span class="ln">   127</span>		&#39;+&#39;:  &#34;&amp;#43;&#34;,
<a id="L128"></a><span class="ln">   128</span>		&#39;&lt;&#39;:  &#34;&amp;lt;&#34;,
<a id="L129"></a><span class="ln">   129</span>		&#39;=&#39;:  &#34;&amp;#61;&#34;,
<a id="L130"></a><span class="ln">   130</span>		&#39;&gt;&#39;:  &#34;&amp;gt;&#34;,
<a id="L131"></a><span class="ln">   131</span>		<span class="comment">// A parse error in the attribute value (unquoted) and </span>
<a id="L132"></a><span class="ln">   132</span>		<span class="comment">// before attribute value states.</span>
<a id="L133"></a><span class="ln">   133</span>		<span class="comment">// Treated as a quoting character by IE.</span>
<a id="L134"></a><span class="ln">   134</span>		&#39;`&#39;: &#34;&amp;#96;&#34;,
<a id="L135"></a><span class="ln">   135</span>	}
<a id="L136"></a><span class="ln">   136</span>	
<a id="L137"></a><span class="ln">   137</span>	<span class="comment">// htmlReplacer returns s with runes replaced according to replacementTable</span>
<a id="L138"></a><span class="ln">   138</span>	<span class="comment">// and when badRunes is true, certain bad runes are allowed through unescaped.</span>
<a id="L139"></a><span class="ln">   139</span>	func htmlReplacer(s string, replacementTable []string, badRunes bool) string {
<a id="L140"></a><span class="ln">   140</span>		written, b := 0, new(bytes.Buffer)
<a id="L141"></a><span class="ln">   141</span>		for i, r := range s {
<a id="L142"></a><span class="ln">   142</span>			if int(r) &lt; len(replacementTable) {
<a id="L143"></a><span class="ln">   143</span>				if repl := replacementTable[r]; len(repl) != 0 {
<a id="L144"></a><span class="ln">   144</span>					b.WriteString(s[written:i])
<a id="L145"></a><span class="ln">   145</span>					b.WriteString(repl)
<a id="L146"></a><span class="ln">   146</span>					<span class="comment">// Valid as long as replacementTable doesn&#39;t </span>
<a id="L147"></a><span class="ln">   147</span>					<span class="comment">// include anything above 0x7f.</span>
<a id="L148"></a><span class="ln">   148</span>					written = i + utf8.RuneLen(r)
<a id="L149"></a><span class="ln">   149</span>				}
<a id="L150"></a><span class="ln">   150</span>			} else if badRunes {
<a id="L151"></a><span class="ln">   151</span>				<span class="comment">// No-op.</span>
<a id="L152"></a><span class="ln">   152</span>				<span class="comment">// IE does not allow these ranges in unquoted attrs.</span>
<a id="L153"></a><span class="ln">   153</span>			} else if 0xfdd0 &lt;= r &amp;&amp; r &lt;= 0xfdef || 0xfff0 &lt;= r &amp;&amp; r &lt;= 0xffff {
<a id="L154"></a><span class="ln">   154</span>				fmt.Fprintf(b, &#34;%s&amp;#x%x;&#34;, s[written:i], r)
<a id="L155"></a><span class="ln">   155</span>				written = i + utf8.RuneLen(r)
<a id="L156"></a><span class="ln">   156</span>			}
<a id="L157"></a><span class="ln">   157</span>		}
<a id="L158"></a><span class="ln">   158</span>		if written == 0 {
<a id="L159"></a><span class="ln">   159</span>			return s
<a id="L160"></a><span class="ln">   160</span>		}
<a id="L161"></a><span class="ln">   161</span>		b.WriteString(s[written:])
<a id="L162"></a><span class="ln">   162</span>		return b.String()
<a id="L163"></a><span class="ln">   163</span>	}
<a id="L164"></a><span class="ln">   164</span>	
<a id="L165"></a><span class="ln">   165</span>	<span class="comment">// stripTags takes a snippet of HTML and returns only the text content.</span>
<a id="L166"></a><span class="ln">   166</span>	<span class="comment">// For example, `&lt;b&gt;&amp;iexcl;Hi!&lt;/b&gt; &lt;script&gt;...&lt;/script&gt;` -&gt; `&amp;iexcl;Hi! `.</span>
<a id="L167"></a><span class="ln">   167</span>	func stripTags(html string) string {
<a id="L168"></a><span class="ln">   168</span>		var b bytes.Buffer
<a id="L169"></a><span class="ln">   169</span>		s, c, i, allText := []byte(html), context{}, 0, true
<a id="L170"></a><span class="ln">   170</span>		<span class="comment">// Using the transition funcs helps us avoid mangling</span>
<a id="L171"></a><span class="ln">   171</span>		<span class="comment">// `&lt;div title=&#34;1&gt;2&#34;&gt;` or `I &lt;3 Ponies!`.</span>
<a id="L172"></a><span class="ln">   172</span>		for i != len(s) {
<a id="L173"></a><span class="ln">   173</span>			if c.delim == delimNone {
<a id="L174"></a><span class="ln">   174</span>				st := c.state
<a id="L175"></a><span class="ln">   175</span>				<span class="comment">// Use RCDATA instead of parsing into JS or CSS styles.</span>
<a id="L176"></a><span class="ln">   176</span>				if c.element != elementNone &amp;&amp; !isInTag(st) {
<a id="L177"></a><span class="ln">   177</span>					st = stateRCDATA
<a id="L178"></a><span class="ln">   178</span>				}
<a id="L179"></a><span class="ln">   179</span>				d, nread := transitionFunc[st](c, s[i:])
<a id="L180"></a><span class="ln">   180</span>				i1 := i + nread
<a id="L181"></a><span class="ln">   181</span>				if c.state == stateText || c.state == stateRCDATA {
<a id="L182"></a><span class="ln">   182</span>					<span class="comment">// Emit text up to the start of the tag or comment.</span>
<a id="L183"></a><span class="ln">   183</span>					j := i1
<a id="L184"></a><span class="ln">   184</span>					if d.state != c.state {
<a id="L185"></a><span class="ln">   185</span>						for j1 := j - 1; j1 &gt;= i; j1-- {
<a id="L186"></a><span class="ln">   186</span>							if s[j1] == &#39;&lt;&#39; {
<a id="L187"></a><span class="ln">   187</span>								j = j1
<a id="L188"></a><span class="ln">   188</span>								break
<a id="L189"></a><span class="ln">   189</span>							}
<a id="L190"></a><span class="ln">   190</span>						}
<a id="L191"></a><span class="ln">   191</span>					}
<a id="L192"></a><span class="ln">   192</span>					b.Write(s[i:j])
<a id="L193"></a><span class="ln">   193</span>				} else {
<a id="L194"></a><span class="ln">   194</span>					allText = false
<a id="L195"></a><span class="ln">   195</span>				}
<a id="L196"></a><span class="ln">   196</span>				c, i = d, i1
<a id="L197"></a><span class="ln">   197</span>				continue
<a id="L198"></a><span class="ln">   198</span>			}
<a id="L199"></a><span class="ln">   199</span>			i1 := i + bytes.IndexAny(s[i:], delimEnds[c.delim])
<a id="L200"></a><span class="ln">   200</span>			if i1 &lt; i {
<a id="L201"></a><span class="ln">   201</span>				break
<a id="L202"></a><span class="ln">   202</span>			}
<a id="L203"></a><span class="ln">   203</span>			if c.delim != delimSpaceOrTagEnd {
<a id="L204"></a><span class="ln">   204</span>				<span class="comment">// Consume any quote.</span>
<a id="L205"></a><span class="ln">   205</span>				i1++
<a id="L206"></a><span class="ln">   206</span>			}
<a id="L207"></a><span class="ln">   207</span>			c, i = context{state: stateTag, element: c.element}, i1
<a id="L208"></a><span class="ln">   208</span>		}
<a id="L209"></a><span class="ln">   209</span>		if allText {
<a id="L210"></a><span class="ln">   210</span>			return html
<a id="L211"></a><span class="ln">   211</span>		} else if c.state == stateText || c.state == stateRCDATA {
<a id="L212"></a><span class="ln">   212</span>			b.Write(s[i:])
<a id="L213"></a><span class="ln">   213</span>		}
<a id="L214"></a><span class="ln">   214</span>		return b.String()
<a id="L215"></a><span class="ln">   215</span>	}
<a id="L216"></a><span class="ln">   216</span>	
<a id="L217"></a><span class="ln">   217</span>	<span class="comment">// htmlNameFilter accepts valid parts of an HTML attribute or tag name or</span>
<a id="L218"></a><span class="ln">   218</span>	<span class="comment">// a known-safe HTML attribute.</span>
<a id="L219"></a><span class="ln">   219</span>	func htmlNameFilter(args ...interface{}) string {
<a id="L220"></a><span class="ln">   220</span>		s, t := stringify(args...)
<a id="L221"></a><span class="ln">   221</span>		if t == contentTypeHTMLAttr {
<a id="L222"></a><span class="ln">   222</span>			return s
<a id="L223"></a><span class="ln">   223</span>		}
<a id="L224"></a><span class="ln">   224</span>		if len(s) == 0 {
<a id="L225"></a><span class="ln">   225</span>			<span class="comment">// Avoid violation of structure preservation.</span>
<a id="L226"></a><span class="ln">   226</span>			<span class="comment">// &lt;input checked {{.K}}={{.V}}&gt;.</span>
<a id="L227"></a><span class="ln">   227</span>			<span class="comment">// Without this, if .K is empty then .V is the value of</span>
<a id="L228"></a><span class="ln">   228</span>			<span class="comment">// checked, but otherwise .V is the value of the attribute</span>
<a id="L229"></a><span class="ln">   229</span>			<span class="comment">// named .K.</span>
<a id="L230"></a><span class="ln">   230</span>			return filterFailsafe
<a id="L231"></a><span class="ln">   231</span>		}
<a id="L232"></a><span class="ln">   232</span>		s = strings.ToLower(s)
<a id="L233"></a><span class="ln">   233</span>		if t := attrType(s); t != contentTypePlain {
<a id="L234"></a><span class="ln">   234</span>			<span class="comment">// TODO: Split attr and element name part filters so we can whitelist</span>
<a id="L235"></a><span class="ln">   235</span>			<span class="comment">// attributes.</span>
<a id="L236"></a><span class="ln">   236</span>			return filterFailsafe
<a id="L237"></a><span class="ln">   237</span>		}
<a id="L238"></a><span class="ln">   238</span>		for _, r := range s {
<a id="L239"></a><span class="ln">   239</span>			switch {
<a id="L240"></a><span class="ln">   240</span>			case &#39;0&#39; &lt;= r &amp;&amp; r &lt;= &#39;9&#39;:
<a id="L241"></a><span class="ln">   241</span>			case &#39;a&#39; &lt;= r &amp;&amp; r &lt;= &#39;z&#39;:
<a id="L242"></a><span class="ln">   242</span>			default:
<a id="L243"></a><span class="ln">   243</span>				return filterFailsafe
<a id="L244"></a><span class="ln">   244</span>			}
<a id="L245"></a><span class="ln">   245</span>		}
<a id="L246"></a><span class="ln">   246</span>		return s
<a id="L247"></a><span class="ln">   247</span>	}
<a id="L248"></a><span class="ln">   248</span>	
<a id="L249"></a><span class="ln">   249</span>	<span class="comment">// commentEscaper returns the empty string regardless of input.</span>
<a id="L250"></a><span class="ln">   250</span>	<span class="comment">// Comment content does not correspond to any parsed structure or</span>
<a id="L251"></a><span class="ln">   251</span>	<span class="comment">// human-readable content, so the simplest and most secure policy is to drop</span>
<a id="L252"></a><span class="ln">   252</span>	<span class="comment">// content interpolated into comments.</span>
<a id="L253"></a><span class="ln">   253</span>	<span class="comment">// This approach is equally valid whether or not static comment content is</span>
<a id="L254"></a><span class="ln">   254</span>	<span class="comment">// removed from the template.</span>
<a id="L255"></a><span class="ln">   255</span>	func commentEscaper(args ...interface{}) string {
<a id="L256"></a><span class="ln">   256</span>		return &#34;&#34;
<a id="L257"></a><span class="ln">   257</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

