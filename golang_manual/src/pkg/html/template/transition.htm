<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/html/template/transition.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/html/template/transition.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package template
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bytes&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;strings&#34;
<a id="L10"></a><span class="ln">    10</span>	)
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// transitionFunc is the array of context transition functions for text nodes.</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// A transition function takes a context and template text input, and returns</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// the updated context and the number of bytes consumed from the front of the</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// input.</span>
<a id="L16"></a><span class="ln">    16</span>	var transitionFunc = [...]func(context, []byte) (context, int){
<a id="L17"></a><span class="ln">    17</span>		stateText:        tText,
<a id="L18"></a><span class="ln">    18</span>		stateTag:         tTag,
<a id="L19"></a><span class="ln">    19</span>		stateAttrName:    tAttrName,
<a id="L20"></a><span class="ln">    20</span>		stateAfterName:   tAfterName,
<a id="L21"></a><span class="ln">    21</span>		stateBeforeValue: tBeforeValue,
<a id="L22"></a><span class="ln">    22</span>		stateHTMLCmt:     tHTMLCmt,
<a id="L23"></a><span class="ln">    23</span>		stateRCDATA:      tSpecialTagEnd,
<a id="L24"></a><span class="ln">    24</span>		stateAttr:        tAttr,
<a id="L25"></a><span class="ln">    25</span>		stateURL:         tURL,
<a id="L26"></a><span class="ln">    26</span>		stateJS:          tJS,
<a id="L27"></a><span class="ln">    27</span>		stateJSDqStr:     tJSDelimited,
<a id="L28"></a><span class="ln">    28</span>		stateJSSqStr:     tJSDelimited,
<a id="L29"></a><span class="ln">    29</span>		stateJSRegexp:    tJSDelimited,
<a id="L30"></a><span class="ln">    30</span>		stateJSBlockCmt:  tBlockCmt,
<a id="L31"></a><span class="ln">    31</span>		stateJSLineCmt:   tLineCmt,
<a id="L32"></a><span class="ln">    32</span>		stateCSS:         tCSS,
<a id="L33"></a><span class="ln">    33</span>		stateCSSDqStr:    tCSSStr,
<a id="L34"></a><span class="ln">    34</span>		stateCSSSqStr:    tCSSStr,
<a id="L35"></a><span class="ln">    35</span>		stateCSSDqURL:    tCSSStr,
<a id="L36"></a><span class="ln">    36</span>		stateCSSSqURL:    tCSSStr,
<a id="L37"></a><span class="ln">    37</span>		stateCSSURL:      tCSSStr,
<a id="L38"></a><span class="ln">    38</span>		stateCSSBlockCmt: tBlockCmt,
<a id="L39"></a><span class="ln">    39</span>		stateCSSLineCmt:  tLineCmt,
<a id="L40"></a><span class="ln">    40</span>		stateError:       tError,
<a id="L41"></a><span class="ln">    41</span>	}
<a id="L42"></a><span class="ln">    42</span>	
<a id="L43"></a><span class="ln">    43</span>	var commentStart = []byte(&#34;&lt;!--&#34;)
<a id="L44"></a><span class="ln">    44</span>	var commentEnd = []byte(&#34;--&gt;&#34;)
<a id="L45"></a><span class="ln">    45</span>	
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">// tText is the context transition function for the text state.</span>
<a id="L47"></a><span class="ln">    47</span>	func tText(c context, s []byte) (context, int) {
<a id="L48"></a><span class="ln">    48</span>		k := 0
<a id="L49"></a><span class="ln">    49</span>		for {
<a id="L50"></a><span class="ln">    50</span>			i := k + bytes.IndexByte(s[k:], &#39;&lt;&#39;)
<a id="L51"></a><span class="ln">    51</span>			if i &lt; k || i+1 == len(s) {
<a id="L52"></a><span class="ln">    52</span>				return c, len(s)
<a id="L53"></a><span class="ln">    53</span>			} else if i+4 &lt;= len(s) &amp;&amp; bytes.Equal(commentStart, s[i:i+4]) {
<a id="L54"></a><span class="ln">    54</span>				return context{state: stateHTMLCmt}, i + 4
<a id="L55"></a><span class="ln">    55</span>			}
<a id="L56"></a><span class="ln">    56</span>			i++
<a id="L57"></a><span class="ln">    57</span>			end := false
<a id="L58"></a><span class="ln">    58</span>			if s[i] == &#39;/&#39; {
<a id="L59"></a><span class="ln">    59</span>				if i+1 == len(s) {
<a id="L60"></a><span class="ln">    60</span>					return c, len(s)
<a id="L61"></a><span class="ln">    61</span>				}
<a id="L62"></a><span class="ln">    62</span>				end, i = true, i+1
<a id="L63"></a><span class="ln">    63</span>			}
<a id="L64"></a><span class="ln">    64</span>			j, e := eatTagName(s, i)
<a id="L65"></a><span class="ln">    65</span>			if j != i {
<a id="L66"></a><span class="ln">    66</span>				if end {
<a id="L67"></a><span class="ln">    67</span>					e = elementNone
<a id="L68"></a><span class="ln">    68</span>				}
<a id="L69"></a><span class="ln">    69</span>				<span class="comment">// We&#39;ve found an HTML tag.</span>
<a id="L70"></a><span class="ln">    70</span>				return context{state: stateTag, element: e}, j
<a id="L71"></a><span class="ln">    71</span>			}
<a id="L72"></a><span class="ln">    72</span>			k = j
<a id="L73"></a><span class="ln">    73</span>		}
<a id="L74"></a><span class="ln">    74</span>		panic(&#34;unreachable&#34;)
<a id="L75"></a><span class="ln">    75</span>	}
<a id="L76"></a><span class="ln">    76</span>	
<a id="L77"></a><span class="ln">    77</span>	var elementContentType = [...]state{
<a id="L78"></a><span class="ln">    78</span>		elementNone:     stateText,
<a id="L79"></a><span class="ln">    79</span>		elementScript:   stateJS,
<a id="L80"></a><span class="ln">    80</span>		elementStyle:    stateCSS,
<a id="L81"></a><span class="ln">    81</span>		elementTextarea: stateRCDATA,
<a id="L82"></a><span class="ln">    82</span>		elementTitle:    stateRCDATA,
<a id="L83"></a><span class="ln">    83</span>	}
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">// tTag is the context transition function for the tag state.</span>
<a id="L86"></a><span class="ln">    86</span>	func tTag(c context, s []byte) (context, int) {
<a id="L87"></a><span class="ln">    87</span>		<span class="comment">// Find the attribute name.</span>
<a id="L88"></a><span class="ln">    88</span>		i := eatWhiteSpace(s, 0)
<a id="L89"></a><span class="ln">    89</span>		if i == len(s) {
<a id="L90"></a><span class="ln">    90</span>			return c, len(s)
<a id="L91"></a><span class="ln">    91</span>		}
<a id="L92"></a><span class="ln">    92</span>		if s[i] == &#39;&gt;&#39; {
<a id="L93"></a><span class="ln">    93</span>			return context{
<a id="L94"></a><span class="ln">    94</span>				state:   elementContentType[c.element],
<a id="L95"></a><span class="ln">    95</span>				element: c.element,
<a id="L96"></a><span class="ln">    96</span>			}, i + 1
<a id="L97"></a><span class="ln">    97</span>		}
<a id="L98"></a><span class="ln">    98</span>		j, err := eatAttrName(s, i)
<a id="L99"></a><span class="ln">    99</span>		if err != nil {
<a id="L100"></a><span class="ln">   100</span>			return context{state: stateError, err: err}, len(s)
<a id="L101"></a><span class="ln">   101</span>		}
<a id="L102"></a><span class="ln">   102</span>		state, attr := stateTag, attrNone
<a id="L103"></a><span class="ln">   103</span>		if i == j {
<a id="L104"></a><span class="ln">   104</span>			return context{
<a id="L105"></a><span class="ln">   105</span>				state: stateError,
<a id="L106"></a><span class="ln">   106</span>				err:   errorf(ErrBadHTML, 0, &#34;expected space, attr name, or end of tag, but got %q&#34;, s[i:]),
<a id="L107"></a><span class="ln">   107</span>			}, len(s)
<a id="L108"></a><span class="ln">   108</span>		}
<a id="L109"></a><span class="ln">   109</span>		switch attrType(string(s[i:j])) {
<a id="L110"></a><span class="ln">   110</span>		case contentTypeURL:
<a id="L111"></a><span class="ln">   111</span>			attr = attrURL
<a id="L112"></a><span class="ln">   112</span>		case contentTypeCSS:
<a id="L113"></a><span class="ln">   113</span>			attr = attrStyle
<a id="L114"></a><span class="ln">   114</span>		case contentTypeJS:
<a id="L115"></a><span class="ln">   115</span>			attr = attrScript
<a id="L116"></a><span class="ln">   116</span>		}
<a id="L117"></a><span class="ln">   117</span>		if j == len(s) {
<a id="L118"></a><span class="ln">   118</span>			state = stateAttrName
<a id="L119"></a><span class="ln">   119</span>		} else {
<a id="L120"></a><span class="ln">   120</span>			state = stateAfterName
<a id="L121"></a><span class="ln">   121</span>		}
<a id="L122"></a><span class="ln">   122</span>		return context{state: state, element: c.element, attr: attr}, j
<a id="L123"></a><span class="ln">   123</span>	}
<a id="L124"></a><span class="ln">   124</span>	
<a id="L125"></a><span class="ln">   125</span>	<span class="comment">// tAttrName is the context transition function for stateAttrName.</span>
<a id="L126"></a><span class="ln">   126</span>	func tAttrName(c context, s []byte) (context, int) {
<a id="L127"></a><span class="ln">   127</span>		i, err := eatAttrName(s, 0)
<a id="L128"></a><span class="ln">   128</span>		if err != nil {
<a id="L129"></a><span class="ln">   129</span>			return context{state: stateError, err: err}, len(s)
<a id="L130"></a><span class="ln">   130</span>		} else if i != len(s) {
<a id="L131"></a><span class="ln">   131</span>			c.state = stateAfterName
<a id="L132"></a><span class="ln">   132</span>		}
<a id="L133"></a><span class="ln">   133</span>		return c, i
<a id="L134"></a><span class="ln">   134</span>	}
<a id="L135"></a><span class="ln">   135</span>	
<a id="L136"></a><span class="ln">   136</span>	<span class="comment">// tAfterName is the context transition function for stateAfterName.</span>
<a id="L137"></a><span class="ln">   137</span>	func tAfterName(c context, s []byte) (context, int) {
<a id="L138"></a><span class="ln">   138</span>		<span class="comment">// Look for the start of the value.</span>
<a id="L139"></a><span class="ln">   139</span>		i := eatWhiteSpace(s, 0)
<a id="L140"></a><span class="ln">   140</span>		if i == len(s) {
<a id="L141"></a><span class="ln">   141</span>			return c, len(s)
<a id="L142"></a><span class="ln">   142</span>		} else if s[i] != &#39;=&#39; {
<a id="L143"></a><span class="ln">   143</span>			<span class="comment">// Occurs due to tag ending &#39;&gt;&#39;, and valueless attribute.</span>
<a id="L144"></a><span class="ln">   144</span>			c.state = stateTag
<a id="L145"></a><span class="ln">   145</span>			return c, i
<a id="L146"></a><span class="ln">   146</span>		}
<a id="L147"></a><span class="ln">   147</span>		c.state = stateBeforeValue
<a id="L148"></a><span class="ln">   148</span>		<span class="comment">// Consume the &#34;=&#34;.</span>
<a id="L149"></a><span class="ln">   149</span>		return c, i + 1
<a id="L150"></a><span class="ln">   150</span>	}
<a id="L151"></a><span class="ln">   151</span>	
<a id="L152"></a><span class="ln">   152</span>	var attrStartStates = [...]state{
<a id="L153"></a><span class="ln">   153</span>		attrNone:   stateAttr,
<a id="L154"></a><span class="ln">   154</span>		attrScript: stateJS,
<a id="L155"></a><span class="ln">   155</span>		attrStyle:  stateCSS,
<a id="L156"></a><span class="ln">   156</span>		attrURL:    stateURL,
<a id="L157"></a><span class="ln">   157</span>	}
<a id="L158"></a><span class="ln">   158</span>	
<a id="L159"></a><span class="ln">   159</span>	<span class="comment">// tBeforeValue is the context transition function for stateBeforeValue.</span>
<a id="L160"></a><span class="ln">   160</span>	func tBeforeValue(c context, s []byte) (context, int) {
<a id="L161"></a><span class="ln">   161</span>		i := eatWhiteSpace(s, 0)
<a id="L162"></a><span class="ln">   162</span>		if i == len(s) {
<a id="L163"></a><span class="ln">   163</span>			return c, len(s)
<a id="L164"></a><span class="ln">   164</span>		}
<a id="L165"></a><span class="ln">   165</span>		<span class="comment">// Find the attribute delimiter.</span>
<a id="L166"></a><span class="ln">   166</span>		delim := delimSpaceOrTagEnd
<a id="L167"></a><span class="ln">   167</span>		switch s[i] {
<a id="L168"></a><span class="ln">   168</span>		case &#39;\&#39;&#39;:
<a id="L169"></a><span class="ln">   169</span>			delim, i = delimSingleQuote, i+1
<a id="L170"></a><span class="ln">   170</span>		case &#39;&#34;&#39;:
<a id="L171"></a><span class="ln">   171</span>			delim, i = delimDoubleQuote, i+1
<a id="L172"></a><span class="ln">   172</span>		}
<a id="L173"></a><span class="ln">   173</span>		c.state, c.delim, c.attr = attrStartStates[c.attr], delim, attrNone
<a id="L174"></a><span class="ln">   174</span>		return c, i
<a id="L175"></a><span class="ln">   175</span>	}
<a id="L176"></a><span class="ln">   176</span>	
<a id="L177"></a><span class="ln">   177</span>	<span class="comment">// tHTMLCmt is the context transition function for stateHTMLCmt.</span>
<a id="L178"></a><span class="ln">   178</span>	func tHTMLCmt(c context, s []byte) (context, int) {
<a id="L179"></a><span class="ln">   179</span>		if i := bytes.Index(s, commentEnd); i != -1 {
<a id="L180"></a><span class="ln">   180</span>			return context{}, i + 3
<a id="L181"></a><span class="ln">   181</span>		}
<a id="L182"></a><span class="ln">   182</span>		return c, len(s)
<a id="L183"></a><span class="ln">   183</span>	}
<a id="L184"></a><span class="ln">   184</span>	
<a id="L185"></a><span class="ln">   185</span>	<span class="comment">// specialTagEndMarkers maps element types to the character sequence that</span>
<a id="L186"></a><span class="ln">   186</span>	<span class="comment">// case-insensitively signals the end of the special tag body.</span>
<a id="L187"></a><span class="ln">   187</span>	var specialTagEndMarkers = [...]string{
<a id="L188"></a><span class="ln">   188</span>		elementScript:   &#34;&lt;/script&#34;,
<a id="L189"></a><span class="ln">   189</span>		elementStyle:    &#34;&lt;/style&#34;,
<a id="L190"></a><span class="ln">   190</span>		elementTextarea: &#34;&lt;/textarea&#34;,
<a id="L191"></a><span class="ln">   191</span>		elementTitle:    &#34;&lt;/title&#34;,
<a id="L192"></a><span class="ln">   192</span>	}
<a id="L193"></a><span class="ln">   193</span>	
<a id="L194"></a><span class="ln">   194</span>	<span class="comment">// tSpecialTagEnd is the context transition function for raw text and RCDATA</span>
<a id="L195"></a><span class="ln">   195</span>	<span class="comment">// element states.</span>
<a id="L196"></a><span class="ln">   196</span>	func tSpecialTagEnd(c context, s []byte) (context, int) {
<a id="L197"></a><span class="ln">   197</span>		if c.element != elementNone {
<a id="L198"></a><span class="ln">   198</span>			if i := strings.Index(strings.ToLower(string(s)), specialTagEndMarkers[c.element]); i != -1 {
<a id="L199"></a><span class="ln">   199</span>				return context{}, i
<a id="L200"></a><span class="ln">   200</span>			}
<a id="L201"></a><span class="ln">   201</span>		}
<a id="L202"></a><span class="ln">   202</span>		return c, len(s)
<a id="L203"></a><span class="ln">   203</span>	}
<a id="L204"></a><span class="ln">   204</span>	
<a id="L205"></a><span class="ln">   205</span>	<span class="comment">// tAttr is the context transition function for the attribute state.</span>
<a id="L206"></a><span class="ln">   206</span>	func tAttr(c context, s []byte) (context, int) {
<a id="L207"></a><span class="ln">   207</span>		return c, len(s)
<a id="L208"></a><span class="ln">   208</span>	}
<a id="L209"></a><span class="ln">   209</span>	
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// tURL is the context transition function for the URL state.</span>
<a id="L211"></a><span class="ln">   211</span>	func tURL(c context, s []byte) (context, int) {
<a id="L212"></a><span class="ln">   212</span>		if bytes.IndexAny(s, &#34;#?&#34;) &gt;= 0 {
<a id="L213"></a><span class="ln">   213</span>			c.urlPart = urlPartQueryOrFrag
<a id="L214"></a><span class="ln">   214</span>		} else if len(s) != eatWhiteSpace(s, 0) &amp;&amp; c.urlPart == urlPartNone {
<a id="L215"></a><span class="ln">   215</span>			<span class="comment">// HTML5 uses &#34;Valid URL potentially surrounded by spaces&#34; for</span>
<a id="L216"></a><span class="ln">   216</span>			<span class="comment">// attrs: http://www.w3.org/TR/html5/index.html#attributes-1</span>
<a id="L217"></a><span class="ln">   217</span>			c.urlPart = urlPartPreQuery
<a id="L218"></a><span class="ln">   218</span>		}
<a id="L219"></a><span class="ln">   219</span>		return c, len(s)
<a id="L220"></a><span class="ln">   220</span>	}
<a id="L221"></a><span class="ln">   221</span>	
<a id="L222"></a><span class="ln">   222</span>	<span class="comment">// tJS is the context transition function for the JS state.</span>
<a id="L223"></a><span class="ln">   223</span>	func tJS(c context, s []byte) (context, int) {
<a id="L224"></a><span class="ln">   224</span>		i := bytes.IndexAny(s, `&#34;&#39;/`)
<a id="L225"></a><span class="ln">   225</span>		if i == -1 {
<a id="L226"></a><span class="ln">   226</span>			<span class="comment">// Entire input is non string, comment, regexp tokens.</span>
<a id="L227"></a><span class="ln">   227</span>			c.jsCtx = nextJSCtx(s, c.jsCtx)
<a id="L228"></a><span class="ln">   228</span>			return c, len(s)
<a id="L229"></a><span class="ln">   229</span>		}
<a id="L230"></a><span class="ln">   230</span>		c.jsCtx = nextJSCtx(s[:i], c.jsCtx)
<a id="L231"></a><span class="ln">   231</span>		switch s[i] {
<a id="L232"></a><span class="ln">   232</span>		case &#39;&#34;&#39;:
<a id="L233"></a><span class="ln">   233</span>			c.state, c.jsCtx = stateJSDqStr, jsCtxRegexp
<a id="L234"></a><span class="ln">   234</span>		case &#39;\&#39;&#39;:
<a id="L235"></a><span class="ln">   235</span>			c.state, c.jsCtx = stateJSSqStr, jsCtxRegexp
<a id="L236"></a><span class="ln">   236</span>		case &#39;/&#39;:
<a id="L237"></a><span class="ln">   237</span>			switch {
<a id="L238"></a><span class="ln">   238</span>			case i+1 &lt; len(s) &amp;&amp; s[i+1] == &#39;/&#39;:
<a id="L239"></a><span class="ln">   239</span>				c.state, i = stateJSLineCmt, i+1
<a id="L240"></a><span class="ln">   240</span>			case i+1 &lt; len(s) &amp;&amp; s[i+1] == &#39;*&#39;:
<a id="L241"></a><span class="ln">   241</span>				c.state, i = stateJSBlockCmt, i+1
<a id="L242"></a><span class="ln">   242</span>			case c.jsCtx == jsCtxRegexp:
<a id="L243"></a><span class="ln">   243</span>				c.state = stateJSRegexp
<a id="L244"></a><span class="ln">   244</span>			case c.jsCtx == jsCtxDivOp:
<a id="L245"></a><span class="ln">   245</span>				c.jsCtx = jsCtxRegexp
<a id="L246"></a><span class="ln">   246</span>			default:
<a id="L247"></a><span class="ln">   247</span>				return context{
<a id="L248"></a><span class="ln">   248</span>					state: stateError,
<a id="L249"></a><span class="ln">   249</span>					err:   errorf(ErrSlashAmbig, 0, &#34;&#39;/&#39; could start a division or regexp: %.32q&#34;, s[i:]),
<a id="L250"></a><span class="ln">   250</span>				}, len(s)
<a id="L251"></a><span class="ln">   251</span>			}
<a id="L252"></a><span class="ln">   252</span>		default:
<a id="L253"></a><span class="ln">   253</span>			panic(&#34;unreachable&#34;)
<a id="L254"></a><span class="ln">   254</span>		}
<a id="L255"></a><span class="ln">   255</span>		return c, i + 1
<a id="L256"></a><span class="ln">   256</span>	}
<a id="L257"></a><span class="ln">   257</span>	
<a id="L258"></a><span class="ln">   258</span>	<span class="comment">// tJSDelimited is the context transition function for the JS string and regexp</span>
<a id="L259"></a><span class="ln">   259</span>	<span class="comment">// states.</span>
<a id="L260"></a><span class="ln">   260</span>	func tJSDelimited(c context, s []byte) (context, int) {
<a id="L261"></a><span class="ln">   261</span>		specials := `\&#34;`
<a id="L262"></a><span class="ln">   262</span>		switch c.state {
<a id="L263"></a><span class="ln">   263</span>		case stateJSSqStr:
<a id="L264"></a><span class="ln">   264</span>			specials = `\&#39;`
<a id="L265"></a><span class="ln">   265</span>		case stateJSRegexp:
<a id="L266"></a><span class="ln">   266</span>			specials = `\/[]`
<a id="L267"></a><span class="ln">   267</span>		}
<a id="L268"></a><span class="ln">   268</span>	
<a id="L269"></a><span class="ln">   269</span>		k, inCharset := 0, false
<a id="L270"></a><span class="ln">   270</span>		for {
<a id="L271"></a><span class="ln">   271</span>			i := k + bytes.IndexAny(s[k:], specials)
<a id="L272"></a><span class="ln">   272</span>			if i &lt; k {
<a id="L273"></a><span class="ln">   273</span>				break
<a id="L274"></a><span class="ln">   274</span>			}
<a id="L275"></a><span class="ln">   275</span>			switch s[i] {
<a id="L276"></a><span class="ln">   276</span>			case &#39;\\&#39;:
<a id="L277"></a><span class="ln">   277</span>				i++
<a id="L278"></a><span class="ln">   278</span>				if i == len(s) {
<a id="L279"></a><span class="ln">   279</span>					return context{
<a id="L280"></a><span class="ln">   280</span>						state: stateError,
<a id="L281"></a><span class="ln">   281</span>						err:   errorf(ErrPartialEscape, 0, &#34;unfinished escape sequence in JS string: %q&#34;, s),
<a id="L282"></a><span class="ln">   282</span>					}, len(s)
<a id="L283"></a><span class="ln">   283</span>				}
<a id="L284"></a><span class="ln">   284</span>			case &#39;[&#39;:
<a id="L285"></a><span class="ln">   285</span>				inCharset = true
<a id="L286"></a><span class="ln">   286</span>			case &#39;]&#39;:
<a id="L287"></a><span class="ln">   287</span>				inCharset = false
<a id="L288"></a><span class="ln">   288</span>			default:
<a id="L289"></a><span class="ln">   289</span>				<span class="comment">// end delimiter</span>
<a id="L290"></a><span class="ln">   290</span>				if !inCharset {
<a id="L291"></a><span class="ln">   291</span>					c.state, c.jsCtx = stateJS, jsCtxDivOp
<a id="L292"></a><span class="ln">   292</span>					return c, i + 1
<a id="L293"></a><span class="ln">   293</span>				}
<a id="L294"></a><span class="ln">   294</span>			}
<a id="L295"></a><span class="ln">   295</span>			k = i + 1
<a id="L296"></a><span class="ln">   296</span>		}
<a id="L297"></a><span class="ln">   297</span>	
<a id="L298"></a><span class="ln">   298</span>		if inCharset {
<a id="L299"></a><span class="ln">   299</span>			<span class="comment">// This can be fixed by making context richer if interpolation</span>
<a id="L300"></a><span class="ln">   300</span>			<span class="comment">// into charsets is desired.</span>
<a id="L301"></a><span class="ln">   301</span>			return context{
<a id="L302"></a><span class="ln">   302</span>				state: stateError,
<a id="L303"></a><span class="ln">   303</span>				err:   errorf(ErrPartialCharset, 0, &#34;unfinished JS regexp charset: %q&#34;, s),
<a id="L304"></a><span class="ln">   304</span>			}, len(s)
<a id="L305"></a><span class="ln">   305</span>		}
<a id="L306"></a><span class="ln">   306</span>	
<a id="L307"></a><span class="ln">   307</span>		return c, len(s)
<a id="L308"></a><span class="ln">   308</span>	}
<a id="L309"></a><span class="ln">   309</span>	
<a id="L310"></a><span class="ln">   310</span>	var blockCommentEnd = []byte(&#34;*/&#34;)
<a id="L311"></a><span class="ln">   311</span>	
<a id="L312"></a><span class="ln">   312</span>	<span class="comment">// tBlockCmt is the context transition function for /*comment*/ states.</span>
<a id="L313"></a><span class="ln">   313</span>	func tBlockCmt(c context, s []byte) (context, int) {
<a id="L314"></a><span class="ln">   314</span>		i := bytes.Index(s, blockCommentEnd)
<a id="L315"></a><span class="ln">   315</span>		if i == -1 {
<a id="L316"></a><span class="ln">   316</span>			return c, len(s)
<a id="L317"></a><span class="ln">   317</span>		}
<a id="L318"></a><span class="ln">   318</span>		switch c.state {
<a id="L319"></a><span class="ln">   319</span>		case stateJSBlockCmt:
<a id="L320"></a><span class="ln">   320</span>			c.state = stateJS
<a id="L321"></a><span class="ln">   321</span>		case stateCSSBlockCmt:
<a id="L322"></a><span class="ln">   322</span>			c.state = stateCSS
<a id="L323"></a><span class="ln">   323</span>		default:
<a id="L324"></a><span class="ln">   324</span>			panic(c.state.String())
<a id="L325"></a><span class="ln">   325</span>		}
<a id="L326"></a><span class="ln">   326</span>		return c, i + 2
<a id="L327"></a><span class="ln">   327</span>	}
<a id="L328"></a><span class="ln">   328</span>	
<a id="L329"></a><span class="ln">   329</span>	<span class="comment">// tLineCmt is the context transition function for //comment states.</span>
<a id="L330"></a><span class="ln">   330</span>	func tLineCmt(c context, s []byte) (context, int) {
<a id="L331"></a><span class="ln">   331</span>		var lineTerminators string
<a id="L332"></a><span class="ln">   332</span>		var endState state
<a id="L333"></a><span class="ln">   333</span>		switch c.state {
<a id="L334"></a><span class="ln">   334</span>		case stateJSLineCmt:
<a id="L335"></a><span class="ln">   335</span>			lineTerminators, endState = &#34;\n\r\u2028\u2029&#34;, stateJS
<a id="L336"></a><span class="ln">   336</span>		case stateCSSLineCmt:
<a id="L337"></a><span class="ln">   337</span>			lineTerminators, endState = &#34;\n\f\r&#34;, stateCSS
<a id="L338"></a><span class="ln">   338</span>			<span class="comment">// Line comments are not part of any published CSS standard but</span>
<a id="L339"></a><span class="ln">   339</span>			<span class="comment">// are supported by the 4 major browsers.</span>
<a id="L340"></a><span class="ln">   340</span>			<span class="comment">// This defines line comments as</span>
<a id="L341"></a><span class="ln">   341</span>			<span class="comment">//     LINECOMMENT ::= &#34;//&#34; [^\n\f\d]*</span>
<a id="L342"></a><span class="ln">   342</span>			<span class="comment">// since http://www.w3.org/TR/css3-syntax/#SUBTOK-nl defines</span>
<a id="L343"></a><span class="ln">   343</span>			<span class="comment">// newlines:</span>
<a id="L344"></a><span class="ln">   344</span>			<span class="comment">//     nl ::= #xA | #xD #xA | #xD | #xC</span>
<a id="L345"></a><span class="ln">   345</span>		default:
<a id="L346"></a><span class="ln">   346</span>			panic(c.state.String())
<a id="L347"></a><span class="ln">   347</span>		}
<a id="L348"></a><span class="ln">   348</span>	
<a id="L349"></a><span class="ln">   349</span>		i := bytes.IndexAny(s, lineTerminators)
<a id="L350"></a><span class="ln">   350</span>		if i == -1 {
<a id="L351"></a><span class="ln">   351</span>			return c, len(s)
<a id="L352"></a><span class="ln">   352</span>		}
<a id="L353"></a><span class="ln">   353</span>		c.state = endState
<a id="L354"></a><span class="ln">   354</span>		<span class="comment">// Per section 7.4 of EcmaScript 5 : http://es5.github.com/#x7.4</span>
<a id="L355"></a><span class="ln">   355</span>		<span class="comment">// &#34;However, the LineTerminator at the end of the line is not</span>
<a id="L356"></a><span class="ln">   356</span>		<span class="comment">// considered to be part of the single-line comment; it is</span>
<a id="L357"></a><span class="ln">   357</span>		<span class="comment">// recognized separately by the lexical grammar and becomes part</span>
<a id="L358"></a><span class="ln">   358</span>		<span class="comment">// of the stream of input elements for the syntactic grammar.&#34;</span>
<a id="L359"></a><span class="ln">   359</span>		return c, i
<a id="L360"></a><span class="ln">   360</span>	}
<a id="L361"></a><span class="ln">   361</span>	
<a id="L362"></a><span class="ln">   362</span>	<span class="comment">// tCSS is the context transition function for the CSS state.</span>
<a id="L363"></a><span class="ln">   363</span>	func tCSS(c context, s []byte) (context, int) {
<a id="L364"></a><span class="ln">   364</span>		<span class="comment">// CSS quoted strings are almost never used except for:</span>
<a id="L365"></a><span class="ln">   365</span>		<span class="comment">// (1) URLs as in background: &#34;/foo.png&#34;</span>
<a id="L366"></a><span class="ln">   366</span>		<span class="comment">// (2) Multiword font-names as in font-family: &#34;Times New Roman&#34;</span>
<a id="L367"></a><span class="ln">   367</span>		<span class="comment">// (3) List separators in content values as in inline-lists:</span>
<a id="L368"></a><span class="ln">   368</span>		<span class="comment">//    &lt;style&gt;</span>
<a id="L369"></a><span class="ln">   369</span>		<span class="comment">//    ul.inlineList { list-style: none; padding:0 }</span>
<a id="L370"></a><span class="ln">   370</span>		<span class="comment">//    ul.inlineList &gt; li { display: inline }</span>
<a id="L371"></a><span class="ln">   371</span>		<span class="comment">//    ul.inlineList &gt; li:before { content: &#34;, &#34; }</span>
<a id="L372"></a><span class="ln">   372</span>		<span class="comment">//    ul.inlineList &gt; li:first-child:before { content: &#34;&#34; }</span>
<a id="L373"></a><span class="ln">   373</span>		<span class="comment">//    &lt;/style&gt;</span>
<a id="L374"></a><span class="ln">   374</span>		<span class="comment">//    &lt;ul class=inlineList&gt;&lt;li&gt;One&lt;li&gt;Two&lt;li&gt;Three&lt;/ul&gt;</span>
<a id="L375"></a><span class="ln">   375</span>		<span class="comment">// (4) Attribute value selectors as in a[href=&#34;http://example.com/&#34;]</span>
<a id="L376"></a><span class="ln">   376</span>		<span class="comment">//</span>
<a id="L377"></a><span class="ln">   377</span>		<span class="comment">// We conservatively treat all strings as URLs, but make some</span>
<a id="L378"></a><span class="ln">   378</span>		<span class="comment">// allowances to avoid confusion.</span>
<a id="L379"></a><span class="ln">   379</span>		<span class="comment">//</span>
<a id="L380"></a><span class="ln">   380</span>		<span class="comment">// In (1), our conservative assumption is justified.</span>
<a id="L381"></a><span class="ln">   381</span>		<span class="comment">// In (2), valid font names do not contain &#39;:&#39;, &#39;?&#39;, or &#39;#&#39;, so our</span>
<a id="L382"></a><span class="ln">   382</span>		<span class="comment">// conservative assumption is fine since we will never transition past</span>
<a id="L383"></a><span class="ln">   383</span>		<span class="comment">// urlPartPreQuery.</span>
<a id="L384"></a><span class="ln">   384</span>		<span class="comment">// In (3), our protocol heuristic should not be tripped, and there</span>
<a id="L385"></a><span class="ln">   385</span>		<span class="comment">// should not be non-space content after a &#39;?&#39; or &#39;#&#39;, so as long as</span>
<a id="L386"></a><span class="ln">   386</span>		<span class="comment">// we only %-encode RFC 3986 reserved characters we are ok.</span>
<a id="L387"></a><span class="ln">   387</span>		<span class="comment">// In (4), we should URL escape for URL attributes, and for others we</span>
<a id="L388"></a><span class="ln">   388</span>		<span class="comment">// have the attribute name available if our conservative assumption</span>
<a id="L389"></a><span class="ln">   389</span>		<span class="comment">// proves problematic for real code.</span>
<a id="L390"></a><span class="ln">   390</span>	
<a id="L391"></a><span class="ln">   391</span>		k := 0
<a id="L392"></a><span class="ln">   392</span>		for {
<a id="L393"></a><span class="ln">   393</span>			i := k + bytes.IndexAny(s[k:], `(&#34;&#39;/`)
<a id="L394"></a><span class="ln">   394</span>			if i &lt; k {
<a id="L395"></a><span class="ln">   395</span>				return c, len(s)
<a id="L396"></a><span class="ln">   396</span>			}
<a id="L397"></a><span class="ln">   397</span>			switch s[i] {
<a id="L398"></a><span class="ln">   398</span>			case &#39;(&#39;:
<a id="L399"></a><span class="ln">   399</span>				<span class="comment">// Look for url to the left.</span>
<a id="L400"></a><span class="ln">   400</span>				p := bytes.TrimRight(s[:i], &#34;\t\n\f\r &#34;)
<a id="L401"></a><span class="ln">   401</span>				if endsWithCSSKeyword(p, &#34;url&#34;) {
<a id="L402"></a><span class="ln">   402</span>					j := len(s) - len(bytes.TrimLeft(s[i+1:], &#34;\t\n\f\r &#34;))
<a id="L403"></a><span class="ln">   403</span>					switch {
<a id="L404"></a><span class="ln">   404</span>					case j != len(s) &amp;&amp; s[j] == &#39;&#34;&#39;:
<a id="L405"></a><span class="ln">   405</span>						c.state, j = stateCSSDqURL, j+1
<a id="L406"></a><span class="ln">   406</span>					case j != len(s) &amp;&amp; s[j] == &#39;\&#39;&#39;:
<a id="L407"></a><span class="ln">   407</span>						c.state, j = stateCSSSqURL, j+1
<a id="L408"></a><span class="ln">   408</span>					default:
<a id="L409"></a><span class="ln">   409</span>						c.state = stateCSSURL
<a id="L410"></a><span class="ln">   410</span>					}
<a id="L411"></a><span class="ln">   411</span>					return c, j
<a id="L412"></a><span class="ln">   412</span>				}
<a id="L413"></a><span class="ln">   413</span>			case &#39;/&#39;:
<a id="L414"></a><span class="ln">   414</span>				if i+1 &lt; len(s) {
<a id="L415"></a><span class="ln">   415</span>					switch s[i+1] {
<a id="L416"></a><span class="ln">   416</span>					case &#39;/&#39;:
<a id="L417"></a><span class="ln">   417</span>						c.state = stateCSSLineCmt
<a id="L418"></a><span class="ln">   418</span>						return c, i + 2
<a id="L419"></a><span class="ln">   419</span>					case &#39;*&#39;:
<a id="L420"></a><span class="ln">   420</span>						c.state = stateCSSBlockCmt
<a id="L421"></a><span class="ln">   421</span>						return c, i + 2
<a id="L422"></a><span class="ln">   422</span>					}
<a id="L423"></a><span class="ln">   423</span>				}
<a id="L424"></a><span class="ln">   424</span>			case &#39;&#34;&#39;:
<a id="L425"></a><span class="ln">   425</span>				c.state = stateCSSDqStr
<a id="L426"></a><span class="ln">   426</span>				return c, i + 1
<a id="L427"></a><span class="ln">   427</span>			case &#39;\&#39;&#39;:
<a id="L428"></a><span class="ln">   428</span>				c.state = stateCSSSqStr
<a id="L429"></a><span class="ln">   429</span>				return c, i + 1
<a id="L430"></a><span class="ln">   430</span>			}
<a id="L431"></a><span class="ln">   431</span>			k = i + 1
<a id="L432"></a><span class="ln">   432</span>		}
<a id="L433"></a><span class="ln">   433</span>		panic(&#34;unreachable&#34;)
<a id="L434"></a><span class="ln">   434</span>	}
<a id="L435"></a><span class="ln">   435</span>	
<a id="L436"></a><span class="ln">   436</span>	<span class="comment">// tCSSStr is the context transition function for the CSS string and URL states.</span>
<a id="L437"></a><span class="ln">   437</span>	func tCSSStr(c context, s []byte) (context, int) {
<a id="L438"></a><span class="ln">   438</span>		var endAndEsc string
<a id="L439"></a><span class="ln">   439</span>		switch c.state {
<a id="L440"></a><span class="ln">   440</span>		case stateCSSDqStr, stateCSSDqURL:
<a id="L441"></a><span class="ln">   441</span>			endAndEsc = `\&#34;`
<a id="L442"></a><span class="ln">   442</span>		case stateCSSSqStr, stateCSSSqURL:
<a id="L443"></a><span class="ln">   443</span>			endAndEsc = `\&#39;`
<a id="L444"></a><span class="ln">   444</span>		case stateCSSURL:
<a id="L445"></a><span class="ln">   445</span>			<span class="comment">// Unquoted URLs end with a newline or close parenthesis.</span>
<a id="L446"></a><span class="ln">   446</span>			<span class="comment">// The below includes the wc (whitespace character) and nl.</span>
<a id="L447"></a><span class="ln">   447</span>			endAndEsc = &#34;\\\t\n\f\r )&#34;
<a id="L448"></a><span class="ln">   448</span>		default:
<a id="L449"></a><span class="ln">   449</span>			panic(c.state.String())
<a id="L450"></a><span class="ln">   450</span>		}
<a id="L451"></a><span class="ln">   451</span>	
<a id="L452"></a><span class="ln">   452</span>		k := 0
<a id="L453"></a><span class="ln">   453</span>		for {
<a id="L454"></a><span class="ln">   454</span>			i := k + bytes.IndexAny(s[k:], endAndEsc)
<a id="L455"></a><span class="ln">   455</span>			if i &lt; k {
<a id="L456"></a><span class="ln">   456</span>				c, nread := tURL(c, decodeCSS(s[k:]))
<a id="L457"></a><span class="ln">   457</span>				return c, k + nread
<a id="L458"></a><span class="ln">   458</span>			}
<a id="L459"></a><span class="ln">   459</span>			if s[i] == &#39;\\&#39; {
<a id="L460"></a><span class="ln">   460</span>				i++
<a id="L461"></a><span class="ln">   461</span>				if i == len(s) {
<a id="L462"></a><span class="ln">   462</span>					return context{
<a id="L463"></a><span class="ln">   463</span>						state: stateError,
<a id="L464"></a><span class="ln">   464</span>						err:   errorf(ErrPartialEscape, 0, &#34;unfinished escape sequence in CSS string: %q&#34;, s),
<a id="L465"></a><span class="ln">   465</span>					}, len(s)
<a id="L466"></a><span class="ln">   466</span>				}
<a id="L467"></a><span class="ln">   467</span>			} else {
<a id="L468"></a><span class="ln">   468</span>				c.state = stateCSS
<a id="L469"></a><span class="ln">   469</span>				return c, i + 1
<a id="L470"></a><span class="ln">   470</span>			}
<a id="L471"></a><span class="ln">   471</span>			c, _ = tURL(c, decodeCSS(s[:i+1]))
<a id="L472"></a><span class="ln">   472</span>			k = i + 1
<a id="L473"></a><span class="ln">   473</span>		}
<a id="L474"></a><span class="ln">   474</span>		panic(&#34;unreachable&#34;)
<a id="L475"></a><span class="ln">   475</span>	}
<a id="L476"></a><span class="ln">   476</span>	
<a id="L477"></a><span class="ln">   477</span>	<span class="comment">// tError is the context transition function for the error state.</span>
<a id="L478"></a><span class="ln">   478</span>	func tError(c context, s []byte) (context, int) {
<a id="L479"></a><span class="ln">   479</span>		return c, len(s)
<a id="L480"></a><span class="ln">   480</span>	}
<a id="L481"></a><span class="ln">   481</span>	
<a id="L482"></a><span class="ln">   482</span>	<span class="comment">// eatAttrName returns the largest j such that s[i:j] is an attribute name.</span>
<a id="L483"></a><span class="ln">   483</span>	<span class="comment">// It returns an error if s[i:] does not look like it begins with an</span>
<a id="L484"></a><span class="ln">   484</span>	<span class="comment">// attribute name, such as encountering a quote mark without a preceding</span>
<a id="L485"></a><span class="ln">   485</span>	<span class="comment">// equals sign.</span>
<a id="L486"></a><span class="ln">   486</span>	func eatAttrName(s []byte, i int) (int, *Error) {
<a id="L487"></a><span class="ln">   487</span>		for j := i; j &lt; len(s); j++ {
<a id="L488"></a><span class="ln">   488</span>			switch s[j] {
<a id="L489"></a><span class="ln">   489</span>			case &#39; &#39;, &#39;\t&#39;, &#39;\n&#39;, &#39;\f&#39;, &#39;\r&#39;, &#39;=&#39;, &#39;&gt;&#39;:
<a id="L490"></a><span class="ln">   490</span>				return j, nil
<a id="L491"></a><span class="ln">   491</span>			case &#39;\&#39;&#39;, &#39;&#34;&#39;, &#39;&lt;&#39;:
<a id="L492"></a><span class="ln">   492</span>				<span class="comment">// These result in a parse warning in HTML5 and are</span>
<a id="L493"></a><span class="ln">   493</span>				<span class="comment">// indicative of serious problems if seen in an attr</span>
<a id="L494"></a><span class="ln">   494</span>				<span class="comment">// name in a template.</span>
<a id="L495"></a><span class="ln">   495</span>				return -1, errorf(ErrBadHTML, 0, &#34;%q in attribute name: %.32q&#34;, s[j:j+1], s)
<a id="L496"></a><span class="ln">   496</span>			default:
<a id="L497"></a><span class="ln">   497</span>				<span class="comment">// No-op.</span>
<a id="L498"></a><span class="ln">   498</span>			}
<a id="L499"></a><span class="ln">   499</span>		}
<a id="L500"></a><span class="ln">   500</span>		return len(s), nil
<a id="L501"></a><span class="ln">   501</span>	}
<a id="L502"></a><span class="ln">   502</span>	
<a id="L503"></a><span class="ln">   503</span>	var elementNameMap = map[string]element{
<a id="L504"></a><span class="ln">   504</span>		&#34;script&#34;:   elementScript,
<a id="L505"></a><span class="ln">   505</span>		&#34;style&#34;:    elementStyle,
<a id="L506"></a><span class="ln">   506</span>		&#34;textarea&#34;: elementTextarea,
<a id="L507"></a><span class="ln">   507</span>		&#34;title&#34;:    elementTitle,
<a id="L508"></a><span class="ln">   508</span>	}
<a id="L509"></a><span class="ln">   509</span>	
<a id="L510"></a><span class="ln">   510</span>	<span class="comment">// asciiAlpha returns whether c is an ASCII letter.</span>
<a id="L511"></a><span class="ln">   511</span>	func asciiAlpha(c byte) bool {
<a id="L512"></a><span class="ln">   512</span>		return &#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39; || &#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39;
<a id="L513"></a><span class="ln">   513</span>	}
<a id="L514"></a><span class="ln">   514</span>	
<a id="L515"></a><span class="ln">   515</span>	<span class="comment">// asciiAlphaNum returns whether c is an ASCII letter or digit.</span>
<a id="L516"></a><span class="ln">   516</span>	func asciiAlphaNum(c byte) bool {
<a id="L517"></a><span class="ln">   517</span>		return asciiAlpha(c) || &#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39;
<a id="L518"></a><span class="ln">   518</span>	}
<a id="L519"></a><span class="ln">   519</span>	
<a id="L520"></a><span class="ln">   520</span>	<span class="comment">// eatTagName returns the largest j such that s[i:j] is a tag name and the tag type.</span>
<a id="L521"></a><span class="ln">   521</span>	func eatTagName(s []byte, i int) (int, element) {
<a id="L522"></a><span class="ln">   522</span>		if i == len(s) || !asciiAlpha(s[i]) {
<a id="L523"></a><span class="ln">   523</span>			return i, elementNone
<a id="L524"></a><span class="ln">   524</span>		}
<a id="L525"></a><span class="ln">   525</span>		j := i + 1
<a id="L526"></a><span class="ln">   526</span>		for j &lt; len(s) {
<a id="L527"></a><span class="ln">   527</span>			x := s[j]
<a id="L528"></a><span class="ln">   528</span>			if asciiAlphaNum(x) {
<a id="L529"></a><span class="ln">   529</span>				j++
<a id="L530"></a><span class="ln">   530</span>				continue
<a id="L531"></a><span class="ln">   531</span>			}
<a id="L532"></a><span class="ln">   532</span>			<span class="comment">// Allow &#34;x-y&#34; or &#34;x:y&#34; but not &#34;x-&#34;, &#34;-y&#34;, or &#34;x--y&#34;.</span>
<a id="L533"></a><span class="ln">   533</span>			if (x == &#39;:&#39; || x == &#39;-&#39;) &amp;&amp; j+1 &lt; len(s) &amp;&amp; asciiAlphaNum(s[j+1]) {
<a id="L534"></a><span class="ln">   534</span>				j += 2
<a id="L535"></a><span class="ln">   535</span>				continue
<a id="L536"></a><span class="ln">   536</span>			}
<a id="L537"></a><span class="ln">   537</span>			break
<a id="L538"></a><span class="ln">   538</span>		}
<a id="L539"></a><span class="ln">   539</span>		return j, elementNameMap[strings.ToLower(string(s[i:j]))]
<a id="L540"></a><span class="ln">   540</span>	}
<a id="L541"></a><span class="ln">   541</span>	
<a id="L542"></a><span class="ln">   542</span>	<span class="comment">// eatWhiteSpace returns the largest j such that s[i:j] is white space.</span>
<a id="L543"></a><span class="ln">   543</span>	func eatWhiteSpace(s []byte, i int) int {
<a id="L544"></a><span class="ln">   544</span>		for j := i; j &lt; len(s); j++ {
<a id="L545"></a><span class="ln">   545</span>			switch s[j] {
<a id="L546"></a><span class="ln">   546</span>			case &#39; &#39;, &#39;\t&#39;, &#39;\n&#39;, &#39;\f&#39;, &#39;\r&#39;:
<a id="L547"></a><span class="ln">   547</span>				<span class="comment">// No-op.</span>
<a id="L548"></a><span class="ln">   548</span>			default:
<a id="L549"></a><span class="ln">   549</span>				return j
<a id="L550"></a><span class="ln">   550</span>			}
<a id="L551"></a><span class="ln">   551</span>		}
<a id="L552"></a><span class="ln">   552</span>		return len(s)
<a id="L553"></a><span class="ln">   553</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

