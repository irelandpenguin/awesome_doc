<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/path/filepath/path.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/path/filepath/path.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package filepath implements utility routines for manipulating filename paths</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// in a way compatible with the target operating system-defined file paths.</span>
<a id="L7"></a><span class="ln">     7</span>	package filepath
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;errors&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;os&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;sort&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;strings&#34;
<a id="L14"></a><span class="ln">    14</span>	)
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	const (
<a id="L17"></a><span class="ln">    17</span>		Separator     = os.PathSeparator
<a id="L18"></a><span class="ln">    18</span>		ListSeparator = os.PathListSeparator
<a id="L19"></a><span class="ln">    19</span>	)
<a id="L20"></a><span class="ln">    20</span>	
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// Clean returns the shortest path name equivalent to path</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// by purely lexical processing.  It applies the following rules</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// iteratively until no further processing can be done:</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">//	1. Replace multiple Separator elements with a single one.</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">//	2. Eliminate each . path name element (the current directory).</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">//	3. Eliminate each inner .. path name element (the parent directory)</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">//	   along with the non-.. element that precedes it.</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">//	4. Eliminate .. elements that begin a rooted path:</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">//	   that is, replace &#34;/..&#34; by &#34;/&#34; at the beginning of a path,</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">//         assuming Separator is &#39;/&#39;.</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">//</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// The returned path ends in a slash only if it represents a root directory,</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// such as &#34;/&#34; on Unix or `C:\` on Windows.</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// If the result of this process is an empty string, Clean</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// returns the string &#34;.&#34;.</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// See also Rob Pike, ``Lexical File Names in Plan 9 or</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// Getting Dot-Dot Right,&#39;&#39;</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// http://plan9.bell-labs.com/sys/doc/lexnames.html</span>
<a id="L42"></a><span class="ln">    42</span>	func Clean(path string) string {
<a id="L43"></a><span class="ln">    43</span>		vol := VolumeName(path)
<a id="L44"></a><span class="ln">    44</span>		path = path[len(vol):]
<a id="L45"></a><span class="ln">    45</span>		if path == &#34;&#34; {
<a id="L46"></a><span class="ln">    46</span>			if len(vol) &gt; 1 &amp;&amp; vol[1] != &#39;:&#39; {
<a id="L47"></a><span class="ln">    47</span>				<span class="comment">// should be UNC</span>
<a id="L48"></a><span class="ln">    48</span>				return FromSlash(vol)
<a id="L49"></a><span class="ln">    49</span>			}
<a id="L50"></a><span class="ln">    50</span>			return vol + &#34;.&#34;
<a id="L51"></a><span class="ln">    51</span>		}
<a id="L52"></a><span class="ln">    52</span>		rooted := os.IsPathSeparator(path[0])
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>		<span class="comment">// Invariants:</span>
<a id="L55"></a><span class="ln">    55</span>		<span class="comment">//	reading from path; r is index of next byte to process.</span>
<a id="L56"></a><span class="ln">    56</span>		<span class="comment">//	writing to buf; w is index of next byte to write.</span>
<a id="L57"></a><span class="ln">    57</span>		<span class="comment">//	dotdot is index in buf where .. must stop, either because</span>
<a id="L58"></a><span class="ln">    58</span>		<span class="comment">//		it is the leading slash or it is a leading ../../.. prefix.</span>
<a id="L59"></a><span class="ln">    59</span>		n := len(path)
<a id="L60"></a><span class="ln">    60</span>		buf := []byte(path)
<a id="L61"></a><span class="ln">    61</span>		r, w, dotdot := 0, 0, 0
<a id="L62"></a><span class="ln">    62</span>		if rooted {
<a id="L63"></a><span class="ln">    63</span>			buf[0] = Separator
<a id="L64"></a><span class="ln">    64</span>			r, w, dotdot = 1, 1, 1
<a id="L65"></a><span class="ln">    65</span>		}
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>		for r &lt; n {
<a id="L68"></a><span class="ln">    68</span>			switch {
<a id="L69"></a><span class="ln">    69</span>			case os.IsPathSeparator(path[r]):
<a id="L70"></a><span class="ln">    70</span>				<span class="comment">// empty path element</span>
<a id="L71"></a><span class="ln">    71</span>				r++
<a id="L72"></a><span class="ln">    72</span>			case path[r] == &#39;.&#39; &amp;&amp; (r+1 == n || os.IsPathSeparator(path[r+1])):
<a id="L73"></a><span class="ln">    73</span>				<span class="comment">// . element</span>
<a id="L74"></a><span class="ln">    74</span>				r++
<a id="L75"></a><span class="ln">    75</span>			case path[r] == &#39;.&#39; &amp;&amp; path[r+1] == &#39;.&#39; &amp;&amp; (r+2 == n || os.IsPathSeparator(path[r+2])):
<a id="L76"></a><span class="ln">    76</span>				<span class="comment">// .. element: remove to last separator</span>
<a id="L77"></a><span class="ln">    77</span>				r += 2
<a id="L78"></a><span class="ln">    78</span>				switch {
<a id="L79"></a><span class="ln">    79</span>				case w &gt; dotdot:
<a id="L80"></a><span class="ln">    80</span>					<span class="comment">// can backtrack</span>
<a id="L81"></a><span class="ln">    81</span>					w--
<a id="L82"></a><span class="ln">    82</span>					for w &gt; dotdot &amp;&amp; !os.IsPathSeparator(buf[w]) {
<a id="L83"></a><span class="ln">    83</span>						w--
<a id="L84"></a><span class="ln">    84</span>					}
<a id="L85"></a><span class="ln">    85</span>				case !rooted:
<a id="L86"></a><span class="ln">    86</span>					<span class="comment">// cannot backtrack, but not rooted, so append .. element.</span>
<a id="L87"></a><span class="ln">    87</span>					if w &gt; 0 {
<a id="L88"></a><span class="ln">    88</span>						buf[w] = Separator
<a id="L89"></a><span class="ln">    89</span>						w++
<a id="L90"></a><span class="ln">    90</span>					}
<a id="L91"></a><span class="ln">    91</span>					buf[w] = &#39;.&#39;
<a id="L92"></a><span class="ln">    92</span>					w++
<a id="L93"></a><span class="ln">    93</span>					buf[w] = &#39;.&#39;
<a id="L94"></a><span class="ln">    94</span>					w++
<a id="L95"></a><span class="ln">    95</span>					dotdot = w
<a id="L96"></a><span class="ln">    96</span>				}
<a id="L97"></a><span class="ln">    97</span>			default:
<a id="L98"></a><span class="ln">    98</span>				<span class="comment">// real path element.</span>
<a id="L99"></a><span class="ln">    99</span>				<span class="comment">// add slash if needed</span>
<a id="L100"></a><span class="ln">   100</span>				if rooted &amp;&amp; w != 1 || !rooted &amp;&amp; w != 0 {
<a id="L101"></a><span class="ln">   101</span>					buf[w] = Separator
<a id="L102"></a><span class="ln">   102</span>					w++
<a id="L103"></a><span class="ln">   103</span>				}
<a id="L104"></a><span class="ln">   104</span>				<span class="comment">// copy element</span>
<a id="L105"></a><span class="ln">   105</span>				for ; r &lt; n &amp;&amp; !os.IsPathSeparator(path[r]); r++ {
<a id="L106"></a><span class="ln">   106</span>					buf[w] = path[r]
<a id="L107"></a><span class="ln">   107</span>					w++
<a id="L108"></a><span class="ln">   108</span>				}
<a id="L109"></a><span class="ln">   109</span>			}
<a id="L110"></a><span class="ln">   110</span>		}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>		<span class="comment">// Turn empty string into &#34;.&#34;</span>
<a id="L113"></a><span class="ln">   113</span>		if w == 0 {
<a id="L114"></a><span class="ln">   114</span>			buf[w] = &#39;.&#39;
<a id="L115"></a><span class="ln">   115</span>			w++
<a id="L116"></a><span class="ln">   116</span>		}
<a id="L117"></a><span class="ln">   117</span>	
<a id="L118"></a><span class="ln">   118</span>		return FromSlash(vol + string(buf[0:w]))
<a id="L119"></a><span class="ln">   119</span>	}
<a id="L120"></a><span class="ln">   120</span>	
<a id="L121"></a><span class="ln">   121</span>	<span class="comment">// ToSlash returns the result of replacing each separator character</span>
<a id="L122"></a><span class="ln">   122</span>	<span class="comment">// in path with a slash (&#39;/&#39;) character. Multiple separators are</span>
<a id="L123"></a><span class="ln">   123</span>	<span class="comment">// replaced by multiple slashes.</span>
<a id="L124"></a><span class="ln">   124</span>	func ToSlash(path string) string {
<a id="L125"></a><span class="ln">   125</span>		if Separator == &#39;/&#39; {
<a id="L126"></a><span class="ln">   126</span>			return path
<a id="L127"></a><span class="ln">   127</span>		}
<a id="L128"></a><span class="ln">   128</span>		return strings.Replace(path, string(Separator), &#34;/&#34;, -1)
<a id="L129"></a><span class="ln">   129</span>	}
<a id="L130"></a><span class="ln">   130</span>	
<a id="L131"></a><span class="ln">   131</span>	<span class="comment">// FromSlash returns the result of replacing each slash (&#39;/&#39;) character</span>
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">// in path with a separator character. Multiple slashes are replaced</span>
<a id="L133"></a><span class="ln">   133</span>	<span class="comment">// by multiple separators.</span>
<a id="L134"></a><span class="ln">   134</span>	func FromSlash(path string) string {
<a id="L135"></a><span class="ln">   135</span>		if Separator == &#39;/&#39; {
<a id="L136"></a><span class="ln">   136</span>			return path
<a id="L137"></a><span class="ln">   137</span>		}
<a id="L138"></a><span class="ln">   138</span>		return strings.Replace(path, &#34;/&#34;, string(Separator), -1)
<a id="L139"></a><span class="ln">   139</span>	}
<a id="L140"></a><span class="ln">   140</span>	
<a id="L141"></a><span class="ln">   141</span>	<span class="comment">// SplitList splits a list of paths joined by the OS-specific ListSeparator,</span>
<a id="L142"></a><span class="ln">   142</span>	<span class="comment">// usually found in PATH or GOPATH environment variables.</span>
<a id="L143"></a><span class="ln">   143</span>	<span class="comment">// Unlike strings.Split, SplitList returns an empty slice when passed an empty string.</span>
<a id="L144"></a><span class="ln">   144</span>	func SplitList(path string) []string {
<a id="L145"></a><span class="ln">   145</span>		if path == &#34;&#34; {
<a id="L146"></a><span class="ln">   146</span>			return []string{}
<a id="L147"></a><span class="ln">   147</span>		}
<a id="L148"></a><span class="ln">   148</span>		return strings.Split(path, string(ListSeparator))
<a id="L149"></a><span class="ln">   149</span>	}
<a id="L150"></a><span class="ln">   150</span>	
<a id="L151"></a><span class="ln">   151</span>	<span class="comment">// Split splits path immediately following the final Separator,</span>
<a id="L152"></a><span class="ln">   152</span>	<span class="comment">// separating it into a directory and file name component.</span>
<a id="L153"></a><span class="ln">   153</span>	<span class="comment">// If there is no Separator in path, Split returns an empty dir</span>
<a id="L154"></a><span class="ln">   154</span>	<span class="comment">// and file set to path.</span>
<a id="L155"></a><span class="ln">   155</span>	<span class="comment">// The returned values have the property that path = dir+file.</span>
<a id="L156"></a><span class="ln">   156</span>	func Split(path string) (dir, file string) {
<a id="L157"></a><span class="ln">   157</span>		vol := VolumeName(path)
<a id="L158"></a><span class="ln">   158</span>		i := len(path) - 1
<a id="L159"></a><span class="ln">   159</span>		for i &gt;= len(vol) &amp;&amp; !os.IsPathSeparator(path[i]) {
<a id="L160"></a><span class="ln">   160</span>			i--
<a id="L161"></a><span class="ln">   161</span>		}
<a id="L162"></a><span class="ln">   162</span>		return path[:i+1], path[i+1:]
<a id="L163"></a><span class="ln">   163</span>	}
<a id="L164"></a><span class="ln">   164</span>	
<a id="L165"></a><span class="ln">   165</span>	<span class="comment">// Join joins any number of path elements into a single path, adding</span>
<a id="L166"></a><span class="ln">   166</span>	<span class="comment">// a Separator if necessary. The result is Cleaned, in particular</span>
<a id="L167"></a><span class="ln">   167</span>	<span class="comment">// all empty strings are ignored.</span>
<a id="L168"></a><span class="ln">   168</span>	func Join(elem ...string) string {
<a id="L169"></a><span class="ln">   169</span>		for i, e := range elem {
<a id="L170"></a><span class="ln">   170</span>			if e != &#34;&#34; {
<a id="L171"></a><span class="ln">   171</span>				return Clean(strings.Join(elem[i:], string(Separator)))
<a id="L172"></a><span class="ln">   172</span>			}
<a id="L173"></a><span class="ln">   173</span>		}
<a id="L174"></a><span class="ln">   174</span>		return &#34;&#34;
<a id="L175"></a><span class="ln">   175</span>	}
<a id="L176"></a><span class="ln">   176</span>	
<a id="L177"></a><span class="ln">   177</span>	<span class="comment">// Ext returns the file name extension used by path.</span>
<a id="L178"></a><span class="ln">   178</span>	<span class="comment">// The extension is the suffix beginning at the final dot</span>
<a id="L179"></a><span class="ln">   179</span>	<span class="comment">// in the final element of path; it is empty if there is</span>
<a id="L180"></a><span class="ln">   180</span>	<span class="comment">// no dot.</span>
<a id="L181"></a><span class="ln">   181</span>	func Ext(path string) string {
<a id="L182"></a><span class="ln">   182</span>		for i := len(path) - 1; i &gt;= 0 &amp;&amp; !os.IsPathSeparator(path[i]); i-- {
<a id="L183"></a><span class="ln">   183</span>			if path[i] == &#39;.&#39; {
<a id="L184"></a><span class="ln">   184</span>				return path[i:]
<a id="L185"></a><span class="ln">   185</span>			}
<a id="L186"></a><span class="ln">   186</span>		}
<a id="L187"></a><span class="ln">   187</span>		return &#34;&#34;
<a id="L188"></a><span class="ln">   188</span>	}
<a id="L189"></a><span class="ln">   189</span>	
<a id="L190"></a><span class="ln">   190</span>	<span class="comment">// EvalSymlinks returns the path name after the evaluation of any symbolic</span>
<a id="L191"></a><span class="ln">   191</span>	<span class="comment">// links.</span>
<a id="L192"></a><span class="ln">   192</span>	<span class="comment">// If path is relative the result will be relative to the current directory,</span>
<a id="L193"></a><span class="ln">   193</span>	<span class="comment">// unless one of the components is an absolute symbolic link.</span>
<a id="L194"></a><span class="ln">   194</span>	func EvalSymlinks(path string) (string, error) {
<a id="L195"></a><span class="ln">   195</span>		return evalSymlinks(path)
<a id="L196"></a><span class="ln">   196</span>	}
<a id="L197"></a><span class="ln">   197</span>	
<a id="L198"></a><span class="ln">   198</span>	<span class="comment">// Abs returns an absolute representation of path.</span>
<a id="L199"></a><span class="ln">   199</span>	<span class="comment">// If the path is not absolute it will be joined with the current</span>
<a id="L200"></a><span class="ln">   200</span>	<span class="comment">// working directory to turn it into an absolute path.  The absolute</span>
<a id="L201"></a><span class="ln">   201</span>	<span class="comment">// path name for a given file is not guaranteed to be unique.</span>
<a id="L202"></a><span class="ln">   202</span>	func Abs(path string) (string, error) {
<a id="L203"></a><span class="ln">   203</span>		if IsAbs(path) {
<a id="L204"></a><span class="ln">   204</span>			return Clean(path), nil
<a id="L205"></a><span class="ln">   205</span>		}
<a id="L206"></a><span class="ln">   206</span>		wd, err := os.Getwd()
<a id="L207"></a><span class="ln">   207</span>		if err != nil {
<a id="L208"></a><span class="ln">   208</span>			return &#34;&#34;, err
<a id="L209"></a><span class="ln">   209</span>		}
<a id="L210"></a><span class="ln">   210</span>		return Join(wd, path), nil
<a id="L211"></a><span class="ln">   211</span>	}
<a id="L212"></a><span class="ln">   212</span>	
<a id="L213"></a><span class="ln">   213</span>	<span class="comment">// Rel returns a relative path that is lexically equivalent to targpath when</span>
<a id="L214"></a><span class="ln">   214</span>	<span class="comment">// joined to basepath with an intervening separator. That is,</span>
<a id="L215"></a><span class="ln">   215</span>	<span class="comment">// Join(basepath, Rel(basepath, targpath)) is equivalent to targpath itself.</span>
<a id="L216"></a><span class="ln">   216</span>	<span class="comment">// On success, the returned path will always be relative to basepath,</span>
<a id="L217"></a><span class="ln">   217</span>	<span class="comment">// even if basepath and targpath share no elements.</span>
<a id="L218"></a><span class="ln">   218</span>	<span class="comment">// An error is returned if targpath can&#39;t be made relative to basepath or if</span>
<a id="L219"></a><span class="ln">   219</span>	<span class="comment">// knowing the current working directory would be necessary to compute it.</span>
<a id="L220"></a><span class="ln">   220</span>	func Rel(basepath, targpath string) (string, error) {
<a id="L221"></a><span class="ln">   221</span>		baseVol := VolumeName(basepath)
<a id="L222"></a><span class="ln">   222</span>		targVol := VolumeName(targpath)
<a id="L223"></a><span class="ln">   223</span>		base := Clean(basepath)
<a id="L224"></a><span class="ln">   224</span>		targ := Clean(targpath)
<a id="L225"></a><span class="ln">   225</span>		if targ == base {
<a id="L226"></a><span class="ln">   226</span>			return &#34;.&#34;, nil
<a id="L227"></a><span class="ln">   227</span>		}
<a id="L228"></a><span class="ln">   228</span>		base = base[len(baseVol):]
<a id="L229"></a><span class="ln">   229</span>		targ = targ[len(targVol):]
<a id="L230"></a><span class="ln">   230</span>		if base == &#34;.&#34; {
<a id="L231"></a><span class="ln">   231</span>			base = &#34;&#34;
<a id="L232"></a><span class="ln">   232</span>		}
<a id="L233"></a><span class="ln">   233</span>		<span class="comment">// Can&#39;t use IsAbs - `\a` and `a` are both relative in Windows.</span>
<a id="L234"></a><span class="ln">   234</span>		baseSlashed := len(base) &gt; 0 &amp;&amp; base[0] == Separator
<a id="L235"></a><span class="ln">   235</span>		targSlashed := len(targ) &gt; 0 &amp;&amp; targ[0] == Separator
<a id="L236"></a><span class="ln">   236</span>		if baseSlashed != targSlashed || baseVol != targVol {
<a id="L237"></a><span class="ln">   237</span>			return &#34;&#34;, errors.New(&#34;Rel: can&#39;t make &#34; + targ + &#34; relative to &#34; + base)
<a id="L238"></a><span class="ln">   238</span>		}
<a id="L239"></a><span class="ln">   239</span>		<span class="comment">// Position base[b0:bi] and targ[t0:ti] at the first differing elements.</span>
<a id="L240"></a><span class="ln">   240</span>		bl := len(base)
<a id="L241"></a><span class="ln">   241</span>		tl := len(targ)
<a id="L242"></a><span class="ln">   242</span>		var b0, bi, t0, ti int
<a id="L243"></a><span class="ln">   243</span>		for {
<a id="L244"></a><span class="ln">   244</span>			for bi &lt; bl &amp;&amp; base[bi] != Separator {
<a id="L245"></a><span class="ln">   245</span>				bi++
<a id="L246"></a><span class="ln">   246</span>			}
<a id="L247"></a><span class="ln">   247</span>			for ti &lt; tl &amp;&amp; targ[ti] != Separator {
<a id="L248"></a><span class="ln">   248</span>				ti++
<a id="L249"></a><span class="ln">   249</span>			}
<a id="L250"></a><span class="ln">   250</span>			if targ[t0:ti] != base[b0:bi] {
<a id="L251"></a><span class="ln">   251</span>				break
<a id="L252"></a><span class="ln">   252</span>			}
<a id="L253"></a><span class="ln">   253</span>			if bi &lt; bl {
<a id="L254"></a><span class="ln">   254</span>				bi++
<a id="L255"></a><span class="ln">   255</span>			}
<a id="L256"></a><span class="ln">   256</span>			if ti &lt; tl {
<a id="L257"></a><span class="ln">   257</span>				ti++
<a id="L258"></a><span class="ln">   258</span>			}
<a id="L259"></a><span class="ln">   259</span>			b0 = bi
<a id="L260"></a><span class="ln">   260</span>			t0 = ti
<a id="L261"></a><span class="ln">   261</span>		}
<a id="L262"></a><span class="ln">   262</span>		if base[b0:bi] == &#34;..&#34; {
<a id="L263"></a><span class="ln">   263</span>			return &#34;&#34;, errors.New(&#34;Rel: can&#39;t make &#34; + targ + &#34; relative to &#34; + base)
<a id="L264"></a><span class="ln">   264</span>		}
<a id="L265"></a><span class="ln">   265</span>		if b0 != bl {
<a id="L266"></a><span class="ln">   266</span>			<span class="comment">// Base elements left. Must go up before going down.</span>
<a id="L267"></a><span class="ln">   267</span>			seps := strings.Count(base[b0:bl], string(Separator))
<a id="L268"></a><span class="ln">   268</span>			size := 2 + seps*3
<a id="L269"></a><span class="ln">   269</span>			if tl != t0 {
<a id="L270"></a><span class="ln">   270</span>				size += 1 + tl - t0
<a id="L271"></a><span class="ln">   271</span>			}
<a id="L272"></a><span class="ln">   272</span>			buf := make([]byte, size)
<a id="L273"></a><span class="ln">   273</span>			n := copy(buf, &#34;..&#34;)
<a id="L274"></a><span class="ln">   274</span>			for i := 0; i &lt; seps; i++ {
<a id="L275"></a><span class="ln">   275</span>				buf[n] = Separator
<a id="L276"></a><span class="ln">   276</span>				copy(buf[n+1:], &#34;..&#34;)
<a id="L277"></a><span class="ln">   277</span>				n += 3
<a id="L278"></a><span class="ln">   278</span>			}
<a id="L279"></a><span class="ln">   279</span>			if t0 != tl {
<a id="L280"></a><span class="ln">   280</span>				buf[n] = Separator
<a id="L281"></a><span class="ln">   281</span>				copy(buf[n+1:], targ[t0:])
<a id="L282"></a><span class="ln">   282</span>			}
<a id="L283"></a><span class="ln">   283</span>			return string(buf), nil
<a id="L284"></a><span class="ln">   284</span>		}
<a id="L285"></a><span class="ln">   285</span>		return targ[t0:], nil
<a id="L286"></a><span class="ln">   286</span>	}
<a id="L287"></a><span class="ln">   287</span>	
<a id="L288"></a><span class="ln">   288</span>	<span class="comment">// SkipDir is used as a return value from WalkFuncs to indicate that</span>
<a id="L289"></a><span class="ln">   289</span>	<span class="comment">// the directory named in the call is to be skipped. It is not returned</span>
<a id="L290"></a><span class="ln">   290</span>	<span class="comment">// as an error by any function.</span>
<a id="L291"></a><span class="ln">   291</span>	var SkipDir = errors.New(&#34;skip this directory&#34;)
<a id="L292"></a><span class="ln">   292</span>	
<a id="L293"></a><span class="ln">   293</span>	<span class="comment">// WalkFunc is the type of the function called for each file or directory</span>
<a id="L294"></a><span class="ln">   294</span>	<span class="comment">// visited by Walk.  If there was a problem walking to the file or directory</span>
<a id="L295"></a><span class="ln">   295</span>	<span class="comment">// named by path, the incoming error will describe the problem and the</span>
<a id="L296"></a><span class="ln">   296</span>	<span class="comment">// function can decide how to handle that error (and Walk will not descend</span>
<a id="L297"></a><span class="ln">   297</span>	<span class="comment">// into that directory).  If an error is returned, processing stops.  The</span>
<a id="L298"></a><span class="ln">   298</span>	<span class="comment">// sole exception is that if path is a directory and the function returns the</span>
<a id="L299"></a><span class="ln">   299</span>	<span class="comment">// special value SkipDir, the contents of the directory are skipped</span>
<a id="L300"></a><span class="ln">   300</span>	<span class="comment">// and processing continues as usual on the next file.</span>
<a id="L301"></a><span class="ln">   301</span>	type WalkFunc func(path string, info os.FileInfo, err error) error
<a id="L302"></a><span class="ln">   302</span>	
<a id="L303"></a><span class="ln">   303</span>	<span class="comment">// walk recursively descends path, calling w.</span>
<a id="L304"></a><span class="ln">   304</span>	func walk(path string, info os.FileInfo, walkFn WalkFunc) error {
<a id="L305"></a><span class="ln">   305</span>		err := walkFn(path, info, nil)
<a id="L306"></a><span class="ln">   306</span>		if err != nil {
<a id="L307"></a><span class="ln">   307</span>			if info.IsDir() &amp;&amp; err == SkipDir {
<a id="L308"></a><span class="ln">   308</span>				return nil
<a id="L309"></a><span class="ln">   309</span>			}
<a id="L310"></a><span class="ln">   310</span>			return err
<a id="L311"></a><span class="ln">   311</span>		}
<a id="L312"></a><span class="ln">   312</span>	
<a id="L313"></a><span class="ln">   313</span>		if !info.IsDir() {
<a id="L314"></a><span class="ln">   314</span>			return nil
<a id="L315"></a><span class="ln">   315</span>		}
<a id="L316"></a><span class="ln">   316</span>	
<a id="L317"></a><span class="ln">   317</span>		list, err := readDir(path)
<a id="L318"></a><span class="ln">   318</span>		if err != nil {
<a id="L319"></a><span class="ln">   319</span>			return walkFn(path, info, err)
<a id="L320"></a><span class="ln">   320</span>		}
<a id="L321"></a><span class="ln">   321</span>	
<a id="L322"></a><span class="ln">   322</span>		for _, fileInfo := range list {
<a id="L323"></a><span class="ln">   323</span>			if err = walk(Join(path, fileInfo.Name()), fileInfo, walkFn); err != nil {
<a id="L324"></a><span class="ln">   324</span>				return err
<a id="L325"></a><span class="ln">   325</span>			}
<a id="L326"></a><span class="ln">   326</span>		}
<a id="L327"></a><span class="ln">   327</span>		return nil
<a id="L328"></a><span class="ln">   328</span>	}
<a id="L329"></a><span class="ln">   329</span>	
<a id="L330"></a><span class="ln">   330</span>	<span class="comment">// Walk walks the file tree rooted at root, calling walkFn for each file or</span>
<a id="L331"></a><span class="ln">   331</span>	<span class="comment">// directory in the tree, including root. All errors that arise visiting files</span>
<a id="L332"></a><span class="ln">   332</span>	<span class="comment">// and directories are filtered by walkFn. The files are walked in lexical</span>
<a id="L333"></a><span class="ln">   333</span>	<span class="comment">// order, which makes the output deterministic but means that for very</span>
<a id="L334"></a><span class="ln">   334</span>	<span class="comment">// large directories Walk can be inefficient.</span>
<a id="L335"></a><span class="ln">   335</span>	func Walk(root string, walkFn WalkFunc) error {
<a id="L336"></a><span class="ln">   336</span>		info, err := os.Lstat(root)
<a id="L337"></a><span class="ln">   337</span>		if err != nil {
<a id="L338"></a><span class="ln">   338</span>			return walkFn(root, nil, err)
<a id="L339"></a><span class="ln">   339</span>		}
<a id="L340"></a><span class="ln">   340</span>		return walk(root, info, walkFn)
<a id="L341"></a><span class="ln">   341</span>	}
<a id="L342"></a><span class="ln">   342</span>	
<a id="L343"></a><span class="ln">   343</span>	<span class="comment">// readDir reads the directory named by dirname and returns</span>
<a id="L344"></a><span class="ln">   344</span>	<span class="comment">// a sorted list of directory entries.</span>
<a id="L345"></a><span class="ln">   345</span>	<span class="comment">// Copied from io/ioutil to avoid the circular import.</span>
<a id="L346"></a><span class="ln">   346</span>	func readDir(dirname string) ([]os.FileInfo, error) {
<a id="L347"></a><span class="ln">   347</span>		f, err := os.Open(dirname)
<a id="L348"></a><span class="ln">   348</span>		if err != nil {
<a id="L349"></a><span class="ln">   349</span>			return nil, err
<a id="L350"></a><span class="ln">   350</span>		}
<a id="L351"></a><span class="ln">   351</span>		list, err := f.Readdir(-1)
<a id="L352"></a><span class="ln">   352</span>		f.Close()
<a id="L353"></a><span class="ln">   353</span>		if err != nil {
<a id="L354"></a><span class="ln">   354</span>			return nil, err
<a id="L355"></a><span class="ln">   355</span>		}
<a id="L356"></a><span class="ln">   356</span>		sort.Sort(byName(list))
<a id="L357"></a><span class="ln">   357</span>		return list, nil
<a id="L358"></a><span class="ln">   358</span>	}
<a id="L359"></a><span class="ln">   359</span>	
<a id="L360"></a><span class="ln">   360</span>	<span class="comment">// byName implements sort.Interface.</span>
<a id="L361"></a><span class="ln">   361</span>	type byName []os.FileInfo
<a id="L362"></a><span class="ln">   362</span>	
<a id="L363"></a><span class="ln">   363</span>	func (f byName) Len() int           { return len(f) }
<a id="L364"></a><span class="ln">   364</span>	func (f byName) Less(i, j int) bool { return f[i].Name() &lt; f[j].Name() }
<a id="L365"></a><span class="ln">   365</span>	func (f byName) Swap(i, j int)      { f[i], f[j] = f[j], f[i] }
<a id="L366"></a><span class="ln">   366</span>	
<a id="L367"></a><span class="ln">   367</span>	<span class="comment">// Base returns the last element of path.</span>
<a id="L368"></a><span class="ln">   368</span>	<span class="comment">// Trailing path separators are removed before extracting the last element.</span>
<a id="L369"></a><span class="ln">   369</span>	<span class="comment">// If the path is empty, Base returns &#34;.&#34;.</span>
<a id="L370"></a><span class="ln">   370</span>	<span class="comment">// If the path consists entirely of separators, Base returns a single separator.</span>
<a id="L371"></a><span class="ln">   371</span>	func Base(path string) string {
<a id="L372"></a><span class="ln">   372</span>		if path == &#34;&#34; {
<a id="L373"></a><span class="ln">   373</span>			return &#34;.&#34;
<a id="L374"></a><span class="ln">   374</span>		}
<a id="L375"></a><span class="ln">   375</span>		<span class="comment">// Strip trailing slashes.</span>
<a id="L376"></a><span class="ln">   376</span>		for len(path) &gt; 0 &amp;&amp; os.IsPathSeparator(path[len(path)-1]) {
<a id="L377"></a><span class="ln">   377</span>			path = path[0 : len(path)-1]
<a id="L378"></a><span class="ln">   378</span>		}
<a id="L379"></a><span class="ln">   379</span>		<span class="comment">// Throw away volume name</span>
<a id="L380"></a><span class="ln">   380</span>		path = path[len(VolumeName(path)):]
<a id="L381"></a><span class="ln">   381</span>		<span class="comment">// Find the last element</span>
<a id="L382"></a><span class="ln">   382</span>		i := len(path) - 1
<a id="L383"></a><span class="ln">   383</span>		for i &gt;= 0 &amp;&amp; !os.IsPathSeparator(path[i]) {
<a id="L384"></a><span class="ln">   384</span>			i--
<a id="L385"></a><span class="ln">   385</span>		}
<a id="L386"></a><span class="ln">   386</span>		if i &gt;= 0 {
<a id="L387"></a><span class="ln">   387</span>			path = path[i+1:]
<a id="L388"></a><span class="ln">   388</span>		}
<a id="L389"></a><span class="ln">   389</span>		<span class="comment">// If empty now, it had only slashes.</span>
<a id="L390"></a><span class="ln">   390</span>		if path == &#34;&#34; {
<a id="L391"></a><span class="ln">   391</span>			return string(Separator)
<a id="L392"></a><span class="ln">   392</span>		}
<a id="L393"></a><span class="ln">   393</span>		return path
<a id="L394"></a><span class="ln">   394</span>	}
<a id="L395"></a><span class="ln">   395</span>	
<a id="L396"></a><span class="ln">   396</span>	<span class="comment">// Dir returns all but the last element of path, typically the path&#39;s directory.</span>
<a id="L397"></a><span class="ln">   397</span>	<span class="comment">// Trailing path separators are removed before processing.</span>
<a id="L398"></a><span class="ln">   398</span>	<span class="comment">// If the path is empty, Dir returns &#34;.&#34;.</span>
<a id="L399"></a><span class="ln">   399</span>	<span class="comment">// If the path consists entirely of separators, Dir returns a single separator.</span>
<a id="L400"></a><span class="ln">   400</span>	<span class="comment">// The returned path does not end in a separator unless it is the root directory.</span>
<a id="L401"></a><span class="ln">   401</span>	func Dir(path string) string {
<a id="L402"></a><span class="ln">   402</span>		vol := VolumeName(path)
<a id="L403"></a><span class="ln">   403</span>		i := len(path) - 1
<a id="L404"></a><span class="ln">   404</span>		for i &gt;= len(vol) &amp;&amp; !os.IsPathSeparator(path[i]) {
<a id="L405"></a><span class="ln">   405</span>			i--
<a id="L406"></a><span class="ln">   406</span>		}
<a id="L407"></a><span class="ln">   407</span>		dir := Clean(path[len(vol) : i+1])
<a id="L408"></a><span class="ln">   408</span>		last := len(dir) - 1
<a id="L409"></a><span class="ln">   409</span>		if last &gt; 0 &amp;&amp; os.IsPathSeparator(dir[last]) {
<a id="L410"></a><span class="ln">   410</span>			dir = dir[:last]
<a id="L411"></a><span class="ln">   411</span>		}
<a id="L412"></a><span class="ln">   412</span>		if dir == &#34;&#34; {
<a id="L413"></a><span class="ln">   413</span>			dir = &#34;.&#34;
<a id="L414"></a><span class="ln">   414</span>		}
<a id="L415"></a><span class="ln">   415</span>		return vol + dir
<a id="L416"></a><span class="ln">   416</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

