<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/strconv/atoi.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/strconv/atoi.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package strconv
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import &#34;errors&#34;
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// ErrRange indicates that a value is out of range for the target type.</span>
<a id="L10"></a><span class="ln">    10</span>	var ErrRange = errors.New(&#34;value out of range&#34;)
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// ErrSyntax indicates that a value does not have the right syntax for the target type.</span>
<a id="L13"></a><span class="ln">    13</span>	var ErrSyntax = errors.New(&#34;invalid syntax&#34;)
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// A NumError records a failed conversion.</span>
<a id="L16"></a><span class="ln">    16</span>	type NumError struct {
<a id="L17"></a><span class="ln">    17</span>		Func string <span class="comment">// the failing function (ParseBool, ParseInt, ParseUint, ParseFloat)</span>
<a id="L18"></a><span class="ln">    18</span>		Num  string <span class="comment">// the input</span>
<a id="L19"></a><span class="ln">    19</span>		Err  error  <span class="comment">// the reason the conversion failed (ErrRange, ErrSyntax)</span>
<a id="L20"></a><span class="ln">    20</span>	}
<a id="L21"></a><span class="ln">    21</span>	
<a id="L22"></a><span class="ln">    22</span>	func (e *NumError) Error() string {
<a id="L23"></a><span class="ln">    23</span>		return &#34;strconv.&#34; + e.Func + &#34;: &#34; + `parsing &#34;` + e.Num + `&#34;: ` + e.Err.Error()
<a id="L24"></a><span class="ln">    24</span>	}
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>	func syntaxError(fn, str string) *NumError {
<a id="L27"></a><span class="ln">    27</span>		return &amp;NumError{fn, str, ErrSyntax}
<a id="L28"></a><span class="ln">    28</span>	}
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>	func rangeError(fn, str string) *NumError {
<a id="L31"></a><span class="ln">    31</span>		return &amp;NumError{fn, str, ErrRange}
<a id="L32"></a><span class="ln">    32</span>	}
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>	const intSize = 32 &lt;&lt; uint(^uint(0)&gt;&gt;63)
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>	const IntSize = intSize <span class="comment">// number of bits in int, uint (32 or 64)</span>
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// Return the first number n such that n*base &gt;= 1&lt;&lt;64.</span>
<a id="L39"></a><span class="ln">    39</span>	func cutoff64(base int) uint64 {
<a id="L40"></a><span class="ln">    40</span>		if base &lt; 2 {
<a id="L41"></a><span class="ln">    41</span>			return 0
<a id="L42"></a><span class="ln">    42</span>		}
<a id="L43"></a><span class="ln">    43</span>		return (1&lt;&lt;64-1)/uint64(base) + 1
<a id="L44"></a><span class="ln">    44</span>	}
<a id="L45"></a><span class="ln">    45</span>	
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">// ParseUint is like ParseInt but for unsigned numbers.</span>
<a id="L47"></a><span class="ln">    47</span>	func ParseUint(s string, b int, bitSize int) (n uint64, err error) {
<a id="L48"></a><span class="ln">    48</span>		var cutoff, maxVal uint64
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>		if bitSize == 0 {
<a id="L51"></a><span class="ln">    51</span>			bitSize = int(IntSize)
<a id="L52"></a><span class="ln">    52</span>		}
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>		s0 := s
<a id="L55"></a><span class="ln">    55</span>		switch {
<a id="L56"></a><span class="ln">    56</span>		case len(s) &lt; 1:
<a id="L57"></a><span class="ln">    57</span>			err = ErrSyntax
<a id="L58"></a><span class="ln">    58</span>			goto Error
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>		case 2 &lt;= b &amp;&amp; b &lt;= 36:
<a id="L61"></a><span class="ln">    61</span>			<span class="comment">// valid base; nothing to do</span>
<a id="L62"></a><span class="ln">    62</span>	
<a id="L63"></a><span class="ln">    63</span>		case b == 0:
<a id="L64"></a><span class="ln">    64</span>			<span class="comment">// Look for octal, hex prefix.</span>
<a id="L65"></a><span class="ln">    65</span>			switch {
<a id="L66"></a><span class="ln">    66</span>			case s[0] == &#39;0&#39; &amp;&amp; len(s) &gt; 1 &amp;&amp; (s[1] == &#39;x&#39; || s[1] == &#39;X&#39;):
<a id="L67"></a><span class="ln">    67</span>				b = 16
<a id="L68"></a><span class="ln">    68</span>				s = s[2:]
<a id="L69"></a><span class="ln">    69</span>				if len(s) &lt; 1 {
<a id="L70"></a><span class="ln">    70</span>					err = ErrSyntax
<a id="L71"></a><span class="ln">    71</span>					goto Error
<a id="L72"></a><span class="ln">    72</span>				}
<a id="L73"></a><span class="ln">    73</span>			case s[0] == &#39;0&#39;:
<a id="L74"></a><span class="ln">    74</span>				b = 8
<a id="L75"></a><span class="ln">    75</span>			default:
<a id="L76"></a><span class="ln">    76</span>				b = 10
<a id="L77"></a><span class="ln">    77</span>			}
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>		default:
<a id="L80"></a><span class="ln">    80</span>			err = errors.New(&#34;invalid base &#34; + Itoa(b))
<a id="L81"></a><span class="ln">    81</span>			goto Error
<a id="L82"></a><span class="ln">    82</span>		}
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>		n = 0
<a id="L85"></a><span class="ln">    85</span>		cutoff = cutoff64(b)
<a id="L86"></a><span class="ln">    86</span>		maxVal = 1&lt;&lt;uint(bitSize) - 1
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>		for i := 0; i &lt; len(s); i++ {
<a id="L89"></a><span class="ln">    89</span>			var v byte
<a id="L90"></a><span class="ln">    90</span>			d := s[i]
<a id="L91"></a><span class="ln">    91</span>			switch {
<a id="L92"></a><span class="ln">    92</span>			case &#39;0&#39; &lt;= d &amp;&amp; d &lt;= &#39;9&#39;:
<a id="L93"></a><span class="ln">    93</span>				v = d - &#39;0&#39;
<a id="L94"></a><span class="ln">    94</span>			case &#39;a&#39; &lt;= d &amp;&amp; d &lt;= &#39;z&#39;:
<a id="L95"></a><span class="ln">    95</span>				v = d - &#39;a&#39; + 10
<a id="L96"></a><span class="ln">    96</span>			case &#39;A&#39; &lt;= d &amp;&amp; d &lt;= &#39;Z&#39;:
<a id="L97"></a><span class="ln">    97</span>				v = d - &#39;A&#39; + 10
<a id="L98"></a><span class="ln">    98</span>			default:
<a id="L99"></a><span class="ln">    99</span>				n = 0
<a id="L100"></a><span class="ln">   100</span>				err = ErrSyntax
<a id="L101"></a><span class="ln">   101</span>				goto Error
<a id="L102"></a><span class="ln">   102</span>			}
<a id="L103"></a><span class="ln">   103</span>			if int(v) &gt;= b {
<a id="L104"></a><span class="ln">   104</span>				n = 0
<a id="L105"></a><span class="ln">   105</span>				err = ErrSyntax
<a id="L106"></a><span class="ln">   106</span>				goto Error
<a id="L107"></a><span class="ln">   107</span>			}
<a id="L108"></a><span class="ln">   108</span>	
<a id="L109"></a><span class="ln">   109</span>			if n &gt;= cutoff {
<a id="L110"></a><span class="ln">   110</span>				<span class="comment">// n*b overflows</span>
<a id="L111"></a><span class="ln">   111</span>				n = 1&lt;&lt;64 - 1
<a id="L112"></a><span class="ln">   112</span>				err = ErrRange
<a id="L113"></a><span class="ln">   113</span>				goto Error
<a id="L114"></a><span class="ln">   114</span>			}
<a id="L115"></a><span class="ln">   115</span>			n *= uint64(b)
<a id="L116"></a><span class="ln">   116</span>	
<a id="L117"></a><span class="ln">   117</span>			n1 := n + uint64(v)
<a id="L118"></a><span class="ln">   118</span>			if n1 &lt; n || n1 &gt; maxVal {
<a id="L119"></a><span class="ln">   119</span>				<span class="comment">// n+v overflows</span>
<a id="L120"></a><span class="ln">   120</span>				n = 1&lt;&lt;64 - 1
<a id="L121"></a><span class="ln">   121</span>				err = ErrRange
<a id="L122"></a><span class="ln">   122</span>				goto Error
<a id="L123"></a><span class="ln">   123</span>			}
<a id="L124"></a><span class="ln">   124</span>			n = n1
<a id="L125"></a><span class="ln">   125</span>		}
<a id="L126"></a><span class="ln">   126</span>	
<a id="L127"></a><span class="ln">   127</span>		return n, nil
<a id="L128"></a><span class="ln">   128</span>	
<a id="L129"></a><span class="ln">   129</span>	Error:
<a id="L130"></a><span class="ln">   130</span>		return n, &amp;NumError{&#34;ParseUint&#34;, s0, err}
<a id="L131"></a><span class="ln">   131</span>	}
<a id="L132"></a><span class="ln">   132</span>	
<a id="L133"></a><span class="ln">   133</span>	<span class="comment">// ParseInt interprets a string s in the given base (2 to 36) and</span>
<a id="L134"></a><span class="ln">   134</span>	<span class="comment">// returns the corresponding value i.  If base == 0, the base is</span>
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">// implied by the string&#39;s prefix: base 16 for &#34;0x&#34;, base 8 for</span>
<a id="L136"></a><span class="ln">   136</span>	<span class="comment">// &#34;0&#34;, and base 10 otherwise.</span>
<a id="L137"></a><span class="ln">   137</span>	<span class="comment">//</span>
<a id="L138"></a><span class="ln">   138</span>	<span class="comment">// The bitSize argument specifies the integer type</span>
<a id="L139"></a><span class="ln">   139</span>	<span class="comment">// that the result must fit into.  Bit sizes 0, 8, 16, 32, and 64</span>
<a id="L140"></a><span class="ln">   140</span>	<span class="comment">// correspond to int, int8, int16, int32, and int64.</span>
<a id="L141"></a><span class="ln">   141</span>	<span class="comment">//</span>
<a id="L142"></a><span class="ln">   142</span>	<span class="comment">// The errors that ParseInt returns have concrete type *NumError</span>
<a id="L143"></a><span class="ln">   143</span>	<span class="comment">// and include err.Num = s.  If s is empty or contains invalid</span>
<a id="L144"></a><span class="ln">   144</span>	<span class="comment">// digits, err.Error = ErrSyntax; if the value corresponding</span>
<a id="L145"></a><span class="ln">   145</span>	<span class="comment">// to s cannot be represented by a signed integer of the</span>
<a id="L146"></a><span class="ln">   146</span>	<span class="comment">// given size, err.Error = ErrRange.</span>
<a id="L147"></a><span class="ln">   147</span>	func ParseInt(s string, base int, bitSize int) (i int64, err error) {
<a id="L148"></a><span class="ln">   148</span>		const fnParseInt = &#34;ParseInt&#34;
<a id="L149"></a><span class="ln">   149</span>	
<a id="L150"></a><span class="ln">   150</span>		if bitSize == 0 {
<a id="L151"></a><span class="ln">   151</span>			bitSize = int(IntSize)
<a id="L152"></a><span class="ln">   152</span>		}
<a id="L153"></a><span class="ln">   153</span>	
<a id="L154"></a><span class="ln">   154</span>		<span class="comment">// Empty string bad.</span>
<a id="L155"></a><span class="ln">   155</span>		if len(s) == 0 {
<a id="L156"></a><span class="ln">   156</span>			return 0, syntaxError(fnParseInt, s)
<a id="L157"></a><span class="ln">   157</span>		}
<a id="L158"></a><span class="ln">   158</span>	
<a id="L159"></a><span class="ln">   159</span>		<span class="comment">// Pick off leading sign.</span>
<a id="L160"></a><span class="ln">   160</span>		s0 := s
<a id="L161"></a><span class="ln">   161</span>		neg := false
<a id="L162"></a><span class="ln">   162</span>		if s[0] == &#39;+&#39; {
<a id="L163"></a><span class="ln">   163</span>			s = s[1:]
<a id="L164"></a><span class="ln">   164</span>		} else if s[0] == &#39;-&#39; {
<a id="L165"></a><span class="ln">   165</span>			neg = true
<a id="L166"></a><span class="ln">   166</span>			s = s[1:]
<a id="L167"></a><span class="ln">   167</span>		}
<a id="L168"></a><span class="ln">   168</span>	
<a id="L169"></a><span class="ln">   169</span>		<span class="comment">// Convert unsigned and check range.</span>
<a id="L170"></a><span class="ln">   170</span>		var un uint64
<a id="L171"></a><span class="ln">   171</span>		un, err = ParseUint(s, base, bitSize)
<a id="L172"></a><span class="ln">   172</span>		if err != nil &amp;&amp; err.(*NumError).Err != ErrRange {
<a id="L173"></a><span class="ln">   173</span>			err.(*NumError).Func = fnParseInt
<a id="L174"></a><span class="ln">   174</span>			err.(*NumError).Num = s0
<a id="L175"></a><span class="ln">   175</span>			return 0, err
<a id="L176"></a><span class="ln">   176</span>		}
<a id="L177"></a><span class="ln">   177</span>		cutoff := uint64(1 &lt;&lt; uint(bitSize-1))
<a id="L178"></a><span class="ln">   178</span>		if !neg &amp;&amp; un &gt;= cutoff {
<a id="L179"></a><span class="ln">   179</span>			return int64(cutoff - 1), rangeError(fnParseInt, s0)
<a id="L180"></a><span class="ln">   180</span>		}
<a id="L181"></a><span class="ln">   181</span>		if neg &amp;&amp; un &gt; cutoff {
<a id="L182"></a><span class="ln">   182</span>			return -int64(cutoff), rangeError(fnParseInt, s0)
<a id="L183"></a><span class="ln">   183</span>		}
<a id="L184"></a><span class="ln">   184</span>		n := int64(un)
<a id="L185"></a><span class="ln">   185</span>		if neg {
<a id="L186"></a><span class="ln">   186</span>			n = -n
<a id="L187"></a><span class="ln">   187</span>		}
<a id="L188"></a><span class="ln">   188</span>		return n, nil
<a id="L189"></a><span class="ln">   189</span>	}
<a id="L190"></a><span class="ln">   190</span>	
<a id="L191"></a><span class="ln">   191</span>	<span class="comment">// Atoi is shorthand for ParseInt(s, 10, 0).</span>
<a id="L192"></a><span class="ln">   192</span>	func Atoi(s string) (i int, err error) {
<a id="L193"></a><span class="ln">   193</span>		i64, err := ParseInt(s, 10, 0)
<a id="L194"></a><span class="ln">   194</span>		return int(i64), err
<a id="L195"></a><span class="ln">   195</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

