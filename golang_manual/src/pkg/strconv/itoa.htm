<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/strconv/itoa.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/strconv/itoa.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package strconv
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// FormatUint returns the string representation of i in the given base.</span>
<a id="L8"></a><span class="ln">     8</span>	func FormatUint(i uint64, base int) string {
<a id="L9"></a><span class="ln">     9</span>		_, s := formatBits(nil, i, base, false, false)
<a id="L10"></a><span class="ln">    10</span>		return s
<a id="L11"></a><span class="ln">    11</span>	}
<a id="L12"></a><span class="ln">    12</span>	
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// FormatInt returns the string representation of i in the given base.</span>
<a id="L14"></a><span class="ln">    14</span>	func FormatInt(i int64, base int) string {
<a id="L15"></a><span class="ln">    15</span>		_, s := formatBits(nil, uint64(i), base, i &lt; 0, false)
<a id="L16"></a><span class="ln">    16</span>		return s
<a id="L17"></a><span class="ln">    17</span>	}
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// Itoa is shorthand for FormatInt(i, 10).</span>
<a id="L20"></a><span class="ln">    20</span>	func Itoa(i int) string {
<a id="L21"></a><span class="ln">    21</span>		return FormatInt(int64(i), 10)
<a id="L22"></a><span class="ln">    22</span>	}
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">// AppendInt appends the string form of the integer i,</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// as generated by FormatInt, to dst and returns the extended buffer.</span>
<a id="L26"></a><span class="ln">    26</span>	func AppendInt(dst []byte, i int64, base int) []byte {
<a id="L27"></a><span class="ln">    27</span>		dst, _ = formatBits(dst, uint64(i), base, i &lt; 0, true)
<a id="L28"></a><span class="ln">    28</span>		return dst
<a id="L29"></a><span class="ln">    29</span>	}
<a id="L30"></a><span class="ln">    30</span>	
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// AppendUint appends the string form of the unsigned integer i,</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// as generated by FormatUint, to dst and returns the extended buffer.</span>
<a id="L33"></a><span class="ln">    33</span>	func AppendUint(dst []byte, i uint64, base int) []byte {
<a id="L34"></a><span class="ln">    34</span>		dst, _ = formatBits(dst, i, base, false, true)
<a id="L35"></a><span class="ln">    35</span>		return dst
<a id="L36"></a><span class="ln">    36</span>	}
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>	const (
<a id="L39"></a><span class="ln">    39</span>		digits   = &#34;0123456789abcdefghijklmnopqrstuvwxyz&#34;
<a id="L40"></a><span class="ln">    40</span>		digits01 = &#34;0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789&#34;
<a id="L41"></a><span class="ln">    41</span>		digits10 = &#34;0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999&#34;
<a id="L42"></a><span class="ln">    42</span>	)
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	var shifts = [len(digits) + 1]uint{
<a id="L45"></a><span class="ln">    45</span>		1 &lt;&lt; 1: 1,
<a id="L46"></a><span class="ln">    46</span>		1 &lt;&lt; 2: 2,
<a id="L47"></a><span class="ln">    47</span>		1 &lt;&lt; 3: 3,
<a id="L48"></a><span class="ln">    48</span>		1 &lt;&lt; 4: 4,
<a id="L49"></a><span class="ln">    49</span>		1 &lt;&lt; 5: 5,
<a id="L50"></a><span class="ln">    50</span>	}
<a id="L51"></a><span class="ln">    51</span>	
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// formatBits computes the string representation of u in the given base.</span>
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">// If neg is set, u is treated as negative int64 value. If append_ is</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">// set, the string is appended to dst and the resulting byte slice is</span>
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// returned as the first result value; otherwise the string is returned</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// as the second result value.</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">//</span>
<a id="L58"></a><span class="ln">    58</span>	func formatBits(dst []byte, u uint64, base int, neg, append_ bool) (d []byte, s string) {
<a id="L59"></a><span class="ln">    59</span>		if base &lt; 2 || base &gt; len(digits) {
<a id="L60"></a><span class="ln">    60</span>			panic(&#34;strconv: illegal AppendInt/FormatInt base&#34;)
<a id="L61"></a><span class="ln">    61</span>		}
<a id="L62"></a><span class="ln">    62</span>		<span class="comment">// 2 &lt;= base &amp;&amp; base &lt;= len(digits)</span>
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>		var a [64 + 1]byte <span class="comment">// +1 for sign of 64bit value in base 2</span>
<a id="L65"></a><span class="ln">    65</span>		i := len(a)
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>		if neg {
<a id="L68"></a><span class="ln">    68</span>			u = -u
<a id="L69"></a><span class="ln">    69</span>		}
<a id="L70"></a><span class="ln">    70</span>	
<a id="L71"></a><span class="ln">    71</span>		<span class="comment">// convert bits</span>
<a id="L72"></a><span class="ln">    72</span>		if base == 10 {
<a id="L73"></a><span class="ln">    73</span>			<span class="comment">// common case: use constants for / and % because</span>
<a id="L74"></a><span class="ln">    74</span>			<span class="comment">// the compiler can optimize it into a multiply+shift,</span>
<a id="L75"></a><span class="ln">    75</span>			<span class="comment">// and unroll loop</span>
<a id="L76"></a><span class="ln">    76</span>			for u &gt;= 100 {
<a id="L77"></a><span class="ln">    77</span>				i -= 2
<a id="L78"></a><span class="ln">    78</span>				q := u / 100
<a id="L79"></a><span class="ln">    79</span>				j := uintptr(u - q*100)
<a id="L80"></a><span class="ln">    80</span>				a[i+1] = digits01[j]
<a id="L81"></a><span class="ln">    81</span>				a[i+0] = digits10[j]
<a id="L82"></a><span class="ln">    82</span>				u = q
<a id="L83"></a><span class="ln">    83</span>			}
<a id="L84"></a><span class="ln">    84</span>			if u &gt;= 10 {
<a id="L85"></a><span class="ln">    85</span>				i--
<a id="L86"></a><span class="ln">    86</span>				q := u / 10
<a id="L87"></a><span class="ln">    87</span>				a[i] = digits[uintptr(u-q*10)]
<a id="L88"></a><span class="ln">    88</span>				u = q
<a id="L89"></a><span class="ln">    89</span>			}
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>		} else if s := shifts[base]; s &gt; 0 {
<a id="L92"></a><span class="ln">    92</span>			<span class="comment">// base is power of 2: use shifts and masks instead of / and %</span>
<a id="L93"></a><span class="ln">    93</span>			b := uint64(base)
<a id="L94"></a><span class="ln">    94</span>			m := uintptr(b) - 1 <span class="comment">// == 1&lt;&lt;s - 1</span>
<a id="L95"></a><span class="ln">    95</span>			for u &gt;= b {
<a id="L96"></a><span class="ln">    96</span>				i--
<a id="L97"></a><span class="ln">    97</span>				a[i] = digits[uintptr(u)&amp;m]
<a id="L98"></a><span class="ln">    98</span>				u &gt;&gt;= s
<a id="L99"></a><span class="ln">    99</span>			}
<a id="L100"></a><span class="ln">   100</span>	
<a id="L101"></a><span class="ln">   101</span>		} else {
<a id="L102"></a><span class="ln">   102</span>			<span class="comment">// general case</span>
<a id="L103"></a><span class="ln">   103</span>			b := uint64(base)
<a id="L104"></a><span class="ln">   104</span>			for u &gt;= b {
<a id="L105"></a><span class="ln">   105</span>				i--
<a id="L106"></a><span class="ln">   106</span>				a[i] = digits[uintptr(u%b)]
<a id="L107"></a><span class="ln">   107</span>				u /= b
<a id="L108"></a><span class="ln">   108</span>			}
<a id="L109"></a><span class="ln">   109</span>		}
<a id="L110"></a><span class="ln">   110</span>	
<a id="L111"></a><span class="ln">   111</span>		<span class="comment">// u &lt; base</span>
<a id="L112"></a><span class="ln">   112</span>		i--
<a id="L113"></a><span class="ln">   113</span>		a[i] = digits[uintptr(u)]
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>		<span class="comment">// add sign, if any</span>
<a id="L116"></a><span class="ln">   116</span>		if neg {
<a id="L117"></a><span class="ln">   117</span>			i--
<a id="L118"></a><span class="ln">   118</span>			a[i] = &#39;-&#39;
<a id="L119"></a><span class="ln">   119</span>		}
<a id="L120"></a><span class="ln">   120</span>	
<a id="L121"></a><span class="ln">   121</span>		if append_ {
<a id="L122"></a><span class="ln">   122</span>			d = append(dst, a[i:]...)
<a id="L123"></a><span class="ln">   123</span>			return
<a id="L124"></a><span class="ln">   124</span>		}
<a id="L125"></a><span class="ln">   125</span>		s = string(a[i:])
<a id="L126"></a><span class="ln">   126</span>		return
<a id="L127"></a><span class="ln">   127</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

