<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/strconv/decimal.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/strconv/decimal.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Multiprecision decimal numbers.</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// For floating-point formatting only; not general purpose.</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// Only operations are assign and (binary) left/right shift.</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// Can do binary floating point in multiprecision decimal precisely</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// because 2 divides 10; cannot do decimal floating point</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// in multiprecision binary precisely.</span>
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	package strconv
<a id="L13"></a><span class="ln">    13</span>	
<a id="L14"></a><span class="ln">    14</span>	type decimal struct {
<a id="L15"></a><span class="ln">    15</span>		d     [800]byte <span class="comment">// digits</span>
<a id="L16"></a><span class="ln">    16</span>		nd    int       <span class="comment">// number of digits used</span>
<a id="L17"></a><span class="ln">    17</span>		dp    int       <span class="comment">// decimal point</span>
<a id="L18"></a><span class="ln">    18</span>		neg   bool
<a id="L19"></a><span class="ln">    19</span>		trunc bool <span class="comment">// discarded nonzero digits beyond d[:nd]</span>
<a id="L20"></a><span class="ln">    20</span>	}
<a id="L21"></a><span class="ln">    21</span>	
<a id="L22"></a><span class="ln">    22</span>	func (a *decimal) String() string {
<a id="L23"></a><span class="ln">    23</span>		n := 10 + a.nd
<a id="L24"></a><span class="ln">    24</span>		if a.dp &gt; 0 {
<a id="L25"></a><span class="ln">    25</span>			n += a.dp
<a id="L26"></a><span class="ln">    26</span>		}
<a id="L27"></a><span class="ln">    27</span>		if a.dp &lt; 0 {
<a id="L28"></a><span class="ln">    28</span>			n += -a.dp
<a id="L29"></a><span class="ln">    29</span>		}
<a id="L30"></a><span class="ln">    30</span>	
<a id="L31"></a><span class="ln">    31</span>		buf := make([]byte, n)
<a id="L32"></a><span class="ln">    32</span>		w := 0
<a id="L33"></a><span class="ln">    33</span>		switch {
<a id="L34"></a><span class="ln">    34</span>		case a.nd == 0:
<a id="L35"></a><span class="ln">    35</span>			return &#34;0&#34;
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>		case a.dp &lt;= 0:
<a id="L38"></a><span class="ln">    38</span>			<span class="comment">// zeros fill space between decimal point and digits</span>
<a id="L39"></a><span class="ln">    39</span>			buf[w] = &#39;0&#39;
<a id="L40"></a><span class="ln">    40</span>			w++
<a id="L41"></a><span class="ln">    41</span>			buf[w] = &#39;.&#39;
<a id="L42"></a><span class="ln">    42</span>			w++
<a id="L43"></a><span class="ln">    43</span>			w += digitZero(buf[w : w+-a.dp])
<a id="L44"></a><span class="ln">    44</span>			w += copy(buf[w:], a.d[0:a.nd])
<a id="L45"></a><span class="ln">    45</span>	
<a id="L46"></a><span class="ln">    46</span>		case a.dp &lt; a.nd:
<a id="L47"></a><span class="ln">    47</span>			<span class="comment">// decimal point in middle of digits</span>
<a id="L48"></a><span class="ln">    48</span>			w += copy(buf[w:], a.d[0:a.dp])
<a id="L49"></a><span class="ln">    49</span>			buf[w] = &#39;.&#39;
<a id="L50"></a><span class="ln">    50</span>			w++
<a id="L51"></a><span class="ln">    51</span>			w += copy(buf[w:], a.d[a.dp:a.nd])
<a id="L52"></a><span class="ln">    52</span>	
<a id="L53"></a><span class="ln">    53</span>		default:
<a id="L54"></a><span class="ln">    54</span>			<span class="comment">// zeros fill space between digits and decimal point</span>
<a id="L55"></a><span class="ln">    55</span>			w += copy(buf[w:], a.d[0:a.nd])
<a id="L56"></a><span class="ln">    56</span>			w += digitZero(buf[w : w+a.dp-a.nd])
<a id="L57"></a><span class="ln">    57</span>		}
<a id="L58"></a><span class="ln">    58</span>		return string(buf[0:w])
<a id="L59"></a><span class="ln">    59</span>	}
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>	func digitZero(dst []byte) int {
<a id="L62"></a><span class="ln">    62</span>		for i := range dst {
<a id="L63"></a><span class="ln">    63</span>			dst[i] = &#39;0&#39;
<a id="L64"></a><span class="ln">    64</span>		}
<a id="L65"></a><span class="ln">    65</span>		return len(dst)
<a id="L66"></a><span class="ln">    66</span>	}
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">// trim trailing zeros from number.</span>
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// (They are meaningless; the decimal point is tracked</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// independent of the number of digits.)</span>
<a id="L71"></a><span class="ln">    71</span>	func trim(a *decimal) {
<a id="L72"></a><span class="ln">    72</span>		for a.nd &gt; 0 &amp;&amp; a.d[a.nd-1] == &#39;0&#39; {
<a id="L73"></a><span class="ln">    73</span>			a.nd--
<a id="L74"></a><span class="ln">    74</span>		}
<a id="L75"></a><span class="ln">    75</span>		if a.nd == 0 {
<a id="L76"></a><span class="ln">    76</span>			a.dp = 0
<a id="L77"></a><span class="ln">    77</span>		}
<a id="L78"></a><span class="ln">    78</span>	}
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// Assign v to a.</span>
<a id="L81"></a><span class="ln">    81</span>	func (a *decimal) Assign(v uint64) {
<a id="L82"></a><span class="ln">    82</span>		var buf [50]byte
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>		<span class="comment">// Write reversed decimal in buf.</span>
<a id="L85"></a><span class="ln">    85</span>		n := 0
<a id="L86"></a><span class="ln">    86</span>		for v &gt; 0 {
<a id="L87"></a><span class="ln">    87</span>			v1 := v / 10
<a id="L88"></a><span class="ln">    88</span>			v -= 10 * v1
<a id="L89"></a><span class="ln">    89</span>			buf[n] = byte(v + &#39;0&#39;)
<a id="L90"></a><span class="ln">    90</span>			n++
<a id="L91"></a><span class="ln">    91</span>			v = v1
<a id="L92"></a><span class="ln">    92</span>		}
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>		<span class="comment">// Reverse again to produce forward decimal in a.d.</span>
<a id="L95"></a><span class="ln">    95</span>		a.nd = 0
<a id="L96"></a><span class="ln">    96</span>		for n--; n &gt;= 0; n-- {
<a id="L97"></a><span class="ln">    97</span>			a.d[a.nd] = buf[n]
<a id="L98"></a><span class="ln">    98</span>			a.nd++
<a id="L99"></a><span class="ln">    99</span>		}
<a id="L100"></a><span class="ln">   100</span>		a.dp = a.nd
<a id="L101"></a><span class="ln">   101</span>		trim(a)
<a id="L102"></a><span class="ln">   102</span>	}
<a id="L103"></a><span class="ln">   103</span>	
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">// Maximum shift that we can do in one pass without overflow.</span>
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// Signed int has 31 bits, and we have to be able to accommodate 9&lt;&lt;k.</span>
<a id="L106"></a><span class="ln">   106</span>	const maxShift = 27
<a id="L107"></a><span class="ln">   107</span>	
<a id="L108"></a><span class="ln">   108</span>	<span class="comment">// Binary shift right (* 2) by k bits.  k &lt;= maxShift to avoid overflow.</span>
<a id="L109"></a><span class="ln">   109</span>	func rightShift(a *decimal, k uint) {
<a id="L110"></a><span class="ln">   110</span>		r := 0 <span class="comment">// read pointer</span>
<a id="L111"></a><span class="ln">   111</span>		w := 0 <span class="comment">// write pointer</span>
<a id="L112"></a><span class="ln">   112</span>	
<a id="L113"></a><span class="ln">   113</span>		<span class="comment">// Pick up enough leading digits to cover first shift.</span>
<a id="L114"></a><span class="ln">   114</span>		n := 0
<a id="L115"></a><span class="ln">   115</span>		for ; n&gt;&gt;k == 0; r++ {
<a id="L116"></a><span class="ln">   116</span>			if r &gt;= a.nd {
<a id="L117"></a><span class="ln">   117</span>				if n == 0 {
<a id="L118"></a><span class="ln">   118</span>					<span class="comment">// a == 0; shouldn&#39;t get here, but handle anyway.</span>
<a id="L119"></a><span class="ln">   119</span>					a.nd = 0
<a id="L120"></a><span class="ln">   120</span>					return
<a id="L121"></a><span class="ln">   121</span>				}
<a id="L122"></a><span class="ln">   122</span>				for n&gt;&gt;k == 0 {
<a id="L123"></a><span class="ln">   123</span>					n = n * 10
<a id="L124"></a><span class="ln">   124</span>					r++
<a id="L125"></a><span class="ln">   125</span>				}
<a id="L126"></a><span class="ln">   126</span>				break
<a id="L127"></a><span class="ln">   127</span>			}
<a id="L128"></a><span class="ln">   128</span>			c := int(a.d[r])
<a id="L129"></a><span class="ln">   129</span>			n = n*10 + c - &#39;0&#39;
<a id="L130"></a><span class="ln">   130</span>		}
<a id="L131"></a><span class="ln">   131</span>		a.dp -= r - 1
<a id="L132"></a><span class="ln">   132</span>	
<a id="L133"></a><span class="ln">   133</span>		<span class="comment">// Pick up a digit, put down a digit.</span>
<a id="L134"></a><span class="ln">   134</span>		for ; r &lt; a.nd; r++ {
<a id="L135"></a><span class="ln">   135</span>			c := int(a.d[r])
<a id="L136"></a><span class="ln">   136</span>			dig := n &gt;&gt; k
<a id="L137"></a><span class="ln">   137</span>			n -= dig &lt;&lt; k
<a id="L138"></a><span class="ln">   138</span>			a.d[w] = byte(dig + &#39;0&#39;)
<a id="L139"></a><span class="ln">   139</span>			w++
<a id="L140"></a><span class="ln">   140</span>			n = n*10 + c - &#39;0&#39;
<a id="L141"></a><span class="ln">   141</span>		}
<a id="L142"></a><span class="ln">   142</span>	
<a id="L143"></a><span class="ln">   143</span>		<span class="comment">// Put down extra digits.</span>
<a id="L144"></a><span class="ln">   144</span>		for n &gt; 0 {
<a id="L145"></a><span class="ln">   145</span>			dig := n &gt;&gt; k
<a id="L146"></a><span class="ln">   146</span>			n -= dig &lt;&lt; k
<a id="L147"></a><span class="ln">   147</span>			if w &lt; len(a.d) {
<a id="L148"></a><span class="ln">   148</span>				a.d[w] = byte(dig + &#39;0&#39;)
<a id="L149"></a><span class="ln">   149</span>				w++
<a id="L150"></a><span class="ln">   150</span>			} else if dig &gt; 0 {
<a id="L151"></a><span class="ln">   151</span>				a.trunc = true
<a id="L152"></a><span class="ln">   152</span>			}
<a id="L153"></a><span class="ln">   153</span>			n = n * 10
<a id="L154"></a><span class="ln">   154</span>		}
<a id="L155"></a><span class="ln">   155</span>	
<a id="L156"></a><span class="ln">   156</span>		a.nd = w
<a id="L157"></a><span class="ln">   157</span>		trim(a)
<a id="L158"></a><span class="ln">   158</span>	}
<a id="L159"></a><span class="ln">   159</span>	
<a id="L160"></a><span class="ln">   160</span>	<span class="comment">// Cheat sheet for left shift: table indexed by shift count giving</span>
<a id="L161"></a><span class="ln">   161</span>	<span class="comment">// number of new digits that will be introduced by that shift.</span>
<a id="L162"></a><span class="ln">   162</span>	<span class="comment">//</span>
<a id="L163"></a><span class="ln">   163</span>	<span class="comment">// For example, leftcheats[4] = {2, &#34;625&#34;}.  That means that</span>
<a id="L164"></a><span class="ln">   164</span>	<span class="comment">// if we are shifting by 4 (multiplying by 16), it will add 2 digits</span>
<a id="L165"></a><span class="ln">   165</span>	<span class="comment">// when the string prefix is &#34;625&#34; through &#34;999&#34;, and one fewer digit</span>
<a id="L166"></a><span class="ln">   166</span>	<span class="comment">// if the string prefix is &#34;000&#34; through &#34;624&#34;.</span>
<a id="L167"></a><span class="ln">   167</span>	<span class="comment">//</span>
<a id="L168"></a><span class="ln">   168</span>	<span class="comment">// Credit for this trick goes to Ken.</span>
<a id="L169"></a><span class="ln">   169</span>	
<a id="L170"></a><span class="ln">   170</span>	type leftCheat struct {
<a id="L171"></a><span class="ln">   171</span>		delta  int    <span class="comment">// number of new digits</span>
<a id="L172"></a><span class="ln">   172</span>		cutoff string <span class="comment">//   minus one digit if original &lt; a.</span>
<a id="L173"></a><span class="ln">   173</span>	}
<a id="L174"></a><span class="ln">   174</span>	
<a id="L175"></a><span class="ln">   175</span>	var leftcheats = []leftCheat{
<a id="L176"></a><span class="ln">   176</span>		<span class="comment">// Leading digits of 1/2^i = 5^i.</span>
<a id="L177"></a><span class="ln">   177</span>		<span class="comment">// 5^23 is not an exact 64-bit floating point number,</span>
<a id="L178"></a><span class="ln">   178</span>		<span class="comment">// so have to use bc for the math.</span>
<a id="L179"></a><span class="ln">   179</span>		<span class="comment">/*
</span><a id="L180"></a><span class="ln">   180</span>	<span class="comment">		seq 27 | sed &#39;s/^/5^/&#39; | bc |
</span><a id="L181"></a><span class="ln">   181</span>	<span class="comment">		awk &#39;BEGIN{ print &#34;\tleftCheat{ 0, \&#34;\&#34; },&#34; }
</span><a id="L182"></a><span class="ln">   182</span>	<span class="comment">		{
</span><a id="L183"></a><span class="ln">   183</span>	<span class="comment">			log2 = log(2)/log(10)
</span><a id="L184"></a><span class="ln">   184</span>	<span class="comment">			printf(&#34;\tleftCheat{ %d, \&#34;%s\&#34; },\t// * %d\n&#34;,
</span><a id="L185"></a><span class="ln">   185</span>	<span class="comment">				int(log2*NR+1), $0, 2**NR)
</span><a id="L186"></a><span class="ln">   186</span>	<span class="comment">		}&#39;
</span><a id="L187"></a><span class="ln">   187</span>	<span class="comment">	*/</span>
<a id="L188"></a><span class="ln">   188</span>		{0, &#34;&#34;},
<a id="L189"></a><span class="ln">   189</span>		{1, &#34;5&#34;},                   <span class="comment">// * 2</span>
<a id="L190"></a><span class="ln">   190</span>		{1, &#34;25&#34;},                  <span class="comment">// * 4</span>
<a id="L191"></a><span class="ln">   191</span>		{1, &#34;125&#34;},                 <span class="comment">// * 8</span>
<a id="L192"></a><span class="ln">   192</span>		{2, &#34;625&#34;},                 <span class="comment">// * 16</span>
<a id="L193"></a><span class="ln">   193</span>		{2, &#34;3125&#34;},                <span class="comment">// * 32</span>
<a id="L194"></a><span class="ln">   194</span>		{2, &#34;15625&#34;},               <span class="comment">// * 64</span>
<a id="L195"></a><span class="ln">   195</span>		{3, &#34;78125&#34;},               <span class="comment">// * 128</span>
<a id="L196"></a><span class="ln">   196</span>		{3, &#34;390625&#34;},              <span class="comment">// * 256</span>
<a id="L197"></a><span class="ln">   197</span>		{3, &#34;1953125&#34;},             <span class="comment">// * 512</span>
<a id="L198"></a><span class="ln">   198</span>		{4, &#34;9765625&#34;},             <span class="comment">// * 1024</span>
<a id="L199"></a><span class="ln">   199</span>		{4, &#34;48828125&#34;},            <span class="comment">// * 2048</span>
<a id="L200"></a><span class="ln">   200</span>		{4, &#34;244140625&#34;},           <span class="comment">// * 4096</span>
<a id="L201"></a><span class="ln">   201</span>		{4, &#34;1220703125&#34;},          <span class="comment">// * 8192</span>
<a id="L202"></a><span class="ln">   202</span>		{5, &#34;6103515625&#34;},          <span class="comment">// * 16384</span>
<a id="L203"></a><span class="ln">   203</span>		{5, &#34;30517578125&#34;},         <span class="comment">// * 32768</span>
<a id="L204"></a><span class="ln">   204</span>		{5, &#34;152587890625&#34;},        <span class="comment">// * 65536</span>
<a id="L205"></a><span class="ln">   205</span>		{6, &#34;762939453125&#34;},        <span class="comment">// * 131072</span>
<a id="L206"></a><span class="ln">   206</span>		{6, &#34;3814697265625&#34;},       <span class="comment">// * 262144</span>
<a id="L207"></a><span class="ln">   207</span>		{6, &#34;19073486328125&#34;},      <span class="comment">// * 524288</span>
<a id="L208"></a><span class="ln">   208</span>		{7, &#34;95367431640625&#34;},      <span class="comment">// * 1048576</span>
<a id="L209"></a><span class="ln">   209</span>		{7, &#34;476837158203125&#34;},     <span class="comment">// * 2097152</span>
<a id="L210"></a><span class="ln">   210</span>		{7, &#34;2384185791015625&#34;},    <span class="comment">// * 4194304</span>
<a id="L211"></a><span class="ln">   211</span>		{7, &#34;11920928955078125&#34;},   <span class="comment">// * 8388608</span>
<a id="L212"></a><span class="ln">   212</span>		{8, &#34;59604644775390625&#34;},   <span class="comment">// * 16777216</span>
<a id="L213"></a><span class="ln">   213</span>		{8, &#34;298023223876953125&#34;},  <span class="comment">// * 33554432</span>
<a id="L214"></a><span class="ln">   214</span>		{8, &#34;1490116119384765625&#34;}, <span class="comment">// * 67108864</span>
<a id="L215"></a><span class="ln">   215</span>		{9, &#34;7450580596923828125&#34;}, <span class="comment">// * 134217728</span>
<a id="L216"></a><span class="ln">   216</span>	}
<a id="L217"></a><span class="ln">   217</span>	
<a id="L218"></a><span class="ln">   218</span>	<span class="comment">// Is the leading prefix of b lexicographically less than s?</span>
<a id="L219"></a><span class="ln">   219</span>	func prefixIsLessThan(b []byte, s string) bool {
<a id="L220"></a><span class="ln">   220</span>		for i := 0; i &lt; len(s); i++ {
<a id="L221"></a><span class="ln">   221</span>			if i &gt;= len(b) {
<a id="L222"></a><span class="ln">   222</span>				return true
<a id="L223"></a><span class="ln">   223</span>			}
<a id="L224"></a><span class="ln">   224</span>			if b[i] != s[i] {
<a id="L225"></a><span class="ln">   225</span>				return b[i] &lt; s[i]
<a id="L226"></a><span class="ln">   226</span>			}
<a id="L227"></a><span class="ln">   227</span>		}
<a id="L228"></a><span class="ln">   228</span>		return false
<a id="L229"></a><span class="ln">   229</span>	}
<a id="L230"></a><span class="ln">   230</span>	
<a id="L231"></a><span class="ln">   231</span>	<span class="comment">// Binary shift left (/ 2) by k bits.  k &lt;= maxShift to avoid overflow.</span>
<a id="L232"></a><span class="ln">   232</span>	func leftShift(a *decimal, k uint) {
<a id="L233"></a><span class="ln">   233</span>		delta := leftcheats[k].delta
<a id="L234"></a><span class="ln">   234</span>		if prefixIsLessThan(a.d[0:a.nd], leftcheats[k].cutoff) {
<a id="L235"></a><span class="ln">   235</span>			delta--
<a id="L236"></a><span class="ln">   236</span>		}
<a id="L237"></a><span class="ln">   237</span>	
<a id="L238"></a><span class="ln">   238</span>		r := a.nd         <span class="comment">// read index</span>
<a id="L239"></a><span class="ln">   239</span>		w := a.nd + delta <span class="comment">// write index</span>
<a id="L240"></a><span class="ln">   240</span>		n := 0
<a id="L241"></a><span class="ln">   241</span>	
<a id="L242"></a><span class="ln">   242</span>		<span class="comment">// Pick up a digit, put down a digit.</span>
<a id="L243"></a><span class="ln">   243</span>		for r--; r &gt;= 0; r-- {
<a id="L244"></a><span class="ln">   244</span>			n += (int(a.d[r]) - &#39;0&#39;) &lt;&lt; k
<a id="L245"></a><span class="ln">   245</span>			quo := n / 10
<a id="L246"></a><span class="ln">   246</span>			rem := n - 10*quo
<a id="L247"></a><span class="ln">   247</span>			w--
<a id="L248"></a><span class="ln">   248</span>			if w &lt; len(a.d) {
<a id="L249"></a><span class="ln">   249</span>				a.d[w] = byte(rem + &#39;0&#39;)
<a id="L250"></a><span class="ln">   250</span>			} else if rem != 0 {
<a id="L251"></a><span class="ln">   251</span>				a.trunc = true
<a id="L252"></a><span class="ln">   252</span>			}
<a id="L253"></a><span class="ln">   253</span>			n = quo
<a id="L254"></a><span class="ln">   254</span>		}
<a id="L255"></a><span class="ln">   255</span>	
<a id="L256"></a><span class="ln">   256</span>		<span class="comment">// Put down extra digits.</span>
<a id="L257"></a><span class="ln">   257</span>		for n &gt; 0 {
<a id="L258"></a><span class="ln">   258</span>			quo := n / 10
<a id="L259"></a><span class="ln">   259</span>			rem := n - 10*quo
<a id="L260"></a><span class="ln">   260</span>			w--
<a id="L261"></a><span class="ln">   261</span>			if w &lt; len(a.d) {
<a id="L262"></a><span class="ln">   262</span>				a.d[w] = byte(rem + &#39;0&#39;)
<a id="L263"></a><span class="ln">   263</span>			} else if rem != 0 {
<a id="L264"></a><span class="ln">   264</span>				a.trunc = true
<a id="L265"></a><span class="ln">   265</span>			}
<a id="L266"></a><span class="ln">   266</span>			n = quo
<a id="L267"></a><span class="ln">   267</span>		}
<a id="L268"></a><span class="ln">   268</span>	
<a id="L269"></a><span class="ln">   269</span>		a.nd += delta
<a id="L270"></a><span class="ln">   270</span>		if a.nd &gt;= len(a.d) {
<a id="L271"></a><span class="ln">   271</span>			a.nd = len(a.d)
<a id="L272"></a><span class="ln">   272</span>		}
<a id="L273"></a><span class="ln">   273</span>		a.dp += delta
<a id="L274"></a><span class="ln">   274</span>		trim(a)
<a id="L275"></a><span class="ln">   275</span>	}
<a id="L276"></a><span class="ln">   276</span>	
<a id="L277"></a><span class="ln">   277</span>	<span class="comment">// Binary shift left (k &gt; 0) or right (k &lt; 0).</span>
<a id="L278"></a><span class="ln">   278</span>	func (a *decimal) Shift(k int) {
<a id="L279"></a><span class="ln">   279</span>		switch {
<a id="L280"></a><span class="ln">   280</span>		case a.nd == 0:
<a id="L281"></a><span class="ln">   281</span>			<span class="comment">// nothing to do: a == 0</span>
<a id="L282"></a><span class="ln">   282</span>		case k &gt; 0:
<a id="L283"></a><span class="ln">   283</span>			for k &gt; maxShift {
<a id="L284"></a><span class="ln">   284</span>				leftShift(a, maxShift)
<a id="L285"></a><span class="ln">   285</span>				k -= maxShift
<a id="L286"></a><span class="ln">   286</span>			}
<a id="L287"></a><span class="ln">   287</span>			leftShift(a, uint(k))
<a id="L288"></a><span class="ln">   288</span>		case k &lt; 0:
<a id="L289"></a><span class="ln">   289</span>			for k &lt; -maxShift {
<a id="L290"></a><span class="ln">   290</span>				rightShift(a, maxShift)
<a id="L291"></a><span class="ln">   291</span>				k += maxShift
<a id="L292"></a><span class="ln">   292</span>			}
<a id="L293"></a><span class="ln">   293</span>			rightShift(a, uint(-k))
<a id="L294"></a><span class="ln">   294</span>		}
<a id="L295"></a><span class="ln">   295</span>	}
<a id="L296"></a><span class="ln">   296</span>	
<a id="L297"></a><span class="ln">   297</span>	<span class="comment">// If we chop a at nd digits, should we round up?</span>
<a id="L298"></a><span class="ln">   298</span>	func shouldRoundUp(a *decimal, nd int) bool {
<a id="L299"></a><span class="ln">   299</span>		if nd &lt; 0 || nd &gt;= a.nd {
<a id="L300"></a><span class="ln">   300</span>			return false
<a id="L301"></a><span class="ln">   301</span>		}
<a id="L302"></a><span class="ln">   302</span>		if a.d[nd] == &#39;5&#39; &amp;&amp; nd+1 == a.nd { <span class="comment">// exactly halfway - round to even</span>
<a id="L303"></a><span class="ln">   303</span>			<span class="comment">// if we truncated, a little higher than what&#39;s recorded - always round up</span>
<a id="L304"></a><span class="ln">   304</span>			if a.trunc {
<a id="L305"></a><span class="ln">   305</span>				return true
<a id="L306"></a><span class="ln">   306</span>			}
<a id="L307"></a><span class="ln">   307</span>			return nd &gt; 0 &amp;&amp; (a.d[nd-1]-&#39;0&#39;)%2 != 0
<a id="L308"></a><span class="ln">   308</span>		}
<a id="L309"></a><span class="ln">   309</span>		<span class="comment">// not halfway - digit tells all</span>
<a id="L310"></a><span class="ln">   310</span>		return a.d[nd] &gt;= &#39;5&#39;
<a id="L311"></a><span class="ln">   311</span>	}
<a id="L312"></a><span class="ln">   312</span>	
<a id="L313"></a><span class="ln">   313</span>	<span class="comment">// Round a to nd digits (or fewer).</span>
<a id="L314"></a><span class="ln">   314</span>	<span class="comment">// If nd is zero, it means we&#39;re rounding</span>
<a id="L315"></a><span class="ln">   315</span>	<span class="comment">// just to the left of the digits, as in</span>
<a id="L316"></a><span class="ln">   316</span>	<span class="comment">// 0.09 -&gt; 0.1.</span>
<a id="L317"></a><span class="ln">   317</span>	func (a *decimal) Round(nd int) {
<a id="L318"></a><span class="ln">   318</span>		if nd &lt; 0 || nd &gt;= a.nd {
<a id="L319"></a><span class="ln">   319</span>			return
<a id="L320"></a><span class="ln">   320</span>		}
<a id="L321"></a><span class="ln">   321</span>		if shouldRoundUp(a, nd) {
<a id="L322"></a><span class="ln">   322</span>			a.RoundUp(nd)
<a id="L323"></a><span class="ln">   323</span>		} else {
<a id="L324"></a><span class="ln">   324</span>			a.RoundDown(nd)
<a id="L325"></a><span class="ln">   325</span>		}
<a id="L326"></a><span class="ln">   326</span>	}
<a id="L327"></a><span class="ln">   327</span>	
<a id="L328"></a><span class="ln">   328</span>	<span class="comment">// Round a down to nd digits (or fewer).</span>
<a id="L329"></a><span class="ln">   329</span>	func (a *decimal) RoundDown(nd int) {
<a id="L330"></a><span class="ln">   330</span>		if nd &lt; 0 || nd &gt;= a.nd {
<a id="L331"></a><span class="ln">   331</span>			return
<a id="L332"></a><span class="ln">   332</span>		}
<a id="L333"></a><span class="ln">   333</span>		a.nd = nd
<a id="L334"></a><span class="ln">   334</span>		trim(a)
<a id="L335"></a><span class="ln">   335</span>	}
<a id="L336"></a><span class="ln">   336</span>	
<a id="L337"></a><span class="ln">   337</span>	<span class="comment">// Round a up to nd digits (or fewer).</span>
<a id="L338"></a><span class="ln">   338</span>	func (a *decimal) RoundUp(nd int) {
<a id="L339"></a><span class="ln">   339</span>		if nd &lt; 0 || nd &gt;= a.nd {
<a id="L340"></a><span class="ln">   340</span>			return
<a id="L341"></a><span class="ln">   341</span>		}
<a id="L342"></a><span class="ln">   342</span>	
<a id="L343"></a><span class="ln">   343</span>		<span class="comment">// round up</span>
<a id="L344"></a><span class="ln">   344</span>		for i := nd - 1; i &gt;= 0; i-- {
<a id="L345"></a><span class="ln">   345</span>			c := a.d[i]
<a id="L346"></a><span class="ln">   346</span>			if c &lt; &#39;9&#39; { <span class="comment">// can stop after this digit</span>
<a id="L347"></a><span class="ln">   347</span>				a.d[i]++
<a id="L348"></a><span class="ln">   348</span>				a.nd = i + 1
<a id="L349"></a><span class="ln">   349</span>				return
<a id="L350"></a><span class="ln">   350</span>			}
<a id="L351"></a><span class="ln">   351</span>		}
<a id="L352"></a><span class="ln">   352</span>	
<a id="L353"></a><span class="ln">   353</span>		<span class="comment">// Number is all 9s.</span>
<a id="L354"></a><span class="ln">   354</span>		<span class="comment">// Change to single 1 with adjusted decimal point.</span>
<a id="L355"></a><span class="ln">   355</span>		a.d[0] = &#39;1&#39;
<a id="L356"></a><span class="ln">   356</span>		a.nd = 1
<a id="L357"></a><span class="ln">   357</span>		a.dp++
<a id="L358"></a><span class="ln">   358</span>	}
<a id="L359"></a><span class="ln">   359</span>	
<a id="L360"></a><span class="ln">   360</span>	<span class="comment">// Extract integer part, rounded appropriately.</span>
<a id="L361"></a><span class="ln">   361</span>	<span class="comment">// No guarantees about overflow.</span>
<a id="L362"></a><span class="ln">   362</span>	func (a *decimal) RoundedInteger() uint64 {
<a id="L363"></a><span class="ln">   363</span>		if a.dp &gt; 20 {
<a id="L364"></a><span class="ln">   364</span>			return 0xFFFFFFFFFFFFFFFF
<a id="L365"></a><span class="ln">   365</span>		}
<a id="L366"></a><span class="ln">   366</span>		var i int
<a id="L367"></a><span class="ln">   367</span>		n := uint64(0)
<a id="L368"></a><span class="ln">   368</span>		for i = 0; i &lt; a.dp &amp;&amp; i &lt; a.nd; i++ {
<a id="L369"></a><span class="ln">   369</span>			n = n*10 + uint64(a.d[i]-&#39;0&#39;)
<a id="L370"></a><span class="ln">   370</span>		}
<a id="L371"></a><span class="ln">   371</span>		for ; i &lt; a.dp; i++ {
<a id="L372"></a><span class="ln">   372</span>			n *= 10
<a id="L373"></a><span class="ln">   373</span>		}
<a id="L374"></a><span class="ln">   374</span>		if shouldRoundUp(a, a.dp) {
<a id="L375"></a><span class="ln">   375</span>			n++
<a id="L376"></a><span class="ln">   376</span>		}
<a id="L377"></a><span class="ln">   377</span>		return n
<a id="L378"></a><span class="ln">   378</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

