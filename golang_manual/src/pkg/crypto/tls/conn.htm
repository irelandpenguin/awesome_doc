<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/crypto/tls/conn.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/crypto/tls/conn.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// TLS low level connection and record layer</span>
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	package tls
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;bytes&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;crypto/cipher&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;crypto/subtle&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;crypto/x509&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;errors&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;io&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;net&#34;
<a id="L17"></a><span class="ln">    17</span>		&#34;sync&#34;
<a id="L18"></a><span class="ln">    18</span>		&#34;time&#34;
<a id="L19"></a><span class="ln">    19</span>	)
<a id="L20"></a><span class="ln">    20</span>	
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// A Conn represents a secured connection.</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// It implements the net.Conn interface.</span>
<a id="L23"></a><span class="ln">    23</span>	type Conn struct {
<a id="L24"></a><span class="ln">    24</span>		<span class="comment">// constant</span>
<a id="L25"></a><span class="ln">    25</span>		conn     net.Conn
<a id="L26"></a><span class="ln">    26</span>		isClient bool
<a id="L27"></a><span class="ln">    27</span>	
<a id="L28"></a><span class="ln">    28</span>		<span class="comment">// constant after handshake; protected by handshakeMutex</span>
<a id="L29"></a><span class="ln">    29</span>		handshakeMutex    sync.Mutex <span class="comment">// handshakeMutex &lt; in.Mutex, out.Mutex, errMutex</span>
<a id="L30"></a><span class="ln">    30</span>		vers              uint16     <span class="comment">// TLS version</span>
<a id="L31"></a><span class="ln">    31</span>		haveVers          bool       <span class="comment">// version has been negotiated</span>
<a id="L32"></a><span class="ln">    32</span>		config            *Config    <span class="comment">// configuration passed to constructor</span>
<a id="L33"></a><span class="ln">    33</span>		handshakeComplete bool
<a id="L34"></a><span class="ln">    34</span>		cipherSuite       uint16
<a id="L35"></a><span class="ln">    35</span>		ocspResponse      []byte <span class="comment">// stapled OCSP response</span>
<a id="L36"></a><span class="ln">    36</span>		peerCertificates  []*x509.Certificate
<a id="L37"></a><span class="ln">    37</span>		<span class="comment">// verifiedChains contains the certificate chains that we built, as</span>
<a id="L38"></a><span class="ln">    38</span>		<span class="comment">// opposed to the ones presented by the server.</span>
<a id="L39"></a><span class="ln">    39</span>		verifiedChains [][]*x509.Certificate
<a id="L40"></a><span class="ln">    40</span>		<span class="comment">// serverName contains the server name indicated by the client, if any.</span>
<a id="L41"></a><span class="ln">    41</span>		serverName string
<a id="L42"></a><span class="ln">    42</span>	
<a id="L43"></a><span class="ln">    43</span>		clientProtocol         string
<a id="L44"></a><span class="ln">    44</span>		clientProtocolFallback bool
<a id="L45"></a><span class="ln">    45</span>	
<a id="L46"></a><span class="ln">    46</span>		<span class="comment">// first permanent error</span>
<a id="L47"></a><span class="ln">    47</span>		errMutex sync.Mutex
<a id="L48"></a><span class="ln">    48</span>		err      error
<a id="L49"></a><span class="ln">    49</span>	
<a id="L50"></a><span class="ln">    50</span>		<span class="comment">// input/output</span>
<a id="L51"></a><span class="ln">    51</span>		in, out  halfConn     <span class="comment">// in.Mutex &lt; out.Mutex</span>
<a id="L52"></a><span class="ln">    52</span>		rawInput *block       <span class="comment">// raw input, right off the wire</span>
<a id="L53"></a><span class="ln">    53</span>		input    *block       <span class="comment">// application data waiting to be read</span>
<a id="L54"></a><span class="ln">    54</span>		hand     bytes.Buffer <span class="comment">// handshake data waiting to be read</span>
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>		tmp [16]byte
<a id="L57"></a><span class="ln">    57</span>	}
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>	func (c *Conn) setError(err error) error {
<a id="L60"></a><span class="ln">    60</span>		c.errMutex.Lock()
<a id="L61"></a><span class="ln">    61</span>		defer c.errMutex.Unlock()
<a id="L62"></a><span class="ln">    62</span>	
<a id="L63"></a><span class="ln">    63</span>		if c.err == nil {
<a id="L64"></a><span class="ln">    64</span>			c.err = err
<a id="L65"></a><span class="ln">    65</span>		}
<a id="L66"></a><span class="ln">    66</span>		return err
<a id="L67"></a><span class="ln">    67</span>	}
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>	func (c *Conn) error() error {
<a id="L70"></a><span class="ln">    70</span>		c.errMutex.Lock()
<a id="L71"></a><span class="ln">    71</span>		defer c.errMutex.Unlock()
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>		return c.err
<a id="L74"></a><span class="ln">    74</span>	}
<a id="L75"></a><span class="ln">    75</span>	
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">// Access to net.Conn methods.</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// Cannot just embed net.Conn because that would</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// export the struct field too.</span>
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// LocalAddr returns the local network address.</span>
<a id="L81"></a><span class="ln">    81</span>	func (c *Conn) LocalAddr() net.Addr {
<a id="L82"></a><span class="ln">    82</span>		return c.conn.LocalAddr()
<a id="L83"></a><span class="ln">    83</span>	}
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">// RemoteAddr returns the remote network address.</span>
<a id="L86"></a><span class="ln">    86</span>	func (c *Conn) RemoteAddr() net.Addr {
<a id="L87"></a><span class="ln">    87</span>		return c.conn.RemoteAddr()
<a id="L88"></a><span class="ln">    88</span>	}
<a id="L89"></a><span class="ln">    89</span>	
<a id="L90"></a><span class="ln">    90</span>	<span class="comment">// SetDeadline sets the read and write deadlines associated with the connection.</span>
<a id="L91"></a><span class="ln">    91</span>	<span class="comment">// A zero value for t means Read and Write will not time out.</span>
<a id="L92"></a><span class="ln">    92</span>	<span class="comment">// After a Write has timed out, the TLS state is corrupt and all future writes will return the same error.</span>
<a id="L93"></a><span class="ln">    93</span>	func (c *Conn) SetDeadline(t time.Time) error {
<a id="L94"></a><span class="ln">    94</span>		return c.conn.SetDeadline(t)
<a id="L95"></a><span class="ln">    95</span>	}
<a id="L96"></a><span class="ln">    96</span>	
<a id="L97"></a><span class="ln">    97</span>	<span class="comment">// SetReadDeadline sets the read deadline on the underlying connection.</span>
<a id="L98"></a><span class="ln">    98</span>	<span class="comment">// A zero value for t means Read will not time out.</span>
<a id="L99"></a><span class="ln">    99</span>	func (c *Conn) SetReadDeadline(t time.Time) error {
<a id="L100"></a><span class="ln">   100</span>		return c.conn.SetReadDeadline(t)
<a id="L101"></a><span class="ln">   101</span>	}
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>	<span class="comment">// SetWriteDeadline sets the write deadline on the underlying conneciton.</span>
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">// A zero value for t means Write will not time out.</span>
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// After a Write has timed out, the TLS state is corrupt and all future writes will return the same error.</span>
<a id="L106"></a><span class="ln">   106</span>	func (c *Conn) SetWriteDeadline(t time.Time) error {
<a id="L107"></a><span class="ln">   107</span>		return c.conn.SetWriteDeadline(t)
<a id="L108"></a><span class="ln">   108</span>	}
<a id="L109"></a><span class="ln">   109</span>	
<a id="L110"></a><span class="ln">   110</span>	<span class="comment">// A halfConn represents one direction of the record layer</span>
<a id="L111"></a><span class="ln">   111</span>	<span class="comment">// connection, either sending or receiving.</span>
<a id="L112"></a><span class="ln">   112</span>	type halfConn struct {
<a id="L113"></a><span class="ln">   113</span>		sync.Mutex
<a id="L114"></a><span class="ln">   114</span>		version uint16      <span class="comment">// protocol version</span>
<a id="L115"></a><span class="ln">   115</span>		cipher  interface{} <span class="comment">// cipher algorithm</span>
<a id="L116"></a><span class="ln">   116</span>		mac     macFunction
<a id="L117"></a><span class="ln">   117</span>		seq     [8]byte <span class="comment">// 64-bit sequence number</span>
<a id="L118"></a><span class="ln">   118</span>		bfree   *block  <span class="comment">// list of free blocks</span>
<a id="L119"></a><span class="ln">   119</span>	
<a id="L120"></a><span class="ln">   120</span>		nextCipher interface{} <span class="comment">// next encryption state</span>
<a id="L121"></a><span class="ln">   121</span>		nextMac    macFunction <span class="comment">// next MAC algorithm</span>
<a id="L122"></a><span class="ln">   122</span>	
<a id="L123"></a><span class="ln">   123</span>		<span class="comment">// used to save allocating a new buffer for each MAC.</span>
<a id="L124"></a><span class="ln">   124</span>		inDigestBuf, outDigestBuf []byte
<a id="L125"></a><span class="ln">   125</span>	}
<a id="L126"></a><span class="ln">   126</span>	
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// prepareCipherSpec sets the encryption and MAC states</span>
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// that a subsequent changeCipherSpec will use.</span>
<a id="L129"></a><span class="ln">   129</span>	func (hc *halfConn) prepareCipherSpec(version uint16, cipher interface{}, mac macFunction) {
<a id="L130"></a><span class="ln">   130</span>		hc.version = version
<a id="L131"></a><span class="ln">   131</span>		hc.nextCipher = cipher
<a id="L132"></a><span class="ln">   132</span>		hc.nextMac = mac
<a id="L133"></a><span class="ln">   133</span>	}
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">// changeCipherSpec changes the encryption and MAC states</span>
<a id="L136"></a><span class="ln">   136</span>	<span class="comment">// to the ones previously passed to prepareCipherSpec.</span>
<a id="L137"></a><span class="ln">   137</span>	func (hc *halfConn) changeCipherSpec() error {
<a id="L138"></a><span class="ln">   138</span>		if hc.nextCipher == nil {
<a id="L139"></a><span class="ln">   139</span>			return alertInternalError
<a id="L140"></a><span class="ln">   140</span>		}
<a id="L141"></a><span class="ln">   141</span>		hc.cipher = hc.nextCipher
<a id="L142"></a><span class="ln">   142</span>		hc.mac = hc.nextMac
<a id="L143"></a><span class="ln">   143</span>		hc.nextCipher = nil
<a id="L144"></a><span class="ln">   144</span>		hc.nextMac = nil
<a id="L145"></a><span class="ln">   145</span>		return nil
<a id="L146"></a><span class="ln">   146</span>	}
<a id="L147"></a><span class="ln">   147</span>	
<a id="L148"></a><span class="ln">   148</span>	<span class="comment">// incSeq increments the sequence number.</span>
<a id="L149"></a><span class="ln">   149</span>	func (hc *halfConn) incSeq() {
<a id="L150"></a><span class="ln">   150</span>		for i := 7; i &gt;= 0; i-- {
<a id="L151"></a><span class="ln">   151</span>			hc.seq[i]++
<a id="L152"></a><span class="ln">   152</span>			if hc.seq[i] != 0 {
<a id="L153"></a><span class="ln">   153</span>				return
<a id="L154"></a><span class="ln">   154</span>			}
<a id="L155"></a><span class="ln">   155</span>		}
<a id="L156"></a><span class="ln">   156</span>	
<a id="L157"></a><span class="ln">   157</span>		<span class="comment">// Not allowed to let sequence number wrap.</span>
<a id="L158"></a><span class="ln">   158</span>		<span class="comment">// Instead, must renegotiate before it does.</span>
<a id="L159"></a><span class="ln">   159</span>		<span class="comment">// Not likely enough to bother.</span>
<a id="L160"></a><span class="ln">   160</span>		panic(&#34;TLS: sequence number wraparound&#34;)
<a id="L161"></a><span class="ln">   161</span>	}
<a id="L162"></a><span class="ln">   162</span>	
<a id="L163"></a><span class="ln">   163</span>	<span class="comment">// resetSeq resets the sequence number to zero.</span>
<a id="L164"></a><span class="ln">   164</span>	func (hc *halfConn) resetSeq() {
<a id="L165"></a><span class="ln">   165</span>		for i := range hc.seq {
<a id="L166"></a><span class="ln">   166</span>			hc.seq[i] = 0
<a id="L167"></a><span class="ln">   167</span>		}
<a id="L168"></a><span class="ln">   168</span>	}
<a id="L169"></a><span class="ln">   169</span>	
<a id="L170"></a><span class="ln">   170</span>	<span class="comment">// removePadding returns an unpadded slice, in constant time, which is a prefix</span>
<a id="L171"></a><span class="ln">   171</span>	<span class="comment">// of the input. It also returns a byte which is equal to 255 if the padding</span>
<a id="L172"></a><span class="ln">   172</span>	<span class="comment">// was valid and 0 otherwise. See RFC 2246, section 6.2.3.2</span>
<a id="L173"></a><span class="ln">   173</span>	func removePadding(payload []byte) ([]byte, byte) {
<a id="L174"></a><span class="ln">   174</span>		if len(payload) &lt; 1 {
<a id="L175"></a><span class="ln">   175</span>			return payload, 0
<a id="L176"></a><span class="ln">   176</span>		}
<a id="L177"></a><span class="ln">   177</span>	
<a id="L178"></a><span class="ln">   178</span>		paddingLen := payload[len(payload)-1]
<a id="L179"></a><span class="ln">   179</span>		t := uint(len(payload)-1) - uint(paddingLen)
<a id="L180"></a><span class="ln">   180</span>		<span class="comment">// if len(payload) &gt;= (paddingLen - 1) then the MSB of t is zero</span>
<a id="L181"></a><span class="ln">   181</span>		good := byte(int32(^t) &gt;&gt; 31)
<a id="L182"></a><span class="ln">   182</span>	
<a id="L183"></a><span class="ln">   183</span>		toCheck := 255 <span class="comment">// the maximum possible padding length</span>
<a id="L184"></a><span class="ln">   184</span>		<span class="comment">// The length of the padded data is public, so we can use an if here</span>
<a id="L185"></a><span class="ln">   185</span>		if toCheck+1 &gt; len(payload) {
<a id="L186"></a><span class="ln">   186</span>			toCheck = len(payload) - 1
<a id="L187"></a><span class="ln">   187</span>		}
<a id="L188"></a><span class="ln">   188</span>	
<a id="L189"></a><span class="ln">   189</span>		for i := 0; i &lt; toCheck; i++ {
<a id="L190"></a><span class="ln">   190</span>			t := uint(paddingLen) - uint(i)
<a id="L191"></a><span class="ln">   191</span>			<span class="comment">// if i &lt;= paddingLen then the MSB of t is zero</span>
<a id="L192"></a><span class="ln">   192</span>			mask := byte(int32(^t) &gt;&gt; 31)
<a id="L193"></a><span class="ln">   193</span>			b := payload[len(payload)-1-i]
<a id="L194"></a><span class="ln">   194</span>			good &amp;^= mask&amp;paddingLen ^ mask&amp;b
<a id="L195"></a><span class="ln">   195</span>		}
<a id="L196"></a><span class="ln">   196</span>	
<a id="L197"></a><span class="ln">   197</span>		<span class="comment">// We AND together the bits of good and replicate the result across</span>
<a id="L198"></a><span class="ln">   198</span>		<span class="comment">// all the bits.</span>
<a id="L199"></a><span class="ln">   199</span>		good &amp;= good &lt;&lt; 4
<a id="L200"></a><span class="ln">   200</span>		good &amp;= good &lt;&lt; 2
<a id="L201"></a><span class="ln">   201</span>		good &amp;= good &lt;&lt; 1
<a id="L202"></a><span class="ln">   202</span>		good = uint8(int8(good) &gt;&gt; 7)
<a id="L203"></a><span class="ln">   203</span>	
<a id="L204"></a><span class="ln">   204</span>		toRemove := good&amp;paddingLen + 1
<a id="L205"></a><span class="ln">   205</span>		return payload[:len(payload)-int(toRemove)], good
<a id="L206"></a><span class="ln">   206</span>	}
<a id="L207"></a><span class="ln">   207</span>	
<a id="L208"></a><span class="ln">   208</span>	<span class="comment">// removePaddingSSL30 is a replacement for removePadding in the case that the</span>
<a id="L209"></a><span class="ln">   209</span>	<span class="comment">// protocol version is SSLv3. In this version, the contents of the padding</span>
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// are random and cannot be checked.</span>
<a id="L211"></a><span class="ln">   211</span>	func removePaddingSSL30(payload []byte) ([]byte, byte) {
<a id="L212"></a><span class="ln">   212</span>		if len(payload) &lt; 1 {
<a id="L213"></a><span class="ln">   213</span>			return payload, 0
<a id="L214"></a><span class="ln">   214</span>		}
<a id="L215"></a><span class="ln">   215</span>	
<a id="L216"></a><span class="ln">   216</span>		paddingLen := int(payload[len(payload)-1]) + 1
<a id="L217"></a><span class="ln">   217</span>		if paddingLen &gt; len(payload) {
<a id="L218"></a><span class="ln">   218</span>			return payload, 0
<a id="L219"></a><span class="ln">   219</span>		}
<a id="L220"></a><span class="ln">   220</span>	
<a id="L221"></a><span class="ln">   221</span>		return payload[:len(payload)-paddingLen], 255
<a id="L222"></a><span class="ln">   222</span>	}
<a id="L223"></a><span class="ln">   223</span>	
<a id="L224"></a><span class="ln">   224</span>	func roundUp(a, b int) int {
<a id="L225"></a><span class="ln">   225</span>		return a + (b-a%b)%b
<a id="L226"></a><span class="ln">   226</span>	}
<a id="L227"></a><span class="ln">   227</span>	
<a id="L228"></a><span class="ln">   228</span>	<span class="comment">// decrypt checks and strips the mac and decrypts the data in b.</span>
<a id="L229"></a><span class="ln">   229</span>	func (hc *halfConn) decrypt(b *block) (bool, alert) {
<a id="L230"></a><span class="ln">   230</span>		<span class="comment">// pull out payload</span>
<a id="L231"></a><span class="ln">   231</span>		payload := b.data[recordHeaderLen:]
<a id="L232"></a><span class="ln">   232</span>	
<a id="L233"></a><span class="ln">   233</span>		macSize := 0
<a id="L234"></a><span class="ln">   234</span>		if hc.mac != nil {
<a id="L235"></a><span class="ln">   235</span>			macSize = hc.mac.Size()
<a id="L236"></a><span class="ln">   236</span>		}
<a id="L237"></a><span class="ln">   237</span>	
<a id="L238"></a><span class="ln">   238</span>		paddingGood := byte(255)
<a id="L239"></a><span class="ln">   239</span>	
<a id="L240"></a><span class="ln">   240</span>		<span class="comment">// decrypt</span>
<a id="L241"></a><span class="ln">   241</span>		if hc.cipher != nil {
<a id="L242"></a><span class="ln">   242</span>			switch c := hc.cipher.(type) {
<a id="L243"></a><span class="ln">   243</span>			case cipher.Stream:
<a id="L244"></a><span class="ln">   244</span>				c.XORKeyStream(payload, payload)
<a id="L245"></a><span class="ln">   245</span>			case cipher.BlockMode:
<a id="L246"></a><span class="ln">   246</span>				blockSize := c.BlockSize()
<a id="L247"></a><span class="ln">   247</span>	
<a id="L248"></a><span class="ln">   248</span>				if len(payload)%blockSize != 0 || len(payload) &lt; roundUp(macSize+1, blockSize) {
<a id="L249"></a><span class="ln">   249</span>					return false, alertBadRecordMAC
<a id="L250"></a><span class="ln">   250</span>				}
<a id="L251"></a><span class="ln">   251</span>	
<a id="L252"></a><span class="ln">   252</span>				c.CryptBlocks(payload, payload)
<a id="L253"></a><span class="ln">   253</span>				if hc.version == versionSSL30 {
<a id="L254"></a><span class="ln">   254</span>					payload, paddingGood = removePaddingSSL30(payload)
<a id="L255"></a><span class="ln">   255</span>				} else {
<a id="L256"></a><span class="ln">   256</span>					payload, paddingGood = removePadding(payload)
<a id="L257"></a><span class="ln">   257</span>				}
<a id="L258"></a><span class="ln">   258</span>				b.resize(recordHeaderLen + len(payload))
<a id="L259"></a><span class="ln">   259</span>	
<a id="L260"></a><span class="ln">   260</span>				<span class="comment">// note that we still have a timing side-channel in the</span>
<a id="L261"></a><span class="ln">   261</span>				<span class="comment">// MAC check, below. An attacker can align the record</span>
<a id="L262"></a><span class="ln">   262</span>				<span class="comment">// so that a correct padding will cause one less hash</span>
<a id="L263"></a><span class="ln">   263</span>				<span class="comment">// block to be calculated. Then they can iteratively</span>
<a id="L264"></a><span class="ln">   264</span>				<span class="comment">// decrypt a record by breaking each byte. See</span>
<a id="L265"></a><span class="ln">   265</span>				<span class="comment">// &#34;Password Interception in a SSL/TLS Channel&#34;, Brice</span>
<a id="L266"></a><span class="ln">   266</span>				<span class="comment">// Canvel et al.</span>
<a id="L267"></a><span class="ln">   267</span>				<span class="comment">//</span>
<a id="L268"></a><span class="ln">   268</span>				<span class="comment">// However, our behavior matches OpenSSL, so we leak</span>
<a id="L269"></a><span class="ln">   269</span>				<span class="comment">// only as much as they do.</span>
<a id="L270"></a><span class="ln">   270</span>			default:
<a id="L271"></a><span class="ln">   271</span>				panic(&#34;unknown cipher type&#34;)
<a id="L272"></a><span class="ln">   272</span>			}
<a id="L273"></a><span class="ln">   273</span>		}
<a id="L274"></a><span class="ln">   274</span>	
<a id="L275"></a><span class="ln">   275</span>		<span class="comment">// check, strip mac</span>
<a id="L276"></a><span class="ln">   276</span>		if hc.mac != nil {
<a id="L277"></a><span class="ln">   277</span>			if len(payload) &lt; macSize {
<a id="L278"></a><span class="ln">   278</span>				return false, alertBadRecordMAC
<a id="L279"></a><span class="ln">   279</span>			}
<a id="L280"></a><span class="ln">   280</span>	
<a id="L281"></a><span class="ln">   281</span>			<span class="comment">// strip mac off payload, b.data</span>
<a id="L282"></a><span class="ln">   282</span>			n := len(payload) - macSize
<a id="L283"></a><span class="ln">   283</span>			b.data[3] = byte(n &gt;&gt; 8)
<a id="L284"></a><span class="ln">   284</span>			b.data[4] = byte(n)
<a id="L285"></a><span class="ln">   285</span>			b.resize(recordHeaderLen + n)
<a id="L286"></a><span class="ln">   286</span>			remoteMAC := payload[n:]
<a id="L287"></a><span class="ln">   287</span>			localMAC := hc.mac.MAC(hc.inDigestBuf, hc.seq[0:], b.data)
<a id="L288"></a><span class="ln">   288</span>			hc.incSeq()
<a id="L289"></a><span class="ln">   289</span>	
<a id="L290"></a><span class="ln">   290</span>			if subtle.ConstantTimeCompare(localMAC, remoteMAC) != 1 || paddingGood != 255 {
<a id="L291"></a><span class="ln">   291</span>				return false, alertBadRecordMAC
<a id="L292"></a><span class="ln">   292</span>			}
<a id="L293"></a><span class="ln">   293</span>			hc.inDigestBuf = localMAC
<a id="L294"></a><span class="ln">   294</span>		}
<a id="L295"></a><span class="ln">   295</span>	
<a id="L296"></a><span class="ln">   296</span>		return true, 0
<a id="L297"></a><span class="ln">   297</span>	}
<a id="L298"></a><span class="ln">   298</span>	
<a id="L299"></a><span class="ln">   299</span>	<span class="comment">// padToBlockSize calculates the needed padding block, if any, for a payload.</span>
<a id="L300"></a><span class="ln">   300</span>	<span class="comment">// On exit, prefix aliases payload and extends to the end of the last full</span>
<a id="L301"></a><span class="ln">   301</span>	<span class="comment">// block of payload. finalBlock is a fresh slice which contains the contents of</span>
<a id="L302"></a><span class="ln">   302</span>	<span class="comment">// any suffix of payload as well as the needed padding to make finalBlock a</span>
<a id="L303"></a><span class="ln">   303</span>	<span class="comment">// full block.</span>
<a id="L304"></a><span class="ln">   304</span>	func padToBlockSize(payload []byte, blockSize int) (prefix, finalBlock []byte) {
<a id="L305"></a><span class="ln">   305</span>		overrun := len(payload) % blockSize
<a id="L306"></a><span class="ln">   306</span>		paddingLen := blockSize - overrun
<a id="L307"></a><span class="ln">   307</span>		prefix = payload[:len(payload)-overrun]
<a id="L308"></a><span class="ln">   308</span>		finalBlock = make([]byte, blockSize)
<a id="L309"></a><span class="ln">   309</span>		copy(finalBlock, payload[len(payload)-overrun:])
<a id="L310"></a><span class="ln">   310</span>		for i := overrun; i &lt; blockSize; i++ {
<a id="L311"></a><span class="ln">   311</span>			finalBlock[i] = byte(paddingLen - 1)
<a id="L312"></a><span class="ln">   312</span>		}
<a id="L313"></a><span class="ln">   313</span>		return
<a id="L314"></a><span class="ln">   314</span>	}
<a id="L315"></a><span class="ln">   315</span>	
<a id="L316"></a><span class="ln">   316</span>	<span class="comment">// encrypt encrypts and macs the data in b.</span>
<a id="L317"></a><span class="ln">   317</span>	func (hc *halfConn) encrypt(b *block) (bool, alert) {
<a id="L318"></a><span class="ln">   318</span>		<span class="comment">// mac</span>
<a id="L319"></a><span class="ln">   319</span>		if hc.mac != nil {
<a id="L320"></a><span class="ln">   320</span>			mac := hc.mac.MAC(hc.outDigestBuf, hc.seq[0:], b.data)
<a id="L321"></a><span class="ln">   321</span>			hc.incSeq()
<a id="L322"></a><span class="ln">   322</span>	
<a id="L323"></a><span class="ln">   323</span>			n := len(b.data)
<a id="L324"></a><span class="ln">   324</span>			b.resize(n + len(mac))
<a id="L325"></a><span class="ln">   325</span>			copy(b.data[n:], mac)
<a id="L326"></a><span class="ln">   326</span>			hc.outDigestBuf = mac
<a id="L327"></a><span class="ln">   327</span>		}
<a id="L328"></a><span class="ln">   328</span>	
<a id="L329"></a><span class="ln">   329</span>		payload := b.data[recordHeaderLen:]
<a id="L330"></a><span class="ln">   330</span>	
<a id="L331"></a><span class="ln">   331</span>		<span class="comment">// encrypt</span>
<a id="L332"></a><span class="ln">   332</span>		if hc.cipher != nil {
<a id="L333"></a><span class="ln">   333</span>			switch c := hc.cipher.(type) {
<a id="L334"></a><span class="ln">   334</span>			case cipher.Stream:
<a id="L335"></a><span class="ln">   335</span>				c.XORKeyStream(payload, payload)
<a id="L336"></a><span class="ln">   336</span>			case cipher.BlockMode:
<a id="L337"></a><span class="ln">   337</span>				prefix, finalBlock := padToBlockSize(payload, c.BlockSize())
<a id="L338"></a><span class="ln">   338</span>				b.resize(recordHeaderLen + len(prefix) + len(finalBlock))
<a id="L339"></a><span class="ln">   339</span>				c.CryptBlocks(b.data[recordHeaderLen:], prefix)
<a id="L340"></a><span class="ln">   340</span>				c.CryptBlocks(b.data[recordHeaderLen+len(prefix):], finalBlock)
<a id="L341"></a><span class="ln">   341</span>			default:
<a id="L342"></a><span class="ln">   342</span>				panic(&#34;unknown cipher type&#34;)
<a id="L343"></a><span class="ln">   343</span>			}
<a id="L344"></a><span class="ln">   344</span>		}
<a id="L345"></a><span class="ln">   345</span>	
<a id="L346"></a><span class="ln">   346</span>		<span class="comment">// update length to include MAC and any block padding needed.</span>
<a id="L347"></a><span class="ln">   347</span>		n := len(b.data) - recordHeaderLen
<a id="L348"></a><span class="ln">   348</span>		b.data[3] = byte(n &gt;&gt; 8)
<a id="L349"></a><span class="ln">   349</span>		b.data[4] = byte(n)
<a id="L350"></a><span class="ln">   350</span>	
<a id="L351"></a><span class="ln">   351</span>		return true, 0
<a id="L352"></a><span class="ln">   352</span>	}
<a id="L353"></a><span class="ln">   353</span>	
<a id="L354"></a><span class="ln">   354</span>	<span class="comment">// A block is a simple data buffer.</span>
<a id="L355"></a><span class="ln">   355</span>	type block struct {
<a id="L356"></a><span class="ln">   356</span>		data []byte
<a id="L357"></a><span class="ln">   357</span>		off  int <span class="comment">// index for Read</span>
<a id="L358"></a><span class="ln">   358</span>		link *block
<a id="L359"></a><span class="ln">   359</span>	}
<a id="L360"></a><span class="ln">   360</span>	
<a id="L361"></a><span class="ln">   361</span>	<span class="comment">// resize resizes block to be n bytes, growing if necessary.</span>
<a id="L362"></a><span class="ln">   362</span>	func (b *block) resize(n int) {
<a id="L363"></a><span class="ln">   363</span>		if n &gt; cap(b.data) {
<a id="L364"></a><span class="ln">   364</span>			b.reserve(n)
<a id="L365"></a><span class="ln">   365</span>		}
<a id="L366"></a><span class="ln">   366</span>		b.data = b.data[0:n]
<a id="L367"></a><span class="ln">   367</span>	}
<a id="L368"></a><span class="ln">   368</span>	
<a id="L369"></a><span class="ln">   369</span>	<span class="comment">// reserve makes sure that block contains a capacity of at least n bytes.</span>
<a id="L370"></a><span class="ln">   370</span>	func (b *block) reserve(n int) {
<a id="L371"></a><span class="ln">   371</span>		if cap(b.data) &gt;= n {
<a id="L372"></a><span class="ln">   372</span>			return
<a id="L373"></a><span class="ln">   373</span>		}
<a id="L374"></a><span class="ln">   374</span>		m := cap(b.data)
<a id="L375"></a><span class="ln">   375</span>		if m == 0 {
<a id="L376"></a><span class="ln">   376</span>			m = 1024
<a id="L377"></a><span class="ln">   377</span>		}
<a id="L378"></a><span class="ln">   378</span>		for m &lt; n {
<a id="L379"></a><span class="ln">   379</span>			m *= 2
<a id="L380"></a><span class="ln">   380</span>		}
<a id="L381"></a><span class="ln">   381</span>		data := make([]byte, len(b.data), m)
<a id="L382"></a><span class="ln">   382</span>		copy(data, b.data)
<a id="L383"></a><span class="ln">   383</span>		b.data = data
<a id="L384"></a><span class="ln">   384</span>	}
<a id="L385"></a><span class="ln">   385</span>	
<a id="L386"></a><span class="ln">   386</span>	<span class="comment">// readFromUntil reads from r into b until b contains at least n bytes</span>
<a id="L387"></a><span class="ln">   387</span>	<span class="comment">// or else returns an error.</span>
<a id="L388"></a><span class="ln">   388</span>	func (b *block) readFromUntil(r io.Reader, n int) error {
<a id="L389"></a><span class="ln">   389</span>		<span class="comment">// quick case</span>
<a id="L390"></a><span class="ln">   390</span>		if len(b.data) &gt;= n {
<a id="L391"></a><span class="ln">   391</span>			return nil
<a id="L392"></a><span class="ln">   392</span>		}
<a id="L393"></a><span class="ln">   393</span>	
<a id="L394"></a><span class="ln">   394</span>		<span class="comment">// read until have enough.</span>
<a id="L395"></a><span class="ln">   395</span>		b.reserve(n)
<a id="L396"></a><span class="ln">   396</span>		for {
<a id="L397"></a><span class="ln">   397</span>			m, err := r.Read(b.data[len(b.data):cap(b.data)])
<a id="L398"></a><span class="ln">   398</span>			b.data = b.data[0 : len(b.data)+m]
<a id="L399"></a><span class="ln">   399</span>			if len(b.data) &gt;= n {
<a id="L400"></a><span class="ln">   400</span>				break
<a id="L401"></a><span class="ln">   401</span>			}
<a id="L402"></a><span class="ln">   402</span>			if err != nil {
<a id="L403"></a><span class="ln">   403</span>				return err
<a id="L404"></a><span class="ln">   404</span>			}
<a id="L405"></a><span class="ln">   405</span>		}
<a id="L406"></a><span class="ln">   406</span>		return nil
<a id="L407"></a><span class="ln">   407</span>	}
<a id="L408"></a><span class="ln">   408</span>	
<a id="L409"></a><span class="ln">   409</span>	func (b *block) Read(p []byte) (n int, err error) {
<a id="L410"></a><span class="ln">   410</span>		n = copy(p, b.data[b.off:])
<a id="L411"></a><span class="ln">   411</span>		b.off += n
<a id="L412"></a><span class="ln">   412</span>		return
<a id="L413"></a><span class="ln">   413</span>	}
<a id="L414"></a><span class="ln">   414</span>	
<a id="L415"></a><span class="ln">   415</span>	<span class="comment">// newBlock allocates a new block, from hc&#39;s free list if possible.</span>
<a id="L416"></a><span class="ln">   416</span>	func (hc *halfConn) newBlock() *block {
<a id="L417"></a><span class="ln">   417</span>		b := hc.bfree
<a id="L418"></a><span class="ln">   418</span>		if b == nil {
<a id="L419"></a><span class="ln">   419</span>			return new(block)
<a id="L420"></a><span class="ln">   420</span>		}
<a id="L421"></a><span class="ln">   421</span>		hc.bfree = b.link
<a id="L422"></a><span class="ln">   422</span>		b.link = nil
<a id="L423"></a><span class="ln">   423</span>		b.resize(0)
<a id="L424"></a><span class="ln">   424</span>		return b
<a id="L425"></a><span class="ln">   425</span>	}
<a id="L426"></a><span class="ln">   426</span>	
<a id="L427"></a><span class="ln">   427</span>	<span class="comment">// freeBlock returns a block to hc&#39;s free list.</span>
<a id="L428"></a><span class="ln">   428</span>	<span class="comment">// The protocol is such that each side only has a block or two on</span>
<a id="L429"></a><span class="ln">   429</span>	<span class="comment">// its free list at a time, so there&#39;s no need to worry about</span>
<a id="L430"></a><span class="ln">   430</span>	<span class="comment">// trimming the list, etc.</span>
<a id="L431"></a><span class="ln">   431</span>	func (hc *halfConn) freeBlock(b *block) {
<a id="L432"></a><span class="ln">   432</span>		b.link = hc.bfree
<a id="L433"></a><span class="ln">   433</span>		hc.bfree = b
<a id="L434"></a><span class="ln">   434</span>	}
<a id="L435"></a><span class="ln">   435</span>	
<a id="L436"></a><span class="ln">   436</span>	<span class="comment">// splitBlock splits a block after the first n bytes,</span>
<a id="L437"></a><span class="ln">   437</span>	<span class="comment">// returning a block with those n bytes and a</span>
<a id="L438"></a><span class="ln">   438</span>	<span class="comment">// block with the remainder.  the latter may be nil.</span>
<a id="L439"></a><span class="ln">   439</span>	func (hc *halfConn) splitBlock(b *block, n int) (*block, *block) {
<a id="L440"></a><span class="ln">   440</span>		if len(b.data) &lt;= n {
<a id="L441"></a><span class="ln">   441</span>			return b, nil
<a id="L442"></a><span class="ln">   442</span>		}
<a id="L443"></a><span class="ln">   443</span>		bb := hc.newBlock()
<a id="L444"></a><span class="ln">   444</span>		bb.resize(len(b.data) - n)
<a id="L445"></a><span class="ln">   445</span>		copy(bb.data, b.data[n:])
<a id="L446"></a><span class="ln">   446</span>		b.data = b.data[0:n]
<a id="L447"></a><span class="ln">   447</span>		return b, bb
<a id="L448"></a><span class="ln">   448</span>	}
<a id="L449"></a><span class="ln">   449</span>	
<a id="L450"></a><span class="ln">   450</span>	<span class="comment">// readRecord reads the next TLS record from the connection</span>
<a id="L451"></a><span class="ln">   451</span>	<span class="comment">// and updates the record layer state.</span>
<a id="L452"></a><span class="ln">   452</span>	<span class="comment">// c.in.Mutex &lt;= L; c.input == nil.</span>
<a id="L453"></a><span class="ln">   453</span>	func (c *Conn) readRecord(want recordType) error {
<a id="L454"></a><span class="ln">   454</span>		<span class="comment">// Caller must be in sync with connection:</span>
<a id="L455"></a><span class="ln">   455</span>		<span class="comment">// handshake data if handshake not yet completed,</span>
<a id="L456"></a><span class="ln">   456</span>		<span class="comment">// else application data.  (We don&#39;t support renegotiation.)</span>
<a id="L457"></a><span class="ln">   457</span>		switch want {
<a id="L458"></a><span class="ln">   458</span>		default:
<a id="L459"></a><span class="ln">   459</span>			return c.sendAlert(alertInternalError)
<a id="L460"></a><span class="ln">   460</span>		case recordTypeHandshake, recordTypeChangeCipherSpec:
<a id="L461"></a><span class="ln">   461</span>			if c.handshakeComplete {
<a id="L462"></a><span class="ln">   462</span>				return c.sendAlert(alertInternalError)
<a id="L463"></a><span class="ln">   463</span>			}
<a id="L464"></a><span class="ln">   464</span>		case recordTypeApplicationData:
<a id="L465"></a><span class="ln">   465</span>			if !c.handshakeComplete {
<a id="L466"></a><span class="ln">   466</span>				return c.sendAlert(alertInternalError)
<a id="L467"></a><span class="ln">   467</span>			}
<a id="L468"></a><span class="ln">   468</span>		}
<a id="L469"></a><span class="ln">   469</span>	
<a id="L470"></a><span class="ln">   470</span>	Again:
<a id="L471"></a><span class="ln">   471</span>		if c.rawInput == nil {
<a id="L472"></a><span class="ln">   472</span>			c.rawInput = c.in.newBlock()
<a id="L473"></a><span class="ln">   473</span>		}
<a id="L474"></a><span class="ln">   474</span>		b := c.rawInput
<a id="L475"></a><span class="ln">   475</span>	
<a id="L476"></a><span class="ln">   476</span>		<span class="comment">// Read header, payload.</span>
<a id="L477"></a><span class="ln">   477</span>		if err := b.readFromUntil(c.conn, recordHeaderLen); err != nil {
<a id="L478"></a><span class="ln">   478</span>			<span class="comment">// RFC suggests that EOF without an alertCloseNotify is</span>
<a id="L479"></a><span class="ln">   479</span>			<span class="comment">// an error, but popular web sites seem to do this,</span>
<a id="L480"></a><span class="ln">   480</span>			<span class="comment">// so we can&#39;t make it an error.</span>
<a id="L481"></a><span class="ln">   481</span>			<span class="comment">// if err == io.EOF {</span>
<a id="L482"></a><span class="ln">   482</span>			<span class="comment">// 	err = io.ErrUnexpectedEOF</span>
<a id="L483"></a><span class="ln">   483</span>			<span class="comment">// }</span>
<a id="L484"></a><span class="ln">   484</span>			if e, ok := err.(net.Error); !ok || !e.Temporary() {
<a id="L485"></a><span class="ln">   485</span>				c.setError(err)
<a id="L486"></a><span class="ln">   486</span>			}
<a id="L487"></a><span class="ln">   487</span>			return err
<a id="L488"></a><span class="ln">   488</span>		}
<a id="L489"></a><span class="ln">   489</span>		typ := recordType(b.data[0])
<a id="L490"></a><span class="ln">   490</span>		vers := uint16(b.data[1])&lt;&lt;8 | uint16(b.data[2])
<a id="L491"></a><span class="ln">   491</span>		n := int(b.data[3])&lt;&lt;8 | int(b.data[4])
<a id="L492"></a><span class="ln">   492</span>		if c.haveVers &amp;&amp; vers != c.vers {
<a id="L493"></a><span class="ln">   493</span>			return c.sendAlert(alertProtocolVersion)
<a id="L494"></a><span class="ln">   494</span>		}
<a id="L495"></a><span class="ln">   495</span>		if n &gt; maxCiphertext {
<a id="L496"></a><span class="ln">   496</span>			return c.sendAlert(alertRecordOverflow)
<a id="L497"></a><span class="ln">   497</span>		}
<a id="L498"></a><span class="ln">   498</span>		if !c.haveVers {
<a id="L499"></a><span class="ln">   499</span>			<span class="comment">// First message, be extra suspicious:</span>
<a id="L500"></a><span class="ln">   500</span>			<span class="comment">// this might not be a TLS client.</span>
<a id="L501"></a><span class="ln">   501</span>			<span class="comment">// Bail out before reading a full &#39;body&#39;, if possible.</span>
<a id="L502"></a><span class="ln">   502</span>			<span class="comment">// The current max version is 3.1. </span>
<a id="L503"></a><span class="ln">   503</span>			<span class="comment">// If the version is &gt;= 16.0, it&#39;s probably not real.</span>
<a id="L504"></a><span class="ln">   504</span>			<span class="comment">// Similarly, a clientHello message encodes in</span>
<a id="L505"></a><span class="ln">   505</span>			<span class="comment">// well under a kilobyte.  If the length is &gt;= 12 kB,</span>
<a id="L506"></a><span class="ln">   506</span>			<span class="comment">// it&#39;s probably not real.</span>
<a id="L507"></a><span class="ln">   507</span>			if (typ != recordTypeAlert &amp;&amp; typ != want) || vers &gt;= 0x1000 || n &gt;= 0x3000 {
<a id="L508"></a><span class="ln">   508</span>				return c.sendAlert(alertUnexpectedMessage)
<a id="L509"></a><span class="ln">   509</span>			}
<a id="L510"></a><span class="ln">   510</span>		}
<a id="L511"></a><span class="ln">   511</span>		if err := b.readFromUntil(c.conn, recordHeaderLen+n); err != nil {
<a id="L512"></a><span class="ln">   512</span>			if err == io.EOF {
<a id="L513"></a><span class="ln">   513</span>				err = io.ErrUnexpectedEOF
<a id="L514"></a><span class="ln">   514</span>			}
<a id="L515"></a><span class="ln">   515</span>			if e, ok := err.(net.Error); !ok || !e.Temporary() {
<a id="L516"></a><span class="ln">   516</span>				c.setError(err)
<a id="L517"></a><span class="ln">   517</span>			}
<a id="L518"></a><span class="ln">   518</span>			return err
<a id="L519"></a><span class="ln">   519</span>		}
<a id="L520"></a><span class="ln">   520</span>	
<a id="L521"></a><span class="ln">   521</span>		<span class="comment">// Process message.</span>
<a id="L522"></a><span class="ln">   522</span>		b, c.rawInput = c.in.splitBlock(b, recordHeaderLen+n)
<a id="L523"></a><span class="ln">   523</span>		b.off = recordHeaderLen
<a id="L524"></a><span class="ln">   524</span>		if ok, err := c.in.decrypt(b); !ok {
<a id="L525"></a><span class="ln">   525</span>			return c.sendAlert(err)
<a id="L526"></a><span class="ln">   526</span>		}
<a id="L527"></a><span class="ln">   527</span>		data := b.data[b.off:]
<a id="L528"></a><span class="ln">   528</span>		if len(data) &gt; maxPlaintext {
<a id="L529"></a><span class="ln">   529</span>			c.sendAlert(alertRecordOverflow)
<a id="L530"></a><span class="ln">   530</span>			c.in.freeBlock(b)
<a id="L531"></a><span class="ln">   531</span>			return c.error()
<a id="L532"></a><span class="ln">   532</span>		}
<a id="L533"></a><span class="ln">   533</span>	
<a id="L534"></a><span class="ln">   534</span>		switch typ {
<a id="L535"></a><span class="ln">   535</span>		default:
<a id="L536"></a><span class="ln">   536</span>			c.sendAlert(alertUnexpectedMessage)
<a id="L537"></a><span class="ln">   537</span>	
<a id="L538"></a><span class="ln">   538</span>		case recordTypeAlert:
<a id="L539"></a><span class="ln">   539</span>			if len(data) != 2 {
<a id="L540"></a><span class="ln">   540</span>				c.sendAlert(alertUnexpectedMessage)
<a id="L541"></a><span class="ln">   541</span>				break
<a id="L542"></a><span class="ln">   542</span>			}
<a id="L543"></a><span class="ln">   543</span>			if alert(data[1]) == alertCloseNotify {
<a id="L544"></a><span class="ln">   544</span>				c.setError(io.EOF)
<a id="L545"></a><span class="ln">   545</span>				break
<a id="L546"></a><span class="ln">   546</span>			}
<a id="L547"></a><span class="ln">   547</span>			switch data[0] {
<a id="L548"></a><span class="ln">   548</span>			case alertLevelWarning:
<a id="L549"></a><span class="ln">   549</span>				<span class="comment">// drop on the floor</span>
<a id="L550"></a><span class="ln">   550</span>				c.in.freeBlock(b)
<a id="L551"></a><span class="ln">   551</span>				goto Again
<a id="L552"></a><span class="ln">   552</span>			case alertLevelError:
<a id="L553"></a><span class="ln">   553</span>				c.setError(&amp;net.OpError{Op: &#34;remote error&#34;, Err: alert(data[1])})
<a id="L554"></a><span class="ln">   554</span>			default:
<a id="L555"></a><span class="ln">   555</span>				c.sendAlert(alertUnexpectedMessage)
<a id="L556"></a><span class="ln">   556</span>			}
<a id="L557"></a><span class="ln">   557</span>	
<a id="L558"></a><span class="ln">   558</span>		case recordTypeChangeCipherSpec:
<a id="L559"></a><span class="ln">   559</span>			if typ != want || len(data) != 1 || data[0] != 1 {
<a id="L560"></a><span class="ln">   560</span>				c.sendAlert(alertUnexpectedMessage)
<a id="L561"></a><span class="ln">   561</span>				break
<a id="L562"></a><span class="ln">   562</span>			}
<a id="L563"></a><span class="ln">   563</span>			err := c.in.changeCipherSpec()
<a id="L564"></a><span class="ln">   564</span>			if err != nil {
<a id="L565"></a><span class="ln">   565</span>				c.sendAlert(err.(alert))
<a id="L566"></a><span class="ln">   566</span>			}
<a id="L567"></a><span class="ln">   567</span>	
<a id="L568"></a><span class="ln">   568</span>		case recordTypeApplicationData:
<a id="L569"></a><span class="ln">   569</span>			if typ != want {
<a id="L570"></a><span class="ln">   570</span>				c.sendAlert(alertUnexpectedMessage)
<a id="L571"></a><span class="ln">   571</span>				break
<a id="L572"></a><span class="ln">   572</span>			}
<a id="L573"></a><span class="ln">   573</span>			c.input = b
<a id="L574"></a><span class="ln">   574</span>			b = nil
<a id="L575"></a><span class="ln">   575</span>	
<a id="L576"></a><span class="ln">   576</span>		case recordTypeHandshake:
<a id="L577"></a><span class="ln">   577</span>			<span class="comment">// TODO(rsc): Should at least pick off connection close.</span>
<a id="L578"></a><span class="ln">   578</span>			if typ != want {
<a id="L579"></a><span class="ln">   579</span>				return c.sendAlert(alertNoRenegotiation)
<a id="L580"></a><span class="ln">   580</span>			}
<a id="L581"></a><span class="ln">   581</span>			c.hand.Write(data)
<a id="L582"></a><span class="ln">   582</span>		}
<a id="L583"></a><span class="ln">   583</span>	
<a id="L584"></a><span class="ln">   584</span>		if b != nil {
<a id="L585"></a><span class="ln">   585</span>			c.in.freeBlock(b)
<a id="L586"></a><span class="ln">   586</span>		}
<a id="L587"></a><span class="ln">   587</span>		return c.error()
<a id="L588"></a><span class="ln">   588</span>	}
<a id="L589"></a><span class="ln">   589</span>	
<a id="L590"></a><span class="ln">   590</span>	<span class="comment">// sendAlert sends a TLS alert message.</span>
<a id="L591"></a><span class="ln">   591</span>	<span class="comment">// c.out.Mutex &lt;= L.</span>
<a id="L592"></a><span class="ln">   592</span>	func (c *Conn) sendAlertLocked(err alert) error {
<a id="L593"></a><span class="ln">   593</span>		c.tmp[0] = alertLevelError
<a id="L594"></a><span class="ln">   594</span>		if err == alertNoRenegotiation {
<a id="L595"></a><span class="ln">   595</span>			c.tmp[0] = alertLevelWarning
<a id="L596"></a><span class="ln">   596</span>		}
<a id="L597"></a><span class="ln">   597</span>		c.tmp[1] = byte(err)
<a id="L598"></a><span class="ln">   598</span>		c.writeRecord(recordTypeAlert, c.tmp[0:2])
<a id="L599"></a><span class="ln">   599</span>		<span class="comment">// closeNotify is a special case in that it isn&#39;t an error:</span>
<a id="L600"></a><span class="ln">   600</span>		if err != alertCloseNotify {
<a id="L601"></a><span class="ln">   601</span>			return c.setError(&amp;net.OpError{Op: &#34;local error&#34;, Err: err})
<a id="L602"></a><span class="ln">   602</span>		}
<a id="L603"></a><span class="ln">   603</span>		return nil
<a id="L604"></a><span class="ln">   604</span>	}
<a id="L605"></a><span class="ln">   605</span>	
<a id="L606"></a><span class="ln">   606</span>	<span class="comment">// sendAlert sends a TLS alert message.</span>
<a id="L607"></a><span class="ln">   607</span>	<span class="comment">// L &lt; c.out.Mutex.</span>
<a id="L608"></a><span class="ln">   608</span>	func (c *Conn) sendAlert(err alert) error {
<a id="L609"></a><span class="ln">   609</span>		c.out.Lock()
<a id="L610"></a><span class="ln">   610</span>		defer c.out.Unlock()
<a id="L611"></a><span class="ln">   611</span>		return c.sendAlertLocked(err)
<a id="L612"></a><span class="ln">   612</span>	}
<a id="L613"></a><span class="ln">   613</span>	
<a id="L614"></a><span class="ln">   614</span>	<span class="comment">// writeRecord writes a TLS record with the given type and payload</span>
<a id="L615"></a><span class="ln">   615</span>	<span class="comment">// to the connection and updates the record layer state.</span>
<a id="L616"></a><span class="ln">   616</span>	<span class="comment">// c.out.Mutex &lt;= L.</span>
<a id="L617"></a><span class="ln">   617</span>	func (c *Conn) writeRecord(typ recordType, data []byte) (n int, err error) {
<a id="L618"></a><span class="ln">   618</span>		b := c.out.newBlock()
<a id="L619"></a><span class="ln">   619</span>		for len(data) &gt; 0 {
<a id="L620"></a><span class="ln">   620</span>			m := len(data)
<a id="L621"></a><span class="ln">   621</span>			if m &gt; maxPlaintext {
<a id="L622"></a><span class="ln">   622</span>				m = maxPlaintext
<a id="L623"></a><span class="ln">   623</span>			}
<a id="L624"></a><span class="ln">   624</span>			b.resize(recordHeaderLen + m)
<a id="L625"></a><span class="ln">   625</span>			b.data[0] = byte(typ)
<a id="L626"></a><span class="ln">   626</span>			vers := c.vers
<a id="L627"></a><span class="ln">   627</span>			if vers == 0 {
<a id="L628"></a><span class="ln">   628</span>				vers = maxVersion
<a id="L629"></a><span class="ln">   629</span>			}
<a id="L630"></a><span class="ln">   630</span>			b.data[1] = byte(vers &gt;&gt; 8)
<a id="L631"></a><span class="ln">   631</span>			b.data[2] = byte(vers)
<a id="L632"></a><span class="ln">   632</span>			b.data[3] = byte(m &gt;&gt; 8)
<a id="L633"></a><span class="ln">   633</span>			b.data[4] = byte(m)
<a id="L634"></a><span class="ln">   634</span>			copy(b.data[recordHeaderLen:], data)
<a id="L635"></a><span class="ln">   635</span>			c.out.encrypt(b)
<a id="L636"></a><span class="ln">   636</span>			_, err = c.conn.Write(b.data)
<a id="L637"></a><span class="ln">   637</span>			if err != nil {
<a id="L638"></a><span class="ln">   638</span>				break
<a id="L639"></a><span class="ln">   639</span>			}
<a id="L640"></a><span class="ln">   640</span>			n += m
<a id="L641"></a><span class="ln">   641</span>			data = data[m:]
<a id="L642"></a><span class="ln">   642</span>		}
<a id="L643"></a><span class="ln">   643</span>		c.out.freeBlock(b)
<a id="L644"></a><span class="ln">   644</span>	
<a id="L645"></a><span class="ln">   645</span>		if typ == recordTypeChangeCipherSpec {
<a id="L646"></a><span class="ln">   646</span>			err = c.out.changeCipherSpec()
<a id="L647"></a><span class="ln">   647</span>			if err != nil {
<a id="L648"></a><span class="ln">   648</span>				<span class="comment">// Cannot call sendAlert directly,</span>
<a id="L649"></a><span class="ln">   649</span>				<span class="comment">// because we already hold c.out.Mutex.</span>
<a id="L650"></a><span class="ln">   650</span>				c.tmp[0] = alertLevelError
<a id="L651"></a><span class="ln">   651</span>				c.tmp[1] = byte(err.(alert))
<a id="L652"></a><span class="ln">   652</span>				c.writeRecord(recordTypeAlert, c.tmp[0:2])
<a id="L653"></a><span class="ln">   653</span>				c.err = &amp;net.OpError{Op: &#34;local error&#34;, Err: err}
<a id="L654"></a><span class="ln">   654</span>				return n, c.err
<a id="L655"></a><span class="ln">   655</span>			}
<a id="L656"></a><span class="ln">   656</span>		}
<a id="L657"></a><span class="ln">   657</span>		return
<a id="L658"></a><span class="ln">   658</span>	}
<a id="L659"></a><span class="ln">   659</span>	
<a id="L660"></a><span class="ln">   660</span>	<span class="comment">// readHandshake reads the next handshake message from</span>
<a id="L661"></a><span class="ln">   661</span>	<span class="comment">// the record layer.</span>
<a id="L662"></a><span class="ln">   662</span>	<span class="comment">// c.in.Mutex &lt; L; c.out.Mutex &lt; L.</span>
<a id="L663"></a><span class="ln">   663</span>	func (c *Conn) readHandshake() (interface{}, error) {
<a id="L664"></a><span class="ln">   664</span>		for c.hand.Len() &lt; 4 {
<a id="L665"></a><span class="ln">   665</span>			if c.err != nil {
<a id="L666"></a><span class="ln">   666</span>				return nil, c.err
<a id="L667"></a><span class="ln">   667</span>			}
<a id="L668"></a><span class="ln">   668</span>			if err := c.readRecord(recordTypeHandshake); err != nil {
<a id="L669"></a><span class="ln">   669</span>				return nil, err
<a id="L670"></a><span class="ln">   670</span>			}
<a id="L671"></a><span class="ln">   671</span>		}
<a id="L672"></a><span class="ln">   672</span>	
<a id="L673"></a><span class="ln">   673</span>		data := c.hand.Bytes()
<a id="L674"></a><span class="ln">   674</span>		n := int(data[1])&lt;&lt;16 | int(data[2])&lt;&lt;8 | int(data[3])
<a id="L675"></a><span class="ln">   675</span>		if n &gt; maxHandshake {
<a id="L676"></a><span class="ln">   676</span>			c.sendAlert(alertInternalError)
<a id="L677"></a><span class="ln">   677</span>			return nil, c.err
<a id="L678"></a><span class="ln">   678</span>		}
<a id="L679"></a><span class="ln">   679</span>		for c.hand.Len() &lt; 4+n {
<a id="L680"></a><span class="ln">   680</span>			if c.err != nil {
<a id="L681"></a><span class="ln">   681</span>				return nil, c.err
<a id="L682"></a><span class="ln">   682</span>			}
<a id="L683"></a><span class="ln">   683</span>			if err := c.readRecord(recordTypeHandshake); err != nil {
<a id="L684"></a><span class="ln">   684</span>				return nil, err
<a id="L685"></a><span class="ln">   685</span>			}
<a id="L686"></a><span class="ln">   686</span>		}
<a id="L687"></a><span class="ln">   687</span>		data = c.hand.Next(4 + n)
<a id="L688"></a><span class="ln">   688</span>		var m handshakeMessage
<a id="L689"></a><span class="ln">   689</span>		switch data[0] {
<a id="L690"></a><span class="ln">   690</span>		case typeClientHello:
<a id="L691"></a><span class="ln">   691</span>			m = new(clientHelloMsg)
<a id="L692"></a><span class="ln">   692</span>		case typeServerHello:
<a id="L693"></a><span class="ln">   693</span>			m = new(serverHelloMsg)
<a id="L694"></a><span class="ln">   694</span>		case typeCertificate:
<a id="L695"></a><span class="ln">   695</span>			m = new(certificateMsg)
<a id="L696"></a><span class="ln">   696</span>		case typeCertificateRequest:
<a id="L697"></a><span class="ln">   697</span>			m = new(certificateRequestMsg)
<a id="L698"></a><span class="ln">   698</span>		case typeCertificateStatus:
<a id="L699"></a><span class="ln">   699</span>			m = new(certificateStatusMsg)
<a id="L700"></a><span class="ln">   700</span>		case typeServerKeyExchange:
<a id="L701"></a><span class="ln">   701</span>			m = new(serverKeyExchangeMsg)
<a id="L702"></a><span class="ln">   702</span>		case typeServerHelloDone:
<a id="L703"></a><span class="ln">   703</span>			m = new(serverHelloDoneMsg)
<a id="L704"></a><span class="ln">   704</span>		case typeClientKeyExchange:
<a id="L705"></a><span class="ln">   705</span>			m = new(clientKeyExchangeMsg)
<a id="L706"></a><span class="ln">   706</span>		case typeCertificateVerify:
<a id="L707"></a><span class="ln">   707</span>			m = new(certificateVerifyMsg)
<a id="L708"></a><span class="ln">   708</span>		case typeNextProtocol:
<a id="L709"></a><span class="ln">   709</span>			m = new(nextProtoMsg)
<a id="L710"></a><span class="ln">   710</span>		case typeFinished:
<a id="L711"></a><span class="ln">   711</span>			m = new(finishedMsg)
<a id="L712"></a><span class="ln">   712</span>		default:
<a id="L713"></a><span class="ln">   713</span>			c.sendAlert(alertUnexpectedMessage)
<a id="L714"></a><span class="ln">   714</span>			return nil, alertUnexpectedMessage
<a id="L715"></a><span class="ln">   715</span>		}
<a id="L716"></a><span class="ln">   716</span>	
<a id="L717"></a><span class="ln">   717</span>		<span class="comment">// The handshake message unmarshallers</span>
<a id="L718"></a><span class="ln">   718</span>		<span class="comment">// expect to be able to keep references to data,</span>
<a id="L719"></a><span class="ln">   719</span>		<span class="comment">// so pass in a fresh copy that won&#39;t be overwritten.</span>
<a id="L720"></a><span class="ln">   720</span>		data = append([]byte(nil), data...)
<a id="L721"></a><span class="ln">   721</span>	
<a id="L722"></a><span class="ln">   722</span>		if !m.unmarshal(data) {
<a id="L723"></a><span class="ln">   723</span>			c.sendAlert(alertUnexpectedMessage)
<a id="L724"></a><span class="ln">   724</span>			return nil, alertUnexpectedMessage
<a id="L725"></a><span class="ln">   725</span>		}
<a id="L726"></a><span class="ln">   726</span>		return m, nil
<a id="L727"></a><span class="ln">   727</span>	}
<a id="L728"></a><span class="ln">   728</span>	
<a id="L729"></a><span class="ln">   729</span>	<span class="comment">// Write writes data to the connection.</span>
<a id="L730"></a><span class="ln">   730</span>	func (c *Conn) Write(b []byte) (int, error) {
<a id="L731"></a><span class="ln">   731</span>		if c.err != nil {
<a id="L732"></a><span class="ln">   732</span>			return 0, c.err
<a id="L733"></a><span class="ln">   733</span>		}
<a id="L734"></a><span class="ln">   734</span>	
<a id="L735"></a><span class="ln">   735</span>		if c.err = c.Handshake(); c.err != nil {
<a id="L736"></a><span class="ln">   736</span>			return 0, c.err
<a id="L737"></a><span class="ln">   737</span>		}
<a id="L738"></a><span class="ln">   738</span>	
<a id="L739"></a><span class="ln">   739</span>		c.out.Lock()
<a id="L740"></a><span class="ln">   740</span>		defer c.out.Unlock()
<a id="L741"></a><span class="ln">   741</span>	
<a id="L742"></a><span class="ln">   742</span>		if !c.handshakeComplete {
<a id="L743"></a><span class="ln">   743</span>			return 0, alertInternalError
<a id="L744"></a><span class="ln">   744</span>		}
<a id="L745"></a><span class="ln">   745</span>	
<a id="L746"></a><span class="ln">   746</span>		var n int
<a id="L747"></a><span class="ln">   747</span>		n, c.err = c.writeRecord(recordTypeApplicationData, b)
<a id="L748"></a><span class="ln">   748</span>		return n, c.err
<a id="L749"></a><span class="ln">   749</span>	}
<a id="L750"></a><span class="ln">   750</span>	
<a id="L751"></a><span class="ln">   751</span>	<span class="comment">// Read can be made to time out and return a net.Error with Timeout() == true</span>
<a id="L752"></a><span class="ln">   752</span>	<span class="comment">// after a fixed time limit; see SetDeadline and SetReadDeadline.</span>
<a id="L753"></a><span class="ln">   753</span>	func (c *Conn) Read(b []byte) (n int, err error) {
<a id="L754"></a><span class="ln">   754</span>		if err = c.Handshake(); err != nil {
<a id="L755"></a><span class="ln">   755</span>			return
<a id="L756"></a><span class="ln">   756</span>		}
<a id="L757"></a><span class="ln">   757</span>	
<a id="L758"></a><span class="ln">   758</span>		c.in.Lock()
<a id="L759"></a><span class="ln">   759</span>		defer c.in.Unlock()
<a id="L760"></a><span class="ln">   760</span>	
<a id="L761"></a><span class="ln">   761</span>		for c.input == nil &amp;&amp; c.err == nil {
<a id="L762"></a><span class="ln">   762</span>			if err := c.readRecord(recordTypeApplicationData); err != nil {
<a id="L763"></a><span class="ln">   763</span>				<span class="comment">// Soft error, like EAGAIN</span>
<a id="L764"></a><span class="ln">   764</span>				return 0, err
<a id="L765"></a><span class="ln">   765</span>			}
<a id="L766"></a><span class="ln">   766</span>		}
<a id="L767"></a><span class="ln">   767</span>		if c.err != nil {
<a id="L768"></a><span class="ln">   768</span>			return 0, c.err
<a id="L769"></a><span class="ln">   769</span>		}
<a id="L770"></a><span class="ln">   770</span>		n, err = c.input.Read(b)
<a id="L771"></a><span class="ln">   771</span>		if c.input.off &gt;= len(c.input.data) {
<a id="L772"></a><span class="ln">   772</span>			c.in.freeBlock(c.input)
<a id="L773"></a><span class="ln">   773</span>			c.input = nil
<a id="L774"></a><span class="ln">   774</span>		}
<a id="L775"></a><span class="ln">   775</span>		return n, nil
<a id="L776"></a><span class="ln">   776</span>	}
<a id="L777"></a><span class="ln">   777</span>	
<a id="L778"></a><span class="ln">   778</span>	<span class="comment">// Close closes the connection.</span>
<a id="L779"></a><span class="ln">   779</span>	func (c *Conn) Close() error {
<a id="L780"></a><span class="ln">   780</span>		var alertErr error
<a id="L781"></a><span class="ln">   781</span>	
<a id="L782"></a><span class="ln">   782</span>		c.handshakeMutex.Lock()
<a id="L783"></a><span class="ln">   783</span>		defer c.handshakeMutex.Unlock()
<a id="L784"></a><span class="ln">   784</span>		if c.handshakeComplete {
<a id="L785"></a><span class="ln">   785</span>			alertErr = c.sendAlert(alertCloseNotify)
<a id="L786"></a><span class="ln">   786</span>		}
<a id="L787"></a><span class="ln">   787</span>	
<a id="L788"></a><span class="ln">   788</span>		if err := c.conn.Close(); err != nil {
<a id="L789"></a><span class="ln">   789</span>			return err
<a id="L790"></a><span class="ln">   790</span>		}
<a id="L791"></a><span class="ln">   791</span>		return alertErr
<a id="L792"></a><span class="ln">   792</span>	}
<a id="L793"></a><span class="ln">   793</span>	
<a id="L794"></a><span class="ln">   794</span>	<span class="comment">// Handshake runs the client or server handshake</span>
<a id="L795"></a><span class="ln">   795</span>	<span class="comment">// protocol if it has not yet been run.</span>
<a id="L796"></a><span class="ln">   796</span>	<span class="comment">// Most uses of this package need not call Handshake</span>
<a id="L797"></a><span class="ln">   797</span>	<span class="comment">// explicitly: the first Read or Write will call it automatically.</span>
<a id="L798"></a><span class="ln">   798</span>	func (c *Conn) Handshake() error {
<a id="L799"></a><span class="ln">   799</span>		c.handshakeMutex.Lock()
<a id="L800"></a><span class="ln">   800</span>		defer c.handshakeMutex.Unlock()
<a id="L801"></a><span class="ln">   801</span>		if err := c.error(); err != nil {
<a id="L802"></a><span class="ln">   802</span>			return err
<a id="L803"></a><span class="ln">   803</span>		}
<a id="L804"></a><span class="ln">   804</span>		if c.handshakeComplete {
<a id="L805"></a><span class="ln">   805</span>			return nil
<a id="L806"></a><span class="ln">   806</span>		}
<a id="L807"></a><span class="ln">   807</span>		if c.isClient {
<a id="L808"></a><span class="ln">   808</span>			return c.clientHandshake()
<a id="L809"></a><span class="ln">   809</span>		}
<a id="L810"></a><span class="ln">   810</span>		return c.serverHandshake()
<a id="L811"></a><span class="ln">   811</span>	}
<a id="L812"></a><span class="ln">   812</span>	
<a id="L813"></a><span class="ln">   813</span>	<span class="comment">// ConnectionState returns basic TLS details about the connection.</span>
<a id="L814"></a><span class="ln">   814</span>	func (c *Conn) ConnectionState() ConnectionState {
<a id="L815"></a><span class="ln">   815</span>		c.handshakeMutex.Lock()
<a id="L816"></a><span class="ln">   816</span>		defer c.handshakeMutex.Unlock()
<a id="L817"></a><span class="ln">   817</span>	
<a id="L818"></a><span class="ln">   818</span>		var state ConnectionState
<a id="L819"></a><span class="ln">   819</span>		state.HandshakeComplete = c.handshakeComplete
<a id="L820"></a><span class="ln">   820</span>		if c.handshakeComplete {
<a id="L821"></a><span class="ln">   821</span>			state.NegotiatedProtocol = c.clientProtocol
<a id="L822"></a><span class="ln">   822</span>			state.NegotiatedProtocolIsMutual = !c.clientProtocolFallback
<a id="L823"></a><span class="ln">   823</span>			state.CipherSuite = c.cipherSuite
<a id="L824"></a><span class="ln">   824</span>			state.PeerCertificates = c.peerCertificates
<a id="L825"></a><span class="ln">   825</span>			state.VerifiedChains = c.verifiedChains
<a id="L826"></a><span class="ln">   826</span>			state.ServerName = c.serverName
<a id="L827"></a><span class="ln">   827</span>		}
<a id="L828"></a><span class="ln">   828</span>	
<a id="L829"></a><span class="ln">   829</span>		return state
<a id="L830"></a><span class="ln">   830</span>	}
<a id="L831"></a><span class="ln">   831</span>	
<a id="L832"></a><span class="ln">   832</span>	<span class="comment">// OCSPResponse returns the stapled OCSP response from the TLS server, if</span>
<a id="L833"></a><span class="ln">   833</span>	<span class="comment">// any. (Only valid for client connections.)</span>
<a id="L834"></a><span class="ln">   834</span>	func (c *Conn) OCSPResponse() []byte {
<a id="L835"></a><span class="ln">   835</span>		c.handshakeMutex.Lock()
<a id="L836"></a><span class="ln">   836</span>		defer c.handshakeMutex.Unlock()
<a id="L837"></a><span class="ln">   837</span>	
<a id="L838"></a><span class="ln">   838</span>		return c.ocspResponse
<a id="L839"></a><span class="ln">   839</span>	}
<a id="L840"></a><span class="ln">   840</span>	
<a id="L841"></a><span class="ln">   841</span>	<span class="comment">// VerifyHostname checks that the peer certificate chain is valid for</span>
<a id="L842"></a><span class="ln">   842</span>	<span class="comment">// connecting to host.  If so, it returns nil; if not, it returns an error</span>
<a id="L843"></a><span class="ln">   843</span>	<span class="comment">// describing the problem.</span>
<a id="L844"></a><span class="ln">   844</span>	func (c *Conn) VerifyHostname(host string) error {
<a id="L845"></a><span class="ln">   845</span>		c.handshakeMutex.Lock()
<a id="L846"></a><span class="ln">   846</span>		defer c.handshakeMutex.Unlock()
<a id="L847"></a><span class="ln">   847</span>		if !c.isClient {
<a id="L848"></a><span class="ln">   848</span>			return errors.New(&#34;VerifyHostname called on TLS server connection&#34;)
<a id="L849"></a><span class="ln">   849</span>		}
<a id="L850"></a><span class="ln">   850</span>		if !c.handshakeComplete {
<a id="L851"></a><span class="ln">   851</span>			return errors.New(&#34;TLS handshake has not yet been performed&#34;)
<a id="L852"></a><span class="ln">   852</span>		}
<a id="L853"></a><span class="ln">   853</span>		return c.peerCertificates[0].VerifyHostname(host)
<a id="L854"></a><span class="ln">   854</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

