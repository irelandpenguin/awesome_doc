<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/crypto/tls/handshake_server.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/crypto/tls/handshake_server.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package tls
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;crypto&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;crypto/rsa&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;crypto/subtle&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;crypto/x509&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;errors&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;io&#34;
<a id="L14"></a><span class="ln">    14</span>	)
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	func (c *Conn) serverHandshake() error {
<a id="L17"></a><span class="ln">    17</span>		config := c.config
<a id="L18"></a><span class="ln">    18</span>		msg, err := c.readHandshake()
<a id="L19"></a><span class="ln">    19</span>		if err != nil {
<a id="L20"></a><span class="ln">    20</span>			return err
<a id="L21"></a><span class="ln">    21</span>		}
<a id="L22"></a><span class="ln">    22</span>		clientHello, ok := msg.(*clientHelloMsg)
<a id="L23"></a><span class="ln">    23</span>		if !ok {
<a id="L24"></a><span class="ln">    24</span>			return c.sendAlert(alertUnexpectedMessage)
<a id="L25"></a><span class="ln">    25</span>		}
<a id="L26"></a><span class="ln">    26</span>		vers, ok := mutualVersion(clientHello.vers)
<a id="L27"></a><span class="ln">    27</span>		if !ok {
<a id="L28"></a><span class="ln">    28</span>			return c.sendAlert(alertProtocolVersion)
<a id="L29"></a><span class="ln">    29</span>		}
<a id="L30"></a><span class="ln">    30</span>		c.vers = vers
<a id="L31"></a><span class="ln">    31</span>		c.haveVers = true
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>		finishedHash := newFinishedHash(vers)
<a id="L34"></a><span class="ln">    34</span>		finishedHash.Write(clientHello.marshal())
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>		hello := new(serverHelloMsg)
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>		supportedCurve := false
<a id="L39"></a><span class="ln">    39</span>	Curves:
<a id="L40"></a><span class="ln">    40</span>		for _, curve := range clientHello.supportedCurves {
<a id="L41"></a><span class="ln">    41</span>			switch curve {
<a id="L42"></a><span class="ln">    42</span>			case curveP256, curveP384, curveP521:
<a id="L43"></a><span class="ln">    43</span>				supportedCurve = true
<a id="L44"></a><span class="ln">    44</span>				break Curves
<a id="L45"></a><span class="ln">    45</span>			}
<a id="L46"></a><span class="ln">    46</span>		}
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>		supportedPointFormat := false
<a id="L49"></a><span class="ln">    49</span>		for _, pointFormat := range clientHello.supportedPoints {
<a id="L50"></a><span class="ln">    50</span>			if pointFormat == pointFormatUncompressed {
<a id="L51"></a><span class="ln">    51</span>				supportedPointFormat = true
<a id="L52"></a><span class="ln">    52</span>				break
<a id="L53"></a><span class="ln">    53</span>			}
<a id="L54"></a><span class="ln">    54</span>		}
<a id="L55"></a><span class="ln">    55</span>	
<a id="L56"></a><span class="ln">    56</span>		ellipticOk := supportedCurve &amp;&amp; supportedPointFormat
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>		var suite *cipherSuite
<a id="L59"></a><span class="ln">    59</span>	FindCipherSuite:
<a id="L60"></a><span class="ln">    60</span>		for _, id := range clientHello.cipherSuites {
<a id="L61"></a><span class="ln">    61</span>			for _, supported := range config.cipherSuites() {
<a id="L62"></a><span class="ln">    62</span>				if id == supported {
<a id="L63"></a><span class="ln">    63</span>					var candidate *cipherSuite
<a id="L64"></a><span class="ln">    64</span>	
<a id="L65"></a><span class="ln">    65</span>					for _, s := range cipherSuites {
<a id="L66"></a><span class="ln">    66</span>						if s.id == id {
<a id="L67"></a><span class="ln">    67</span>							candidate = s
<a id="L68"></a><span class="ln">    68</span>							break
<a id="L69"></a><span class="ln">    69</span>						}
<a id="L70"></a><span class="ln">    70</span>					}
<a id="L71"></a><span class="ln">    71</span>					if candidate == nil {
<a id="L72"></a><span class="ln">    72</span>						continue
<a id="L73"></a><span class="ln">    73</span>					}
<a id="L74"></a><span class="ln">    74</span>					<span class="comment">// Don&#39;t select a ciphersuite which we can&#39;t</span>
<a id="L75"></a><span class="ln">    75</span>					<span class="comment">// support for this client.</span>
<a id="L76"></a><span class="ln">    76</span>					if candidate.elliptic &amp;&amp; !ellipticOk {
<a id="L77"></a><span class="ln">    77</span>						continue
<a id="L78"></a><span class="ln">    78</span>					}
<a id="L79"></a><span class="ln">    79</span>					suite = candidate
<a id="L80"></a><span class="ln">    80</span>					break FindCipherSuite
<a id="L81"></a><span class="ln">    81</span>				}
<a id="L82"></a><span class="ln">    82</span>			}
<a id="L83"></a><span class="ln">    83</span>		}
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>		foundCompression := false
<a id="L86"></a><span class="ln">    86</span>		<span class="comment">// We only support null compression, so check that the client offered it.</span>
<a id="L87"></a><span class="ln">    87</span>		for _, compression := range clientHello.compressionMethods {
<a id="L88"></a><span class="ln">    88</span>			if compression == compressionNone {
<a id="L89"></a><span class="ln">    89</span>				foundCompression = true
<a id="L90"></a><span class="ln">    90</span>				break
<a id="L91"></a><span class="ln">    91</span>			}
<a id="L92"></a><span class="ln">    92</span>		}
<a id="L93"></a><span class="ln">    93</span>	
<a id="L94"></a><span class="ln">    94</span>		if suite == nil || !foundCompression {
<a id="L95"></a><span class="ln">    95</span>			return c.sendAlert(alertHandshakeFailure)
<a id="L96"></a><span class="ln">    96</span>		}
<a id="L97"></a><span class="ln">    97</span>	
<a id="L98"></a><span class="ln">    98</span>		hello.vers = vers
<a id="L99"></a><span class="ln">    99</span>		hello.cipherSuite = suite.id
<a id="L100"></a><span class="ln">   100</span>		t := uint32(config.time().Unix())
<a id="L101"></a><span class="ln">   101</span>		hello.random = make([]byte, 32)
<a id="L102"></a><span class="ln">   102</span>		hello.random[0] = byte(t &gt;&gt; 24)
<a id="L103"></a><span class="ln">   103</span>		hello.random[1] = byte(t &gt;&gt; 16)
<a id="L104"></a><span class="ln">   104</span>		hello.random[2] = byte(t &gt;&gt; 8)
<a id="L105"></a><span class="ln">   105</span>		hello.random[3] = byte(t)
<a id="L106"></a><span class="ln">   106</span>		_, err = io.ReadFull(config.rand(), hello.random[4:])
<a id="L107"></a><span class="ln">   107</span>		if err != nil {
<a id="L108"></a><span class="ln">   108</span>			return c.sendAlert(alertInternalError)
<a id="L109"></a><span class="ln">   109</span>		}
<a id="L110"></a><span class="ln">   110</span>		hello.compressionMethod = compressionNone
<a id="L111"></a><span class="ln">   111</span>		if clientHello.nextProtoNeg {
<a id="L112"></a><span class="ln">   112</span>			hello.nextProtoNeg = true
<a id="L113"></a><span class="ln">   113</span>			hello.nextProtos = config.NextProtos
<a id="L114"></a><span class="ln">   114</span>		}
<a id="L115"></a><span class="ln">   115</span>	
<a id="L116"></a><span class="ln">   116</span>		if len(config.Certificates) == 0 {
<a id="L117"></a><span class="ln">   117</span>			return c.sendAlert(alertInternalError)
<a id="L118"></a><span class="ln">   118</span>		}
<a id="L119"></a><span class="ln">   119</span>		cert := &amp;config.Certificates[0]
<a id="L120"></a><span class="ln">   120</span>		if len(clientHello.serverName) &gt; 0 {
<a id="L121"></a><span class="ln">   121</span>			c.serverName = clientHello.serverName
<a id="L122"></a><span class="ln">   122</span>			cert = config.getCertificateForName(clientHello.serverName)
<a id="L123"></a><span class="ln">   123</span>		}
<a id="L124"></a><span class="ln">   124</span>	
<a id="L125"></a><span class="ln">   125</span>		if clientHello.ocspStapling &amp;&amp; len(cert.OCSPStaple) &gt; 0 {
<a id="L126"></a><span class="ln">   126</span>			hello.ocspStapling = true
<a id="L127"></a><span class="ln">   127</span>		}
<a id="L128"></a><span class="ln">   128</span>	
<a id="L129"></a><span class="ln">   129</span>		finishedHash.Write(hello.marshal())
<a id="L130"></a><span class="ln">   130</span>		c.writeRecord(recordTypeHandshake, hello.marshal())
<a id="L131"></a><span class="ln">   131</span>	
<a id="L132"></a><span class="ln">   132</span>		certMsg := new(certificateMsg)
<a id="L133"></a><span class="ln">   133</span>		certMsg.certificates = cert.Certificate
<a id="L134"></a><span class="ln">   134</span>		finishedHash.Write(certMsg.marshal())
<a id="L135"></a><span class="ln">   135</span>		c.writeRecord(recordTypeHandshake, certMsg.marshal())
<a id="L136"></a><span class="ln">   136</span>	
<a id="L137"></a><span class="ln">   137</span>		if hello.ocspStapling {
<a id="L138"></a><span class="ln">   138</span>			certStatus := new(certificateStatusMsg)
<a id="L139"></a><span class="ln">   139</span>			certStatus.statusType = statusTypeOCSP
<a id="L140"></a><span class="ln">   140</span>			certStatus.response = cert.OCSPStaple
<a id="L141"></a><span class="ln">   141</span>			finishedHash.Write(certStatus.marshal())
<a id="L142"></a><span class="ln">   142</span>			c.writeRecord(recordTypeHandshake, certStatus.marshal())
<a id="L143"></a><span class="ln">   143</span>		}
<a id="L144"></a><span class="ln">   144</span>	
<a id="L145"></a><span class="ln">   145</span>		keyAgreement := suite.ka()
<a id="L146"></a><span class="ln">   146</span>		skx, err := keyAgreement.generateServerKeyExchange(config, cert, clientHello, hello)
<a id="L147"></a><span class="ln">   147</span>		if err != nil {
<a id="L148"></a><span class="ln">   148</span>			c.sendAlert(alertHandshakeFailure)
<a id="L149"></a><span class="ln">   149</span>			return err
<a id="L150"></a><span class="ln">   150</span>		}
<a id="L151"></a><span class="ln">   151</span>		if skx != nil {
<a id="L152"></a><span class="ln">   152</span>			finishedHash.Write(skx.marshal())
<a id="L153"></a><span class="ln">   153</span>			c.writeRecord(recordTypeHandshake, skx.marshal())
<a id="L154"></a><span class="ln">   154</span>		}
<a id="L155"></a><span class="ln">   155</span>	
<a id="L156"></a><span class="ln">   156</span>		if config.ClientAuth &gt;= RequestClientCert {
<a id="L157"></a><span class="ln">   157</span>			<span class="comment">// Request a client certificate</span>
<a id="L158"></a><span class="ln">   158</span>			certReq := new(certificateRequestMsg)
<a id="L159"></a><span class="ln">   159</span>			certReq.certificateTypes = []byte{certTypeRSASign}
<a id="L160"></a><span class="ln">   160</span>	
<a id="L161"></a><span class="ln">   161</span>			<span class="comment">// An empty list of certificateAuthorities signals to</span>
<a id="L162"></a><span class="ln">   162</span>			<span class="comment">// the client that it may send any certificate in response</span>
<a id="L163"></a><span class="ln">   163</span>			<span class="comment">// to our request. When we know the CAs we trust, then</span>
<a id="L164"></a><span class="ln">   164</span>			<span class="comment">// we can send them down, so that the client can choose</span>
<a id="L165"></a><span class="ln">   165</span>			<span class="comment">// an appropriate certificate to give to us.</span>
<a id="L166"></a><span class="ln">   166</span>			if config.ClientCAs != nil {
<a id="L167"></a><span class="ln">   167</span>				certReq.certificateAuthorities = config.ClientCAs.Subjects()
<a id="L168"></a><span class="ln">   168</span>			}
<a id="L169"></a><span class="ln">   169</span>			finishedHash.Write(certReq.marshal())
<a id="L170"></a><span class="ln">   170</span>			c.writeRecord(recordTypeHandshake, certReq.marshal())
<a id="L171"></a><span class="ln">   171</span>		}
<a id="L172"></a><span class="ln">   172</span>	
<a id="L173"></a><span class="ln">   173</span>		helloDone := new(serverHelloDoneMsg)
<a id="L174"></a><span class="ln">   174</span>		finishedHash.Write(helloDone.marshal())
<a id="L175"></a><span class="ln">   175</span>		c.writeRecord(recordTypeHandshake, helloDone.marshal())
<a id="L176"></a><span class="ln">   176</span>	
<a id="L177"></a><span class="ln">   177</span>		var pub *rsa.PublicKey <span class="comment">// public key for client auth, if any</span>
<a id="L178"></a><span class="ln">   178</span>	
<a id="L179"></a><span class="ln">   179</span>		msg, err = c.readHandshake()
<a id="L180"></a><span class="ln">   180</span>		if err != nil {
<a id="L181"></a><span class="ln">   181</span>			return err
<a id="L182"></a><span class="ln">   182</span>		}
<a id="L183"></a><span class="ln">   183</span>	
<a id="L184"></a><span class="ln">   184</span>		<span class="comment">// If we requested a client certificate, then the client must send a</span>
<a id="L185"></a><span class="ln">   185</span>		<span class="comment">// certificate message, even if it&#39;s empty.</span>
<a id="L186"></a><span class="ln">   186</span>		if config.ClientAuth &gt;= RequestClientCert {
<a id="L187"></a><span class="ln">   187</span>			if certMsg, ok = msg.(*certificateMsg); !ok {
<a id="L188"></a><span class="ln">   188</span>				return c.sendAlert(alertHandshakeFailure)
<a id="L189"></a><span class="ln">   189</span>			}
<a id="L190"></a><span class="ln">   190</span>			finishedHash.Write(certMsg.marshal())
<a id="L191"></a><span class="ln">   191</span>	
<a id="L192"></a><span class="ln">   192</span>			if len(certMsg.certificates) == 0 {
<a id="L193"></a><span class="ln">   193</span>				<span class="comment">// The client didn&#39;t actually send a certificate</span>
<a id="L194"></a><span class="ln">   194</span>				switch config.ClientAuth {
<a id="L195"></a><span class="ln">   195</span>				case RequireAnyClientCert, RequireAndVerifyClientCert:
<a id="L196"></a><span class="ln">   196</span>					c.sendAlert(alertBadCertificate)
<a id="L197"></a><span class="ln">   197</span>					return errors.New(&#34;tls: client didn&#39;t provide a certificate&#34;)
<a id="L198"></a><span class="ln">   198</span>				}
<a id="L199"></a><span class="ln">   199</span>			}
<a id="L200"></a><span class="ln">   200</span>	
<a id="L201"></a><span class="ln">   201</span>			certs := make([]*x509.Certificate, len(certMsg.certificates))
<a id="L202"></a><span class="ln">   202</span>			for i, asn1Data := range certMsg.certificates {
<a id="L203"></a><span class="ln">   203</span>				if certs[i], err = x509.ParseCertificate(asn1Data); err != nil {
<a id="L204"></a><span class="ln">   204</span>					c.sendAlert(alertBadCertificate)
<a id="L205"></a><span class="ln">   205</span>					return errors.New(&#34;tls: failed to parse client certificate: &#34; + err.Error())
<a id="L206"></a><span class="ln">   206</span>				}
<a id="L207"></a><span class="ln">   207</span>			}
<a id="L208"></a><span class="ln">   208</span>	
<a id="L209"></a><span class="ln">   209</span>			if c.config.ClientAuth &gt;= VerifyClientCertIfGiven &amp;&amp; len(certs) &gt; 0 {
<a id="L210"></a><span class="ln">   210</span>				opts := x509.VerifyOptions{
<a id="L211"></a><span class="ln">   211</span>					Roots:         c.config.ClientCAs,
<a id="L212"></a><span class="ln">   212</span>					CurrentTime:   c.config.time(),
<a id="L213"></a><span class="ln">   213</span>					Intermediates: x509.NewCertPool(),
<a id="L214"></a><span class="ln">   214</span>				}
<a id="L215"></a><span class="ln">   215</span>	
<a id="L216"></a><span class="ln">   216</span>				for i, cert := range certs {
<a id="L217"></a><span class="ln">   217</span>					if i == 0 {
<a id="L218"></a><span class="ln">   218</span>						continue
<a id="L219"></a><span class="ln">   219</span>					}
<a id="L220"></a><span class="ln">   220</span>					opts.Intermediates.AddCert(cert)
<a id="L221"></a><span class="ln">   221</span>				}
<a id="L222"></a><span class="ln">   222</span>	
<a id="L223"></a><span class="ln">   223</span>				chains, err := certs[0].Verify(opts)
<a id="L224"></a><span class="ln">   224</span>				if err != nil {
<a id="L225"></a><span class="ln">   225</span>					c.sendAlert(alertBadCertificate)
<a id="L226"></a><span class="ln">   226</span>					return errors.New(&#34;tls: failed to verify client&#39;s certificate: &#34; + err.Error())
<a id="L227"></a><span class="ln">   227</span>				}
<a id="L228"></a><span class="ln">   228</span>	
<a id="L229"></a><span class="ln">   229</span>				ok := false
<a id="L230"></a><span class="ln">   230</span>				for _, ku := range certs[0].ExtKeyUsage {
<a id="L231"></a><span class="ln">   231</span>					if ku == x509.ExtKeyUsageClientAuth {
<a id="L232"></a><span class="ln">   232</span>						ok = true
<a id="L233"></a><span class="ln">   233</span>						break
<a id="L234"></a><span class="ln">   234</span>					}
<a id="L235"></a><span class="ln">   235</span>				}
<a id="L236"></a><span class="ln">   236</span>				if !ok {
<a id="L237"></a><span class="ln">   237</span>					c.sendAlert(alertHandshakeFailure)
<a id="L238"></a><span class="ln">   238</span>					return errors.New(&#34;tls: client&#39;s certificate&#39;s extended key usage doesn&#39;t permit it to be used for client authentication&#34;)
<a id="L239"></a><span class="ln">   239</span>				}
<a id="L240"></a><span class="ln">   240</span>	
<a id="L241"></a><span class="ln">   241</span>				c.verifiedChains = chains
<a id="L242"></a><span class="ln">   242</span>			}
<a id="L243"></a><span class="ln">   243</span>	
<a id="L244"></a><span class="ln">   244</span>			if len(certs) &gt; 0 {
<a id="L245"></a><span class="ln">   245</span>				if pub, ok = certs[0].PublicKey.(*rsa.PublicKey); !ok {
<a id="L246"></a><span class="ln">   246</span>					return c.sendAlert(alertUnsupportedCertificate)
<a id="L247"></a><span class="ln">   247</span>				}
<a id="L248"></a><span class="ln">   248</span>				c.peerCertificates = certs
<a id="L249"></a><span class="ln">   249</span>			}
<a id="L250"></a><span class="ln">   250</span>	
<a id="L251"></a><span class="ln">   251</span>			msg, err = c.readHandshake()
<a id="L252"></a><span class="ln">   252</span>			if err != nil {
<a id="L253"></a><span class="ln">   253</span>				return err
<a id="L254"></a><span class="ln">   254</span>			}
<a id="L255"></a><span class="ln">   255</span>		}
<a id="L256"></a><span class="ln">   256</span>	
<a id="L257"></a><span class="ln">   257</span>		<span class="comment">// Get client key exchange</span>
<a id="L258"></a><span class="ln">   258</span>		ckx, ok := msg.(*clientKeyExchangeMsg)
<a id="L259"></a><span class="ln">   259</span>		if !ok {
<a id="L260"></a><span class="ln">   260</span>			return c.sendAlert(alertUnexpectedMessage)
<a id="L261"></a><span class="ln">   261</span>		}
<a id="L262"></a><span class="ln">   262</span>		finishedHash.Write(ckx.marshal())
<a id="L263"></a><span class="ln">   263</span>	
<a id="L264"></a><span class="ln">   264</span>		<span class="comment">// If we received a client cert in response to our certificate request message,</span>
<a id="L265"></a><span class="ln">   265</span>		<span class="comment">// the client will send us a certificateVerifyMsg immediately after the</span>
<a id="L266"></a><span class="ln">   266</span>		<span class="comment">// clientKeyExchangeMsg.  This message is a MD5SHA1 digest of all preceding</span>
<a id="L267"></a><span class="ln">   267</span>		<span class="comment">// handshake-layer messages that is signed using the private key corresponding</span>
<a id="L268"></a><span class="ln">   268</span>		<span class="comment">// to the client&#39;s certificate. This allows us to verify that the client is in</span>
<a id="L269"></a><span class="ln">   269</span>		<span class="comment">// possession of the private key of the certificate.</span>
<a id="L270"></a><span class="ln">   270</span>		if len(c.peerCertificates) &gt; 0 {
<a id="L271"></a><span class="ln">   271</span>			msg, err = c.readHandshake()
<a id="L272"></a><span class="ln">   272</span>			if err != nil {
<a id="L273"></a><span class="ln">   273</span>				return err
<a id="L274"></a><span class="ln">   274</span>			}
<a id="L275"></a><span class="ln">   275</span>			certVerify, ok := msg.(*certificateVerifyMsg)
<a id="L276"></a><span class="ln">   276</span>			if !ok {
<a id="L277"></a><span class="ln">   277</span>				return c.sendAlert(alertUnexpectedMessage)
<a id="L278"></a><span class="ln">   278</span>			}
<a id="L279"></a><span class="ln">   279</span>	
<a id="L280"></a><span class="ln">   280</span>			digest := make([]byte, 0, 36)
<a id="L281"></a><span class="ln">   281</span>			digest = finishedHash.serverMD5.Sum(digest)
<a id="L282"></a><span class="ln">   282</span>			digest = finishedHash.serverSHA1.Sum(digest)
<a id="L283"></a><span class="ln">   283</span>			err = rsa.VerifyPKCS1v15(pub, crypto.MD5SHA1, digest, certVerify.signature)
<a id="L284"></a><span class="ln">   284</span>			if err != nil {
<a id="L285"></a><span class="ln">   285</span>				c.sendAlert(alertBadCertificate)
<a id="L286"></a><span class="ln">   286</span>				return errors.New(&#34;could not validate signature of connection nonces: &#34; + err.Error())
<a id="L287"></a><span class="ln">   287</span>			}
<a id="L288"></a><span class="ln">   288</span>	
<a id="L289"></a><span class="ln">   289</span>			finishedHash.Write(certVerify.marshal())
<a id="L290"></a><span class="ln">   290</span>		}
<a id="L291"></a><span class="ln">   291</span>	
<a id="L292"></a><span class="ln">   292</span>		preMasterSecret, err := keyAgreement.processClientKeyExchange(config, cert, ckx, c.vers)
<a id="L293"></a><span class="ln">   293</span>		if err != nil {
<a id="L294"></a><span class="ln">   294</span>			c.sendAlert(alertHandshakeFailure)
<a id="L295"></a><span class="ln">   295</span>			return err
<a id="L296"></a><span class="ln">   296</span>		}
<a id="L297"></a><span class="ln">   297</span>	
<a id="L298"></a><span class="ln">   298</span>		masterSecret, clientMAC, serverMAC, clientKey, serverKey, clientIV, serverIV :=
<a id="L299"></a><span class="ln">   299</span>			keysFromPreMasterSecret(c.vers, preMasterSecret, clientHello.random, hello.random, suite.macLen, suite.keyLen, suite.ivLen)
<a id="L300"></a><span class="ln">   300</span>	
<a id="L301"></a><span class="ln">   301</span>		clientCipher := suite.cipher(clientKey, clientIV, true <span class="comment">/* for reading */</span>)
<a id="L302"></a><span class="ln">   302</span>		clientHash := suite.mac(c.vers, clientMAC)
<a id="L303"></a><span class="ln">   303</span>		c.in.prepareCipherSpec(c.vers, clientCipher, clientHash)
<a id="L304"></a><span class="ln">   304</span>		c.readRecord(recordTypeChangeCipherSpec)
<a id="L305"></a><span class="ln">   305</span>		if err := c.error(); err != nil {
<a id="L306"></a><span class="ln">   306</span>			return err
<a id="L307"></a><span class="ln">   307</span>		}
<a id="L308"></a><span class="ln">   308</span>	
<a id="L309"></a><span class="ln">   309</span>		if hello.nextProtoNeg {
<a id="L310"></a><span class="ln">   310</span>			msg, err = c.readHandshake()
<a id="L311"></a><span class="ln">   311</span>			if err != nil {
<a id="L312"></a><span class="ln">   312</span>				return err
<a id="L313"></a><span class="ln">   313</span>			}
<a id="L314"></a><span class="ln">   314</span>			nextProto, ok := msg.(*nextProtoMsg)
<a id="L315"></a><span class="ln">   315</span>			if !ok {
<a id="L316"></a><span class="ln">   316</span>				return c.sendAlert(alertUnexpectedMessage)
<a id="L317"></a><span class="ln">   317</span>			}
<a id="L318"></a><span class="ln">   318</span>			finishedHash.Write(nextProto.marshal())
<a id="L319"></a><span class="ln">   319</span>			c.clientProtocol = nextProto.proto
<a id="L320"></a><span class="ln">   320</span>		}
<a id="L321"></a><span class="ln">   321</span>	
<a id="L322"></a><span class="ln">   322</span>		msg, err = c.readHandshake()
<a id="L323"></a><span class="ln">   323</span>		if err != nil {
<a id="L324"></a><span class="ln">   324</span>			return err
<a id="L325"></a><span class="ln">   325</span>		}
<a id="L326"></a><span class="ln">   326</span>		clientFinished, ok := msg.(*finishedMsg)
<a id="L327"></a><span class="ln">   327</span>		if !ok {
<a id="L328"></a><span class="ln">   328</span>			return c.sendAlert(alertUnexpectedMessage)
<a id="L329"></a><span class="ln">   329</span>		}
<a id="L330"></a><span class="ln">   330</span>	
<a id="L331"></a><span class="ln">   331</span>		verify := finishedHash.clientSum(masterSecret)
<a id="L332"></a><span class="ln">   332</span>		if len(verify) != len(clientFinished.verifyData) ||
<a id="L333"></a><span class="ln">   333</span>			subtle.ConstantTimeCompare(verify, clientFinished.verifyData) != 1 {
<a id="L334"></a><span class="ln">   334</span>			return c.sendAlert(alertHandshakeFailure)
<a id="L335"></a><span class="ln">   335</span>		}
<a id="L336"></a><span class="ln">   336</span>	
<a id="L337"></a><span class="ln">   337</span>		finishedHash.Write(clientFinished.marshal())
<a id="L338"></a><span class="ln">   338</span>	
<a id="L339"></a><span class="ln">   339</span>		serverCipher := suite.cipher(serverKey, serverIV, false <span class="comment">/* not for reading */</span>)
<a id="L340"></a><span class="ln">   340</span>		serverHash := suite.mac(c.vers, serverMAC)
<a id="L341"></a><span class="ln">   341</span>		c.out.prepareCipherSpec(c.vers, serverCipher, serverHash)
<a id="L342"></a><span class="ln">   342</span>		c.writeRecord(recordTypeChangeCipherSpec, []byte{1})
<a id="L343"></a><span class="ln">   343</span>	
<a id="L344"></a><span class="ln">   344</span>		finished := new(finishedMsg)
<a id="L345"></a><span class="ln">   345</span>		finished.verifyData = finishedHash.serverSum(masterSecret)
<a id="L346"></a><span class="ln">   346</span>		c.writeRecord(recordTypeHandshake, finished.marshal())
<a id="L347"></a><span class="ln">   347</span>	
<a id="L348"></a><span class="ln">   348</span>		c.handshakeComplete = true
<a id="L349"></a><span class="ln">   349</span>		c.cipherSuite = suite.id
<a id="L350"></a><span class="ln">   350</span>	
<a id="L351"></a><span class="ln">   351</span>		return nil
<a id="L352"></a><span class="ln">   352</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

