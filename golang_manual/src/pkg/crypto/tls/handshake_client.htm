<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/crypto/tls/handshake_client.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/crypto/tls/handshake_client.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package tls
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;bytes&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;crypto&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;crypto/rsa&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;crypto/subtle&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;crypto/x509&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;errors&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;io&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;strconv&#34;
<a id="L16"></a><span class="ln">    16</span>	)
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	func (c *Conn) clientHandshake() error {
<a id="L19"></a><span class="ln">    19</span>		finishedHash := newFinishedHash(versionTLS10)
<a id="L20"></a><span class="ln">    20</span>	
<a id="L21"></a><span class="ln">    21</span>		if c.config == nil {
<a id="L22"></a><span class="ln">    22</span>			c.config = defaultConfig()
<a id="L23"></a><span class="ln">    23</span>		}
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>		hello := &amp;clientHelloMsg{
<a id="L26"></a><span class="ln">    26</span>			vers:               maxVersion,
<a id="L27"></a><span class="ln">    27</span>			cipherSuites:       c.config.cipherSuites(),
<a id="L28"></a><span class="ln">    28</span>			compressionMethods: []uint8{compressionNone},
<a id="L29"></a><span class="ln">    29</span>			random:             make([]byte, 32),
<a id="L30"></a><span class="ln">    30</span>			ocspStapling:       true,
<a id="L31"></a><span class="ln">    31</span>			serverName:         c.config.ServerName,
<a id="L32"></a><span class="ln">    32</span>			supportedCurves:    []uint16{curveP256, curveP384, curveP521},
<a id="L33"></a><span class="ln">    33</span>			supportedPoints:    []uint8{pointFormatUncompressed},
<a id="L34"></a><span class="ln">    34</span>			nextProtoNeg:       len(c.config.NextProtos) &gt; 0,
<a id="L35"></a><span class="ln">    35</span>		}
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>		t := uint32(c.config.time().Unix())
<a id="L38"></a><span class="ln">    38</span>		hello.random[0] = byte(t &gt;&gt; 24)
<a id="L39"></a><span class="ln">    39</span>		hello.random[1] = byte(t &gt;&gt; 16)
<a id="L40"></a><span class="ln">    40</span>		hello.random[2] = byte(t &gt;&gt; 8)
<a id="L41"></a><span class="ln">    41</span>		hello.random[3] = byte(t)
<a id="L42"></a><span class="ln">    42</span>		_, err := io.ReadFull(c.config.rand(), hello.random[4:])
<a id="L43"></a><span class="ln">    43</span>		if err != nil {
<a id="L44"></a><span class="ln">    44</span>			c.sendAlert(alertInternalError)
<a id="L45"></a><span class="ln">    45</span>			return errors.New(&#34;short read from Rand&#34;)
<a id="L46"></a><span class="ln">    46</span>		}
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>		finishedHash.Write(hello.marshal())
<a id="L49"></a><span class="ln">    49</span>		c.writeRecord(recordTypeHandshake, hello.marshal())
<a id="L50"></a><span class="ln">    50</span>	
<a id="L51"></a><span class="ln">    51</span>		msg, err := c.readHandshake()
<a id="L52"></a><span class="ln">    52</span>		if err != nil {
<a id="L53"></a><span class="ln">    53</span>			return err
<a id="L54"></a><span class="ln">    54</span>		}
<a id="L55"></a><span class="ln">    55</span>		serverHello, ok := msg.(*serverHelloMsg)
<a id="L56"></a><span class="ln">    56</span>		if !ok {
<a id="L57"></a><span class="ln">    57</span>			return c.sendAlert(alertUnexpectedMessage)
<a id="L58"></a><span class="ln">    58</span>		}
<a id="L59"></a><span class="ln">    59</span>		finishedHash.Write(serverHello.marshal())
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>		vers, ok := mutualVersion(serverHello.vers)
<a id="L62"></a><span class="ln">    62</span>		if !ok || vers &lt; versionTLS10 {
<a id="L63"></a><span class="ln">    63</span>			<span class="comment">// TLS 1.0 is the minimum version supported as a client.</span>
<a id="L64"></a><span class="ln">    64</span>			return c.sendAlert(alertProtocolVersion)
<a id="L65"></a><span class="ln">    65</span>		}
<a id="L66"></a><span class="ln">    66</span>		c.vers = vers
<a id="L67"></a><span class="ln">    67</span>		c.haveVers = true
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>		if serverHello.compressionMethod != compressionNone {
<a id="L70"></a><span class="ln">    70</span>			return c.sendAlert(alertUnexpectedMessage)
<a id="L71"></a><span class="ln">    71</span>		}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>		if !hello.nextProtoNeg &amp;&amp; serverHello.nextProtoNeg {
<a id="L74"></a><span class="ln">    74</span>			c.sendAlert(alertHandshakeFailure)
<a id="L75"></a><span class="ln">    75</span>			return errors.New(&#34;server advertised unrequested NPN&#34;)
<a id="L76"></a><span class="ln">    76</span>		}
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>		suite := mutualCipherSuite(c.config.cipherSuites(), serverHello.cipherSuite)
<a id="L79"></a><span class="ln">    79</span>		if suite == nil {
<a id="L80"></a><span class="ln">    80</span>			return c.sendAlert(alertHandshakeFailure)
<a id="L81"></a><span class="ln">    81</span>		}
<a id="L82"></a><span class="ln">    82</span>	
<a id="L83"></a><span class="ln">    83</span>		msg, err = c.readHandshake()
<a id="L84"></a><span class="ln">    84</span>		if err != nil {
<a id="L85"></a><span class="ln">    85</span>			return err
<a id="L86"></a><span class="ln">    86</span>		}
<a id="L87"></a><span class="ln">    87</span>		certMsg, ok := msg.(*certificateMsg)
<a id="L88"></a><span class="ln">    88</span>		if !ok || len(certMsg.certificates) == 0 {
<a id="L89"></a><span class="ln">    89</span>			return c.sendAlert(alertUnexpectedMessage)
<a id="L90"></a><span class="ln">    90</span>		}
<a id="L91"></a><span class="ln">    91</span>		finishedHash.Write(certMsg.marshal())
<a id="L92"></a><span class="ln">    92</span>	
<a id="L93"></a><span class="ln">    93</span>		certs := make([]*x509.Certificate, len(certMsg.certificates))
<a id="L94"></a><span class="ln">    94</span>		for i, asn1Data := range certMsg.certificates {
<a id="L95"></a><span class="ln">    95</span>			cert, err := x509.ParseCertificate(asn1Data)
<a id="L96"></a><span class="ln">    96</span>			if err != nil {
<a id="L97"></a><span class="ln">    97</span>				c.sendAlert(alertBadCertificate)
<a id="L98"></a><span class="ln">    98</span>				return errors.New(&#34;failed to parse certificate from server: &#34; + err.Error())
<a id="L99"></a><span class="ln">    99</span>			}
<a id="L100"></a><span class="ln">   100</span>			certs[i] = cert
<a id="L101"></a><span class="ln">   101</span>		}
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>		if !c.config.InsecureSkipVerify {
<a id="L104"></a><span class="ln">   104</span>			opts := x509.VerifyOptions{
<a id="L105"></a><span class="ln">   105</span>				Roots:         c.config.RootCAs,
<a id="L106"></a><span class="ln">   106</span>				CurrentTime:   c.config.time(),
<a id="L107"></a><span class="ln">   107</span>				DNSName:       c.config.ServerName,
<a id="L108"></a><span class="ln">   108</span>				Intermediates: x509.NewCertPool(),
<a id="L109"></a><span class="ln">   109</span>			}
<a id="L110"></a><span class="ln">   110</span>	
<a id="L111"></a><span class="ln">   111</span>			for i, cert := range certs {
<a id="L112"></a><span class="ln">   112</span>				if i == 0 {
<a id="L113"></a><span class="ln">   113</span>					continue
<a id="L114"></a><span class="ln">   114</span>				}
<a id="L115"></a><span class="ln">   115</span>				opts.Intermediates.AddCert(cert)
<a id="L116"></a><span class="ln">   116</span>			}
<a id="L117"></a><span class="ln">   117</span>			c.verifiedChains, err = certs[0].Verify(opts)
<a id="L118"></a><span class="ln">   118</span>			if err != nil {
<a id="L119"></a><span class="ln">   119</span>				c.sendAlert(alertBadCertificate)
<a id="L120"></a><span class="ln">   120</span>				return err
<a id="L121"></a><span class="ln">   121</span>			}
<a id="L122"></a><span class="ln">   122</span>		}
<a id="L123"></a><span class="ln">   123</span>	
<a id="L124"></a><span class="ln">   124</span>		if _, ok := certs[0].PublicKey.(*rsa.PublicKey); !ok {
<a id="L125"></a><span class="ln">   125</span>			return c.sendAlert(alertUnsupportedCertificate)
<a id="L126"></a><span class="ln">   126</span>		}
<a id="L127"></a><span class="ln">   127</span>	
<a id="L128"></a><span class="ln">   128</span>		c.peerCertificates = certs
<a id="L129"></a><span class="ln">   129</span>	
<a id="L130"></a><span class="ln">   130</span>		if serverHello.ocspStapling {
<a id="L131"></a><span class="ln">   131</span>			msg, err = c.readHandshake()
<a id="L132"></a><span class="ln">   132</span>			if err != nil {
<a id="L133"></a><span class="ln">   133</span>				return err
<a id="L134"></a><span class="ln">   134</span>			}
<a id="L135"></a><span class="ln">   135</span>			cs, ok := msg.(*certificateStatusMsg)
<a id="L136"></a><span class="ln">   136</span>			if !ok {
<a id="L137"></a><span class="ln">   137</span>				return c.sendAlert(alertUnexpectedMessage)
<a id="L138"></a><span class="ln">   138</span>			}
<a id="L139"></a><span class="ln">   139</span>			finishedHash.Write(cs.marshal())
<a id="L140"></a><span class="ln">   140</span>	
<a id="L141"></a><span class="ln">   141</span>			if cs.statusType == statusTypeOCSP {
<a id="L142"></a><span class="ln">   142</span>				c.ocspResponse = cs.response
<a id="L143"></a><span class="ln">   143</span>			}
<a id="L144"></a><span class="ln">   144</span>		}
<a id="L145"></a><span class="ln">   145</span>	
<a id="L146"></a><span class="ln">   146</span>		msg, err = c.readHandshake()
<a id="L147"></a><span class="ln">   147</span>		if err != nil {
<a id="L148"></a><span class="ln">   148</span>			return err
<a id="L149"></a><span class="ln">   149</span>		}
<a id="L150"></a><span class="ln">   150</span>	
<a id="L151"></a><span class="ln">   151</span>		keyAgreement := suite.ka()
<a id="L152"></a><span class="ln">   152</span>	
<a id="L153"></a><span class="ln">   153</span>		skx, ok := msg.(*serverKeyExchangeMsg)
<a id="L154"></a><span class="ln">   154</span>		if ok {
<a id="L155"></a><span class="ln">   155</span>			finishedHash.Write(skx.marshal())
<a id="L156"></a><span class="ln">   156</span>			err = keyAgreement.processServerKeyExchange(c.config, hello, serverHello, certs[0], skx)
<a id="L157"></a><span class="ln">   157</span>			if err != nil {
<a id="L158"></a><span class="ln">   158</span>				c.sendAlert(alertUnexpectedMessage)
<a id="L159"></a><span class="ln">   159</span>				return err
<a id="L160"></a><span class="ln">   160</span>			}
<a id="L161"></a><span class="ln">   161</span>	
<a id="L162"></a><span class="ln">   162</span>			msg, err = c.readHandshake()
<a id="L163"></a><span class="ln">   163</span>			if err != nil {
<a id="L164"></a><span class="ln">   164</span>				return err
<a id="L165"></a><span class="ln">   165</span>			}
<a id="L166"></a><span class="ln">   166</span>		}
<a id="L167"></a><span class="ln">   167</span>	
<a id="L168"></a><span class="ln">   168</span>		var certToSend *Certificate
<a id="L169"></a><span class="ln">   169</span>		var certRequested bool
<a id="L170"></a><span class="ln">   170</span>		certReq, ok := msg.(*certificateRequestMsg)
<a id="L171"></a><span class="ln">   171</span>		if ok {
<a id="L172"></a><span class="ln">   172</span>			certRequested = true
<a id="L173"></a><span class="ln">   173</span>	
<a id="L174"></a><span class="ln">   174</span>			<span class="comment">// RFC 4346 on the certificateAuthorities field:</span>
<a id="L175"></a><span class="ln">   175</span>			<span class="comment">// A list of the distinguished names of acceptable certificate</span>
<a id="L176"></a><span class="ln">   176</span>			<span class="comment">// authorities. These distinguished names may specify a desired</span>
<a id="L177"></a><span class="ln">   177</span>			<span class="comment">// distinguished name for a root CA or for a subordinate CA;</span>
<a id="L178"></a><span class="ln">   178</span>			<span class="comment">// thus, this message can be used to describe both known roots</span>
<a id="L179"></a><span class="ln">   179</span>			<span class="comment">// and a desired authorization space. If the</span>
<a id="L180"></a><span class="ln">   180</span>			<span class="comment">// certificate_authorities list is empty then the client MAY</span>
<a id="L181"></a><span class="ln">   181</span>			<span class="comment">// send any certificate of the appropriate</span>
<a id="L182"></a><span class="ln">   182</span>			<span class="comment">// ClientCertificateType, unless there is some external</span>
<a id="L183"></a><span class="ln">   183</span>			<span class="comment">// arrangement to the contrary.</span>
<a id="L184"></a><span class="ln">   184</span>	
<a id="L185"></a><span class="ln">   185</span>			finishedHash.Write(certReq.marshal())
<a id="L186"></a><span class="ln">   186</span>	
<a id="L187"></a><span class="ln">   187</span>			<span class="comment">// For now, we only know how to sign challenges with RSA</span>
<a id="L188"></a><span class="ln">   188</span>			rsaAvail := false
<a id="L189"></a><span class="ln">   189</span>			for _, certType := range certReq.certificateTypes {
<a id="L190"></a><span class="ln">   190</span>				if certType == certTypeRSASign {
<a id="L191"></a><span class="ln">   191</span>					rsaAvail = true
<a id="L192"></a><span class="ln">   192</span>					break
<a id="L193"></a><span class="ln">   193</span>				}
<a id="L194"></a><span class="ln">   194</span>			}
<a id="L195"></a><span class="ln">   195</span>	
<a id="L196"></a><span class="ln">   196</span>			<span class="comment">// We need to search our list of client certs for one</span>
<a id="L197"></a><span class="ln">   197</span>			<span class="comment">// where SignatureAlgorithm is RSA and the Issuer is in</span>
<a id="L198"></a><span class="ln">   198</span>			<span class="comment">// certReq.certificateAuthorities</span>
<a id="L199"></a><span class="ln">   199</span>		findCert:
<a id="L200"></a><span class="ln">   200</span>			for i, cert := range c.config.Certificates {
<a id="L201"></a><span class="ln">   201</span>				if !rsaAvail {
<a id="L202"></a><span class="ln">   202</span>					continue
<a id="L203"></a><span class="ln">   203</span>				}
<a id="L204"></a><span class="ln">   204</span>	
<a id="L205"></a><span class="ln">   205</span>				leaf := cert.Leaf
<a id="L206"></a><span class="ln">   206</span>				if leaf == nil {
<a id="L207"></a><span class="ln">   207</span>					if leaf, err = x509.ParseCertificate(cert.Certificate[0]); err != nil {
<a id="L208"></a><span class="ln">   208</span>						c.sendAlert(alertInternalError)
<a id="L209"></a><span class="ln">   209</span>						return errors.New(&#34;tls: failed to parse client certificate #&#34; + strconv.Itoa(i) + &#34;: &#34; + err.Error())
<a id="L210"></a><span class="ln">   210</span>					}
<a id="L211"></a><span class="ln">   211</span>				}
<a id="L212"></a><span class="ln">   212</span>	
<a id="L213"></a><span class="ln">   213</span>				if leaf.PublicKeyAlgorithm != x509.RSA {
<a id="L214"></a><span class="ln">   214</span>					continue
<a id="L215"></a><span class="ln">   215</span>				}
<a id="L216"></a><span class="ln">   216</span>	
<a id="L217"></a><span class="ln">   217</span>				if len(certReq.certificateAuthorities) == 0 {
<a id="L218"></a><span class="ln">   218</span>					<span class="comment">// they gave us an empty list, so just take the</span>
<a id="L219"></a><span class="ln">   219</span>					<span class="comment">// first RSA cert from c.config.Certificates</span>
<a id="L220"></a><span class="ln">   220</span>					certToSend = &amp;cert
<a id="L221"></a><span class="ln">   221</span>					break
<a id="L222"></a><span class="ln">   222</span>				}
<a id="L223"></a><span class="ln">   223</span>	
<a id="L224"></a><span class="ln">   224</span>				for _, ca := range certReq.certificateAuthorities {
<a id="L225"></a><span class="ln">   225</span>					if bytes.Equal(leaf.RawIssuer, ca) {
<a id="L226"></a><span class="ln">   226</span>						certToSend = &amp;cert
<a id="L227"></a><span class="ln">   227</span>						break findCert
<a id="L228"></a><span class="ln">   228</span>					}
<a id="L229"></a><span class="ln">   229</span>				}
<a id="L230"></a><span class="ln">   230</span>			}
<a id="L231"></a><span class="ln">   231</span>	
<a id="L232"></a><span class="ln">   232</span>			msg, err = c.readHandshake()
<a id="L233"></a><span class="ln">   233</span>			if err != nil {
<a id="L234"></a><span class="ln">   234</span>				return err
<a id="L235"></a><span class="ln">   235</span>			}
<a id="L236"></a><span class="ln">   236</span>		}
<a id="L237"></a><span class="ln">   237</span>	
<a id="L238"></a><span class="ln">   238</span>		shd, ok := msg.(*serverHelloDoneMsg)
<a id="L239"></a><span class="ln">   239</span>		if !ok {
<a id="L240"></a><span class="ln">   240</span>			return c.sendAlert(alertUnexpectedMessage)
<a id="L241"></a><span class="ln">   241</span>		}
<a id="L242"></a><span class="ln">   242</span>		finishedHash.Write(shd.marshal())
<a id="L243"></a><span class="ln">   243</span>	
<a id="L244"></a><span class="ln">   244</span>		<span class="comment">// If the server requested a certificate then we have to send a</span>
<a id="L245"></a><span class="ln">   245</span>		<span class="comment">// Certificate message, even if it&#39;s empty because we don&#39;t have a</span>
<a id="L246"></a><span class="ln">   246</span>		<span class="comment">// certificate to send.</span>
<a id="L247"></a><span class="ln">   247</span>		if certRequested {
<a id="L248"></a><span class="ln">   248</span>			certMsg = new(certificateMsg)
<a id="L249"></a><span class="ln">   249</span>			if certToSend != nil {
<a id="L250"></a><span class="ln">   250</span>				certMsg.certificates = certToSend.Certificate
<a id="L251"></a><span class="ln">   251</span>			}
<a id="L252"></a><span class="ln">   252</span>			finishedHash.Write(certMsg.marshal())
<a id="L253"></a><span class="ln">   253</span>			c.writeRecord(recordTypeHandshake, certMsg.marshal())
<a id="L254"></a><span class="ln">   254</span>		}
<a id="L255"></a><span class="ln">   255</span>	
<a id="L256"></a><span class="ln">   256</span>		preMasterSecret, ckx, err := keyAgreement.generateClientKeyExchange(c.config, hello, certs[0])
<a id="L257"></a><span class="ln">   257</span>		if err != nil {
<a id="L258"></a><span class="ln">   258</span>			c.sendAlert(alertInternalError)
<a id="L259"></a><span class="ln">   259</span>			return err
<a id="L260"></a><span class="ln">   260</span>		}
<a id="L261"></a><span class="ln">   261</span>		if ckx != nil {
<a id="L262"></a><span class="ln">   262</span>			finishedHash.Write(ckx.marshal())
<a id="L263"></a><span class="ln">   263</span>			c.writeRecord(recordTypeHandshake, ckx.marshal())
<a id="L264"></a><span class="ln">   264</span>		}
<a id="L265"></a><span class="ln">   265</span>	
<a id="L266"></a><span class="ln">   266</span>		if certToSend != nil {
<a id="L267"></a><span class="ln">   267</span>			certVerify := new(certificateVerifyMsg)
<a id="L268"></a><span class="ln">   268</span>			digest := make([]byte, 0, 36)
<a id="L269"></a><span class="ln">   269</span>			digest = finishedHash.serverMD5.Sum(digest)
<a id="L270"></a><span class="ln">   270</span>			digest = finishedHash.serverSHA1.Sum(digest)
<a id="L271"></a><span class="ln">   271</span>			signed, err := rsa.SignPKCS1v15(c.config.rand(), c.config.Certificates[0].PrivateKey.(*rsa.PrivateKey), crypto.MD5SHA1, digest)
<a id="L272"></a><span class="ln">   272</span>			if err != nil {
<a id="L273"></a><span class="ln">   273</span>				return c.sendAlert(alertInternalError)
<a id="L274"></a><span class="ln">   274</span>			}
<a id="L275"></a><span class="ln">   275</span>			certVerify.signature = signed
<a id="L276"></a><span class="ln">   276</span>	
<a id="L277"></a><span class="ln">   277</span>			finishedHash.Write(certVerify.marshal())
<a id="L278"></a><span class="ln">   278</span>			c.writeRecord(recordTypeHandshake, certVerify.marshal())
<a id="L279"></a><span class="ln">   279</span>		}
<a id="L280"></a><span class="ln">   280</span>	
<a id="L281"></a><span class="ln">   281</span>		masterSecret, clientMAC, serverMAC, clientKey, serverKey, clientIV, serverIV :=
<a id="L282"></a><span class="ln">   282</span>			keysFromPreMasterSecret(c.vers, preMasterSecret, hello.random, serverHello.random, suite.macLen, suite.keyLen, suite.ivLen)
<a id="L283"></a><span class="ln">   283</span>	
<a id="L284"></a><span class="ln">   284</span>		clientCipher := suite.cipher(clientKey, clientIV, false <span class="comment">/* not for reading */</span>)
<a id="L285"></a><span class="ln">   285</span>		clientHash := suite.mac(c.vers, clientMAC)
<a id="L286"></a><span class="ln">   286</span>		c.out.prepareCipherSpec(c.vers, clientCipher, clientHash)
<a id="L287"></a><span class="ln">   287</span>		c.writeRecord(recordTypeChangeCipherSpec, []byte{1})
<a id="L288"></a><span class="ln">   288</span>	
<a id="L289"></a><span class="ln">   289</span>		if serverHello.nextProtoNeg {
<a id="L290"></a><span class="ln">   290</span>			nextProto := new(nextProtoMsg)
<a id="L291"></a><span class="ln">   291</span>			proto, fallback := mutualProtocol(c.config.NextProtos, serverHello.nextProtos)
<a id="L292"></a><span class="ln">   292</span>			nextProto.proto = proto
<a id="L293"></a><span class="ln">   293</span>			c.clientProtocol = proto
<a id="L294"></a><span class="ln">   294</span>			c.clientProtocolFallback = fallback
<a id="L295"></a><span class="ln">   295</span>	
<a id="L296"></a><span class="ln">   296</span>			finishedHash.Write(nextProto.marshal())
<a id="L297"></a><span class="ln">   297</span>			c.writeRecord(recordTypeHandshake, nextProto.marshal())
<a id="L298"></a><span class="ln">   298</span>		}
<a id="L299"></a><span class="ln">   299</span>	
<a id="L300"></a><span class="ln">   300</span>		finished := new(finishedMsg)
<a id="L301"></a><span class="ln">   301</span>		finished.verifyData = finishedHash.clientSum(masterSecret)
<a id="L302"></a><span class="ln">   302</span>		finishedHash.Write(finished.marshal())
<a id="L303"></a><span class="ln">   303</span>		c.writeRecord(recordTypeHandshake, finished.marshal())
<a id="L304"></a><span class="ln">   304</span>	
<a id="L305"></a><span class="ln">   305</span>		serverCipher := suite.cipher(serverKey, serverIV, true <span class="comment">/* for reading */</span>)
<a id="L306"></a><span class="ln">   306</span>		serverHash := suite.mac(c.vers, serverMAC)
<a id="L307"></a><span class="ln">   307</span>		c.in.prepareCipherSpec(c.vers, serverCipher, serverHash)
<a id="L308"></a><span class="ln">   308</span>		c.readRecord(recordTypeChangeCipherSpec)
<a id="L309"></a><span class="ln">   309</span>		if c.err != nil {
<a id="L310"></a><span class="ln">   310</span>			return c.err
<a id="L311"></a><span class="ln">   311</span>		}
<a id="L312"></a><span class="ln">   312</span>	
<a id="L313"></a><span class="ln">   313</span>		msg, err = c.readHandshake()
<a id="L314"></a><span class="ln">   314</span>		if err != nil {
<a id="L315"></a><span class="ln">   315</span>			return err
<a id="L316"></a><span class="ln">   316</span>		}
<a id="L317"></a><span class="ln">   317</span>		serverFinished, ok := msg.(*finishedMsg)
<a id="L318"></a><span class="ln">   318</span>		if !ok {
<a id="L319"></a><span class="ln">   319</span>			return c.sendAlert(alertUnexpectedMessage)
<a id="L320"></a><span class="ln">   320</span>		}
<a id="L321"></a><span class="ln">   321</span>	
<a id="L322"></a><span class="ln">   322</span>		verify := finishedHash.serverSum(masterSecret)
<a id="L323"></a><span class="ln">   323</span>		if len(verify) != len(serverFinished.verifyData) ||
<a id="L324"></a><span class="ln">   324</span>			subtle.ConstantTimeCompare(verify, serverFinished.verifyData) != 1 {
<a id="L325"></a><span class="ln">   325</span>			return c.sendAlert(alertHandshakeFailure)
<a id="L326"></a><span class="ln">   326</span>		}
<a id="L327"></a><span class="ln">   327</span>	
<a id="L328"></a><span class="ln">   328</span>		c.handshakeComplete = true
<a id="L329"></a><span class="ln">   329</span>		c.cipherSuite = suite.id
<a id="L330"></a><span class="ln">   330</span>		return nil
<a id="L331"></a><span class="ln">   331</span>	}
<a id="L332"></a><span class="ln">   332</span>	
<a id="L333"></a><span class="ln">   333</span>	<span class="comment">// mutualProtocol finds the mutual Next Protocol Negotiation protocol given the</span>
<a id="L334"></a><span class="ln">   334</span>	<span class="comment">// set of client and server supported protocols. The set of client supported</span>
<a id="L335"></a><span class="ln">   335</span>	<span class="comment">// protocols must not be empty. It returns the resulting protocol and flag</span>
<a id="L336"></a><span class="ln">   336</span>	<span class="comment">// indicating if the fallback case was reached.</span>
<a id="L337"></a><span class="ln">   337</span>	func mutualProtocol(clientProtos, serverProtos []string) (string, bool) {
<a id="L338"></a><span class="ln">   338</span>		for _, s := range serverProtos {
<a id="L339"></a><span class="ln">   339</span>			for _, c := range clientProtos {
<a id="L340"></a><span class="ln">   340</span>				if s == c {
<a id="L341"></a><span class="ln">   341</span>					return s, false
<a id="L342"></a><span class="ln">   342</span>				}
<a id="L343"></a><span class="ln">   343</span>			}
<a id="L344"></a><span class="ln">   344</span>		}
<a id="L345"></a><span class="ln">   345</span>	
<a id="L346"></a><span class="ln">   346</span>		return clientProtos[0], true
<a id="L347"></a><span class="ln">   347</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

