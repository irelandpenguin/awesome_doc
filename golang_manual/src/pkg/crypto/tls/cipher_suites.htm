<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/crypto/tls/cipher_suites.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/crypto/tls/cipher_suites.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package tls
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;crypto/aes&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;crypto/cipher&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;crypto/des&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;crypto/hmac&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;crypto/rc4&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;crypto/sha1&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;crypto/x509&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;hash&#34;
<a id="L16"></a><span class="ln">    16</span>	)
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// a keyAgreement implements the client and server side of a TLS key agreement</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// protocol by generating and processing key exchange messages.</span>
<a id="L20"></a><span class="ln">    20</span>	type keyAgreement interface {
<a id="L21"></a><span class="ln">    21</span>		<span class="comment">// On the server side, the first two methods are called in order.</span>
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>		<span class="comment">// In the case that the key agreement protocol doesn&#39;t use a</span>
<a id="L24"></a><span class="ln">    24</span>		<span class="comment">// ServerKeyExchange message, generateServerKeyExchange can return nil,</span>
<a id="L25"></a><span class="ln">    25</span>		<span class="comment">// nil.</span>
<a id="L26"></a><span class="ln">    26</span>		generateServerKeyExchange(*Config, *Certificate, *clientHelloMsg, *serverHelloMsg) (*serverKeyExchangeMsg, error)
<a id="L27"></a><span class="ln">    27</span>		processClientKeyExchange(*Config, *Certificate, *clientKeyExchangeMsg, uint16) ([]byte, error)
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>		<span class="comment">// On the client side, the next two methods are called in order.</span>
<a id="L30"></a><span class="ln">    30</span>	
<a id="L31"></a><span class="ln">    31</span>		<span class="comment">// This method may not be called if the server doesn&#39;t send a</span>
<a id="L32"></a><span class="ln">    32</span>		<span class="comment">// ServerKeyExchange message.</span>
<a id="L33"></a><span class="ln">    33</span>		processServerKeyExchange(*Config, *clientHelloMsg, *serverHelloMsg, *x509.Certificate, *serverKeyExchangeMsg) error
<a id="L34"></a><span class="ln">    34</span>		generateClientKeyExchange(*Config, *clientHelloMsg, *x509.Certificate) ([]byte, *clientKeyExchangeMsg, error)
<a id="L35"></a><span class="ln">    35</span>	}
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// A cipherSuite is a specific combination of key agreement, cipher and MAC</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// function. All cipher suites currently assume RSA key agreement.</span>
<a id="L39"></a><span class="ln">    39</span>	type cipherSuite struct {
<a id="L40"></a><span class="ln">    40</span>		id uint16
<a id="L41"></a><span class="ln">    41</span>		<span class="comment">// the lengths, in bytes, of the key material needed for each component.</span>
<a id="L42"></a><span class="ln">    42</span>		keyLen int
<a id="L43"></a><span class="ln">    43</span>		macLen int
<a id="L44"></a><span class="ln">    44</span>		ivLen  int
<a id="L45"></a><span class="ln">    45</span>		ka     func() keyAgreement
<a id="L46"></a><span class="ln">    46</span>		<span class="comment">// If elliptic is set, a server will only consider this ciphersuite if</span>
<a id="L47"></a><span class="ln">    47</span>		<span class="comment">// the ClientHello indicated that the client supports an elliptic curve</span>
<a id="L48"></a><span class="ln">    48</span>		<span class="comment">// and point format that we can handle.</span>
<a id="L49"></a><span class="ln">    49</span>		elliptic bool
<a id="L50"></a><span class="ln">    50</span>		cipher   func(key, iv []byte, isRead bool) interface{}
<a id="L51"></a><span class="ln">    51</span>		mac      func(version uint16, macKey []byte) macFunction
<a id="L52"></a><span class="ln">    52</span>	}
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>	var cipherSuites = []*cipherSuite{
<a id="L55"></a><span class="ln">    55</span>		{TLS_RSA_WITH_RC4_128_SHA, 16, 20, 0, rsaKA, false, cipherRC4, macSHA1},
<a id="L56"></a><span class="ln">    56</span>		{TLS_RSA_WITH_3DES_EDE_CBC_SHA, 24, 20, 8, rsaKA, false, cipher3DES, macSHA1},
<a id="L57"></a><span class="ln">    57</span>		{TLS_RSA_WITH_AES_128_CBC_SHA, 16, 20, 16, rsaKA, false, cipherAES, macSHA1},
<a id="L58"></a><span class="ln">    58</span>		{TLS_ECDHE_RSA_WITH_RC4_128_SHA, 16, 20, 0, ecdheRSAKA, true, cipherRC4, macSHA1},
<a id="L59"></a><span class="ln">    59</span>		{TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, 24, 20, 8, ecdheRSAKA, true, cipher3DES, macSHA1},
<a id="L60"></a><span class="ln">    60</span>		{TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, 16, 20, 16, ecdheRSAKA, true, cipherAES, macSHA1},
<a id="L61"></a><span class="ln">    61</span>	}
<a id="L62"></a><span class="ln">    62</span>	
<a id="L63"></a><span class="ln">    63</span>	func cipherRC4(key, iv []byte, isRead bool) interface{} {
<a id="L64"></a><span class="ln">    64</span>		cipher, _ := rc4.NewCipher(key)
<a id="L65"></a><span class="ln">    65</span>		return cipher
<a id="L66"></a><span class="ln">    66</span>	}
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>	func cipher3DES(key, iv []byte, isRead bool) interface{} {
<a id="L69"></a><span class="ln">    69</span>		block, _ := des.NewTripleDESCipher(key)
<a id="L70"></a><span class="ln">    70</span>		if isRead {
<a id="L71"></a><span class="ln">    71</span>			return cipher.NewCBCDecrypter(block, iv)
<a id="L72"></a><span class="ln">    72</span>		}
<a id="L73"></a><span class="ln">    73</span>		return cipher.NewCBCEncrypter(block, iv)
<a id="L74"></a><span class="ln">    74</span>	}
<a id="L75"></a><span class="ln">    75</span>	
<a id="L76"></a><span class="ln">    76</span>	func cipherAES(key, iv []byte, isRead bool) interface{} {
<a id="L77"></a><span class="ln">    77</span>		block, _ := aes.NewCipher(key)
<a id="L78"></a><span class="ln">    78</span>		if isRead {
<a id="L79"></a><span class="ln">    79</span>			return cipher.NewCBCDecrypter(block, iv)
<a id="L80"></a><span class="ln">    80</span>		}
<a id="L81"></a><span class="ln">    81</span>		return cipher.NewCBCEncrypter(block, iv)
<a id="L82"></a><span class="ln">    82</span>	}
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">// macSHA1 returns a macFunction for the given protocol version.</span>
<a id="L85"></a><span class="ln">    85</span>	func macSHA1(version uint16, key []byte) macFunction {
<a id="L86"></a><span class="ln">    86</span>		if version == versionSSL30 {
<a id="L87"></a><span class="ln">    87</span>			mac := ssl30MAC{
<a id="L88"></a><span class="ln">    88</span>				h:   sha1.New(),
<a id="L89"></a><span class="ln">    89</span>				key: make([]byte, len(key)),
<a id="L90"></a><span class="ln">    90</span>			}
<a id="L91"></a><span class="ln">    91</span>			copy(mac.key, key)
<a id="L92"></a><span class="ln">    92</span>			return mac
<a id="L93"></a><span class="ln">    93</span>		}
<a id="L94"></a><span class="ln">    94</span>		return tls10MAC{hmac.New(sha1.New, key)}
<a id="L95"></a><span class="ln">    95</span>	}
<a id="L96"></a><span class="ln">    96</span>	
<a id="L97"></a><span class="ln">    97</span>	type macFunction interface {
<a id="L98"></a><span class="ln">    98</span>		Size() int
<a id="L99"></a><span class="ln">    99</span>		MAC(digestBuf, seq, data []byte) []byte
<a id="L100"></a><span class="ln">   100</span>	}
<a id="L101"></a><span class="ln">   101</span>	
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">// ssl30MAC implements the SSLv3 MAC function, as defined in</span>
<a id="L103"></a><span class="ln">   103</span>	<span class="comment">// www.mozilla.org/projects/security/pki/nss/ssl/draft302.txt section 5.2.3.1</span>
<a id="L104"></a><span class="ln">   104</span>	type ssl30MAC struct {
<a id="L105"></a><span class="ln">   105</span>		h   hash.Hash
<a id="L106"></a><span class="ln">   106</span>		key []byte
<a id="L107"></a><span class="ln">   107</span>	}
<a id="L108"></a><span class="ln">   108</span>	
<a id="L109"></a><span class="ln">   109</span>	func (s ssl30MAC) Size() int {
<a id="L110"></a><span class="ln">   110</span>		return s.h.Size()
<a id="L111"></a><span class="ln">   111</span>	}
<a id="L112"></a><span class="ln">   112</span>	
<a id="L113"></a><span class="ln">   113</span>	var ssl30Pad1 = [48]byte{0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36}
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>	var ssl30Pad2 = [48]byte{0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c}
<a id="L116"></a><span class="ln">   116</span>	
<a id="L117"></a><span class="ln">   117</span>	func (s ssl30MAC) MAC(digestBuf, seq, record []byte) []byte {
<a id="L118"></a><span class="ln">   118</span>		padLength := 48
<a id="L119"></a><span class="ln">   119</span>		if s.h.Size() == 20 {
<a id="L120"></a><span class="ln">   120</span>			padLength = 40
<a id="L121"></a><span class="ln">   121</span>		}
<a id="L122"></a><span class="ln">   122</span>	
<a id="L123"></a><span class="ln">   123</span>		s.h.Reset()
<a id="L124"></a><span class="ln">   124</span>		s.h.Write(s.key)
<a id="L125"></a><span class="ln">   125</span>		s.h.Write(ssl30Pad1[:padLength])
<a id="L126"></a><span class="ln">   126</span>		s.h.Write(seq)
<a id="L127"></a><span class="ln">   127</span>		s.h.Write(record[:1])
<a id="L128"></a><span class="ln">   128</span>		s.h.Write(record[3:5])
<a id="L129"></a><span class="ln">   129</span>		s.h.Write(record[recordHeaderLen:])
<a id="L130"></a><span class="ln">   130</span>		digestBuf = s.h.Sum(digestBuf[:0])
<a id="L131"></a><span class="ln">   131</span>	
<a id="L132"></a><span class="ln">   132</span>		s.h.Reset()
<a id="L133"></a><span class="ln">   133</span>		s.h.Write(s.key)
<a id="L134"></a><span class="ln">   134</span>		s.h.Write(ssl30Pad2[:padLength])
<a id="L135"></a><span class="ln">   135</span>		s.h.Write(digestBuf)
<a id="L136"></a><span class="ln">   136</span>		return s.h.Sum(digestBuf[:0])
<a id="L137"></a><span class="ln">   137</span>	}
<a id="L138"></a><span class="ln">   138</span>	
<a id="L139"></a><span class="ln">   139</span>	<span class="comment">// tls10MAC implements the TLS 1.0 MAC function. RFC 2246, section 6.2.3.</span>
<a id="L140"></a><span class="ln">   140</span>	type tls10MAC struct {
<a id="L141"></a><span class="ln">   141</span>		h hash.Hash
<a id="L142"></a><span class="ln">   142</span>	}
<a id="L143"></a><span class="ln">   143</span>	
<a id="L144"></a><span class="ln">   144</span>	func (s tls10MAC) Size() int {
<a id="L145"></a><span class="ln">   145</span>		return s.h.Size()
<a id="L146"></a><span class="ln">   146</span>	}
<a id="L147"></a><span class="ln">   147</span>	
<a id="L148"></a><span class="ln">   148</span>	func (s tls10MAC) MAC(digestBuf, seq, record []byte) []byte {
<a id="L149"></a><span class="ln">   149</span>		s.h.Reset()
<a id="L150"></a><span class="ln">   150</span>		s.h.Write(seq)
<a id="L151"></a><span class="ln">   151</span>		s.h.Write(record)
<a id="L152"></a><span class="ln">   152</span>		return s.h.Sum(digestBuf[:0])
<a id="L153"></a><span class="ln">   153</span>	}
<a id="L154"></a><span class="ln">   154</span>	
<a id="L155"></a><span class="ln">   155</span>	func rsaKA() keyAgreement {
<a id="L156"></a><span class="ln">   156</span>		return rsaKeyAgreement{}
<a id="L157"></a><span class="ln">   157</span>	}
<a id="L158"></a><span class="ln">   158</span>	
<a id="L159"></a><span class="ln">   159</span>	func ecdheRSAKA() keyAgreement {
<a id="L160"></a><span class="ln">   160</span>		return new(ecdheRSAKeyAgreement)
<a id="L161"></a><span class="ln">   161</span>	}
<a id="L162"></a><span class="ln">   162</span>	
<a id="L163"></a><span class="ln">   163</span>	<span class="comment">// mutualCipherSuite returns a cipherSuite given a list of supported</span>
<a id="L164"></a><span class="ln">   164</span>	<span class="comment">// ciphersuites and the id requested by the peer.</span>
<a id="L165"></a><span class="ln">   165</span>	func mutualCipherSuite(have []uint16, want uint16) *cipherSuite {
<a id="L166"></a><span class="ln">   166</span>		for _, id := range have {
<a id="L167"></a><span class="ln">   167</span>			if id == want {
<a id="L168"></a><span class="ln">   168</span>				for _, suite := range cipherSuites {
<a id="L169"></a><span class="ln">   169</span>					if suite.id == want {
<a id="L170"></a><span class="ln">   170</span>						return suite
<a id="L171"></a><span class="ln">   171</span>					}
<a id="L172"></a><span class="ln">   172</span>				}
<a id="L173"></a><span class="ln">   173</span>				return nil
<a id="L174"></a><span class="ln">   174</span>			}
<a id="L175"></a><span class="ln">   175</span>		}
<a id="L176"></a><span class="ln">   176</span>		return nil
<a id="L177"></a><span class="ln">   177</span>	}
<a id="L178"></a><span class="ln">   178</span>	
<a id="L179"></a><span class="ln">   179</span>	<span class="comment">// A list of the possible cipher suite ids. Taken from</span>
<a id="L180"></a><span class="ln">   180</span>	<span class="comment">// http://www.iana.org/assignments/tls-parameters/tls-parameters.xml</span>
<a id="L181"></a><span class="ln">   181</span>	const (
<a id="L182"></a><span class="ln">   182</span>		TLS_RSA_WITH_RC4_128_SHA            uint16 = 0x0005
<a id="L183"></a><span class="ln">   183</span>		TLS_RSA_WITH_3DES_EDE_CBC_SHA       uint16 = 0x000a
<a id="L184"></a><span class="ln">   184</span>		TLS_RSA_WITH_AES_128_CBC_SHA        uint16 = 0x002f
<a id="L185"></a><span class="ln">   185</span>		TLS_ECDHE_RSA_WITH_RC4_128_SHA      uint16 = 0xc011
<a id="L186"></a><span class="ln">   186</span>		TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA uint16 = 0xc012
<a id="L187"></a><span class="ln">   187</span>		TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA  uint16 = 0xc013
<a id="L188"></a><span class="ln">   188</span>	)
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

