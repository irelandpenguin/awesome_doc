<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/crypto/tls/common.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/crypto/tls/common.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package tls
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;crypto&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;crypto/rand&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;crypto/x509&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;io&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;strings&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;sync&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;time&#34;
<a id="L15"></a><span class="ln">    15</span>	)
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	const (
<a id="L18"></a><span class="ln">    18</span>		maxPlaintext    = 16384        <span class="comment">// maximum plaintext payload length</span>
<a id="L19"></a><span class="ln">    19</span>		maxCiphertext   = 16384 + 2048 <span class="comment">// maximum ciphertext payload length</span>
<a id="L20"></a><span class="ln">    20</span>		recordHeaderLen = 5            <span class="comment">// record header length</span>
<a id="L21"></a><span class="ln">    21</span>		maxHandshake    = 65536        <span class="comment">// maximum handshake we support (protocol max is 16 MB)</span>
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>		versionSSL30 = 0x0300
<a id="L24"></a><span class="ln">    24</span>		versionTLS10 = 0x0301
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>		minVersion = versionSSL30
<a id="L27"></a><span class="ln">    27</span>		maxVersion = versionTLS10
<a id="L28"></a><span class="ln">    28</span>	)
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">// TLS record types.</span>
<a id="L31"></a><span class="ln">    31</span>	type recordType uint8
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	const (
<a id="L34"></a><span class="ln">    34</span>		recordTypeChangeCipherSpec recordType = 20
<a id="L35"></a><span class="ln">    35</span>		recordTypeAlert            recordType = 21
<a id="L36"></a><span class="ln">    36</span>		recordTypeHandshake        recordType = 22
<a id="L37"></a><span class="ln">    37</span>		recordTypeApplicationData  recordType = 23
<a id="L38"></a><span class="ln">    38</span>	)
<a id="L39"></a><span class="ln">    39</span>	
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// TLS handshake message types.</span>
<a id="L41"></a><span class="ln">    41</span>	const (
<a id="L42"></a><span class="ln">    42</span>		typeClientHello        uint8 = 1
<a id="L43"></a><span class="ln">    43</span>		typeServerHello        uint8 = 2
<a id="L44"></a><span class="ln">    44</span>		typeCertificate        uint8 = 11
<a id="L45"></a><span class="ln">    45</span>		typeServerKeyExchange  uint8 = 12
<a id="L46"></a><span class="ln">    46</span>		typeCertificateRequest uint8 = 13
<a id="L47"></a><span class="ln">    47</span>		typeServerHelloDone    uint8 = 14
<a id="L48"></a><span class="ln">    48</span>		typeCertificateVerify  uint8 = 15
<a id="L49"></a><span class="ln">    49</span>		typeClientKeyExchange  uint8 = 16
<a id="L50"></a><span class="ln">    50</span>		typeFinished           uint8 = 20
<a id="L51"></a><span class="ln">    51</span>		typeCertificateStatus  uint8 = 22
<a id="L52"></a><span class="ln">    52</span>		typeNextProtocol       uint8 = 67 <span class="comment">// Not IANA assigned</span>
<a id="L53"></a><span class="ln">    53</span>	)
<a id="L54"></a><span class="ln">    54</span>	
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// TLS compression types.</span>
<a id="L56"></a><span class="ln">    56</span>	const (
<a id="L57"></a><span class="ln">    57</span>		compressionNone uint8 = 0
<a id="L58"></a><span class="ln">    58</span>	)
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// TLS extension numbers</span>
<a id="L61"></a><span class="ln">    61</span>	var (
<a id="L62"></a><span class="ln">    62</span>		extensionServerName      uint16 = 0
<a id="L63"></a><span class="ln">    63</span>		extensionStatusRequest   uint16 = 5
<a id="L64"></a><span class="ln">    64</span>		extensionSupportedCurves uint16 = 10
<a id="L65"></a><span class="ln">    65</span>		extensionSupportedPoints uint16 = 11
<a id="L66"></a><span class="ln">    66</span>		extensionNextProtoNeg    uint16 = 13172 <span class="comment">// not IANA assigned</span>
<a id="L67"></a><span class="ln">    67</span>	)
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>	<span class="comment">// TLS Elliptic Curves</span>
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8</span>
<a id="L71"></a><span class="ln">    71</span>	var (
<a id="L72"></a><span class="ln">    72</span>		curveP256 uint16 = 23
<a id="L73"></a><span class="ln">    73</span>		curveP384 uint16 = 24
<a id="L74"></a><span class="ln">    74</span>		curveP521 uint16 = 25
<a id="L75"></a><span class="ln">    75</span>	)
<a id="L76"></a><span class="ln">    76</span>	
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// TLS Elliptic Curve Point Formats</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-9</span>
<a id="L79"></a><span class="ln">    79</span>	var (
<a id="L80"></a><span class="ln">    80</span>		pointFormatUncompressed uint8 = 0
<a id="L81"></a><span class="ln">    81</span>	)
<a id="L82"></a><span class="ln">    82</span>	
<a id="L83"></a><span class="ln">    83</span>	<span class="comment">// TLS CertificateStatusType (RFC 3546)</span>
<a id="L84"></a><span class="ln">    84</span>	const (
<a id="L85"></a><span class="ln">    85</span>		statusTypeOCSP uint8 = 1
<a id="L86"></a><span class="ln">    86</span>	)
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>	<span class="comment">// Certificate types (for certificateRequestMsg)</span>
<a id="L89"></a><span class="ln">    89</span>	const (
<a id="L90"></a><span class="ln">    90</span>		certTypeRSASign    = 1 <span class="comment">// A certificate containing an RSA key</span>
<a id="L91"></a><span class="ln">    91</span>		certTypeDSSSign    = 2 <span class="comment">// A certificate containing a DSA key</span>
<a id="L92"></a><span class="ln">    92</span>		certTypeRSAFixedDH = 3 <span class="comment">// A certificate containing a static DH key</span>
<a id="L93"></a><span class="ln">    93</span>		certTypeDSSFixedDH = 4 <span class="comment">// A certificate containing a static DH key</span>
<a id="L94"></a><span class="ln">    94</span>		<span class="comment">// Rest of these are reserved by the TLS spec</span>
<a id="L95"></a><span class="ln">    95</span>	)
<a id="L96"></a><span class="ln">    96</span>	
<a id="L97"></a><span class="ln">    97</span>	<span class="comment">// ConnectionState records basic TLS details about the connection.</span>
<a id="L98"></a><span class="ln">    98</span>	type ConnectionState struct {
<a id="L99"></a><span class="ln">    99</span>		HandshakeComplete          bool
<a id="L100"></a><span class="ln">   100</span>		CipherSuite                uint16
<a id="L101"></a><span class="ln">   101</span>		NegotiatedProtocol         string
<a id="L102"></a><span class="ln">   102</span>		NegotiatedProtocolIsMutual bool
<a id="L103"></a><span class="ln">   103</span>	
<a id="L104"></a><span class="ln">   104</span>		<span class="comment">// ServerName contains the server name indicated by the client, if any.</span>
<a id="L105"></a><span class="ln">   105</span>		<span class="comment">// (Only valid for server connections.)</span>
<a id="L106"></a><span class="ln">   106</span>		ServerName string
<a id="L107"></a><span class="ln">   107</span>	
<a id="L108"></a><span class="ln">   108</span>		<span class="comment">// the certificate chain that was presented by the other side</span>
<a id="L109"></a><span class="ln">   109</span>		PeerCertificates []*x509.Certificate
<a id="L110"></a><span class="ln">   110</span>		<span class="comment">// the verified certificate chains built from PeerCertificates.</span>
<a id="L111"></a><span class="ln">   111</span>		VerifiedChains [][]*x509.Certificate
<a id="L112"></a><span class="ln">   112</span>	}
<a id="L113"></a><span class="ln">   113</span>	
<a id="L114"></a><span class="ln">   114</span>	<span class="comment">// ClientAuthType declares the policy the server will follow for</span>
<a id="L115"></a><span class="ln">   115</span>	<span class="comment">// TLS Client Authentication.</span>
<a id="L116"></a><span class="ln">   116</span>	type ClientAuthType int
<a id="L117"></a><span class="ln">   117</span>	
<a id="L118"></a><span class="ln">   118</span>	const (
<a id="L119"></a><span class="ln">   119</span>		NoClientCert ClientAuthType = iota
<a id="L120"></a><span class="ln">   120</span>		RequestClientCert
<a id="L121"></a><span class="ln">   121</span>		RequireAnyClientCert
<a id="L122"></a><span class="ln">   122</span>		VerifyClientCertIfGiven
<a id="L123"></a><span class="ln">   123</span>		RequireAndVerifyClientCert
<a id="L124"></a><span class="ln">   124</span>	)
<a id="L125"></a><span class="ln">   125</span>	
<a id="L126"></a><span class="ln">   126</span>	<span class="comment">// A Config structure is used to configure a TLS client or server. After one</span>
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// has been passed to a TLS function it must not be modified.</span>
<a id="L128"></a><span class="ln">   128</span>	type Config struct {
<a id="L129"></a><span class="ln">   129</span>		<span class="comment">// Rand provides the source of entropy for nonces and RSA blinding.</span>
<a id="L130"></a><span class="ln">   130</span>		<span class="comment">// If Rand is nil, TLS uses the cryptographic random reader in package</span>
<a id="L131"></a><span class="ln">   131</span>		<span class="comment">// crypto/rand.</span>
<a id="L132"></a><span class="ln">   132</span>		Rand io.Reader
<a id="L133"></a><span class="ln">   133</span>	
<a id="L134"></a><span class="ln">   134</span>		<span class="comment">// Time returns the current time as the number of seconds since the epoch.</span>
<a id="L135"></a><span class="ln">   135</span>		<span class="comment">// If Time is nil, TLS uses time.Now.</span>
<a id="L136"></a><span class="ln">   136</span>		Time func() time.Time
<a id="L137"></a><span class="ln">   137</span>	
<a id="L138"></a><span class="ln">   138</span>		<span class="comment">// Certificates contains one or more certificate chains</span>
<a id="L139"></a><span class="ln">   139</span>		<span class="comment">// to present to the other side of the connection.</span>
<a id="L140"></a><span class="ln">   140</span>		<span class="comment">// Server configurations must include at least one certificate.</span>
<a id="L141"></a><span class="ln">   141</span>		Certificates []Certificate
<a id="L142"></a><span class="ln">   142</span>	
<a id="L143"></a><span class="ln">   143</span>		<span class="comment">// NameToCertificate maps from a certificate name to an element of</span>
<a id="L144"></a><span class="ln">   144</span>		<span class="comment">// Certificates. Note that a certificate name can be of the form</span>
<a id="L145"></a><span class="ln">   145</span>		<span class="comment">// &#39;*.example.com&#39; and so doesn&#39;t have to be a domain name as such.</span>
<a id="L146"></a><span class="ln">   146</span>		<span class="comment">// See Config.BuildNameToCertificate</span>
<a id="L147"></a><span class="ln">   147</span>		<span class="comment">// The nil value causes the first element of Certificates to be used</span>
<a id="L148"></a><span class="ln">   148</span>		<span class="comment">// for all connections.</span>
<a id="L149"></a><span class="ln">   149</span>		NameToCertificate map[string]*Certificate
<a id="L150"></a><span class="ln">   150</span>	
<a id="L151"></a><span class="ln">   151</span>		<span class="comment">// RootCAs defines the set of root certificate authorities</span>
<a id="L152"></a><span class="ln">   152</span>		<span class="comment">// that clients use when verifying server certificates.</span>
<a id="L153"></a><span class="ln">   153</span>		<span class="comment">// If RootCAs is nil, TLS uses the host&#39;s root CA set.</span>
<a id="L154"></a><span class="ln">   154</span>		RootCAs *x509.CertPool
<a id="L155"></a><span class="ln">   155</span>	
<a id="L156"></a><span class="ln">   156</span>		<span class="comment">// NextProtos is a list of supported, application level protocols.</span>
<a id="L157"></a><span class="ln">   157</span>		NextProtos []string
<a id="L158"></a><span class="ln">   158</span>	
<a id="L159"></a><span class="ln">   159</span>		<span class="comment">// ServerName is included in the client&#39;s handshake to support virtual</span>
<a id="L160"></a><span class="ln">   160</span>		<span class="comment">// hosting.</span>
<a id="L161"></a><span class="ln">   161</span>		ServerName string
<a id="L162"></a><span class="ln">   162</span>	
<a id="L163"></a><span class="ln">   163</span>		<span class="comment">// ClientAuth determines the server&#39;s policy for</span>
<a id="L164"></a><span class="ln">   164</span>		<span class="comment">// TLS Client Authentication. The default is NoClientCert.</span>
<a id="L165"></a><span class="ln">   165</span>		ClientAuth ClientAuthType
<a id="L166"></a><span class="ln">   166</span>	
<a id="L167"></a><span class="ln">   167</span>		<span class="comment">// ClientCAs defines the set of root certificate authorities</span>
<a id="L168"></a><span class="ln">   168</span>		<span class="comment">// that servers use if required to verify a client certificate</span>
<a id="L169"></a><span class="ln">   169</span>		<span class="comment">// by the policy in ClientAuth.</span>
<a id="L170"></a><span class="ln">   170</span>		ClientCAs *x509.CertPool
<a id="L171"></a><span class="ln">   171</span>	
<a id="L172"></a><span class="ln">   172</span>		<span class="comment">// InsecureSkipVerify controls whether a client verifies the</span>
<a id="L173"></a><span class="ln">   173</span>		<span class="comment">// server&#39;s certificate chain and host name.</span>
<a id="L174"></a><span class="ln">   174</span>		<span class="comment">// If InsecureSkipVerify is true, TLS accepts any certificate</span>
<a id="L175"></a><span class="ln">   175</span>		<span class="comment">// presented by the server and any host name in that certificate.</span>
<a id="L176"></a><span class="ln">   176</span>		<span class="comment">// In this mode, TLS is susceptible to man-in-the-middle attacks.</span>
<a id="L177"></a><span class="ln">   177</span>		<span class="comment">// This should be used only for testing.</span>
<a id="L178"></a><span class="ln">   178</span>		InsecureSkipVerify bool
<a id="L179"></a><span class="ln">   179</span>	
<a id="L180"></a><span class="ln">   180</span>		<span class="comment">// CipherSuites is a list of supported cipher suites. If CipherSuites</span>
<a id="L181"></a><span class="ln">   181</span>		<span class="comment">// is nil, TLS uses a list of suites supported by the implementation.</span>
<a id="L182"></a><span class="ln">   182</span>		CipherSuites []uint16
<a id="L183"></a><span class="ln">   183</span>	}
<a id="L184"></a><span class="ln">   184</span>	
<a id="L185"></a><span class="ln">   185</span>	func (c *Config) rand() io.Reader {
<a id="L186"></a><span class="ln">   186</span>		r := c.Rand
<a id="L187"></a><span class="ln">   187</span>		if r == nil {
<a id="L188"></a><span class="ln">   188</span>			return rand.Reader
<a id="L189"></a><span class="ln">   189</span>		}
<a id="L190"></a><span class="ln">   190</span>		return r
<a id="L191"></a><span class="ln">   191</span>	}
<a id="L192"></a><span class="ln">   192</span>	
<a id="L193"></a><span class="ln">   193</span>	func (c *Config) time() time.Time {
<a id="L194"></a><span class="ln">   194</span>		t := c.Time
<a id="L195"></a><span class="ln">   195</span>		if t == nil {
<a id="L196"></a><span class="ln">   196</span>			t = time.Now
<a id="L197"></a><span class="ln">   197</span>		}
<a id="L198"></a><span class="ln">   198</span>		return t()
<a id="L199"></a><span class="ln">   199</span>	}
<a id="L200"></a><span class="ln">   200</span>	
<a id="L201"></a><span class="ln">   201</span>	func (c *Config) cipherSuites() []uint16 {
<a id="L202"></a><span class="ln">   202</span>		s := c.CipherSuites
<a id="L203"></a><span class="ln">   203</span>		if s == nil {
<a id="L204"></a><span class="ln">   204</span>			s = defaultCipherSuites()
<a id="L205"></a><span class="ln">   205</span>		}
<a id="L206"></a><span class="ln">   206</span>		return s
<a id="L207"></a><span class="ln">   207</span>	}
<a id="L208"></a><span class="ln">   208</span>	
<a id="L209"></a><span class="ln">   209</span>	<span class="comment">// getCertificateForName returns the best certificate for the given name,</span>
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// defaulting to the first element of c.Certificates if there are no good</span>
<a id="L211"></a><span class="ln">   211</span>	<span class="comment">// options.</span>
<a id="L212"></a><span class="ln">   212</span>	func (c *Config) getCertificateForName(name string) *Certificate {
<a id="L213"></a><span class="ln">   213</span>		if len(c.Certificates) == 1 || c.NameToCertificate == nil {
<a id="L214"></a><span class="ln">   214</span>			<span class="comment">// There&#39;s only one choice, so no point doing any work.</span>
<a id="L215"></a><span class="ln">   215</span>			return &amp;c.Certificates[0]
<a id="L216"></a><span class="ln">   216</span>		}
<a id="L217"></a><span class="ln">   217</span>	
<a id="L218"></a><span class="ln">   218</span>		name = strings.ToLower(name)
<a id="L219"></a><span class="ln">   219</span>		for len(name) &gt; 0 &amp;&amp; name[len(name)-1] == &#39;.&#39; {
<a id="L220"></a><span class="ln">   220</span>			name = name[:len(name)-1]
<a id="L221"></a><span class="ln">   221</span>		}
<a id="L222"></a><span class="ln">   222</span>	
<a id="L223"></a><span class="ln">   223</span>		if cert, ok := c.NameToCertificate[name]; ok {
<a id="L224"></a><span class="ln">   224</span>			return cert
<a id="L225"></a><span class="ln">   225</span>		}
<a id="L226"></a><span class="ln">   226</span>	
<a id="L227"></a><span class="ln">   227</span>		<span class="comment">// try replacing labels in the name with wildcards until we get a</span>
<a id="L228"></a><span class="ln">   228</span>		<span class="comment">// match.</span>
<a id="L229"></a><span class="ln">   229</span>		labels := strings.Split(name, &#34;.&#34;)
<a id="L230"></a><span class="ln">   230</span>		for i := range labels {
<a id="L231"></a><span class="ln">   231</span>			labels[i] = &#34;*&#34;
<a id="L232"></a><span class="ln">   232</span>			candidate := strings.Join(labels, &#34;.&#34;)
<a id="L233"></a><span class="ln">   233</span>			if cert, ok := c.NameToCertificate[candidate]; ok {
<a id="L234"></a><span class="ln">   234</span>				return cert
<a id="L235"></a><span class="ln">   235</span>			}
<a id="L236"></a><span class="ln">   236</span>		}
<a id="L237"></a><span class="ln">   237</span>	
<a id="L238"></a><span class="ln">   238</span>		<span class="comment">// If nothing matches, return the first certificate.</span>
<a id="L239"></a><span class="ln">   239</span>		return &amp;c.Certificates[0]
<a id="L240"></a><span class="ln">   240</span>	}
<a id="L241"></a><span class="ln">   241</span>	
<a id="L242"></a><span class="ln">   242</span>	<span class="comment">// BuildNameToCertificate parses c.Certificates and builds c.NameToCertificate</span>
<a id="L243"></a><span class="ln">   243</span>	<span class="comment">// from the CommonName and SubjectAlternateName fields of each of the leaf</span>
<a id="L244"></a><span class="ln">   244</span>	<span class="comment">// certificates.</span>
<a id="L245"></a><span class="ln">   245</span>	func (c *Config) BuildNameToCertificate() {
<a id="L246"></a><span class="ln">   246</span>		c.NameToCertificate = make(map[string]*Certificate)
<a id="L247"></a><span class="ln">   247</span>		for i := range c.Certificates {
<a id="L248"></a><span class="ln">   248</span>			cert := &amp;c.Certificates[i]
<a id="L249"></a><span class="ln">   249</span>			x509Cert, err := x509.ParseCertificate(cert.Certificate[0])
<a id="L250"></a><span class="ln">   250</span>			if err != nil {
<a id="L251"></a><span class="ln">   251</span>				continue
<a id="L252"></a><span class="ln">   252</span>			}
<a id="L253"></a><span class="ln">   253</span>			if len(x509Cert.Subject.CommonName) &gt; 0 {
<a id="L254"></a><span class="ln">   254</span>				c.NameToCertificate[x509Cert.Subject.CommonName] = cert
<a id="L255"></a><span class="ln">   255</span>			}
<a id="L256"></a><span class="ln">   256</span>			for _, san := range x509Cert.DNSNames {
<a id="L257"></a><span class="ln">   257</span>				c.NameToCertificate[san] = cert
<a id="L258"></a><span class="ln">   258</span>			}
<a id="L259"></a><span class="ln">   259</span>		}
<a id="L260"></a><span class="ln">   260</span>	}
<a id="L261"></a><span class="ln">   261</span>	
<a id="L262"></a><span class="ln">   262</span>	<span class="comment">// A Certificate is a chain of one or more certificates, leaf first.</span>
<a id="L263"></a><span class="ln">   263</span>	type Certificate struct {
<a id="L264"></a><span class="ln">   264</span>		Certificate [][]byte
<a id="L265"></a><span class="ln">   265</span>		PrivateKey  crypto.PrivateKey <span class="comment">// supported types: *rsa.PrivateKey</span>
<a id="L266"></a><span class="ln">   266</span>		<span class="comment">// OCSPStaple contains an optional OCSP response which will be served</span>
<a id="L267"></a><span class="ln">   267</span>		<span class="comment">// to clients that request it.</span>
<a id="L268"></a><span class="ln">   268</span>		OCSPStaple []byte
<a id="L269"></a><span class="ln">   269</span>		<span class="comment">// Leaf is the parsed form of the leaf certificate, which may be</span>
<a id="L270"></a><span class="ln">   270</span>		<span class="comment">// initialized using x509.ParseCertificate to reduce per-handshake</span>
<a id="L271"></a><span class="ln">   271</span>		<span class="comment">// processing for TLS clients doing client authentication. If nil, the</span>
<a id="L272"></a><span class="ln">   272</span>		<span class="comment">// leaf certificate will be parsed as needed.</span>
<a id="L273"></a><span class="ln">   273</span>		Leaf *x509.Certificate
<a id="L274"></a><span class="ln">   274</span>	}
<a id="L275"></a><span class="ln">   275</span>	
<a id="L276"></a><span class="ln">   276</span>	<span class="comment">// A TLS record.</span>
<a id="L277"></a><span class="ln">   277</span>	type record struct {
<a id="L278"></a><span class="ln">   278</span>		contentType  recordType
<a id="L279"></a><span class="ln">   279</span>		major, minor uint8
<a id="L280"></a><span class="ln">   280</span>		payload      []byte
<a id="L281"></a><span class="ln">   281</span>	}
<a id="L282"></a><span class="ln">   282</span>	
<a id="L283"></a><span class="ln">   283</span>	type handshakeMessage interface {
<a id="L284"></a><span class="ln">   284</span>		marshal() []byte
<a id="L285"></a><span class="ln">   285</span>		unmarshal([]byte) bool
<a id="L286"></a><span class="ln">   286</span>	}
<a id="L287"></a><span class="ln">   287</span>	
<a id="L288"></a><span class="ln">   288</span>	<span class="comment">// mutualVersion returns the protocol version to use given the advertised</span>
<a id="L289"></a><span class="ln">   289</span>	<span class="comment">// version of the peer.</span>
<a id="L290"></a><span class="ln">   290</span>	func mutualVersion(vers uint16) (uint16, bool) {
<a id="L291"></a><span class="ln">   291</span>		if vers &lt; minVersion {
<a id="L292"></a><span class="ln">   292</span>			return 0, false
<a id="L293"></a><span class="ln">   293</span>		}
<a id="L294"></a><span class="ln">   294</span>		if vers &gt; maxVersion {
<a id="L295"></a><span class="ln">   295</span>			vers = maxVersion
<a id="L296"></a><span class="ln">   296</span>		}
<a id="L297"></a><span class="ln">   297</span>		return vers, true
<a id="L298"></a><span class="ln">   298</span>	}
<a id="L299"></a><span class="ln">   299</span>	
<a id="L300"></a><span class="ln">   300</span>	var emptyConfig Config
<a id="L301"></a><span class="ln">   301</span>	
<a id="L302"></a><span class="ln">   302</span>	func defaultConfig() *Config {
<a id="L303"></a><span class="ln">   303</span>		return &amp;emptyConfig
<a id="L304"></a><span class="ln">   304</span>	}
<a id="L305"></a><span class="ln">   305</span>	
<a id="L306"></a><span class="ln">   306</span>	var (
<a id="L307"></a><span class="ln">   307</span>		once                   sync.Once
<a id="L308"></a><span class="ln">   308</span>		varDefaultCipherSuites []uint16
<a id="L309"></a><span class="ln">   309</span>	)
<a id="L310"></a><span class="ln">   310</span>	
<a id="L311"></a><span class="ln">   311</span>	func defaultCipherSuites() []uint16 {
<a id="L312"></a><span class="ln">   312</span>		once.Do(initDefaultCipherSuites)
<a id="L313"></a><span class="ln">   313</span>		return varDefaultCipherSuites
<a id="L314"></a><span class="ln">   314</span>	}
<a id="L315"></a><span class="ln">   315</span>	
<a id="L316"></a><span class="ln">   316</span>	func initDefaultCipherSuites() {
<a id="L317"></a><span class="ln">   317</span>		varDefaultCipherSuites = make([]uint16, len(cipherSuites))
<a id="L318"></a><span class="ln">   318</span>		for i, suite := range cipherSuites {
<a id="L319"></a><span class="ln">   319</span>			varDefaultCipherSuites[i] = suite.id
<a id="L320"></a><span class="ln">   320</span>		}
<a id="L321"></a><span class="ln">   321</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

