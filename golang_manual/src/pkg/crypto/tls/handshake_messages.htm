<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/crypto/tls/handshake_messages.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/crypto/tls/handshake_messages.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package tls
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import &#34;bytes&#34;
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	type clientHelloMsg struct {
<a id="L10"></a><span class="ln">    10</span>		raw                []byte
<a id="L11"></a><span class="ln">    11</span>		vers               uint16
<a id="L12"></a><span class="ln">    12</span>		random             []byte
<a id="L13"></a><span class="ln">    13</span>		sessionId          []byte
<a id="L14"></a><span class="ln">    14</span>		cipherSuites       []uint16
<a id="L15"></a><span class="ln">    15</span>		compressionMethods []uint8
<a id="L16"></a><span class="ln">    16</span>		nextProtoNeg       bool
<a id="L17"></a><span class="ln">    17</span>		serverName         string
<a id="L18"></a><span class="ln">    18</span>		ocspStapling       bool
<a id="L19"></a><span class="ln">    19</span>		supportedCurves    []uint16
<a id="L20"></a><span class="ln">    20</span>		supportedPoints    []uint8
<a id="L21"></a><span class="ln">    21</span>	}
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	func (m *clientHelloMsg) equal(i interface{}) bool {
<a id="L24"></a><span class="ln">    24</span>		m1, ok := i.(*clientHelloMsg)
<a id="L25"></a><span class="ln">    25</span>		if !ok {
<a id="L26"></a><span class="ln">    26</span>			return false
<a id="L27"></a><span class="ln">    27</span>		}
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>		return bytes.Equal(m.raw, m1.raw) &amp;&amp;
<a id="L30"></a><span class="ln">    30</span>			m.vers == m1.vers &amp;&amp;
<a id="L31"></a><span class="ln">    31</span>			bytes.Equal(m.random, m1.random) &amp;&amp;
<a id="L32"></a><span class="ln">    32</span>			bytes.Equal(m.sessionId, m1.sessionId) &amp;&amp;
<a id="L33"></a><span class="ln">    33</span>			eqUint16s(m.cipherSuites, m1.cipherSuites) &amp;&amp;
<a id="L34"></a><span class="ln">    34</span>			bytes.Equal(m.compressionMethods, m1.compressionMethods) &amp;&amp;
<a id="L35"></a><span class="ln">    35</span>			m.nextProtoNeg == m1.nextProtoNeg &amp;&amp;
<a id="L36"></a><span class="ln">    36</span>			m.serverName == m1.serverName &amp;&amp;
<a id="L37"></a><span class="ln">    37</span>			m.ocspStapling == m1.ocspStapling &amp;&amp;
<a id="L38"></a><span class="ln">    38</span>			eqUint16s(m.supportedCurves, m1.supportedCurves) &amp;&amp;
<a id="L39"></a><span class="ln">    39</span>			bytes.Equal(m.supportedPoints, m1.supportedPoints)
<a id="L40"></a><span class="ln">    40</span>	}
<a id="L41"></a><span class="ln">    41</span>	
<a id="L42"></a><span class="ln">    42</span>	func (m *clientHelloMsg) marshal() []byte {
<a id="L43"></a><span class="ln">    43</span>		if m.raw != nil {
<a id="L44"></a><span class="ln">    44</span>			return m.raw
<a id="L45"></a><span class="ln">    45</span>		}
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>		length := 2 + 32 + 1 + len(m.sessionId) + 2 + len(m.cipherSuites)*2 + 1 + len(m.compressionMethods)
<a id="L48"></a><span class="ln">    48</span>		numExtensions := 0
<a id="L49"></a><span class="ln">    49</span>		extensionsLength := 0
<a id="L50"></a><span class="ln">    50</span>		if m.nextProtoNeg {
<a id="L51"></a><span class="ln">    51</span>			numExtensions++
<a id="L52"></a><span class="ln">    52</span>		}
<a id="L53"></a><span class="ln">    53</span>		if m.ocspStapling {
<a id="L54"></a><span class="ln">    54</span>			extensionsLength += 1 + 2 + 2
<a id="L55"></a><span class="ln">    55</span>			numExtensions++
<a id="L56"></a><span class="ln">    56</span>		}
<a id="L57"></a><span class="ln">    57</span>		if len(m.serverName) &gt; 0 {
<a id="L58"></a><span class="ln">    58</span>			extensionsLength += 5 + len(m.serverName)
<a id="L59"></a><span class="ln">    59</span>			numExtensions++
<a id="L60"></a><span class="ln">    60</span>		}
<a id="L61"></a><span class="ln">    61</span>		if len(m.supportedCurves) &gt; 0 {
<a id="L62"></a><span class="ln">    62</span>			extensionsLength += 2 + 2*len(m.supportedCurves)
<a id="L63"></a><span class="ln">    63</span>			numExtensions++
<a id="L64"></a><span class="ln">    64</span>		}
<a id="L65"></a><span class="ln">    65</span>		if len(m.supportedPoints) &gt; 0 {
<a id="L66"></a><span class="ln">    66</span>			extensionsLength += 1 + len(m.supportedPoints)
<a id="L67"></a><span class="ln">    67</span>			numExtensions++
<a id="L68"></a><span class="ln">    68</span>		}
<a id="L69"></a><span class="ln">    69</span>		if numExtensions &gt; 0 {
<a id="L70"></a><span class="ln">    70</span>			extensionsLength += 4 * numExtensions
<a id="L71"></a><span class="ln">    71</span>			length += 2 + extensionsLength
<a id="L72"></a><span class="ln">    72</span>		}
<a id="L73"></a><span class="ln">    73</span>	
<a id="L74"></a><span class="ln">    74</span>		x := make([]byte, 4+length)
<a id="L75"></a><span class="ln">    75</span>		x[0] = typeClientHello
<a id="L76"></a><span class="ln">    76</span>		x[1] = uint8(length &gt;&gt; 16)
<a id="L77"></a><span class="ln">    77</span>		x[2] = uint8(length &gt;&gt; 8)
<a id="L78"></a><span class="ln">    78</span>		x[3] = uint8(length)
<a id="L79"></a><span class="ln">    79</span>		x[4] = uint8(m.vers &gt;&gt; 8)
<a id="L80"></a><span class="ln">    80</span>		x[5] = uint8(m.vers)
<a id="L81"></a><span class="ln">    81</span>		copy(x[6:38], m.random)
<a id="L82"></a><span class="ln">    82</span>		x[38] = uint8(len(m.sessionId))
<a id="L83"></a><span class="ln">    83</span>		copy(x[39:39+len(m.sessionId)], m.sessionId)
<a id="L84"></a><span class="ln">    84</span>		y := x[39+len(m.sessionId):]
<a id="L85"></a><span class="ln">    85</span>		y[0] = uint8(len(m.cipherSuites) &gt;&gt; 7)
<a id="L86"></a><span class="ln">    86</span>		y[1] = uint8(len(m.cipherSuites) &lt;&lt; 1)
<a id="L87"></a><span class="ln">    87</span>		for i, suite := range m.cipherSuites {
<a id="L88"></a><span class="ln">    88</span>			y[2+i*2] = uint8(suite &gt;&gt; 8)
<a id="L89"></a><span class="ln">    89</span>			y[3+i*2] = uint8(suite)
<a id="L90"></a><span class="ln">    90</span>		}
<a id="L91"></a><span class="ln">    91</span>		z := y[2+len(m.cipherSuites)*2:]
<a id="L92"></a><span class="ln">    92</span>		z[0] = uint8(len(m.compressionMethods))
<a id="L93"></a><span class="ln">    93</span>		copy(z[1:], m.compressionMethods)
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>		z = z[1+len(m.compressionMethods):]
<a id="L96"></a><span class="ln">    96</span>		if numExtensions &gt; 0 {
<a id="L97"></a><span class="ln">    97</span>			z[0] = byte(extensionsLength &gt;&gt; 8)
<a id="L98"></a><span class="ln">    98</span>			z[1] = byte(extensionsLength)
<a id="L99"></a><span class="ln">    99</span>			z = z[2:]
<a id="L100"></a><span class="ln">   100</span>		}
<a id="L101"></a><span class="ln">   101</span>		if m.nextProtoNeg {
<a id="L102"></a><span class="ln">   102</span>			z[0] = byte(extensionNextProtoNeg &gt;&gt; 8)
<a id="L103"></a><span class="ln">   103</span>			z[1] = byte(extensionNextProtoNeg)
<a id="L104"></a><span class="ln">   104</span>			<span class="comment">// The length is always 0</span>
<a id="L105"></a><span class="ln">   105</span>			z = z[4:]
<a id="L106"></a><span class="ln">   106</span>		}
<a id="L107"></a><span class="ln">   107</span>		if len(m.serverName) &gt; 0 {
<a id="L108"></a><span class="ln">   108</span>			z[0] = byte(extensionServerName &gt;&gt; 8)
<a id="L109"></a><span class="ln">   109</span>			z[1] = byte(extensionServerName)
<a id="L110"></a><span class="ln">   110</span>			l := len(m.serverName) + 5
<a id="L111"></a><span class="ln">   111</span>			z[2] = byte(l &gt;&gt; 8)
<a id="L112"></a><span class="ln">   112</span>			z[3] = byte(l)
<a id="L113"></a><span class="ln">   113</span>			z = z[4:]
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>			<span class="comment">// RFC 3546, section 3.1</span>
<a id="L116"></a><span class="ln">   116</span>			<span class="comment">//</span>
<a id="L117"></a><span class="ln">   117</span>			<span class="comment">// struct {</span>
<a id="L118"></a><span class="ln">   118</span>			<span class="comment">//     NameType name_type;</span>
<a id="L119"></a><span class="ln">   119</span>			<span class="comment">//     select (name_type) {</span>
<a id="L120"></a><span class="ln">   120</span>			<span class="comment">//         case host_name: HostName;</span>
<a id="L121"></a><span class="ln">   121</span>			<span class="comment">//     } name;</span>
<a id="L122"></a><span class="ln">   122</span>			<span class="comment">// } ServerName;</span>
<a id="L123"></a><span class="ln">   123</span>			<span class="comment">//</span>
<a id="L124"></a><span class="ln">   124</span>			<span class="comment">// enum {</span>
<a id="L125"></a><span class="ln">   125</span>			<span class="comment">//     host_name(0), (255)</span>
<a id="L126"></a><span class="ln">   126</span>			<span class="comment">// } NameType;</span>
<a id="L127"></a><span class="ln">   127</span>			<span class="comment">//</span>
<a id="L128"></a><span class="ln">   128</span>			<span class="comment">// opaque HostName&lt;1..2^16-1&gt;;</span>
<a id="L129"></a><span class="ln">   129</span>			<span class="comment">//</span>
<a id="L130"></a><span class="ln">   130</span>			<span class="comment">// struct {</span>
<a id="L131"></a><span class="ln">   131</span>			<span class="comment">//     ServerName server_name_list&lt;1..2^16-1&gt;</span>
<a id="L132"></a><span class="ln">   132</span>			<span class="comment">// } ServerNameList;</span>
<a id="L133"></a><span class="ln">   133</span>	
<a id="L134"></a><span class="ln">   134</span>			z[0] = byte((len(m.serverName) + 3) &gt;&gt; 8)
<a id="L135"></a><span class="ln">   135</span>			z[1] = byte(len(m.serverName) + 3)
<a id="L136"></a><span class="ln">   136</span>			z[3] = byte(len(m.serverName) &gt;&gt; 8)
<a id="L137"></a><span class="ln">   137</span>			z[4] = byte(len(m.serverName))
<a id="L138"></a><span class="ln">   138</span>			copy(z[5:], []byte(m.serverName))
<a id="L139"></a><span class="ln">   139</span>			z = z[l:]
<a id="L140"></a><span class="ln">   140</span>		}
<a id="L141"></a><span class="ln">   141</span>		if m.ocspStapling {
<a id="L142"></a><span class="ln">   142</span>			<span class="comment">// RFC 4366, section 3.6</span>
<a id="L143"></a><span class="ln">   143</span>			z[0] = byte(extensionStatusRequest &gt;&gt; 8)
<a id="L144"></a><span class="ln">   144</span>			z[1] = byte(extensionStatusRequest)
<a id="L145"></a><span class="ln">   145</span>			z[2] = 0
<a id="L146"></a><span class="ln">   146</span>			z[3] = 5
<a id="L147"></a><span class="ln">   147</span>			z[4] = 1 <span class="comment">// OCSP type</span>
<a id="L148"></a><span class="ln">   148</span>			<span class="comment">// Two zero valued uint16s for the two lengths.</span>
<a id="L149"></a><span class="ln">   149</span>			z = z[9:]
<a id="L150"></a><span class="ln">   150</span>		}
<a id="L151"></a><span class="ln">   151</span>		if len(m.supportedCurves) &gt; 0 {
<a id="L152"></a><span class="ln">   152</span>			<span class="comment">// http://tools.ietf.org/html/rfc4492#section-5.5.1</span>
<a id="L153"></a><span class="ln">   153</span>			z[0] = byte(extensionSupportedCurves &gt;&gt; 8)
<a id="L154"></a><span class="ln">   154</span>			z[1] = byte(extensionSupportedCurves)
<a id="L155"></a><span class="ln">   155</span>			l := 2 + 2*len(m.supportedCurves)
<a id="L156"></a><span class="ln">   156</span>			z[2] = byte(l &gt;&gt; 8)
<a id="L157"></a><span class="ln">   157</span>			z[3] = byte(l)
<a id="L158"></a><span class="ln">   158</span>			l -= 2
<a id="L159"></a><span class="ln">   159</span>			z[4] = byte(l &gt;&gt; 8)
<a id="L160"></a><span class="ln">   160</span>			z[5] = byte(l)
<a id="L161"></a><span class="ln">   161</span>			z = z[6:]
<a id="L162"></a><span class="ln">   162</span>			for _, curve := range m.supportedCurves {
<a id="L163"></a><span class="ln">   163</span>				z[0] = byte(curve &gt;&gt; 8)
<a id="L164"></a><span class="ln">   164</span>				z[1] = byte(curve)
<a id="L165"></a><span class="ln">   165</span>				z = z[2:]
<a id="L166"></a><span class="ln">   166</span>			}
<a id="L167"></a><span class="ln">   167</span>		}
<a id="L168"></a><span class="ln">   168</span>		if len(m.supportedPoints) &gt; 0 {
<a id="L169"></a><span class="ln">   169</span>			<span class="comment">// http://tools.ietf.org/html/rfc4492#section-5.5.2</span>
<a id="L170"></a><span class="ln">   170</span>			z[0] = byte(extensionSupportedPoints &gt;&gt; 8)
<a id="L171"></a><span class="ln">   171</span>			z[1] = byte(extensionSupportedPoints)
<a id="L172"></a><span class="ln">   172</span>			l := 1 + len(m.supportedPoints)
<a id="L173"></a><span class="ln">   173</span>			z[2] = byte(l &gt;&gt; 8)
<a id="L174"></a><span class="ln">   174</span>			z[3] = byte(l)
<a id="L175"></a><span class="ln">   175</span>			l--
<a id="L176"></a><span class="ln">   176</span>			z[4] = byte(l)
<a id="L177"></a><span class="ln">   177</span>			z = z[5:]
<a id="L178"></a><span class="ln">   178</span>			for _, pointFormat := range m.supportedPoints {
<a id="L179"></a><span class="ln">   179</span>				z[0] = byte(pointFormat)
<a id="L180"></a><span class="ln">   180</span>				z = z[1:]
<a id="L181"></a><span class="ln">   181</span>			}
<a id="L182"></a><span class="ln">   182</span>		}
<a id="L183"></a><span class="ln">   183</span>	
<a id="L184"></a><span class="ln">   184</span>		m.raw = x
<a id="L185"></a><span class="ln">   185</span>	
<a id="L186"></a><span class="ln">   186</span>		return x
<a id="L187"></a><span class="ln">   187</span>	}
<a id="L188"></a><span class="ln">   188</span>	
<a id="L189"></a><span class="ln">   189</span>	func (m *clientHelloMsg) unmarshal(data []byte) bool {
<a id="L190"></a><span class="ln">   190</span>		if len(data) &lt; 42 {
<a id="L191"></a><span class="ln">   191</span>			return false
<a id="L192"></a><span class="ln">   192</span>		}
<a id="L193"></a><span class="ln">   193</span>		m.raw = data
<a id="L194"></a><span class="ln">   194</span>		m.vers = uint16(data[4])&lt;&lt;8 | uint16(data[5])
<a id="L195"></a><span class="ln">   195</span>		m.random = data[6:38]
<a id="L196"></a><span class="ln">   196</span>		sessionIdLen := int(data[38])
<a id="L197"></a><span class="ln">   197</span>		if sessionIdLen &gt; 32 || len(data) &lt; 39+sessionIdLen {
<a id="L198"></a><span class="ln">   198</span>			return false
<a id="L199"></a><span class="ln">   199</span>		}
<a id="L200"></a><span class="ln">   200</span>		m.sessionId = data[39 : 39+sessionIdLen]
<a id="L201"></a><span class="ln">   201</span>		data = data[39+sessionIdLen:]
<a id="L202"></a><span class="ln">   202</span>		if len(data) &lt; 2 {
<a id="L203"></a><span class="ln">   203</span>			return false
<a id="L204"></a><span class="ln">   204</span>		}
<a id="L205"></a><span class="ln">   205</span>		<span class="comment">// cipherSuiteLen is the number of bytes of cipher suite numbers. Since</span>
<a id="L206"></a><span class="ln">   206</span>		<span class="comment">// they are uint16s, the number must be even.</span>
<a id="L207"></a><span class="ln">   207</span>		cipherSuiteLen := int(data[0])&lt;&lt;8 | int(data[1])
<a id="L208"></a><span class="ln">   208</span>		if cipherSuiteLen%2 == 1 || len(data) &lt; 2+cipherSuiteLen {
<a id="L209"></a><span class="ln">   209</span>			return false
<a id="L210"></a><span class="ln">   210</span>		}
<a id="L211"></a><span class="ln">   211</span>		numCipherSuites := cipherSuiteLen / 2
<a id="L212"></a><span class="ln">   212</span>		m.cipherSuites = make([]uint16, numCipherSuites)
<a id="L213"></a><span class="ln">   213</span>		for i := 0; i &lt; numCipherSuites; i++ {
<a id="L214"></a><span class="ln">   214</span>			m.cipherSuites[i] = uint16(data[2+2*i])&lt;&lt;8 | uint16(data[3+2*i])
<a id="L215"></a><span class="ln">   215</span>		}
<a id="L216"></a><span class="ln">   216</span>		data = data[2+cipherSuiteLen:]
<a id="L217"></a><span class="ln">   217</span>		if len(data) &lt; 1 {
<a id="L218"></a><span class="ln">   218</span>			return false
<a id="L219"></a><span class="ln">   219</span>		}
<a id="L220"></a><span class="ln">   220</span>		compressionMethodsLen := int(data[0])
<a id="L221"></a><span class="ln">   221</span>		if len(data) &lt; 1+compressionMethodsLen {
<a id="L222"></a><span class="ln">   222</span>			return false
<a id="L223"></a><span class="ln">   223</span>		}
<a id="L224"></a><span class="ln">   224</span>		m.compressionMethods = data[1 : 1+compressionMethodsLen]
<a id="L225"></a><span class="ln">   225</span>	
<a id="L226"></a><span class="ln">   226</span>		data = data[1+compressionMethodsLen:]
<a id="L227"></a><span class="ln">   227</span>	
<a id="L228"></a><span class="ln">   228</span>		m.nextProtoNeg = false
<a id="L229"></a><span class="ln">   229</span>		m.serverName = &#34;&#34;
<a id="L230"></a><span class="ln">   230</span>		m.ocspStapling = false
<a id="L231"></a><span class="ln">   231</span>	
<a id="L232"></a><span class="ln">   232</span>		if len(data) == 0 {
<a id="L233"></a><span class="ln">   233</span>			<span class="comment">// ClientHello is optionally followed by extension data</span>
<a id="L234"></a><span class="ln">   234</span>			return true
<a id="L235"></a><span class="ln">   235</span>		}
<a id="L236"></a><span class="ln">   236</span>		if len(data) &lt; 2 {
<a id="L237"></a><span class="ln">   237</span>			return false
<a id="L238"></a><span class="ln">   238</span>		}
<a id="L239"></a><span class="ln">   239</span>	
<a id="L240"></a><span class="ln">   240</span>		extensionsLength := int(data[0])&lt;&lt;8 | int(data[1])
<a id="L241"></a><span class="ln">   241</span>		data = data[2:]
<a id="L242"></a><span class="ln">   242</span>		if extensionsLength != len(data) {
<a id="L243"></a><span class="ln">   243</span>			return false
<a id="L244"></a><span class="ln">   244</span>		}
<a id="L245"></a><span class="ln">   245</span>	
<a id="L246"></a><span class="ln">   246</span>		for len(data) != 0 {
<a id="L247"></a><span class="ln">   247</span>			if len(data) &lt; 4 {
<a id="L248"></a><span class="ln">   248</span>				return false
<a id="L249"></a><span class="ln">   249</span>			}
<a id="L250"></a><span class="ln">   250</span>			extension := uint16(data[0])&lt;&lt;8 | uint16(data[1])
<a id="L251"></a><span class="ln">   251</span>			length := int(data[2])&lt;&lt;8 | int(data[3])
<a id="L252"></a><span class="ln">   252</span>			data = data[4:]
<a id="L253"></a><span class="ln">   253</span>			if len(data) &lt; length {
<a id="L254"></a><span class="ln">   254</span>				return false
<a id="L255"></a><span class="ln">   255</span>			}
<a id="L256"></a><span class="ln">   256</span>	
<a id="L257"></a><span class="ln">   257</span>			switch extension {
<a id="L258"></a><span class="ln">   258</span>			case extensionServerName:
<a id="L259"></a><span class="ln">   259</span>				if length &lt; 2 {
<a id="L260"></a><span class="ln">   260</span>					return false
<a id="L261"></a><span class="ln">   261</span>				}
<a id="L262"></a><span class="ln">   262</span>				numNames := int(data[0])&lt;&lt;8 | int(data[1])
<a id="L263"></a><span class="ln">   263</span>				d := data[2:]
<a id="L264"></a><span class="ln">   264</span>				for i := 0; i &lt; numNames; i++ {
<a id="L265"></a><span class="ln">   265</span>					if len(d) &lt; 3 {
<a id="L266"></a><span class="ln">   266</span>						return false
<a id="L267"></a><span class="ln">   267</span>					}
<a id="L268"></a><span class="ln">   268</span>					nameType := d[0]
<a id="L269"></a><span class="ln">   269</span>					nameLen := int(d[1])&lt;&lt;8 | int(d[2])
<a id="L270"></a><span class="ln">   270</span>					d = d[3:]
<a id="L271"></a><span class="ln">   271</span>					if len(d) &lt; nameLen {
<a id="L272"></a><span class="ln">   272</span>						return false
<a id="L273"></a><span class="ln">   273</span>					}
<a id="L274"></a><span class="ln">   274</span>					if nameType == 0 {
<a id="L275"></a><span class="ln">   275</span>						m.serverName = string(d[0:nameLen])
<a id="L276"></a><span class="ln">   276</span>						break
<a id="L277"></a><span class="ln">   277</span>					}
<a id="L278"></a><span class="ln">   278</span>					d = d[nameLen:]
<a id="L279"></a><span class="ln">   279</span>				}
<a id="L280"></a><span class="ln">   280</span>			case extensionNextProtoNeg:
<a id="L281"></a><span class="ln">   281</span>				if length &gt; 0 {
<a id="L282"></a><span class="ln">   282</span>					return false
<a id="L283"></a><span class="ln">   283</span>				}
<a id="L284"></a><span class="ln">   284</span>				m.nextProtoNeg = true
<a id="L285"></a><span class="ln">   285</span>			case extensionStatusRequest:
<a id="L286"></a><span class="ln">   286</span>				m.ocspStapling = length &gt; 0 &amp;&amp; data[0] == statusTypeOCSP
<a id="L287"></a><span class="ln">   287</span>			case extensionSupportedCurves:
<a id="L288"></a><span class="ln">   288</span>				<span class="comment">// http://tools.ietf.org/html/rfc4492#section-5.5.1</span>
<a id="L289"></a><span class="ln">   289</span>				if length &lt; 2 {
<a id="L290"></a><span class="ln">   290</span>					return false
<a id="L291"></a><span class="ln">   291</span>				}
<a id="L292"></a><span class="ln">   292</span>				l := int(data[0])&lt;&lt;8 | int(data[1])
<a id="L293"></a><span class="ln">   293</span>				if l%2 == 1 || length != l+2 {
<a id="L294"></a><span class="ln">   294</span>					return false
<a id="L295"></a><span class="ln">   295</span>				}
<a id="L296"></a><span class="ln">   296</span>				numCurves := l / 2
<a id="L297"></a><span class="ln">   297</span>				m.supportedCurves = make([]uint16, numCurves)
<a id="L298"></a><span class="ln">   298</span>				d := data[2:]
<a id="L299"></a><span class="ln">   299</span>				for i := 0; i &lt; numCurves; i++ {
<a id="L300"></a><span class="ln">   300</span>					m.supportedCurves[i] = uint16(d[0])&lt;&lt;8 | uint16(d[1])
<a id="L301"></a><span class="ln">   301</span>					d = d[2:]
<a id="L302"></a><span class="ln">   302</span>				}
<a id="L303"></a><span class="ln">   303</span>			case extensionSupportedPoints:
<a id="L304"></a><span class="ln">   304</span>				<span class="comment">// http://tools.ietf.org/html/rfc4492#section-5.5.2</span>
<a id="L305"></a><span class="ln">   305</span>				if length &lt; 1 {
<a id="L306"></a><span class="ln">   306</span>					return false
<a id="L307"></a><span class="ln">   307</span>				}
<a id="L308"></a><span class="ln">   308</span>				l := int(data[0])
<a id="L309"></a><span class="ln">   309</span>				if length != l+1 {
<a id="L310"></a><span class="ln">   310</span>					return false
<a id="L311"></a><span class="ln">   311</span>				}
<a id="L312"></a><span class="ln">   312</span>				m.supportedPoints = make([]uint8, l)
<a id="L313"></a><span class="ln">   313</span>				copy(m.supportedPoints, data[1:])
<a id="L314"></a><span class="ln">   314</span>			}
<a id="L315"></a><span class="ln">   315</span>			data = data[length:]
<a id="L316"></a><span class="ln">   316</span>		}
<a id="L317"></a><span class="ln">   317</span>	
<a id="L318"></a><span class="ln">   318</span>		return true
<a id="L319"></a><span class="ln">   319</span>	}
<a id="L320"></a><span class="ln">   320</span>	
<a id="L321"></a><span class="ln">   321</span>	type serverHelloMsg struct {
<a id="L322"></a><span class="ln">   322</span>		raw               []byte
<a id="L323"></a><span class="ln">   323</span>		vers              uint16
<a id="L324"></a><span class="ln">   324</span>		random            []byte
<a id="L325"></a><span class="ln">   325</span>		sessionId         []byte
<a id="L326"></a><span class="ln">   326</span>		cipherSuite       uint16
<a id="L327"></a><span class="ln">   327</span>		compressionMethod uint8
<a id="L328"></a><span class="ln">   328</span>		nextProtoNeg      bool
<a id="L329"></a><span class="ln">   329</span>		nextProtos        []string
<a id="L330"></a><span class="ln">   330</span>		ocspStapling      bool
<a id="L331"></a><span class="ln">   331</span>	}
<a id="L332"></a><span class="ln">   332</span>	
<a id="L333"></a><span class="ln">   333</span>	func (m *serverHelloMsg) equal(i interface{}) bool {
<a id="L334"></a><span class="ln">   334</span>		m1, ok := i.(*serverHelloMsg)
<a id="L335"></a><span class="ln">   335</span>		if !ok {
<a id="L336"></a><span class="ln">   336</span>			return false
<a id="L337"></a><span class="ln">   337</span>		}
<a id="L338"></a><span class="ln">   338</span>	
<a id="L339"></a><span class="ln">   339</span>		return bytes.Equal(m.raw, m1.raw) &amp;&amp;
<a id="L340"></a><span class="ln">   340</span>			m.vers == m1.vers &amp;&amp;
<a id="L341"></a><span class="ln">   341</span>			bytes.Equal(m.random, m1.random) &amp;&amp;
<a id="L342"></a><span class="ln">   342</span>			bytes.Equal(m.sessionId, m1.sessionId) &amp;&amp;
<a id="L343"></a><span class="ln">   343</span>			m.cipherSuite == m1.cipherSuite &amp;&amp;
<a id="L344"></a><span class="ln">   344</span>			m.compressionMethod == m1.compressionMethod &amp;&amp;
<a id="L345"></a><span class="ln">   345</span>			m.nextProtoNeg == m1.nextProtoNeg &amp;&amp;
<a id="L346"></a><span class="ln">   346</span>			eqStrings(m.nextProtos, m1.nextProtos) &amp;&amp;
<a id="L347"></a><span class="ln">   347</span>			m.ocspStapling == m1.ocspStapling
<a id="L348"></a><span class="ln">   348</span>	}
<a id="L349"></a><span class="ln">   349</span>	
<a id="L350"></a><span class="ln">   350</span>	func (m *serverHelloMsg) marshal() []byte {
<a id="L351"></a><span class="ln">   351</span>		if m.raw != nil {
<a id="L352"></a><span class="ln">   352</span>			return m.raw
<a id="L353"></a><span class="ln">   353</span>		}
<a id="L354"></a><span class="ln">   354</span>	
<a id="L355"></a><span class="ln">   355</span>		length := 38 + len(m.sessionId)
<a id="L356"></a><span class="ln">   356</span>		numExtensions := 0
<a id="L357"></a><span class="ln">   357</span>		extensionsLength := 0
<a id="L358"></a><span class="ln">   358</span>	
<a id="L359"></a><span class="ln">   359</span>		nextProtoLen := 0
<a id="L360"></a><span class="ln">   360</span>		if m.nextProtoNeg {
<a id="L361"></a><span class="ln">   361</span>			numExtensions++
<a id="L362"></a><span class="ln">   362</span>			for _, v := range m.nextProtos {
<a id="L363"></a><span class="ln">   363</span>				nextProtoLen += len(v)
<a id="L364"></a><span class="ln">   364</span>			}
<a id="L365"></a><span class="ln">   365</span>			nextProtoLen += len(m.nextProtos)
<a id="L366"></a><span class="ln">   366</span>			extensionsLength += nextProtoLen
<a id="L367"></a><span class="ln">   367</span>		}
<a id="L368"></a><span class="ln">   368</span>		if m.ocspStapling {
<a id="L369"></a><span class="ln">   369</span>			numExtensions++
<a id="L370"></a><span class="ln">   370</span>		}
<a id="L371"></a><span class="ln">   371</span>		if numExtensions &gt; 0 {
<a id="L372"></a><span class="ln">   372</span>			extensionsLength += 4 * numExtensions
<a id="L373"></a><span class="ln">   373</span>			length += 2 + extensionsLength
<a id="L374"></a><span class="ln">   374</span>		}
<a id="L375"></a><span class="ln">   375</span>	
<a id="L376"></a><span class="ln">   376</span>		x := make([]byte, 4+length)
<a id="L377"></a><span class="ln">   377</span>		x[0] = typeServerHello
<a id="L378"></a><span class="ln">   378</span>		x[1] = uint8(length &gt;&gt; 16)
<a id="L379"></a><span class="ln">   379</span>		x[2] = uint8(length &gt;&gt; 8)
<a id="L380"></a><span class="ln">   380</span>		x[3] = uint8(length)
<a id="L381"></a><span class="ln">   381</span>		x[4] = uint8(m.vers &gt;&gt; 8)
<a id="L382"></a><span class="ln">   382</span>		x[5] = uint8(m.vers)
<a id="L383"></a><span class="ln">   383</span>		copy(x[6:38], m.random)
<a id="L384"></a><span class="ln">   384</span>		x[38] = uint8(len(m.sessionId))
<a id="L385"></a><span class="ln">   385</span>		copy(x[39:39+len(m.sessionId)], m.sessionId)
<a id="L386"></a><span class="ln">   386</span>		z := x[39+len(m.sessionId):]
<a id="L387"></a><span class="ln">   387</span>		z[0] = uint8(m.cipherSuite &gt;&gt; 8)
<a id="L388"></a><span class="ln">   388</span>		z[1] = uint8(m.cipherSuite)
<a id="L389"></a><span class="ln">   389</span>		z[2] = uint8(m.compressionMethod)
<a id="L390"></a><span class="ln">   390</span>	
<a id="L391"></a><span class="ln">   391</span>		z = z[3:]
<a id="L392"></a><span class="ln">   392</span>		if numExtensions &gt; 0 {
<a id="L393"></a><span class="ln">   393</span>			z[0] = byte(extensionsLength &gt;&gt; 8)
<a id="L394"></a><span class="ln">   394</span>			z[1] = byte(extensionsLength)
<a id="L395"></a><span class="ln">   395</span>			z = z[2:]
<a id="L396"></a><span class="ln">   396</span>		}
<a id="L397"></a><span class="ln">   397</span>		if m.nextProtoNeg {
<a id="L398"></a><span class="ln">   398</span>			z[0] = byte(extensionNextProtoNeg &gt;&gt; 8)
<a id="L399"></a><span class="ln">   399</span>			z[1] = byte(extensionNextProtoNeg)
<a id="L400"></a><span class="ln">   400</span>			z[2] = byte(nextProtoLen &gt;&gt; 8)
<a id="L401"></a><span class="ln">   401</span>			z[3] = byte(nextProtoLen)
<a id="L402"></a><span class="ln">   402</span>			z = z[4:]
<a id="L403"></a><span class="ln">   403</span>	
<a id="L404"></a><span class="ln">   404</span>			for _, v := range m.nextProtos {
<a id="L405"></a><span class="ln">   405</span>				l := len(v)
<a id="L406"></a><span class="ln">   406</span>				if l &gt; 255 {
<a id="L407"></a><span class="ln">   407</span>					l = 255
<a id="L408"></a><span class="ln">   408</span>				}
<a id="L409"></a><span class="ln">   409</span>				z[0] = byte(l)
<a id="L410"></a><span class="ln">   410</span>				copy(z[1:], []byte(v[0:l]))
<a id="L411"></a><span class="ln">   411</span>				z = z[1+l:]
<a id="L412"></a><span class="ln">   412</span>			}
<a id="L413"></a><span class="ln">   413</span>		}
<a id="L414"></a><span class="ln">   414</span>		if m.ocspStapling {
<a id="L415"></a><span class="ln">   415</span>			z[0] = byte(extensionStatusRequest &gt;&gt; 8)
<a id="L416"></a><span class="ln">   416</span>			z[1] = byte(extensionStatusRequest)
<a id="L417"></a><span class="ln">   417</span>			z = z[4:]
<a id="L418"></a><span class="ln">   418</span>		}
<a id="L419"></a><span class="ln">   419</span>	
<a id="L420"></a><span class="ln">   420</span>		m.raw = x
<a id="L421"></a><span class="ln">   421</span>	
<a id="L422"></a><span class="ln">   422</span>		return x
<a id="L423"></a><span class="ln">   423</span>	}
<a id="L424"></a><span class="ln">   424</span>	
<a id="L425"></a><span class="ln">   425</span>	func (m *serverHelloMsg) unmarshal(data []byte) bool {
<a id="L426"></a><span class="ln">   426</span>		if len(data) &lt; 42 {
<a id="L427"></a><span class="ln">   427</span>			return false
<a id="L428"></a><span class="ln">   428</span>		}
<a id="L429"></a><span class="ln">   429</span>		m.raw = data
<a id="L430"></a><span class="ln">   430</span>		m.vers = uint16(data[4])&lt;&lt;8 | uint16(data[5])
<a id="L431"></a><span class="ln">   431</span>		m.random = data[6:38]
<a id="L432"></a><span class="ln">   432</span>		sessionIdLen := int(data[38])
<a id="L433"></a><span class="ln">   433</span>		if sessionIdLen &gt; 32 || len(data) &lt; 39+sessionIdLen {
<a id="L434"></a><span class="ln">   434</span>			return false
<a id="L435"></a><span class="ln">   435</span>		}
<a id="L436"></a><span class="ln">   436</span>		m.sessionId = data[39 : 39+sessionIdLen]
<a id="L437"></a><span class="ln">   437</span>		data = data[39+sessionIdLen:]
<a id="L438"></a><span class="ln">   438</span>		if len(data) &lt; 3 {
<a id="L439"></a><span class="ln">   439</span>			return false
<a id="L440"></a><span class="ln">   440</span>		}
<a id="L441"></a><span class="ln">   441</span>		m.cipherSuite = uint16(data[0])&lt;&lt;8 | uint16(data[1])
<a id="L442"></a><span class="ln">   442</span>		m.compressionMethod = data[2]
<a id="L443"></a><span class="ln">   443</span>		data = data[3:]
<a id="L444"></a><span class="ln">   444</span>	
<a id="L445"></a><span class="ln">   445</span>		m.nextProtoNeg = false
<a id="L446"></a><span class="ln">   446</span>		m.nextProtos = nil
<a id="L447"></a><span class="ln">   447</span>		m.ocspStapling = false
<a id="L448"></a><span class="ln">   448</span>	
<a id="L449"></a><span class="ln">   449</span>		if len(data) == 0 {
<a id="L450"></a><span class="ln">   450</span>			<span class="comment">// ServerHello is optionally followed by extension data</span>
<a id="L451"></a><span class="ln">   451</span>			return true
<a id="L452"></a><span class="ln">   452</span>		}
<a id="L453"></a><span class="ln">   453</span>		if len(data) &lt; 2 {
<a id="L454"></a><span class="ln">   454</span>			return false
<a id="L455"></a><span class="ln">   455</span>		}
<a id="L456"></a><span class="ln">   456</span>	
<a id="L457"></a><span class="ln">   457</span>		extensionsLength := int(data[0])&lt;&lt;8 | int(data[1])
<a id="L458"></a><span class="ln">   458</span>		data = data[2:]
<a id="L459"></a><span class="ln">   459</span>		if len(data) != extensionsLength {
<a id="L460"></a><span class="ln">   460</span>			return false
<a id="L461"></a><span class="ln">   461</span>		}
<a id="L462"></a><span class="ln">   462</span>	
<a id="L463"></a><span class="ln">   463</span>		for len(data) != 0 {
<a id="L464"></a><span class="ln">   464</span>			if len(data) &lt; 4 {
<a id="L465"></a><span class="ln">   465</span>				return false
<a id="L466"></a><span class="ln">   466</span>			}
<a id="L467"></a><span class="ln">   467</span>			extension := uint16(data[0])&lt;&lt;8 | uint16(data[1])
<a id="L468"></a><span class="ln">   468</span>			length := int(data[2])&lt;&lt;8 | int(data[3])
<a id="L469"></a><span class="ln">   469</span>			data = data[4:]
<a id="L470"></a><span class="ln">   470</span>			if len(data) &lt; length {
<a id="L471"></a><span class="ln">   471</span>				return false
<a id="L472"></a><span class="ln">   472</span>			}
<a id="L473"></a><span class="ln">   473</span>	
<a id="L474"></a><span class="ln">   474</span>			switch extension {
<a id="L475"></a><span class="ln">   475</span>			case extensionNextProtoNeg:
<a id="L476"></a><span class="ln">   476</span>				m.nextProtoNeg = true
<a id="L477"></a><span class="ln">   477</span>				d := data
<a id="L478"></a><span class="ln">   478</span>				for len(d) &gt; 0 {
<a id="L479"></a><span class="ln">   479</span>					l := int(d[0])
<a id="L480"></a><span class="ln">   480</span>					d = d[1:]
<a id="L481"></a><span class="ln">   481</span>					if l == 0 || l &gt; len(d) {
<a id="L482"></a><span class="ln">   482</span>						return false
<a id="L483"></a><span class="ln">   483</span>					}
<a id="L484"></a><span class="ln">   484</span>					m.nextProtos = append(m.nextProtos, string(d[0:l]))
<a id="L485"></a><span class="ln">   485</span>					d = d[l:]
<a id="L486"></a><span class="ln">   486</span>				}
<a id="L487"></a><span class="ln">   487</span>			case extensionStatusRequest:
<a id="L488"></a><span class="ln">   488</span>				if length &gt; 0 {
<a id="L489"></a><span class="ln">   489</span>					return false
<a id="L490"></a><span class="ln">   490</span>				}
<a id="L491"></a><span class="ln">   491</span>				m.ocspStapling = true
<a id="L492"></a><span class="ln">   492</span>			}
<a id="L493"></a><span class="ln">   493</span>			data = data[length:]
<a id="L494"></a><span class="ln">   494</span>		}
<a id="L495"></a><span class="ln">   495</span>	
<a id="L496"></a><span class="ln">   496</span>		return true
<a id="L497"></a><span class="ln">   497</span>	}
<a id="L498"></a><span class="ln">   498</span>	
<a id="L499"></a><span class="ln">   499</span>	type certificateMsg struct {
<a id="L500"></a><span class="ln">   500</span>		raw          []byte
<a id="L501"></a><span class="ln">   501</span>		certificates [][]byte
<a id="L502"></a><span class="ln">   502</span>	}
<a id="L503"></a><span class="ln">   503</span>	
<a id="L504"></a><span class="ln">   504</span>	func (m *certificateMsg) equal(i interface{}) bool {
<a id="L505"></a><span class="ln">   505</span>		m1, ok := i.(*certificateMsg)
<a id="L506"></a><span class="ln">   506</span>		if !ok {
<a id="L507"></a><span class="ln">   507</span>			return false
<a id="L508"></a><span class="ln">   508</span>		}
<a id="L509"></a><span class="ln">   509</span>	
<a id="L510"></a><span class="ln">   510</span>		return bytes.Equal(m.raw, m1.raw) &amp;&amp;
<a id="L511"></a><span class="ln">   511</span>			eqByteSlices(m.certificates, m1.certificates)
<a id="L512"></a><span class="ln">   512</span>	}
<a id="L513"></a><span class="ln">   513</span>	
<a id="L514"></a><span class="ln">   514</span>	func (m *certificateMsg) marshal() (x []byte) {
<a id="L515"></a><span class="ln">   515</span>		if m.raw != nil {
<a id="L516"></a><span class="ln">   516</span>			return m.raw
<a id="L517"></a><span class="ln">   517</span>		}
<a id="L518"></a><span class="ln">   518</span>	
<a id="L519"></a><span class="ln">   519</span>		var i int
<a id="L520"></a><span class="ln">   520</span>		for _, slice := range m.certificates {
<a id="L521"></a><span class="ln">   521</span>			i += len(slice)
<a id="L522"></a><span class="ln">   522</span>		}
<a id="L523"></a><span class="ln">   523</span>	
<a id="L524"></a><span class="ln">   524</span>		length := 3 + 3*len(m.certificates) + i
<a id="L525"></a><span class="ln">   525</span>		x = make([]byte, 4+length)
<a id="L526"></a><span class="ln">   526</span>		x[0] = typeCertificate
<a id="L527"></a><span class="ln">   527</span>		x[1] = uint8(length &gt;&gt; 16)
<a id="L528"></a><span class="ln">   528</span>		x[2] = uint8(length &gt;&gt; 8)
<a id="L529"></a><span class="ln">   529</span>		x[3] = uint8(length)
<a id="L530"></a><span class="ln">   530</span>	
<a id="L531"></a><span class="ln">   531</span>		certificateOctets := length - 3
<a id="L532"></a><span class="ln">   532</span>		x[4] = uint8(certificateOctets &gt;&gt; 16)
<a id="L533"></a><span class="ln">   533</span>		x[5] = uint8(certificateOctets &gt;&gt; 8)
<a id="L534"></a><span class="ln">   534</span>		x[6] = uint8(certificateOctets)
<a id="L535"></a><span class="ln">   535</span>	
<a id="L536"></a><span class="ln">   536</span>		y := x[7:]
<a id="L537"></a><span class="ln">   537</span>		for _, slice := range m.certificates {
<a id="L538"></a><span class="ln">   538</span>			y[0] = uint8(len(slice) &gt;&gt; 16)
<a id="L539"></a><span class="ln">   539</span>			y[1] = uint8(len(slice) &gt;&gt; 8)
<a id="L540"></a><span class="ln">   540</span>			y[2] = uint8(len(slice))
<a id="L541"></a><span class="ln">   541</span>			copy(y[3:], slice)
<a id="L542"></a><span class="ln">   542</span>			y = y[3+len(slice):]
<a id="L543"></a><span class="ln">   543</span>		}
<a id="L544"></a><span class="ln">   544</span>	
<a id="L545"></a><span class="ln">   545</span>		m.raw = x
<a id="L546"></a><span class="ln">   546</span>		return
<a id="L547"></a><span class="ln">   547</span>	}
<a id="L548"></a><span class="ln">   548</span>	
<a id="L549"></a><span class="ln">   549</span>	func (m *certificateMsg) unmarshal(data []byte) bool {
<a id="L550"></a><span class="ln">   550</span>		if len(data) &lt; 7 {
<a id="L551"></a><span class="ln">   551</span>			return false
<a id="L552"></a><span class="ln">   552</span>		}
<a id="L553"></a><span class="ln">   553</span>	
<a id="L554"></a><span class="ln">   554</span>		m.raw = data
<a id="L555"></a><span class="ln">   555</span>		certsLen := uint32(data[4])&lt;&lt;16 | uint32(data[5])&lt;&lt;8 | uint32(data[6])
<a id="L556"></a><span class="ln">   556</span>		if uint32(len(data)) != certsLen+7 {
<a id="L557"></a><span class="ln">   557</span>			return false
<a id="L558"></a><span class="ln">   558</span>		}
<a id="L559"></a><span class="ln">   559</span>	
<a id="L560"></a><span class="ln">   560</span>		numCerts := 0
<a id="L561"></a><span class="ln">   561</span>		d := data[7:]
<a id="L562"></a><span class="ln">   562</span>		for certsLen &gt; 0 {
<a id="L563"></a><span class="ln">   563</span>			if len(d) &lt; 4 {
<a id="L564"></a><span class="ln">   564</span>				return false
<a id="L565"></a><span class="ln">   565</span>			}
<a id="L566"></a><span class="ln">   566</span>			certLen := uint32(d[0])&lt;&lt;24 | uint32(d[1])&lt;&lt;8 | uint32(d[2])
<a id="L567"></a><span class="ln">   567</span>			if uint32(len(d)) &lt; 3+certLen {
<a id="L568"></a><span class="ln">   568</span>				return false
<a id="L569"></a><span class="ln">   569</span>			}
<a id="L570"></a><span class="ln">   570</span>			d = d[3+certLen:]
<a id="L571"></a><span class="ln">   571</span>			certsLen -= 3 + certLen
<a id="L572"></a><span class="ln">   572</span>			numCerts++
<a id="L573"></a><span class="ln">   573</span>		}
<a id="L574"></a><span class="ln">   574</span>	
<a id="L575"></a><span class="ln">   575</span>		m.certificates = make([][]byte, numCerts)
<a id="L576"></a><span class="ln">   576</span>		d = data[7:]
<a id="L577"></a><span class="ln">   577</span>		for i := 0; i &lt; numCerts; i++ {
<a id="L578"></a><span class="ln">   578</span>			certLen := uint32(d[0])&lt;&lt;24 | uint32(d[1])&lt;&lt;8 | uint32(d[2])
<a id="L579"></a><span class="ln">   579</span>			m.certificates[i] = d[3 : 3+certLen]
<a id="L580"></a><span class="ln">   580</span>			d = d[3+certLen:]
<a id="L581"></a><span class="ln">   581</span>		}
<a id="L582"></a><span class="ln">   582</span>	
<a id="L583"></a><span class="ln">   583</span>		return true
<a id="L584"></a><span class="ln">   584</span>	}
<a id="L585"></a><span class="ln">   585</span>	
<a id="L586"></a><span class="ln">   586</span>	type serverKeyExchangeMsg struct {
<a id="L587"></a><span class="ln">   587</span>		raw []byte
<a id="L588"></a><span class="ln">   588</span>		key []byte
<a id="L589"></a><span class="ln">   589</span>	}
<a id="L590"></a><span class="ln">   590</span>	
<a id="L591"></a><span class="ln">   591</span>	func (m *serverKeyExchangeMsg) equal(i interface{}) bool {
<a id="L592"></a><span class="ln">   592</span>		m1, ok := i.(*serverKeyExchangeMsg)
<a id="L593"></a><span class="ln">   593</span>		if !ok {
<a id="L594"></a><span class="ln">   594</span>			return false
<a id="L595"></a><span class="ln">   595</span>		}
<a id="L596"></a><span class="ln">   596</span>	
<a id="L597"></a><span class="ln">   597</span>		return bytes.Equal(m.raw, m1.raw) &amp;&amp;
<a id="L598"></a><span class="ln">   598</span>			bytes.Equal(m.key, m1.key)
<a id="L599"></a><span class="ln">   599</span>	}
<a id="L600"></a><span class="ln">   600</span>	
<a id="L601"></a><span class="ln">   601</span>	func (m *serverKeyExchangeMsg) marshal() []byte {
<a id="L602"></a><span class="ln">   602</span>		if m.raw != nil {
<a id="L603"></a><span class="ln">   603</span>			return m.raw
<a id="L604"></a><span class="ln">   604</span>		}
<a id="L605"></a><span class="ln">   605</span>		length := len(m.key)
<a id="L606"></a><span class="ln">   606</span>		x := make([]byte, length+4)
<a id="L607"></a><span class="ln">   607</span>		x[0] = typeServerKeyExchange
<a id="L608"></a><span class="ln">   608</span>		x[1] = uint8(length &gt;&gt; 16)
<a id="L609"></a><span class="ln">   609</span>		x[2] = uint8(length &gt;&gt; 8)
<a id="L610"></a><span class="ln">   610</span>		x[3] = uint8(length)
<a id="L611"></a><span class="ln">   611</span>		copy(x[4:], m.key)
<a id="L612"></a><span class="ln">   612</span>	
<a id="L613"></a><span class="ln">   613</span>		m.raw = x
<a id="L614"></a><span class="ln">   614</span>		return x
<a id="L615"></a><span class="ln">   615</span>	}
<a id="L616"></a><span class="ln">   616</span>	
<a id="L617"></a><span class="ln">   617</span>	func (m *serverKeyExchangeMsg) unmarshal(data []byte) bool {
<a id="L618"></a><span class="ln">   618</span>		m.raw = data
<a id="L619"></a><span class="ln">   619</span>		if len(data) &lt; 4 {
<a id="L620"></a><span class="ln">   620</span>			return false
<a id="L621"></a><span class="ln">   621</span>		}
<a id="L622"></a><span class="ln">   622</span>		m.key = data[4:]
<a id="L623"></a><span class="ln">   623</span>		return true
<a id="L624"></a><span class="ln">   624</span>	}
<a id="L625"></a><span class="ln">   625</span>	
<a id="L626"></a><span class="ln">   626</span>	type certificateStatusMsg struct {
<a id="L627"></a><span class="ln">   627</span>		raw        []byte
<a id="L628"></a><span class="ln">   628</span>		statusType uint8
<a id="L629"></a><span class="ln">   629</span>		response   []byte
<a id="L630"></a><span class="ln">   630</span>	}
<a id="L631"></a><span class="ln">   631</span>	
<a id="L632"></a><span class="ln">   632</span>	func (m *certificateStatusMsg) equal(i interface{}) bool {
<a id="L633"></a><span class="ln">   633</span>		m1, ok := i.(*certificateStatusMsg)
<a id="L634"></a><span class="ln">   634</span>		if !ok {
<a id="L635"></a><span class="ln">   635</span>			return false
<a id="L636"></a><span class="ln">   636</span>		}
<a id="L637"></a><span class="ln">   637</span>	
<a id="L638"></a><span class="ln">   638</span>		return bytes.Equal(m.raw, m1.raw) &amp;&amp;
<a id="L639"></a><span class="ln">   639</span>			m.statusType == m1.statusType &amp;&amp;
<a id="L640"></a><span class="ln">   640</span>			bytes.Equal(m.response, m1.response)
<a id="L641"></a><span class="ln">   641</span>	}
<a id="L642"></a><span class="ln">   642</span>	
<a id="L643"></a><span class="ln">   643</span>	func (m *certificateStatusMsg) marshal() []byte {
<a id="L644"></a><span class="ln">   644</span>		if m.raw != nil {
<a id="L645"></a><span class="ln">   645</span>			return m.raw
<a id="L646"></a><span class="ln">   646</span>		}
<a id="L647"></a><span class="ln">   647</span>	
<a id="L648"></a><span class="ln">   648</span>		var x []byte
<a id="L649"></a><span class="ln">   649</span>		if m.statusType == statusTypeOCSP {
<a id="L650"></a><span class="ln">   650</span>			x = make([]byte, 4+4+len(m.response))
<a id="L651"></a><span class="ln">   651</span>			x[0] = typeCertificateStatus
<a id="L652"></a><span class="ln">   652</span>			l := len(m.response) + 4
<a id="L653"></a><span class="ln">   653</span>			x[1] = byte(l &gt;&gt; 16)
<a id="L654"></a><span class="ln">   654</span>			x[2] = byte(l &gt;&gt; 8)
<a id="L655"></a><span class="ln">   655</span>			x[3] = byte(l)
<a id="L656"></a><span class="ln">   656</span>			x[4] = statusTypeOCSP
<a id="L657"></a><span class="ln">   657</span>	
<a id="L658"></a><span class="ln">   658</span>			l -= 4
<a id="L659"></a><span class="ln">   659</span>			x[5] = byte(l &gt;&gt; 16)
<a id="L660"></a><span class="ln">   660</span>			x[6] = byte(l &gt;&gt; 8)
<a id="L661"></a><span class="ln">   661</span>			x[7] = byte(l)
<a id="L662"></a><span class="ln">   662</span>			copy(x[8:], m.response)
<a id="L663"></a><span class="ln">   663</span>		} else {
<a id="L664"></a><span class="ln">   664</span>			x = []byte{typeCertificateStatus, 0, 0, 1, m.statusType}
<a id="L665"></a><span class="ln">   665</span>		}
<a id="L666"></a><span class="ln">   666</span>	
<a id="L667"></a><span class="ln">   667</span>		m.raw = x
<a id="L668"></a><span class="ln">   668</span>		return x
<a id="L669"></a><span class="ln">   669</span>	}
<a id="L670"></a><span class="ln">   670</span>	
<a id="L671"></a><span class="ln">   671</span>	func (m *certificateStatusMsg) unmarshal(data []byte) bool {
<a id="L672"></a><span class="ln">   672</span>		m.raw = data
<a id="L673"></a><span class="ln">   673</span>		if len(data) &lt; 5 {
<a id="L674"></a><span class="ln">   674</span>			return false
<a id="L675"></a><span class="ln">   675</span>		}
<a id="L676"></a><span class="ln">   676</span>		m.statusType = data[4]
<a id="L677"></a><span class="ln">   677</span>	
<a id="L678"></a><span class="ln">   678</span>		m.response = nil
<a id="L679"></a><span class="ln">   679</span>		if m.statusType == statusTypeOCSP {
<a id="L680"></a><span class="ln">   680</span>			if len(data) &lt; 8 {
<a id="L681"></a><span class="ln">   681</span>				return false
<a id="L682"></a><span class="ln">   682</span>			}
<a id="L683"></a><span class="ln">   683</span>			respLen := uint32(data[5])&lt;&lt;16 | uint32(data[6])&lt;&lt;8 | uint32(data[7])
<a id="L684"></a><span class="ln">   684</span>			if uint32(len(data)) != 4+4+respLen {
<a id="L685"></a><span class="ln">   685</span>				return false
<a id="L686"></a><span class="ln">   686</span>			}
<a id="L687"></a><span class="ln">   687</span>			m.response = data[8:]
<a id="L688"></a><span class="ln">   688</span>		}
<a id="L689"></a><span class="ln">   689</span>		return true
<a id="L690"></a><span class="ln">   690</span>	}
<a id="L691"></a><span class="ln">   691</span>	
<a id="L692"></a><span class="ln">   692</span>	type serverHelloDoneMsg struct{}
<a id="L693"></a><span class="ln">   693</span>	
<a id="L694"></a><span class="ln">   694</span>	func (m *serverHelloDoneMsg) equal(i interface{}) bool {
<a id="L695"></a><span class="ln">   695</span>		_, ok := i.(*serverHelloDoneMsg)
<a id="L696"></a><span class="ln">   696</span>		return ok
<a id="L697"></a><span class="ln">   697</span>	}
<a id="L698"></a><span class="ln">   698</span>	
<a id="L699"></a><span class="ln">   699</span>	func (m *serverHelloDoneMsg) marshal() []byte {
<a id="L700"></a><span class="ln">   700</span>		x := make([]byte, 4)
<a id="L701"></a><span class="ln">   701</span>		x[0] = typeServerHelloDone
<a id="L702"></a><span class="ln">   702</span>		return x
<a id="L703"></a><span class="ln">   703</span>	}
<a id="L704"></a><span class="ln">   704</span>	
<a id="L705"></a><span class="ln">   705</span>	func (m *serverHelloDoneMsg) unmarshal(data []byte) bool {
<a id="L706"></a><span class="ln">   706</span>		return len(data) == 4
<a id="L707"></a><span class="ln">   707</span>	}
<a id="L708"></a><span class="ln">   708</span>	
<a id="L709"></a><span class="ln">   709</span>	type clientKeyExchangeMsg struct {
<a id="L710"></a><span class="ln">   710</span>		raw        []byte
<a id="L711"></a><span class="ln">   711</span>		ciphertext []byte
<a id="L712"></a><span class="ln">   712</span>	}
<a id="L713"></a><span class="ln">   713</span>	
<a id="L714"></a><span class="ln">   714</span>	func (m *clientKeyExchangeMsg) equal(i interface{}) bool {
<a id="L715"></a><span class="ln">   715</span>		m1, ok := i.(*clientKeyExchangeMsg)
<a id="L716"></a><span class="ln">   716</span>		if !ok {
<a id="L717"></a><span class="ln">   717</span>			return false
<a id="L718"></a><span class="ln">   718</span>		}
<a id="L719"></a><span class="ln">   719</span>	
<a id="L720"></a><span class="ln">   720</span>		return bytes.Equal(m.raw, m1.raw) &amp;&amp;
<a id="L721"></a><span class="ln">   721</span>			bytes.Equal(m.ciphertext, m1.ciphertext)
<a id="L722"></a><span class="ln">   722</span>	}
<a id="L723"></a><span class="ln">   723</span>	
<a id="L724"></a><span class="ln">   724</span>	func (m *clientKeyExchangeMsg) marshal() []byte {
<a id="L725"></a><span class="ln">   725</span>		if m.raw != nil {
<a id="L726"></a><span class="ln">   726</span>			return m.raw
<a id="L727"></a><span class="ln">   727</span>		}
<a id="L728"></a><span class="ln">   728</span>		length := len(m.ciphertext)
<a id="L729"></a><span class="ln">   729</span>		x := make([]byte, length+4)
<a id="L730"></a><span class="ln">   730</span>		x[0] = typeClientKeyExchange
<a id="L731"></a><span class="ln">   731</span>		x[1] = uint8(length &gt;&gt; 16)
<a id="L732"></a><span class="ln">   732</span>		x[2] = uint8(length &gt;&gt; 8)
<a id="L733"></a><span class="ln">   733</span>		x[3] = uint8(length)
<a id="L734"></a><span class="ln">   734</span>		copy(x[4:], m.ciphertext)
<a id="L735"></a><span class="ln">   735</span>	
<a id="L736"></a><span class="ln">   736</span>		m.raw = x
<a id="L737"></a><span class="ln">   737</span>		return x
<a id="L738"></a><span class="ln">   738</span>	}
<a id="L739"></a><span class="ln">   739</span>	
<a id="L740"></a><span class="ln">   740</span>	func (m *clientKeyExchangeMsg) unmarshal(data []byte) bool {
<a id="L741"></a><span class="ln">   741</span>		m.raw = data
<a id="L742"></a><span class="ln">   742</span>		if len(data) &lt; 4 {
<a id="L743"></a><span class="ln">   743</span>			return false
<a id="L744"></a><span class="ln">   744</span>		}
<a id="L745"></a><span class="ln">   745</span>		l := int(data[1])&lt;&lt;16 | int(data[2])&lt;&lt;8 | int(data[3])
<a id="L746"></a><span class="ln">   746</span>		if l != len(data)-4 {
<a id="L747"></a><span class="ln">   747</span>			return false
<a id="L748"></a><span class="ln">   748</span>		}
<a id="L749"></a><span class="ln">   749</span>		m.ciphertext = data[4:]
<a id="L750"></a><span class="ln">   750</span>		return true
<a id="L751"></a><span class="ln">   751</span>	}
<a id="L752"></a><span class="ln">   752</span>	
<a id="L753"></a><span class="ln">   753</span>	type finishedMsg struct {
<a id="L754"></a><span class="ln">   754</span>		raw        []byte
<a id="L755"></a><span class="ln">   755</span>		verifyData []byte
<a id="L756"></a><span class="ln">   756</span>	}
<a id="L757"></a><span class="ln">   757</span>	
<a id="L758"></a><span class="ln">   758</span>	func (m *finishedMsg) equal(i interface{}) bool {
<a id="L759"></a><span class="ln">   759</span>		m1, ok := i.(*finishedMsg)
<a id="L760"></a><span class="ln">   760</span>		if !ok {
<a id="L761"></a><span class="ln">   761</span>			return false
<a id="L762"></a><span class="ln">   762</span>		}
<a id="L763"></a><span class="ln">   763</span>	
<a id="L764"></a><span class="ln">   764</span>		return bytes.Equal(m.raw, m1.raw) &amp;&amp;
<a id="L765"></a><span class="ln">   765</span>			bytes.Equal(m.verifyData, m1.verifyData)
<a id="L766"></a><span class="ln">   766</span>	}
<a id="L767"></a><span class="ln">   767</span>	
<a id="L768"></a><span class="ln">   768</span>	func (m *finishedMsg) marshal() (x []byte) {
<a id="L769"></a><span class="ln">   769</span>		if m.raw != nil {
<a id="L770"></a><span class="ln">   770</span>			return m.raw
<a id="L771"></a><span class="ln">   771</span>		}
<a id="L772"></a><span class="ln">   772</span>	
<a id="L773"></a><span class="ln">   773</span>		x = make([]byte, 4+len(m.verifyData))
<a id="L774"></a><span class="ln">   774</span>		x[0] = typeFinished
<a id="L775"></a><span class="ln">   775</span>		x[3] = byte(len(m.verifyData))
<a id="L776"></a><span class="ln">   776</span>		copy(x[4:], m.verifyData)
<a id="L777"></a><span class="ln">   777</span>		m.raw = x
<a id="L778"></a><span class="ln">   778</span>		return
<a id="L779"></a><span class="ln">   779</span>	}
<a id="L780"></a><span class="ln">   780</span>	
<a id="L781"></a><span class="ln">   781</span>	func (m *finishedMsg) unmarshal(data []byte) bool {
<a id="L782"></a><span class="ln">   782</span>		m.raw = data
<a id="L783"></a><span class="ln">   783</span>		if len(data) &lt; 4 {
<a id="L784"></a><span class="ln">   784</span>			return false
<a id="L785"></a><span class="ln">   785</span>		}
<a id="L786"></a><span class="ln">   786</span>		m.verifyData = data[4:]
<a id="L787"></a><span class="ln">   787</span>		return true
<a id="L788"></a><span class="ln">   788</span>	}
<a id="L789"></a><span class="ln">   789</span>	
<a id="L790"></a><span class="ln">   790</span>	type nextProtoMsg struct {
<a id="L791"></a><span class="ln">   791</span>		raw   []byte
<a id="L792"></a><span class="ln">   792</span>		proto string
<a id="L793"></a><span class="ln">   793</span>	}
<a id="L794"></a><span class="ln">   794</span>	
<a id="L795"></a><span class="ln">   795</span>	func (m *nextProtoMsg) equal(i interface{}) bool {
<a id="L796"></a><span class="ln">   796</span>		m1, ok := i.(*nextProtoMsg)
<a id="L797"></a><span class="ln">   797</span>		if !ok {
<a id="L798"></a><span class="ln">   798</span>			return false
<a id="L799"></a><span class="ln">   799</span>		}
<a id="L800"></a><span class="ln">   800</span>	
<a id="L801"></a><span class="ln">   801</span>		return bytes.Equal(m.raw, m1.raw) &amp;&amp;
<a id="L802"></a><span class="ln">   802</span>			m.proto == m1.proto
<a id="L803"></a><span class="ln">   803</span>	}
<a id="L804"></a><span class="ln">   804</span>	
<a id="L805"></a><span class="ln">   805</span>	func (m *nextProtoMsg) marshal() []byte {
<a id="L806"></a><span class="ln">   806</span>		if m.raw != nil {
<a id="L807"></a><span class="ln">   807</span>			return m.raw
<a id="L808"></a><span class="ln">   808</span>		}
<a id="L809"></a><span class="ln">   809</span>		l := len(m.proto)
<a id="L810"></a><span class="ln">   810</span>		if l &gt; 255 {
<a id="L811"></a><span class="ln">   811</span>			l = 255
<a id="L812"></a><span class="ln">   812</span>		}
<a id="L813"></a><span class="ln">   813</span>	
<a id="L814"></a><span class="ln">   814</span>		padding := 32 - (l+2)%32
<a id="L815"></a><span class="ln">   815</span>		length := l + padding + 2
<a id="L816"></a><span class="ln">   816</span>		x := make([]byte, length+4)
<a id="L817"></a><span class="ln">   817</span>		x[0] = typeNextProtocol
<a id="L818"></a><span class="ln">   818</span>		x[1] = uint8(length &gt;&gt; 16)
<a id="L819"></a><span class="ln">   819</span>		x[2] = uint8(length &gt;&gt; 8)
<a id="L820"></a><span class="ln">   820</span>		x[3] = uint8(length)
<a id="L821"></a><span class="ln">   821</span>	
<a id="L822"></a><span class="ln">   822</span>		y := x[4:]
<a id="L823"></a><span class="ln">   823</span>		y[0] = byte(l)
<a id="L824"></a><span class="ln">   824</span>		copy(y[1:], []byte(m.proto[0:l]))
<a id="L825"></a><span class="ln">   825</span>		y = y[1+l:]
<a id="L826"></a><span class="ln">   826</span>		y[0] = byte(padding)
<a id="L827"></a><span class="ln">   827</span>	
<a id="L828"></a><span class="ln">   828</span>		m.raw = x
<a id="L829"></a><span class="ln">   829</span>	
<a id="L830"></a><span class="ln">   830</span>		return x
<a id="L831"></a><span class="ln">   831</span>	}
<a id="L832"></a><span class="ln">   832</span>	
<a id="L833"></a><span class="ln">   833</span>	func (m *nextProtoMsg) unmarshal(data []byte) bool {
<a id="L834"></a><span class="ln">   834</span>		m.raw = data
<a id="L835"></a><span class="ln">   835</span>	
<a id="L836"></a><span class="ln">   836</span>		if len(data) &lt; 5 {
<a id="L837"></a><span class="ln">   837</span>			return false
<a id="L838"></a><span class="ln">   838</span>		}
<a id="L839"></a><span class="ln">   839</span>		data = data[4:]
<a id="L840"></a><span class="ln">   840</span>		protoLen := int(data[0])
<a id="L841"></a><span class="ln">   841</span>		data = data[1:]
<a id="L842"></a><span class="ln">   842</span>		if len(data) &lt; protoLen {
<a id="L843"></a><span class="ln">   843</span>			return false
<a id="L844"></a><span class="ln">   844</span>		}
<a id="L845"></a><span class="ln">   845</span>		m.proto = string(data[0:protoLen])
<a id="L846"></a><span class="ln">   846</span>		data = data[protoLen:]
<a id="L847"></a><span class="ln">   847</span>	
<a id="L848"></a><span class="ln">   848</span>		if len(data) &lt; 1 {
<a id="L849"></a><span class="ln">   849</span>			return false
<a id="L850"></a><span class="ln">   850</span>		}
<a id="L851"></a><span class="ln">   851</span>		paddingLen := int(data[0])
<a id="L852"></a><span class="ln">   852</span>		data = data[1:]
<a id="L853"></a><span class="ln">   853</span>		if len(data) != paddingLen {
<a id="L854"></a><span class="ln">   854</span>			return false
<a id="L855"></a><span class="ln">   855</span>		}
<a id="L856"></a><span class="ln">   856</span>	
<a id="L857"></a><span class="ln">   857</span>		return true
<a id="L858"></a><span class="ln">   858</span>	}
<a id="L859"></a><span class="ln">   859</span>	
<a id="L860"></a><span class="ln">   860</span>	type certificateRequestMsg struct {
<a id="L861"></a><span class="ln">   861</span>		raw                    []byte
<a id="L862"></a><span class="ln">   862</span>		certificateTypes       []byte
<a id="L863"></a><span class="ln">   863</span>		certificateAuthorities [][]byte
<a id="L864"></a><span class="ln">   864</span>	}
<a id="L865"></a><span class="ln">   865</span>	
<a id="L866"></a><span class="ln">   866</span>	func (m *certificateRequestMsg) equal(i interface{}) bool {
<a id="L867"></a><span class="ln">   867</span>		m1, ok := i.(*certificateRequestMsg)
<a id="L868"></a><span class="ln">   868</span>		if !ok {
<a id="L869"></a><span class="ln">   869</span>			return false
<a id="L870"></a><span class="ln">   870</span>		}
<a id="L871"></a><span class="ln">   871</span>	
<a id="L872"></a><span class="ln">   872</span>		return bytes.Equal(m.raw, m1.raw) &amp;&amp;
<a id="L873"></a><span class="ln">   873</span>			bytes.Equal(m.certificateTypes, m1.certificateTypes) &amp;&amp;
<a id="L874"></a><span class="ln">   874</span>			eqByteSlices(m.certificateAuthorities, m1.certificateAuthorities)
<a id="L875"></a><span class="ln">   875</span>	}
<a id="L876"></a><span class="ln">   876</span>	
<a id="L877"></a><span class="ln">   877</span>	func (m *certificateRequestMsg) marshal() (x []byte) {
<a id="L878"></a><span class="ln">   878</span>		if m.raw != nil {
<a id="L879"></a><span class="ln">   879</span>			return m.raw
<a id="L880"></a><span class="ln">   880</span>		}
<a id="L881"></a><span class="ln">   881</span>	
<a id="L882"></a><span class="ln">   882</span>		<span class="comment">// See http://tools.ietf.org/html/rfc4346#section-7.4.4</span>
<a id="L883"></a><span class="ln">   883</span>		length := 1 + len(m.certificateTypes) + 2
<a id="L884"></a><span class="ln">   884</span>		casLength := 0
<a id="L885"></a><span class="ln">   885</span>		for _, ca := range m.certificateAuthorities {
<a id="L886"></a><span class="ln">   886</span>			casLength += 2 + len(ca)
<a id="L887"></a><span class="ln">   887</span>		}
<a id="L888"></a><span class="ln">   888</span>		length += casLength
<a id="L889"></a><span class="ln">   889</span>	
<a id="L890"></a><span class="ln">   890</span>		x = make([]byte, 4+length)
<a id="L891"></a><span class="ln">   891</span>		x[0] = typeCertificateRequest
<a id="L892"></a><span class="ln">   892</span>		x[1] = uint8(length &gt;&gt; 16)
<a id="L893"></a><span class="ln">   893</span>		x[2] = uint8(length &gt;&gt; 8)
<a id="L894"></a><span class="ln">   894</span>		x[3] = uint8(length)
<a id="L895"></a><span class="ln">   895</span>	
<a id="L896"></a><span class="ln">   896</span>		x[4] = uint8(len(m.certificateTypes))
<a id="L897"></a><span class="ln">   897</span>	
<a id="L898"></a><span class="ln">   898</span>		copy(x[5:], m.certificateTypes)
<a id="L899"></a><span class="ln">   899</span>		y := x[5+len(m.certificateTypes):]
<a id="L900"></a><span class="ln">   900</span>		y[0] = uint8(casLength &gt;&gt; 8)
<a id="L901"></a><span class="ln">   901</span>		y[1] = uint8(casLength)
<a id="L902"></a><span class="ln">   902</span>		y = y[2:]
<a id="L903"></a><span class="ln">   903</span>		for _, ca := range m.certificateAuthorities {
<a id="L904"></a><span class="ln">   904</span>			y[0] = uint8(len(ca) &gt;&gt; 8)
<a id="L905"></a><span class="ln">   905</span>			y[1] = uint8(len(ca))
<a id="L906"></a><span class="ln">   906</span>			y = y[2:]
<a id="L907"></a><span class="ln">   907</span>			copy(y, ca)
<a id="L908"></a><span class="ln">   908</span>			y = y[len(ca):]
<a id="L909"></a><span class="ln">   909</span>		}
<a id="L910"></a><span class="ln">   910</span>	
<a id="L911"></a><span class="ln">   911</span>		m.raw = x
<a id="L912"></a><span class="ln">   912</span>		return
<a id="L913"></a><span class="ln">   913</span>	}
<a id="L914"></a><span class="ln">   914</span>	
<a id="L915"></a><span class="ln">   915</span>	func (m *certificateRequestMsg) unmarshal(data []byte) bool {
<a id="L916"></a><span class="ln">   916</span>		m.raw = data
<a id="L917"></a><span class="ln">   917</span>	
<a id="L918"></a><span class="ln">   918</span>		if len(data) &lt; 5 {
<a id="L919"></a><span class="ln">   919</span>			return false
<a id="L920"></a><span class="ln">   920</span>		}
<a id="L921"></a><span class="ln">   921</span>	
<a id="L922"></a><span class="ln">   922</span>		length := uint32(data[1])&lt;&lt;16 | uint32(data[2])&lt;&lt;8 | uint32(data[3])
<a id="L923"></a><span class="ln">   923</span>		if uint32(len(data))-4 != length {
<a id="L924"></a><span class="ln">   924</span>			return false
<a id="L925"></a><span class="ln">   925</span>		}
<a id="L926"></a><span class="ln">   926</span>	
<a id="L927"></a><span class="ln">   927</span>		numCertTypes := int(data[4])
<a id="L928"></a><span class="ln">   928</span>		data = data[5:]
<a id="L929"></a><span class="ln">   929</span>		if numCertTypes == 0 || len(data) &lt;= numCertTypes {
<a id="L930"></a><span class="ln">   930</span>			return false
<a id="L931"></a><span class="ln">   931</span>		}
<a id="L932"></a><span class="ln">   932</span>	
<a id="L933"></a><span class="ln">   933</span>		m.certificateTypes = make([]byte, numCertTypes)
<a id="L934"></a><span class="ln">   934</span>		if copy(m.certificateTypes, data) != numCertTypes {
<a id="L935"></a><span class="ln">   935</span>			return false
<a id="L936"></a><span class="ln">   936</span>		}
<a id="L937"></a><span class="ln">   937</span>	
<a id="L938"></a><span class="ln">   938</span>		data = data[numCertTypes:]
<a id="L939"></a><span class="ln">   939</span>	
<a id="L940"></a><span class="ln">   940</span>		if len(data) &lt; 2 {
<a id="L941"></a><span class="ln">   941</span>			return false
<a id="L942"></a><span class="ln">   942</span>		}
<a id="L943"></a><span class="ln">   943</span>		casLength := uint16(data[0])&lt;&lt;8 | uint16(data[1])
<a id="L944"></a><span class="ln">   944</span>		data = data[2:]
<a id="L945"></a><span class="ln">   945</span>		if len(data) &lt; int(casLength) {
<a id="L946"></a><span class="ln">   946</span>			return false
<a id="L947"></a><span class="ln">   947</span>		}
<a id="L948"></a><span class="ln">   948</span>		cas := make([]byte, casLength)
<a id="L949"></a><span class="ln">   949</span>		copy(cas, data)
<a id="L950"></a><span class="ln">   950</span>		data = data[casLength:]
<a id="L951"></a><span class="ln">   951</span>	
<a id="L952"></a><span class="ln">   952</span>		m.certificateAuthorities = nil
<a id="L953"></a><span class="ln">   953</span>		for len(cas) &gt; 0 {
<a id="L954"></a><span class="ln">   954</span>			if len(cas) &lt; 2 {
<a id="L955"></a><span class="ln">   955</span>				return false
<a id="L956"></a><span class="ln">   956</span>			}
<a id="L957"></a><span class="ln">   957</span>			caLen := uint16(cas[0])&lt;&lt;8 | uint16(cas[1])
<a id="L958"></a><span class="ln">   958</span>			cas = cas[2:]
<a id="L959"></a><span class="ln">   959</span>	
<a id="L960"></a><span class="ln">   960</span>			if len(cas) &lt; int(caLen) {
<a id="L961"></a><span class="ln">   961</span>				return false
<a id="L962"></a><span class="ln">   962</span>			}
<a id="L963"></a><span class="ln">   963</span>	
<a id="L964"></a><span class="ln">   964</span>			m.certificateAuthorities = append(m.certificateAuthorities, cas[:caLen])
<a id="L965"></a><span class="ln">   965</span>			cas = cas[caLen:]
<a id="L966"></a><span class="ln">   966</span>		}
<a id="L967"></a><span class="ln">   967</span>		if len(data) &gt; 0 {
<a id="L968"></a><span class="ln">   968</span>			return false
<a id="L969"></a><span class="ln">   969</span>		}
<a id="L970"></a><span class="ln">   970</span>	
<a id="L971"></a><span class="ln">   971</span>		return true
<a id="L972"></a><span class="ln">   972</span>	}
<a id="L973"></a><span class="ln">   973</span>	
<a id="L974"></a><span class="ln">   974</span>	type certificateVerifyMsg struct {
<a id="L975"></a><span class="ln">   975</span>		raw       []byte
<a id="L976"></a><span class="ln">   976</span>		signature []byte
<a id="L977"></a><span class="ln">   977</span>	}
<a id="L978"></a><span class="ln">   978</span>	
<a id="L979"></a><span class="ln">   979</span>	func (m *certificateVerifyMsg) equal(i interface{}) bool {
<a id="L980"></a><span class="ln">   980</span>		m1, ok := i.(*certificateVerifyMsg)
<a id="L981"></a><span class="ln">   981</span>		if !ok {
<a id="L982"></a><span class="ln">   982</span>			return false
<a id="L983"></a><span class="ln">   983</span>		}
<a id="L984"></a><span class="ln">   984</span>	
<a id="L985"></a><span class="ln">   985</span>		return bytes.Equal(m.raw, m1.raw) &amp;&amp;
<a id="L986"></a><span class="ln">   986</span>			bytes.Equal(m.signature, m1.signature)
<a id="L987"></a><span class="ln">   987</span>	}
<a id="L988"></a><span class="ln">   988</span>	
<a id="L989"></a><span class="ln">   989</span>	func (m *certificateVerifyMsg) marshal() (x []byte) {
<a id="L990"></a><span class="ln">   990</span>		if m.raw != nil {
<a id="L991"></a><span class="ln">   991</span>			return m.raw
<a id="L992"></a><span class="ln">   992</span>		}
<a id="L993"></a><span class="ln">   993</span>	
<a id="L994"></a><span class="ln">   994</span>		<span class="comment">// See http://tools.ietf.org/html/rfc4346#section-7.4.8</span>
<a id="L995"></a><span class="ln">   995</span>		siglength := len(m.signature)
<a id="L996"></a><span class="ln">   996</span>		length := 2 + siglength
<a id="L997"></a><span class="ln">   997</span>		x = make([]byte, 4+length)
<a id="L998"></a><span class="ln">   998</span>		x[0] = typeCertificateVerify
<a id="L999"></a><span class="ln">   999</span>		x[1] = uint8(length &gt;&gt; 16)
<a id="L1000"></a><span class="ln">  1000</span>		x[2] = uint8(length &gt;&gt; 8)
<a id="L1001"></a><span class="ln">  1001</span>		x[3] = uint8(length)
<a id="L1002"></a><span class="ln">  1002</span>		x[4] = uint8(siglength &gt;&gt; 8)
<a id="L1003"></a><span class="ln">  1003</span>		x[5] = uint8(siglength)
<a id="L1004"></a><span class="ln">  1004</span>		copy(x[6:], m.signature)
<a id="L1005"></a><span class="ln">  1005</span>	
<a id="L1006"></a><span class="ln">  1006</span>		m.raw = x
<a id="L1007"></a><span class="ln">  1007</span>	
<a id="L1008"></a><span class="ln">  1008</span>		return
<a id="L1009"></a><span class="ln">  1009</span>	}
<a id="L1010"></a><span class="ln">  1010</span>	
<a id="L1011"></a><span class="ln">  1011</span>	func (m *certificateVerifyMsg) unmarshal(data []byte) bool {
<a id="L1012"></a><span class="ln">  1012</span>		m.raw = data
<a id="L1013"></a><span class="ln">  1013</span>	
<a id="L1014"></a><span class="ln">  1014</span>		if len(data) &lt; 6 {
<a id="L1015"></a><span class="ln">  1015</span>			return false
<a id="L1016"></a><span class="ln">  1016</span>		}
<a id="L1017"></a><span class="ln">  1017</span>	
<a id="L1018"></a><span class="ln">  1018</span>		length := uint32(data[1])&lt;&lt;16 | uint32(data[2])&lt;&lt;8 | uint32(data[3])
<a id="L1019"></a><span class="ln">  1019</span>		if uint32(len(data))-4 != length {
<a id="L1020"></a><span class="ln">  1020</span>			return false
<a id="L1021"></a><span class="ln">  1021</span>		}
<a id="L1022"></a><span class="ln">  1022</span>	
<a id="L1023"></a><span class="ln">  1023</span>		siglength := int(data[4])&lt;&lt;8 + int(data[5])
<a id="L1024"></a><span class="ln">  1024</span>		if len(data)-6 != siglength {
<a id="L1025"></a><span class="ln">  1025</span>			return false
<a id="L1026"></a><span class="ln">  1026</span>		}
<a id="L1027"></a><span class="ln">  1027</span>	
<a id="L1028"></a><span class="ln">  1028</span>		m.signature = data[6:]
<a id="L1029"></a><span class="ln">  1029</span>	
<a id="L1030"></a><span class="ln">  1030</span>		return true
<a id="L1031"></a><span class="ln">  1031</span>	}
<a id="L1032"></a><span class="ln">  1032</span>	
<a id="L1033"></a><span class="ln">  1033</span>	func eqUint16s(x, y []uint16) bool {
<a id="L1034"></a><span class="ln">  1034</span>		if len(x) != len(y) {
<a id="L1035"></a><span class="ln">  1035</span>			return false
<a id="L1036"></a><span class="ln">  1036</span>		}
<a id="L1037"></a><span class="ln">  1037</span>		for i, v := range x {
<a id="L1038"></a><span class="ln">  1038</span>			if y[i] != v {
<a id="L1039"></a><span class="ln">  1039</span>				return false
<a id="L1040"></a><span class="ln">  1040</span>			}
<a id="L1041"></a><span class="ln">  1041</span>		}
<a id="L1042"></a><span class="ln">  1042</span>		return true
<a id="L1043"></a><span class="ln">  1043</span>	}
<a id="L1044"></a><span class="ln">  1044</span>	
<a id="L1045"></a><span class="ln">  1045</span>	func eqStrings(x, y []string) bool {
<a id="L1046"></a><span class="ln">  1046</span>		if len(x) != len(y) {
<a id="L1047"></a><span class="ln">  1047</span>			return false
<a id="L1048"></a><span class="ln">  1048</span>		}
<a id="L1049"></a><span class="ln">  1049</span>		for i, v := range x {
<a id="L1050"></a><span class="ln">  1050</span>			if y[i] != v {
<a id="L1051"></a><span class="ln">  1051</span>				return false
<a id="L1052"></a><span class="ln">  1052</span>			}
<a id="L1053"></a><span class="ln">  1053</span>		}
<a id="L1054"></a><span class="ln">  1054</span>		return true
<a id="L1055"></a><span class="ln">  1055</span>	}
<a id="L1056"></a><span class="ln">  1056</span>	
<a id="L1057"></a><span class="ln">  1057</span>	func eqByteSlices(x, y [][]byte) bool {
<a id="L1058"></a><span class="ln">  1058</span>		if len(x) != len(y) {
<a id="L1059"></a><span class="ln">  1059</span>			return false
<a id="L1060"></a><span class="ln">  1060</span>		}
<a id="L1061"></a><span class="ln">  1061</span>		for i, v := range x {
<a id="L1062"></a><span class="ln">  1062</span>			if !bytes.Equal(v, y[i]) {
<a id="L1063"></a><span class="ln">  1063</span>				return false
<a id="L1064"></a><span class="ln">  1064</span>			}
<a id="L1065"></a><span class="ln">  1065</span>		}
<a id="L1066"></a><span class="ln">  1066</span>		return true
<a id="L1067"></a><span class="ln">  1067</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

