<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/crypto/tls/key_agreement.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/crypto/tls/key_agreement.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package tls
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;crypto&#34;
<a id="L9"></a><span class="ln">     9</span>		&#34;crypto/elliptic&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;crypto/md5&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;crypto/rsa&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;crypto/sha1&#34;
<a id="L13"></a><span class="ln">    13</span>		&#34;crypto/x509&#34;
<a id="L14"></a><span class="ln">    14</span>		&#34;errors&#34;
<a id="L15"></a><span class="ln">    15</span>		&#34;io&#34;
<a id="L16"></a><span class="ln">    16</span>		&#34;math/big&#34;
<a id="L17"></a><span class="ln">    17</span>	)
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// rsaKeyAgreement implements the standard TLS key agreement where the client</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// encrypts the pre-master secret to the server&#39;s public key.</span>
<a id="L21"></a><span class="ln">    21</span>	type rsaKeyAgreement struct{}
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	func (ka rsaKeyAgreement) generateServerKeyExchange(config *Config, cert *Certificate, clientHello *clientHelloMsg, hello *serverHelloMsg) (*serverKeyExchangeMsg, error) {
<a id="L24"></a><span class="ln">    24</span>		return nil, nil
<a id="L25"></a><span class="ln">    25</span>	}
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>	func (ka rsaKeyAgreement) processClientKeyExchange(config *Config, cert *Certificate, ckx *clientKeyExchangeMsg, version uint16) ([]byte, error) {
<a id="L28"></a><span class="ln">    28</span>		preMasterSecret := make([]byte, 48)
<a id="L29"></a><span class="ln">    29</span>		_, err := io.ReadFull(config.rand(), preMasterSecret[2:])
<a id="L30"></a><span class="ln">    30</span>		if err != nil {
<a id="L31"></a><span class="ln">    31</span>			return nil, err
<a id="L32"></a><span class="ln">    32</span>		}
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>		if len(ckx.ciphertext) &lt; 2 {
<a id="L35"></a><span class="ln">    35</span>			return nil, errors.New(&#34;bad ClientKeyExchange&#34;)
<a id="L36"></a><span class="ln">    36</span>		}
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>		ciphertext := ckx.ciphertext
<a id="L39"></a><span class="ln">    39</span>		if version != versionSSL30 {
<a id="L40"></a><span class="ln">    40</span>			ciphertextLen := int(ckx.ciphertext[0])&lt;&lt;8 | int(ckx.ciphertext[1])
<a id="L41"></a><span class="ln">    41</span>			if ciphertextLen != len(ckx.ciphertext)-2 {
<a id="L42"></a><span class="ln">    42</span>				return nil, errors.New(&#34;bad ClientKeyExchange&#34;)
<a id="L43"></a><span class="ln">    43</span>			}
<a id="L44"></a><span class="ln">    44</span>			ciphertext = ckx.ciphertext[2:]
<a id="L45"></a><span class="ln">    45</span>		}
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>		err = rsa.DecryptPKCS1v15SessionKey(config.rand(), cert.PrivateKey.(*rsa.PrivateKey), ciphertext, preMasterSecret)
<a id="L48"></a><span class="ln">    48</span>		if err != nil {
<a id="L49"></a><span class="ln">    49</span>			return nil, err
<a id="L50"></a><span class="ln">    50</span>		}
<a id="L51"></a><span class="ln">    51</span>		<span class="comment">// We don&#39;t check the version number in the premaster secret.  For one,</span>
<a id="L52"></a><span class="ln">    52</span>		<span class="comment">// by checking it, we would leak information about the validity of the</span>
<a id="L53"></a><span class="ln">    53</span>		<span class="comment">// encrypted pre-master secret. Secondly, it provides only a small</span>
<a id="L54"></a><span class="ln">    54</span>		<span class="comment">// benefit against a downgrade attack and some implementations send the</span>
<a id="L55"></a><span class="ln">    55</span>		<span class="comment">// wrong version anyway. See the discussion at the end of section</span>
<a id="L56"></a><span class="ln">    56</span>		<span class="comment">// 7.4.7.1 of RFC 4346.</span>
<a id="L57"></a><span class="ln">    57</span>		return preMasterSecret, nil
<a id="L58"></a><span class="ln">    58</span>	}
<a id="L59"></a><span class="ln">    59</span>	
<a id="L60"></a><span class="ln">    60</span>	func (ka rsaKeyAgreement) processServerKeyExchange(config *Config, clientHello *clientHelloMsg, serverHello *serverHelloMsg, cert *x509.Certificate, skx *serverKeyExchangeMsg) error {
<a id="L61"></a><span class="ln">    61</span>		return errors.New(&#34;unexpected ServerKeyExchange&#34;)
<a id="L62"></a><span class="ln">    62</span>	}
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>	func (ka rsaKeyAgreement) generateClientKeyExchange(config *Config, clientHello *clientHelloMsg, cert *x509.Certificate) ([]byte, *clientKeyExchangeMsg, error) {
<a id="L65"></a><span class="ln">    65</span>		preMasterSecret := make([]byte, 48)
<a id="L66"></a><span class="ln">    66</span>		preMasterSecret[0] = byte(clientHello.vers &gt;&gt; 8)
<a id="L67"></a><span class="ln">    67</span>		preMasterSecret[1] = byte(clientHello.vers)
<a id="L68"></a><span class="ln">    68</span>		_, err := io.ReadFull(config.rand(), preMasterSecret[2:])
<a id="L69"></a><span class="ln">    69</span>		if err != nil {
<a id="L70"></a><span class="ln">    70</span>			return nil, nil, err
<a id="L71"></a><span class="ln">    71</span>		}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>		encrypted, err := rsa.EncryptPKCS1v15(config.rand(), cert.PublicKey.(*rsa.PublicKey), preMasterSecret)
<a id="L74"></a><span class="ln">    74</span>		if err != nil {
<a id="L75"></a><span class="ln">    75</span>			return nil, nil, err
<a id="L76"></a><span class="ln">    76</span>		}
<a id="L77"></a><span class="ln">    77</span>		ckx := new(clientKeyExchangeMsg)
<a id="L78"></a><span class="ln">    78</span>		ckx.ciphertext = make([]byte, len(encrypted)+2)
<a id="L79"></a><span class="ln">    79</span>		ckx.ciphertext[0] = byte(len(encrypted) &gt;&gt; 8)
<a id="L80"></a><span class="ln">    80</span>		ckx.ciphertext[1] = byte(len(encrypted))
<a id="L81"></a><span class="ln">    81</span>		copy(ckx.ciphertext[2:], encrypted)
<a id="L82"></a><span class="ln">    82</span>		return preMasterSecret, ckx, nil
<a id="L83"></a><span class="ln">    83</span>	}
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>	<span class="comment">// md5SHA1Hash implements TLS 1.0&#39;s hybrid hash function which consists of the</span>
<a id="L86"></a><span class="ln">    86</span>	<span class="comment">// concatenation of an MD5 and SHA1 hash.</span>
<a id="L87"></a><span class="ln">    87</span>	func md5SHA1Hash(slices ...[]byte) []byte {
<a id="L88"></a><span class="ln">    88</span>		md5sha1 := make([]byte, md5.Size+sha1.Size)
<a id="L89"></a><span class="ln">    89</span>		hmd5 := md5.New()
<a id="L90"></a><span class="ln">    90</span>		for _, slice := range slices {
<a id="L91"></a><span class="ln">    91</span>			hmd5.Write(slice)
<a id="L92"></a><span class="ln">    92</span>		}
<a id="L93"></a><span class="ln">    93</span>		copy(md5sha1, hmd5.Sum(nil))
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>		hsha1 := sha1.New()
<a id="L96"></a><span class="ln">    96</span>		for _, slice := range slices {
<a id="L97"></a><span class="ln">    97</span>			hsha1.Write(slice)
<a id="L98"></a><span class="ln">    98</span>		}
<a id="L99"></a><span class="ln">    99</span>		copy(md5sha1[md5.Size:], hsha1.Sum(nil))
<a id="L100"></a><span class="ln">   100</span>		return md5sha1
<a id="L101"></a><span class="ln">   101</span>	}
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>	<span class="comment">// ecdheRSAKeyAgreement implements a TLS key agreement where the server</span>
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">// generates a ephemeral EC public/private key pair and signs it. The</span>
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// pre-master secret is then calculated using ECDH.</span>
<a id="L106"></a><span class="ln">   106</span>	type ecdheRSAKeyAgreement struct {
<a id="L107"></a><span class="ln">   107</span>		privateKey []byte
<a id="L108"></a><span class="ln">   108</span>		curve      elliptic.Curve
<a id="L109"></a><span class="ln">   109</span>		x, y       *big.Int
<a id="L110"></a><span class="ln">   110</span>	}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>	func (ka *ecdheRSAKeyAgreement) generateServerKeyExchange(config *Config, cert *Certificate, clientHello *clientHelloMsg, hello *serverHelloMsg) (*serverKeyExchangeMsg, error) {
<a id="L113"></a><span class="ln">   113</span>		var curveid uint16
<a id="L114"></a><span class="ln">   114</span>	
<a id="L115"></a><span class="ln">   115</span>	Curve:
<a id="L116"></a><span class="ln">   116</span>		for _, c := range clientHello.supportedCurves {
<a id="L117"></a><span class="ln">   117</span>			switch c {
<a id="L118"></a><span class="ln">   118</span>			case curveP256:
<a id="L119"></a><span class="ln">   119</span>				ka.curve = elliptic.P256()
<a id="L120"></a><span class="ln">   120</span>				curveid = c
<a id="L121"></a><span class="ln">   121</span>				break Curve
<a id="L122"></a><span class="ln">   122</span>			case curveP384:
<a id="L123"></a><span class="ln">   123</span>				ka.curve = elliptic.P384()
<a id="L124"></a><span class="ln">   124</span>				curveid = c
<a id="L125"></a><span class="ln">   125</span>				break Curve
<a id="L126"></a><span class="ln">   126</span>			case curveP521:
<a id="L127"></a><span class="ln">   127</span>				ka.curve = elliptic.P521()
<a id="L128"></a><span class="ln">   128</span>				curveid = c
<a id="L129"></a><span class="ln">   129</span>				break Curve
<a id="L130"></a><span class="ln">   130</span>			}
<a id="L131"></a><span class="ln">   131</span>		}
<a id="L132"></a><span class="ln">   132</span>	
<a id="L133"></a><span class="ln">   133</span>		if curveid == 0 {
<a id="L134"></a><span class="ln">   134</span>			return nil, errors.New(&#34;tls: no supported elliptic curves offered&#34;)
<a id="L135"></a><span class="ln">   135</span>		}
<a id="L136"></a><span class="ln">   136</span>	
<a id="L137"></a><span class="ln">   137</span>		var x, y *big.Int
<a id="L138"></a><span class="ln">   138</span>		var err error
<a id="L139"></a><span class="ln">   139</span>		ka.privateKey, x, y, err = elliptic.GenerateKey(ka.curve, config.rand())
<a id="L140"></a><span class="ln">   140</span>		if err != nil {
<a id="L141"></a><span class="ln">   141</span>			return nil, err
<a id="L142"></a><span class="ln">   142</span>		}
<a id="L143"></a><span class="ln">   143</span>		ecdhePublic := elliptic.Marshal(ka.curve, x, y)
<a id="L144"></a><span class="ln">   144</span>	
<a id="L145"></a><span class="ln">   145</span>		<span class="comment">// http://tools.ietf.org/html/rfc4492#section-5.4</span>
<a id="L146"></a><span class="ln">   146</span>		serverECDHParams := make([]byte, 1+2+1+len(ecdhePublic))
<a id="L147"></a><span class="ln">   147</span>		serverECDHParams[0] = 3 <span class="comment">// named curve</span>
<a id="L148"></a><span class="ln">   148</span>		serverECDHParams[1] = byte(curveid &gt;&gt; 8)
<a id="L149"></a><span class="ln">   149</span>		serverECDHParams[2] = byte(curveid)
<a id="L150"></a><span class="ln">   150</span>		serverECDHParams[3] = byte(len(ecdhePublic))
<a id="L151"></a><span class="ln">   151</span>		copy(serverECDHParams[4:], ecdhePublic)
<a id="L152"></a><span class="ln">   152</span>	
<a id="L153"></a><span class="ln">   153</span>		md5sha1 := md5SHA1Hash(clientHello.random, hello.random, serverECDHParams)
<a id="L154"></a><span class="ln">   154</span>		sig, err := rsa.SignPKCS1v15(config.rand(), cert.PrivateKey.(*rsa.PrivateKey), crypto.MD5SHA1, md5sha1)
<a id="L155"></a><span class="ln">   155</span>		if err != nil {
<a id="L156"></a><span class="ln">   156</span>			return nil, errors.New(&#34;failed to sign ECDHE parameters: &#34; + err.Error())
<a id="L157"></a><span class="ln">   157</span>		}
<a id="L158"></a><span class="ln">   158</span>	
<a id="L159"></a><span class="ln">   159</span>		skx := new(serverKeyExchangeMsg)
<a id="L160"></a><span class="ln">   160</span>		skx.key = make([]byte, len(serverECDHParams)+2+len(sig))
<a id="L161"></a><span class="ln">   161</span>		copy(skx.key, serverECDHParams)
<a id="L162"></a><span class="ln">   162</span>		k := skx.key[len(serverECDHParams):]
<a id="L163"></a><span class="ln">   163</span>		k[0] = byte(len(sig) &gt;&gt; 8)
<a id="L164"></a><span class="ln">   164</span>		k[1] = byte(len(sig))
<a id="L165"></a><span class="ln">   165</span>		copy(k[2:], sig)
<a id="L166"></a><span class="ln">   166</span>	
<a id="L167"></a><span class="ln">   167</span>		return skx, nil
<a id="L168"></a><span class="ln">   168</span>	}
<a id="L169"></a><span class="ln">   169</span>	
<a id="L170"></a><span class="ln">   170</span>	func (ka *ecdheRSAKeyAgreement) processClientKeyExchange(config *Config, cert *Certificate, ckx *clientKeyExchangeMsg, version uint16) ([]byte, error) {
<a id="L171"></a><span class="ln">   171</span>		if len(ckx.ciphertext) == 0 || int(ckx.ciphertext[0]) != len(ckx.ciphertext)-1 {
<a id="L172"></a><span class="ln">   172</span>			return nil, errors.New(&#34;bad ClientKeyExchange&#34;)
<a id="L173"></a><span class="ln">   173</span>		}
<a id="L174"></a><span class="ln">   174</span>		x, y := elliptic.Unmarshal(ka.curve, ckx.ciphertext[1:])
<a id="L175"></a><span class="ln">   175</span>		if x == nil {
<a id="L176"></a><span class="ln">   176</span>			return nil, errors.New(&#34;bad ClientKeyExchange&#34;)
<a id="L177"></a><span class="ln">   177</span>		}
<a id="L178"></a><span class="ln">   178</span>		x, _ = ka.curve.ScalarMult(x, y, ka.privateKey)
<a id="L179"></a><span class="ln">   179</span>		preMasterSecret := make([]byte, (ka.curve.Params().BitSize+7)&gt;&gt;3)
<a id="L180"></a><span class="ln">   180</span>		xBytes := x.Bytes()
<a id="L181"></a><span class="ln">   181</span>		copy(preMasterSecret[len(preMasterSecret)-len(xBytes):], xBytes)
<a id="L182"></a><span class="ln">   182</span>	
<a id="L183"></a><span class="ln">   183</span>		return preMasterSecret, nil
<a id="L184"></a><span class="ln">   184</span>	}
<a id="L185"></a><span class="ln">   185</span>	
<a id="L186"></a><span class="ln">   186</span>	var errServerKeyExchange = errors.New(&#34;invalid ServerKeyExchange&#34;)
<a id="L187"></a><span class="ln">   187</span>	
<a id="L188"></a><span class="ln">   188</span>	func (ka *ecdheRSAKeyAgreement) processServerKeyExchange(config *Config, clientHello *clientHelloMsg, serverHello *serverHelloMsg, cert *x509.Certificate, skx *serverKeyExchangeMsg) error {
<a id="L189"></a><span class="ln">   189</span>		if len(skx.key) &lt; 4 {
<a id="L190"></a><span class="ln">   190</span>			return errServerKeyExchange
<a id="L191"></a><span class="ln">   191</span>		}
<a id="L192"></a><span class="ln">   192</span>		if skx.key[0] != 3 { <span class="comment">// named curve</span>
<a id="L193"></a><span class="ln">   193</span>			return errors.New(&#34;server selected unsupported curve&#34;)
<a id="L194"></a><span class="ln">   194</span>		}
<a id="L195"></a><span class="ln">   195</span>		curveid := uint16(skx.key[1])&lt;&lt;8 | uint16(skx.key[2])
<a id="L196"></a><span class="ln">   196</span>	
<a id="L197"></a><span class="ln">   197</span>		switch curveid {
<a id="L198"></a><span class="ln">   198</span>		case curveP256:
<a id="L199"></a><span class="ln">   199</span>			ka.curve = elliptic.P256()
<a id="L200"></a><span class="ln">   200</span>		case curveP384:
<a id="L201"></a><span class="ln">   201</span>			ka.curve = elliptic.P384()
<a id="L202"></a><span class="ln">   202</span>		case curveP521:
<a id="L203"></a><span class="ln">   203</span>			ka.curve = elliptic.P521()
<a id="L204"></a><span class="ln">   204</span>		default:
<a id="L205"></a><span class="ln">   205</span>			return errors.New(&#34;server selected unsupported curve&#34;)
<a id="L206"></a><span class="ln">   206</span>		}
<a id="L207"></a><span class="ln">   207</span>	
<a id="L208"></a><span class="ln">   208</span>		publicLen := int(skx.key[3])
<a id="L209"></a><span class="ln">   209</span>		if publicLen+4 &gt; len(skx.key) {
<a id="L210"></a><span class="ln">   210</span>			return errServerKeyExchange
<a id="L211"></a><span class="ln">   211</span>		}
<a id="L212"></a><span class="ln">   212</span>		ka.x, ka.y = elliptic.Unmarshal(ka.curve, skx.key[4:4+publicLen])
<a id="L213"></a><span class="ln">   213</span>		if ka.x == nil {
<a id="L214"></a><span class="ln">   214</span>			return errServerKeyExchange
<a id="L215"></a><span class="ln">   215</span>		}
<a id="L216"></a><span class="ln">   216</span>		serverECDHParams := skx.key[:4+publicLen]
<a id="L217"></a><span class="ln">   217</span>	
<a id="L218"></a><span class="ln">   218</span>		sig := skx.key[4+publicLen:]
<a id="L219"></a><span class="ln">   219</span>		if len(sig) &lt; 2 {
<a id="L220"></a><span class="ln">   220</span>			return errServerKeyExchange
<a id="L221"></a><span class="ln">   221</span>		}
<a id="L222"></a><span class="ln">   222</span>		sigLen := int(sig[0])&lt;&lt;8 | int(sig[1])
<a id="L223"></a><span class="ln">   223</span>		if sigLen+2 != len(sig) {
<a id="L224"></a><span class="ln">   224</span>			return errServerKeyExchange
<a id="L225"></a><span class="ln">   225</span>		}
<a id="L226"></a><span class="ln">   226</span>		sig = sig[2:]
<a id="L227"></a><span class="ln">   227</span>	
<a id="L228"></a><span class="ln">   228</span>		md5sha1 := md5SHA1Hash(clientHello.random, serverHello.random, serverECDHParams)
<a id="L229"></a><span class="ln">   229</span>		return rsa.VerifyPKCS1v15(cert.PublicKey.(*rsa.PublicKey), crypto.MD5SHA1, md5sha1, sig)
<a id="L230"></a><span class="ln">   230</span>	}
<a id="L231"></a><span class="ln">   231</span>	
<a id="L232"></a><span class="ln">   232</span>	func (ka *ecdheRSAKeyAgreement) generateClientKeyExchange(config *Config, clientHello *clientHelloMsg, cert *x509.Certificate) ([]byte, *clientKeyExchangeMsg, error) {
<a id="L233"></a><span class="ln">   233</span>		if ka.curve == nil {
<a id="L234"></a><span class="ln">   234</span>			return nil, nil, errors.New(&#34;missing ServerKeyExchange message&#34;)
<a id="L235"></a><span class="ln">   235</span>		}
<a id="L236"></a><span class="ln">   236</span>		priv, mx, my, err := elliptic.GenerateKey(ka.curve, config.rand())
<a id="L237"></a><span class="ln">   237</span>		if err != nil {
<a id="L238"></a><span class="ln">   238</span>			return nil, nil, err
<a id="L239"></a><span class="ln">   239</span>		}
<a id="L240"></a><span class="ln">   240</span>		x, _ := ka.curve.ScalarMult(ka.x, ka.y, priv)
<a id="L241"></a><span class="ln">   241</span>		preMasterSecret := make([]byte, (ka.curve.Params().BitSize+7)&gt;&gt;3)
<a id="L242"></a><span class="ln">   242</span>		xBytes := x.Bytes()
<a id="L243"></a><span class="ln">   243</span>		copy(preMasterSecret[len(preMasterSecret)-len(xBytes):], xBytes)
<a id="L244"></a><span class="ln">   244</span>	
<a id="L245"></a><span class="ln">   245</span>		serialized := elliptic.Marshal(ka.curve, mx, my)
<a id="L246"></a><span class="ln">   246</span>	
<a id="L247"></a><span class="ln">   247</span>		ckx := new(clientKeyExchangeMsg)
<a id="L248"></a><span class="ln">   248</span>		ckx.ciphertext = make([]byte, 1+len(serialized))
<a id="L249"></a><span class="ln">   249</span>		ckx.ciphertext[0] = byte(len(serialized))
<a id="L250"></a><span class="ln">   250</span>		copy(ckx.ciphertext[1:], serialized)
<a id="L251"></a><span class="ln">   251</span>	
<a id="L252"></a><span class="ln">   252</span>		return preMasterSecret, ckx, nil
<a id="L253"></a><span class="ln">   253</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

