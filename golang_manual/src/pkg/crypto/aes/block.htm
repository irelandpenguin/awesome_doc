<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/crypto/aes/block.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/crypto/aes/block.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// This Go implementation is derived in part from the reference</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// ANSI C implementation, which carries the following notice:</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">//</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">//	rijndael-alg-fst.c</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">//</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">//	@version 3.0 (December 2000)</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">//</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">//	Optimised ANSI C code for the Rijndael cipher (now AES)</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">//</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">//	@author Vincent Rijmen &lt;vincent.rijmen@esat.kuleuven.ac.be&gt;</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">//	@author Antoon Bosselaers &lt;antoon.bosselaers@esat.kuleuven.ac.be&gt;</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">//	@author Paulo Barreto &lt;paulo.barreto@terra.com.br&gt;</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">//</span>
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">//	This code is hereby placed in the public domain.</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">//</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">//	THIS SOFTWARE IS PROVIDED BY THE AUTHORS &#39;&#39;AS IS&#39;&#39; AND ANY EXPRESS</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">//	OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">//	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">//	ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//	LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">//	CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">//	SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">//	BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">//	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">//	OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,</span>
<a id="L30"></a><span class="ln">    30</span>	<span class="comment">//	EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span>
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">//</span>
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// See FIPS 197 for specification, and see Daemen and Rijmen&#39;s Rijndael submission</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// for implementation details.</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">//	http://www.csrc.nist.gov/publications/fips/fips197/fips-197.pdf</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">//	http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf</span>
<a id="L36"></a><span class="ln">    36</span>	
<a id="L37"></a><span class="ln">    37</span>	package aes
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// Encrypt one block from src into dst, using the expanded key xk.</span>
<a id="L40"></a><span class="ln">    40</span>	func encryptBlock(xk []uint32, dst, src []byte) {
<a id="L41"></a><span class="ln">    41</span>		var s0, s1, s2, s3, t0, t1, t2, t3 uint32
<a id="L42"></a><span class="ln">    42</span>	
<a id="L43"></a><span class="ln">    43</span>		s0 = uint32(src[0])&lt;&lt;24 | uint32(src[1])&lt;&lt;16 | uint32(src[2])&lt;&lt;8 | uint32(src[3])
<a id="L44"></a><span class="ln">    44</span>		s1 = uint32(src[4])&lt;&lt;24 | uint32(src[5])&lt;&lt;16 | uint32(src[6])&lt;&lt;8 | uint32(src[7])
<a id="L45"></a><span class="ln">    45</span>		s2 = uint32(src[8])&lt;&lt;24 | uint32(src[9])&lt;&lt;16 | uint32(src[10])&lt;&lt;8 | uint32(src[11])
<a id="L46"></a><span class="ln">    46</span>		s3 = uint32(src[12])&lt;&lt;24 | uint32(src[13])&lt;&lt;16 | uint32(src[14])&lt;&lt;8 | uint32(src[15])
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>		<span class="comment">// First round just XORs input with key.</span>
<a id="L49"></a><span class="ln">    49</span>		s0 ^= xk[0]
<a id="L50"></a><span class="ln">    50</span>		s1 ^= xk[1]
<a id="L51"></a><span class="ln">    51</span>		s2 ^= xk[2]
<a id="L52"></a><span class="ln">    52</span>		s3 ^= xk[3]
<a id="L53"></a><span class="ln">    53</span>	
<a id="L54"></a><span class="ln">    54</span>		<span class="comment">// Middle rounds shuffle using tables.</span>
<a id="L55"></a><span class="ln">    55</span>		<span class="comment">// Number of rounds is set by length of expanded key.</span>
<a id="L56"></a><span class="ln">    56</span>		nr := len(xk)/4 - 2 <span class="comment">// - 2: one above, one more below</span>
<a id="L57"></a><span class="ln">    57</span>		k := 4
<a id="L58"></a><span class="ln">    58</span>		for r := 0; r &lt; nr; r++ {
<a id="L59"></a><span class="ln">    59</span>			t0 = xk[k+0] ^ te0[uint8(s0&gt;&gt;24)] ^ te1[uint8(s1&gt;&gt;16)] ^ te2[uint8(s2&gt;&gt;8)] ^ te3[uint8(s3)]
<a id="L60"></a><span class="ln">    60</span>			t1 = xk[k+1] ^ te0[uint8(s1&gt;&gt;24)] ^ te1[uint8(s2&gt;&gt;16)] ^ te2[uint8(s3&gt;&gt;8)] ^ te3[uint8(s0)]
<a id="L61"></a><span class="ln">    61</span>			t2 = xk[k+2] ^ te0[uint8(s2&gt;&gt;24)] ^ te1[uint8(s3&gt;&gt;16)] ^ te2[uint8(s0&gt;&gt;8)] ^ te3[uint8(s1)]
<a id="L62"></a><span class="ln">    62</span>			t3 = xk[k+3] ^ te0[uint8(s3&gt;&gt;24)] ^ te1[uint8(s0&gt;&gt;16)] ^ te2[uint8(s1&gt;&gt;8)] ^ te3[uint8(s2)]
<a id="L63"></a><span class="ln">    63</span>			k += 4
<a id="L64"></a><span class="ln">    64</span>			s0, s1, s2, s3 = t0, t1, t2, t3
<a id="L65"></a><span class="ln">    65</span>		}
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>		<span class="comment">// Last round uses s-box directly and XORs to produce output.</span>
<a id="L68"></a><span class="ln">    68</span>		s0 = uint32(sbox0[t0&gt;&gt;24])&lt;&lt;24 | uint32(sbox0[t1&gt;&gt;16&amp;0xff])&lt;&lt;16 | uint32(sbox0[t2&gt;&gt;8&amp;0xff])&lt;&lt;8 | uint32(sbox0[t3&amp;0xff])
<a id="L69"></a><span class="ln">    69</span>		s1 = uint32(sbox0[t1&gt;&gt;24])&lt;&lt;24 | uint32(sbox0[t2&gt;&gt;16&amp;0xff])&lt;&lt;16 | uint32(sbox0[t3&gt;&gt;8&amp;0xff])&lt;&lt;8 | uint32(sbox0[t0&amp;0xff])
<a id="L70"></a><span class="ln">    70</span>		s2 = uint32(sbox0[t2&gt;&gt;24])&lt;&lt;24 | uint32(sbox0[t3&gt;&gt;16&amp;0xff])&lt;&lt;16 | uint32(sbox0[t0&gt;&gt;8&amp;0xff])&lt;&lt;8 | uint32(sbox0[t1&amp;0xff])
<a id="L71"></a><span class="ln">    71</span>		s3 = uint32(sbox0[t3&gt;&gt;24])&lt;&lt;24 | uint32(sbox0[t0&gt;&gt;16&amp;0xff])&lt;&lt;16 | uint32(sbox0[t1&gt;&gt;8&amp;0xff])&lt;&lt;8 | uint32(sbox0[t2&amp;0xff])
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>		s0 ^= xk[k+0]
<a id="L74"></a><span class="ln">    74</span>		s1 ^= xk[k+1]
<a id="L75"></a><span class="ln">    75</span>		s2 ^= xk[k+2]
<a id="L76"></a><span class="ln">    76</span>		s3 ^= xk[k+3]
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>		dst[0], dst[1], dst[2], dst[3] = byte(s0&gt;&gt;24), byte(s0&gt;&gt;16), byte(s0&gt;&gt;8), byte(s0)
<a id="L79"></a><span class="ln">    79</span>		dst[4], dst[5], dst[6], dst[7] = byte(s1&gt;&gt;24), byte(s1&gt;&gt;16), byte(s1&gt;&gt;8), byte(s1)
<a id="L80"></a><span class="ln">    80</span>		dst[8], dst[9], dst[10], dst[11] = byte(s2&gt;&gt;24), byte(s2&gt;&gt;16), byte(s2&gt;&gt;8), byte(s2)
<a id="L81"></a><span class="ln">    81</span>		dst[12], dst[13], dst[14], dst[15] = byte(s3&gt;&gt;24), byte(s3&gt;&gt;16), byte(s3&gt;&gt;8), byte(s3)
<a id="L82"></a><span class="ln">    82</span>	}
<a id="L83"></a><span class="ln">    83</span>	
<a id="L84"></a><span class="ln">    84</span>	<span class="comment">// Decrypt one block from src into dst, using the expanded key xk.</span>
<a id="L85"></a><span class="ln">    85</span>	func decryptBlock(xk []uint32, dst, src []byte) {
<a id="L86"></a><span class="ln">    86</span>		var s0, s1, s2, s3, t0, t1, t2, t3 uint32
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>		s0 = uint32(src[0])&lt;&lt;24 | uint32(src[1])&lt;&lt;16 | uint32(src[2])&lt;&lt;8 | uint32(src[3])
<a id="L89"></a><span class="ln">    89</span>		s1 = uint32(src[4])&lt;&lt;24 | uint32(src[5])&lt;&lt;16 | uint32(src[6])&lt;&lt;8 | uint32(src[7])
<a id="L90"></a><span class="ln">    90</span>		s2 = uint32(src[8])&lt;&lt;24 | uint32(src[9])&lt;&lt;16 | uint32(src[10])&lt;&lt;8 | uint32(src[11])
<a id="L91"></a><span class="ln">    91</span>		s3 = uint32(src[12])&lt;&lt;24 | uint32(src[13])&lt;&lt;16 | uint32(src[14])&lt;&lt;8 | uint32(src[15])
<a id="L92"></a><span class="ln">    92</span>	
<a id="L93"></a><span class="ln">    93</span>		<span class="comment">// First round just XORs input with key.</span>
<a id="L94"></a><span class="ln">    94</span>		s0 ^= xk[0]
<a id="L95"></a><span class="ln">    95</span>		s1 ^= xk[1]
<a id="L96"></a><span class="ln">    96</span>		s2 ^= xk[2]
<a id="L97"></a><span class="ln">    97</span>		s3 ^= xk[3]
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>		<span class="comment">// Middle rounds shuffle using tables.</span>
<a id="L100"></a><span class="ln">   100</span>		<span class="comment">// Number of rounds is set by length of expanded key.</span>
<a id="L101"></a><span class="ln">   101</span>		nr := len(xk)/4 - 2 <span class="comment">// - 2: one above, one more below</span>
<a id="L102"></a><span class="ln">   102</span>		k := 4
<a id="L103"></a><span class="ln">   103</span>		for r := 0; r &lt; nr; r++ {
<a id="L104"></a><span class="ln">   104</span>			t0 = xk[k+0] ^ td0[uint8(s0&gt;&gt;24)] ^ td1[uint8(s3&gt;&gt;16)] ^ td2[uint8(s2&gt;&gt;8)] ^ td3[uint8(s1)]
<a id="L105"></a><span class="ln">   105</span>			t1 = xk[k+1] ^ td0[uint8(s1&gt;&gt;24)] ^ td1[uint8(s0&gt;&gt;16)] ^ td2[uint8(s3&gt;&gt;8)] ^ td3[uint8(s2)]
<a id="L106"></a><span class="ln">   106</span>			t2 = xk[k+2] ^ td0[uint8(s2&gt;&gt;24)] ^ td1[uint8(s1&gt;&gt;16)] ^ td2[uint8(s0&gt;&gt;8)] ^ td3[uint8(s3)]
<a id="L107"></a><span class="ln">   107</span>			t3 = xk[k+3] ^ td0[uint8(s3&gt;&gt;24)] ^ td1[uint8(s2&gt;&gt;16)] ^ td2[uint8(s1&gt;&gt;8)] ^ td3[uint8(s0)]
<a id="L108"></a><span class="ln">   108</span>			k += 4
<a id="L109"></a><span class="ln">   109</span>			s0, s1, s2, s3 = t0, t1, t2, t3
<a id="L110"></a><span class="ln">   110</span>		}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>		<span class="comment">// Last round uses s-box directly and XORs to produce output.</span>
<a id="L113"></a><span class="ln">   113</span>		s0 = uint32(sbox1[t0&gt;&gt;24])&lt;&lt;24 | uint32(sbox1[t3&gt;&gt;16&amp;0xff])&lt;&lt;16 | uint32(sbox1[t2&gt;&gt;8&amp;0xff])&lt;&lt;8 | uint32(sbox1[t1&amp;0xff])
<a id="L114"></a><span class="ln">   114</span>		s1 = uint32(sbox1[t1&gt;&gt;24])&lt;&lt;24 | uint32(sbox1[t0&gt;&gt;16&amp;0xff])&lt;&lt;16 | uint32(sbox1[t3&gt;&gt;8&amp;0xff])&lt;&lt;8 | uint32(sbox1[t2&amp;0xff])
<a id="L115"></a><span class="ln">   115</span>		s2 = uint32(sbox1[t2&gt;&gt;24])&lt;&lt;24 | uint32(sbox1[t1&gt;&gt;16&amp;0xff])&lt;&lt;16 | uint32(sbox1[t0&gt;&gt;8&amp;0xff])&lt;&lt;8 | uint32(sbox1[t3&amp;0xff])
<a id="L116"></a><span class="ln">   116</span>		s3 = uint32(sbox1[t3&gt;&gt;24])&lt;&lt;24 | uint32(sbox1[t2&gt;&gt;16&amp;0xff])&lt;&lt;16 | uint32(sbox1[t1&gt;&gt;8&amp;0xff])&lt;&lt;8 | uint32(sbox1[t0&amp;0xff])
<a id="L117"></a><span class="ln">   117</span>	
<a id="L118"></a><span class="ln">   118</span>		s0 ^= xk[k+0]
<a id="L119"></a><span class="ln">   119</span>		s1 ^= xk[k+1]
<a id="L120"></a><span class="ln">   120</span>		s2 ^= xk[k+2]
<a id="L121"></a><span class="ln">   121</span>		s3 ^= xk[k+3]
<a id="L122"></a><span class="ln">   122</span>	
<a id="L123"></a><span class="ln">   123</span>		dst[0], dst[1], dst[2], dst[3] = byte(s0&gt;&gt;24), byte(s0&gt;&gt;16), byte(s0&gt;&gt;8), byte(s0)
<a id="L124"></a><span class="ln">   124</span>		dst[4], dst[5], dst[6], dst[7] = byte(s1&gt;&gt;24), byte(s1&gt;&gt;16), byte(s1&gt;&gt;8), byte(s1)
<a id="L125"></a><span class="ln">   125</span>		dst[8], dst[9], dst[10], dst[11] = byte(s2&gt;&gt;24), byte(s2&gt;&gt;16), byte(s2&gt;&gt;8), byte(s2)
<a id="L126"></a><span class="ln">   126</span>		dst[12], dst[13], dst[14], dst[15] = byte(s3&gt;&gt;24), byte(s3&gt;&gt;16), byte(s3&gt;&gt;8), byte(s3)
<a id="L127"></a><span class="ln">   127</span>	}
<a id="L128"></a><span class="ln">   128</span>	
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// Apply sbox0 to each byte in w.</span>
<a id="L130"></a><span class="ln">   130</span>	func subw(w uint32) uint32 {
<a id="L131"></a><span class="ln">   131</span>		return uint32(sbox0[w&gt;&gt;24])&lt;&lt;24 |
<a id="L132"></a><span class="ln">   132</span>			uint32(sbox0[w&gt;&gt;16&amp;0xff])&lt;&lt;16 |
<a id="L133"></a><span class="ln">   133</span>			uint32(sbox0[w&gt;&gt;8&amp;0xff])&lt;&lt;8 |
<a id="L134"></a><span class="ln">   134</span>			uint32(sbox0[w&amp;0xff])
<a id="L135"></a><span class="ln">   135</span>	}
<a id="L136"></a><span class="ln">   136</span>	
<a id="L137"></a><span class="ln">   137</span>	<span class="comment">// Rotate</span>
<a id="L138"></a><span class="ln">   138</span>	func rotw(w uint32) uint32 { return w&lt;&lt;8 | w&gt;&gt;24 }
<a id="L139"></a><span class="ln">   139</span>	
<a id="L140"></a><span class="ln">   140</span>	<span class="comment">// Key expansion algorithm.  See FIPS-197, Figure 11.</span>
<a id="L141"></a><span class="ln">   141</span>	<span class="comment">// Their rcon[i] is our powx[i-1] &lt;&lt; 24.</span>
<a id="L142"></a><span class="ln">   142</span>	func expandKey(key []byte, enc, dec []uint32) {
<a id="L143"></a><span class="ln">   143</span>		<span class="comment">// Encryption key setup.</span>
<a id="L144"></a><span class="ln">   144</span>		var i int
<a id="L145"></a><span class="ln">   145</span>		nk := len(key) / 4
<a id="L146"></a><span class="ln">   146</span>		for i = 0; i &lt; nk; i++ {
<a id="L147"></a><span class="ln">   147</span>			enc[i] = uint32(key[4*i])&lt;&lt;24 | uint32(key[4*i+1])&lt;&lt;16 | uint32(key[4*i+2])&lt;&lt;8 | uint32(key[4*i+3])
<a id="L148"></a><span class="ln">   148</span>		}
<a id="L149"></a><span class="ln">   149</span>		for ; i &lt; len(enc); i++ {
<a id="L150"></a><span class="ln">   150</span>			t := enc[i-1]
<a id="L151"></a><span class="ln">   151</span>			if i%nk == 0 {
<a id="L152"></a><span class="ln">   152</span>				t = subw(rotw(t)) ^ (uint32(powx[i/nk-1]) &lt;&lt; 24)
<a id="L153"></a><span class="ln">   153</span>			} else if nk &gt; 6 &amp;&amp; i%nk == 4 {
<a id="L154"></a><span class="ln">   154</span>				t = subw(t)
<a id="L155"></a><span class="ln">   155</span>			}
<a id="L156"></a><span class="ln">   156</span>			enc[i] = enc[i-nk] ^ t
<a id="L157"></a><span class="ln">   157</span>		}
<a id="L158"></a><span class="ln">   158</span>	
<a id="L159"></a><span class="ln">   159</span>		<span class="comment">// Derive decryption key from encryption key.</span>
<a id="L160"></a><span class="ln">   160</span>		<span class="comment">// Reverse the 4-word round key sets from enc to produce dec.</span>
<a id="L161"></a><span class="ln">   161</span>		<span class="comment">// All sets but the first and last get the MixColumn transform applied.</span>
<a id="L162"></a><span class="ln">   162</span>		if dec == nil {
<a id="L163"></a><span class="ln">   163</span>			return
<a id="L164"></a><span class="ln">   164</span>		}
<a id="L165"></a><span class="ln">   165</span>		n := len(enc)
<a id="L166"></a><span class="ln">   166</span>		for i := 0; i &lt; n; i += 4 {
<a id="L167"></a><span class="ln">   167</span>			ei := n - i - 4
<a id="L168"></a><span class="ln">   168</span>			for j := 0; j &lt; 4; j++ {
<a id="L169"></a><span class="ln">   169</span>				x := enc[ei+j]
<a id="L170"></a><span class="ln">   170</span>				if i &gt; 0 &amp;&amp; i+4 &lt; n {
<a id="L171"></a><span class="ln">   171</span>					x = td0[sbox0[x&gt;&gt;24]] ^ td1[sbox0[x&gt;&gt;16&amp;0xff]] ^ td2[sbox0[x&gt;&gt;8&amp;0xff]] ^ td3[sbox0[x&amp;0xff]]
<a id="L172"></a><span class="ln">   172</span>				}
<a id="L173"></a><span class="ln">   173</span>				dec[i+j] = x
<a id="L174"></a><span class="ln">   174</span>			}
<a id="L175"></a><span class="ln">   175</span>		}
<a id="L176"></a><span class="ln">   176</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

