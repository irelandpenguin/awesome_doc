<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/crypto/dsa/dsa.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/crypto/dsa/dsa.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package dsa implements the Digital Signature Algorithm, as defined in FIPS 186-3.</span>
<a id="L6"></a><span class="ln">     6</span>	package dsa
<a id="L7"></a><span class="ln">     7</span>	
<a id="L8"></a><span class="ln">     8</span>	import (
<a id="L9"></a><span class="ln">     9</span>		&#34;errors&#34;
<a id="L10"></a><span class="ln">    10</span>		&#34;io&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;math/big&#34;
<a id="L12"></a><span class="ln">    12</span>	)
<a id="L13"></a><span class="ln">    13</span>	
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// Parameters represents the domain parameters for a key. These parameters can</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// be shared across many keys. The bit length of Q must be a multiple of 8.</span>
<a id="L16"></a><span class="ln">    16</span>	type Parameters struct {
<a id="L17"></a><span class="ln">    17</span>		P, Q, G *big.Int
<a id="L18"></a><span class="ln">    18</span>	}
<a id="L19"></a><span class="ln">    19</span>	
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// PublicKey represents a DSA public key.</span>
<a id="L21"></a><span class="ln">    21</span>	type PublicKey struct {
<a id="L22"></a><span class="ln">    22</span>		Parameters
<a id="L23"></a><span class="ln">    23</span>		Y *big.Int
<a id="L24"></a><span class="ln">    24</span>	}
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// PrivateKey represents a DSA private key.</span>
<a id="L27"></a><span class="ln">    27</span>	type PrivateKey struct {
<a id="L28"></a><span class="ln">    28</span>		PublicKey
<a id="L29"></a><span class="ln">    29</span>		X *big.Int
<a id="L30"></a><span class="ln">    30</span>	}
<a id="L31"></a><span class="ln">    31</span>	
<a id="L32"></a><span class="ln">    32</span>	<span class="comment">// ErrInvalidPublicKey results when a public key is not usable by this code.</span>
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// FIPS is quite strict about the format of DSA keys, but other code may be</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// less so. Thus, when using keys which may have been generated by other code,</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// this error must be handled.</span>
<a id="L36"></a><span class="ln">    36</span>	var ErrInvalidPublicKey = errors.New(&#34;crypto/dsa: invalid public key&#34;)
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// ParameterSizes is a enumeration of the acceptable bit lengths of the primes</span>
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// in a set of DSA parameters. See FIPS 186-3, section 4.2.</span>
<a id="L40"></a><span class="ln">    40</span>	type ParameterSizes int
<a id="L41"></a><span class="ln">    41</span>	
<a id="L42"></a><span class="ln">    42</span>	const (
<a id="L43"></a><span class="ln">    43</span>		L1024N160 ParameterSizes = iota
<a id="L44"></a><span class="ln">    44</span>		L2048N224
<a id="L45"></a><span class="ln">    45</span>		L2048N256
<a id="L46"></a><span class="ln">    46</span>		L3072N256
<a id="L47"></a><span class="ln">    47</span>	)
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">// numMRTests is the number of Miller-Rabin primality tests that we perform. We</span>
<a id="L50"></a><span class="ln">    50</span>	<span class="comment">// pick the largest recommended number from table C.1 of FIPS 186-3.</span>
<a id="L51"></a><span class="ln">    51</span>	const numMRTests = 64
<a id="L52"></a><span class="ln">    52</span>	
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">// GenerateParameters puts a random, valid set of DSA parameters into params.</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">// This function takes many seconds, even on fast machines.</span>
<a id="L55"></a><span class="ln">    55</span>	func GenerateParameters(params *Parameters, rand io.Reader, sizes ParameterSizes) (err error) {
<a id="L56"></a><span class="ln">    56</span>		<span class="comment">// This function doesn&#39;t follow FIPS 186-3 exactly in that it doesn&#39;t</span>
<a id="L57"></a><span class="ln">    57</span>		<span class="comment">// use a verification seed to generate the primes. The verification</span>
<a id="L58"></a><span class="ln">    58</span>		<span class="comment">// seed doesn&#39;t appear to be exported or used by other code and</span>
<a id="L59"></a><span class="ln">    59</span>		<span class="comment">// omitting it makes the code cleaner.</span>
<a id="L60"></a><span class="ln">    60</span>	
<a id="L61"></a><span class="ln">    61</span>		var L, N int
<a id="L62"></a><span class="ln">    62</span>		switch sizes {
<a id="L63"></a><span class="ln">    63</span>		case L1024N160:
<a id="L64"></a><span class="ln">    64</span>			L = 1024
<a id="L65"></a><span class="ln">    65</span>			N = 160
<a id="L66"></a><span class="ln">    66</span>		case L2048N224:
<a id="L67"></a><span class="ln">    67</span>			L = 2048
<a id="L68"></a><span class="ln">    68</span>			N = 224
<a id="L69"></a><span class="ln">    69</span>		case L2048N256:
<a id="L70"></a><span class="ln">    70</span>			L = 2048
<a id="L71"></a><span class="ln">    71</span>			N = 256
<a id="L72"></a><span class="ln">    72</span>		case L3072N256:
<a id="L73"></a><span class="ln">    73</span>			L = 3072
<a id="L74"></a><span class="ln">    74</span>			N = 256
<a id="L75"></a><span class="ln">    75</span>		default:
<a id="L76"></a><span class="ln">    76</span>			return errors.New(&#34;crypto/dsa: invalid ParameterSizes&#34;)
<a id="L77"></a><span class="ln">    77</span>		}
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>		qBytes := make([]byte, N/8)
<a id="L80"></a><span class="ln">    80</span>		pBytes := make([]byte, L/8)
<a id="L81"></a><span class="ln">    81</span>	
<a id="L82"></a><span class="ln">    82</span>		q := new(big.Int)
<a id="L83"></a><span class="ln">    83</span>		p := new(big.Int)
<a id="L84"></a><span class="ln">    84</span>		rem := new(big.Int)
<a id="L85"></a><span class="ln">    85</span>		one := new(big.Int)
<a id="L86"></a><span class="ln">    86</span>		one.SetInt64(1)
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>	GeneratePrimes:
<a id="L89"></a><span class="ln">    89</span>		for {
<a id="L90"></a><span class="ln">    90</span>			_, err = io.ReadFull(rand, qBytes)
<a id="L91"></a><span class="ln">    91</span>			if err != nil {
<a id="L92"></a><span class="ln">    92</span>				return
<a id="L93"></a><span class="ln">    93</span>			}
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>			qBytes[len(qBytes)-1] |= 1
<a id="L96"></a><span class="ln">    96</span>			qBytes[0] |= 0x80
<a id="L97"></a><span class="ln">    97</span>			q.SetBytes(qBytes)
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>			if !q.ProbablyPrime(numMRTests) {
<a id="L100"></a><span class="ln">   100</span>				continue
<a id="L101"></a><span class="ln">   101</span>			}
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>			for i := 0; i &lt; 4*L; i++ {
<a id="L104"></a><span class="ln">   104</span>				_, err = io.ReadFull(rand, pBytes)
<a id="L105"></a><span class="ln">   105</span>				if err != nil {
<a id="L106"></a><span class="ln">   106</span>					return
<a id="L107"></a><span class="ln">   107</span>				}
<a id="L108"></a><span class="ln">   108</span>	
<a id="L109"></a><span class="ln">   109</span>				pBytes[len(pBytes)-1] |= 1
<a id="L110"></a><span class="ln">   110</span>				pBytes[0] |= 0x80
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>				p.SetBytes(pBytes)
<a id="L113"></a><span class="ln">   113</span>				rem.Mod(p, q)
<a id="L114"></a><span class="ln">   114</span>				rem.Sub(rem, one)
<a id="L115"></a><span class="ln">   115</span>				p.Sub(p, rem)
<a id="L116"></a><span class="ln">   116</span>				if p.BitLen() &lt; L {
<a id="L117"></a><span class="ln">   117</span>					continue
<a id="L118"></a><span class="ln">   118</span>				}
<a id="L119"></a><span class="ln">   119</span>	
<a id="L120"></a><span class="ln">   120</span>				if !p.ProbablyPrime(numMRTests) {
<a id="L121"></a><span class="ln">   121</span>					continue
<a id="L122"></a><span class="ln">   122</span>				}
<a id="L123"></a><span class="ln">   123</span>	
<a id="L124"></a><span class="ln">   124</span>				params.P = p
<a id="L125"></a><span class="ln">   125</span>				params.Q = q
<a id="L126"></a><span class="ln">   126</span>				break GeneratePrimes
<a id="L127"></a><span class="ln">   127</span>			}
<a id="L128"></a><span class="ln">   128</span>		}
<a id="L129"></a><span class="ln">   129</span>	
<a id="L130"></a><span class="ln">   130</span>		h := new(big.Int)
<a id="L131"></a><span class="ln">   131</span>		h.SetInt64(2)
<a id="L132"></a><span class="ln">   132</span>		g := new(big.Int)
<a id="L133"></a><span class="ln">   133</span>	
<a id="L134"></a><span class="ln">   134</span>		pm1 := new(big.Int).Sub(p, one)
<a id="L135"></a><span class="ln">   135</span>		e := new(big.Int).Div(pm1, q)
<a id="L136"></a><span class="ln">   136</span>	
<a id="L137"></a><span class="ln">   137</span>		for {
<a id="L138"></a><span class="ln">   138</span>			g.Exp(h, e, p)
<a id="L139"></a><span class="ln">   139</span>			if g.Cmp(one) == 0 {
<a id="L140"></a><span class="ln">   140</span>				h.Add(h, one)
<a id="L141"></a><span class="ln">   141</span>				continue
<a id="L142"></a><span class="ln">   142</span>			}
<a id="L143"></a><span class="ln">   143</span>	
<a id="L144"></a><span class="ln">   144</span>			params.G = g
<a id="L145"></a><span class="ln">   145</span>			return
<a id="L146"></a><span class="ln">   146</span>		}
<a id="L147"></a><span class="ln">   147</span>	
<a id="L148"></a><span class="ln">   148</span>		panic(&#34;unreachable&#34;)
<a id="L149"></a><span class="ln">   149</span>	}
<a id="L150"></a><span class="ln">   150</span>	
<a id="L151"></a><span class="ln">   151</span>	<span class="comment">// GenerateKey generates a public&amp;private key pair. The Parameters of the</span>
<a id="L152"></a><span class="ln">   152</span>	<span class="comment">// PrivateKey must already be valid (see GenerateParameters).</span>
<a id="L153"></a><span class="ln">   153</span>	func GenerateKey(priv *PrivateKey, rand io.Reader) error {
<a id="L154"></a><span class="ln">   154</span>		if priv.P == nil || priv.Q == nil || priv.G == nil {
<a id="L155"></a><span class="ln">   155</span>			return errors.New(&#34;crypto/dsa: parameters not set up before generating key&#34;)
<a id="L156"></a><span class="ln">   156</span>		}
<a id="L157"></a><span class="ln">   157</span>	
<a id="L158"></a><span class="ln">   158</span>		x := new(big.Int)
<a id="L159"></a><span class="ln">   159</span>		xBytes := make([]byte, priv.Q.BitLen()/8)
<a id="L160"></a><span class="ln">   160</span>	
<a id="L161"></a><span class="ln">   161</span>		for {
<a id="L162"></a><span class="ln">   162</span>			_, err := io.ReadFull(rand, xBytes)
<a id="L163"></a><span class="ln">   163</span>			if err != nil {
<a id="L164"></a><span class="ln">   164</span>				return err
<a id="L165"></a><span class="ln">   165</span>			}
<a id="L166"></a><span class="ln">   166</span>			x.SetBytes(xBytes)
<a id="L167"></a><span class="ln">   167</span>			if x.Sign() != 0 &amp;&amp; x.Cmp(priv.Q) &lt; 0 {
<a id="L168"></a><span class="ln">   168</span>				break
<a id="L169"></a><span class="ln">   169</span>			}
<a id="L170"></a><span class="ln">   170</span>		}
<a id="L171"></a><span class="ln">   171</span>	
<a id="L172"></a><span class="ln">   172</span>		priv.X = x
<a id="L173"></a><span class="ln">   173</span>		priv.Y = new(big.Int)
<a id="L174"></a><span class="ln">   174</span>		priv.Y.Exp(priv.G, x, priv.P)
<a id="L175"></a><span class="ln">   175</span>		return nil
<a id="L176"></a><span class="ln">   176</span>	}
<a id="L177"></a><span class="ln">   177</span>	
<a id="L178"></a><span class="ln">   178</span>	<span class="comment">// Sign signs an arbitrary length hash (which should be the result of hashing a</span>
<a id="L179"></a><span class="ln">   179</span>	<span class="comment">// larger message) using the private key, priv. It returns the signature as a</span>
<a id="L180"></a><span class="ln">   180</span>	<span class="comment">// pair of integers. The security of the private key depends on the entropy of</span>
<a id="L181"></a><span class="ln">   181</span>	<span class="comment">// rand.</span>
<a id="L182"></a><span class="ln">   182</span>	<span class="comment">//</span>
<a id="L183"></a><span class="ln">   183</span>	<span class="comment">// Note that FIPS 186-3 section 4.6 specifies that the hash should be truncated</span>
<a id="L184"></a><span class="ln">   184</span>	<span class="comment">// to the byte-length of the subgroup. This function does not perform that</span>
<a id="L185"></a><span class="ln">   185</span>	<span class="comment">// truncation itself.</span>
<a id="L186"></a><span class="ln">   186</span>	func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err error) {
<a id="L187"></a><span class="ln">   187</span>		<span class="comment">// FIPS 186-3, section 4.6</span>
<a id="L188"></a><span class="ln">   188</span>	
<a id="L189"></a><span class="ln">   189</span>		n := priv.Q.BitLen()
<a id="L190"></a><span class="ln">   190</span>		if n&amp;7 != 0 {
<a id="L191"></a><span class="ln">   191</span>			err = ErrInvalidPublicKey
<a id="L192"></a><span class="ln">   192</span>			return
<a id="L193"></a><span class="ln">   193</span>		}
<a id="L194"></a><span class="ln">   194</span>		n &gt;&gt;= 3
<a id="L195"></a><span class="ln">   195</span>	
<a id="L196"></a><span class="ln">   196</span>		for {
<a id="L197"></a><span class="ln">   197</span>			k := new(big.Int)
<a id="L198"></a><span class="ln">   198</span>			buf := make([]byte, n)
<a id="L199"></a><span class="ln">   199</span>			for {
<a id="L200"></a><span class="ln">   200</span>				_, err = io.ReadFull(rand, buf)
<a id="L201"></a><span class="ln">   201</span>				if err != nil {
<a id="L202"></a><span class="ln">   202</span>					return
<a id="L203"></a><span class="ln">   203</span>				}
<a id="L204"></a><span class="ln">   204</span>				k.SetBytes(buf)
<a id="L205"></a><span class="ln">   205</span>				if k.Sign() &gt; 0 &amp;&amp; k.Cmp(priv.Q) &lt; 0 {
<a id="L206"></a><span class="ln">   206</span>					break
<a id="L207"></a><span class="ln">   207</span>				}
<a id="L208"></a><span class="ln">   208</span>			}
<a id="L209"></a><span class="ln">   209</span>	
<a id="L210"></a><span class="ln">   210</span>			kInv := new(big.Int).ModInverse(k, priv.Q)
<a id="L211"></a><span class="ln">   211</span>	
<a id="L212"></a><span class="ln">   212</span>			r = new(big.Int).Exp(priv.G, k, priv.P)
<a id="L213"></a><span class="ln">   213</span>			r.Mod(r, priv.Q)
<a id="L214"></a><span class="ln">   214</span>	
<a id="L215"></a><span class="ln">   215</span>			if r.Sign() == 0 {
<a id="L216"></a><span class="ln">   216</span>				continue
<a id="L217"></a><span class="ln">   217</span>			}
<a id="L218"></a><span class="ln">   218</span>	
<a id="L219"></a><span class="ln">   219</span>			z := k.SetBytes(hash)
<a id="L220"></a><span class="ln">   220</span>	
<a id="L221"></a><span class="ln">   221</span>			s = new(big.Int).Mul(priv.X, r)
<a id="L222"></a><span class="ln">   222</span>			s.Add(s, z)
<a id="L223"></a><span class="ln">   223</span>			s.Mod(s, priv.Q)
<a id="L224"></a><span class="ln">   224</span>			s.Mul(s, kInv)
<a id="L225"></a><span class="ln">   225</span>			s.Mod(s, priv.Q)
<a id="L226"></a><span class="ln">   226</span>	
<a id="L227"></a><span class="ln">   227</span>			if s.Sign() != 0 {
<a id="L228"></a><span class="ln">   228</span>				break
<a id="L229"></a><span class="ln">   229</span>			}
<a id="L230"></a><span class="ln">   230</span>		}
<a id="L231"></a><span class="ln">   231</span>	
<a id="L232"></a><span class="ln">   232</span>		return
<a id="L233"></a><span class="ln">   233</span>	}
<a id="L234"></a><span class="ln">   234</span>	
<a id="L235"></a><span class="ln">   235</span>	<span class="comment">// Verify verifies the signature in r, s of hash using the public key, pub. It</span>
<a id="L236"></a><span class="ln">   236</span>	<span class="comment">// reports whether the signature is valid.</span>
<a id="L237"></a><span class="ln">   237</span>	<span class="comment">//</span>
<a id="L238"></a><span class="ln">   238</span>	<span class="comment">// Note that FIPS 186-3 section 4.6 specifies that the hash should be truncated</span>
<a id="L239"></a><span class="ln">   239</span>	<span class="comment">// to the byte-length of the subgroup. This function does not perform that</span>
<a id="L240"></a><span class="ln">   240</span>	<span class="comment">// truncation itself.</span>
<a id="L241"></a><span class="ln">   241</span>	func Verify(pub *PublicKey, hash []byte, r, s *big.Int) bool {
<a id="L242"></a><span class="ln">   242</span>		<span class="comment">// FIPS 186-3, section 4.7</span>
<a id="L243"></a><span class="ln">   243</span>	
<a id="L244"></a><span class="ln">   244</span>		if r.Sign() &lt; 1 || r.Cmp(pub.Q) &gt;= 0 {
<a id="L245"></a><span class="ln">   245</span>			return false
<a id="L246"></a><span class="ln">   246</span>		}
<a id="L247"></a><span class="ln">   247</span>		if s.Sign() &lt; 1 || s.Cmp(pub.Q) &gt;= 0 {
<a id="L248"></a><span class="ln">   248</span>			return false
<a id="L249"></a><span class="ln">   249</span>		}
<a id="L250"></a><span class="ln">   250</span>	
<a id="L251"></a><span class="ln">   251</span>		w := new(big.Int).ModInverse(s, pub.Q)
<a id="L252"></a><span class="ln">   252</span>	
<a id="L253"></a><span class="ln">   253</span>		n := pub.Q.BitLen()
<a id="L254"></a><span class="ln">   254</span>		if n&amp;7 != 0 {
<a id="L255"></a><span class="ln">   255</span>			return false
<a id="L256"></a><span class="ln">   256</span>		}
<a id="L257"></a><span class="ln">   257</span>		z := new(big.Int).SetBytes(hash)
<a id="L258"></a><span class="ln">   258</span>	
<a id="L259"></a><span class="ln">   259</span>		u1 := new(big.Int).Mul(z, w)
<a id="L260"></a><span class="ln">   260</span>		u1.Mod(u1, pub.Q)
<a id="L261"></a><span class="ln">   261</span>		u2 := w.Mul(r, w)
<a id="L262"></a><span class="ln">   262</span>		u2.Mod(u2, pub.Q)
<a id="L263"></a><span class="ln">   263</span>		v := u1.Exp(pub.G, u1, pub.P)
<a id="L264"></a><span class="ln">   264</span>		u2.Exp(pub.Y, u2, pub.P)
<a id="L265"></a><span class="ln">   265</span>		v.Mul(v, u2)
<a id="L266"></a><span class="ln">   266</span>		v.Mod(v, pub.P)
<a id="L267"></a><span class="ln">   267</span>		v.Mod(v, pub.Q)
<a id="L268"></a><span class="ln">   268</span>	
<a id="L269"></a><span class="ln">   269</span>		return v.Cmp(r) == 0
<a id="L270"></a><span class="ln">   270</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

