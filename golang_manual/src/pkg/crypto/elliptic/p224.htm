<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/crypto/elliptic/p224.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/crypto/elliptic/p224.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2012 The Go Authors.  All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package elliptic
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// This is a constant-time, 32-bit implementation of P224. See FIPS 186-3,</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// section D.2.2.</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">//</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// See http://www.imperialviolet.org/2010/12/04/ecc.html ([1]) for background.</span>
<a id="L11"></a><span class="ln">    11</span>	
<a id="L12"></a><span class="ln">    12</span>	import (
<a id="L13"></a><span class="ln">    13</span>		&#34;math/big&#34;
<a id="L14"></a><span class="ln">    14</span>	)
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>	var p224 p224Curve
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	type p224Curve struct {
<a id="L19"></a><span class="ln">    19</span>		*CurveParams
<a id="L20"></a><span class="ln">    20</span>		gx, gy, b p224FieldElement
<a id="L21"></a><span class="ln">    21</span>	}
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	func initP224() {
<a id="L24"></a><span class="ln">    24</span>		<span class="comment">// See FIPS 186-3, section D.2.2</span>
<a id="L25"></a><span class="ln">    25</span>		p224.CurveParams = new(CurveParams)
<a id="L26"></a><span class="ln">    26</span>		p224.P, _ = new(big.Int).SetString(&#34;26959946667150639794667015087019630673557916260026308143510066298881&#34;, 10)
<a id="L27"></a><span class="ln">    27</span>		p224.N, _ = new(big.Int).SetString(&#34;26959946667150639794667015087019625940457807714424391721682722368061&#34;, 10)
<a id="L28"></a><span class="ln">    28</span>		p224.B, _ = new(big.Int).SetString(&#34;b4050a850c04b3abf54132565044b0b7d7bfd8ba270b39432355ffb4&#34;, 16)
<a id="L29"></a><span class="ln">    29</span>		p224.Gx, _ = new(big.Int).SetString(&#34;b70e0cbd6bb4bf7f321390b94a03c1d356c21122343280d6115c1d21&#34;, 16)
<a id="L30"></a><span class="ln">    30</span>		p224.Gy, _ = new(big.Int).SetString(&#34;bd376388b5f723fb4c22dfe6cd4375a05a07476444d5819985007e34&#34;, 16)
<a id="L31"></a><span class="ln">    31</span>		p224.BitSize = 224
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>		p224FromBig(&amp;p224.gx, p224.Gx)
<a id="L34"></a><span class="ln">    34</span>		p224FromBig(&amp;p224.gy, p224.Gy)
<a id="L35"></a><span class="ln">    35</span>		p224FromBig(&amp;p224.b, p224.B)
<a id="L36"></a><span class="ln">    36</span>	}
<a id="L37"></a><span class="ln">    37</span>	
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">// P224 returns a Curve which implements P-224 (see FIPS 186-3, section D.2.2)</span>
<a id="L39"></a><span class="ln">    39</span>	func P224() Curve {
<a id="L40"></a><span class="ln">    40</span>		initonce.Do(initAll)
<a id="L41"></a><span class="ln">    41</span>		return p224
<a id="L42"></a><span class="ln">    42</span>	}
<a id="L43"></a><span class="ln">    43</span>	
<a id="L44"></a><span class="ln">    44</span>	func (curve p224Curve) Params() *CurveParams {
<a id="L45"></a><span class="ln">    45</span>		return curve.CurveParams
<a id="L46"></a><span class="ln">    46</span>	}
<a id="L47"></a><span class="ln">    47</span>	
<a id="L48"></a><span class="ln">    48</span>	func (curve p224Curve) IsOnCurve(bigX, bigY *big.Int) bool {
<a id="L49"></a><span class="ln">    49</span>		var x, y p224FieldElement
<a id="L50"></a><span class="ln">    50</span>		p224FromBig(&amp;x, bigX)
<a id="L51"></a><span class="ln">    51</span>		p224FromBig(&amp;y, bigY)
<a id="L52"></a><span class="ln">    52</span>	
<a id="L53"></a><span class="ln">    53</span>		<span class="comment">// y² = x³ - 3x + b</span>
<a id="L54"></a><span class="ln">    54</span>		var tmp p224LargeFieldElement
<a id="L55"></a><span class="ln">    55</span>		var x3 p224FieldElement
<a id="L56"></a><span class="ln">    56</span>		p224Square(&amp;x3, &amp;x, &amp;tmp)
<a id="L57"></a><span class="ln">    57</span>		p224Mul(&amp;x3, &amp;x3, &amp;x, &amp;tmp)
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>		for i := 0; i &lt; 8; i++ {
<a id="L60"></a><span class="ln">    60</span>			x[i] *= 3
<a id="L61"></a><span class="ln">    61</span>		}
<a id="L62"></a><span class="ln">    62</span>		p224Sub(&amp;x3, &amp;x3, &amp;x)
<a id="L63"></a><span class="ln">    63</span>		p224Reduce(&amp;x3)
<a id="L64"></a><span class="ln">    64</span>		p224Add(&amp;x3, &amp;x3, &amp;curve.b)
<a id="L65"></a><span class="ln">    65</span>		p224Contract(&amp;x3, &amp;x3)
<a id="L66"></a><span class="ln">    66</span>	
<a id="L67"></a><span class="ln">    67</span>		p224Square(&amp;y, &amp;y, &amp;tmp)
<a id="L68"></a><span class="ln">    68</span>		p224Contract(&amp;y, &amp;y)
<a id="L69"></a><span class="ln">    69</span>	
<a id="L70"></a><span class="ln">    70</span>		for i := 0; i &lt; 8; i++ {
<a id="L71"></a><span class="ln">    71</span>			if y[i] != x3[i] {
<a id="L72"></a><span class="ln">    72</span>				return false
<a id="L73"></a><span class="ln">    73</span>			}
<a id="L74"></a><span class="ln">    74</span>		}
<a id="L75"></a><span class="ln">    75</span>		return true
<a id="L76"></a><span class="ln">    76</span>	}
<a id="L77"></a><span class="ln">    77</span>	
<a id="L78"></a><span class="ln">    78</span>	func (p224Curve) Add(bigX1, bigY1, bigX2, bigY2 *big.Int) (x, y *big.Int) {
<a id="L79"></a><span class="ln">    79</span>		var x1, y1, z1, x2, y2, z2, x3, y3, z3 p224FieldElement
<a id="L80"></a><span class="ln">    80</span>	
<a id="L81"></a><span class="ln">    81</span>		p224FromBig(&amp;x1, bigX1)
<a id="L82"></a><span class="ln">    82</span>		p224FromBig(&amp;y1, bigY1)
<a id="L83"></a><span class="ln">    83</span>		z1[0] = 1
<a id="L84"></a><span class="ln">    84</span>		p224FromBig(&amp;x2, bigX2)
<a id="L85"></a><span class="ln">    85</span>		p224FromBig(&amp;y2, bigY2)
<a id="L86"></a><span class="ln">    86</span>		z2[0] = 1
<a id="L87"></a><span class="ln">    87</span>	
<a id="L88"></a><span class="ln">    88</span>		p224AddJacobian(&amp;x3, &amp;y3, &amp;z3, &amp;x1, &amp;y1, &amp;z1, &amp;x2, &amp;y2, &amp;z2)
<a id="L89"></a><span class="ln">    89</span>		return p224ToAffine(&amp;x3, &amp;y3, &amp;z3)
<a id="L90"></a><span class="ln">    90</span>	}
<a id="L91"></a><span class="ln">    91</span>	
<a id="L92"></a><span class="ln">    92</span>	func (p224Curve) Double(bigX1, bigY1 *big.Int) (x, y *big.Int) {
<a id="L93"></a><span class="ln">    93</span>		var x1, y1, z1, x2, y2, z2 p224FieldElement
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>		p224FromBig(&amp;x1, bigX1)
<a id="L96"></a><span class="ln">    96</span>		p224FromBig(&amp;y1, bigY1)
<a id="L97"></a><span class="ln">    97</span>		z1[0] = 1
<a id="L98"></a><span class="ln">    98</span>	
<a id="L99"></a><span class="ln">    99</span>		p224DoubleJacobian(&amp;x2, &amp;y2, &amp;z2, &amp;x1, &amp;y1, &amp;z1)
<a id="L100"></a><span class="ln">   100</span>		return p224ToAffine(&amp;x2, &amp;y2, &amp;z2)
<a id="L101"></a><span class="ln">   101</span>	}
<a id="L102"></a><span class="ln">   102</span>	
<a id="L103"></a><span class="ln">   103</span>	func (p224Curve) ScalarMult(bigX1, bigY1 *big.Int, scalar []byte) (x, y *big.Int) {
<a id="L104"></a><span class="ln">   104</span>		var x1, y1, z1, x2, y2, z2 p224FieldElement
<a id="L105"></a><span class="ln">   105</span>	
<a id="L106"></a><span class="ln">   106</span>		p224FromBig(&amp;x1, bigX1)
<a id="L107"></a><span class="ln">   107</span>		p224FromBig(&amp;y1, bigY1)
<a id="L108"></a><span class="ln">   108</span>		z1[0] = 1
<a id="L109"></a><span class="ln">   109</span>	
<a id="L110"></a><span class="ln">   110</span>		p224ScalarMult(&amp;x2, &amp;y2, &amp;z2, &amp;x1, &amp;y1, &amp;z1, scalar)
<a id="L111"></a><span class="ln">   111</span>		return p224ToAffine(&amp;x2, &amp;y2, &amp;z2)
<a id="L112"></a><span class="ln">   112</span>	}
<a id="L113"></a><span class="ln">   113</span>	
<a id="L114"></a><span class="ln">   114</span>	func (curve p224Curve) ScalarBaseMult(scalar []byte) (x, y *big.Int) {
<a id="L115"></a><span class="ln">   115</span>		var z1, x2, y2, z2 p224FieldElement
<a id="L116"></a><span class="ln">   116</span>	
<a id="L117"></a><span class="ln">   117</span>		z1[0] = 1
<a id="L118"></a><span class="ln">   118</span>		p224ScalarMult(&amp;x2, &amp;y2, &amp;z2, &amp;curve.gx, &amp;curve.gy, &amp;z1, scalar)
<a id="L119"></a><span class="ln">   119</span>		return p224ToAffine(&amp;x2, &amp;y2, &amp;z2)
<a id="L120"></a><span class="ln">   120</span>	}
<a id="L121"></a><span class="ln">   121</span>	
<a id="L122"></a><span class="ln">   122</span>	<span class="comment">// Field element functions.</span>
<a id="L123"></a><span class="ln">   123</span>	<span class="comment">//</span>
<a id="L124"></a><span class="ln">   124</span>	<span class="comment">// The field that we&#39;re dealing with is ℤ/pℤ where p = 2**224 - 2**96 + 1.</span>
<a id="L125"></a><span class="ln">   125</span>	<span class="comment">//</span>
<a id="L126"></a><span class="ln">   126</span>	<span class="comment">// Field elements are represented by a FieldElement, which is a typedef to an</span>
<a id="L127"></a><span class="ln">   127</span>	<span class="comment">// array of 8 uint32&#39;s. The value of a FieldElement, a, is:</span>
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">//   a[0] + 2**28·a[1] + 2**56·a[1] + ... + 2**196·a[7]</span>
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">//</span>
<a id="L130"></a><span class="ln">   130</span>	<span class="comment">// Using 28-bit limbs means that there&#39;s only 4 bits of headroom, which is less</span>
<a id="L131"></a><span class="ln">   131</span>	<span class="comment">// than we would really like. But it has the useful feature that we hit 2**224</span>
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">// exactly, making the reflections during a reduce much nicer.</span>
<a id="L133"></a><span class="ln">   133</span>	type p224FieldElement [8]uint32
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>	<span class="comment">// p224Add computes *out = a+b</span>
<a id="L136"></a><span class="ln">   136</span>	<span class="comment">//</span>
<a id="L137"></a><span class="ln">   137</span>	<span class="comment">// a[i] + b[i] &lt; 2**32</span>
<a id="L138"></a><span class="ln">   138</span>	func p224Add(out, a, b *p224FieldElement) {
<a id="L139"></a><span class="ln">   139</span>		for i := 0; i &lt; 8; i++ {
<a id="L140"></a><span class="ln">   140</span>			out[i] = a[i] + b[i]
<a id="L141"></a><span class="ln">   141</span>		}
<a id="L142"></a><span class="ln">   142</span>	}
<a id="L143"></a><span class="ln">   143</span>	
<a id="L144"></a><span class="ln">   144</span>	const two31p3 = 1&lt;&lt;31 + 1&lt;&lt;3
<a id="L145"></a><span class="ln">   145</span>	const two31m3 = 1&lt;&lt;31 - 1&lt;&lt;3
<a id="L146"></a><span class="ln">   146</span>	const two31m15m3 = 1&lt;&lt;31 - 1&lt;&lt;15 - 1&lt;&lt;3
<a id="L147"></a><span class="ln">   147</span>	
<a id="L148"></a><span class="ln">   148</span>	<span class="comment">// p224ZeroModP31 is 0 mod p where bit 31 is set in all limbs so that we can</span>
<a id="L149"></a><span class="ln">   149</span>	<span class="comment">// subtract smaller amounts without underflow. See the section &#34;Subtraction&#34; in</span>
<a id="L150"></a><span class="ln">   150</span>	<span class="comment">// [1] for reasoning.</span>
<a id="L151"></a><span class="ln">   151</span>	var p224ZeroModP31 = []uint32{two31p3, two31m3, two31m3, two31m15m3, two31m3, two31m3, two31m3, two31m3}
<a id="L152"></a><span class="ln">   152</span>	
<a id="L153"></a><span class="ln">   153</span>	<span class="comment">// p224Sub computes *out = a-b</span>
<a id="L154"></a><span class="ln">   154</span>	<span class="comment">//</span>
<a id="L155"></a><span class="ln">   155</span>	<span class="comment">// a[i], b[i] &lt; 2**30</span>
<a id="L156"></a><span class="ln">   156</span>	<span class="comment">// out[i] &lt; 2**32</span>
<a id="L157"></a><span class="ln">   157</span>	func p224Sub(out, a, b *p224FieldElement) {
<a id="L158"></a><span class="ln">   158</span>		for i := 0; i &lt; 8; i++ {
<a id="L159"></a><span class="ln">   159</span>			out[i] = a[i] + p224ZeroModP31[i] - b[i]
<a id="L160"></a><span class="ln">   160</span>		}
<a id="L161"></a><span class="ln">   161</span>	}
<a id="L162"></a><span class="ln">   162</span>	
<a id="L163"></a><span class="ln">   163</span>	<span class="comment">// LargeFieldElement also represents an element of the field. The limbs are</span>
<a id="L164"></a><span class="ln">   164</span>	<span class="comment">// still spaced 28-bits apart and in little-endian order. So the limbs are at</span>
<a id="L165"></a><span class="ln">   165</span>	<span class="comment">// 0, 28, 56, ..., 392 bits, each 64-bits wide.</span>
<a id="L166"></a><span class="ln">   166</span>	type p224LargeFieldElement [15]uint64
<a id="L167"></a><span class="ln">   167</span>	
<a id="L168"></a><span class="ln">   168</span>	const two63p35 = 1&lt;&lt;63 + 1&lt;&lt;35
<a id="L169"></a><span class="ln">   169</span>	const two63m35 = 1&lt;&lt;63 - 1&lt;&lt;35
<a id="L170"></a><span class="ln">   170</span>	const two63m35m19 = 1&lt;&lt;63 - 1&lt;&lt;35 - 1&lt;&lt;19
<a id="L171"></a><span class="ln">   171</span>	
<a id="L172"></a><span class="ln">   172</span>	<span class="comment">// p224ZeroModP63 is 0 mod p where bit 63 is set in all limbs. See the section</span>
<a id="L173"></a><span class="ln">   173</span>	<span class="comment">// &#34;Subtraction&#34; in [1] for why.</span>
<a id="L174"></a><span class="ln">   174</span>	var p224ZeroModP63 = [8]uint64{two63p35, two63m35, two63m35, two63m35, two63m35m19, two63m35, two63m35, two63m35}
<a id="L175"></a><span class="ln">   175</span>	
<a id="L176"></a><span class="ln">   176</span>	const bottom12Bits = 0xfff
<a id="L177"></a><span class="ln">   177</span>	const bottom28Bits = 0xfffffff
<a id="L178"></a><span class="ln">   178</span>	
<a id="L179"></a><span class="ln">   179</span>	<span class="comment">// p224Mul computes *out = a*b</span>
<a id="L180"></a><span class="ln">   180</span>	<span class="comment">//</span>
<a id="L181"></a><span class="ln">   181</span>	<span class="comment">// a[i] &lt; 2**29, b[i] &lt; 2**30 (or vice versa)</span>
<a id="L182"></a><span class="ln">   182</span>	<span class="comment">// out[i] &lt; 2**29</span>
<a id="L183"></a><span class="ln">   183</span>	func p224Mul(out, a, b *p224FieldElement, tmp *p224LargeFieldElement) {
<a id="L184"></a><span class="ln">   184</span>		for i := 0; i &lt; 15; i++ {
<a id="L185"></a><span class="ln">   185</span>			tmp[i] = 0
<a id="L186"></a><span class="ln">   186</span>		}
<a id="L187"></a><span class="ln">   187</span>	
<a id="L188"></a><span class="ln">   188</span>		for i := 0; i &lt; 8; i++ {
<a id="L189"></a><span class="ln">   189</span>			for j := 0; j &lt; 8; j++ {
<a id="L190"></a><span class="ln">   190</span>				tmp[i+j] += uint64(a[i]) * uint64(b[j])
<a id="L191"></a><span class="ln">   191</span>			}
<a id="L192"></a><span class="ln">   192</span>		}
<a id="L193"></a><span class="ln">   193</span>	
<a id="L194"></a><span class="ln">   194</span>		p224ReduceLarge(out, tmp)
<a id="L195"></a><span class="ln">   195</span>	}
<a id="L196"></a><span class="ln">   196</span>	
<a id="L197"></a><span class="ln">   197</span>	<span class="comment">// Square computes *out = a*a</span>
<a id="L198"></a><span class="ln">   198</span>	<span class="comment">//</span>
<a id="L199"></a><span class="ln">   199</span>	<span class="comment">// a[i] &lt; 2**29</span>
<a id="L200"></a><span class="ln">   200</span>	<span class="comment">// out[i] &lt; 2**29</span>
<a id="L201"></a><span class="ln">   201</span>	func p224Square(out, a *p224FieldElement, tmp *p224LargeFieldElement) {
<a id="L202"></a><span class="ln">   202</span>		for i := 0; i &lt; 15; i++ {
<a id="L203"></a><span class="ln">   203</span>			tmp[i] = 0
<a id="L204"></a><span class="ln">   204</span>		}
<a id="L205"></a><span class="ln">   205</span>	
<a id="L206"></a><span class="ln">   206</span>		for i := 0; i &lt; 8; i++ {
<a id="L207"></a><span class="ln">   207</span>			for j := 0; j &lt;= i; j++ {
<a id="L208"></a><span class="ln">   208</span>				r := uint64(a[i]) * uint64(a[j])
<a id="L209"></a><span class="ln">   209</span>				if i == j {
<a id="L210"></a><span class="ln">   210</span>					tmp[i+j] += r
<a id="L211"></a><span class="ln">   211</span>				} else {
<a id="L212"></a><span class="ln">   212</span>					tmp[i+j] += r &lt;&lt; 1
<a id="L213"></a><span class="ln">   213</span>				}
<a id="L214"></a><span class="ln">   214</span>			}
<a id="L215"></a><span class="ln">   215</span>		}
<a id="L216"></a><span class="ln">   216</span>	
<a id="L217"></a><span class="ln">   217</span>		p224ReduceLarge(out, tmp)
<a id="L218"></a><span class="ln">   218</span>	}
<a id="L219"></a><span class="ln">   219</span>	
<a id="L220"></a><span class="ln">   220</span>	<span class="comment">// ReduceLarge converts a p224LargeFieldElement to a p224FieldElement.</span>
<a id="L221"></a><span class="ln">   221</span>	<span class="comment">//</span>
<a id="L222"></a><span class="ln">   222</span>	<span class="comment">// in[i] &lt; 2**62</span>
<a id="L223"></a><span class="ln">   223</span>	func p224ReduceLarge(out *p224FieldElement, in *p224LargeFieldElement) {
<a id="L224"></a><span class="ln">   224</span>		for i := 0; i &lt; 8; i++ {
<a id="L225"></a><span class="ln">   225</span>			in[i] += p224ZeroModP63[i]
<a id="L226"></a><span class="ln">   226</span>		}
<a id="L227"></a><span class="ln">   227</span>	
<a id="L228"></a><span class="ln">   228</span>		<span class="comment">// Eliminate the coefficients at 2**224 and greater.</span>
<a id="L229"></a><span class="ln">   229</span>		for i := 14; i &gt;= 8; i-- {
<a id="L230"></a><span class="ln">   230</span>			in[i-8] -= in[i]
<a id="L231"></a><span class="ln">   231</span>			in[i-5] += (in[i] &amp; 0xffff) &lt;&lt; 12
<a id="L232"></a><span class="ln">   232</span>			in[i-4] += in[i] &gt;&gt; 16
<a id="L233"></a><span class="ln">   233</span>		}
<a id="L234"></a><span class="ln">   234</span>		in[8] = 0
<a id="L235"></a><span class="ln">   235</span>		<span class="comment">// in[0..8] &lt; 2**64</span>
<a id="L236"></a><span class="ln">   236</span>	
<a id="L237"></a><span class="ln">   237</span>		<span class="comment">// As the values become small enough, we start to store them in |out|</span>
<a id="L238"></a><span class="ln">   238</span>		<span class="comment">// and use 32-bit operations.</span>
<a id="L239"></a><span class="ln">   239</span>		for i := 1; i &lt; 8; i++ {
<a id="L240"></a><span class="ln">   240</span>			in[i+1] += in[i] &gt;&gt; 28
<a id="L241"></a><span class="ln">   241</span>			out[i] = uint32(in[i] &amp; bottom28Bits)
<a id="L242"></a><span class="ln">   242</span>		}
<a id="L243"></a><span class="ln">   243</span>		in[0] -= in[8]
<a id="L244"></a><span class="ln">   244</span>		out[3] += uint32(in[8]&amp;0xffff) &lt;&lt; 12
<a id="L245"></a><span class="ln">   245</span>		out[4] += uint32(in[8] &gt;&gt; 16)
<a id="L246"></a><span class="ln">   246</span>		<span class="comment">// in[0] &lt; 2**64</span>
<a id="L247"></a><span class="ln">   247</span>		<span class="comment">// out[3] &lt; 2**29</span>
<a id="L248"></a><span class="ln">   248</span>		<span class="comment">// out[4] &lt; 2**29</span>
<a id="L249"></a><span class="ln">   249</span>		<span class="comment">// out[1,2,5..7] &lt; 2**28</span>
<a id="L250"></a><span class="ln">   250</span>	
<a id="L251"></a><span class="ln">   251</span>		out[0] = uint32(in[0] &amp; bottom28Bits)
<a id="L252"></a><span class="ln">   252</span>		out[1] += uint32((in[0] &gt;&gt; 28) &amp; bottom28Bits)
<a id="L253"></a><span class="ln">   253</span>		out[2] += uint32(in[0] &gt;&gt; 56)
<a id="L254"></a><span class="ln">   254</span>		<span class="comment">// out[0] &lt; 2**28</span>
<a id="L255"></a><span class="ln">   255</span>		<span class="comment">// out[1..4] &lt; 2**29</span>
<a id="L256"></a><span class="ln">   256</span>		<span class="comment">// out[5..7] &lt; 2**28</span>
<a id="L257"></a><span class="ln">   257</span>	}
<a id="L258"></a><span class="ln">   258</span>	
<a id="L259"></a><span class="ln">   259</span>	<span class="comment">// Reduce reduces the coefficients of a to smaller bounds.</span>
<a id="L260"></a><span class="ln">   260</span>	<span class="comment">//</span>
<a id="L261"></a><span class="ln">   261</span>	<span class="comment">// On entry: a[i] &lt; 2**31 + 2**30</span>
<a id="L262"></a><span class="ln">   262</span>	<span class="comment">// On exit: a[i] &lt; 2**29</span>
<a id="L263"></a><span class="ln">   263</span>	func p224Reduce(a *p224FieldElement) {
<a id="L264"></a><span class="ln">   264</span>		for i := 0; i &lt; 7; i++ {
<a id="L265"></a><span class="ln">   265</span>			a[i+1] += a[i] &gt;&gt; 28
<a id="L266"></a><span class="ln">   266</span>			a[i] &amp;= bottom28Bits
<a id="L267"></a><span class="ln">   267</span>		}
<a id="L268"></a><span class="ln">   268</span>		top := a[7] &gt;&gt; 28
<a id="L269"></a><span class="ln">   269</span>		a[7] &amp;= bottom28Bits
<a id="L270"></a><span class="ln">   270</span>	
<a id="L271"></a><span class="ln">   271</span>		<span class="comment">// top &lt; 2**4</span>
<a id="L272"></a><span class="ln">   272</span>		mask := top
<a id="L273"></a><span class="ln">   273</span>		mask |= mask &gt;&gt; 2
<a id="L274"></a><span class="ln">   274</span>		mask |= mask &gt;&gt; 1
<a id="L275"></a><span class="ln">   275</span>		mask &lt;&lt;= 31
<a id="L276"></a><span class="ln">   276</span>		mask = uint32(int32(mask) &gt;&gt; 31)
<a id="L277"></a><span class="ln">   277</span>		<span class="comment">// Mask is all ones if top != 0, all zero otherwise</span>
<a id="L278"></a><span class="ln">   278</span>	
<a id="L279"></a><span class="ln">   279</span>		a[0] -= top
<a id="L280"></a><span class="ln">   280</span>		a[3] += top &lt;&lt; 12
<a id="L281"></a><span class="ln">   281</span>	
<a id="L282"></a><span class="ln">   282</span>		<span class="comment">// We may have just made a[0] negative but, if we did, then we must</span>
<a id="L283"></a><span class="ln">   283</span>		<span class="comment">// have added something to a[3], this it&#39;s &gt; 2**12. Therefore we can</span>
<a id="L284"></a><span class="ln">   284</span>		<span class="comment">// carry down to a[0].</span>
<a id="L285"></a><span class="ln">   285</span>		a[3] -= 1 &amp; mask
<a id="L286"></a><span class="ln">   286</span>		a[2] += mask &amp; (1&lt;&lt;28 - 1)
<a id="L287"></a><span class="ln">   287</span>		a[1] += mask &amp; (1&lt;&lt;28 - 1)
<a id="L288"></a><span class="ln">   288</span>		a[0] += mask &amp; (1 &lt;&lt; 28)
<a id="L289"></a><span class="ln">   289</span>	}
<a id="L290"></a><span class="ln">   290</span>	
<a id="L291"></a><span class="ln">   291</span>	<span class="comment">// p224Invert calculates *out = in**-1 by computing in**(2**224 - 2**96 - 1),</span>
<a id="L292"></a><span class="ln">   292</span>	<span class="comment">// i.e. Fermat&#39;s little theorem.</span>
<a id="L293"></a><span class="ln">   293</span>	func p224Invert(out, in *p224FieldElement) {
<a id="L294"></a><span class="ln">   294</span>		var f1, f2, f3, f4 p224FieldElement
<a id="L295"></a><span class="ln">   295</span>		var c p224LargeFieldElement
<a id="L296"></a><span class="ln">   296</span>	
<a id="L297"></a><span class="ln">   297</span>		p224Square(&amp;f1, in, &amp;c)    <span class="comment">// 2</span>
<a id="L298"></a><span class="ln">   298</span>		p224Mul(&amp;f1, &amp;f1, in, &amp;c)  <span class="comment">// 2**2 - 1</span>
<a id="L299"></a><span class="ln">   299</span>		p224Square(&amp;f1, &amp;f1, &amp;c)   <span class="comment">// 2**3 - 2</span>
<a id="L300"></a><span class="ln">   300</span>		p224Mul(&amp;f1, &amp;f1, in, &amp;c)  <span class="comment">// 2**3 - 1</span>
<a id="L301"></a><span class="ln">   301</span>		p224Square(&amp;f2, &amp;f1, &amp;c)   <span class="comment">// 2**4 - 2</span>
<a id="L302"></a><span class="ln">   302</span>		p224Square(&amp;f2, &amp;f2, &amp;c)   <span class="comment">// 2**5 - 4</span>
<a id="L303"></a><span class="ln">   303</span>		p224Square(&amp;f2, &amp;f2, &amp;c)   <span class="comment">// 2**6 - 8</span>
<a id="L304"></a><span class="ln">   304</span>		p224Mul(&amp;f1, &amp;f1, &amp;f2, &amp;c) <span class="comment">// 2**6 - 1</span>
<a id="L305"></a><span class="ln">   305</span>		p224Square(&amp;f2, &amp;f1, &amp;c)   <span class="comment">// 2**7 - 2</span>
<a id="L306"></a><span class="ln">   306</span>		for i := 0; i &lt; 5; i++ {   <span class="comment">// 2**12 - 2**6</span>
<a id="L307"></a><span class="ln">   307</span>			p224Square(&amp;f2, &amp;f2, &amp;c)
<a id="L308"></a><span class="ln">   308</span>		}
<a id="L309"></a><span class="ln">   309</span>		p224Mul(&amp;f2, &amp;f2, &amp;f1, &amp;c) <span class="comment">// 2**12 - 1</span>
<a id="L310"></a><span class="ln">   310</span>		p224Square(&amp;f3, &amp;f2, &amp;c)   <span class="comment">// 2**13 - 2</span>
<a id="L311"></a><span class="ln">   311</span>		for i := 0; i &lt; 11; i++ {  <span class="comment">// 2**24 - 2**12</span>
<a id="L312"></a><span class="ln">   312</span>			p224Square(&amp;f3, &amp;f3, &amp;c)
<a id="L313"></a><span class="ln">   313</span>		}
<a id="L314"></a><span class="ln">   314</span>		p224Mul(&amp;f2, &amp;f3, &amp;f2, &amp;c) <span class="comment">// 2**24 - 1</span>
<a id="L315"></a><span class="ln">   315</span>		p224Square(&amp;f3, &amp;f2, &amp;c)   <span class="comment">// 2**25 - 2</span>
<a id="L316"></a><span class="ln">   316</span>		for i := 0; i &lt; 23; i++ {  <span class="comment">// 2**48 - 2**24</span>
<a id="L317"></a><span class="ln">   317</span>			p224Square(&amp;f3, &amp;f3, &amp;c)
<a id="L318"></a><span class="ln">   318</span>		}
<a id="L319"></a><span class="ln">   319</span>		p224Mul(&amp;f3, &amp;f3, &amp;f2, &amp;c) <span class="comment">// 2**48 - 1</span>
<a id="L320"></a><span class="ln">   320</span>		p224Square(&amp;f4, &amp;f3, &amp;c)   <span class="comment">// 2**49 - 2</span>
<a id="L321"></a><span class="ln">   321</span>		for i := 0; i &lt; 47; i++ {  <span class="comment">// 2**96 - 2**48</span>
<a id="L322"></a><span class="ln">   322</span>			p224Square(&amp;f4, &amp;f4, &amp;c)
<a id="L323"></a><span class="ln">   323</span>		}
<a id="L324"></a><span class="ln">   324</span>		p224Mul(&amp;f3, &amp;f3, &amp;f4, &amp;c) <span class="comment">// 2**96 - 1</span>
<a id="L325"></a><span class="ln">   325</span>		p224Square(&amp;f4, &amp;f3, &amp;c)   <span class="comment">// 2**97 - 2</span>
<a id="L326"></a><span class="ln">   326</span>		for i := 0; i &lt; 23; i++ {  <span class="comment">// 2**120 - 2**24</span>
<a id="L327"></a><span class="ln">   327</span>			p224Square(&amp;f4, &amp;f4, &amp;c)
<a id="L328"></a><span class="ln">   328</span>		}
<a id="L329"></a><span class="ln">   329</span>		p224Mul(&amp;f2, &amp;f4, &amp;f2, &amp;c) <span class="comment">// 2**120 - 1</span>
<a id="L330"></a><span class="ln">   330</span>		for i := 0; i &lt; 6; i++ {   <span class="comment">// 2**126 - 2**6</span>
<a id="L331"></a><span class="ln">   331</span>			p224Square(&amp;f2, &amp;f2, &amp;c)
<a id="L332"></a><span class="ln">   332</span>		}
<a id="L333"></a><span class="ln">   333</span>		p224Mul(&amp;f1, &amp;f1, &amp;f2, &amp;c) <span class="comment">// 2**126 - 1</span>
<a id="L334"></a><span class="ln">   334</span>		p224Square(&amp;f1, &amp;f1, &amp;c)   <span class="comment">// 2**127 - 2</span>
<a id="L335"></a><span class="ln">   335</span>		p224Mul(&amp;f1, &amp;f1, in, &amp;c)  <span class="comment">// 2**127 - 1</span>
<a id="L336"></a><span class="ln">   336</span>		for i := 0; i &lt; 97; i++ {  <span class="comment">// 2**224 - 2**97</span>
<a id="L337"></a><span class="ln">   337</span>			p224Square(&amp;f1, &amp;f1, &amp;c)
<a id="L338"></a><span class="ln">   338</span>		}
<a id="L339"></a><span class="ln">   339</span>		p224Mul(out, &amp;f1, &amp;f3, &amp;c) <span class="comment">// 2**224 - 2**96 - 1</span>
<a id="L340"></a><span class="ln">   340</span>	}
<a id="L341"></a><span class="ln">   341</span>	
<a id="L342"></a><span class="ln">   342</span>	<span class="comment">// p224Contract converts a FieldElement to its unique, minimal form.</span>
<a id="L343"></a><span class="ln">   343</span>	<span class="comment">//</span>
<a id="L344"></a><span class="ln">   344</span>	<span class="comment">// On entry, in[i] &lt; 2**29</span>
<a id="L345"></a><span class="ln">   345</span>	<span class="comment">// On exit, in[i] &lt; 2**28</span>
<a id="L346"></a><span class="ln">   346</span>	func p224Contract(out, in *p224FieldElement) {
<a id="L347"></a><span class="ln">   347</span>		copy(out[:], in[:])
<a id="L348"></a><span class="ln">   348</span>	
<a id="L349"></a><span class="ln">   349</span>		for i := 0; i &lt; 7; i++ {
<a id="L350"></a><span class="ln">   350</span>			out[i+1] += out[i] &gt;&gt; 28
<a id="L351"></a><span class="ln">   351</span>			out[i] &amp;= bottom28Bits
<a id="L352"></a><span class="ln">   352</span>		}
<a id="L353"></a><span class="ln">   353</span>		top := out[7] &gt;&gt; 28
<a id="L354"></a><span class="ln">   354</span>		out[7] &amp;= bottom28Bits
<a id="L355"></a><span class="ln">   355</span>	
<a id="L356"></a><span class="ln">   356</span>		out[0] -= top
<a id="L357"></a><span class="ln">   357</span>		out[3] += top &lt;&lt; 12
<a id="L358"></a><span class="ln">   358</span>	
<a id="L359"></a><span class="ln">   359</span>		<span class="comment">// We may just have made out[i] negative. So we carry down. If we made</span>
<a id="L360"></a><span class="ln">   360</span>		<span class="comment">// out[0] negative then we know that out[3] is sufficiently positive</span>
<a id="L361"></a><span class="ln">   361</span>		<span class="comment">// because we just added to it.</span>
<a id="L362"></a><span class="ln">   362</span>		for i := 0; i &lt; 3; i++ {
<a id="L363"></a><span class="ln">   363</span>			mask := uint32(int32(out[i]) &gt;&gt; 31)
<a id="L364"></a><span class="ln">   364</span>			out[i] += (1 &lt;&lt; 28) &amp; mask
<a id="L365"></a><span class="ln">   365</span>			out[i+1] -= 1 &amp; mask
<a id="L366"></a><span class="ln">   366</span>		}
<a id="L367"></a><span class="ln">   367</span>	
<a id="L368"></a><span class="ln">   368</span>		<span class="comment">// We might have pushed out[3] over 2**28 so we perform another, partial,</span>
<a id="L369"></a><span class="ln">   369</span>		<span class="comment">// carry chain.</span>
<a id="L370"></a><span class="ln">   370</span>		for i := 3; i &lt; 7; i++ {
<a id="L371"></a><span class="ln">   371</span>			out[i+1] += out[i] &gt;&gt; 28
<a id="L372"></a><span class="ln">   372</span>			out[i] &amp;= bottom28Bits
<a id="L373"></a><span class="ln">   373</span>		}
<a id="L374"></a><span class="ln">   374</span>		top = out[7] &gt;&gt; 28
<a id="L375"></a><span class="ln">   375</span>		out[7] &amp;= bottom28Bits
<a id="L376"></a><span class="ln">   376</span>	
<a id="L377"></a><span class="ln">   377</span>		<span class="comment">// Eliminate top while maintaining the same value mod p.</span>
<a id="L378"></a><span class="ln">   378</span>		out[0] -= top
<a id="L379"></a><span class="ln">   379</span>		out[3] += top &lt;&lt; 12
<a id="L380"></a><span class="ln">   380</span>	
<a id="L381"></a><span class="ln">   381</span>		<span class="comment">// There are two cases to consider for out[3]:</span>
<a id="L382"></a><span class="ln">   382</span>		<span class="comment">//   1) The first time that we eliminated top, we didn&#39;t push out[3] over</span>
<a id="L383"></a><span class="ln">   383</span>		<span class="comment">//      2**28. In this case, the partial carry chain didn&#39;t change any values</span>
<a id="L384"></a><span class="ln">   384</span>		<span class="comment">//      and top is zero.</span>
<a id="L385"></a><span class="ln">   385</span>		<span class="comment">//   2) We did push out[3] over 2**28 the first time that we eliminated top.</span>
<a id="L386"></a><span class="ln">   386</span>		<span class="comment">//      The first value of top was in [0..16), therefore, prior to eliminating</span>
<a id="L387"></a><span class="ln">   387</span>		<span class="comment">//      the first top, 0xfff1000 &lt;= out[3] &lt;= 0xfffffff. Therefore, after</span>
<a id="L388"></a><span class="ln">   388</span>		<span class="comment">//      overflowing and being reduced by the second carry chain, out[3] &lt;=</span>
<a id="L389"></a><span class="ln">   389</span>		<span class="comment">//      0xf000. Thus it cannot have overflowed when we eliminated top for the</span>
<a id="L390"></a><span class="ln">   390</span>		<span class="comment">//      second time.</span>
<a id="L391"></a><span class="ln">   391</span>	
<a id="L392"></a><span class="ln">   392</span>		<span class="comment">// Again, we may just have made out[0] negative, so do the same carry down.</span>
<a id="L393"></a><span class="ln">   393</span>		<span class="comment">// As before, if we made out[0] negative then we know that out[3] is</span>
<a id="L394"></a><span class="ln">   394</span>		<span class="comment">// sufficiently positive.</span>
<a id="L395"></a><span class="ln">   395</span>		for i := 0; i &lt; 3; i++ {
<a id="L396"></a><span class="ln">   396</span>			mask := uint32(int32(out[i]) &gt;&gt; 31)
<a id="L397"></a><span class="ln">   397</span>			out[i] += (1 &lt;&lt; 28) &amp; mask
<a id="L398"></a><span class="ln">   398</span>			out[i+1] -= 1 &amp; mask
<a id="L399"></a><span class="ln">   399</span>		}
<a id="L400"></a><span class="ln">   400</span>	
<a id="L401"></a><span class="ln">   401</span>		<span class="comment">// Now we see if the value is &gt;= p and, if so, subtract p.</span>
<a id="L402"></a><span class="ln">   402</span>	
<a id="L403"></a><span class="ln">   403</span>		<span class="comment">// First we build a mask from the top four limbs, which must all be</span>
<a id="L404"></a><span class="ln">   404</span>		<span class="comment">// equal to bottom28Bits if the whole value is &gt;= p. If top4AllOnes</span>
<a id="L405"></a><span class="ln">   405</span>		<span class="comment">// ends up with any zero bits in the bottom 28 bits, then this wasn&#39;t</span>
<a id="L406"></a><span class="ln">   406</span>		<span class="comment">// true.</span>
<a id="L407"></a><span class="ln">   407</span>		top4AllOnes := uint32(0xffffffff)
<a id="L408"></a><span class="ln">   408</span>		for i := 4; i &lt; 8; i++ {
<a id="L409"></a><span class="ln">   409</span>			top4AllOnes &amp;= (out[i] &amp; bottom28Bits) - 1
<a id="L410"></a><span class="ln">   410</span>		}
<a id="L411"></a><span class="ln">   411</span>		top4AllOnes |= 0xf0000000
<a id="L412"></a><span class="ln">   412</span>		<span class="comment">// Now we replicate any zero bits to all the bits in top4AllOnes.</span>
<a id="L413"></a><span class="ln">   413</span>		top4AllOnes &amp;= top4AllOnes &gt;&gt; 16
<a id="L414"></a><span class="ln">   414</span>		top4AllOnes &amp;= top4AllOnes &gt;&gt; 8
<a id="L415"></a><span class="ln">   415</span>		top4AllOnes &amp;= top4AllOnes &gt;&gt; 4
<a id="L416"></a><span class="ln">   416</span>		top4AllOnes &amp;= top4AllOnes &gt;&gt; 2
<a id="L417"></a><span class="ln">   417</span>		top4AllOnes &amp;= top4AllOnes &gt;&gt; 1
<a id="L418"></a><span class="ln">   418</span>		top4AllOnes = uint32(int32(top4AllOnes&lt;&lt;31) &gt;&gt; 31)
<a id="L419"></a><span class="ln">   419</span>	
<a id="L420"></a><span class="ln">   420</span>		<span class="comment">// Now we test whether the bottom three limbs are non-zero.</span>
<a id="L421"></a><span class="ln">   421</span>		bottom3NonZero := out[0] | out[1] | out[2]
<a id="L422"></a><span class="ln">   422</span>		bottom3NonZero |= bottom3NonZero &gt;&gt; 16
<a id="L423"></a><span class="ln">   423</span>		bottom3NonZero |= bottom3NonZero &gt;&gt; 8
<a id="L424"></a><span class="ln">   424</span>		bottom3NonZero |= bottom3NonZero &gt;&gt; 4
<a id="L425"></a><span class="ln">   425</span>		bottom3NonZero |= bottom3NonZero &gt;&gt; 2
<a id="L426"></a><span class="ln">   426</span>		bottom3NonZero |= bottom3NonZero &gt;&gt; 1
<a id="L427"></a><span class="ln">   427</span>		bottom3NonZero = uint32(int32(bottom3NonZero&lt;&lt;31) &gt;&gt; 31)
<a id="L428"></a><span class="ln">   428</span>	
<a id="L429"></a><span class="ln">   429</span>		<span class="comment">// Everything depends on the value of out[3].</span>
<a id="L430"></a><span class="ln">   430</span>		<span class="comment">//    If it&#39;s &gt; 0xffff000 and top4AllOnes != 0 then the whole value is &gt;= p</span>
<a id="L431"></a><span class="ln">   431</span>		<span class="comment">//    If it&#39;s = 0xffff000 and top4AllOnes != 0 and bottom3NonZero != 0,</span>
<a id="L432"></a><span class="ln">   432</span>		<span class="comment">//      then the whole value is &gt;= p</span>
<a id="L433"></a><span class="ln">   433</span>		<span class="comment">//    If it&#39;s &lt; 0xffff000, then the whole value is &lt; p</span>
<a id="L434"></a><span class="ln">   434</span>		n := out[3] - 0xffff000
<a id="L435"></a><span class="ln">   435</span>		out3Equal := n
<a id="L436"></a><span class="ln">   436</span>		out3Equal |= out3Equal &gt;&gt; 16
<a id="L437"></a><span class="ln">   437</span>		out3Equal |= out3Equal &gt;&gt; 8
<a id="L438"></a><span class="ln">   438</span>		out3Equal |= out3Equal &gt;&gt; 4
<a id="L439"></a><span class="ln">   439</span>		out3Equal |= out3Equal &gt;&gt; 2
<a id="L440"></a><span class="ln">   440</span>		out3Equal |= out3Equal &gt;&gt; 1
<a id="L441"></a><span class="ln">   441</span>		out3Equal = ^uint32(int32(out3Equal&lt;&lt;31) &gt;&gt; 31)
<a id="L442"></a><span class="ln">   442</span>	
<a id="L443"></a><span class="ln">   443</span>		<span class="comment">// If out[3] &gt; 0xffff000 then n&#39;s MSB will be zero.</span>
<a id="L444"></a><span class="ln">   444</span>		out3GT := ^uint32(int32(n&lt;&lt;31) &gt;&gt; 31)
<a id="L445"></a><span class="ln">   445</span>	
<a id="L446"></a><span class="ln">   446</span>		mask := top4AllOnes &amp; ((out3Equal &amp; bottom3NonZero) | out3GT)
<a id="L447"></a><span class="ln">   447</span>		out[0] -= 1 &amp; mask
<a id="L448"></a><span class="ln">   448</span>		out[3] -= 0xffff000 &amp; mask
<a id="L449"></a><span class="ln">   449</span>		out[4] -= 0xfffffff &amp; mask
<a id="L450"></a><span class="ln">   450</span>		out[5] -= 0xfffffff &amp; mask
<a id="L451"></a><span class="ln">   451</span>		out[6] -= 0xfffffff &amp; mask
<a id="L452"></a><span class="ln">   452</span>		out[7] -= 0xfffffff &amp; mask
<a id="L453"></a><span class="ln">   453</span>	}
<a id="L454"></a><span class="ln">   454</span>	
<a id="L455"></a><span class="ln">   455</span>	<span class="comment">// Group element functions.</span>
<a id="L456"></a><span class="ln">   456</span>	<span class="comment">//</span>
<a id="L457"></a><span class="ln">   457</span>	<span class="comment">// These functions deal with group elements. The group is an elliptic curve</span>
<a id="L458"></a><span class="ln">   458</span>	<span class="comment">// group with a = -3 defined in FIPS 186-3, section D.2.2.</span>
<a id="L459"></a><span class="ln">   459</span>	
<a id="L460"></a><span class="ln">   460</span>	<span class="comment">// p224AddJacobian computes *out = a+b where a != b.</span>
<a id="L461"></a><span class="ln">   461</span>	func p224AddJacobian(x3, y3, z3, x1, y1, z1, x2, y2, z2 *p224FieldElement) {
<a id="L462"></a><span class="ln">   462</span>		<span class="comment">// See http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#addition-p224Add-2007-bl</span>
<a id="L463"></a><span class="ln">   463</span>		var z1z1, z2z2, u1, u2, s1, s2, h, i, j, r, v p224FieldElement
<a id="L464"></a><span class="ln">   464</span>		var c p224LargeFieldElement
<a id="L465"></a><span class="ln">   465</span>	
<a id="L466"></a><span class="ln">   466</span>		<span class="comment">// Z1Z1 = Z1²</span>
<a id="L467"></a><span class="ln">   467</span>		p224Square(&amp;z1z1, z1, &amp;c)
<a id="L468"></a><span class="ln">   468</span>		<span class="comment">// Z2Z2 = Z2²</span>
<a id="L469"></a><span class="ln">   469</span>		p224Square(&amp;z2z2, z2, &amp;c)
<a id="L470"></a><span class="ln">   470</span>		<span class="comment">// U1 = X1*Z2Z2</span>
<a id="L471"></a><span class="ln">   471</span>		p224Mul(&amp;u1, x1, &amp;z2z2, &amp;c)
<a id="L472"></a><span class="ln">   472</span>		<span class="comment">// U2 = X2*Z1Z1</span>
<a id="L473"></a><span class="ln">   473</span>		p224Mul(&amp;u2, x2, &amp;z1z1, &amp;c)
<a id="L474"></a><span class="ln">   474</span>		<span class="comment">// S1 = Y1*Z2*Z2Z2</span>
<a id="L475"></a><span class="ln">   475</span>		p224Mul(&amp;s1, z2, &amp;z2z2, &amp;c)
<a id="L476"></a><span class="ln">   476</span>		p224Mul(&amp;s1, y1, &amp;s1, &amp;c)
<a id="L477"></a><span class="ln">   477</span>		<span class="comment">// S2 = Y2*Z1*Z1Z1</span>
<a id="L478"></a><span class="ln">   478</span>		p224Mul(&amp;s2, z1, &amp;z1z1, &amp;c)
<a id="L479"></a><span class="ln">   479</span>		p224Mul(&amp;s2, y2, &amp;s2, &amp;c)
<a id="L480"></a><span class="ln">   480</span>		<span class="comment">// H = U2-U1</span>
<a id="L481"></a><span class="ln">   481</span>		p224Sub(&amp;h, &amp;u2, &amp;u1)
<a id="L482"></a><span class="ln">   482</span>		p224Reduce(&amp;h)
<a id="L483"></a><span class="ln">   483</span>		<span class="comment">// I = (2*H)²</span>
<a id="L484"></a><span class="ln">   484</span>		for j := 0; j &lt; 8; j++ {
<a id="L485"></a><span class="ln">   485</span>			i[j] = h[j] &lt;&lt; 1
<a id="L486"></a><span class="ln">   486</span>		}
<a id="L487"></a><span class="ln">   487</span>		p224Reduce(&amp;i)
<a id="L488"></a><span class="ln">   488</span>		p224Square(&amp;i, &amp;i, &amp;c)
<a id="L489"></a><span class="ln">   489</span>		<span class="comment">// J = H*I</span>
<a id="L490"></a><span class="ln">   490</span>		p224Mul(&amp;j, &amp;h, &amp;i, &amp;c)
<a id="L491"></a><span class="ln">   491</span>		<span class="comment">// r = 2*(S2-S1)</span>
<a id="L492"></a><span class="ln">   492</span>		p224Sub(&amp;r, &amp;s2, &amp;s1)
<a id="L493"></a><span class="ln">   493</span>		p224Reduce(&amp;r)
<a id="L494"></a><span class="ln">   494</span>		for i := 0; i &lt; 8; i++ {
<a id="L495"></a><span class="ln">   495</span>			r[i] &lt;&lt;= 1
<a id="L496"></a><span class="ln">   496</span>		}
<a id="L497"></a><span class="ln">   497</span>		p224Reduce(&amp;r)
<a id="L498"></a><span class="ln">   498</span>		<span class="comment">// V = U1*I</span>
<a id="L499"></a><span class="ln">   499</span>		p224Mul(&amp;v, &amp;u1, &amp;i, &amp;c)
<a id="L500"></a><span class="ln">   500</span>		<span class="comment">// Z3 = ((Z1+Z2)²-Z1Z1-Z2Z2)*H</span>
<a id="L501"></a><span class="ln">   501</span>		p224Add(&amp;z1z1, &amp;z1z1, &amp;z2z2)
<a id="L502"></a><span class="ln">   502</span>		p224Add(&amp;z2z2, z1, z2)
<a id="L503"></a><span class="ln">   503</span>		p224Reduce(&amp;z2z2)
<a id="L504"></a><span class="ln">   504</span>		p224Square(&amp;z2z2, &amp;z2z2, &amp;c)
<a id="L505"></a><span class="ln">   505</span>		p224Sub(z3, &amp;z2z2, &amp;z1z1)
<a id="L506"></a><span class="ln">   506</span>		p224Reduce(z3)
<a id="L507"></a><span class="ln">   507</span>		p224Mul(z3, z3, &amp;h, &amp;c)
<a id="L508"></a><span class="ln">   508</span>		<span class="comment">// X3 = r²-J-2*V</span>
<a id="L509"></a><span class="ln">   509</span>		for i := 0; i &lt; 8; i++ {
<a id="L510"></a><span class="ln">   510</span>			z1z1[i] = v[i] &lt;&lt; 1
<a id="L511"></a><span class="ln">   511</span>		}
<a id="L512"></a><span class="ln">   512</span>		p224Add(&amp;z1z1, &amp;j, &amp;z1z1)
<a id="L513"></a><span class="ln">   513</span>		p224Reduce(&amp;z1z1)
<a id="L514"></a><span class="ln">   514</span>		p224Square(x3, &amp;r, &amp;c)
<a id="L515"></a><span class="ln">   515</span>		p224Sub(x3, x3, &amp;z1z1)
<a id="L516"></a><span class="ln">   516</span>		p224Reduce(x3)
<a id="L517"></a><span class="ln">   517</span>		<span class="comment">// Y3 = r*(V-X3)-2*S1*J</span>
<a id="L518"></a><span class="ln">   518</span>		for i := 0; i &lt; 8; i++ {
<a id="L519"></a><span class="ln">   519</span>			s1[i] &lt;&lt;= 1
<a id="L520"></a><span class="ln">   520</span>		}
<a id="L521"></a><span class="ln">   521</span>		p224Mul(&amp;s1, &amp;s1, &amp;j, &amp;c)
<a id="L522"></a><span class="ln">   522</span>		p224Sub(&amp;z1z1, &amp;v, x3)
<a id="L523"></a><span class="ln">   523</span>		p224Reduce(&amp;z1z1)
<a id="L524"></a><span class="ln">   524</span>		p224Mul(&amp;z1z1, &amp;z1z1, &amp;r, &amp;c)
<a id="L525"></a><span class="ln">   525</span>		p224Sub(y3, &amp;z1z1, &amp;s1)
<a id="L526"></a><span class="ln">   526</span>		p224Reduce(y3)
<a id="L527"></a><span class="ln">   527</span>	}
<a id="L528"></a><span class="ln">   528</span>	
<a id="L529"></a><span class="ln">   529</span>	<span class="comment">// p224DoubleJacobian computes *out = a+a.</span>
<a id="L530"></a><span class="ln">   530</span>	func p224DoubleJacobian(x3, y3, z3, x1, y1, z1 *p224FieldElement) {
<a id="L531"></a><span class="ln">   531</span>		var delta, gamma, beta, alpha, t p224FieldElement
<a id="L532"></a><span class="ln">   532</span>		var c p224LargeFieldElement
<a id="L533"></a><span class="ln">   533</span>	
<a id="L534"></a><span class="ln">   534</span>		p224Square(&amp;delta, z1, &amp;c)
<a id="L535"></a><span class="ln">   535</span>		p224Square(&amp;gamma, y1, &amp;c)
<a id="L536"></a><span class="ln">   536</span>		p224Mul(&amp;beta, x1, &amp;gamma, &amp;c)
<a id="L537"></a><span class="ln">   537</span>	
<a id="L538"></a><span class="ln">   538</span>		<span class="comment">// alpha = 3*(X1-delta)*(X1+delta)</span>
<a id="L539"></a><span class="ln">   539</span>		p224Add(&amp;t, x1, &amp;delta)
<a id="L540"></a><span class="ln">   540</span>		for i := 0; i &lt; 8; i++ {
<a id="L541"></a><span class="ln">   541</span>			t[i] += t[i] &lt;&lt; 1
<a id="L542"></a><span class="ln">   542</span>		}
<a id="L543"></a><span class="ln">   543</span>		p224Reduce(&amp;t)
<a id="L544"></a><span class="ln">   544</span>		p224Sub(&amp;alpha, x1, &amp;delta)
<a id="L545"></a><span class="ln">   545</span>		p224Reduce(&amp;alpha)
<a id="L546"></a><span class="ln">   546</span>		p224Mul(&amp;alpha, &amp;alpha, &amp;t, &amp;c)
<a id="L547"></a><span class="ln">   547</span>	
<a id="L548"></a><span class="ln">   548</span>		<span class="comment">// Z3 = (Y1+Z1)²-gamma-delta</span>
<a id="L549"></a><span class="ln">   549</span>		p224Add(z3, y1, z1)
<a id="L550"></a><span class="ln">   550</span>		p224Reduce(z3)
<a id="L551"></a><span class="ln">   551</span>		p224Square(z3, z3, &amp;c)
<a id="L552"></a><span class="ln">   552</span>		p224Sub(z3, z3, &amp;gamma)
<a id="L553"></a><span class="ln">   553</span>		p224Reduce(z3)
<a id="L554"></a><span class="ln">   554</span>		p224Sub(z3, z3, &amp;delta)
<a id="L555"></a><span class="ln">   555</span>		p224Reduce(z3)
<a id="L556"></a><span class="ln">   556</span>	
<a id="L557"></a><span class="ln">   557</span>		<span class="comment">// X3 = alpha²-8*beta</span>
<a id="L558"></a><span class="ln">   558</span>		for i := 0; i &lt; 8; i++ {
<a id="L559"></a><span class="ln">   559</span>			delta[i] = beta[i] &lt;&lt; 3
<a id="L560"></a><span class="ln">   560</span>		}
<a id="L561"></a><span class="ln">   561</span>		p224Reduce(&amp;delta)
<a id="L562"></a><span class="ln">   562</span>		p224Square(x3, &amp;alpha, &amp;c)
<a id="L563"></a><span class="ln">   563</span>		p224Sub(x3, x3, &amp;delta)
<a id="L564"></a><span class="ln">   564</span>		p224Reduce(x3)
<a id="L565"></a><span class="ln">   565</span>	
<a id="L566"></a><span class="ln">   566</span>		<span class="comment">// Y3 = alpha*(4*beta-X3)-8*gamma²</span>
<a id="L567"></a><span class="ln">   567</span>		for i := 0; i &lt; 8; i++ {
<a id="L568"></a><span class="ln">   568</span>			beta[i] &lt;&lt;= 2
<a id="L569"></a><span class="ln">   569</span>		}
<a id="L570"></a><span class="ln">   570</span>		p224Sub(&amp;beta, &amp;beta, x3)
<a id="L571"></a><span class="ln">   571</span>		p224Reduce(&amp;beta)
<a id="L572"></a><span class="ln">   572</span>		p224Square(&amp;gamma, &amp;gamma, &amp;c)
<a id="L573"></a><span class="ln">   573</span>		for i := 0; i &lt; 8; i++ {
<a id="L574"></a><span class="ln">   574</span>			gamma[i] &lt;&lt;= 3
<a id="L575"></a><span class="ln">   575</span>		}
<a id="L576"></a><span class="ln">   576</span>		p224Reduce(&amp;gamma)
<a id="L577"></a><span class="ln">   577</span>		p224Mul(y3, &amp;alpha, &amp;beta, &amp;c)
<a id="L578"></a><span class="ln">   578</span>		p224Sub(y3, y3, &amp;gamma)
<a id="L579"></a><span class="ln">   579</span>		p224Reduce(y3)
<a id="L580"></a><span class="ln">   580</span>	}
<a id="L581"></a><span class="ln">   581</span>	
<a id="L582"></a><span class="ln">   582</span>	<span class="comment">// p224CopyConditional sets *out = *in iff the least-significant-bit of control</span>
<a id="L583"></a><span class="ln">   583</span>	<span class="comment">// is true, and it runs in constant time.</span>
<a id="L584"></a><span class="ln">   584</span>	func p224CopyConditional(out, in *p224FieldElement, control uint32) {
<a id="L585"></a><span class="ln">   585</span>		control &lt;&lt;= 31
<a id="L586"></a><span class="ln">   586</span>		control = uint32(int32(control) &gt;&gt; 31)
<a id="L587"></a><span class="ln">   587</span>	
<a id="L588"></a><span class="ln">   588</span>		for i := 0; i &lt; 8; i++ {
<a id="L589"></a><span class="ln">   589</span>			out[i] ^= (out[i] ^ in[i]) &amp; control
<a id="L590"></a><span class="ln">   590</span>		}
<a id="L591"></a><span class="ln">   591</span>	}
<a id="L592"></a><span class="ln">   592</span>	
<a id="L593"></a><span class="ln">   593</span>	func p224ScalarMult(outX, outY, outZ, inX, inY, inZ *p224FieldElement, scalar []byte) {
<a id="L594"></a><span class="ln">   594</span>		var xx, yy, zz p224FieldElement
<a id="L595"></a><span class="ln">   595</span>		for i := 0; i &lt; 8; i++ {
<a id="L596"></a><span class="ln">   596</span>			outZ[i] = 0
<a id="L597"></a><span class="ln">   597</span>		}
<a id="L598"></a><span class="ln">   598</span>	
<a id="L599"></a><span class="ln">   599</span>		firstBit := uint32(1)
<a id="L600"></a><span class="ln">   600</span>		for _, byte := range scalar {
<a id="L601"></a><span class="ln">   601</span>			for bitNum := uint(0); bitNum &lt; 8; bitNum++ {
<a id="L602"></a><span class="ln">   602</span>				p224DoubleJacobian(outX, outY, outZ, outX, outY, outZ)
<a id="L603"></a><span class="ln">   603</span>				bit := uint32((byte &gt;&gt; (7 - bitNum)) &amp; 1)
<a id="L604"></a><span class="ln">   604</span>				p224AddJacobian(&amp;xx, &amp;yy, &amp;zz, inX, inY, inZ, outX, outY, outZ)
<a id="L605"></a><span class="ln">   605</span>				p224CopyConditional(outX, inX, firstBit&amp;bit)
<a id="L606"></a><span class="ln">   606</span>				p224CopyConditional(outY, inY, firstBit&amp;bit)
<a id="L607"></a><span class="ln">   607</span>				p224CopyConditional(outZ, inZ, firstBit&amp;bit)
<a id="L608"></a><span class="ln">   608</span>				p224CopyConditional(outX, &amp;xx, ^firstBit&amp;bit)
<a id="L609"></a><span class="ln">   609</span>				p224CopyConditional(outY, &amp;yy, ^firstBit&amp;bit)
<a id="L610"></a><span class="ln">   610</span>				p224CopyConditional(outZ, &amp;zz, ^firstBit&amp;bit)
<a id="L611"></a><span class="ln">   611</span>				firstBit = firstBit &amp; ^bit
<a id="L612"></a><span class="ln">   612</span>			}
<a id="L613"></a><span class="ln">   613</span>		}
<a id="L614"></a><span class="ln">   614</span>	}
<a id="L615"></a><span class="ln">   615</span>	
<a id="L616"></a><span class="ln">   616</span>	<span class="comment">// p224ToAffine converts from Jacobian to affine form.</span>
<a id="L617"></a><span class="ln">   617</span>	func p224ToAffine(x, y, z *p224FieldElement) (*big.Int, *big.Int) {
<a id="L618"></a><span class="ln">   618</span>		var zinv, zinvsq, outx, outy p224FieldElement
<a id="L619"></a><span class="ln">   619</span>		var tmp p224LargeFieldElement
<a id="L620"></a><span class="ln">   620</span>	
<a id="L621"></a><span class="ln">   621</span>		isPointAtInfinity := true
<a id="L622"></a><span class="ln">   622</span>		for i := 0; i &lt; 8; i++ {
<a id="L623"></a><span class="ln">   623</span>			if z[i] != 0 {
<a id="L624"></a><span class="ln">   624</span>				isPointAtInfinity = false
<a id="L625"></a><span class="ln">   625</span>				break
<a id="L626"></a><span class="ln">   626</span>			}
<a id="L627"></a><span class="ln">   627</span>		}
<a id="L628"></a><span class="ln">   628</span>	
<a id="L629"></a><span class="ln">   629</span>		if isPointAtInfinity {
<a id="L630"></a><span class="ln">   630</span>			return nil, nil
<a id="L631"></a><span class="ln">   631</span>		}
<a id="L632"></a><span class="ln">   632</span>	
<a id="L633"></a><span class="ln">   633</span>		p224Invert(&amp;zinv, z)
<a id="L634"></a><span class="ln">   634</span>		p224Square(&amp;zinvsq, &amp;zinv, &amp;tmp)
<a id="L635"></a><span class="ln">   635</span>		p224Mul(x, x, &amp;zinvsq, &amp;tmp)
<a id="L636"></a><span class="ln">   636</span>		p224Mul(&amp;zinvsq, &amp;zinvsq, &amp;zinv, &amp;tmp)
<a id="L637"></a><span class="ln">   637</span>		p224Mul(y, y, &amp;zinvsq, &amp;tmp)
<a id="L638"></a><span class="ln">   638</span>	
<a id="L639"></a><span class="ln">   639</span>		p224Contract(&amp;outx, x)
<a id="L640"></a><span class="ln">   640</span>		p224Contract(&amp;outy, y)
<a id="L641"></a><span class="ln">   641</span>		return p224ToBig(&amp;outx), p224ToBig(&amp;outy)
<a id="L642"></a><span class="ln">   642</span>	}
<a id="L643"></a><span class="ln">   643</span>	
<a id="L644"></a><span class="ln">   644</span>	<span class="comment">// get28BitsFromEnd returns the least-significant 28 bits from buf&gt;&gt;shift,</span>
<a id="L645"></a><span class="ln">   645</span>	<span class="comment">// where buf is interpreted as a big-endian number.</span>
<a id="L646"></a><span class="ln">   646</span>	func get28BitsFromEnd(buf []byte, shift uint) (uint32, []byte) {
<a id="L647"></a><span class="ln">   647</span>		var ret uint32
<a id="L648"></a><span class="ln">   648</span>	
<a id="L649"></a><span class="ln">   649</span>		for i := uint(0); i &lt; 4; i++ {
<a id="L650"></a><span class="ln">   650</span>			var b byte
<a id="L651"></a><span class="ln">   651</span>			if l := len(buf); l &gt; 0 {
<a id="L652"></a><span class="ln">   652</span>				b = buf[l-1]
<a id="L653"></a><span class="ln">   653</span>				<span class="comment">// We don&#39;t remove the byte if we&#39;re about to return and we&#39;re not</span>
<a id="L654"></a><span class="ln">   654</span>				<span class="comment">// reading all of it.</span>
<a id="L655"></a><span class="ln">   655</span>				if i != 3 || shift == 4 {
<a id="L656"></a><span class="ln">   656</span>					buf = buf[:l-1]
<a id="L657"></a><span class="ln">   657</span>				}
<a id="L658"></a><span class="ln">   658</span>			}
<a id="L659"></a><span class="ln">   659</span>			ret |= uint32(b) &lt;&lt; (8 * i) &gt;&gt; shift
<a id="L660"></a><span class="ln">   660</span>		}
<a id="L661"></a><span class="ln">   661</span>		ret &amp;= bottom28Bits
<a id="L662"></a><span class="ln">   662</span>		return ret, buf
<a id="L663"></a><span class="ln">   663</span>	}
<a id="L664"></a><span class="ln">   664</span>	
<a id="L665"></a><span class="ln">   665</span>	<span class="comment">// p224FromBig sets *out = *in.</span>
<a id="L666"></a><span class="ln">   666</span>	func p224FromBig(out *p224FieldElement, in *big.Int) {
<a id="L667"></a><span class="ln">   667</span>		bytes := in.Bytes()
<a id="L668"></a><span class="ln">   668</span>		out[0], bytes = get28BitsFromEnd(bytes, 0)
<a id="L669"></a><span class="ln">   669</span>		out[1], bytes = get28BitsFromEnd(bytes, 4)
<a id="L670"></a><span class="ln">   670</span>		out[2], bytes = get28BitsFromEnd(bytes, 0)
<a id="L671"></a><span class="ln">   671</span>		out[3], bytes = get28BitsFromEnd(bytes, 4)
<a id="L672"></a><span class="ln">   672</span>		out[4], bytes = get28BitsFromEnd(bytes, 0)
<a id="L673"></a><span class="ln">   673</span>		out[5], bytes = get28BitsFromEnd(bytes, 4)
<a id="L674"></a><span class="ln">   674</span>		out[6], bytes = get28BitsFromEnd(bytes, 0)
<a id="L675"></a><span class="ln">   675</span>		out[7], bytes = get28BitsFromEnd(bytes, 4)
<a id="L676"></a><span class="ln">   676</span>	}
<a id="L677"></a><span class="ln">   677</span>	
<a id="L678"></a><span class="ln">   678</span>	<span class="comment">// p224ToBig returns in as a big.Int.</span>
<a id="L679"></a><span class="ln">   679</span>	func p224ToBig(in *p224FieldElement) *big.Int {
<a id="L680"></a><span class="ln">   680</span>		var buf [28]byte
<a id="L681"></a><span class="ln">   681</span>		buf[27] = byte(in[0])
<a id="L682"></a><span class="ln">   682</span>		buf[26] = byte(in[0] &gt;&gt; 8)
<a id="L683"></a><span class="ln">   683</span>		buf[25] = byte(in[0] &gt;&gt; 16)
<a id="L684"></a><span class="ln">   684</span>		buf[24] = byte(((in[0] &gt;&gt; 24) &amp; 0x0f) | (in[1]&lt;&lt;4)&amp;0xf0)
<a id="L685"></a><span class="ln">   685</span>	
<a id="L686"></a><span class="ln">   686</span>		buf[23] = byte(in[1] &gt;&gt; 4)
<a id="L687"></a><span class="ln">   687</span>		buf[22] = byte(in[1] &gt;&gt; 12)
<a id="L688"></a><span class="ln">   688</span>		buf[21] = byte(in[1] &gt;&gt; 20)
<a id="L689"></a><span class="ln">   689</span>	
<a id="L690"></a><span class="ln">   690</span>		buf[20] = byte(in[2])
<a id="L691"></a><span class="ln">   691</span>		buf[19] = byte(in[2] &gt;&gt; 8)
<a id="L692"></a><span class="ln">   692</span>		buf[18] = byte(in[2] &gt;&gt; 16)
<a id="L693"></a><span class="ln">   693</span>		buf[17] = byte(((in[2] &gt;&gt; 24) &amp; 0x0f) | (in[3]&lt;&lt;4)&amp;0xf0)
<a id="L694"></a><span class="ln">   694</span>	
<a id="L695"></a><span class="ln">   695</span>		buf[16] = byte(in[3] &gt;&gt; 4)
<a id="L696"></a><span class="ln">   696</span>		buf[15] = byte(in[3] &gt;&gt; 12)
<a id="L697"></a><span class="ln">   697</span>		buf[14] = byte(in[3] &gt;&gt; 20)
<a id="L698"></a><span class="ln">   698</span>	
<a id="L699"></a><span class="ln">   699</span>		buf[13] = byte(in[4])
<a id="L700"></a><span class="ln">   700</span>		buf[12] = byte(in[4] &gt;&gt; 8)
<a id="L701"></a><span class="ln">   701</span>		buf[11] = byte(in[4] &gt;&gt; 16)
<a id="L702"></a><span class="ln">   702</span>		buf[10] = byte(((in[4] &gt;&gt; 24) &amp; 0x0f) | (in[5]&lt;&lt;4)&amp;0xf0)
<a id="L703"></a><span class="ln">   703</span>	
<a id="L704"></a><span class="ln">   704</span>		buf[9] = byte(in[5] &gt;&gt; 4)
<a id="L705"></a><span class="ln">   705</span>		buf[8] = byte(in[5] &gt;&gt; 12)
<a id="L706"></a><span class="ln">   706</span>		buf[7] = byte(in[5] &gt;&gt; 20)
<a id="L707"></a><span class="ln">   707</span>	
<a id="L708"></a><span class="ln">   708</span>		buf[6] = byte(in[6])
<a id="L709"></a><span class="ln">   709</span>		buf[5] = byte(in[6] &gt;&gt; 8)
<a id="L710"></a><span class="ln">   710</span>		buf[4] = byte(in[6] &gt;&gt; 16)
<a id="L711"></a><span class="ln">   711</span>		buf[3] = byte(((in[6] &gt;&gt; 24) &amp; 0x0f) | (in[7]&lt;&lt;4)&amp;0xf0)
<a id="L712"></a><span class="ln">   712</span>	
<a id="L713"></a><span class="ln">   713</span>		buf[2] = byte(in[7] &gt;&gt; 4)
<a id="L714"></a><span class="ln">   714</span>		buf[1] = byte(in[7] &gt;&gt; 12)
<a id="L715"></a><span class="ln">   715</span>		buf[0] = byte(in[7] &gt;&gt; 20)
<a id="L716"></a><span class="ln">   716</span>	
<a id="L717"></a><span class="ln">   717</span>		return new(big.Int).SetBytes(buf[:])
<a id="L718"></a><span class="ln">   718</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

