<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/crypto/x509/cert_pool.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/crypto/x509/cert_pool.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package x509
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;encoding/pem&#34;
<a id="L9"></a><span class="ln">     9</span>	)
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// CertPool is a set of certificates.</span>
<a id="L12"></a><span class="ln">    12</span>	type CertPool struct {
<a id="L13"></a><span class="ln">    13</span>		bySubjectKeyId map[string][]int
<a id="L14"></a><span class="ln">    14</span>		byName         map[string][]int
<a id="L15"></a><span class="ln">    15</span>		certs          []*Certificate
<a id="L16"></a><span class="ln">    16</span>	}
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// NewCertPool returns a new, empty CertPool.</span>
<a id="L19"></a><span class="ln">    19</span>	func NewCertPool() *CertPool {
<a id="L20"></a><span class="ln">    20</span>		return &amp;CertPool{
<a id="L21"></a><span class="ln">    21</span>			make(map[string][]int),
<a id="L22"></a><span class="ln">    22</span>			make(map[string][]int),
<a id="L23"></a><span class="ln">    23</span>			nil,
<a id="L24"></a><span class="ln">    24</span>		}
<a id="L25"></a><span class="ln">    25</span>	}
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// findVerifiedParents attempts to find certificates in s which have signed the</span>
<a id="L28"></a><span class="ln">    28</span>	<span class="comment">// given certificate. If no such certificate can be found or the signature</span>
<a id="L29"></a><span class="ln">    29</span>	<span class="comment">// doesn&#39;t match, it returns nil.</span>
<a id="L30"></a><span class="ln">    30</span>	func (s *CertPool) findVerifiedParents(cert *Certificate) (parents []int) {
<a id="L31"></a><span class="ln">    31</span>		if s == nil {
<a id="L32"></a><span class="ln">    32</span>			return
<a id="L33"></a><span class="ln">    33</span>		}
<a id="L34"></a><span class="ln">    34</span>		var candidates []int
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>		if len(cert.AuthorityKeyId) &gt; 0 {
<a id="L37"></a><span class="ln">    37</span>			candidates = s.bySubjectKeyId[string(cert.AuthorityKeyId)]
<a id="L38"></a><span class="ln">    38</span>		}
<a id="L39"></a><span class="ln">    39</span>		if len(candidates) == 0 {
<a id="L40"></a><span class="ln">    40</span>			candidates = s.byName[string(cert.RawIssuer)]
<a id="L41"></a><span class="ln">    41</span>		}
<a id="L42"></a><span class="ln">    42</span>	
<a id="L43"></a><span class="ln">    43</span>		for _, c := range candidates {
<a id="L44"></a><span class="ln">    44</span>			if cert.CheckSignatureFrom(s.certs[c]) == nil {
<a id="L45"></a><span class="ln">    45</span>				parents = append(parents, c)
<a id="L46"></a><span class="ln">    46</span>			}
<a id="L47"></a><span class="ln">    47</span>		}
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>		return
<a id="L50"></a><span class="ln">    50</span>	}
<a id="L51"></a><span class="ln">    51</span>	
<a id="L52"></a><span class="ln">    52</span>	<span class="comment">// AddCert adds a certificate to a pool.</span>
<a id="L53"></a><span class="ln">    53</span>	func (s *CertPool) AddCert(cert *Certificate) {
<a id="L54"></a><span class="ln">    54</span>		if cert == nil {
<a id="L55"></a><span class="ln">    55</span>			panic(&#34;adding nil Certificate to CertPool&#34;)
<a id="L56"></a><span class="ln">    56</span>		}
<a id="L57"></a><span class="ln">    57</span>	
<a id="L58"></a><span class="ln">    58</span>		<span class="comment">// Check that the certificate isn&#39;t being added twice.</span>
<a id="L59"></a><span class="ln">    59</span>		for _, c := range s.certs {
<a id="L60"></a><span class="ln">    60</span>			if c.Equal(cert) {
<a id="L61"></a><span class="ln">    61</span>				return
<a id="L62"></a><span class="ln">    62</span>			}
<a id="L63"></a><span class="ln">    63</span>		}
<a id="L64"></a><span class="ln">    64</span>	
<a id="L65"></a><span class="ln">    65</span>		n := len(s.certs)
<a id="L66"></a><span class="ln">    66</span>		s.certs = append(s.certs, cert)
<a id="L67"></a><span class="ln">    67</span>	
<a id="L68"></a><span class="ln">    68</span>		if len(cert.SubjectKeyId) &gt; 0 {
<a id="L69"></a><span class="ln">    69</span>			keyId := string(cert.SubjectKeyId)
<a id="L70"></a><span class="ln">    70</span>			s.bySubjectKeyId[keyId] = append(s.bySubjectKeyId[keyId], n)
<a id="L71"></a><span class="ln">    71</span>		}
<a id="L72"></a><span class="ln">    72</span>		name := string(cert.RawSubject)
<a id="L73"></a><span class="ln">    73</span>		s.byName[name] = append(s.byName[name], n)
<a id="L74"></a><span class="ln">    74</span>	}
<a id="L75"></a><span class="ln">    75</span>	
<a id="L76"></a><span class="ln">    76</span>	<span class="comment">// AppendCertsFromPEM attempts to parse a series of PEM encoded certificates.</span>
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// It appends any certificates found to s and returns true if any certificates</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// were successfully parsed.</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">//</span>
<a id="L80"></a><span class="ln">    80</span>	<span class="comment">// On many Linux systems, /etc/ssl/cert.pem will contain the system wide set</span>
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// of root CAs in a format suitable for this function.</span>
<a id="L82"></a><span class="ln">    82</span>	func (s *CertPool) AppendCertsFromPEM(pemCerts []byte) (ok bool) {
<a id="L83"></a><span class="ln">    83</span>		for len(pemCerts) &gt; 0 {
<a id="L84"></a><span class="ln">    84</span>			var block *pem.Block
<a id="L85"></a><span class="ln">    85</span>			block, pemCerts = pem.Decode(pemCerts)
<a id="L86"></a><span class="ln">    86</span>			if block == nil {
<a id="L87"></a><span class="ln">    87</span>				break
<a id="L88"></a><span class="ln">    88</span>			}
<a id="L89"></a><span class="ln">    89</span>			if block.Type != &#34;CERTIFICATE&#34; || len(block.Headers) != 0 {
<a id="L90"></a><span class="ln">    90</span>				continue
<a id="L91"></a><span class="ln">    91</span>			}
<a id="L92"></a><span class="ln">    92</span>	
<a id="L93"></a><span class="ln">    93</span>			cert, err := ParseCertificate(block.Bytes)
<a id="L94"></a><span class="ln">    94</span>			if err != nil {
<a id="L95"></a><span class="ln">    95</span>				continue
<a id="L96"></a><span class="ln">    96</span>			}
<a id="L97"></a><span class="ln">    97</span>	
<a id="L98"></a><span class="ln">    98</span>			s.AddCert(cert)
<a id="L99"></a><span class="ln">    99</span>			ok = true
<a id="L100"></a><span class="ln">   100</span>		}
<a id="L101"></a><span class="ln">   101</span>	
<a id="L102"></a><span class="ln">   102</span>		return
<a id="L103"></a><span class="ln">   103</span>	}
<a id="L104"></a><span class="ln">   104</span>	
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// Subjects returns a list of the DER-encoded subjects of</span>
<a id="L106"></a><span class="ln">   106</span>	<span class="comment">// all of the certificates in the pool. </span>
<a id="L107"></a><span class="ln">   107</span>	func (s *CertPool) Subjects() (res [][]byte) {
<a id="L108"></a><span class="ln">   108</span>		res = make([][]byte, len(s.certs))
<a id="L109"></a><span class="ln">   109</span>		for i, c := range s.certs {
<a id="L110"></a><span class="ln">   110</span>			res[i] = c.RawSubject
<a id="L111"></a><span class="ln">   111</span>		}
<a id="L112"></a><span class="ln">   112</span>		return
<a id="L113"></a><span class="ln">   113</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

