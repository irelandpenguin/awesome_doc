<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/crypto/x509/pkix/pkix.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/crypto/x509/pkix/pkix.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package pkix contains shared, low level structures used for ASN.1 parsing</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// and serialization of X.509 certificates, CRL and OCSP.</span>
<a id="L7"></a><span class="ln">     7</span>	package pkix
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;encoding/asn1&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;math/big&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;time&#34;
<a id="L13"></a><span class="ln">    13</span>	)
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// AlgorithmIdentifier represents the ASN.1 structure of the same name. See RFC</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// 5280, section 4.1.1.2.</span>
<a id="L17"></a><span class="ln">    17</span>	type AlgorithmIdentifier struct {
<a id="L18"></a><span class="ln">    18</span>		Algorithm  asn1.ObjectIdentifier
<a id="L19"></a><span class="ln">    19</span>		Parameters asn1.RawValue `asn1:&#34;optional&#34;`
<a id="L20"></a><span class="ln">    20</span>	}
<a id="L21"></a><span class="ln">    21</span>	
<a id="L22"></a><span class="ln">    22</span>	type RDNSequence []RelativeDistinguishedNameSET
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>	type RelativeDistinguishedNameSET []AttributeTypeAndValue
<a id="L25"></a><span class="ln">    25</span>	
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// AttributeTypeAndValue mirrors the ASN.1 structure of the same name in</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// http://tools.ietf.org/html/rfc5280#section-4.1.2.4</span>
<a id="L28"></a><span class="ln">    28</span>	type AttributeTypeAndValue struct {
<a id="L29"></a><span class="ln">    29</span>		Type  asn1.ObjectIdentifier
<a id="L30"></a><span class="ln">    30</span>		Value interface{}
<a id="L31"></a><span class="ln">    31</span>	}
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// Extension represents the ASN.1 structure of the same name. See RFC</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// 5280, section 4.2.</span>
<a id="L35"></a><span class="ln">    35</span>	type Extension struct {
<a id="L36"></a><span class="ln">    36</span>		Id       asn1.ObjectIdentifier
<a id="L37"></a><span class="ln">    37</span>		Critical bool `asn1:&#34;optional&#34;`
<a id="L38"></a><span class="ln">    38</span>		Value    []byte
<a id="L39"></a><span class="ln">    39</span>	}
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// Name represents an X.509 distinguished name. This only includes the common</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">// elements of a DN.  Additional elements in the name are ignored.</span>
<a id="L43"></a><span class="ln">    43</span>	type Name struct {
<a id="L44"></a><span class="ln">    44</span>		Country, Organization, OrganizationalUnit []string
<a id="L45"></a><span class="ln">    45</span>		Locality, Province                        []string
<a id="L46"></a><span class="ln">    46</span>		StreetAddress, PostalCode                 []string
<a id="L47"></a><span class="ln">    47</span>		SerialNumber, CommonName                  string
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>		Names []AttributeTypeAndValue
<a id="L50"></a><span class="ln">    50</span>	}
<a id="L51"></a><span class="ln">    51</span>	
<a id="L52"></a><span class="ln">    52</span>	func (n *Name) FillFromRDNSequence(rdns *RDNSequence) {
<a id="L53"></a><span class="ln">    53</span>		for _, rdn := range *rdns {
<a id="L54"></a><span class="ln">    54</span>			if len(rdn) == 0 {
<a id="L55"></a><span class="ln">    55</span>				continue
<a id="L56"></a><span class="ln">    56</span>			}
<a id="L57"></a><span class="ln">    57</span>			atv := rdn[0]
<a id="L58"></a><span class="ln">    58</span>			n.Names = append(n.Names, atv)
<a id="L59"></a><span class="ln">    59</span>			value, ok := atv.Value.(string)
<a id="L60"></a><span class="ln">    60</span>			if !ok {
<a id="L61"></a><span class="ln">    61</span>				continue
<a id="L62"></a><span class="ln">    62</span>			}
<a id="L63"></a><span class="ln">    63</span>	
<a id="L64"></a><span class="ln">    64</span>			t := atv.Type
<a id="L65"></a><span class="ln">    65</span>			if len(t) == 4 &amp;&amp; t[0] == 2 &amp;&amp; t[1] == 5 &amp;&amp; t[2] == 4 {
<a id="L66"></a><span class="ln">    66</span>				switch t[3] {
<a id="L67"></a><span class="ln">    67</span>				case 3:
<a id="L68"></a><span class="ln">    68</span>					n.CommonName = value
<a id="L69"></a><span class="ln">    69</span>				case 5:
<a id="L70"></a><span class="ln">    70</span>					n.SerialNumber = value
<a id="L71"></a><span class="ln">    71</span>				case 6:
<a id="L72"></a><span class="ln">    72</span>					n.Country = append(n.Country, value)
<a id="L73"></a><span class="ln">    73</span>				case 7:
<a id="L74"></a><span class="ln">    74</span>					n.Locality = append(n.Locality, value)
<a id="L75"></a><span class="ln">    75</span>				case 8:
<a id="L76"></a><span class="ln">    76</span>					n.Province = append(n.Province, value)
<a id="L77"></a><span class="ln">    77</span>				case 9:
<a id="L78"></a><span class="ln">    78</span>					n.StreetAddress = append(n.StreetAddress, value)
<a id="L79"></a><span class="ln">    79</span>				case 10:
<a id="L80"></a><span class="ln">    80</span>					n.Organization = append(n.Organization, value)
<a id="L81"></a><span class="ln">    81</span>				case 11:
<a id="L82"></a><span class="ln">    82</span>					n.OrganizationalUnit = append(n.OrganizationalUnit, value)
<a id="L83"></a><span class="ln">    83</span>				case 17:
<a id="L84"></a><span class="ln">    84</span>					n.PostalCode = append(n.PostalCode, value)
<a id="L85"></a><span class="ln">    85</span>				}
<a id="L86"></a><span class="ln">    86</span>			}
<a id="L87"></a><span class="ln">    87</span>		}
<a id="L88"></a><span class="ln">    88</span>	}
<a id="L89"></a><span class="ln">    89</span>	
<a id="L90"></a><span class="ln">    90</span>	var (
<a id="L91"></a><span class="ln">    91</span>		oidCountry            = []int{2, 5, 4, 6}
<a id="L92"></a><span class="ln">    92</span>		oidOrganization       = []int{2, 5, 4, 10}
<a id="L93"></a><span class="ln">    93</span>		oidOrganizationalUnit = []int{2, 5, 4, 11}
<a id="L94"></a><span class="ln">    94</span>		oidCommonName         = []int{2, 5, 4, 3}
<a id="L95"></a><span class="ln">    95</span>		oidSerialNumber       = []int{2, 5, 4, 5}
<a id="L96"></a><span class="ln">    96</span>		oidLocality           = []int{2, 5, 4, 7}
<a id="L97"></a><span class="ln">    97</span>		oidProvince           = []int{2, 5, 4, 8}
<a id="L98"></a><span class="ln">    98</span>		oidStreetAddress      = []int{2, 5, 4, 9}
<a id="L99"></a><span class="ln">    99</span>		oidPostalCode         = []int{2, 5, 4, 17}
<a id="L100"></a><span class="ln">   100</span>	)
<a id="L101"></a><span class="ln">   101</span>	
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">// appendRDNs appends a relativeDistinguishedNameSET to the given RDNSequence</span>
<a id="L103"></a><span class="ln">   103</span>	<span class="comment">// and returns the new value. The relativeDistinguishedNameSET contains an</span>
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">// attributeTypeAndValue for each of the given values. See RFC 5280, A.1, and</span>
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// search for AttributeTypeAndValue.</span>
<a id="L106"></a><span class="ln">   106</span>	func appendRDNs(in RDNSequence, values []string, oid asn1.ObjectIdentifier) RDNSequence {
<a id="L107"></a><span class="ln">   107</span>		if len(values) == 0 {
<a id="L108"></a><span class="ln">   108</span>			return in
<a id="L109"></a><span class="ln">   109</span>		}
<a id="L110"></a><span class="ln">   110</span>	
<a id="L111"></a><span class="ln">   111</span>		s := make([]AttributeTypeAndValue, len(values))
<a id="L112"></a><span class="ln">   112</span>		for i, value := range values {
<a id="L113"></a><span class="ln">   113</span>			s[i].Type = oid
<a id="L114"></a><span class="ln">   114</span>			s[i].Value = value
<a id="L115"></a><span class="ln">   115</span>		}
<a id="L116"></a><span class="ln">   116</span>	
<a id="L117"></a><span class="ln">   117</span>		return append(in, s)
<a id="L118"></a><span class="ln">   118</span>	}
<a id="L119"></a><span class="ln">   119</span>	
<a id="L120"></a><span class="ln">   120</span>	func (n Name) ToRDNSequence() (ret RDNSequence) {
<a id="L121"></a><span class="ln">   121</span>		ret = appendRDNs(ret, n.Country, oidCountry)
<a id="L122"></a><span class="ln">   122</span>		ret = appendRDNs(ret, n.Organization, oidOrganization)
<a id="L123"></a><span class="ln">   123</span>		ret = appendRDNs(ret, n.OrganizationalUnit, oidOrganizationalUnit)
<a id="L124"></a><span class="ln">   124</span>		ret = appendRDNs(ret, n.Locality, oidLocality)
<a id="L125"></a><span class="ln">   125</span>		ret = appendRDNs(ret, n.Province, oidProvince)
<a id="L126"></a><span class="ln">   126</span>		ret = appendRDNs(ret, n.StreetAddress, oidStreetAddress)
<a id="L127"></a><span class="ln">   127</span>		ret = appendRDNs(ret, n.PostalCode, oidPostalCode)
<a id="L128"></a><span class="ln">   128</span>		if len(n.CommonName) &gt; 0 {
<a id="L129"></a><span class="ln">   129</span>			ret = appendRDNs(ret, []string{n.CommonName}, oidCommonName)
<a id="L130"></a><span class="ln">   130</span>		}
<a id="L131"></a><span class="ln">   131</span>		if len(n.SerialNumber) &gt; 0 {
<a id="L132"></a><span class="ln">   132</span>			ret = appendRDNs(ret, []string{n.SerialNumber}, oidSerialNumber)
<a id="L133"></a><span class="ln">   133</span>		}
<a id="L134"></a><span class="ln">   134</span>	
<a id="L135"></a><span class="ln">   135</span>		return ret
<a id="L136"></a><span class="ln">   136</span>	}
<a id="L137"></a><span class="ln">   137</span>	
<a id="L138"></a><span class="ln">   138</span>	<span class="comment">// CertificateList represents the ASN.1 structure of the same name. See RFC</span>
<a id="L139"></a><span class="ln">   139</span>	<span class="comment">// 5280, section 5.1. Use Certificate.CheckCRLSignature to verify the</span>
<a id="L140"></a><span class="ln">   140</span>	<span class="comment">// signature.</span>
<a id="L141"></a><span class="ln">   141</span>	type CertificateList struct {
<a id="L142"></a><span class="ln">   142</span>		TBSCertList        TBSCertificateList
<a id="L143"></a><span class="ln">   143</span>		SignatureAlgorithm AlgorithmIdentifier
<a id="L144"></a><span class="ln">   144</span>		SignatureValue     asn1.BitString
<a id="L145"></a><span class="ln">   145</span>	}
<a id="L146"></a><span class="ln">   146</span>	
<a id="L147"></a><span class="ln">   147</span>	<span class="comment">// HasExpired returns true iff now is past the expiry time of certList.</span>
<a id="L148"></a><span class="ln">   148</span>	func (certList *CertificateList) HasExpired(now time.Time) bool {
<a id="L149"></a><span class="ln">   149</span>		return now.After(certList.TBSCertList.NextUpdate)
<a id="L150"></a><span class="ln">   150</span>	}
<a id="L151"></a><span class="ln">   151</span>	
<a id="L152"></a><span class="ln">   152</span>	<span class="comment">// TBSCertificateList represents the ASN.1 structure of the same name. See RFC</span>
<a id="L153"></a><span class="ln">   153</span>	<span class="comment">// 5280, section 5.1.</span>
<a id="L154"></a><span class="ln">   154</span>	type TBSCertificateList struct {
<a id="L155"></a><span class="ln">   155</span>		Raw                 asn1.RawContent
<a id="L156"></a><span class="ln">   156</span>		Version             int `asn1:&#34;optional,default:2&#34;`
<a id="L157"></a><span class="ln">   157</span>		Signature           AlgorithmIdentifier
<a id="L158"></a><span class="ln">   158</span>		Issuer              RDNSequence
<a id="L159"></a><span class="ln">   159</span>		ThisUpdate          time.Time
<a id="L160"></a><span class="ln">   160</span>		NextUpdate          time.Time
<a id="L161"></a><span class="ln">   161</span>		RevokedCertificates []RevokedCertificate `asn1:&#34;optional&#34;`
<a id="L162"></a><span class="ln">   162</span>		Extensions          []Extension          `asn1:&#34;tag:0,optional,explicit&#34;`
<a id="L163"></a><span class="ln">   163</span>	}
<a id="L164"></a><span class="ln">   164</span>	
<a id="L165"></a><span class="ln">   165</span>	<span class="comment">// RevokedCertificate represents the ASN.1 structure of the same name. See RFC</span>
<a id="L166"></a><span class="ln">   166</span>	<span class="comment">// 5280, section 5.1.</span>
<a id="L167"></a><span class="ln">   167</span>	type RevokedCertificate struct {
<a id="L168"></a><span class="ln">   168</span>		SerialNumber   *big.Int
<a id="L169"></a><span class="ln">   169</span>		RevocationTime time.Time
<a id="L170"></a><span class="ln">   170</span>		Extensions     []Extension `asn1:&#34;optional&#34;`
<a id="L171"></a><span class="ln">   171</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

