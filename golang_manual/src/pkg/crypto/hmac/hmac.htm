<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/crypto/hmac/hmac.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/crypto/hmac/hmac.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package hmac implements the Keyed-Hash Message Authentication Code (HMAC) as</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// defined in U.S. Federal Information Processing Standards Publication 198.</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// An HMAC is a cryptographic hash that uses a key to sign a message.</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// The receiver verifies the hash by recomputing it using the same key.</span>
<a id="L9"></a><span class="ln">     9</span>	package hmac
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	import (
<a id="L12"></a><span class="ln">    12</span>		&#34;hash&#34;
<a id="L13"></a><span class="ln">    13</span>	)
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// FIPS 198:</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// http://csrc.nist.gov/publications/fips/fips198/fips-198a.pdf</span>
<a id="L17"></a><span class="ln">    17</span>	
<a id="L18"></a><span class="ln">    18</span>	<span class="comment">// key is zero padded to the block size of the hash function</span>
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// ipad = 0x36 byte repeated for key length</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// opad = 0x5c byte repeated for key length</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// hmac = H([key ^ opad] H([key ^ ipad] text))</span>
<a id="L22"></a><span class="ln">    22</span>	
<a id="L23"></a><span class="ln">    23</span>	type hmac struct {
<a id="L24"></a><span class="ln">    24</span>		size         int
<a id="L25"></a><span class="ln">    25</span>		blocksize    int
<a id="L26"></a><span class="ln">    26</span>		key, tmp     []byte
<a id="L27"></a><span class="ln">    27</span>		outer, inner hash.Hash
<a id="L28"></a><span class="ln">    28</span>	}
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>	func (h *hmac) tmpPad(xor byte) {
<a id="L31"></a><span class="ln">    31</span>		for i, k := range h.key {
<a id="L32"></a><span class="ln">    32</span>			h.tmp[i] = xor ^ k
<a id="L33"></a><span class="ln">    33</span>		}
<a id="L34"></a><span class="ln">    34</span>		for i := len(h.key); i &lt; h.blocksize; i++ {
<a id="L35"></a><span class="ln">    35</span>			h.tmp[i] = xor
<a id="L36"></a><span class="ln">    36</span>		}
<a id="L37"></a><span class="ln">    37</span>	}
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>	func (h *hmac) Sum(in []byte) []byte {
<a id="L40"></a><span class="ln">    40</span>		origLen := len(in)
<a id="L41"></a><span class="ln">    41</span>		in = h.inner.Sum(in)
<a id="L42"></a><span class="ln">    42</span>		h.tmpPad(0x5c)
<a id="L43"></a><span class="ln">    43</span>		copy(h.tmp[h.blocksize:], in[origLen:])
<a id="L44"></a><span class="ln">    44</span>		h.outer.Reset()
<a id="L45"></a><span class="ln">    45</span>		h.outer.Write(h.tmp)
<a id="L46"></a><span class="ln">    46</span>		return h.outer.Sum(in[:origLen])
<a id="L47"></a><span class="ln">    47</span>	}
<a id="L48"></a><span class="ln">    48</span>	
<a id="L49"></a><span class="ln">    49</span>	func (h *hmac) Write(p []byte) (n int, err error) {
<a id="L50"></a><span class="ln">    50</span>		return h.inner.Write(p)
<a id="L51"></a><span class="ln">    51</span>	}
<a id="L52"></a><span class="ln">    52</span>	
<a id="L53"></a><span class="ln">    53</span>	func (h *hmac) Size() int { return h.size }
<a id="L54"></a><span class="ln">    54</span>	
<a id="L55"></a><span class="ln">    55</span>	func (h *hmac) BlockSize() int { return h.blocksize }
<a id="L56"></a><span class="ln">    56</span>	
<a id="L57"></a><span class="ln">    57</span>	func (h *hmac) Reset() {
<a id="L58"></a><span class="ln">    58</span>		h.inner.Reset()
<a id="L59"></a><span class="ln">    59</span>		h.tmpPad(0x36)
<a id="L60"></a><span class="ln">    60</span>		h.inner.Write(h.tmp[0:h.blocksize])
<a id="L61"></a><span class="ln">    61</span>	}
<a id="L62"></a><span class="ln">    62</span>	
<a id="L63"></a><span class="ln">    63</span>	<span class="comment">// New returns a new HMAC hash using the given hash.Hash type and key.</span>
<a id="L64"></a><span class="ln">    64</span>	func New(h func() hash.Hash, key []byte) hash.Hash {
<a id="L65"></a><span class="ln">    65</span>		hm := new(hmac)
<a id="L66"></a><span class="ln">    66</span>		hm.outer = h()
<a id="L67"></a><span class="ln">    67</span>		hm.inner = h()
<a id="L68"></a><span class="ln">    68</span>		hm.size = hm.inner.Size()
<a id="L69"></a><span class="ln">    69</span>		hm.blocksize = hm.inner.BlockSize()
<a id="L70"></a><span class="ln">    70</span>		hm.tmp = make([]byte, hm.blocksize+hm.size)
<a id="L71"></a><span class="ln">    71</span>		if len(key) &gt; hm.blocksize {
<a id="L72"></a><span class="ln">    72</span>			<span class="comment">// If key is too big, hash it.</span>
<a id="L73"></a><span class="ln">    73</span>			hm.outer.Write(key)
<a id="L74"></a><span class="ln">    74</span>			key = hm.outer.Sum(nil)
<a id="L75"></a><span class="ln">    75</span>		}
<a id="L76"></a><span class="ln">    76</span>		hm.key = make([]byte, len(key))
<a id="L77"></a><span class="ln">    77</span>		copy(hm.key, key)
<a id="L78"></a><span class="ln">    78</span>		hm.Reset()
<a id="L79"></a><span class="ln">    79</span>		return hm
<a id="L80"></a><span class="ln">    80</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

