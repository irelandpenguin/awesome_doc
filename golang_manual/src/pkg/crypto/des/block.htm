<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/crypto/des/block.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/crypto/des/block.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package des
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	import (
<a id="L8"></a><span class="ln">     8</span>		&#34;encoding/binary&#34;
<a id="L9"></a><span class="ln">     9</span>	)
<a id="L10"></a><span class="ln">    10</span>	
<a id="L11"></a><span class="ln">    11</span>	func cryptBlock(subkeys []uint64, dst, src []byte, decrypt bool) {
<a id="L12"></a><span class="ln">    12</span>		b := binary.BigEndian.Uint64(src)
<a id="L13"></a><span class="ln">    13</span>		b = permuteBlock(b, initialPermutation[:])
<a id="L14"></a><span class="ln">    14</span>		left, right := uint32(b&gt;&gt;32), uint32(b)
<a id="L15"></a><span class="ln">    15</span>	
<a id="L16"></a><span class="ln">    16</span>		var subkey uint64
<a id="L17"></a><span class="ln">    17</span>		for i := 0; i &lt; 16; i++ {
<a id="L18"></a><span class="ln">    18</span>			if decrypt {
<a id="L19"></a><span class="ln">    19</span>				subkey = subkeys[15-i]
<a id="L20"></a><span class="ln">    20</span>			} else {
<a id="L21"></a><span class="ln">    21</span>				subkey = subkeys[i]
<a id="L22"></a><span class="ln">    22</span>			}
<a id="L23"></a><span class="ln">    23</span>	
<a id="L24"></a><span class="ln">    24</span>			left, right = right, left^feistel(right, subkey)
<a id="L25"></a><span class="ln">    25</span>		}
<a id="L26"></a><span class="ln">    26</span>		<span class="comment">// switch left &amp; right and perform final permutation</span>
<a id="L27"></a><span class="ln">    27</span>		preOutput := (uint64(right) &lt;&lt; 32) | uint64(left)
<a id="L28"></a><span class="ln">    28</span>		binary.BigEndian.PutUint64(dst, permuteBlock(preOutput, finalPermutation[:]))
<a id="L29"></a><span class="ln">    29</span>	}
<a id="L30"></a><span class="ln">    30</span>	
<a id="L31"></a><span class="ln">    31</span>	<span class="comment">// Encrypt one block from src into dst, using the subkeys.</span>
<a id="L32"></a><span class="ln">    32</span>	func encryptBlock(subkeys []uint64, dst, src []byte) {
<a id="L33"></a><span class="ln">    33</span>		cryptBlock(subkeys, dst, src, false)
<a id="L34"></a><span class="ln">    34</span>	}
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// Decrypt one block from src into dst, using the subkeys.</span>
<a id="L37"></a><span class="ln">    37</span>	func decryptBlock(subkeys []uint64, dst, src []byte) {
<a id="L38"></a><span class="ln">    38</span>		cryptBlock(subkeys, dst, src, true)
<a id="L39"></a><span class="ln">    39</span>	}
<a id="L40"></a><span class="ln">    40</span>	
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// DES Feistel function</span>
<a id="L42"></a><span class="ln">    42</span>	func feistel(right uint32, key uint64) (result uint32) {
<a id="L43"></a><span class="ln">    43</span>		sBoxLocations := key ^ permuteBlock(uint64(right), expansionFunction[:])
<a id="L44"></a><span class="ln">    44</span>		var sBoxResult uint32
<a id="L45"></a><span class="ln">    45</span>		for i := uint8(0); i &lt; 8; i++ {
<a id="L46"></a><span class="ln">    46</span>			sBoxLocation := uint8(sBoxLocations&gt;&gt;42) &amp; 0x3f
<a id="L47"></a><span class="ln">    47</span>			sBoxLocations &lt;&lt;= 6
<a id="L48"></a><span class="ln">    48</span>			<span class="comment">// row determined by 1st and 6th bit</span>
<a id="L49"></a><span class="ln">    49</span>			row := (sBoxLocation &amp; 0x1) | ((sBoxLocation &amp; 0x20) &gt;&gt; 4)
<a id="L50"></a><span class="ln">    50</span>			<span class="comment">// column is middle four bits</span>
<a id="L51"></a><span class="ln">    51</span>			column := (sBoxLocation &gt;&gt; 1) &amp; 0xf
<a id="L52"></a><span class="ln">    52</span>			sBoxResult |= uint32(sBoxes[i][row][column]) &lt;&lt; (4 * (7 - i))
<a id="L53"></a><span class="ln">    53</span>		}
<a id="L54"></a><span class="ln">    54</span>		return uint32(permuteBlock(uint64(sBoxResult), permutationFunction[:]))
<a id="L55"></a><span class="ln">    55</span>	}
<a id="L56"></a><span class="ln">    56</span>	
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">// general purpose function to perform DES block permutations</span>
<a id="L58"></a><span class="ln">    58</span>	func permuteBlock(src uint64, permutation []uint8) (block uint64) {
<a id="L59"></a><span class="ln">    59</span>		for position, n := range permutation {
<a id="L60"></a><span class="ln">    60</span>			bit := (src &gt;&gt; n) &amp; 1
<a id="L61"></a><span class="ln">    61</span>			block |= bit &lt;&lt; uint((len(permutation)-1)-position)
<a id="L62"></a><span class="ln">    62</span>		}
<a id="L63"></a><span class="ln">    63</span>		return
<a id="L64"></a><span class="ln">    64</span>	}
<a id="L65"></a><span class="ln">    65</span>	
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">// creates 16 28-bit blocks rotated according</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// to the rotation schedule</span>
<a id="L68"></a><span class="ln">    68</span>	func ksRotate(in uint32) (out []uint32) {
<a id="L69"></a><span class="ln">    69</span>		out = make([]uint32, 16)
<a id="L70"></a><span class="ln">    70</span>		last := in
<a id="L71"></a><span class="ln">    71</span>		for i := 0; i &lt; 16; i++ {
<a id="L72"></a><span class="ln">    72</span>			<span class="comment">// 28-bit circular left shift</span>
<a id="L73"></a><span class="ln">    73</span>			left := (last &lt;&lt; (4 + ksRotations[i])) &gt;&gt; 4
<a id="L74"></a><span class="ln">    74</span>			right := (last &lt;&lt; 4) &gt;&gt; (32 - ksRotations[i])
<a id="L75"></a><span class="ln">    75</span>			out[i] = left | right
<a id="L76"></a><span class="ln">    76</span>			last = out[i]
<a id="L77"></a><span class="ln">    77</span>		}
<a id="L78"></a><span class="ln">    78</span>		return
<a id="L79"></a><span class="ln">    79</span>	}
<a id="L80"></a><span class="ln">    80</span>	
<a id="L81"></a><span class="ln">    81</span>	<span class="comment">// creates 16 56-bit subkeys from the original key</span>
<a id="L82"></a><span class="ln">    82</span>	func (c *desCipher) generateSubkeys(keyBytes []byte) {
<a id="L83"></a><span class="ln">    83</span>		<span class="comment">// apply PC1 permutation to key</span>
<a id="L84"></a><span class="ln">    84</span>		key := binary.BigEndian.Uint64(keyBytes)
<a id="L85"></a><span class="ln">    85</span>		permutedKey := permuteBlock(key, permutedChoice1[:])
<a id="L86"></a><span class="ln">    86</span>	
<a id="L87"></a><span class="ln">    87</span>		<span class="comment">// rotate halves of permuted key according to the rotation schedule</span>
<a id="L88"></a><span class="ln">    88</span>		leftRotations := ksRotate(uint32(permutedKey &gt;&gt; 28))
<a id="L89"></a><span class="ln">    89</span>		rightRotations := ksRotate(uint32(permutedKey&lt;&lt;4) &gt;&gt; 4)
<a id="L90"></a><span class="ln">    90</span>	
<a id="L91"></a><span class="ln">    91</span>		<span class="comment">// generate subkeys</span>
<a id="L92"></a><span class="ln">    92</span>		for i := 0; i &lt; 16; i++ {
<a id="L93"></a><span class="ln">    93</span>			<span class="comment">// combine halves to form 56-bit input to PC2</span>
<a id="L94"></a><span class="ln">    94</span>			pc2Input := uint64(leftRotations[i])&lt;&lt;28 | uint64(rightRotations[i])
<a id="L95"></a><span class="ln">    95</span>			<span class="comment">// apply PC2 permutation to 7 byte input</span>
<a id="L96"></a><span class="ln">    96</span>			c.subkeys[i] = permuteBlock(pc2Input, permutedChoice2[:])
<a id="L97"></a><span class="ln">    97</span>		}
<a id="L98"></a><span class="ln">    98</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

