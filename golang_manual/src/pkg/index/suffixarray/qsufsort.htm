<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/index/suffixarray/qsufsort.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/index/suffixarray/qsufsort.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2011 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// This algorithm is based on &#34;Faster Suffix Sorting&#34;</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">//   by N. Jesper Larsson and Kunihiko Sadakane</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// paper: http://www.larsson.dogma.net/ssrev-tr.pdf</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// code:  http://www.larsson.dogma.net/qsufsort.c</span>
<a id="L9"></a><span class="ln">     9</span>	
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// This algorithm computes the suffix array sa by computing its inverse.</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// Consecutive groups of suffixes in sa are labeled as sorted groups or</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// unsorted groups. For a given pass of the sorter, all suffixes are ordered</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// up to their first h characters, and sa is h-ordered. Suffixes in their</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">// final positions and unambiguously sorted in h-order are in a sorted group.</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// Consecutive groups of suffixes with identical first h characters are an</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// unsorted group. In each pass of the algorithm, unsorted groups are sorted</span>
<a id="L17"></a><span class="ln">    17</span>	<span class="comment">// according to the group number of their following suffix.</span>
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// In the implementation, if sa[i] is negative, it indicates that i is</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// the first element of a sorted group of length -sa[i], and can be skipped.</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// An unsorted group sa[i:k] is given the group number of the index of its</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">// last element, k-1. The group numbers are stored in the inverse slice (inv),</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">// and when all groups are sorted, this slice is the inverse suffix array.</span>
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	package suffixarray
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>	import &#34;sort&#34;
<a id="L28"></a><span class="ln">    28</span>	
<a id="L29"></a><span class="ln">    29</span>	func qsufsort(data []byte) []int {
<a id="L30"></a><span class="ln">    30</span>		<span class="comment">// initial sorting by first byte of suffix</span>
<a id="L31"></a><span class="ln">    31</span>		sa := sortedByFirstByte(data)
<a id="L32"></a><span class="ln">    32</span>		if len(sa) &lt; 2 {
<a id="L33"></a><span class="ln">    33</span>			return sa
<a id="L34"></a><span class="ln">    34</span>		}
<a id="L35"></a><span class="ln">    35</span>		<span class="comment">// initialize the group lookup table</span>
<a id="L36"></a><span class="ln">    36</span>		<span class="comment">// this becomes the inverse of the suffix array when all groups are sorted</span>
<a id="L37"></a><span class="ln">    37</span>		inv := initGroups(sa, data)
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>		<span class="comment">// the index starts 1-ordered</span>
<a id="L40"></a><span class="ln">    40</span>		sufSortable := &amp;suffixSortable{sa: sa, inv: inv, h: 1}
<a id="L41"></a><span class="ln">    41</span>	
<a id="L42"></a><span class="ln">    42</span>		for sa[0] &gt; -len(sa) { <span class="comment">// until all suffixes are one big sorted group</span>
<a id="L43"></a><span class="ln">    43</span>			<span class="comment">// The suffixes are h-ordered, make them 2*h-ordered</span>
<a id="L44"></a><span class="ln">    44</span>			pi := 0 <span class="comment">// pi is first position of first group</span>
<a id="L45"></a><span class="ln">    45</span>			sl := 0 <span class="comment">// sl is negated length of sorted groups</span>
<a id="L46"></a><span class="ln">    46</span>			for pi &lt; len(sa) {
<a id="L47"></a><span class="ln">    47</span>				if s := sa[pi]; s &lt; 0 { <span class="comment">// if pi starts sorted group</span>
<a id="L48"></a><span class="ln">    48</span>					pi -= s <span class="comment">// skip over sorted group</span>
<a id="L49"></a><span class="ln">    49</span>					sl += s <span class="comment">// add negated length to sl</span>
<a id="L50"></a><span class="ln">    50</span>				} else { <span class="comment">// if pi starts unsorted group</span>
<a id="L51"></a><span class="ln">    51</span>					if sl != 0 {
<a id="L52"></a><span class="ln">    52</span>						sa[pi+sl] = sl <span class="comment">// combine sorted groups before pi</span>
<a id="L53"></a><span class="ln">    53</span>						sl = 0
<a id="L54"></a><span class="ln">    54</span>					}
<a id="L55"></a><span class="ln">    55</span>					pk := inv[s] + 1 <span class="comment">// pk-1 is last position of unsorted group</span>
<a id="L56"></a><span class="ln">    56</span>					sufSortable.sa = sa[pi:pk]
<a id="L57"></a><span class="ln">    57</span>					sort.Sort(sufSortable)
<a id="L58"></a><span class="ln">    58</span>					sufSortable.updateGroups(pi)
<a id="L59"></a><span class="ln">    59</span>					pi = pk <span class="comment">// next group</span>
<a id="L60"></a><span class="ln">    60</span>				}
<a id="L61"></a><span class="ln">    61</span>			}
<a id="L62"></a><span class="ln">    62</span>			if sl != 0 { <span class="comment">// if the array ends with a sorted group</span>
<a id="L63"></a><span class="ln">    63</span>				sa[pi+sl] = sl <span class="comment">// combine sorted groups at end of sa</span>
<a id="L64"></a><span class="ln">    64</span>			}
<a id="L65"></a><span class="ln">    65</span>	
<a id="L66"></a><span class="ln">    66</span>			sufSortable.h *= 2 <span class="comment">// double sorted depth</span>
<a id="L67"></a><span class="ln">    67</span>		}
<a id="L68"></a><span class="ln">    68</span>	
<a id="L69"></a><span class="ln">    69</span>		for i := range sa { <span class="comment">// reconstruct suffix array from inverse</span>
<a id="L70"></a><span class="ln">    70</span>			sa[inv[i]] = i
<a id="L71"></a><span class="ln">    71</span>		}
<a id="L72"></a><span class="ln">    72</span>		return sa
<a id="L73"></a><span class="ln">    73</span>	}
<a id="L74"></a><span class="ln">    74</span>	
<a id="L75"></a><span class="ln">    75</span>	func sortedByFirstByte(data []byte) []int {
<a id="L76"></a><span class="ln">    76</span>		<span class="comment">// total byte counts</span>
<a id="L77"></a><span class="ln">    77</span>		var count [256]int
<a id="L78"></a><span class="ln">    78</span>		for _, b := range data {
<a id="L79"></a><span class="ln">    79</span>			count[b]++
<a id="L80"></a><span class="ln">    80</span>		}
<a id="L81"></a><span class="ln">    81</span>		<span class="comment">// make count[b] equal index of first occurrence of b in sorted array</span>
<a id="L82"></a><span class="ln">    82</span>		sum := 0
<a id="L83"></a><span class="ln">    83</span>		for b := range count {
<a id="L84"></a><span class="ln">    84</span>			count[b], sum = sum, count[b]+sum
<a id="L85"></a><span class="ln">    85</span>		}
<a id="L86"></a><span class="ln">    86</span>		<span class="comment">// iterate through bytes, placing index into the correct spot in sa</span>
<a id="L87"></a><span class="ln">    87</span>		sa := make([]int, len(data))
<a id="L88"></a><span class="ln">    88</span>		for i, b := range data {
<a id="L89"></a><span class="ln">    89</span>			sa[count[b]] = i
<a id="L90"></a><span class="ln">    90</span>			count[b]++
<a id="L91"></a><span class="ln">    91</span>		}
<a id="L92"></a><span class="ln">    92</span>		return sa
<a id="L93"></a><span class="ln">    93</span>	}
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>	func initGroups(sa []int, data []byte) []int {
<a id="L96"></a><span class="ln">    96</span>		<span class="comment">// label contiguous same-letter groups with the same group number</span>
<a id="L97"></a><span class="ln">    97</span>		inv := make([]int, len(data))
<a id="L98"></a><span class="ln">    98</span>		prevGroup := len(sa) - 1
<a id="L99"></a><span class="ln">    99</span>		groupByte := data[sa[prevGroup]]
<a id="L100"></a><span class="ln">   100</span>		for i := len(sa) - 1; i &gt;= 0; i-- {
<a id="L101"></a><span class="ln">   101</span>			if b := data[sa[i]]; b &lt; groupByte {
<a id="L102"></a><span class="ln">   102</span>				if prevGroup == i+1 {
<a id="L103"></a><span class="ln">   103</span>					sa[i+1] = -1
<a id="L104"></a><span class="ln">   104</span>				}
<a id="L105"></a><span class="ln">   105</span>				groupByte = b
<a id="L106"></a><span class="ln">   106</span>				prevGroup = i
<a id="L107"></a><span class="ln">   107</span>			}
<a id="L108"></a><span class="ln">   108</span>			inv[sa[i]] = prevGroup
<a id="L109"></a><span class="ln">   109</span>			if prevGroup == 0 {
<a id="L110"></a><span class="ln">   110</span>				sa[0] = -1
<a id="L111"></a><span class="ln">   111</span>			}
<a id="L112"></a><span class="ln">   112</span>		}
<a id="L113"></a><span class="ln">   113</span>		<span class="comment">// Separate out the final suffix to the start of its group.</span>
<a id="L114"></a><span class="ln">   114</span>		<span class="comment">// This is necessary to ensure the suffix &#34;a&#34; is before &#34;aba&#34;</span>
<a id="L115"></a><span class="ln">   115</span>		<span class="comment">// when using a potentially unstable sort.</span>
<a id="L116"></a><span class="ln">   116</span>		lastByte := data[len(data)-1]
<a id="L117"></a><span class="ln">   117</span>		s := -1
<a id="L118"></a><span class="ln">   118</span>		for i := range sa {
<a id="L119"></a><span class="ln">   119</span>			if sa[i] &gt;= 0 {
<a id="L120"></a><span class="ln">   120</span>				if data[sa[i]] == lastByte &amp;&amp; s == -1 {
<a id="L121"></a><span class="ln">   121</span>					s = i
<a id="L122"></a><span class="ln">   122</span>				}
<a id="L123"></a><span class="ln">   123</span>				if sa[i] == len(sa)-1 {
<a id="L124"></a><span class="ln">   124</span>					sa[i], sa[s] = sa[s], sa[i]
<a id="L125"></a><span class="ln">   125</span>					inv[sa[s]] = s
<a id="L126"></a><span class="ln">   126</span>					sa[s] = -1 <span class="comment">// mark it as an isolated sorted group</span>
<a id="L127"></a><span class="ln">   127</span>					break
<a id="L128"></a><span class="ln">   128</span>				}
<a id="L129"></a><span class="ln">   129</span>			}
<a id="L130"></a><span class="ln">   130</span>		}
<a id="L131"></a><span class="ln">   131</span>		return inv
<a id="L132"></a><span class="ln">   132</span>	}
<a id="L133"></a><span class="ln">   133</span>	
<a id="L134"></a><span class="ln">   134</span>	type suffixSortable struct {
<a id="L135"></a><span class="ln">   135</span>		sa  []int
<a id="L136"></a><span class="ln">   136</span>		inv []int
<a id="L137"></a><span class="ln">   137</span>		h   int
<a id="L138"></a><span class="ln">   138</span>		buf []int <span class="comment">// common scratch space</span>
<a id="L139"></a><span class="ln">   139</span>	}
<a id="L140"></a><span class="ln">   140</span>	
<a id="L141"></a><span class="ln">   141</span>	func (x *suffixSortable) Len() int           { return len(x.sa) }
<a id="L142"></a><span class="ln">   142</span>	func (x *suffixSortable) Less(i, j int) bool { return x.inv[x.sa[i]+x.h] &lt; x.inv[x.sa[j]+x.h] }
<a id="L143"></a><span class="ln">   143</span>	func (x *suffixSortable) Swap(i, j int)      { x.sa[i], x.sa[j] = x.sa[j], x.sa[i] }
<a id="L144"></a><span class="ln">   144</span>	
<a id="L145"></a><span class="ln">   145</span>	func (x *suffixSortable) updateGroups(offset int) {
<a id="L146"></a><span class="ln">   146</span>		bounds := x.buf[0:0]
<a id="L147"></a><span class="ln">   147</span>		group := x.inv[x.sa[0]+x.h]
<a id="L148"></a><span class="ln">   148</span>		for i := 1; i &lt; len(x.sa); i++ {
<a id="L149"></a><span class="ln">   149</span>			if g := x.inv[x.sa[i]+x.h]; g &gt; group {
<a id="L150"></a><span class="ln">   150</span>				bounds = append(bounds, i)
<a id="L151"></a><span class="ln">   151</span>				group = g
<a id="L152"></a><span class="ln">   152</span>			}
<a id="L153"></a><span class="ln">   153</span>		}
<a id="L154"></a><span class="ln">   154</span>		bounds = append(bounds, len(x.sa))
<a id="L155"></a><span class="ln">   155</span>		x.buf = bounds
<a id="L156"></a><span class="ln">   156</span>	
<a id="L157"></a><span class="ln">   157</span>		<span class="comment">// update the group numberings after all new groups are determined</span>
<a id="L158"></a><span class="ln">   158</span>		prev := 0
<a id="L159"></a><span class="ln">   159</span>		for _, b := range bounds {
<a id="L160"></a><span class="ln">   160</span>			for i := prev; i &lt; b; i++ {
<a id="L161"></a><span class="ln">   161</span>				x.inv[x.sa[i]] = offset + b - 1
<a id="L162"></a><span class="ln">   162</span>			}
<a id="L163"></a><span class="ln">   163</span>			if b-prev == 1 {
<a id="L164"></a><span class="ln">   164</span>				x.sa[prev] = -1
<a id="L165"></a><span class="ln">   165</span>			}
<a id="L166"></a><span class="ln">   166</span>			prev = b
<a id="L167"></a><span class="ln">   167</span>		}
<a id="L168"></a><span class="ln">   168</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

