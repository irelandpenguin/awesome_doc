<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/index/suffixarray/suffixarray.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/index/suffixarray/suffixarray.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2010 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package suffixarray implements substring search in logarithmic time using</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// an in-memory suffix array.</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">//</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">// Example use:</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">//</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">//	// create index for some data</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">//	index := suffixarray.New(data)</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">//</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">//	// lookup byte slice s</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">//	offsets1 := index.Lookup(s, -1) // the list of all indices where s occurs in data</span>
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">//	offsets2 := index.Lookup(s, 3)  // the list of at most 3 indices where s occurs in data</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">//</span>
<a id="L17"></a><span class="ln">    17</span>	package suffixarray
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	import (
<a id="L20"></a><span class="ln">    20</span>		&#34;bytes&#34;
<a id="L21"></a><span class="ln">    21</span>		&#34;encoding/binary&#34;
<a id="L22"></a><span class="ln">    22</span>		&#34;io&#34;
<a id="L23"></a><span class="ln">    23</span>		&#34;regexp&#34;
<a id="L24"></a><span class="ln">    24</span>		&#34;sort&#34;
<a id="L25"></a><span class="ln">    25</span>	)
<a id="L26"></a><span class="ln">    26</span>	
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// Index implements a suffix array for fast substring search.</span>
<a id="L28"></a><span class="ln">    28</span>	type Index struct {
<a id="L29"></a><span class="ln">    29</span>		data []byte
<a id="L30"></a><span class="ln">    30</span>		sa   []int <span class="comment">// suffix array for data; len(sa) == len(data)</span>
<a id="L31"></a><span class="ln">    31</span>	}
<a id="L32"></a><span class="ln">    32</span>	
<a id="L33"></a><span class="ln">    33</span>	<span class="comment">// New creates a new Index for data.</span>
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// Index creation time is O(N*log(N)) for N = len(data).</span>
<a id="L35"></a><span class="ln">    35</span>	func New(data []byte) *Index {
<a id="L36"></a><span class="ln">    36</span>		return &amp;Index{data, qsufsort(data)}
<a id="L37"></a><span class="ln">    37</span>	}
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// writeInt writes an int x to w using buf to buffer the write.</span>
<a id="L40"></a><span class="ln">    40</span>	func writeInt(w io.Writer, buf []byte, x int) error {
<a id="L41"></a><span class="ln">    41</span>		binary.PutVarint(buf, int64(x))
<a id="L42"></a><span class="ln">    42</span>		_, err := w.Write(buf[0:binary.MaxVarintLen64])
<a id="L43"></a><span class="ln">    43</span>		return err
<a id="L44"></a><span class="ln">    44</span>	}
<a id="L45"></a><span class="ln">    45</span>	
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">// readInt reads an int x from r using buf to buffer the read and returns x.</span>
<a id="L47"></a><span class="ln">    47</span>	func readInt(r io.Reader, buf []byte) (int, error) {
<a id="L48"></a><span class="ln">    48</span>		_, err := io.ReadFull(r, buf[0:binary.MaxVarintLen64]) <span class="comment">// ok to continue with error</span>
<a id="L49"></a><span class="ln">    49</span>		x, _ := binary.Varint(buf)
<a id="L50"></a><span class="ln">    50</span>		return int(x), err
<a id="L51"></a><span class="ln">    51</span>	}
<a id="L52"></a><span class="ln">    52</span>	
<a id="L53"></a><span class="ln">    53</span>	<span class="comment">// writeSlice writes data[:n] to w and returns n.</span>
<a id="L54"></a><span class="ln">    54</span>	<span class="comment">// It uses buf to buffer the write.</span>
<a id="L55"></a><span class="ln">    55</span>	func writeSlice(w io.Writer, buf []byte, data []int) (n int, err error) {
<a id="L56"></a><span class="ln">    56</span>		<span class="comment">// encode as many elements as fit into buf</span>
<a id="L57"></a><span class="ln">    57</span>		p := binary.MaxVarintLen64
<a id="L58"></a><span class="ln">    58</span>		for ; n &lt; len(data) &amp;&amp; p+binary.MaxVarintLen64 &lt;= len(buf); n++ {
<a id="L59"></a><span class="ln">    59</span>			p += binary.PutUvarint(buf[p:], uint64(data[n]))
<a id="L60"></a><span class="ln">    60</span>		}
<a id="L61"></a><span class="ln">    61</span>	
<a id="L62"></a><span class="ln">    62</span>		<span class="comment">// update buffer size</span>
<a id="L63"></a><span class="ln">    63</span>		binary.PutVarint(buf, int64(p))
<a id="L64"></a><span class="ln">    64</span>	
<a id="L65"></a><span class="ln">    65</span>		<span class="comment">// write buffer</span>
<a id="L66"></a><span class="ln">    66</span>		_, err = w.Write(buf[0:p])
<a id="L67"></a><span class="ln">    67</span>		return
<a id="L68"></a><span class="ln">    68</span>	}
<a id="L69"></a><span class="ln">    69</span>	
<a id="L70"></a><span class="ln">    70</span>	<span class="comment">// readSlice reads data[:n] from r and returns n.</span>
<a id="L71"></a><span class="ln">    71</span>	<span class="comment">// It uses buf to buffer the read.</span>
<a id="L72"></a><span class="ln">    72</span>	func readSlice(r io.Reader, buf []byte, data []int) (n int, err error) {
<a id="L73"></a><span class="ln">    73</span>		<span class="comment">// read buffer size</span>
<a id="L74"></a><span class="ln">    74</span>		var size int
<a id="L75"></a><span class="ln">    75</span>		size, err = readInt(r, buf)
<a id="L76"></a><span class="ln">    76</span>		if err != nil {
<a id="L77"></a><span class="ln">    77</span>			return
<a id="L78"></a><span class="ln">    78</span>		}
<a id="L79"></a><span class="ln">    79</span>	
<a id="L80"></a><span class="ln">    80</span>		<span class="comment">// read buffer w/o the size</span>
<a id="L81"></a><span class="ln">    81</span>		if _, err = io.ReadFull(r, buf[binary.MaxVarintLen64:size]); err != nil {
<a id="L82"></a><span class="ln">    82</span>			return
<a id="L83"></a><span class="ln">    83</span>		}
<a id="L84"></a><span class="ln">    84</span>	
<a id="L85"></a><span class="ln">    85</span>		<span class="comment">// decode as many elements as present in buf</span>
<a id="L86"></a><span class="ln">    86</span>		for p := binary.MaxVarintLen64; p &lt; size; n++ {
<a id="L87"></a><span class="ln">    87</span>			x, w := binary.Uvarint(buf[p:])
<a id="L88"></a><span class="ln">    88</span>			data[n] = int(x)
<a id="L89"></a><span class="ln">    89</span>			p += w
<a id="L90"></a><span class="ln">    90</span>		}
<a id="L91"></a><span class="ln">    91</span>	
<a id="L92"></a><span class="ln">    92</span>		return
<a id="L93"></a><span class="ln">    93</span>	}
<a id="L94"></a><span class="ln">    94</span>	
<a id="L95"></a><span class="ln">    95</span>	const bufSize = 16 &lt;&lt; 10 <span class="comment">// reasonable for BenchmarkSaveRestore</span>
<a id="L96"></a><span class="ln">    96</span>	
<a id="L97"></a><span class="ln">    97</span>	<span class="comment">// Read reads the index from r into x; x must not be nil.</span>
<a id="L98"></a><span class="ln">    98</span>	func (x *Index) Read(r io.Reader) error {
<a id="L99"></a><span class="ln">    99</span>		<span class="comment">// buffer for all reads</span>
<a id="L100"></a><span class="ln">   100</span>		buf := make([]byte, bufSize)
<a id="L101"></a><span class="ln">   101</span>	
<a id="L102"></a><span class="ln">   102</span>		<span class="comment">// read length</span>
<a id="L103"></a><span class="ln">   103</span>		n, err := readInt(r, buf)
<a id="L104"></a><span class="ln">   104</span>		if err != nil {
<a id="L105"></a><span class="ln">   105</span>			return err
<a id="L106"></a><span class="ln">   106</span>		}
<a id="L107"></a><span class="ln">   107</span>	
<a id="L108"></a><span class="ln">   108</span>		<span class="comment">// allocate space</span>
<a id="L109"></a><span class="ln">   109</span>		if 2*n &lt; cap(x.data) || cap(x.data) &lt; n {
<a id="L110"></a><span class="ln">   110</span>			<span class="comment">// new data is significantly smaller or larger then</span>
<a id="L111"></a><span class="ln">   111</span>			<span class="comment">// existing buffers - allocate new ones</span>
<a id="L112"></a><span class="ln">   112</span>			x.data = make([]byte, n)
<a id="L113"></a><span class="ln">   113</span>			x.sa = make([]int, n)
<a id="L114"></a><span class="ln">   114</span>		} else {
<a id="L115"></a><span class="ln">   115</span>			<span class="comment">// re-use existing buffers</span>
<a id="L116"></a><span class="ln">   116</span>			x.data = x.data[0:n]
<a id="L117"></a><span class="ln">   117</span>			x.sa = x.sa[0:n]
<a id="L118"></a><span class="ln">   118</span>		}
<a id="L119"></a><span class="ln">   119</span>	
<a id="L120"></a><span class="ln">   120</span>		<span class="comment">// read data</span>
<a id="L121"></a><span class="ln">   121</span>		if _, err := io.ReadFull(r, x.data); err != nil {
<a id="L122"></a><span class="ln">   122</span>			return err
<a id="L123"></a><span class="ln">   123</span>		}
<a id="L124"></a><span class="ln">   124</span>	
<a id="L125"></a><span class="ln">   125</span>		<span class="comment">// read index</span>
<a id="L126"></a><span class="ln">   126</span>		for sa := x.sa; len(sa) &gt; 0; {
<a id="L127"></a><span class="ln">   127</span>			n, err := readSlice(r, buf, sa)
<a id="L128"></a><span class="ln">   128</span>			if err != nil {
<a id="L129"></a><span class="ln">   129</span>				return err
<a id="L130"></a><span class="ln">   130</span>			}
<a id="L131"></a><span class="ln">   131</span>			sa = sa[n:]
<a id="L132"></a><span class="ln">   132</span>		}
<a id="L133"></a><span class="ln">   133</span>		return nil
<a id="L134"></a><span class="ln">   134</span>	}
<a id="L135"></a><span class="ln">   135</span>	
<a id="L136"></a><span class="ln">   136</span>	<span class="comment">// Write writes the index x to w.</span>
<a id="L137"></a><span class="ln">   137</span>	func (x *Index) Write(w io.Writer) error {
<a id="L138"></a><span class="ln">   138</span>		<span class="comment">// buffer for all writes</span>
<a id="L139"></a><span class="ln">   139</span>		buf := make([]byte, bufSize)
<a id="L140"></a><span class="ln">   140</span>	
<a id="L141"></a><span class="ln">   141</span>		<span class="comment">// write length</span>
<a id="L142"></a><span class="ln">   142</span>		if err := writeInt(w, buf, len(x.data)); err != nil {
<a id="L143"></a><span class="ln">   143</span>			return err
<a id="L144"></a><span class="ln">   144</span>		}
<a id="L145"></a><span class="ln">   145</span>	
<a id="L146"></a><span class="ln">   146</span>		<span class="comment">// write data</span>
<a id="L147"></a><span class="ln">   147</span>		if _, err := w.Write(x.data); err != nil {
<a id="L148"></a><span class="ln">   148</span>			return err
<a id="L149"></a><span class="ln">   149</span>		}
<a id="L150"></a><span class="ln">   150</span>	
<a id="L151"></a><span class="ln">   151</span>		<span class="comment">// write index</span>
<a id="L152"></a><span class="ln">   152</span>		for sa := x.sa; len(sa) &gt; 0; {
<a id="L153"></a><span class="ln">   153</span>			n, err := writeSlice(w, buf, sa)
<a id="L154"></a><span class="ln">   154</span>			if err != nil {
<a id="L155"></a><span class="ln">   155</span>				return err
<a id="L156"></a><span class="ln">   156</span>			}
<a id="L157"></a><span class="ln">   157</span>			sa = sa[n:]
<a id="L158"></a><span class="ln">   158</span>		}
<a id="L159"></a><span class="ln">   159</span>		return nil
<a id="L160"></a><span class="ln">   160</span>	}
<a id="L161"></a><span class="ln">   161</span>	
<a id="L162"></a><span class="ln">   162</span>	<span class="comment">// Bytes returns the data over which the index was created.</span>
<a id="L163"></a><span class="ln">   163</span>	<span class="comment">// It must not be modified.</span>
<a id="L164"></a><span class="ln">   164</span>	<span class="comment">//</span>
<a id="L165"></a><span class="ln">   165</span>	func (x *Index) Bytes() []byte {
<a id="L166"></a><span class="ln">   166</span>		return x.data
<a id="L167"></a><span class="ln">   167</span>	}
<a id="L168"></a><span class="ln">   168</span>	
<a id="L169"></a><span class="ln">   169</span>	func (x *Index) at(i int) []byte {
<a id="L170"></a><span class="ln">   170</span>		return x.data[x.sa[i]:]
<a id="L171"></a><span class="ln">   171</span>	}
<a id="L172"></a><span class="ln">   172</span>	
<a id="L173"></a><span class="ln">   173</span>	<span class="comment">// lookupAll returns a slice into the matching region of the index.</span>
<a id="L174"></a><span class="ln">   174</span>	<span class="comment">// The runtime is O(log(N)*len(s)).</span>
<a id="L175"></a><span class="ln">   175</span>	func (x *Index) lookupAll(s []byte) []int {
<a id="L176"></a><span class="ln">   176</span>		<span class="comment">// find matching suffix index range [i:j]</span>
<a id="L177"></a><span class="ln">   177</span>		<span class="comment">// find the first index where s would be the prefix</span>
<a id="L178"></a><span class="ln">   178</span>		i := sort.Search(len(x.sa), func(i int) bool { return bytes.Compare(x.at(i), s) &gt;= 0 })
<a id="L179"></a><span class="ln">   179</span>		<span class="comment">// starting at i, find the first index at which s is not a prefix</span>
<a id="L180"></a><span class="ln">   180</span>		j := i + sort.Search(len(x.sa)-i, func(j int) bool { return !bytes.HasPrefix(x.at(j+i), s) })
<a id="L181"></a><span class="ln">   181</span>		return x.sa[i:j]
<a id="L182"></a><span class="ln">   182</span>	}
<a id="L183"></a><span class="ln">   183</span>	
<a id="L184"></a><span class="ln">   184</span>	<span class="comment">// Lookup returns an unsorted list of at most n indices where the byte string s</span>
<a id="L185"></a><span class="ln">   185</span>	<span class="comment">// occurs in the indexed data. If n &lt; 0, all occurrences are returned.</span>
<a id="L186"></a><span class="ln">   186</span>	<span class="comment">// The result is nil if s is empty, s is not found, or n == 0.</span>
<a id="L187"></a><span class="ln">   187</span>	<span class="comment">// Lookup time is O(log(N)*len(s) + len(result)) where N is the</span>
<a id="L188"></a><span class="ln">   188</span>	<span class="comment">// size of the indexed data.</span>
<a id="L189"></a><span class="ln">   189</span>	<span class="comment">//</span>
<a id="L190"></a><span class="ln">   190</span>	func (x *Index) Lookup(s []byte, n int) (result []int) {
<a id="L191"></a><span class="ln">   191</span>		if len(s) &gt; 0 &amp;&amp; n != 0 {
<a id="L192"></a><span class="ln">   192</span>			matches := x.lookupAll(s)
<a id="L193"></a><span class="ln">   193</span>			if n &lt; 0 || len(matches) &lt; n {
<a id="L194"></a><span class="ln">   194</span>				n = len(matches)
<a id="L195"></a><span class="ln">   195</span>			}
<a id="L196"></a><span class="ln">   196</span>			<span class="comment">// 0 &lt;= n &lt;= len(matches)</span>
<a id="L197"></a><span class="ln">   197</span>			if n &gt; 0 {
<a id="L198"></a><span class="ln">   198</span>				result = make([]int, n)
<a id="L199"></a><span class="ln">   199</span>				copy(result, matches)
<a id="L200"></a><span class="ln">   200</span>			}
<a id="L201"></a><span class="ln">   201</span>		}
<a id="L202"></a><span class="ln">   202</span>		return
<a id="L203"></a><span class="ln">   203</span>	}
<a id="L204"></a><span class="ln">   204</span>	
<a id="L205"></a><span class="ln">   205</span>	<span class="comment">// FindAllIndex returns a sorted list of non-overlapping matches of the</span>
<a id="L206"></a><span class="ln">   206</span>	<span class="comment">// regular expression r, where a match is a pair of indices specifying</span>
<a id="L207"></a><span class="ln">   207</span>	<span class="comment">// the matched slice of x.Bytes(). If n &lt; 0, all matches are returned</span>
<a id="L208"></a><span class="ln">   208</span>	<span class="comment">// in successive order. Otherwise, at most n matches are returned and</span>
<a id="L209"></a><span class="ln">   209</span>	<span class="comment">// they may not be successive. The result is nil if there are no matches,</span>
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// or if n == 0.</span>
<a id="L211"></a><span class="ln">   211</span>	<span class="comment">//</span>
<a id="L212"></a><span class="ln">   212</span>	func (x *Index) FindAllIndex(r *regexp.Regexp, n int) (result [][]int) {
<a id="L213"></a><span class="ln">   213</span>		<span class="comment">// a non-empty literal prefix is used to determine possible</span>
<a id="L214"></a><span class="ln">   214</span>		<span class="comment">// match start indices with Lookup</span>
<a id="L215"></a><span class="ln">   215</span>		prefix, complete := r.LiteralPrefix()
<a id="L216"></a><span class="ln">   216</span>		lit := []byte(prefix)
<a id="L217"></a><span class="ln">   217</span>	
<a id="L218"></a><span class="ln">   218</span>		<span class="comment">// worst-case scenario: no literal prefix</span>
<a id="L219"></a><span class="ln">   219</span>		if prefix == &#34;&#34; {
<a id="L220"></a><span class="ln">   220</span>			return r.FindAllIndex(x.data, n)
<a id="L221"></a><span class="ln">   221</span>		}
<a id="L222"></a><span class="ln">   222</span>	
<a id="L223"></a><span class="ln">   223</span>		<span class="comment">// if regexp is a literal just use Lookup and convert its</span>
<a id="L224"></a><span class="ln">   224</span>		<span class="comment">// result into match pairs</span>
<a id="L225"></a><span class="ln">   225</span>		if complete {
<a id="L226"></a><span class="ln">   226</span>			<span class="comment">// Lookup returns indices that may belong to overlapping matches.</span>
<a id="L227"></a><span class="ln">   227</span>			<span class="comment">// After eliminating them, we may end up with fewer than n matches.</span>
<a id="L228"></a><span class="ln">   228</span>			<span class="comment">// If we don&#39;t have enough at the end, redo the search with an</span>
<a id="L229"></a><span class="ln">   229</span>			<span class="comment">// increased value n1, but only if Lookup returned all the requested</span>
<a id="L230"></a><span class="ln">   230</span>			<span class="comment">// indices in the first place (if it returned fewer than that then</span>
<a id="L231"></a><span class="ln">   231</span>			<span class="comment">// there cannot be more).</span>
<a id="L232"></a><span class="ln">   232</span>			for n1 := n; ; n1 += 2 * (n - len(result)) <span class="comment">/* overflow ok */</span> {
<a id="L233"></a><span class="ln">   233</span>				indices := x.Lookup(lit, n1)
<a id="L234"></a><span class="ln">   234</span>				if len(indices) == 0 {
<a id="L235"></a><span class="ln">   235</span>					return
<a id="L236"></a><span class="ln">   236</span>				}
<a id="L237"></a><span class="ln">   237</span>				sort.Ints(indices)
<a id="L238"></a><span class="ln">   238</span>				pairs := make([]int, 2*len(indices))
<a id="L239"></a><span class="ln">   239</span>				result = make([][]int, len(indices))
<a id="L240"></a><span class="ln">   240</span>				count := 0
<a id="L241"></a><span class="ln">   241</span>				prev := 0
<a id="L242"></a><span class="ln">   242</span>				for _, i := range indices {
<a id="L243"></a><span class="ln">   243</span>					if count == n {
<a id="L244"></a><span class="ln">   244</span>						break
<a id="L245"></a><span class="ln">   245</span>					}
<a id="L246"></a><span class="ln">   246</span>					<span class="comment">// ignore indices leading to overlapping matches</span>
<a id="L247"></a><span class="ln">   247</span>					if prev &lt;= i {
<a id="L248"></a><span class="ln">   248</span>						j := 2 * count
<a id="L249"></a><span class="ln">   249</span>						pairs[j+0] = i
<a id="L250"></a><span class="ln">   250</span>						pairs[j+1] = i + len(lit)
<a id="L251"></a><span class="ln">   251</span>						result[count] = pairs[j : j+2]
<a id="L252"></a><span class="ln">   252</span>						count++
<a id="L253"></a><span class="ln">   253</span>						prev = i + len(lit)
<a id="L254"></a><span class="ln">   254</span>					}
<a id="L255"></a><span class="ln">   255</span>				}
<a id="L256"></a><span class="ln">   256</span>				result = result[0:count]
<a id="L257"></a><span class="ln">   257</span>				if len(result) &gt;= n || len(indices) != n1 {
<a id="L258"></a><span class="ln">   258</span>					<span class="comment">// found all matches or there&#39;s no chance to find more</span>
<a id="L259"></a><span class="ln">   259</span>					<span class="comment">// (n and n1 can be negative)</span>
<a id="L260"></a><span class="ln">   260</span>					break
<a id="L261"></a><span class="ln">   261</span>				}
<a id="L262"></a><span class="ln">   262</span>			}
<a id="L263"></a><span class="ln">   263</span>			if len(result) == 0 {
<a id="L264"></a><span class="ln">   264</span>				result = nil
<a id="L265"></a><span class="ln">   265</span>			}
<a id="L266"></a><span class="ln">   266</span>			return
<a id="L267"></a><span class="ln">   267</span>		}
<a id="L268"></a><span class="ln">   268</span>	
<a id="L269"></a><span class="ln">   269</span>		<span class="comment">// regexp has a non-empty literal prefix; Lookup(lit) computes</span>
<a id="L270"></a><span class="ln">   270</span>		<span class="comment">// the indices of possible complete matches; use these as starting</span>
<a id="L271"></a><span class="ln">   271</span>		<span class="comment">// points for anchored searches</span>
<a id="L272"></a><span class="ln">   272</span>		<span class="comment">// (regexp &#34;^&#34; matches beginning of input, not beginning of line)</span>
<a id="L273"></a><span class="ln">   273</span>		r = regexp.MustCompile(&#34;^&#34; + r.String()) <span class="comment">// compiles because r compiled</span>
<a id="L274"></a><span class="ln">   274</span>	
<a id="L275"></a><span class="ln">   275</span>		<span class="comment">// same comment about Lookup applies here as in the loop above</span>
<a id="L276"></a><span class="ln">   276</span>		for n1 := n; ; n1 += 2 * (n - len(result)) <span class="comment">/* overflow ok */</span> {
<a id="L277"></a><span class="ln">   277</span>			indices := x.Lookup(lit, n1)
<a id="L278"></a><span class="ln">   278</span>			if len(indices) == 0 {
<a id="L279"></a><span class="ln">   279</span>				return
<a id="L280"></a><span class="ln">   280</span>			}
<a id="L281"></a><span class="ln">   281</span>			sort.Ints(indices)
<a id="L282"></a><span class="ln">   282</span>			result = result[0:0]
<a id="L283"></a><span class="ln">   283</span>			prev := 0
<a id="L284"></a><span class="ln">   284</span>			for _, i := range indices {
<a id="L285"></a><span class="ln">   285</span>				if len(result) == n {
<a id="L286"></a><span class="ln">   286</span>					break
<a id="L287"></a><span class="ln">   287</span>				}
<a id="L288"></a><span class="ln">   288</span>				m := r.FindIndex(x.data[i:]) <span class="comment">// anchored search - will not run off</span>
<a id="L289"></a><span class="ln">   289</span>				<span class="comment">// ignore indices leading to overlapping matches</span>
<a id="L290"></a><span class="ln">   290</span>				if m != nil &amp;&amp; prev &lt;= i {
<a id="L291"></a><span class="ln">   291</span>					m[0] = i <span class="comment">// correct m</span>
<a id="L292"></a><span class="ln">   292</span>					m[1] += i
<a id="L293"></a><span class="ln">   293</span>					result = append(result, m)
<a id="L294"></a><span class="ln">   294</span>					prev = m[1]
<a id="L295"></a><span class="ln">   295</span>				}
<a id="L296"></a><span class="ln">   296</span>			}
<a id="L297"></a><span class="ln">   297</span>			if len(result) &gt;= n || len(indices) != n1 {
<a id="L298"></a><span class="ln">   298</span>				<span class="comment">// found all matches or there&#39;s no chance to find more</span>
<a id="L299"></a><span class="ln">   299</span>				<span class="comment">// (n and n1 can be negative)</span>
<a id="L300"></a><span class="ln">   300</span>				break
<a id="L301"></a><span class="ln">   301</span>			}
<a id="L302"></a><span class="ln">   302</span>		}
<a id="L303"></a><span class="ln">   303</span>		if len(result) == 0 {
<a id="L304"></a><span class="ln">   304</span>			result = nil
<a id="L305"></a><span class="ln">   305</span>		}
<a id="L306"></a><span class="ln">   306</span>		return
<a id="L307"></a><span class="ln">   307</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

