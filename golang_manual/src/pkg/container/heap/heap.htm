<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/container/heap/heap.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/container/heap/heap.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	<span class="comment">// Package heap provides heap operations for any type that implements</span>
<a id="L6"></a><span class="ln">     6</span>	<span class="comment">// heap.Interface. A heap is a tree with the property that each node is the</span>
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// highest-valued node in its subtree.</span>
<a id="L8"></a><span class="ln">     8</span>	<span class="comment">//</span>
<a id="L9"></a><span class="ln">     9</span>	<span class="comment">// A heap is a common way to implement a priority queue. To build a priority</span>
<a id="L10"></a><span class="ln">    10</span>	<span class="comment">// queue, implement the Heap interface with the (negative) priority as the</span>
<a id="L11"></a><span class="ln">    11</span>	<span class="comment">// ordering for the Less method, so Push adds items while Pop removes the</span>
<a id="L12"></a><span class="ln">    12</span>	<span class="comment">// highest-priority item from the queue. The Examples include such an</span>
<a id="L13"></a><span class="ln">    13</span>	<span class="comment">// implementation; the file example_test.go has the complete source.</span>
<a id="L14"></a><span class="ln">    14</span>	<span class="comment">//</span>
<a id="L15"></a><span class="ln">    15</span>	package heap
<a id="L16"></a><span class="ln">    16</span>	
<a id="L17"></a><span class="ln">    17</span>	import &#34;sort&#34;
<a id="L18"></a><span class="ln">    18</span>	
<a id="L19"></a><span class="ln">    19</span>	<span class="comment">// Any type that implements heap.Interface may be used as a</span>
<a id="L20"></a><span class="ln">    20</span>	<span class="comment">// min-heap with the following invariants (established after</span>
<a id="L21"></a><span class="ln">    21</span>	<span class="comment">// Init has been called or if the data is empty or sorted):</span>
<a id="L22"></a><span class="ln">    22</span>	<span class="comment">//</span>
<a id="L23"></a><span class="ln">    23</span>	<span class="comment">//	!h.Less(j, i) for 0 &lt;= i &lt; h.Len() and j = 2*i+1 or 2*i+2 and j &lt; h.Len()</span>
<a id="L24"></a><span class="ln">    24</span>	<span class="comment">//</span>
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// Note that Push and Pop in this interface are for package heap&#39;s</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// implementation to call.  To add and remove things from the heap,</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// use heap.Push and heap.Pop.</span>
<a id="L28"></a><span class="ln">    28</span>	type Interface interface {
<a id="L29"></a><span class="ln">    29</span>		sort.Interface
<a id="L30"></a><span class="ln">    30</span>		Push(x interface{}) <span class="comment">// add x as element Len()</span>
<a id="L31"></a><span class="ln">    31</span>		Pop() interface{}   <span class="comment">// remove and return element Len() - 1.</span>
<a id="L32"></a><span class="ln">    32</span>	}
<a id="L33"></a><span class="ln">    33</span>	
<a id="L34"></a><span class="ln">    34</span>	<span class="comment">// A heap must be initialized before any of the heap operations</span>
<a id="L35"></a><span class="ln">    35</span>	<span class="comment">// can be used. Init is idempotent with respect to the heap invariants</span>
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// and may be called whenever the heap invariants may have been invalidated.</span>
<a id="L37"></a><span class="ln">    37</span>	<span class="comment">// Its complexity is O(n) where n = h.Len().</span>
<a id="L38"></a><span class="ln">    38</span>	<span class="comment">//</span>
<a id="L39"></a><span class="ln">    39</span>	func Init(h Interface) {
<a id="L40"></a><span class="ln">    40</span>		<span class="comment">// heapify</span>
<a id="L41"></a><span class="ln">    41</span>		n := h.Len()
<a id="L42"></a><span class="ln">    42</span>		for i := n/2 - 1; i &gt;= 0; i-- {
<a id="L43"></a><span class="ln">    43</span>			down(h, i, n)
<a id="L44"></a><span class="ln">    44</span>		}
<a id="L45"></a><span class="ln">    45</span>	}
<a id="L46"></a><span class="ln">    46</span>	
<a id="L47"></a><span class="ln">    47</span>	<span class="comment">// Push pushes the element x onto the heap. The complexity is</span>
<a id="L48"></a><span class="ln">    48</span>	<span class="comment">// O(log(n)) where n = h.Len().</span>
<a id="L49"></a><span class="ln">    49</span>	<span class="comment">//</span>
<a id="L50"></a><span class="ln">    50</span>	func Push(h Interface, x interface{}) {
<a id="L51"></a><span class="ln">    51</span>		h.Push(x)
<a id="L52"></a><span class="ln">    52</span>		up(h, h.Len()-1)
<a id="L53"></a><span class="ln">    53</span>	}
<a id="L54"></a><span class="ln">    54</span>	
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// Pop removes the minimum element (according to Less) from the heap</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// and returns it. The complexity is O(log(n)) where n = h.Len().</span>
<a id="L57"></a><span class="ln">    57</span>	<span class="comment">// Same as Remove(h, 0).</span>
<a id="L58"></a><span class="ln">    58</span>	<span class="comment">//</span>
<a id="L59"></a><span class="ln">    59</span>	func Pop(h Interface) interface{} {
<a id="L60"></a><span class="ln">    60</span>		n := h.Len() - 1
<a id="L61"></a><span class="ln">    61</span>		h.Swap(0, n)
<a id="L62"></a><span class="ln">    62</span>		down(h, 0, n)
<a id="L63"></a><span class="ln">    63</span>		return h.Pop()
<a id="L64"></a><span class="ln">    64</span>	}
<a id="L65"></a><span class="ln">    65</span>	
<a id="L66"></a><span class="ln">    66</span>	<span class="comment">// Remove removes the element at index i from the heap.</span>
<a id="L67"></a><span class="ln">    67</span>	<span class="comment">// The complexity is O(log(n)) where n = h.Len().</span>
<a id="L68"></a><span class="ln">    68</span>	<span class="comment">//</span>
<a id="L69"></a><span class="ln">    69</span>	func Remove(h Interface, i int) interface{} {
<a id="L70"></a><span class="ln">    70</span>		n := h.Len() - 1
<a id="L71"></a><span class="ln">    71</span>		if n != i {
<a id="L72"></a><span class="ln">    72</span>			h.Swap(i, n)
<a id="L73"></a><span class="ln">    73</span>			down(h, i, n)
<a id="L74"></a><span class="ln">    74</span>			up(h, i)
<a id="L75"></a><span class="ln">    75</span>		}
<a id="L76"></a><span class="ln">    76</span>		return h.Pop()
<a id="L77"></a><span class="ln">    77</span>	}
<a id="L78"></a><span class="ln">    78</span>	
<a id="L79"></a><span class="ln">    79</span>	func up(h Interface, j int) {
<a id="L80"></a><span class="ln">    80</span>		for {
<a id="L81"></a><span class="ln">    81</span>			i := (j - 1) / 2 <span class="comment">// parent</span>
<a id="L82"></a><span class="ln">    82</span>			if i == j || h.Less(i, j) {
<a id="L83"></a><span class="ln">    83</span>				break
<a id="L84"></a><span class="ln">    84</span>			}
<a id="L85"></a><span class="ln">    85</span>			h.Swap(i, j)
<a id="L86"></a><span class="ln">    86</span>			j = i
<a id="L87"></a><span class="ln">    87</span>		}
<a id="L88"></a><span class="ln">    88</span>	}
<a id="L89"></a><span class="ln">    89</span>	
<a id="L90"></a><span class="ln">    90</span>	func down(h Interface, i, n int) {
<a id="L91"></a><span class="ln">    91</span>		for {
<a id="L92"></a><span class="ln">    92</span>			j1 := 2*i + 1
<a id="L93"></a><span class="ln">    93</span>			if j1 &gt;= n {
<a id="L94"></a><span class="ln">    94</span>				break
<a id="L95"></a><span class="ln">    95</span>			}
<a id="L96"></a><span class="ln">    96</span>			j := j1 <span class="comment">// left child</span>
<a id="L97"></a><span class="ln">    97</span>			if j2 := j1 + 1; j2 &lt; n &amp;&amp; !h.Less(j1, j2) {
<a id="L98"></a><span class="ln">    98</span>				j = j2 <span class="comment">// = 2*i + 2  // right child</span>
<a id="L99"></a><span class="ln">    99</span>			}
<a id="L100"></a><span class="ln">   100</span>			if h.Less(i, j) {
<a id="L101"></a><span class="ln">   101</span>				break
<a id="L102"></a><span class="ln">   102</span>			}
<a id="L103"></a><span class="ln">   103</span>			h.Swap(i, j)
<a id="L104"></a><span class="ln">   104</span>			i = j
<a id="L105"></a><span class="ln">   105</span>		}
<a id="L106"></a><span class="ln">   106</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

