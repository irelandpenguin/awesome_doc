<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>src/pkg/bytes/buffer.go - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="/doc/style.css">
<script type="text/javascript" src="/doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>



</div></div>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Source file src/pkg/bytes/buffer.go</h1>




<div id="nav"></div>


<pre><a id="L1"></a><span class="ln">     1</span>	<span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span>
<a id="L2"></a><span class="ln">     2</span>	<span class="comment">// Use of this source code is governed by a BSD-style</span>
<a id="L3"></a><span class="ln">     3</span>	<span class="comment">// license that can be found in the LICENSE file.</span>
<a id="L4"></a><span class="ln">     4</span>	
<a id="L5"></a><span class="ln">     5</span>	package bytes
<a id="L6"></a><span class="ln">     6</span>	
<a id="L7"></a><span class="ln">     7</span>	<span class="comment">// Simple byte buffer for marshaling data.</span>
<a id="L8"></a><span class="ln">     8</span>	
<a id="L9"></a><span class="ln">     9</span>	import (
<a id="L10"></a><span class="ln">    10</span>		&#34;errors&#34;
<a id="L11"></a><span class="ln">    11</span>		&#34;io&#34;
<a id="L12"></a><span class="ln">    12</span>		&#34;unicode/utf8&#34;
<a id="L13"></a><span class="ln">    13</span>	)
<a id="L14"></a><span class="ln">    14</span>	
<a id="L15"></a><span class="ln">    15</span>	<span class="comment">// A Buffer is a variable-sized buffer of bytes with Read and Write methods.</span>
<a id="L16"></a><span class="ln">    16</span>	<span class="comment">// The zero value for Buffer is an empty buffer ready to use.</span>
<a id="L17"></a><span class="ln">    17</span>	type Buffer struct {
<a id="L18"></a><span class="ln">    18</span>		buf       []byte            <span class="comment">// contents are the bytes buf[off : len(buf)]</span>
<a id="L19"></a><span class="ln">    19</span>		off       int               <span class="comment">// read at &amp;buf[off], write at &amp;buf[len(buf)]</span>
<a id="L20"></a><span class="ln">    20</span>		runeBytes [utf8.UTFMax]byte <span class="comment">// avoid allocation of slice on each WriteByte or Rune</span>
<a id="L21"></a><span class="ln">    21</span>		bootstrap [64]byte          <span class="comment">// memory to hold first slice; helps small buffers (Printf) avoid allocation.</span>
<a id="L22"></a><span class="ln">    22</span>		lastRead  readOp            <span class="comment">// last read operation, so that Unread* can work correctly.</span>
<a id="L23"></a><span class="ln">    23</span>	}
<a id="L24"></a><span class="ln">    24</span>	
<a id="L25"></a><span class="ln">    25</span>	<span class="comment">// The readOp constants describe the last action performed on</span>
<a id="L26"></a><span class="ln">    26</span>	<span class="comment">// the buffer, so that UnreadRune and UnreadByte can</span>
<a id="L27"></a><span class="ln">    27</span>	<span class="comment">// check for invalid usage.</span>
<a id="L28"></a><span class="ln">    28</span>	type readOp int
<a id="L29"></a><span class="ln">    29</span>	
<a id="L30"></a><span class="ln">    30</span>	const (
<a id="L31"></a><span class="ln">    31</span>		opInvalid  readOp = iota <span class="comment">// Non-read operation.</span>
<a id="L32"></a><span class="ln">    32</span>		opReadRune               <span class="comment">// Read rune.</span>
<a id="L33"></a><span class="ln">    33</span>		opRead                   <span class="comment">// Any other read operation.</span>
<a id="L34"></a><span class="ln">    34</span>	)
<a id="L35"></a><span class="ln">    35</span>	
<a id="L36"></a><span class="ln">    36</span>	<span class="comment">// ErrTooLarge is passed to panic if memory cannot be allocated to store data in a buffer.</span>
<a id="L37"></a><span class="ln">    37</span>	var ErrTooLarge = errors.New(&#34;bytes.Buffer: too large&#34;)
<a id="L38"></a><span class="ln">    38</span>	
<a id="L39"></a><span class="ln">    39</span>	<span class="comment">// Bytes returns a slice of the contents of the unread portion of the buffer;</span>
<a id="L40"></a><span class="ln">    40</span>	<span class="comment">// len(b.Bytes()) == b.Len().  If the caller changes the contents of the</span>
<a id="L41"></a><span class="ln">    41</span>	<span class="comment">// returned slice, the contents of the buffer will change provided there</span>
<a id="L42"></a><span class="ln">    42</span>	<span class="comment">// are no intervening method calls on the Buffer.</span>
<a id="L43"></a><span class="ln">    43</span>	func (b *Buffer) Bytes() []byte { return b.buf[b.off:] }
<a id="L44"></a><span class="ln">    44</span>	
<a id="L45"></a><span class="ln">    45</span>	<span class="comment">// String returns the contents of the unread portion of the buffer</span>
<a id="L46"></a><span class="ln">    46</span>	<span class="comment">// as a string.  If the Buffer is a nil pointer, it returns &#34;&lt;nil&gt;&#34;.</span>
<a id="L47"></a><span class="ln">    47</span>	func (b *Buffer) String() string {
<a id="L48"></a><span class="ln">    48</span>		if b == nil {
<a id="L49"></a><span class="ln">    49</span>			<span class="comment">// Special case, useful in debugging.</span>
<a id="L50"></a><span class="ln">    50</span>			return &#34;&lt;nil&gt;&#34;
<a id="L51"></a><span class="ln">    51</span>		}
<a id="L52"></a><span class="ln">    52</span>		return string(b.buf[b.off:])
<a id="L53"></a><span class="ln">    53</span>	}
<a id="L54"></a><span class="ln">    54</span>	
<a id="L55"></a><span class="ln">    55</span>	<span class="comment">// Len returns the number of bytes of the unread portion of the buffer;</span>
<a id="L56"></a><span class="ln">    56</span>	<span class="comment">// b.Len() == len(b.Bytes()).</span>
<a id="L57"></a><span class="ln">    57</span>	func (b *Buffer) Len() int { return len(b.buf) - b.off }
<a id="L58"></a><span class="ln">    58</span>	
<a id="L59"></a><span class="ln">    59</span>	<span class="comment">// Truncate discards all but the first n unread bytes from the buffer.</span>
<a id="L60"></a><span class="ln">    60</span>	<span class="comment">// It panics if n is negative or greater than the length of the buffer.</span>
<a id="L61"></a><span class="ln">    61</span>	func (b *Buffer) Truncate(n int) {
<a id="L62"></a><span class="ln">    62</span>		b.lastRead = opInvalid
<a id="L63"></a><span class="ln">    63</span>		switch {
<a id="L64"></a><span class="ln">    64</span>		case n &lt; 0 || n &gt; b.Len():
<a id="L65"></a><span class="ln">    65</span>			panic(&#34;bytes.Buffer: truncation out of range&#34;)
<a id="L66"></a><span class="ln">    66</span>		case n == 0:
<a id="L67"></a><span class="ln">    67</span>			<span class="comment">// Reuse buffer space.</span>
<a id="L68"></a><span class="ln">    68</span>			b.off = 0
<a id="L69"></a><span class="ln">    69</span>		}
<a id="L70"></a><span class="ln">    70</span>		b.buf = b.buf[0 : b.off+n]
<a id="L71"></a><span class="ln">    71</span>	}
<a id="L72"></a><span class="ln">    72</span>	
<a id="L73"></a><span class="ln">    73</span>	<span class="comment">// Reset resets the buffer so it has no content.</span>
<a id="L74"></a><span class="ln">    74</span>	<span class="comment">// b.Reset() is the same as b.Truncate(0).</span>
<a id="L75"></a><span class="ln">    75</span>	func (b *Buffer) Reset() { b.Truncate(0) }
<a id="L76"></a><span class="ln">    76</span>	
<a id="L77"></a><span class="ln">    77</span>	<span class="comment">// grow grows the buffer to guarantee space for n more bytes.</span>
<a id="L78"></a><span class="ln">    78</span>	<span class="comment">// It returns the index where bytes should be written.</span>
<a id="L79"></a><span class="ln">    79</span>	<span class="comment">// If the buffer can&#39;t grow it will panic with ErrTooLarge.</span>
<a id="L80"></a><span class="ln">    80</span>	func (b *Buffer) grow(n int) int {
<a id="L81"></a><span class="ln">    81</span>		m := b.Len()
<a id="L82"></a><span class="ln">    82</span>		<span class="comment">// If buffer is empty, reset to recover space.</span>
<a id="L83"></a><span class="ln">    83</span>		if m == 0 &amp;&amp; b.off != 0 {
<a id="L84"></a><span class="ln">    84</span>			b.Truncate(0)
<a id="L85"></a><span class="ln">    85</span>		}
<a id="L86"></a><span class="ln">    86</span>		if len(b.buf)+n &gt; cap(b.buf) {
<a id="L87"></a><span class="ln">    87</span>			var buf []byte
<a id="L88"></a><span class="ln">    88</span>			if b.buf == nil &amp;&amp; n &lt;= len(b.bootstrap) {
<a id="L89"></a><span class="ln">    89</span>				buf = b.bootstrap[0:]
<a id="L90"></a><span class="ln">    90</span>			} else {
<a id="L91"></a><span class="ln">    91</span>				<span class="comment">// not enough space anywhere</span>
<a id="L92"></a><span class="ln">    92</span>				buf = makeSlice(2*cap(b.buf) + n)
<a id="L93"></a><span class="ln">    93</span>				copy(buf, b.buf[b.off:])
<a id="L94"></a><span class="ln">    94</span>			}
<a id="L95"></a><span class="ln">    95</span>			b.buf = buf
<a id="L96"></a><span class="ln">    96</span>			b.off = 0
<a id="L97"></a><span class="ln">    97</span>		}
<a id="L98"></a><span class="ln">    98</span>		b.buf = b.buf[0 : b.off+m+n]
<a id="L99"></a><span class="ln">    99</span>		return b.off + m
<a id="L100"></a><span class="ln">   100</span>	}
<a id="L101"></a><span class="ln">   101</span>	
<a id="L102"></a><span class="ln">   102</span>	<span class="comment">// Write appends the contents of p to the buffer.  The return</span>
<a id="L103"></a><span class="ln">   103</span>	<span class="comment">// value n is the length of p; err is always nil.</span>
<a id="L104"></a><span class="ln">   104</span>	<span class="comment">// If the buffer becomes too large, Write will panic with</span>
<a id="L105"></a><span class="ln">   105</span>	<span class="comment">// ErrTooLarge.</span>
<a id="L106"></a><span class="ln">   106</span>	func (b *Buffer) Write(p []byte) (n int, err error) {
<a id="L107"></a><span class="ln">   107</span>		b.lastRead = opInvalid
<a id="L108"></a><span class="ln">   108</span>		m := b.grow(len(p))
<a id="L109"></a><span class="ln">   109</span>		return copy(b.buf[m:], p), nil
<a id="L110"></a><span class="ln">   110</span>	}
<a id="L111"></a><span class="ln">   111</span>	
<a id="L112"></a><span class="ln">   112</span>	<span class="comment">// WriteString appends the contents of s to the buffer.  The return</span>
<a id="L113"></a><span class="ln">   113</span>	<span class="comment">// value n is the length of s; err is always nil.</span>
<a id="L114"></a><span class="ln">   114</span>	<span class="comment">// If the buffer becomes too large, WriteString will panic with</span>
<a id="L115"></a><span class="ln">   115</span>	<span class="comment">// ErrTooLarge.</span>
<a id="L116"></a><span class="ln">   116</span>	func (b *Buffer) WriteString(s string) (n int, err error) {
<a id="L117"></a><span class="ln">   117</span>		b.lastRead = opInvalid
<a id="L118"></a><span class="ln">   118</span>		m := b.grow(len(s))
<a id="L119"></a><span class="ln">   119</span>		return copy(b.buf[m:], s), nil
<a id="L120"></a><span class="ln">   120</span>	}
<a id="L121"></a><span class="ln">   121</span>	
<a id="L122"></a><span class="ln">   122</span>	<span class="comment">// MinRead is the minimum slice size passed to a Read call by</span>
<a id="L123"></a><span class="ln">   123</span>	<span class="comment">// Buffer.ReadFrom.  As long as the Buffer has at least MinRead bytes beyond</span>
<a id="L124"></a><span class="ln">   124</span>	<span class="comment">// what is required to hold the contents of r, ReadFrom will not grow the</span>
<a id="L125"></a><span class="ln">   125</span>	<span class="comment">// underlying buffer.</span>
<a id="L126"></a><span class="ln">   126</span>	const MinRead = 512
<a id="L127"></a><span class="ln">   127</span>	
<a id="L128"></a><span class="ln">   128</span>	<span class="comment">// ReadFrom reads data from r until EOF and appends it to the buffer.</span>
<a id="L129"></a><span class="ln">   129</span>	<span class="comment">// The return value n is the number of bytes read.</span>
<a id="L130"></a><span class="ln">   130</span>	<span class="comment">// Any error except io.EOF encountered during the read</span>
<a id="L131"></a><span class="ln">   131</span>	<span class="comment">// is also returned.</span>
<a id="L132"></a><span class="ln">   132</span>	<span class="comment">// If the buffer becomes too large, ReadFrom will panic with</span>
<a id="L133"></a><span class="ln">   133</span>	<span class="comment">// ErrTooLarge.</span>
<a id="L134"></a><span class="ln">   134</span>	func (b *Buffer) ReadFrom(r io.Reader) (n int64, err error) {
<a id="L135"></a><span class="ln">   135</span>		b.lastRead = opInvalid
<a id="L136"></a><span class="ln">   136</span>		<span class="comment">// If buffer is empty, reset to recover space.</span>
<a id="L137"></a><span class="ln">   137</span>		if b.off &gt;= len(b.buf) {
<a id="L138"></a><span class="ln">   138</span>			b.Truncate(0)
<a id="L139"></a><span class="ln">   139</span>		}
<a id="L140"></a><span class="ln">   140</span>		for {
<a id="L141"></a><span class="ln">   141</span>			if free := cap(b.buf) - len(b.buf); free &lt; MinRead {
<a id="L142"></a><span class="ln">   142</span>				<span class="comment">// not enough space at end</span>
<a id="L143"></a><span class="ln">   143</span>				newBuf := b.buf
<a id="L144"></a><span class="ln">   144</span>				if b.off+free &lt; MinRead {
<a id="L145"></a><span class="ln">   145</span>					<span class="comment">// not enough space using beginning of buffer;</span>
<a id="L146"></a><span class="ln">   146</span>					<span class="comment">// double buffer capacity</span>
<a id="L147"></a><span class="ln">   147</span>					newBuf = makeSlice(2*cap(b.buf) + MinRead)
<a id="L148"></a><span class="ln">   148</span>				}
<a id="L149"></a><span class="ln">   149</span>				copy(newBuf, b.buf[b.off:])
<a id="L150"></a><span class="ln">   150</span>				b.buf = newBuf[:len(b.buf)-b.off]
<a id="L151"></a><span class="ln">   151</span>				b.off = 0
<a id="L152"></a><span class="ln">   152</span>			}
<a id="L153"></a><span class="ln">   153</span>			m, e := r.Read(b.buf[len(b.buf):cap(b.buf)])
<a id="L154"></a><span class="ln">   154</span>			b.buf = b.buf[0 : len(b.buf)+m]
<a id="L155"></a><span class="ln">   155</span>			n += int64(m)
<a id="L156"></a><span class="ln">   156</span>			if e == io.EOF {
<a id="L157"></a><span class="ln">   157</span>				break
<a id="L158"></a><span class="ln">   158</span>			}
<a id="L159"></a><span class="ln">   159</span>			if e != nil {
<a id="L160"></a><span class="ln">   160</span>				return n, e
<a id="L161"></a><span class="ln">   161</span>			}
<a id="L162"></a><span class="ln">   162</span>		}
<a id="L163"></a><span class="ln">   163</span>		return n, nil <span class="comment">// err is EOF, so return nil explicitly</span>
<a id="L164"></a><span class="ln">   164</span>	}
<a id="L165"></a><span class="ln">   165</span>	
<a id="L166"></a><span class="ln">   166</span>	<span class="comment">// makeSlice allocates a slice of size n. If the allocation fails, it panics</span>
<a id="L167"></a><span class="ln">   167</span>	<span class="comment">// with ErrTooLarge.</span>
<a id="L168"></a><span class="ln">   168</span>	func makeSlice(n int) []byte {
<a id="L169"></a><span class="ln">   169</span>		<span class="comment">// If the make fails, give a known error.</span>
<a id="L170"></a><span class="ln">   170</span>		defer func() {
<a id="L171"></a><span class="ln">   171</span>			if recover() != nil {
<a id="L172"></a><span class="ln">   172</span>				panic(ErrTooLarge)
<a id="L173"></a><span class="ln">   173</span>			}
<a id="L174"></a><span class="ln">   174</span>		}()
<a id="L175"></a><span class="ln">   175</span>		return make([]byte, n)
<a id="L176"></a><span class="ln">   176</span>	}
<a id="L177"></a><span class="ln">   177</span>	
<a id="L178"></a><span class="ln">   178</span>	<span class="comment">// WriteTo writes data to w until the buffer is drained or an error</span>
<a id="L179"></a><span class="ln">   179</span>	<span class="comment">// occurs. The return value n is the number of bytes written; it always</span>
<a id="L180"></a><span class="ln">   180</span>	<span class="comment">// fits into an int, but it is int64 to match the io.WriterTo interface.</span>
<a id="L181"></a><span class="ln">   181</span>	<span class="comment">// Any error encountered during the write is also returned.</span>
<a id="L182"></a><span class="ln">   182</span>	func (b *Buffer) WriteTo(w io.Writer) (n int64, err error) {
<a id="L183"></a><span class="ln">   183</span>		b.lastRead = opInvalid
<a id="L184"></a><span class="ln">   184</span>		if b.off &lt; len(b.buf) {
<a id="L185"></a><span class="ln">   185</span>			nBytes := b.Len()
<a id="L186"></a><span class="ln">   186</span>			m, e := w.Write(b.buf[b.off:])
<a id="L187"></a><span class="ln">   187</span>			if m &gt; nBytes {
<a id="L188"></a><span class="ln">   188</span>				panic(&#34;bytes.Buffer.WriteTo: invalid Write count&#34;)
<a id="L189"></a><span class="ln">   189</span>			}
<a id="L190"></a><span class="ln">   190</span>			b.off += m
<a id="L191"></a><span class="ln">   191</span>			n = int64(m)
<a id="L192"></a><span class="ln">   192</span>			if e != nil {
<a id="L193"></a><span class="ln">   193</span>				return n, e
<a id="L194"></a><span class="ln">   194</span>			}
<a id="L195"></a><span class="ln">   195</span>			<span class="comment">// all bytes should have been written, by definition of</span>
<a id="L196"></a><span class="ln">   196</span>			<span class="comment">// Write method in io.Writer</span>
<a id="L197"></a><span class="ln">   197</span>			if m != nBytes {
<a id="L198"></a><span class="ln">   198</span>				return n, io.ErrShortWrite
<a id="L199"></a><span class="ln">   199</span>			}
<a id="L200"></a><span class="ln">   200</span>		}
<a id="L201"></a><span class="ln">   201</span>		<span class="comment">// Buffer is now empty; reset.</span>
<a id="L202"></a><span class="ln">   202</span>		b.Truncate(0)
<a id="L203"></a><span class="ln">   203</span>		return
<a id="L204"></a><span class="ln">   204</span>	}
<a id="L205"></a><span class="ln">   205</span>	
<a id="L206"></a><span class="ln">   206</span>	<span class="comment">// WriteByte appends the byte c to the buffer.</span>
<a id="L207"></a><span class="ln">   207</span>	<span class="comment">// The returned error is always nil, but is included</span>
<a id="L208"></a><span class="ln">   208</span>	<span class="comment">// to match bufio.Writer&#39;s WriteByte.</span>
<a id="L209"></a><span class="ln">   209</span>	<span class="comment">// If the buffer becomes too large, WriteByte will panic with</span>
<a id="L210"></a><span class="ln">   210</span>	<span class="comment">// ErrTooLarge.</span>
<a id="L211"></a><span class="ln">   211</span>	func (b *Buffer) WriteByte(c byte) error {
<a id="L212"></a><span class="ln">   212</span>		b.lastRead = opInvalid
<a id="L213"></a><span class="ln">   213</span>		m := b.grow(1)
<a id="L214"></a><span class="ln">   214</span>		b.buf[m] = c
<a id="L215"></a><span class="ln">   215</span>		return nil
<a id="L216"></a><span class="ln">   216</span>	}
<a id="L217"></a><span class="ln">   217</span>	
<a id="L218"></a><span class="ln">   218</span>	<span class="comment">// WriteRune appends the UTF-8 encoding of Unicode</span>
<a id="L219"></a><span class="ln">   219</span>	<span class="comment">// code point r to the buffer, returning its length and</span>
<a id="L220"></a><span class="ln">   220</span>	<span class="comment">// an error, which is always nil but is included</span>
<a id="L221"></a><span class="ln">   221</span>	<span class="comment">// to match bufio.Writer&#39;s WriteRune.</span>
<a id="L222"></a><span class="ln">   222</span>	<span class="comment">// If the buffer becomes too large, WriteRune will panic with</span>
<a id="L223"></a><span class="ln">   223</span>	<span class="comment">// ErrTooLarge.</span>
<a id="L224"></a><span class="ln">   224</span>	func (b *Buffer) WriteRune(r rune) (n int, err error) {
<a id="L225"></a><span class="ln">   225</span>		if r &lt; utf8.RuneSelf {
<a id="L226"></a><span class="ln">   226</span>			b.WriteByte(byte(r))
<a id="L227"></a><span class="ln">   227</span>			return 1, nil
<a id="L228"></a><span class="ln">   228</span>		}
<a id="L229"></a><span class="ln">   229</span>		n = utf8.EncodeRune(b.runeBytes[0:], r)
<a id="L230"></a><span class="ln">   230</span>		b.Write(b.runeBytes[0:n])
<a id="L231"></a><span class="ln">   231</span>		return n, nil
<a id="L232"></a><span class="ln">   232</span>	}
<a id="L233"></a><span class="ln">   233</span>	
<a id="L234"></a><span class="ln">   234</span>	<span class="comment">// Read reads the next len(p) bytes from the buffer or until the buffer</span>
<a id="L235"></a><span class="ln">   235</span>	<span class="comment">// is drained.  The return value n is the number of bytes read.  If the</span>
<a id="L236"></a><span class="ln">   236</span>	<span class="comment">// buffer has no data to return, err is io.EOF (unless len(p) is zero);</span>
<a id="L237"></a><span class="ln">   237</span>	<span class="comment">// otherwise it is nil.</span>
<a id="L238"></a><span class="ln">   238</span>	func (b *Buffer) Read(p []byte) (n int, err error) {
<a id="L239"></a><span class="ln">   239</span>		b.lastRead = opInvalid
<a id="L240"></a><span class="ln">   240</span>		if b.off &gt;= len(b.buf) {
<a id="L241"></a><span class="ln">   241</span>			<span class="comment">// Buffer is empty, reset to recover space.</span>
<a id="L242"></a><span class="ln">   242</span>			b.Truncate(0)
<a id="L243"></a><span class="ln">   243</span>			if len(p) == 0 {
<a id="L244"></a><span class="ln">   244</span>				return
<a id="L245"></a><span class="ln">   245</span>			}
<a id="L246"></a><span class="ln">   246</span>			return 0, io.EOF
<a id="L247"></a><span class="ln">   247</span>		}
<a id="L248"></a><span class="ln">   248</span>		n = copy(p, b.buf[b.off:])
<a id="L249"></a><span class="ln">   249</span>		b.off += n
<a id="L250"></a><span class="ln">   250</span>		if n &gt; 0 {
<a id="L251"></a><span class="ln">   251</span>			b.lastRead = opRead
<a id="L252"></a><span class="ln">   252</span>		}
<a id="L253"></a><span class="ln">   253</span>		return
<a id="L254"></a><span class="ln">   254</span>	}
<a id="L255"></a><span class="ln">   255</span>	
<a id="L256"></a><span class="ln">   256</span>	<span class="comment">// Next returns a slice containing the next n bytes from the buffer,</span>
<a id="L257"></a><span class="ln">   257</span>	<span class="comment">// advancing the buffer as if the bytes had been returned by Read.</span>
<a id="L258"></a><span class="ln">   258</span>	<span class="comment">// If there are fewer than n bytes in the buffer, Next returns the entire buffer.</span>
<a id="L259"></a><span class="ln">   259</span>	<span class="comment">// The slice is only valid until the next call to a read or write method.</span>
<a id="L260"></a><span class="ln">   260</span>	func (b *Buffer) Next(n int) []byte {
<a id="L261"></a><span class="ln">   261</span>		b.lastRead = opInvalid
<a id="L262"></a><span class="ln">   262</span>		m := b.Len()
<a id="L263"></a><span class="ln">   263</span>		if n &gt; m {
<a id="L264"></a><span class="ln">   264</span>			n = m
<a id="L265"></a><span class="ln">   265</span>		}
<a id="L266"></a><span class="ln">   266</span>		data := b.buf[b.off : b.off+n]
<a id="L267"></a><span class="ln">   267</span>		b.off += n
<a id="L268"></a><span class="ln">   268</span>		if n &gt; 0 {
<a id="L269"></a><span class="ln">   269</span>			b.lastRead = opRead
<a id="L270"></a><span class="ln">   270</span>		}
<a id="L271"></a><span class="ln">   271</span>		return data
<a id="L272"></a><span class="ln">   272</span>	}
<a id="L273"></a><span class="ln">   273</span>	
<a id="L274"></a><span class="ln">   274</span>	<span class="comment">// ReadByte reads and returns the next byte from the buffer.</span>
<a id="L275"></a><span class="ln">   275</span>	<span class="comment">// If no byte is available, it returns error io.EOF.</span>
<a id="L276"></a><span class="ln">   276</span>	func (b *Buffer) ReadByte() (c byte, err error) {
<a id="L277"></a><span class="ln">   277</span>		b.lastRead = opInvalid
<a id="L278"></a><span class="ln">   278</span>		if b.off &gt;= len(b.buf) {
<a id="L279"></a><span class="ln">   279</span>			<span class="comment">// Buffer is empty, reset to recover space.</span>
<a id="L280"></a><span class="ln">   280</span>			b.Truncate(0)
<a id="L281"></a><span class="ln">   281</span>			return 0, io.EOF
<a id="L282"></a><span class="ln">   282</span>		}
<a id="L283"></a><span class="ln">   283</span>		c = b.buf[b.off]
<a id="L284"></a><span class="ln">   284</span>		b.off++
<a id="L285"></a><span class="ln">   285</span>		b.lastRead = opRead
<a id="L286"></a><span class="ln">   286</span>		return c, nil
<a id="L287"></a><span class="ln">   287</span>	}
<a id="L288"></a><span class="ln">   288</span>	
<a id="L289"></a><span class="ln">   289</span>	<span class="comment">// ReadRune reads and returns the next UTF-8-encoded</span>
<a id="L290"></a><span class="ln">   290</span>	<span class="comment">// Unicode code point from the buffer.</span>
<a id="L291"></a><span class="ln">   291</span>	<span class="comment">// If no bytes are available, the error returned is io.EOF.</span>
<a id="L292"></a><span class="ln">   292</span>	<span class="comment">// If the bytes are an erroneous UTF-8 encoding, it</span>
<a id="L293"></a><span class="ln">   293</span>	<span class="comment">// consumes one byte and returns U+FFFD, 1.</span>
<a id="L294"></a><span class="ln">   294</span>	func (b *Buffer) ReadRune() (r rune, size int, err error) {
<a id="L295"></a><span class="ln">   295</span>		b.lastRead = opInvalid
<a id="L296"></a><span class="ln">   296</span>		if b.off &gt;= len(b.buf) {
<a id="L297"></a><span class="ln">   297</span>			<span class="comment">// Buffer is empty, reset to recover space.</span>
<a id="L298"></a><span class="ln">   298</span>			b.Truncate(0)
<a id="L299"></a><span class="ln">   299</span>			return 0, 0, io.EOF
<a id="L300"></a><span class="ln">   300</span>		}
<a id="L301"></a><span class="ln">   301</span>		b.lastRead = opReadRune
<a id="L302"></a><span class="ln">   302</span>		c := b.buf[b.off]
<a id="L303"></a><span class="ln">   303</span>		if c &lt; utf8.RuneSelf {
<a id="L304"></a><span class="ln">   304</span>			b.off++
<a id="L305"></a><span class="ln">   305</span>			return rune(c), 1, nil
<a id="L306"></a><span class="ln">   306</span>		}
<a id="L307"></a><span class="ln">   307</span>		r, n := utf8.DecodeRune(b.buf[b.off:])
<a id="L308"></a><span class="ln">   308</span>		b.off += n
<a id="L309"></a><span class="ln">   309</span>		return r, n, nil
<a id="L310"></a><span class="ln">   310</span>	}
<a id="L311"></a><span class="ln">   311</span>	
<a id="L312"></a><span class="ln">   312</span>	<span class="comment">// UnreadRune unreads the last rune returned by ReadRune.</span>
<a id="L313"></a><span class="ln">   313</span>	<span class="comment">// If the most recent read or write operation on the buffer was</span>
<a id="L314"></a><span class="ln">   314</span>	<span class="comment">// not a ReadRune, UnreadRune returns an error.  (In this regard</span>
<a id="L315"></a><span class="ln">   315</span>	<span class="comment">// it is stricter than UnreadByte, which will unread the last byte</span>
<a id="L316"></a><span class="ln">   316</span>	<span class="comment">// from any read operation.)</span>
<a id="L317"></a><span class="ln">   317</span>	func (b *Buffer) UnreadRune() error {
<a id="L318"></a><span class="ln">   318</span>		if b.lastRead != opReadRune {
<a id="L319"></a><span class="ln">   319</span>			return errors.New(&#34;bytes.Buffer: UnreadRune: previous operation was not ReadRune&#34;)
<a id="L320"></a><span class="ln">   320</span>		}
<a id="L321"></a><span class="ln">   321</span>		b.lastRead = opInvalid
<a id="L322"></a><span class="ln">   322</span>		if b.off &gt; 0 {
<a id="L323"></a><span class="ln">   323</span>			_, n := utf8.DecodeLastRune(b.buf[0:b.off])
<a id="L324"></a><span class="ln">   324</span>			b.off -= n
<a id="L325"></a><span class="ln">   325</span>		}
<a id="L326"></a><span class="ln">   326</span>		return nil
<a id="L327"></a><span class="ln">   327</span>	}
<a id="L328"></a><span class="ln">   328</span>	
<a id="L329"></a><span class="ln">   329</span>	<span class="comment">// UnreadByte unreads the last byte returned by the most recent</span>
<a id="L330"></a><span class="ln">   330</span>	<span class="comment">// read operation.  If write has happened since the last read, UnreadByte</span>
<a id="L331"></a><span class="ln">   331</span>	<span class="comment">// returns an error.</span>
<a id="L332"></a><span class="ln">   332</span>	func (b *Buffer) UnreadByte() error {
<a id="L333"></a><span class="ln">   333</span>		if b.lastRead != opReadRune &amp;&amp; b.lastRead != opRead {
<a id="L334"></a><span class="ln">   334</span>			return errors.New(&#34;bytes.Buffer: UnreadByte: previous operation was not a read&#34;)
<a id="L335"></a><span class="ln">   335</span>		}
<a id="L336"></a><span class="ln">   336</span>		b.lastRead = opInvalid
<a id="L337"></a><span class="ln">   337</span>		if b.off &gt; 0 {
<a id="L338"></a><span class="ln">   338</span>			b.off--
<a id="L339"></a><span class="ln">   339</span>		}
<a id="L340"></a><span class="ln">   340</span>		return nil
<a id="L341"></a><span class="ln">   341</span>	}
<a id="L342"></a><span class="ln">   342</span>	
<a id="L343"></a><span class="ln">   343</span>	<span class="comment">// ReadBytes reads until the first occurrence of delim in the input,</span>
<a id="L344"></a><span class="ln">   344</span>	<span class="comment">// returning a slice containing the data up to and including the delimiter.</span>
<a id="L345"></a><span class="ln">   345</span>	<span class="comment">// If ReadBytes encounters an error before finding a delimiter,</span>
<a id="L346"></a><span class="ln">   346</span>	<span class="comment">// it returns the data read before the error and the error itself (often io.EOF).</span>
<a id="L347"></a><span class="ln">   347</span>	<span class="comment">// ReadBytes returns err != nil if and only if the returned data does not end in</span>
<a id="L348"></a><span class="ln">   348</span>	<span class="comment">// delim.</span>
<a id="L349"></a><span class="ln">   349</span>	func (b *Buffer) ReadBytes(delim byte) (line []byte, err error) {
<a id="L350"></a><span class="ln">   350</span>		i := IndexByte(b.buf[b.off:], delim)
<a id="L351"></a><span class="ln">   351</span>		size := i + 1
<a id="L352"></a><span class="ln">   352</span>		if i &lt; 0 {
<a id="L353"></a><span class="ln">   353</span>			size = len(b.buf) - b.off
<a id="L354"></a><span class="ln">   354</span>			err = io.EOF
<a id="L355"></a><span class="ln">   355</span>		}
<a id="L356"></a><span class="ln">   356</span>		line = make([]byte, size)
<a id="L357"></a><span class="ln">   357</span>		copy(line, b.buf[b.off:])
<a id="L358"></a><span class="ln">   358</span>		b.off += size
<a id="L359"></a><span class="ln">   359</span>		return
<a id="L360"></a><span class="ln">   360</span>	}
<a id="L361"></a><span class="ln">   361</span>	
<a id="L362"></a><span class="ln">   362</span>	<span class="comment">// ReadString reads until the first occurrence of delim in the input,</span>
<a id="L363"></a><span class="ln">   363</span>	<span class="comment">// returning a string containing the data up to and including the delimiter.</span>
<a id="L364"></a><span class="ln">   364</span>	<span class="comment">// If ReadString encounters an error before finding a delimiter,</span>
<a id="L365"></a><span class="ln">   365</span>	<span class="comment">// it returns the data read before the error and the error itself (often io.EOF).</span>
<a id="L366"></a><span class="ln">   366</span>	<span class="comment">// ReadString returns err != nil if and only if the returned data does not end</span>
<a id="L367"></a><span class="ln">   367</span>	<span class="comment">// in delim.</span>
<a id="L368"></a><span class="ln">   368</span>	func (b *Buffer) ReadString(delim byte) (line string, err error) {
<a id="L369"></a><span class="ln">   369</span>		bytes, err := b.ReadBytes(delim)
<a id="L370"></a><span class="ln">   370</span>		return string(bytes), err
<a id="L371"></a><span class="ln">   371</span>	}
<a id="L372"></a><span class="ln">   372</span>	
<a id="L373"></a><span class="ln">   373</span>	<span class="comment">// NewBuffer creates and initializes a new Buffer using buf as its initial</span>
<a id="L374"></a><span class="ln">   374</span>	<span class="comment">// contents.  It is intended to prepare a Buffer to read existing data.  It</span>
<a id="L375"></a><span class="ln">   375</span>	<span class="comment">// can also be used to size the internal buffer for writing. To do that,</span>
<a id="L376"></a><span class="ln">   376</span>	<span class="comment">// buf should have the desired capacity but a length of zero.</span>
<a id="L377"></a><span class="ln">   377</span>	<span class="comment">//</span>
<a id="L378"></a><span class="ln">   378</span>	<span class="comment">// In most cases, new(Buffer) (or just declaring a Buffer variable) is</span>
<a id="L379"></a><span class="ln">   379</span>	<span class="comment">// sufficient to initialize a Buffer.</span>
<a id="L380"></a><span class="ln">   380</span>	func NewBuffer(buf []byte) *Buffer { return &amp;Buffer{buf: buf} }
<a id="L381"></a><span class="ln">   381</span>	
<a id="L382"></a><span class="ln">   382</span>	<span class="comment">// NewBufferString creates and initializes a new Buffer using string s as its</span>
<a id="L383"></a><span class="ln">   383</span>	<span class="comment">// initial contents. It is intended to prepare a buffer to read an existing</span>
<a id="L384"></a><span class="ln">   384</span>	<span class="comment">// string.</span>
<a id="L385"></a><span class="ln">   385</span>	<span class="comment">//</span>
<a id="L386"></a><span class="ln">   386</span>	<span class="comment">// In most cases, new(Buffer) (or just declaring a Buffer variable) is</span>
<a id="L387"></a><span class="ln">   387</span>	<span class="comment">// sufficient to initialize a Buffer.</span>
<a id="L388"></a><span class="ln">   388</span>	func NewBufferString(s string) *Buffer {
<a id="L389"></a><span class="ln">   389</span>		return &amp;Buffer{buf: []byte(s)}
<a id="L390"></a><span class="ln">   390</span>	}
</pre>

</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>

