
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>sort - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package sort</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "sort"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
				<dd><a href="#examples">Examples</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package sort provides primitives for sorting slices and user-defined
collections.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#Float64s">func Float64s(a []float64)</a></dd>
			
				
				<dd><a href="#Float64sAreSorted">func Float64sAreSorted(a []float64) bool</a></dd>
			
				
				<dd><a href="#Ints">func Ints(a []int)</a></dd>
			
				
				<dd><a href="#IntsAreSorted">func IntsAreSorted(a []int) bool</a></dd>
			
				
				<dd><a href="#IsSorted">func IsSorted(data Interface) bool</a></dd>
			
				
				<dd><a href="#Search">func Search(n int, f func(int) bool) int</a></dd>
			
				
				<dd><a href="#SearchFloat64s">func SearchFloat64s(a []float64, x float64) int</a></dd>
			
				
				<dd><a href="#SearchInts">func SearchInts(a []int, x int) int</a></dd>
			
				
				<dd><a href="#SearchStrings">func SearchStrings(a []string, x string) int</a></dd>
			
				
				<dd><a href="#Sort">func Sort(data Interface)</a></dd>
			
				
				<dd><a href="#Strings">func Strings(a []string)</a></dd>
			
				
				<dd><a href="#StringsAreSorted">func StringsAreSorted(a []string) bool</a></dd>
			
			
				
				<dd><a href="#Float64Slice">type Float64Slice</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Float64Slice.Len">func (p Float64Slice) Len() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Float64Slice.Less">func (p Float64Slice) Less(i, j int) bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Float64Slice.Search">func (p Float64Slice) Search(x float64) int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Float64Slice.Sort">func (p Float64Slice) Sort()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Float64Slice.Swap">func (p Float64Slice) Swap(i, j int)</a></dd>
				
			
				
				<dd><a href="#IntSlice">type IntSlice</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#IntSlice.Len">func (p IntSlice) Len() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#IntSlice.Less">func (p IntSlice) Less(i, j int) bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#IntSlice.Search">func (p IntSlice) Search(x int) int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#IntSlice.Sort">func (p IntSlice) Sort()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#IntSlice.Swap">func (p IntSlice) Swap(i, j int)</a></dd>
				
			
				
				<dd><a href="#Interface">type Interface</a></dd>
				
				
			
				
				<dd><a href="#StringSlice">type StringSlice</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#StringSlice.Len">func (p StringSlice) Len() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#StringSlice.Less">func (p StringSlice) Less(i, j int) bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#StringSlice.Search">func (p StringSlice) Search(x string) int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#StringSlice.Sort">func (p StringSlice) Sort()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#StringSlice.Swap">func (p StringSlice) Swap(i, j int)</a></dd>
				
			
			
		</dl>

		
			<h4 id="examples">Examples</h4>
			<dl>
			
			<dd><a class="exampleLink" href="#example_Interface">Interface</a></dd>
			
			<dd><a class="exampleLink" href="#example_Interface_reverse">Interface (Reverse)</a></dd>
			
			<dd><a class="exampleLink" href="#example_Ints">Ints</a></dd>
			
			</dl>
		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/sort/search.htm">search.go</a>
			
				<a href="src/pkg/sort/sort.htm">sort.go</a>
			
			</span>
			</p>
		
	
		
		
		
			
			
			<h2 id="Float64s">func <a href="src/pkg/sort/sort.htm#L239">Float64s</a></h2>
			<pre>func Float64s(a []float64)</pre>
			<p>
Float64s sorts a slice of float64s in increasing order.
</p>

			
		
			
			
			<h2 id="Float64sAreSorted">func <a href="src/pkg/sort/sort.htm#L248">Float64sAreSorted</a></h2>
			<pre>func Float64sAreSorted(a []float64) bool</pre>
			<p>
Float64sAreSorted tests whether a slice of float64s is sorted in increasing order.
</p>

			
		
			
			
			<h2 id="Ints">func <a href="src/pkg/sort/sort.htm#L236">Ints</a></h2>
			<pre>func Ints(a []int)</pre>
			<p>
Ints sorts a slice of ints in increasing order.
</p>

			<div id="example_Ints" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">s := []int{5, 2, 6, 3, 1, 4} <span class="comment">// unsorted</span>
sort.Ints(s)
fmt.Println(s)
<span class="comment"></pre>
		
		<p>Output:</p>
		<pre class="output">[1 2 3 4 5 6]</pre>
		
	</div>
</div>

		
			
			
			<h2 id="IntsAreSorted">func <a href="src/pkg/sort/sort.htm#L245">IntsAreSorted</a></h2>
			<pre>func IntsAreSorted(a []int) bool</pre>
			<p>
IntsAreSorted tests whether a slice of ints is sorted in increasing order.
</p>

			
		
			
			
			<h2 id="IsSorted">func <a href="src/pkg/sort/sort.htm#L191">IsSorted</a></h2>
			<pre>func IsSorted(data Interface) bool</pre>
			<p>
IsSorted reports whether data is sorted.
</p>

			
		
			
			
			<h2 id="Search">func <a href="src/pkg/sort/search.htm#L47">Search</a></h2>
			<pre>func Search(n int, f func(int) bool) int</pre>
			<p>
Search uses binary search to find and return the smallest index i
in [0, n) at which f(i) is true, assuming that on the range [0, n),
f(i) == true implies f(i+1) == true.  That is, Search requires that
f is false for some (possibly empty) prefix of the input range [0, n)
and then true for the (possibly empty) remainder; Search returns
the first true index.  If there is no such index, Search returns n.
Search calls f(i) only for i in the range [0, n).
</p>
<p>
A common use of Search is to find the index i for a value x in
a sorted, indexable data structure such as an array or slice.
In this case, the argument f, typically a closure, captures the value
to be searched for, and how the data structure is indexed and
ordered.
</p>
<p>
For instance, given a slice data sorted in ascending order,
the call Search(len(data), func(i int) bool { return data[i] &gt;= 23 })
returns the smallest index i such that data[i] &gt;= 23.  If the caller
wants to find whether 23 is in the slice, it must test data[i] == 23
separately.
</p>
<p>
Searching data sorted in descending order would use the &lt;=
operator instead of the &gt;= operator.
</p>
<p>
To complete the example above, the following code tries to find the value
x in an integer slice data sorted in ascending order:
</p>
<pre>x := 23
i := sort.Search(len(data), func(i int) bool { return data[i] &gt;= x })
if i &lt; len(data) &amp;&amp; data[i] == x {
	// x is present at data[i]
} else {
	// x is not present in data,
	// but i is the index where it would be inserted.
}
</pre>
<p>
As a more whimsical example, this program guesses your number:
</p>
<pre>func GuessingGame() {
	var s string
	fmt.Printf(&#34;Pick an integer from 0 to 100.\n&#34;)
	answer := sort.Search(100, func(i int) bool {
		fmt.Printf(&#34;Is your number &lt;= %d? &#34;, i)
		fmt.Scanf(&#34;%s&#34;, &amp;s)
		return s != &#34;&#34; &amp;&amp; s[0] == &#39;y&#39;
	})
	fmt.Printf(&#34;Your number is %d.\n&#34;, answer)
}
</pre>

			
		
			
			
			<h2 id="SearchFloat64s">func <a href="src/pkg/sort/search.htm#L76">SearchFloat64s</a></h2>
			<pre>func SearchFloat64s(a []float64, x float64) int</pre>
			<p>
SearchFloat64s searches for x in a sorted slice of float64s and returns the index
as specified by Search. The slice must be sorted in ascending order.
</p>

			
		
			
			
			<h2 id="SearchInts">func <a href="src/pkg/sort/search.htm#L69">SearchInts</a></h2>
			<pre>func SearchInts(a []int, x int) int</pre>
			<p>
SearchInts searches for x in a sorted slice of ints and returns the index
as specified by Search. The slice must be sorted in ascending order.
</p>

			
		
			
			
			<h2 id="SearchStrings">func <a href="src/pkg/sort/search.htm#L83">SearchStrings</a></h2>
			<pre>func SearchStrings(a []string, x string) int</pre>
			<p>
SearchStrings searches for x slice a sorted slice of strings and returns the index
as specified by Search. The slice must be sorted in ascending order.
</p>

			
		
			
			
			<h2 id="Sort">func <a href="src/pkg/sort/sort.htm#L179">Sort</a></h2>
			<pre>func Sort(data Interface)</pre>
			<p>
Sort sorts data.
It makes one call to data.Len to determine n, and O(n*log(n)) calls to
data.Less and data.Swap. The sort is not guaranteed to be stable.
</p>

			
		
			
			
			<h2 id="Strings">func <a href="src/pkg/sort/sort.htm#L242">Strings</a></h2>
			<pre>func Strings(a []string)</pre>
			<p>
Strings sorts a slice of strings in increasing order.
</p>

			
		
			
			
			<h2 id="StringsAreSorted">func <a href="src/pkg/sort/sort.htm#L251">StringsAreSorted</a></h2>
			<pre>func StringsAreSorted(a []string) bool</pre>
			<p>
StringsAreSorted tests whether a slice of strings is sorted in increasing order.
</p>

			
		
		
			
			
			<h2 id="Float64Slice">type <a href="src/pkg/sort/sort.htm#L214">Float64Slice</a></h2>
			<pre>type Float64Slice []float64</pre>
			<p>
Float64Slice attaches the methods of Interface to []float64, sorting in increasing order.
</p>


			

			

			

			

			
				
				<h3 id="Float64Slice.Len">func (Float64Slice) <a href="src/pkg/sort/sort.htm#L216">Len</a></h3>
				<pre>func (p Float64Slice) Len() int</pre>
				
				
				
			
				
				<h3 id="Float64Slice.Less">func (Float64Slice) <a href="src/pkg/sort/sort.htm#L217">Less</a></h3>
				<pre>func (p Float64Slice) Less(i, j int) bool</pre>
				
				
				
			
				
				<h3 id="Float64Slice.Search">func (Float64Slice) <a href="src/pkg/sort/search.htm#L91">Search</a></h3>
				<pre>func (p Float64Slice) Search(x float64) int</pre>
				<p>
Search returns the result of applying SearchFloat64s to the receiver and x.
</p>

				
				
			
				
				<h3 id="Float64Slice.Sort">func (Float64Slice) <a href="src/pkg/sort/sort.htm#L221">Sort</a></h3>
				<pre>func (p Float64Slice) Sort()</pre>
				<p>
Sort is a convenience method.
</p>

				
				
			
				
				<h3 id="Float64Slice.Swap">func (Float64Slice) <a href="src/pkg/sort/sort.htm#L218">Swap</a></h3>
				<pre>func (p Float64Slice) Swap(i, j int)</pre>
				
				
				
			
		
			
			
			<h2 id="IntSlice">type <a href="src/pkg/sort/sort.htm#L204">IntSlice</a></h2>
			<pre>type IntSlice []int</pre>
			<p>
IntSlice attaches the methods of Interface to []int, sorting in increasing order.
</p>


			

			

			

			

			
				
				<h3 id="IntSlice.Len">func (IntSlice) <a href="src/pkg/sort/sort.htm#L206">Len</a></h3>
				<pre>func (p IntSlice) Len() int</pre>
				
				
				
			
				
				<h3 id="IntSlice.Less">func (IntSlice) <a href="src/pkg/sort/sort.htm#L207">Less</a></h3>
				<pre>func (p IntSlice) Less(i, j int) bool</pre>
				
				
				
			
				
				<h3 id="IntSlice.Search">func (IntSlice) <a href="src/pkg/sort/search.htm#L88">Search</a></h3>
				<pre>func (p IntSlice) Search(x int) int</pre>
				<p>
Search returns the result of applying SearchInts to the receiver and x.
</p>

				
				
			
				
				<h3 id="IntSlice.Sort">func (IntSlice) <a href="src/pkg/sort/sort.htm#L211">Sort</a></h3>
				<pre>func (p IntSlice) Sort()</pre>
				<p>
Sort is a convenience method.
</p>

				
				
			
				
				<h3 id="IntSlice.Swap">func (IntSlice) <a href="src/pkg/sort/sort.htm#L208">Swap</a></h3>
				<pre>func (p IntSlice) Swap(i, j int)</pre>
				
				
				
			
		
			
			
			<h2 id="Interface">type <a href="src/pkg/sort/sort.htm#L4">Interface</a></h2>
			<pre>type Interface interface {
    <span class="comment">// Len is the number of elements in the collection.</span>
    Len() int
    <span class="comment">// Less returns whether the element with index i should sort</span>
    <span class="comment">// before the element with index j.</span>
    Less(i, j int) bool
    <span class="comment">// Swap swaps the elements with indexes i and j.</span>
    Swap(i, j int)
}</pre>
			<p>
A type, typically a collection, that satisfies sort.Interface can be
sorted by the routines in this package.  The methods require that the
elements of the collection be enumerated by an integer index.
</p>


			

			

			<div id="example_Interface" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example</span></p>
		
		<p>Code:</p>
		<pre class="code">package sort_test

import (
    &#34;fmt&#34;
    &#34;sort&#34;
)

type Grams int

func (g Grams) String() string { return fmt.Sprintf(&#34;%dg&#34;, int(g)) }

type Organ struct {
    Name   string
    Weight Grams
}

type Organs []*Organ

func (s Organs) Len() int      { return len(s) }
func (s Organs) Swap(i, j int) { s[i], s[j] = s[j], s[i] }

<span class="comment">// ByName implements sort.Interface by providing Less and using the Len and</span>
<span class="comment">// Swap methods of the embedded Organs value.</span>
type ByName struct{ Organs }

func (s ByName) Less(i, j int) bool { return s.Organs[i].Name &lt; s.Organs[j].Name }

<span class="comment">// ByWeight implements sort.Interface by providing Less and using the Len and</span>
<span class="comment">// Swap methods of the embedded Organs value.</span>
type ByWeight struct{ Organs }

func (s ByWeight) Less(i, j int) bool { return s.Organs[i].Weight &lt; s.Organs[j].Weight }

func ExampleInterface() {
    s := []*Organ{
        {&#34;brain&#34;, 1340},
        {&#34;heart&#34;, 290},
        {&#34;liver&#34;, 1494},
        {&#34;pancreas&#34;, 131},
        {&#34;prostate&#34;, 62},
        {&#34;spleen&#34;, 162},
    }

    sort.Sort(ByWeight{s})
    fmt.Println(&#34;Organs by weight:&#34;)
    printOrgans(s)

    sort.Sort(ByName{s})
    fmt.Println(&#34;Organs by name:&#34;)
    printOrgans(s)

    <span class="comment">// Output:</span>
    <span class="comment">// Organs by weight:</span>
    <span class="comment">// prostate (62g)</span>
    <span class="comment">// pancreas (131g)</span>
    <span class="comment">// spleen   (162g)</span>
    <span class="comment">// heart    (290g)</span>
    <span class="comment">// brain    (1340g)</span>
    <span class="comment">// liver    (1494g)</span>
    <span class="comment">// Organs by name:</span>
    <span class="comment">// brain    (1340g)</span>
    <span class="comment">// heart    (290g)</span>
    <span class="comment">// liver    (1494g)</span>
    <span class="comment">// pancreas (131g)</span>
    <span class="comment">// prostate (62g)</span>
    <span class="comment">// spleen   (162g)</span>
}

func printOrgans(s []*Organ) {
    for _, o := range s {
        fmt.Printf(&#34;%-8s (%v)\n&#34;, o.Name, o.Weight)
    }
}
</pre>
		
	</div>
</div>
<div id="example_Interface_reverse" class="toggle">
	<div class="collapsed">
		<p class="exampleHeading toggleButton">? <span class="text">Example (Reverse)</span></p>
	</div>
	<div class="expanded">
		<p class="exampleHeading toggleButton">? <span class="text">Example (Reverse)</span></p>
		
		<p>Code:</p>
		<pre class="code">package sort_test

import (
    &#34;fmt&#34;
    &#34;sort&#34;
)

<span class="comment">// Reverse embeds a sort.Interface value and implements a reverse sort over</span>
<span class="comment">// that value.</span>
type Reverse struct {
    <span class="comment">// This embedded Interface permits Reverse to use the methods of</span>
    <span class="comment">// another Interface implementation.</span>
    sort.Interface
}

<span class="comment">// Less returns the opposite of the embedded implementation&#39;s Less method.</span>
func (r Reverse) Less(i, j int) bool {
    return r.Interface.Less(j, i)
}

func ExampleInterface_reverse() {
    s := []int{5, 2, 6, 3, 1, 4} <span class="comment">// unsorted</span>
    sort.Sort(Reverse{sort.IntSlice(s)})
    fmt.Println(s)
    <span class="comment">// Output: [6 5 4 3 2 1]</span>
}
</pre>
		
	</div>
</div>


			

			
		
			
			
			<h2 id="StringSlice">type <a href="src/pkg/sort/sort.htm#L224">StringSlice</a></h2>
			<pre>type StringSlice []string</pre>
			<p>
StringSlice attaches the methods of Interface to []string, sorting in increasing order.
</p>


			

			

			

			

			
				
				<h3 id="StringSlice.Len">func (StringSlice) <a href="src/pkg/sort/sort.htm#L226">Len</a></h3>
				<pre>func (p StringSlice) Len() int</pre>
				
				
				
			
				
				<h3 id="StringSlice.Less">func (StringSlice) <a href="src/pkg/sort/sort.htm#L227">Less</a></h3>
				<pre>func (p StringSlice) Less(i, j int) bool</pre>
				
				
				
			
				
				<h3 id="StringSlice.Search">func (StringSlice) <a href="src/pkg/sort/search.htm#L94">Search</a></h3>
				<pre>func (p StringSlice) Search(x string) int</pre>
				<p>
Search returns the result of applying SearchStrings to the receiver and x.
</p>

				
				
			
				
				<h3 id="StringSlice.Sort">func (StringSlice) <a href="src/pkg/sort/sort.htm#L231">Sort</a></h3>
				<pre>func (p StringSlice) Sort()</pre>
				<p>
Sort is a convenience method.
</p>

				
				
			
				
				<h3 id="StringSlice.Swap">func (StringSlice) <a href="src/pkg/sort/sort.htm#L228">Swap</a></h3>
				<pre>func (p StringSlice) Swap(i, j int)</pre>
				
				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
