
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>cgi - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package cgi</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "net/http/cgi"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package cgi implements CGI (Common Gateway Interface) as specified
in RFC 3875.
</p>
<p>
Note that using CGI means starting a new process to handle each
request, which is typically less efficient than using a
long-running server.  This package is intended primarily for
compatibility with existing systems.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="#Request">func Request() (*http.Request, error)</a></dd>
			
				
				<dd><a href="#RequestFromMap">func RequestFromMap(params map[string]string) (*http.Request, error)</a></dd>
			
				
				<dd><a href="#Serve">func Serve(handler http.Handler) error</a></dd>
			
			
				
				<dd><a href="#Handler">type Handler</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Handler.ServeHTTP">func (h *Handler) ServeHTTP(rw http.ResponseWriter, req *http.Request)</a></dd>
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/net/http/cgi/child.htm">child.go</a>
			
				<a href="src/pkg/net/http/cgi/host.htm">host.go</a>
			
			</span>
			</p>
		
	
		
		
		
			
			
			<h2 id="Request">func <a href="src/pkg/net/http/cgi/child.htm#L19">Request</a></h2>
			<pre>func Request() (*http.Request, error)</pre>
			<p>
Request returns the HTTP request as represented in the current
environment. This assumes the current program is being run
by a web server in a CGI environment.
The returned Request&#39;s Body is populated, if applicable.
</p>

			
		
			
			
			<h2 id="RequestFromMap">func <a href="src/pkg/net/http/cgi/child.htm#L42">RequestFromMap</a></h2>
			<pre>func RequestFromMap(params map[string]string) (*http.Request, error)</pre>
			<p>
RequestFromMap creates an http.Request from CGI variables.
The returned Request&#39;s Body field is not populated.
</p>

			
		
			
			
			<h2 id="Serve">func <a href="src/pkg/net/http/cgi/child.htm#L123">Serve</a></h2>
			<pre>func Serve(handler http.Handler) error</pre>
			<p>
Serve executes the provided Handler on the currently active CGI
request, if any. If there&#39;s no current CGI environment
an error is returned. The provided handler may be nil to use
http.DefaultServeMux.
</p>

			
		
		
			
			
			<h2 id="Handler">type <a href="src/pkg/net/http/cgi/host.htm#L36">Handler</a></h2>
			<pre>type Handler struct {
    Path string <span class="comment">// path to the CGI executable</span>
    Root string

    <span class="comment">// Dir specifies the CGI executable&#39;s working directory.</span>
    <span class="comment">// If Dir is empty, the base directory of Path is used.</span>
    <span class="comment">// If Path has no base directory, the current working</span>
    <span class="comment">// directory is used.</span>
    Dir string

    Env        []string    <span class="comment">// extra environment variables to set, if any, as &#34;key=value&#34;</span>
    InheritEnv []string    <span class="comment">// environment variables to inherit from host, as &#34;key&#34;</span>
    Logger     *log.Logger <span class="comment">// optional log for errors or nil to use log.Print</span>
    Args       []string

    <span class="comment">// PathLocationHandler specifies the root http Handler that</span>
    <span class="comment">// should handle internal redirects when the CGI process</span>
    <span class="comment">// returns a Location header value starting with a &#34;/&#34;, as</span>
    <span class="comment">// specified in RFC 3875  6.3.2. This will likely be</span>
    <span class="comment">// http.DefaultServeMux.</span>
    <span class="comment">//</span>
    <span class="comment">// If nil, a CGI response with a local URI path is instead sent</span>
    <span class="comment">// back to the client and not redirected internally.</span>
    PathLocationHandler http.Handler
}</pre>
			<p>
Handler runs an executable in a subprocess with a CGI environment.
</p>


			

			

			

			

			
				
				<h3 id="Handler.ServeHTTP">func (*Handler) <a href="src/pkg/net/http/cgi/host.htm#L87">ServeHTTP</a></h3>
				<pre>func (h *Handler) ServeHTTP(rw http.ResponseWriter, req *http.Request)</pre>
				
				
				
			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
