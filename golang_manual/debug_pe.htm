
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>pe - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package pe</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "debug/pe"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package pe implements access to PE (Microsoft Windows Portable Executable) files.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
				<dd><a href="#constants">Constants</a></dd>
			
			
			
			
				
				<dd><a href="#File">type File</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewFile">func NewFile(r io.ReaderAt) (*File, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Open">func Open(name string) (*File, error)</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Close">func (f *File) Close() error</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.DWARF">func (f *File) DWARF() (*dwarf.Data, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.ImportedLibraries">func (f *File) ImportedLibraries() ([]string, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.ImportedSymbols">func (f *File) ImportedSymbols() ([]string, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#File.Section">func (f *File) Section(name string) *Section</a></dd>
				
			
				
				<dd><a href="#FileHeader">type FileHeader</a></dd>
				
				
			
				
				<dd><a href="#FormatError">type FormatError</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#FormatError.Error">func (e *FormatError) Error() string</a></dd>
				
			
				
				<dd><a href="#ImportDirectory">type ImportDirectory</a></dd>
				
				
			
				
				<dd><a href="#Section">type Section</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Section.Data">func (s *Section) Data() ([]byte, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Section.Open">func (s *Section) Open() io.ReadSeeker</a></dd>
				
			
				
				<dd><a href="#SectionHeader">type SectionHeader</a></dd>
				
				
			
				
				<dd><a href="#SectionHeader32">type SectionHeader32</a></dd>
				
				
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/debug/pe/file.htm">file.go</a>
			
				<a href="src/pkg/debug/pe/pe.htm">pe.go</a>
			
			</span>
			</p>
		
	
		
			<h2 id="constants">Constants</h2>
			
				<pre>const (
    IMAGE_FILE_MACHINE_UNKNOWN   = 0x0
    IMAGE_FILE_MACHINE_AM33      = 0x1d3
    IMAGE_FILE_MACHINE_AMD64     = 0x8664
    IMAGE_FILE_MACHINE_ARM       = 0x1c0
    IMAGE_FILE_MACHINE_EBC       = 0xebc
    IMAGE_FILE_MACHINE_I386      = 0x14c
    IMAGE_FILE_MACHINE_IA64      = 0x200
    IMAGE_FILE_MACHINE_M32R      = 0x9041
    IMAGE_FILE_MACHINE_MIPS16    = 0x266
    IMAGE_FILE_MACHINE_MIPSFPU   = 0x366
    IMAGE_FILE_MACHINE_MIPSFPU16 = 0x466
    IMAGE_FILE_MACHINE_POWERPC   = 0x1f0
    IMAGE_FILE_MACHINE_POWERPCFP = 0x1f1
    IMAGE_FILE_MACHINE_R4000     = 0x166
    IMAGE_FILE_MACHINE_SH3       = 0x1a2
    IMAGE_FILE_MACHINE_SH3DSP    = 0x1a3
    IMAGE_FILE_MACHINE_SH4       = 0x1a6
    IMAGE_FILE_MACHINE_SH5       = 0x1a8
    IMAGE_FILE_MACHINE_THUMB     = 0x1c2
    IMAGE_FILE_MACHINE_WCEMIPSV2 = 0x169
)</pre>
				
			
		
		
		
		
			
			
			<h2 id="File">type <a href="src/pkg/debug/pe/file.htm#L9">File</a></h2>
			<pre>type File struct {
    FileHeader
    Sections []*Section
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
A File represents an open PE file.
</p>


			

			

			

			
				
				<h3 id="NewFile">func <a href="src/pkg/debug/pe/file.htm#L105">NewFile</a></h3>
				<pre>func NewFile(r io.ReaderAt) (*File, error)</pre>
				<p>
NewFile creates a new File for accessing a PE binary in an underlying reader.
</p>

				
			
				
				<h3 id="Open">func <a href="src/pkg/debug/pe/file.htm#L78">Open</a></h3>
				<pre>func Open(name string) (*File, error)</pre>
				<p>
Open opens the named file using os.Open and prepares it for use as a PE binary.
</p>

				
			

			
				
				<h3 id="File.Close">func (*File) <a href="src/pkg/debug/pe/file.htm#L95">Close</a></h3>
				<pre>func (f *File) Close() error</pre>
				<p>
Close closes the File.
If the File was created using NewFile directly instead of Open,
Close has no effect.
</p>

				
				
			
				
				<h3 id="File.DWARF">func (*File) <a href="src/pkg/debug/pe/file.htm#L209">DWARF</a></h3>
				<pre>func (f *File) DWARF() (*dwarf.Data, error)</pre>
				
				
				
			
				
				<h3 id="File.ImportedLibraries">func (*File) <a href="src/pkg/debug/pe/file.htm#L302">ImportedLibraries</a></h3>
				<pre>func (f *File) ImportedLibraries() ([]string, error)</pre>
				<p>
ImportedLibraries returns the names of all libraries
referred to by the binary f that are expected to be
linked with the binary at dynamic link time.
</p>

				
				
			
				
				<h3 id="File.ImportedSymbols">func (*File) <a href="src/pkg/debug/pe/file.htm#L236">ImportedSymbols</a></h3>
				<pre>func (f *File) ImportedSymbols() ([]string, error)</pre>
				<p>
ImportedSymbols returns the names of all symbols
referred to by the binary f that are expected to be
satisfied by other libraries at dynamic load time.
It does not return weak symbols.
</p>

				
				
			
				
				<h3 id="File.Section">func (*File) <a href="src/pkg/debug/pe/file.htm#L200">Section</a></h3>
				<pre>func (f *File) Section(name string) *Section</pre>
				<p>
Section returns the first section with the given name, or nil if no such
section exists.
</p>

				
				
			
		
			
			
			<h2 id="FileHeader">type <a href="src/pkg/debug/pe/pe.htm#L1">FileHeader</a></h2>
			<pre>type FileHeader struct {
    Machine              uint16
    NumberOfSections     uint16
    TimeDateStamp        uint32
    PointerToSymbolTable uint32
    NumberOfSymbols      uint32
    SizeOfOptionalHeader uint16
    Characteristics      uint16
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="FormatError">type <a href="src/pkg/debug/pe/file.htm#L62">FormatError</a></h2>
			<pre>type FormatError struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			

			

			

			

			

			
				
				<h3 id="FormatError.Error">func (*FormatError) <a href="src/pkg/debug/pe/file.htm#L68">Error</a></h3>
				<pre>func (e *FormatError) Error() string</pre>
				
				
				
			
		
			
			
			<h2 id="ImportDirectory">type <a href="src/pkg/debug/pe/file.htm#L42">ImportDirectory</a></h2>
			<pre>type ImportDirectory struct {
    OriginalFirstThunk uint32
    TimeDateStamp      uint32
    ForwarderChain     uint32
    Name               uint32
    FirstThunk         uint32
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="Section">type <a href="src/pkg/debug/pe/file.htm#L29">Section</a></h2>
			<pre>type Section struct {
    SectionHeader

    <span class="comment">// Embed ReaderAt for ReadAt method.</span>
    <span class="comment">// Do not embed SectionReader directly</span>
    <span class="comment">// to avoid having Read and Seek.</span>
    <span class="comment">// If a client wants Read and Seek it must use</span>
    <span class="comment">// Open() to avoid fighting over the seek offset</span>
    <span class="comment">// with other clients.</span>
    io.ReaderAt
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			

			

			

			

			

			
				
				<h3 id="Section.Data">func (*Section) <a href="src/pkg/debug/pe/file.htm#L53">Data</a></h3>
				<pre>func (s *Section) Data() ([]byte, error)</pre>
				<p>
Data reads and returns the contents of the PE section.
</p>

				
				
			
				
				<h3 id="Section.Open">func (*Section) <a href="src/pkg/debug/pe/file.htm#L60">Open</a></h3>
				<pre>func (s *Section) Open() io.ReadSeeker</pre>
				<p>
Open returns a new ReadSeeker reading the PE section.
</p>

				
				
			
		
			
			
			<h2 id="SectionHeader">type <a href="src/pkg/debug/pe/file.htm#L16">SectionHeader</a></h2>
			<pre>type SectionHeader struct {
    Name                 string
    VirtualSize          uint32
    VirtualAddress       uint32
    Size                 uint32
    Offset               uint32
    PointerToRelocations uint32
    PointerToLineNumbers uint32
    NumberOfRelocations  uint16
    NumberOfLineNumbers  uint16
    Characteristics      uint32
}</pre>
			

			

			

			

			

			
		
			
			
			<h2 id="SectionHeader32">type <a href="src/pkg/debug/pe/pe.htm#L7">SectionHeader32</a></h2>
			<pre>type SectionHeader32 struct {
    Name                 [8]uint8
    VirtualSize          uint32
    VirtualAddress       uint32
    SizeOfRawData        uint32
    PointerToRawData     uint32
    PointerToRelocations uint32
    PointerToLineNumbers uint32
    NumberOfRelocations  uint16
    NumberOfLineNumbers  uint16
    Characteristics      uint32
}</pre>
			

			

			

			

			

			
		
		</div>
	

	









</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
