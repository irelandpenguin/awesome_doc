
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <title>math - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="../../doc/style.css">
<script type="text/javascript" src="../../doc/godocs.js"></script>

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml" />

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["_trackPageview"]);
</script>
</head>
<body>

<div id="page" class="wide">


  <div id="plusone"><g:plusone size="small" annotation="none"></g:plusone></div>
  <h1>Package math</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->

	
		<div id="short-nav">
			<dl>
			<dd><code>import "math"</code></dd>
			</dl>
			<dl>
			<dd><a href="#overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#index">Index</a></dd>
			
			
				<dd><a href="#subdirectories">Subdirectories</a></dd>
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2>
				<p>
Package math provides basic constants and mathematical functions.
</p>

			</div>
		</div>
		
	
		<h2 id="index">Index</h2>
		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
		<div id="manual-nav">
			<dl>
			
				<dd><a href="#constants">Constants</a></dd>
			
			
			
				
				<dd><a href="#Abs">func Abs(x float64) float64</a></dd>
			
				
				<dd><a href="#Acos">func Acos(x float64) float64</a></dd>
			
				
				<dd><a href="#Acosh">func Acosh(x float64) float64</a></dd>
			
				
				<dd><a href="#Asin">func Asin(x float64) float64</a></dd>
			
				
				<dd><a href="#Asinh">func Asinh(x float64) float64</a></dd>
			
				
				<dd><a href="#Atan">func Atan(x float64) float64</a></dd>
			
				
				<dd><a href="#Atan2">func Atan2(y, x float64) float64</a></dd>
			
				
				<dd><a href="#Atanh">func Atanh(x float64) float64</a></dd>
			
				
				<dd><a href="#Cbrt">func Cbrt(x float64) float64</a></dd>
			
				
				<dd><a href="#Ceil">func Ceil(x float64) float64</a></dd>
			
				
				<dd><a href="#Copysign">func Copysign(x, y float64) float64</a></dd>
			
				
				<dd><a href="#Cos">func Cos(x float64) float64</a></dd>
			
				
				<dd><a href="#Cosh">func Cosh(x float64) float64</a></dd>
			
				
				<dd><a href="#Dim">func Dim(x, y float64) float64</a></dd>
			
				
				<dd><a href="#Erf">func Erf(x float64) float64</a></dd>
			
				
				<dd><a href="#Erfc">func Erfc(x float64) float64</a></dd>
			
				
				<dd><a href="#Exp">func Exp(x float64) float64</a></dd>
			
				
				<dd><a href="#Exp2">func Exp2(x float64) float64</a></dd>
			
				
				<dd><a href="#Expm1">func Expm1(x float64) float64</a></dd>
			
				
				<dd><a href="#Float32bits">func Float32bits(f float32) uint32</a></dd>
			
				
				<dd><a href="#Float32frombits">func Float32frombits(b uint32) float32</a></dd>
			
				
				<dd><a href="#Float64bits">func Float64bits(f float64) uint64</a></dd>
			
				
				<dd><a href="#Float64frombits">func Float64frombits(b uint64) float64</a></dd>
			
				
				<dd><a href="#Floor">func Floor(x float64) float64</a></dd>
			
				
				<dd><a href="#Frexp">func Frexp(f float64) (frac float64, exp int)</a></dd>
			
				
				<dd><a href="#Gamma">func Gamma(x float64) float64</a></dd>
			
				
				<dd><a href="#Hypot">func Hypot(p, q float64) float64</a></dd>
			
				
				<dd><a href="#Ilogb">func Ilogb(x float64) int</a></dd>
			
				
				<dd><a href="#Inf">func Inf(sign int) float64</a></dd>
			
				
				<dd><a href="#IsInf">func IsInf(f float64, sign int) bool</a></dd>
			
				
				<dd><a href="#IsNaN">func IsNaN(f float64) (is bool)</a></dd>
			
				
				<dd><a href="#J0">func J0(x float64) float64</a></dd>
			
				
				<dd><a href="#J1">func J1(x float64) float64</a></dd>
			
				
				<dd><a href="#Jn">func Jn(n int, x float64) float64</a></dd>
			
				
				<dd><a href="#Ldexp">func Ldexp(frac float64, exp int) float64</a></dd>
			
				
				<dd><a href="#Lgamma">func Lgamma(x float64) (lgamma float64, sign int)</a></dd>
			
				
				<dd><a href="#Log">func Log(x float64) float64</a></dd>
			
				
				<dd><a href="#Log10">func Log10(x float64) float64</a></dd>
			
				
				<dd><a href="#Log1p">func Log1p(x float64) float64</a></dd>
			
				
				<dd><a href="#Log2">func Log2(x float64) float64</a></dd>
			
				
				<dd><a href="#Logb">func Logb(x float64) float64</a></dd>
			
				
				<dd><a href="#Max">func Max(x, y float64) float64</a></dd>
			
				
				<dd><a href="#Min">func Min(x, y float64) float64</a></dd>
			
				
				<dd><a href="#Mod">func Mod(x, y float64) float64</a></dd>
			
				
				<dd><a href="#Modf">func Modf(f float64) (int float64, frac float64)</a></dd>
			
				
				<dd><a href="#NaN">func NaN() float64</a></dd>
			
				
				<dd><a href="#Nextafter">func Nextafter(x, y float64) (r float64)</a></dd>
			
				
				<dd><a href="#Pow">func Pow(x, y float64) float64</a></dd>
			
				
				<dd><a href="#Pow10">func Pow10(e int) float64</a></dd>
			
				
				<dd><a href="#Remainder">func Remainder(x, y float64) float64</a></dd>
			
				
				<dd><a href="#Signbit">func Signbit(x float64) bool</a></dd>
			
				
				<dd><a href="#Sin">func Sin(x float64) float64</a></dd>
			
				
				<dd><a href="#Sincos">func Sincos(x float64) (sin, cos float64)</a></dd>
			
				
				<dd><a href="#Sinh">func Sinh(x float64) float64</a></dd>
			
				
				<dd><a href="#Sqrt">func Sqrt(x float64) float64</a></dd>
			
				
				<dd><a href="#Tan">func Tan(x float64) float64</a></dd>
			
				
				<dd><a href="#Tanh">func Tanh(x float64) float64</a></dd>
			
				
				<dd><a href="#Trunc">func Trunc(x float64) float64</a></dd>
			
				
				<dd><a href="#Y0">func Y0(x float64) float64</a></dd>
			
				
				<dd><a href="#Y1">func Y1(x float64) float64</a></dd>
			
				
				<dd><a href="#Yn">func Yn(n int, x float64) float64</a></dd>
			
			
			
		</dl>

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="src/pkg/math/abs.htm">abs.go</a>
			
				<a href="src/pkg/math/acosh.htm">acosh.go</a>
			
				<a href="src/pkg/math/asin.htm">asin.go</a>
			
				<a href="src/pkg/math/asinh.htm">asinh.go</a>
			
				<a href="src/pkg/math/atan.htm">atan.go</a>
			
				<a href="src/pkg/math/atan2.htm">atan2.go</a>
			
				<a href="src/pkg/math/atanh.htm">atanh.go</a>
			
				<a href="src/pkg/math/bits.htm">bits.go</a>
			
				<a href="src/pkg/math/cbrt.htm">cbrt.go</a>
			
				<a href="src/pkg/math/const.htm">const.go</a>
			
				<a href="src/pkg/math/copysign.htm">copysign.go</a>
			
				<a href="src/pkg/math/dim.htm">dim.go</a>
			
				<a href="src/pkg/math/erf.htm">erf.go</a>
			
				<a href="src/pkg/math/exp.htm">exp.go</a>
			
				<a href="src/pkg/math/expm1.htm">expm1.go</a>
			
				<a href="src/pkg/math/floor.htm">floor.go</a>
			
				<a href="src/pkg/math/frexp.htm">frexp.go</a>
			
				<a href="src/pkg/math/gamma.htm">gamma.go</a>
			
				<a href="src/pkg/math/hypot.htm">hypot.go</a>
			
				<a href="src/pkg/math/j0.htm">j0.go</a>
			
				<a href="src/pkg/math/j1.htm">j1.go</a>
			
				<a href="src/pkg/math/jn.htm">jn.go</a>
			
				<a href="src/pkg/math/ldexp.htm">ldexp.go</a>
			
				<a href="src/pkg/math/lgamma.htm">lgamma.go</a>
			
				<a href="src/pkg/math/log.htm">log.go</a>
			
				<a href="src/pkg/math/log10.htm">log10.go</a>
			
				<a href="src/pkg/math/log1p.htm">log1p.go</a>
			
				<a href="src/pkg/math/logb.htm">logb.go</a>
			
				<a href="src/pkg/math/mod.htm">mod.go</a>
			
				<a href="src/pkg/math/modf.htm">modf.go</a>
			
				<a href="src/pkg/math/nextafter.htm">nextafter.go</a>
			
				<a href="src/pkg/math/pow.htm">pow.go</a>
			
				<a href="src/pkg/math/pow10.htm">pow10.go</a>
			
				<a href="src/pkg/math/remainder.htm">remainder.go</a>
			
				<a href="src/pkg/math/signbit.htm">signbit.go</a>
			
				<a href="src/pkg/math/sin.htm">sin.go</a>
			
				<a href="src/pkg/math/sincos.htm">sincos.go</a>
			
				<a href="src/pkg/math/sinh.htm">sinh.go</a>
			
				<a href="src/pkg/math/sqrt.htm">sqrt.go</a>
			
				<a href="src/pkg/math/tan.htm">tan.go</a>
			
				<a href="src/pkg/math/tanh.htm">tanh.go</a>
			
				<a href="src/pkg/math/unsafe.htm">unsafe.go</a>
			
			</span>
			</p>
		
	
		
			<h2 id="constants">Constants</h2>
			
				<pre>const (
    E   = 2.71828182845904523536028747135266249775724709369995957496696763 <span class="comment">// A001113</span>
    Pi  = 3.14159265358979323846264338327950288419716939937510582097494459 <span class="comment">// A000796</span>
    Phi = 1.61803398874989484820458683436563811772030917980576286213544862 <span class="comment">// A001622</span>

    Sqrt2   = 1.41421356237309504880168872420969807856967187537694807317667974 <span class="comment">// A002193</span>
    SqrtE   = 1.64872127070012814684865078781416357165377610071014801157507931 <span class="comment">// A019774</span>
    SqrtPi  = 1.77245385090551602729816748334114518279754945612238712821380779 <span class="comment">// A002161</span>
    SqrtPhi = 1.27201964951406896425242246173749149171560804184009624861664038 <span class="comment">// A139339</span>

    Ln2    = 0.693147180559945309417232121458176568075500134360255254120680009 <span class="comment">// A002162</span>
    Log2E  = 1 / Ln2
    Ln10   = 2.30258509299404568401799145468436420760110148862877297603332790 <span class="comment">// A002392</span>
    Log10E = 1 / Ln10
)</pre>
				<p>
Mathematical constants.
Reference: <a href="http://oeis.org/Axxxxxx">http://oeis.org/Axxxxxx</a>
</p>

			
				<pre>const (
    MaxFloat32             = 3.40282346638528859811704183484516925440e+38  <span class="comment">// 2**127 * (2**24 - 1) / 2**23</span>
    SmallestNonzeroFloat32 = 1.401298464324817070923729583289916131280e-45 <span class="comment">// 1 / 2**(127 - 1 + 23)</span>

    MaxFloat64             = 1.797693134862315708145274237317043567981e+308 <span class="comment">// 2**1023 * (2**53 - 1) / 2**52</span>
    SmallestNonzeroFloat64 = 4.940656458412465441765687928682213723651e-324 <span class="comment">// 1 / 2**(1023 - 1 + 52)</span>
)</pre>
				<p>
Floating-point limit values.
Max is the largest finite value representable by the type.
SmallestNonzero is the smallest positive, non-zero value representable by the type.
</p>

			
				<pre>const (
    MaxInt8   = 1&lt;&lt;7 - 1
    MinInt8   = -1 &lt;&lt; 7
    MaxInt16  = 1&lt;&lt;15 - 1
    MinInt16  = -1 &lt;&lt; 15
    MaxInt32  = 1&lt;&lt;31 - 1
    MinInt32  = -1 &lt;&lt; 31
    MaxInt64  = 1&lt;&lt;63 - 1
    MinInt64  = -1 &lt;&lt; 63
    MaxUint8  = 1&lt;&lt;8 - 1
    MaxUint16 = 1&lt;&lt;16 - 1
    MaxUint32 = 1&lt;&lt;32 - 1
    MaxUint64 = 1&lt;&lt;64 - 1
)</pre>
				<p>
Integer limit values.
</p>

			
		
		
		
			
			
			<h2 id="Abs">func <a href="src/pkg/math/abs.htm#L2">Abs</a></h2>
			<pre>func Abs(x float64) float64</pre>
			<p>
Abs returns the absolute value of x.
</p>
<p>
Special cases are:
</p>
<pre>Abs(Inf) = +Inf
Abs(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Acos">func <a href="src/pkg/math/asin.htm#L41">Acos</a></h2>
			<pre>func Acos(x float64) float64</pre>
			<p>
Acos returns the arccosine of x.
</p>
<p>
Special case is:
</p>
<pre>Acos(x) = NaN if x &lt; -1 or x &gt; 1
</pre>

			
		
			
			
			<h2 id="Acosh">func <a href="src/pkg/math/acosh.htm#L32">Acosh</a></h2>
			<pre>func Acosh(x float64) float64</pre>
			<p>
Acosh(x) calculates the inverse hyperbolic cosine of x.
</p>
<p>
Special cases are:
</p>
<pre>Acosh(+Inf) = +Inf
Acosh(x) = NaN if x &lt; 1
Acosh(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Asin">func <a href="src/pkg/math/asin.htm#L9">Asin</a></h2>
			<pre>func Asin(x float64) float64</pre>
			<p>
Asin returns the arcsine of x.
</p>
<p>
Special cases are:
</p>
<pre>Asin(0) = 0
Asin(x) = NaN if x &lt; -1 or x &gt; 1
</pre>

			
		
			
			
			<h2 id="Asinh">func <a href="src/pkg/math/asinh.htm#L29">Asinh</a></h2>
			<pre>func Asinh(x float64) float64</pre>
			<p>
Asinh(x) calculates the inverse hyperbolic sine of x.
</p>
<p>
Special cases are:
</p>
<pre>Asinh(0) = 0
Asinh(Inf) = Inf
Asinh(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Atan">func <a href="src/pkg/math/atan.htm#L44">Atan</a></h2>
			<pre>func Atan(x float64) float64</pre>
			<p>
Atan returns the arctangent of x.
</p>
<p>
Special cases are:
</p>
<pre>Atan(0) = 0
Atan(Inf) = Pi/2
</pre>

			
		
			
			
			<h2 id="Atan2">func <a href="src/pkg/math/atan2.htm#L19">Atan2</a></h2>
			<pre>func Atan2(y, x float64) float64</pre>
			<p>
Atan2 returns the arc tangent of y/x, using
the signs of the two to determine the quadrant
of the return value.
</p>
<p>
Special cases are (in order):
</p>
<pre>Atan2(y, NaN) = NaN
Atan2(NaN, x) = NaN
Atan2(+0, x&gt;=0) = +0
Atan2(-0, x&gt;=0) = -0
Atan2(+0, x&lt;=-0) = +Pi
Atan2(-0, x&lt;=-0) = -Pi
Atan2(y&gt;0, 0) = +Pi/2
Atan2(y&lt;0, 0) = -Pi/2
Atan2(+Inf, +Inf) = +Pi/4
Atan2(-Inf, +Inf) = -Pi/4
Atan2(+Inf, -Inf) = 3Pi/4
Atan2(-Inf, -Inf) = -3Pi/4
Atan2(y, +Inf) = 0
Atan2(y&gt;0, -Inf) = +Pi
Atan2(y&lt;0, -Inf) = -Pi
Atan2(+Inf, x) = +Pi/2
Atan2(-Inf, x) = -Pi/2
</pre>

			
		
			
			
			<h2 id="Atanh">func <a href="src/pkg/math/atanh.htm#L37">Atanh</a></h2>
			<pre>func Atanh(x float64) float64</pre>
			<p>
Atanh(x) calculates the inverse hyperbolic tangent of x.
</p>
<p>
Special cases are:
</p>
<pre>Atanh(1) = +Inf
Atanh(0) = 0
Atanh(-1) = -Inf
Atanh(x) = NaN if x &lt; -1 or x &gt; 1
Atanh(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Cbrt">func <a href="src/pkg/math/cbrt.htm#L11">Cbrt</a></h2>
			<pre>func Cbrt(x float64) float64</pre>
			<p>
Cbrt returns the cube root of its argument.
</p>
<p>
Special cases are:
</p>
<pre>Cbrt(0) = 0
Cbrt(Inf) = Inf
Cbrt(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Ceil">func <a href="src/pkg/math/floor.htm#L26">Ceil</a></h2>
			<pre>func Ceil(x float64) float64</pre>
			<p>
Ceil returns the least integer value greater than or equal to x.
</p>
<p>
Special cases are:
</p>
<pre>Ceil(0) = 0
Ceil(Inf) = Inf
Ceil(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Copysign">func <a href="src/pkg/math/copysign.htm#L1">Copysign</a></h2>
			<pre>func Copysign(x, y float64) float64</pre>
			<p>
Copysign(x, y) returns a value with the magnitude
of x and the sign of y.
</p>

			
		
			
			
			<h2 id="Cos">func <a href="src/pkg/math/sin.htm#L107">Cos</a></h2>
			<pre>func Cos(x float64) float64</pre>
			<p>
Cos returns the cosine of x.
</p>
<p>
Special cases are:
</p>
<pre>Cos(Inf) = NaN
Cos(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Cosh">func <a href="src/pkg/math/sinh.htm#L59">Cosh</a></h2>
			<pre>func Cosh(x float64) float64</pre>
			<p>
Cosh returns the hyperbolic cosine of x.
</p>
<p>
Special cases are:
</p>
<pre>Cosh(0) = 1
Cosh(Inf) = +Inf
Cosh(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Dim">func <a href="src/pkg/math/dim.htm#L3">Dim</a></h2>
			<pre>func Dim(x, y float64) float64</pre>
			<p>
Dim returns the maximum of x-y or 0.
</p>
<p>
Special cases are:
</p>
<pre>Dim(+Inf, +Inf) = NaN
Dim(-Inf, -Inf) = NaN
Dim(x, NaN) = Dim(NaN, x) = NaN
</pre>

			
		
			
			
			<h2 id="Erf">func <a href="src/pkg/math/erf.htm#L178">Erf</a></h2>
			<pre>func Erf(x float64) float64</pre>
			<p>
Erf(x) returns the error function of x.
</p>
<p>
Special cases are:
</p>
<pre>Erf(+Inf) = 1
Erf(-Inf) = -1
Erf(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Erfc">func <a href="src/pkg/math/erf.htm#L255">Erfc</a></h2>
			<pre>func Erfc(x float64) float64</pre>
			<p>
Erfc(x) returns the complementary error function of x.
</p>
<p>
Special cases are:
</p>
<pre>Erfc(+Inf) = 0
Erfc(-Inf) = 2
Erfc(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Exp">func <a href="src/pkg/math/exp.htm#L4">Exp</a></h2>
			<pre>func Exp(x float64) float64</pre>
			<p>
Exp returns e**x, the base-e exponential of x.
</p>
<p>
Special cases are:
</p>
<pre>Exp(+Inf) = +Inf
Exp(NaN) = NaN
</pre>
<p>
Very large values overflow to 0 or +Inf.
Very small values underflow to 1.
</p>

			
		
			
			
			<h2 id="Exp2">func <a href="src/pkg/math/exp.htm#L125">Exp2</a></h2>
			<pre>func Exp2(x float64) float64</pre>
			<p>
Exp2 returns 2**x, the base-2 exponential of x.
</p>
<p>
Special cases are the same as Exp.
</p>

			
		
			
			
			<h2 id="Expm1">func <a href="src/pkg/math/expm1.htm#L114">Expm1</a></h2>
			<pre>func Expm1(x float64) float64</pre>
			<p>
Expm1 returns e**x - 1, the base-e exponential of x minus 1.
It is more accurate than Exp(x) - 1 when x is near zero.
</p>
<p>
Special cases are:
</p>
<pre>Expm1(+Inf) = +Inf
Expm1(-Inf) = -1
Expm1(NaN) = NaN
</pre>
<p>
Very large values overflow to -1 or +Inf.
</p>

			
		
			
			
			<h2 id="Float32bits">func <a href="src/pkg/math/unsafe.htm#L1">Float32bits</a></h2>
			<pre>func Float32bits(f float32) uint32</pre>
			<p>
Float32bits returns the IEEE 754 binary representation of f.
</p>

			
		
			
			
			<h2 id="Float32frombits">func <a href="src/pkg/math/unsafe.htm#L4">Float32frombits</a></h2>
			<pre>func Float32frombits(b uint32) float32</pre>
			<p>
Float32frombits returns the floating point number corresponding
to the IEEE 754 binary representation b.
</p>

			
		
			
			
			<h2 id="Float64bits">func <a href="src/pkg/math/unsafe.htm#L7">Float64bits</a></h2>
			<pre>func Float64bits(f float64) uint64</pre>
			<p>
Float64bits returns the IEEE 754 binary representation of f.
</p>

			
		
			
			
			<h2 id="Float64frombits">func <a href="src/pkg/math/unsafe.htm#L11">Float64frombits</a></h2>
			<pre>func Float64frombits(b uint64) float64</pre>
			<p>
Float64frombits returns the floating point number corresponding
the IEEE 754 binary representation b.
</p>

			
		
			
			
			<h2 id="Floor">func <a href="src/pkg/math/floor.htm#L3">Floor</a></h2>
			<pre>func Floor(x float64) float64</pre>
			<p>
Floor returns the greatest integer value less than or equal to x.
</p>
<p>
Special cases are:
</p>
<pre>Floor(0) = 0
Floor(Inf) = Inf
Floor(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Frexp">func <a href="src/pkg/math/frexp.htm#L6">Frexp</a></h2>
			<pre>func Frexp(f float64) (frac float64, exp int)</pre>
			<p>
Frexp breaks f into a normalized fraction
and an integral power of two.
It returns frac and exp satisfying f == frac  2**exp,
with the absolute value of frac in the interval [?, 1).
</p>
<p>
Special cases are:
</p>
<pre>Frexp(0) = 0, 0
Frexp(Inf) = Inf, 0
Frexp(NaN) = NaN, 0
</pre>

			
		
			
			
			<h2 id="Gamma">func <a href="src/pkg/math/gamma.htm#L110">Gamma</a></h2>
			<pre>func Gamma(x float64) float64</pre>
			<p>
Gamma(x) returns the Gamma function of x.
</p>
<p>
Special cases are:
</p>
<pre>Gamma(Inf) = Inf
Gamma(NaN) = NaN
</pre>
<p>
Large values overflow to +Inf.
Zero and negative integer arguments return Inf.
</p>

			
		
			
			
			<h2 id="Hypot">func <a href="src/pkg/math/hypot.htm#L7">Hypot</a></h2>
			<pre>func Hypot(p, q float64) float64</pre>
			<p>
Hypot computes Sqrt(p*p + q*q), taking care to avoid
unnecessary overflow and underflow.
</p>
<p>
Special cases are:
</p>
<pre>Hypot(p, q) = +Inf if p or q is infinite
Hypot(p, q) = NaN if p or q is NaN
</pre>

			
		
			
			
			<h2 id="Ilogb">func <a href="src/pkg/math/logb.htm#L22">Ilogb</a></h2>
			<pre>func Ilogb(x float64) int</pre>
			<p>
Ilogb(x) returns the binary exponent of x as an integer.
</p>
<p>
Special cases are:
</p>
<pre>Ilogb(Inf) = MaxInt32
Ilogb(0) = MinInt32
Ilogb(NaN) = MaxInt32
</pre>

			
		
			
			
			<h2 id="Inf">func <a href="src/pkg/math/bits.htm#L7">Inf</a></h2>
			<pre>func Inf(sign int) float64</pre>
			<p>
Inf returns positive infinity if sign &gt;= 0, negative infinity if sign &lt; 0.
</p>

			
		
			
			
			<h2 id="IsInf">func <a href="src/pkg/math/bits.htm#L33">IsInf</a></h2>
			<pre>func IsInf(f float64, sign int) bool</pre>
			<p>
IsInf returns whether f is an infinity, according to sign.
If sign &gt; 0, IsInf returns whether f is positive infinity.
If sign &lt; 0, IsInf returns whether f is negative infinity.
If sign == 0, IsInf returns whether f is either infinity.
</p>

			
		
			
			
			<h2 id="IsNaN">func <a href="src/pkg/math/bits.htm#L21">IsNaN</a></h2>
			<pre>func IsNaN(f float64) (is bool)</pre>
			<p>
IsNaN returns whether f is an IEEE 754 &ldquo;not-a-number&rdquo; value.
</p>

			
		
			
			
			<h2 id="J0">func <a href="src/pkg/math/j0.htm#L66">J0</a></h2>
			<pre>func J0(x float64) float64</pre>
			<p>
J0 returns the order-zero Bessel function of the first kind.
</p>
<p>
Special cases are:
</p>
<pre>J0(Inf) = 0
J0(0) = 1
J0(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="J1">func <a href="src/pkg/math/j1.htm#L64">J1</a></h2>
			<pre>func J1(x float64) float64</pre>
			<p>
J1 returns the order-one Bessel function of the first kind.
</p>
<p>
Special cases are:
</p>
<pre>J1(Inf) = 0
J1(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Jn">func <a href="src/pkg/math/jn.htm#L43">Jn</a></h2>
			<pre>func Jn(n int, x float64) float64</pre>
			<p>
Jn returns the order-n Bessel function of the first kind.
</p>
<p>
Special cases are:
</p>
<pre>Jn(n, Inf) = 0
Jn(n, NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Ldexp">func <a href="src/pkg/math/ldexp.htm#L4">Ldexp</a></h2>
			<pre>func Ldexp(frac float64, exp int) float64</pre>
			<p>
Ldexp is the inverse of Frexp.
It returns frac  2**exp.
</p>
<p>
Special cases are:
</p>
<pre>Ldexp(0, exp) = 0
Ldexp(Inf, exp) = Inf
Ldexp(NaN, exp) = NaN
</pre>

			
		
			
			
			<h2 id="Lgamma">func <a href="src/pkg/math/lgamma.htm#L164">Lgamma</a></h2>
			<pre>func Lgamma(x float64) (lgamma float64, sign int)</pre>
			<p>
Lgamma returns the natural logarithm and sign (-1 or +1) of Gamma(x).
</p>
<p>
Special cases are:
</p>
<pre>Lgamma(+Inf) = +Inf
Lgamma(0) = +Inf
Lgamma(-integer) = +Inf
Lgamma(-Inf) = -Inf
Lgamma(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Log">func <a href="src/pkg/math/log.htm#L70">Log</a></h2>
			<pre>func Log(x float64) float64</pre>
			<p>
Log returns the natural logarithm of x.
</p>
<p>
Special cases are:
</p>
<pre>Log(+Inf) = +Inf
Log(0) = -Inf
Log(x &lt; 0) = NaN
Log(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Log10">func <a href="src/pkg/math/log10.htm#L1">Log10</a></h2>
			<pre>func Log10(x float64) float64</pre>
			<p>
Log10 returns the decimal logarithm of x.
The special cases are the same as for Log.
</p>

			
		
			
			
			<h2 id="Log1p">func <a href="src/pkg/math/log1p.htm#L85">Log1p</a></h2>
			<pre>func Log1p(x float64) float64</pre>
			<p>
Log1p returns the natural logarithm of 1 plus its argument x.
It is more accurate than Log(1 + x) when x is near zero.
</p>
<p>
Special cases are:
</p>
<pre>Log1p(+Inf) = +Inf
Log1p(0) = 0
Log1p(-1) = -Inf
Log1p(x &lt; -1) = NaN
Log1p(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Log2">func <a href="src/pkg/math/log10.htm#L7">Log2</a></h2>
			<pre>func Log2(x float64) float64</pre>
			<p>
Log2 returns the binary logarithm of x.
The special cases are the same as for Log.
</p>

			
		
			
			
			<h2 id="Logb">func <a href="src/pkg/math/logb.htm#L3">Logb</a></h2>
			<pre>func Logb(x float64) float64</pre>
			<p>
Logb(x) returns the binary exponent of x.
</p>
<p>
Special cases are:
</p>
<pre>Logb(Inf) = +Inf
Logb(0) = -Inf
Logb(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Max">func <a href="src/pkg/math/dim.htm#L16">Max</a></h2>
			<pre>func Max(x, y float64) float64</pre>
			<p>
Max returns the larger of x or y.
</p>
<p>
Special cases are:
</p>
<pre>Max(x, +Inf) = Max(+Inf, x) = +Inf
Max(x, NaN) = Max(NaN, x) = NaN
Max(+0, 0) = Max(0, +0) = +0
Max(-0, -0) = -0
</pre>

			
		
			
			
			<h2 id="Min">func <a href="src/pkg/math/dim.htm#L43">Min</a></h2>
			<pre>func Min(x, y float64) float64</pre>
			<p>
Min returns the smaller of x or y.
</p>
<p>
Special cases are:
</p>
<pre>Min(x, -Inf) = Min(-Inf, x) = -Inf
Min(x, NaN) = Min(NaN, x) = NaN
Min(-0, 0) = Min(0, -0) = -0
</pre>

			
		
			
			
			<h2 id="Mod">func <a href="src/pkg/math/mod.htm#L11">Mod</a></h2>
			<pre>func Mod(x, y float64) float64</pre>
			<p>
Mod returns the floating-point remainder of x/y.
The magnitude of the result is less than y and its
sign agrees with that of x.
</p>
<p>
Special cases are:
</p>
<pre>Mod(Inf, y) = NaN
Mod(NaN, y) = NaN
Mod(x, 0) = NaN
Mod(x, Inf) = x
Mod(x, NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Modf">func <a href="src/pkg/math/modf.htm#L3">Modf</a></h2>
			<pre>func Modf(f float64) (int float64, frac float64)</pre>
			<p>
Modf returns integer and fractional floating-point numbers
that sum to f.  Both values have the same sign as f.
</p>
<p>
Special cases are:
</p>
<pre>Modf(Inf) = Inf, NaN
Modf(NaN) = NaN, NaN
</pre>

			
		
			
			
			<h2 id="NaN">func <a href="src/pkg/math/bits.htm#L18">NaN</a></h2>
			<pre>func NaN() float64</pre>
			<p>
NaN returns an IEEE 754 &ldquo;not-a-number&rdquo; value.
</p>

			
		
			
			
			<h2 id="Nextafter">func <a href="src/pkg/math/nextafter.htm#L3">Nextafter</a></h2>
			<pre>func Nextafter(x, y float64) (r float64)</pre>
			<p>
Nextafter returns the next representable value after x towards y.
If x == y, then x is returned.
</p>
<p>
Special cases are:
</p>
<pre>Nextafter(NaN, y) = NaN
Nextafter(x, NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Pow">func <a href="src/pkg/math/pow.htm#L28">Pow</a></h2>
			<pre>func Pow(x, y float64) float64</pre>
			<p>
Pow returns x**y, the base-x exponential of y.
</p>
<p>
Special cases are (in order):
</p>
<pre>Pow(x, 0) = 1 for any x
Pow(1, y) = 1 for any y
Pow(x, 1) = x for any x
Pow(NaN, y) = NaN
Pow(x, NaN) = NaN
Pow(0, y) = Inf for y an odd integer &lt; 0
Pow(0, -Inf) = +Inf
Pow(0, +Inf) = +0
Pow(0, y) = +Inf for finite y &lt; 0 and not an odd integer
Pow(0, y) = 0 for y an odd integer &gt; 0
Pow(0, y) = +0 for finite y &gt; 0 and not an odd integer
Pow(-1, Inf) = 1
Pow(x, +Inf) = +Inf for |x| &gt; 1
Pow(x, -Inf) = +0 for |x| &gt; 1
Pow(x, +Inf) = +0 for |x| &lt; 1
Pow(x, -Inf) = +Inf for |x| &lt; 1
Pow(+Inf, y) = +Inf for y &gt; 0
Pow(+Inf, y) = +0 for y &lt; 0
Pow(-Inf, y) = Pow(-0, -y)
Pow(x, y) = NaN for finite x &lt; 0 and finite non-integer y
</pre>

			
		
			
			
			<h2 id="Pow10">func <a href="src/pkg/math/pow10.htm#L6">Pow10</a></h2>
			<pre>func Pow10(e int) float64</pre>
			<p>
Pow10 returns 10**e, the base-10 exponential of e.
</p>
<p>
Special cases are:
</p>
<pre>Pow10(e) = +Inf for e &gt; 309
Pow10(e) = 0 for e &lt; -324
</pre>

			
		
			
			
			<h2 id="Remainder">func <a href="src/pkg/math/remainder.htm#L27">Remainder</a></h2>
			<pre>func Remainder(x, y float64) float64</pre>
			<p>
Remainder returns the IEEE 754 floating-point remainder of x/y.
</p>
<p>
Special cases are:
</p>
<pre>Remainder(Inf, y) = NaN
Remainder(NaN, y) = NaN
Remainder(x, 0) = NaN
Remainder(x, Inf) = x
Remainder(x, NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Signbit">func <a href="src/pkg/math/signbit.htm#L1">Signbit</a></h2>
			<pre>func Signbit(x float64) bool</pre>
			<p>
Signbit returns true if x is negative or negative zero.
</p>

			
		
			
			
			<h2 id="Sin">func <a href="src/pkg/math/sin.htm#L164">Sin</a></h2>
			<pre>func Sin(x float64) float64</pre>
			<p>
Sin returns the sine of x.
</p>
<p>
Special cases are:
</p>
<pre>Sin(0) = 0
Sin(Inf) = NaN
Sin(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Sincos">func <a href="src/pkg/math/sincos.htm#L5">Sincos</a></h2>
			<pre>func Sincos(x float64) (sin, cos float64)</pre>
			<p>
Sincos(x) returns Sin(x), Cos(x).
</p>
<p>
Special cases are:
</p>
<pre>Sincos(0) = 0, 1
Sincos(Inf) = NaN, NaN
Sincos(NaN) = NaN, NaN
</pre>

			
		
			
			
			<h2 id="Sinh">func <a href="src/pkg/math/sinh.htm#L15">Sinh</a></h2>
			<pre>func Sinh(x float64) float64</pre>
			<p>
Sinh returns the hyperbolic sine of x.
</p>
<p>
Special cases are:
</p>
<pre>Sinh(0) = 0
Sinh(Inf) = Inf
Sinh(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Sqrt">func <a href="src/pkg/math/sqrt.htm#L4">Sqrt</a></h2>
			<pre>func Sqrt(x float64) float64</pre>
			<p>
Sqrt returns the square root of x.
</p>
<p>
Special cases are:
</p>
<pre>Sqrt(+Inf) = +Inf
Sqrt(0) = 0
Sqrt(x &lt; 0) = NaN
Sqrt(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Tan">func <a href="src/pkg/math/tan.htm#L72">Tan</a></h2>
			<pre>func Tan(x float64) float64</pre>
			<p>
Tan returns the tangent of x.
</p>
<p>
Special cases are:
</p>
<pre>Tan(0) = 0
Tan(Inf) = NaN
Tan(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Tanh">func <a href="src/pkg/math/tanh.htm#L10">Tanh</a></h2>
			<pre>func Tanh(x float64) float64</pre>
			<p>
Tanh computes the hyperbolic tangent of x.
</p>
<p>
Special cases are:
</p>
<pre>Tanh(0) = 0
Tanh(Inf) = 1
Tanh(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Trunc">func <a href="src/pkg/math/floor.htm#L38">Trunc</a></h2>
			<pre>func Trunc(x float64) float64</pre>
			<p>
Trunc returns the integer value of x.
</p>
<p>
Special cases are:
</p>
<pre>Trunc(0) = 0
Trunc(Inf) = Inf
Trunc(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Y0">func <a href="src/pkg/math/j0.htm#L146">Y0</a></h2>
			<pre>func Y0(x float64) float64</pre>
			<p>
Y0 returns the order-zero Bessel function of the second kind.
</p>
<p>
Special cases are:
</p>
<pre>Y0(+Inf) = 0
Y0(0) = -Inf
Y0(x &lt; 0) = NaN
Y0(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Y1">func <a href="src/pkg/math/j1.htm#L144">Y1</a></h2>
			<pre>func Y1(x float64) float64</pre>
			<p>
Y1 returns the order-one Bessel function of the second kind.
</p>
<p>
Special cases are:
</p>
<pre>Y1(+Inf) = 0
Y1(0) = -Inf
Y1(x &lt; 0) = NaN
Y1(NaN) = NaN
</pre>

			
		
			
			
			<h2 id="Yn">func <a href="src/pkg/math/jn.htm#L225">Yn</a></h2>
			<pre>func Yn(n int, x float64) float64</pre>
			<p>
Yn returns the order-n Bessel function of the second kind.
</p>
<p>
Special cases are:
</p>
<pre>Yn(n, +Inf) = 0
Yn(n &gt; 0, 0) = -Inf
Yn(n &lt; 0, 0) = +Inf if n is odd, -Inf if n is even
Y1(n, x &lt; 0) = NaN
Y1(n, NaN) = NaN
</pre>

			
		
		
		</div>
	

	







	
	
		<h2 id="subdirectories">Subdirectories</h2>
	
	<table class="dir">
	<tr>
	<th>Name</th>
	<th>&nbsp;&nbsp;&nbsp;&nbsp;</th>
	<th style="text-align: left; width: auto">Synopsis</th>
	</tr>
			<tr>
			<td class="name"><a href="math_big.htm">big</a></td>
			<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
			<td style="width: auto">Package big implements multi-precision arithmetic (big numbers).</td>
			</tr>
		
	
		
			<tr>
			<td class="name"><a href="math_cmplx.htm">cmplx</a></td>
			<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
			<td style="width: auto">Package cmplx provides basic constants and mathematical functions for complex numbers.</td>
			</tr>
		
	
		
			<tr>
			<td class="name"><a href="math_rand.htm">rand</a></td>
			<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
			<td style="width: auto">Package rand implements pseudo-random number generators.</td>
			</tr>
		
	
	</table>
	



</div>

<div id="footer">
Build version go1.0.1.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/privacy/privacy-policy.html">Privacy Policy</a>
</div>

<script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>
</body>
<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
</html>
